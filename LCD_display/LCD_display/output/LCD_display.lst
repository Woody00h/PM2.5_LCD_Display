

HI-TECH Software Macro Assembler (PSoC MCU) V9.61
                                                                                                           Fri Jun 12 15:43:21 2015


     1                          	opt	pw 132
     2                          	psect	text,global,class=CODE,delta=1
     3                          	psect	maintext,global,class=CODE,delta=1
     4                          	psect	ramdata0,global,class=RAM,space=1,delta=1
     5                          	psect	romdata0,global,class=BANKROM,delta=1
     6                          	psect	cdata,global,reloc=256,class=ROM,delta=1
     7                          	psect	bss0,global,class=RAM,space=1,delta=1
     8                          	psect	strings,global,reloc=256,class=ROM,delta=1
     9                          
    10                          	psect	text
    11  006C                    TMP_DR0	equ	108
    12  006D                    TMP_DR1	equ	109
    13  006E                    TMP_DR2	equ	110
    14  006F                    TMP_DR3	equ	111
    15  00D0                    CUR_PP	equ	208
    16  00D1                    STK_PP	equ	209
    17  00D3                    IDX_PP	equ	211
    18  00D4                    MVR_PP	equ	212
    19  00D5                    MVW_PP	equ	213
    20  00E8                    MUL0_X	equ	232
    21  00E9                    MUL0_Y	equ	233
    22  00EA                    MUL0_DH	equ	234
    23  00EB                    MUL0_DL	equ	235
    24  00A8                    MUL1_X	equ	168
    25  00A9                    MUL1_Y	equ	169
    26  00AA                    MUL1_DH	equ	170
    27  00AB                    MUL1_DL	equ	171
    28                          ;stack_size is 28 bss 92
    29                          ; Stacksize: 28; Bank 0 TOTAL: 127 (0x7F); Other banks TOTAL: 0 (0x0)
    30  0063                    main@ret	equ	??_main
    31  0065                    FrameCheck@checksum	equ	??_FrameCheck
    32  0067                    FrameCheck@i	equ	??_FrameCheck+2
    33  0065                    Si7020Init@my_data	equ	??_Si7020Init
    34  0065                    Si7020Read_RH_NHM@buffer	equ	??_Si7020Read_RH_NHM
    35  0066                    Si7020Read_RH_NHM@ret	equ	??_Si7020Read_RH_NHM+1
    36  0065                    Si7020CalcRH@data	equ	??_Si7020CalcRH
    37  0067                    Si7020CalcRH@temp	equ	??_Si7020CalcRH+2
    38  006B                    Si7020CalcRH@result	equ	??_Si7020CalcRH+6
    39  0065                    Si7020Read_Temp_after_RHM@buffer	equ	??_Si7020Read_Temp_after_RHM
    40  0066                    Si7020Read_Temp_after_RHM@ret	equ	??_Si7020Read_Temp_after_RHM+1
    41  0065                    LightRank@light	equ	??_LightRank
    42  0067                    LightRank@i	equ	??_LightRank+2
    43  0068                    LightRank@duty	equ	??_LightRank+3
    44  0065                    Si7020CalcTemp@data	equ	??_Si7020CalcTemp
    45  0067                    Si7020CalcTemp@temp	equ	??_Si7020CalcTemp+2
    46  006B                    Si7020CalcTemp@result	equ	??_Si7020CalcTemp+6
    47  0065                    LCDOuputAll@k	equ	??_LCDOuputAll
    48  0067                    WriteAll_1621@p	equ	??_WriteAll_1621
    49  0068                    WriteAll_1621@addr	equ	??_WriteAll_1621+1
    50  0069                    WriteAll_1621@i	equ	??_WriteAll_1621+2
    51  0066                    WriteAll_1621@cnt	equ	?_WriteAll_1621
    52  0065                    LeftRotate@k	equ	??_LeftRotate
    53  0066                    _LeftRotate$3395	equ	??_LeftRotate+1
    54  0078                    ___lmul@product	equ	??___lmul
    55  0070                    ___lmul@multiplier	equ	?___lmul
    56  0074                    ___lmul@multiplicand	equ	?___lmul+4
    57  0072                    ___wmul@multiplier	equ	??___wmul
    58  0074                    ___wmul@product	equ	??___wmul+2
    59  0070                    ___wmul@multiplicand	equ	?___wmul
    60  0066                    DisplayPMxx@pm	equ	??_DisplayPMxx
    61  0068                    DisplayPMxx@temp	equ	??_DisplayPMxx+2
    62  006A                    DisplayPMxx@index	equ	??_DisplayPMxx+4
    63  006C                    DisplayPMxx@k	equ	??_DisplayPMxx+6
    64  0066                    ShowHumiTemp@value	equ	??_ShowHumiTemp
    65  0067                    ShowHumiTemp@temp	equ	??_ShowHumiTemp+1
    66  0068                    ShowHumiTemp@index	equ	??_ShowHumiTemp+2
    67  0066                    ShowLife@life	equ	??_ShowLife
    68  0067                    ShowLife@index	equ	??_ShowLife+1
    69  0068                    ShowLife@temp	equ	??_ShowLife+2
    70  0065                    SendCmd@command	equ	??_SendCmd
    71  0067                    Si7020SendCommand@cmd	equ	??_Si7020SendCommand
    72  0068                    IRcvBytes@s	equ	??_IRcvBytes
    73  0069                    IRcvBytes@sla	equ	??_IRcvBytes+1
    74  006A                    IRcvBytes@i	equ	??_IRcvBytes+2
    75  0067                    IRcvBytes@no	equ	?_IRcvBytes
    76  006A                    SendBit_1621@cnt	equ	??_SendBit_1621
    77  006B                    SendBit_1621@data	equ	??_SendBit_1621+1
    78  006C                    SendBit_1621@i	equ	??_SendBit_1621+2
    79  0069                    ___lbdiv@divisor	equ	??___lbdiv
    80  006A                    ___lbdiv@dividend	equ	??___lbdiv+1
    81  006B                    ___lbdiv@quotient	equ	??___lbdiv+2
    82  006C                    ___lbdiv@counter	equ	??___lbdiv+3
    83  006F                    ___lwmod@dividend	equ	??___lwmod
    84  0071                    ___lwmod@counter	equ	??___lwmod+2
    85  006D                    ___lwmod@divisor	equ	?___lwmod
    86  006A                    SendDataBit_1621@cnt	equ	??_SendDataBit_1621
    87  006B                    SendDataBit_1621@data	equ	??_SendDataBit_1621+1
    88  006C                    SendDataBit_1621@i	equ	??_SendDataBit_1621+2
    89  006B                    abs@a	equ	??_abs
    90  006D                    ___awdiv@dividend	equ	??___awdiv
    91  006F                    ___awdiv@quotient	equ	??___awdiv+2
    92  0071                    ___awdiv@sign	equ	??___awdiv+4
    93  0072                    ___awdiv@counter	equ	??___awdiv+5
    94  006B                    ___awdiv@divisor	equ	?___awdiv
    95  0069                    ___lbmod@divisor	equ	??___lbmod
    96  006A                    ___lbmod@dividend	equ	??___lbmod+1
    97  006B                    ___lbmod@rem	equ	??___lbmod+2
    98  006C                    ___lbmod@counter	equ	??___lbmod+3
    99  006D                    ___awmod@dividend	equ	??___awmod
   100  006F                    ___awmod@sign	equ	??___awmod+2
   101  0070                    ___awmod@counter	equ	??___awmod+3
   102  006B                    ___awmod@divisor	equ	?___awmod
   103  006D                    Ack_I2c@a	equ	??_Ack_I2c
   104  006D                    RcvByte@retc	equ	??_RcvByte
   105  006E                    RcvByte@BitCnt	equ	??_RcvByte+1
   106  006F                    ___lwdiv@dividend	equ	??___lwdiv
   107  0071                    ___lwdiv@quotient	equ	??___lwdiv+2
   108  0073                    ___lwdiv@counter	equ	??___lwdiv+4
   109  006D                    ___lwdiv@divisor	equ	?___lwdiv
   110  0068                    ISendByte@c	equ	??_ISendByte
   111  0069                    ISendByte@sla	equ	??_ISendByte+1
   112  006D                    SendByte@c	equ	??_SendByte
   113  006E                    SendByte@BitCnt	equ	??_SendByte+1
   114  0070                    delay_us@us	equ	??_delay_us
   115  007C                    BoardUART@rxdata	equ	??_BoardUART
   116  007C                    SensorUART@rxdata	equ	??_SensorUART
   117                          ; =============== function _main ends ============
   118  3051                    ___start_of_c_program_code:
   119                          ; *************** function _FrameCheck *****************
   120                          ; Defined at:
   121                          ;		line 80 in file "./particlesensor.c"
   122                          ; Parameters:
   123                          ;		None
   124                          ; Auto variables:
   125                          ;		checksum    	       	type: unsigned int 
   126                          ;		i           	       	type: unsigned char 
   127                          ; Return value:
   128                          ;		type: unsigned char 
   129                          ;		size: 1
   130                          ; Registers used:
   131                          ;		a, x, CUR_PP
   132                          ; Tracked objects:
   133                          ;		On entry : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
   134                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
   135                          ;		Unchanged: MVR_PP MVW_PP 
   136                          ; Data sizes:
   137                          ;		Autos:    3
   138                          ;		Params:   0
   139                          ;		Temp:     3
   140                          ;		Total:    6
   141                          ; This function calls:
   142                          ;		Nothing
   143                          ; This function is called by:
   144                          ;		_main
   145                          ; This function uses a non-reentrant model
   146                          ; 
   147  004D                    __size_of_FrameCheck	equ	__end_of_FrameCheck-_FrameCheck
   148                          ;particlesensor.c: 79: unsigned char FrameCheck(void)
   149                          ;particlesensor.c: 80: {
   150                          ;			CUR_PP=0 XIO=0 PG=2 
   151  3051                    _FrameCheck:
   152                          ;particlesensor.c: 81: unsigned int checksum = 0;
   153  3051  55 65  00         	mov	[??_FrameCheck^0], 0
   154  3054  55 66  00         	mov	[(??_FrameCheck^0+1)], 0
   155                          ;particlesensor.c: 82: unsigned char i = 0;
   156                          ;particlesensor.c: 84: for (i = 0; i < (MyPMSUnion.MyPMFrame.Length+2); i++)
   157  3057  57 00             	mov	x, 0
   158  3059  7D 3067           	jmp	l161
   159                          ;			CUR_PP=0 XIO=0 
   160  305C                    l158:
   161                          ;particlesensor.c: 85: {
   162                          ;particlesensor.c: 86: checksum += MyPMSUnion.PMRxBuf[i];
   163  305C  62 D3 00          	mov	reg[211], 0
   164  305F  52 00             	mov	a, [x+_MyPMSUnion]
   165  3061  04 66             	add	[(??_FrameCheck^0+1)], a
   166  3063  0E 65  00         	adc	[??_FrameCheck^0], 0
   167  3066  75                	inc	x
   168                          ;			CUR_PP=0 XIO=0 
   169  3067                    l161:
   170  3067  5F 68  02         	mov	[(??_FrameCheck^0+3)], [(_MyPMSUnion+2)^0]
   171  306A  5F 69  03         	mov	[(??_FrameCheck^0+4)], [(_MyPMSUnion+3)^0]
   172  306D  06 69  02         	add	[(??_FrameCheck^0+4)], 2
   173  3070  0E 68  00         	adc	[(??_FrameCheck^0+3)], 0
   174  3073  5B                	mov	a, x
   175  3074  53 6A             	mov	[(??_FrameCheck^0+5)], a
   176  3076  51 6A             	mov	a, [(??_FrameCheck^0+5)]
   177  3078  3A 69             	cmp	a, [(??_FrameCheck^0+4)]
   178  307A  50 00             	mov	a, 0
   179  307C  1A 68             	sbb	a, [(??_FrameCheck^0+3)]
   180  307E  CFDD              	jc	l158
   181                          ;			CUR_PP=0 XIO=0 
   182                          ;particlesensor.c: 87: }
   183                          ;particlesensor.c: 89: MyPMSUnion.MyPMFrame.Length = 0;
   184  3080  55 02  00         	mov	[(_MyPMSUnion+2)^0], 0
   185  3083  55 03  00         	mov	[((_MyPMSUnion+2)^0+1)], 0
   186                          ;particlesensor.c: 90: MyPMSUnion.MyPMFrame.Head = 0;
   187  3086  55 00  00         	mov	[_MyPMSUnion^0], 0
   188  3089  55 01  00         	mov	[(_MyPMSUnion^0+1)], 0
   189                          ;particlesensor.c: 92: if (checksum == MyPMSUnion.MyPMFrame.checksum)
   190  308C  51 16             	mov	a, [(_MyPMSUnion+22)^0]
   191  308E  3A 65             	cmp	a, [??_FrameCheck^0]
   192  3090  B00A              	jnz	l162
   193  3092  51 17             	mov	a, [((_MyPMSUnion+22)^0+1)]
   194  3094  3A 66             	cmp	a, [(??_FrameCheck^0+1)]
   195  3096  B004              	jnz	l162
   196                          ;particlesensor.c: 93: {
   197                          ;particlesensor.c: 94: return 1;
   198  3098  50 01             	mov	a, 1
   199  309A  7F                	ret
   200                          ;			CUR_PP=0 XIO=0 
   201  309B                    l162:
   202                          ;particlesensor.c: 96: else
   203                          ;particlesensor.c: 97: {
   204                          ;particlesensor.c: 109: return 0;
   205  309B  50 00             	mov	a, 0
   206                          ;particlesensor.c: 110: }
   207                          ;particlesensor.c: 111: }
   208                          ;			CUR_PP=0 XIO=0 
   209  309D  7F                	ret
   210  309E                    __end_of_FrameCheck:
   211                          ; =============== function _FrameCheck ends ============
   212                          ; *************** function _LCD_Init *****************
   213                          ; Defined at:
   214                          ;		line 353 in file "./lcd.c"
   215                          ; Parameters:
   216                          ;		None
   217                          ; Auto variables:
   218                          ;		None
   219                          ; Return value:
   220                          ;		type: void 
   221                          ;		size: 0
   222                          ; Registers used:
   223                          ;		CUR_PP
   224                          ; Tracked objects:
   225                          ;		On entry : CUR_PP=0 IDX_PP? XIO=0 PG=2 MVR_PP? MVW_PP? 
   226                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG=2 MVR_PP? MVW_PP? 
   227                          ;		Unchanged: IDX_PP MVR_PP MVW_PP 
   228                          ; Data sizes:
   229                          ;		Autos:    0
   230                          ;		Params:   0
   231                          ;		Temp:     0
   232                          ;		Total:    0
   233                          ; This function calls:
   234                          ;		Nothing
   235                          ; This function is called by:
   236                          ;		_main
   237                          ; This function uses a non-reentrant model
   238                          ; 
   239  001F                    __size_of_LCD_Init	equ	__end_of_LCD_Init-_LCD_Init
   240                          ;lcd.c: 352: void LCD_Init()
   241                          ;lcd.c: 353: {
   242                          ;			CUR_PP=0 XIO=0 PG=2 
   243  309E                    _LCD_Init:
   244                          ;lcd.c: 354: LifeFlag = 0;
   245  309E  55 3B  00         	mov	[_LifeFlag^0], 0
   246                          ;lcd.c: 355: RH_T_Flag = 1;
   247  30A1  55 43  01         	mov	[_RH_T_Flag^0], 1
   248                          ;lcd.c: 356: mode = 0;
   249  30A4  55 4A  00         	mov	[_mode^0], 0
   250                          ;lcd.c: 357: LockStatus = 1;
   251  30A7  55 3C  01         	mov	[_LockStatus^0], 1
   252                          ;lcd.c: 358: Plasma = 1;
   253  30AA  55 40  01         	mov	[_Plasma^0], 1
   254                          ;lcd.c: 359: Odor = 3;
   255  30AD  55 3D  03         	mov	[_Odor^0], 3
   256                          ;lcd.c: 360: SpeedLvl = 1;
   257  30B0  55 45  01         	mov	[_SpeedLvl^0], 1
   258                          ;lcd.c: 361: PM_Flag = 0;
   259  30B3  55 3F  00         	mov	[_PM_Flag^0], 0
   260                          ;lcd.c: 362: HeapLife = 85;
   261  30B6  55 38  55         	mov	[_HeapLife^0], 85
   262                          ;lcd.c: 363: CarbonLife = 73;
   263  30B9  55 33  49         	mov	[_CarbonLife^0], 73
   264                          ;lcd.c: 364: }
   265                          ;			CUR_PP=0 XIO=0 PG=2 
   266  30BC  7F                	ret
   267  30BD                    __end_of_LCD_Init:
   268                          ; =============== function _LCD_Init ends ============
   269                          ; *************** function _Si7020Init *****************
   270                          ; Defined at:
   271                          ;		line 105 in file "./si7020.c"
   272                          ; Parameters:
   273                          ;		None
   274                          ; Auto variables:
   275                          ;		my_data     	       	type: unsigned char [2]
   276                          ; Return value:
   277                          ;		type: void 
   278                          ;		size: 0
   279                          ; Registers used:
   280                          ;		CUR_PP
   281                          ; Tracked objects:
   282                          ;		On entry : CUR_PP? IDX_PP? XIO=0 PG=2 MVR_PP? MVW_PP? 
   283                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG=2 MVR_PP? MVW_PP? 
   284                          ;		Unchanged: IDX_PP MVR_PP MVW_PP 
   285                          ; Data sizes:
   286                          ;		Autos:    2
   287                          ;		Params:   0
   288                          ;		Temp:     0
   289                          ;		Total:    2
   290                          ; This function calls:
   291                          ;		Nothing
   292                          ; This function is called by:
   293                          ;		_main
   294                          ; This function uses a non-reentrant model
   295                          ; 
   296  000D                    __size_of_Si7020Init	equ	__end_of_Si7020Init-_Si7020Init
   297                          ;si7020.c: 104: void Si7020Init()
   298                          ;si7020.c: 105: {
   299                          ;			XIO=0 PG=2 
   300  30BD                    _Si7020Init:
   301                          ;si7020.c: 106: unsigned char my_data[2];
   302                          ;si7020.c: 107: my_data[0] = 0xE6;
   303  30BD  62 D0 00          	mov	reg[208], 0
   304  30C0  55 65  E6         	mov	[??_Si7020Init^0], 230
   305                          ;si7020.c: 109: ISendStr[0x80,my_data,2];
   306  30C3  55 66  00         	mov	[(??_Si7020Init+1)^0], 0
   307                          ;si7020.c: 110: data_length = 24;
   308  30C6  55 49  18         	mov	[_data_length^0], 24
   309                          ;si7020.c: 111: }
   310                          ;			CUR_PP=0 XIO=0 PG=2 
   311  30C9  7F                	ret
   312  30CA                    __end_of_Si7020Init:
   313                          ; =============== function _Si7020Init ends ============
   314                          ; *************** function _Si7020Read_RH_NHM *****************
   315                          ; Defined at:
   316                          ;		line 18 in file "./si7020.c"
   317                          ; Parameters:
   318                          ;		buffer      	reg:    a	type: PTR unsigned char ; Largest target is 5
   319                          ;		 -> RecBuf(5), 
   320                          ; Auto variables:
   321                          ;		buffer      	       	type: PTR unsigned char ; Largest target is 5
   322                          ;		 -> RecBuf(5), 
   323                          ;		ret         	       	type: unsigned char 
   324                          ; Return value:
   325                          ;		type: void 
   326                          ;		size: 0
   327                          ; Registers used:
   328                          ;		a, x, CUR_PP
   329                          ; Tracked objects:
   330                          ;		On entry : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
   331                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
   332                          ;		Unchanged: MVR_PP MVW_PP 
   333                          ; Data sizes:
   334                          ;		Autos:    2
   335                          ;		Params:   0
   336                          ;		Temp:     0
   337                          ;		Total:    2
   338                          ; This function calls:
   339                          ;		_IRcvBytes
   340                          ; This function is called by:
   341                          ;		_main
   342                          ; This function uses a non-reentrant model
   343                          ; 
   344  001C                    __size_of_Si7020Read_RH_NHM	equ	__end_of_Si7020Read_RH_NHM-_Si7020Read_RH_NHM
   345                          ;si7020.c: 17: void Si7020Read_RH_NHM(unsigned char * buffer)
   346                          ;si7020.c: 18: {
   347                          ;			CUR_PP=0 XIO=0 PG=2 
   348  30CA                    _Si7020Read_RH_NHM:
   349                          ;Si7020Read_RH_NHM@buffer stored from a
   350  30CA  53 65             	mov	[??_Si7020Read_RH_NHM^0], a
   351                          ;si7020.c: 19: char ret;
   352                          ;si7020.c: 20: IICTimeOutTimer = 2;
   353  30CC  55 3A  02         	mov	[_IICTimeOutTimer^0], 2
   354                          ;si7020.c: 21: while (1)
   355                          ;			CUR_PP=0 XIO=0 
   356  30CF                    l167:
   357                          ;si7020.c: 22: {
   358                          ;si7020.c: 23: ret = IRcvBytes(0x80,buffer,3);
   359  30CF  55 67  03         	mov	[?_IRcvBytes^0], 3
   360  30D2  50 80             	mov	a, 128
   361  30D4  58 65             	mov	x, [??_Si7020Read_RH_NHM^0]
   362  30D6  71 80             	or	f, 0x80	;select multiple RAM page mode
   363  30D8  7C 3706           	call	_IRcvBytes
   364  30DB  53 66             	mov	[(??_Si7020Read_RH_NHM+1)^0], a
   365                          ;si7020.c: 24: if (ret || !IICTimeOutTimer)
   366  30DD  51 66             	mov	a, [(??_Si7020Read_RH_NHM+1)^0]
   367  30DF  B005              	jnz	l168
   368  30E1  51 3A             	mov	a, [_IICTimeOutTimer^0]
   369  30E3  BFEB              	jnz	l167
   370                          ;			CUR_PP=0 XIO=0 
   371                          ;si7020.c: 25: break;
   372                          ;			CUR_PP=0 XIO=0 
   373                          ;			CUR_PP=0 XIO=0 
   374  30E5                    l168:
   375                          ;si7020.c: 26: }
   376                          ;si7020.c: 27: }
   377                          ;			CUR_PP=0 XIO=0 
   378  30E5  7F                	ret
   379  30E6                    __end_of_Si7020Read_RH_NHM:
   380                          ; =============== function _Si7020Read_RH_NHM ends ============
   381                          ; *************** function _CRC8Check *****************
   382                          ; Defined at:
   383                          ;		line 128 in file "./si7020.c"
   384                          ; Parameters:
   385                          ;		None
   386                          ; Auto variables:
   387                          ;		None
   388                          ; Return value:
   389                          ;		type: unsigned char 
   390                          ;		size: 1
   391                          ; Registers used:
   392                          ;		a, x, CUR_PP
   393                          ; Tracked objects:
   394                          ;		On entry : CUR_PP=0 IDX_PP=0 XIO=0 PG? MVR_PP? MVW_PP? 
   395                          ;		On exit  : CUR_PP=0 IDX_PP=0 XIO=0 PG? MVR_PP? MVW_PP? 
   396                          ;		Unchanged: MVR_PP MVW_PP 
   397                          ; Data sizes:
   398                          ;		Autos:    0
   399                          ;		Params:   0
   400                          ;		Temp:     0
   401                          ;		Total:    0
   402                          ; This function calls:
   403                          ;		_LeftRotate
   404                          ; This function is called by:
   405                          ;		_main
   406                          ; This function uses a non-reentrant model
   407                          ; 
   408  002A                    __size_of_CRC8Check	equ	__end_of_CRC8Check-_CRC8Check
   409                          ;si7020.c: 127: unsigned char CRC8Check()
   410                          ;si7020.c: 128: {
   411                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
   412  30E6                    _CRC8Check:
   413                          ;si7020.c: 129: while(1)
   414                          ;			CUR_PP=0 IDX_PP=0 XIO=0 PG=2 
   415  30E6                    l188:
   416                          ;si7020.c: 130: {
   417                          ;si7020.c: 131: if(RecBuf[0]&0x80)
   418  30E6  3C 57  80         	cmp	[_RecBuf^0], 128
   419  30E9  C00F              	jc	l190
   420                          ;si7020.c: 132: {
   421                          ;si7020.c: 133: RecBuf[0] ^= poly_h;
   422  30EB  36 57  98         	xor	[_RecBuf^0], 0x98
   423                          ;si7020.c: 134: RecBuf[1] ^= poly_l;
   424  30EE  36 58  80         	xor	[(_RecBuf+1)^0], 0x80
   425                          ;si7020.c: 135: LeftRotate();
   426  30F1  71 80             	or	f, 0x80	;select multiple RAM page mode
   427  30F3  7C 34AD           	call	_LeftRotate
   428                          ;si7020.c: 136: }
   429  30F6  7D 30FE           	jmp	l191
   430                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
   431  30F9                    l190:
   432                          ;si7020.c: 137: else
   433                          ;si7020.c: 138: {
   434                          ;si7020.c: 139: LeftRotate();
   435  30F9  71 80             	or	f, 0x80	;select multiple RAM page mode
   436  30FB  7C 34AD           	call	_LeftRotate
   437                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
   438  30FE                    l191:
   439                          ;si7020.c: 140: }
   440                          ;si7020.c: 142: if(data_length <= 8)
   441  30FE  3C 49  09         	cmp	[_data_length^0], 9
   442  3101  DFE4              	jnc	l188
   443                          ;si7020.c: 143: break;
   444                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
   445                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
   446                          ;si7020.c: 144: }
   447                          ;si7020.c: 146: data_length = 24;
   448  3103  55 49  18         	mov	[_data_length^0], 24
   449                          ;si7020.c: 148: if(!RecBuf[0])
   450  3106  51 57             	mov	a, [_RecBuf^0]
   451  3108  B004              	jnz	l193
   452                          ;si7020.c: 149: {
   453                          ;si7020.c: 150: return 1;
   454  310A  50 01             	mov	a, 1
   455  310C  7F                	ret
   456                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
   457  310D                    l193:
   458                          ;si7020.c: 152: else
   459                          ;si7020.c: 153: {
   460                          ;si7020.c: 154: return 0;
   461  310D  50 00             	mov	a, 0
   462                          ;si7020.c: 155: }
   463                          ;si7020.c: 156: }
   464                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
   465  310F  7F                	ret
   466  3110                    __end_of_CRC8Check:
   467                          ; =============== function _CRC8Check ends ============
   468                          ; *************** function _Si7020CalcRH *****************
   469                          ; Defined at:
   470                          ;		line 77 in file "./si7020.c"
   471                          ; Parameters:
   472                          ;		data        	reg:   xa	type: unsigned int 
   473                          ; Auto variables:
   474                          ;		data        	       	type: unsigned int 
   475                          ;		temp        	       	type: unsigned long 
   476                          ;		result      	       	type: unsigned char 
   477                          ; Return value:
   478                          ;		type: unsigned char 
   479                          ;		size: 1
   480                          ; Registers used:
   481                          ;		a, x, CUR_PP, mret
   482                          ; Tracked objects:
   483                          ;		On entry : CUR_PP=0 IDX_PP? XIO=0 PG=2 MVR_PP? MVW_PP? 
   484                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
   485                          ;		Unchanged: IDX_PP MVR_PP MVW_PP 
   486                          ; Data sizes:
   487                          ;		Autos:    7
   488                          ;		Params:   0
   489                          ;		Temp:     0
   490                          ;		Total:    7
   491                          ; This function calls:
   492                          ;		___lmul
   493                          ; This function is called by:
   494                          ;		_main
   495                          ; This function uses a non-reentrant model
   496                          ; 
   497  0093                    __size_of_Si7020CalcRH	equ	__end_of_Si7020CalcRH-_Si7020CalcRH
   498                          ;si7020.c: 76: unsigned char Si7020CalcRH(unsigned int data)
   499                          ;si7020.c: 77: {
   500                          ;			CUR_PP=0 XIO=0 PG=2 
   501  3110                    _Si7020CalcRH:
   502                          ;Si7020CalcRH@data stored from xa
   503  3110  53 66             	mov	[(??_Si7020CalcRH^0+1)], a
   504  3112  5A 65             	mov	[??_Si7020CalcRH^0], x
   505                          ;si7020.c: 78: unsigned long temp;
   506                          ;si7020.c: 79: unsigned char result;
   507                          ;si7020.c: 80: temp = data;
   508  3114  5F 6A  66         	mov	[(??_Si7020CalcRH+5)^0], [(??_Si7020CalcRH+1)^0]
   509  3117  5F 69  65         	mov	[(??_Si7020CalcRH+4)^0], [??_Si7020CalcRH^0]
   510  311A  55 68  00         	mov	[(??_Si7020CalcRH+3)^0], 0
   511  311D  55 67  00         	mov	[(??_Si7020CalcRH+2)^0], 0
   512                          ;si7020.c: 81: temp = 125*temp;
   513  3120  5F 70  67         	mov	[?___lmul^0], [(??_Si7020CalcRH+2)^0]
   514  3123  5F 71  68         	mov	[(?___lmul+1)^0], [(??_Si7020CalcRH+3)^0]
   515  3126  5F 72  69         	mov	[(?___lmul+2)^0], [(??_Si7020CalcRH+4)^0]
   516  3129  5F 73  6A         	mov	[(?___lmul+3)^0], [(??_Si7020CalcRH+5)^0]
   517  312C  55 74  00         	mov	[(?___lmul+4)^0], 0
   518  312F  55 75  00         	mov	[((?___lmul+4)^0+1)], 0
   519  3132  55 76  00         	mov	[((?___lmul+4)^0+2)], 0
   520  3135  55 77  7D         	mov	[((?___lmul+4)^0+3)], 125
   521  3138  7C 34D9           	call	___lmul
   522  313B  5F 67  70         	mov	[(??_Si7020CalcRH+2)^0], [?___lmul^0]
   523  313E  5F 68  71         	mov	[(??_Si7020CalcRH+3)^0], [(?___lmul+1)^0]
   524  3141  5F 69  72         	mov	[(??_Si7020CalcRH+4)^0], [(?___lmul+2)^0]
   525  3144  5F 6A  73         	mov	[(??_Si7020CalcRH+5)^0], [(?___lmul+3)^0]
   526                          ;si7020.c: 82: temp >>= 16;
   527  3147  50 10             	mov	a, 16
   528  3149  70 FB             	and	f, 0xFB
   529  314B                    u344:
   530  314B  6E 67             	rrc	[(??_Si7020CalcRH+2)^0]
   531  314D  6E 68             	rrc	[((??_Si7020CalcRH+2)^0+1)]
   532  314F  6E 69             	rrc	[((??_Si7020CalcRH+2)^0+2)]
   533  3151  6E 6A             	rrc	[((??_Si7020CalcRH+2)^0+3)]
   534  3153  78                	dec	a
   535  3154  BFF6              	jnz	u344
   536                          ;si7020.c: 83: if (temp >= 6)
   537  3156  3C 6A  06         	cmp	[((??_Si7020CalcRH+2)^0+3)], 6
   538  3159  51 69             	mov	a, [((??_Si7020CalcRH+2)^0+2)]
   539  315B  19 00             	sbb	a, 0
   540  315D  51 68             	mov	a, [((??_Si7020CalcRH+2)^0+1)]
   541  315F  19 00             	sbb	a, 0
   542  3161  51 67             	mov	a, [(??_Si7020CalcRH+2)^0]
   543  3163  19 00             	sbb	a, 0
   544  3165  C030              	jc	l176
   545                          ;si7020.c: 84: {
   546                          ;si7020.c: 85: if (temp >= 106)
   547  3167  3C 6A  6A         	cmp	[((??_Si7020CalcRH+2)^0+3)], 106
   548  316A  51 69             	mov	a, [((??_Si7020CalcRH+2)^0+2)]
   549  316C  19 00             	sbb	a, 0
   550  316E  51 68             	mov	a, [((??_Si7020CalcRH+2)^0+1)]
   551  3170  19 00             	sbb	a, 0
   552  3172  51 67             	mov	a, [(??_Si7020CalcRH+2)^0]
   553  3174  19 00             	sbb	a, 0
   554  3176  C010              	jc	l177
   555                          ;si7020.c: 86: {
   556                          ;si7020.c: 87: temp = 100;
   557  3178  55 67  00         	mov	[(??_Si7020CalcRH+2)^0], 0
   558  317B  55 68  00         	mov	[((??_Si7020CalcRH+2)^0+1)], 0
   559  317E  55 69  00         	mov	[((??_Si7020CalcRH+2)^0+2)], 0
   560  3181  55 6A  64         	mov	[((??_Si7020CalcRH+2)^0+3)], 100
   561                          ;si7020.c: 88: }
   562  3184  7D 31A0           	jmp	l179
   563                          ;			CUR_PP=0 XIO=0 
   564  3187                    l177:
   565                          ;si7020.c: 89: else
   566                          ;si7020.c: 90: {
   567                          ;si7020.c: 91: temp -= 6;
   568  3187  16 6A  06         	sub	[((??_Si7020CalcRH+2)^0+3)], 6
   569  318A  1E 69  00         	sbb	[((??_Si7020CalcRH+2)^0+2)], 0
   570  318D  1E 68  00         	sbb	[((??_Si7020CalcRH+2)^0+1)], 0
   571  3190  1E 67  00         	sbb	[(??_Si7020CalcRH+2)^0], 0
   572                          ;			CUR_PP=0 XIO=0 
   573                          ;si7020.c: 92: }
   574                          ;si7020.c: 93: }
   575  3193  7D 31A0           	jmp	l179
   576                          ;			CUR_PP=0 XIO=0 
   577  3196                    l176:
   578                          ;si7020.c: 94: else
   579                          ;si7020.c: 95: {
   580                          ;si7020.c: 96: temp = 0;
   581  3196  50 00             	mov	a, 0
   582  3198  53 67             	mov	[(??_Si7020CalcRH+2)^0], a
   583  319A  53 68             	mov	[((??_Si7020CalcRH+2)^0+1)], a
   584  319C  53 69             	mov	[((??_Si7020CalcRH+2)^0+2)], a
   585  319E  53 6A             	mov	[((??_Si7020CalcRH+2)^0+3)], a
   586                          ;			CUR_PP=0 XIO=0 
   587  31A0                    l179:
   588                          ;si7020.c: 97: }
   589                          ;si7020.c: 99: result = temp;
   590  31A0  51 6A             	mov	a, [(??_Si7020CalcRH+5)^0]
   591                          ;si7020.c: 100: return result;
   592                          ;si7020.c: 101: }
   593                          ;			CUR_PP=0 XIO=0 
   594  31A2  7F                	ret
   595  31A3                    __end_of_Si7020CalcRH:
   596                          ; =============== function _Si7020CalcRH ends ============
   597                          ; *************** function _Si7020Read_Temp_after_RHM *****************
   598                          ; Defined at:
   599                          ;		line 33 in file "./si7020.c"
   600                          ; Parameters:
   601                          ;		buffer      	reg:    a	type: PTR unsigned char ; Largest target is 5
   602                          ;		 -> RecBuf(5), 
   603                          ; Auto variables:
   604                          ;		buffer      	       	type: PTR unsigned char ; Largest target is 5
   605                          ;		 -> RecBuf(5), 
   606                          ;		ret         	       	type: unsigned char 
   607                          ; Return value:
   608                          ;		type: unsigned char 
   609                          ;		size: 1
   610                          ; Registers used:
   611                          ;		a, x, CUR_PP
   612                          ; Tracked objects:
   613                          ;		On entry : CUR_PP? IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
   614                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
   615                          ;		Unchanged: MVR_PP MVW_PP 
   616                          ; Data sizes:
   617                          ;		Autos:    2
   618                          ;		Params:   0
   619                          ;		Temp:     0
   620                          ;		Total:    2
   621                          ; This function calls:
   622                          ;		_Si7020SendCommand
   623                          ;		_IRcvBytes
   624                          ; This function is called by:
   625                          ;		_main
   626                          ; This function uses a non-reentrant model
   627                          ; 
   628  0021                    __size_of_Si7020Read_Temp_after_RHM	equ	__end_of_Si7020Read_Temp_after_RHM-_Si7020Read_Temp_after_RH
      +                         M
   629                          ;si7020.c: 32: unsigned char Si7020Read_Temp_after_RHM(unsigned char * buffer)
   630                          ;si7020.c: 33: {
   631                          ;			CUR_PP=0 XIO=0 PG=2 
   632  31A3                    _Si7020Read_Temp_after_RHM:
   633                          ;Si7020Read_Temp_after_RHM@buffer stored from a
   634  31A3  62 D0 00          	mov	reg[208], 0
   635  31A6  53 65             	mov	[??_Si7020Read_Temp_after_RHM^0], a
   636                          ;si7020.c: 34: char ret;
   637                          ;si7020.c: 35: ret = Si7020SendCommand(0xE0);
   638  31A8  50 E0             	mov	a, 224
   639  31AA  7C 36FD           	call	_Si7020SendCommand
   640  31AD  53 66             	mov	[(??_Si7020Read_Temp_after_RHM+1)^0], a
   641                          ;si7020.c: 37: if (!ret)
   642  31AF  51 66             	mov	a, [(??_Si7020Read_Temp_after_RHM+1)^0]
   643                          ;si7020.c: 38: {
   644                          ;si7020.c: 39: return 0;
   645                          ;	Return value of _Si7020Read_Temp_after_RHM is never used
   646  31B1  A011              	jz	l170
   647                          ;			CUR_PP=0 XIO=0 
   648                          ;si7020.c: 40: }
   649                          ;si7020.c: 42: ret = IRcvBytes(0x80,buffer,2);
   650  31B3  55 67  02         	mov	[?_IRcvBytes^0], 2
   651  31B6  50 80             	mov	a, 128
   652  31B8  58 65             	mov	x, [??_Si7020Read_Temp_after_RHM^0]
   653  31BA  71 80             	or	f, 0x80	;select multiple RAM page mode
   654  31BC  7C 3706           	call	_IRcvBytes
   655  31BF  53 66             	mov	[(??_Si7020Read_Temp_after_RHM+1)^0], a
   656                          ;si7020.c: 44: if (!ret)
   657  31C1  51 66             	mov	a, [(??_Si7020Read_Temp_after_RHM+1)^0]
   658                          ;si7020.c: 45: {
   659                          ;si7020.c: 46: return 0;
   660                          ;	Return value of _Si7020Read_Temp_after_RHM is never used
   661                          ;			CUR_PP=0 XIO=0 
   662                          ;si7020.c: 47: }
   663                          ;si7020.c: 49: return 1;
   664                          ;	Return value of _Si7020Read_Temp_after_RHM is never used
   665                          ;si7020.c: 50: }
   666  31C3                    l170:
   667                          ;			CUR_PP=0 XIO=0 
   668  31C3  7F                	ret
   669  31C4                    __end_of_Si7020Read_Temp_after_RHM:
   670                          ; =============== function _Si7020Read_Temp_after_RHM ends ============
   671                          ; *************** function _LightRank *****************
   672                          ; Defined at:
   673                          ;		line 42 in file "./main.c"
   674                          ; Parameters:
   675                          ;		light       	reg:   xa	type: unsigned int 
   676                          ; Auto variables:
   677                          ;		light       	       	type: unsigned int 
   678                          ;		i           	       	type: unsigned char 
   679                          ;		duty        	       	type: unsigned char 
   680                          ; Return value:
   681                          ;		type: unsigned char 
   682                          ;		size: 1
   683                          ; Registers used:
   684                          ;		a, x, CUR_PP
   685                          ; Tracked objects:
   686                          ;		On entry : CUR_PP=0 IDX_PP? XIO=0 PG=2 MVR_PP? MVW_PP? 
   687                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
   688                          ;		Unchanged: IDX_PP MVR_PP MVW_PP 
   689                          ; Data sizes:
   690                          ;		Autos:    4
   691                          ;		Params:   0
   692                          ;		Temp:     1
   693                          ;		Total:    5
   694                          ; This function calls:
   695                          ;		Nothing
   696                          ; This function is called by:
   697                          ;		_main
   698                          ; This function uses a non-reentrant model
   699                          ; 
   700  002B                    __size_of_LightRank	equ	__end_of_LightRank-_LightRank
   701                          ;main.c: 41: unsigned char LightRank(unsigned int light)
   702                          ;main.c: 42: {
   703                          ;			CUR_PP=0 XIO=0 PG=2 
   704  31C4                    _LightRank:
   705                          ;LightRank@light stored from xa
   706  31C4  53 66             	mov	[(??_LightRank^0+1)], a
   707  31C6  5A 65             	mov	[??_LightRank^0], x
   708                          ;main.c: 43: unsigned char duty,i;
   709                          ;main.c: 44: duty = 255;
   710  31C8  55 68  FF         	mov	[(??_LightRank+3)^0], 255
   711                          ;main.c: 45: for(i=0;i<8;i++)
   712  31CB  55 67  00         	mov	[(??_LightRank+2)^0], 0
   713                          ;			CUR_PP=0 XIO=0 
   714  31CE                    l122:
   715                          ;main.c: 46: {
   716                          ;main.c: 47: if (light < RankLevel[i])
   717  31CE  51 67             	mov	a, [(??_LightRank+2)^0]
   718  31D0  01 14             	add	a, <_RankLevel
   719  31D2  5C                	mov	x, a
   720  31D3  50 3E             	mov	a, >_RankLevel
   721  31D5  28                	romx
   722  31D6  53 69             	mov	[(??_LightRank^0+4)], a
   723  31D8  51 66             	mov	a, [(??_LightRank^0+1)]
   724  31DA  3A 69             	cmp	a, [(??_LightRank^0+4)]
   725  31DC  51 65             	mov	a, [??_LightRank^0]
   726  31DE  19 00             	sbb	a, 0
   727                          ;main.c: 48: {
   728                          ;main.c: 49: break;
   729  31E0  C00B              	jc	l123
   730                          ;			CUR_PP=0 XIO=0 
   731                          ;main.c: 51: else
   732                          ;main.c: 52: {
   733                          ;main.c: 53: duty -= 31;
   734  31E2  16 68  1F         	sub	[(??_LightRank+3)^0], 31
   735                          ;			CUR_PP=0 XIO=0 
   736  31E5  76 67             	inc	[(??_LightRank+2)^0]
   737  31E7  3C 67  08         	cmp	[(??_LightRank+2)^0], 8
   738  31EA  CFE3              	jc	l122
   739                          ;			CUR_PP=0 XIO=0 
   740  31EC                    l123:
   741                          ;main.c: 54: }
   742                          ;main.c: 55: }
   743                          ;main.c: 56: return duty;
   744  31EC  51 68             	mov	a, [(??_LightRank+3)^0]
   745                          ;main.c: 57: }
   746                          ;			CUR_PP=0 XIO=0 
   747  31EE  7F                	ret
   748  31EF                    __end_of_LightRank:
   749                          ; =============== function _LightRank ends ============
   750                          ; *************** function _Si7020CalcTemp *****************
   751                          ; Defined at:
   752                          ;		line 57 in file "./si7020.c"
   753                          ; Parameters:
   754                          ;		data        	reg:   xa	type: unsigned int 
   755                          ; Auto variables:
   756                          ;		data        	       	type: unsigned int 
   757                          ;		temp        	       	type: long 
   758                          ;		result      	       	type: char 
   759                          ; Return value:
   760                          ;		type: char 
   761                          ;		size: 1
   762                          ; Registers used:
   763                          ;		a, x, CUR_PP, mret
   764                          ; Tracked objects:
   765                          ;		On entry : CUR_PP=0 IDX_PP? XIO=0 PG=2 MVR_PP? MVW_PP? 
   766                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
   767                          ;		Unchanged: IDX_PP MVR_PP MVW_PP 
   768                          ; Data sizes:
   769                          ;		Autos:    7
   770                          ;		Params:   0
   771                          ;		Temp:     4
   772                          ;		Total:   11
   773                          ; This function calls:
   774                          ;		___lmul
   775                          ;		___wmul
   776                          ; This function is called by:
   777                          ;		_main
   778                          ; This function uses a non-reentrant model
   779                          ; 
   780  00A4                    __size_of_Si7020CalcTemp	equ	__end_of_Si7020CalcTemp-_Si7020CalcTemp
   781                          ;si7020.c: 56: signed char Si7020CalcTemp(unsigned int data)
   782                          ;si7020.c: 57: {
   783                          ;			CUR_PP=0 XIO=0 PG=2 
   784  31EF                    _Si7020CalcTemp:
   785                          ;Si7020CalcTemp@data stored from xa
   786  31EF  53 66             	mov	[(??_Si7020CalcTemp^0+1)], a
   787  31F1  5A 65             	mov	[??_Si7020CalcTemp^0], x
   788                          ;si7020.c: 58: signed long temp;
   789                          ;si7020.c: 59: signed char result;
   790                          ;si7020.c: 60: temp = data;
   791  31F3  5F 6A  66         	mov	[(??_Si7020CalcTemp+5)^0], [(??_Si7020CalcTemp+1)^0]
   792  31F6  5F 69  65         	mov	[(??_Si7020CalcTemp+4)^0], [??_Si7020CalcTemp^0]
   793  31F9  55 68  00         	mov	[(??_Si7020CalcTemp+3)^0], 0
   794  31FC  55 67  00         	mov	[(??_Si7020CalcTemp+2)^0], 0
   795                          ;si7020.c: 61: temp = temp*175;
   796  31FF  5F 70  67         	mov	[?___lmul^0], [(??_Si7020CalcTemp+2)^0]
   797  3202  5F 71  68         	mov	[(?___lmul+1)^0], [(??_Si7020CalcTemp+3)^0]
   798  3205  5F 72  69         	mov	[(?___lmul+2)^0], [(??_Si7020CalcTemp+4)^0]
   799  3208  5F 73  6A         	mov	[(?___lmul+3)^0], [(??_Si7020CalcTemp+5)^0]
   800  320B  55 74  00         	mov	[(?___lmul+4)^0], 0
   801  320E  55 75  00         	mov	[((?___lmul+4)^0+1)], 0
   802  3211  55 76  00         	mov	[((?___lmul+4)^0+2)], 0
   803  3214  55 77  AF         	mov	[((?___lmul+4)^0+3)], 175
   804  3217  7C 34D9           	call	___lmul
   805  321A  5F 67  70         	mov	[(??_Si7020CalcTemp+2)^0], [?___lmul^0]
   806  321D  5F 68  71         	mov	[(??_Si7020CalcTemp+3)^0], [(?___lmul+1)^0]
   807  3220  5F 69  72         	mov	[(??_Si7020CalcTemp+4)^0], [(?___lmul+2)^0]
   808  3223  5F 6A  73         	mov	[(??_Si7020CalcTemp+5)^0], [(?___lmul+3)^0]
   809                          ;si7020.c: 62: temp += (data>>2)*3;
   810  3226  55 70  00         	mov	[?___wmul^0], 0
   811  3229  55 71  03         	mov	[(?___wmul^0+1)], 3
   812  322C  50 02             	mov	a, 2
   813  322E  5F 6C  65         	mov	[(??_Si7020CalcTemp^0+7)], [??_Si7020CalcTemp^0]
   814  3231  5F 6D  66         	mov	[(??_Si7020CalcTemp^0+8)], [(??_Si7020CalcTemp+1)^0]
   815  3234  70 FB             	and	f, 0xFB
   816  3236                    u324:
   817  3236  6E 6C             	rrc	[(??_Si7020CalcTemp^0+7)]
   818  3238  6E 6D             	rrc	[(??_Si7020CalcTemp^0+8)]
   819  323A  78                	dec	a
   820  323B  BFFA              	jnz	u324
   821  323D  51 6D             	mov	a, [(??_Si7020CalcTemp^0+8)]
   822  323F  58 6C             	mov	x, [(??_Si7020CalcTemp^0+7)]
   823  3241  71 80             	or	f, 0x80	;select multiple RAM page mode
   824  3243  7C 3521           	call	___wmul
   825  3246  5A 6E             	mov	[(??_Si7020CalcTemp^0+9)], x
   826  3248  53 6F             	mov	[(??_Si7020CalcTemp^0+10)], a
   827  324A  51 6F             	mov	a, [(??_Si7020CalcTemp^0+10)]
   828  324C  04 6A             	add	[((??_Si7020CalcTemp+2)^0+3)], a
   829  324E  51 6E             	mov	a, [(??_Si7020CalcTemp^0+9)]
   830  3250  0C 69             	adc	[((??_Si7020CalcTemp+2)^0+2)], a
   831  3252  50 00             	mov	a, 0
   832  3254  0C 68             	adc	[((??_Si7020CalcTemp+2)^0+1)], a
   833  3256  0C 67             	adc	[(??_Si7020CalcTemp+2)^0], a
   834                          ;si7020.c: 63: temp >>= 16;
   835  3258  50 10             	mov	a, 16
   836  325A                    u334:
   837  325A  68 67             	asr	[(??_Si7020CalcTemp+2)^0]
   838  325C  6E 68             	rrc	[((??_Si7020CalcTemp+2)^0+1)]
   839  325E  6E 69             	rrc	[((??_Si7020CalcTemp+2)^0+2)]
   840  3260  6E 6A             	rrc	[((??_Si7020CalcTemp+2)^0+3)]
   841  3262  78                	dec	a
   842  3263  BFF6              	jnz	u334
   843                          ;si7020.c: 64: temp -= 47;
   844  3265  06 6A  D1         	add	[((??_Si7020CalcTemp+2)^0+3)], 209
   845  3268  0E 69  FF         	adc	[((??_Si7020CalcTemp+2)^0+2)], 255
   846  326B  0E 68  FF         	adc	[((??_Si7020CalcTemp+2)^0+1)], 255
   847  326E  0E 67  FF         	adc	[(??_Si7020CalcTemp+2)^0], 255
   848                          ;si7020.c: 65: if (temp < -9)
   849  3271  3C 6A  F7         	cmp	[((??_Si7020CalcTemp+2)^0+3)], 247
   850  3274  51 69             	mov	a, [((??_Si7020CalcTemp+2)^0+2)]
   851  3276  19 FF             	sbb	a, 255
   852  3278  51 68             	mov	a, [((??_Si7020CalcTemp+2)^0+1)]
   853  327A  19 FF             	sbb	a, 255
   854  327C  51 67             	mov	a, [(??_Si7020CalcTemp+2)^0]
   855  327E  31 80             	xor	a, 0x80
   856  3280  19 7F             	sbb	a, 127
   857  3282  D00D              	jnc	l174
   858                          ;si7020.c: 66: temp = -9;
   859  3284  55 67  FF         	mov	[(??_Si7020CalcTemp+2)^0], 255
   860  3287  55 68  FF         	mov	[((??_Si7020CalcTemp+2)^0+1)], 255
   861  328A  55 69  FF         	mov	[((??_Si7020CalcTemp+2)^0+2)], 255
   862  328D  55 6A  F7         	mov	[((??_Si7020CalcTemp+2)^0+3)], 247
   863                          ;			CUR_PP=0 XIO=0 
   864  3290                    l174:
   865                          ;si7020.c: 68: result = temp;
   866  3290  51 6A             	mov	a, [(??_Si7020CalcTemp+5)^0]
   867                          ;si7020.c: 69: return result;
   868                          ;si7020.c: 70: }
   869                          ;			CUR_PP=0 XIO=0 
   870  3292  7F                	ret
   871  3293                    __end_of_Si7020CalcTemp:
   872                          ; =============== function _Si7020CalcTemp ends ============
   873                          ; *************** function _LCDOuputAll *****************
   874                          ; Defined at:
   875                          ;		line 114 in file "./lcd.c"
   876                          ; Parameters:
   877                          ;		None
   878                          ; Auto variables:
   879                          ;		k           	       	type: unsigned char 
   880                          ; Return value:
   881                          ;		type: void 
   882                          ;		size: 0
   883                          ; Registers used:
   884                          ;		a, x, CUR_PP
   885                          ; Tracked objects:
   886                          ;		On entry : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
   887                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
   888                          ;		Unchanged: MVR_PP MVW_PP 
   889                          ; Data sizes:
   890                          ;		Autos:    1
   891                          ;		Params:   0
   892                          ;		Temp:     0
   893                          ;		Total:    1
   894                          ; This function calls:
   895                          ;		_DisplayPMxx
   896                          ;		_ShowLife
   897                          ;		_ShowHumiTemp
   898                          ;		_WriteAll_1621
   899                          ; This function is called by:
   900                          ;		_main
   901                          ; This function uses a non-reentrant model
   902                          ; 
   903  01B3                    __size_of_LCDOuputAll	equ	__end_of_LCDOuputAll-_LCDOuputAll
   904                          ;lcd.c: 113: void LCDOuputAll(void)
   905                          ;lcd.c: 114: {
   906                          ;			CUR_PP=0 XIO=0 PG=2 
   907  3293                    _LCDOuputAll:
   908                          ;lcd.c: 115: char k = 0;
   909                          ;lcd.c: 117: for (k=0;k<12;k++)
   910  3293  57 00             	mov	x, 0
   911                          ;			XIO=0 
   912  3295                    l63:
   913                          ;lcd.c: 118: {
   914                          ;lcd.c: 119: DisplayBuf[k] = 0;
   915  3295  62 D3 00          	mov	reg[211], 0
   916  3298  56 4B  00         	mov	[x+_DisplayBuf], 0
   917  329B  75                	inc	x
   918  329C  5B                	mov	a, x
   919  329D  39 0C             	cmp	a, 12
   920  329F  CFF5              	jc	l63
   921                          ;			IDX_PP=0 XIO=0 
   922                          ;lcd.c: 120: }
   923                          ;lcd.c: 125: if (PM_Flag == 0)
   924  32A1  62 D0 00          	mov	reg[208], 0
   925  32A4  51 3F             	mov	a, [_PM_Flag^0]
   926  32A6  B010              	jnz	l66
   927                          ;lcd.c: 126: {
   928                          ;lcd.c: 127: DisplayPMxx(data_pm2_5);
   929  32A8  51 32             	mov	a, [(_data_pm2_5^0+1)]
   930  32AA  58 31             	mov	x, [_data_pm2_5^0]
   931  32AC  71 80             	or	f, 0x80	;select multiple RAM page mode
   932  32AE  7C 354D           	call	_DisplayPMxx
   933                          ;lcd.c: 128: DisplayBuf[0] |= 0x8;
   934  32B1  2E 4B  08         	or	[_DisplayBuf^0], 8
   935                          ;lcd.c: 129: }
   936  32B4  7D 32C3           	jmp	l67
   937                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
   938  32B7                    l66:
   939                          ;lcd.c: 130: else
   940                          ;lcd.c: 131: {
   941                          ;lcd.c: 132: DisplayPMxx(data_pm1_0);
   942  32B7  51 30             	mov	a, [(_data_pm1_0^0+1)]
   943  32B9  58 2F             	mov	x, [_data_pm1_0^0]
   944  32BB  71 80             	or	f, 0x80	;select multiple RAM page mode
   945  32BD  7C 354D           	call	_DisplayPMxx
   946                          ;lcd.c: 133: DisplayBuf[1] |= 0x8;
   947  32C0  2E 4C  08         	or	[(_DisplayBuf+1)^0], 8
   948                          ;			CUR_PP=0 XIO=0 
   949  32C3                    l67:
   950                          ;lcd.c: 134: }
   951                          ;lcd.c: 135: DisplayBuf[2] |= 0x8;
   952  32C3  2E 4D  08         	or	[(_DisplayBuf+2)^0], 8
   953                          ;lcd.c: 140: if (LifeFlag == 0)
   954  32C6  51 3B             	mov	a, [_LifeFlag^0]
   955  32C8  B00E              	jnz	l68
   956                          ;lcd.c: 141: {
   957                          ;lcd.c: 142: ShowLife(HeapLife);
   958  32CA  51 38             	mov	a, [_HeapLife^0]
   959  32CC  71 80             	or	f, 0x80	;select multiple RAM page mode
   960  32CE  7C 369C           	call	_ShowLife
   961                          ;lcd.c: 143: DisplayBuf[3] |= 0x8;
   962  32D1  2E 4E  08         	or	[(_DisplayBuf+3)^0], 8
   963                          ;lcd.c: 145: }
   964  32D4  7D 32E1           	jmp	l69
   965                          ;			CUR_PP=0 XIO=0 
   966  32D7                    l68:
   967                          ;lcd.c: 146: else
   968                          ;lcd.c: 147: {
   969                          ;lcd.c: 148: ShowLife(CarbonLife);
   970  32D7  51 33             	mov	a, [_CarbonLife^0]
   971  32D9  71 80             	or	f, 0x80	;select multiple RAM page mode
   972  32DB  7C 369C           	call	_ShowLife
   973                          ;lcd.c: 149: DisplayBuf[4] |= 0x8;
   974  32DE  2E 4F  08         	or	[(_DisplayBuf+4)^0], 8
   975                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
   976  32E1                    l69:
   977                          ;lcd.c: 151: }
   978                          ;lcd.c: 156: if (SpeedLvl > 8)
   979  32E1  3C 45  09         	cmp	[_SpeedLvl^0], 9
   980  32E4  C004              	jc	l70
   981                          ;lcd.c: 157: {
   982                          ;lcd.c: 158: SpeedLvl = 8;
   983  32E6  55 45  08         	mov	[_SpeedLvl^0], 8
   984                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
   985  32E9                    l70:
   986                          ;lcd.c: 159: }
   987                          ;lcd.c: 160: DisplayBuf[5] = DigitSeg[SpeedLvl];
   988  32E9  51 45             	mov	a, [_SpeedLvl^0]
   989  32EB  01 00             	add	a, <_DigitSeg
   990  32ED  5C                	mov	x, a
   991  32EE  50 3E             	mov	a, >_DigitSeg
   992  32F0  28                	romx
   993  32F1  53 50             	mov	[(_DisplayBuf+5)^0], a
   994                          ; _RH_T_Flag loaded to a
   995  32F3  51 43             	mov	a, [_RH_T_Flag^0]
   996                          ;lcd.c: 162: if(!FanUpdateTimer)
   997  32F5  3C 5C  00         	cmp	[_FanUpdateTimer^0], 0
   998  32F8  B007              	jnz	l71
   999                          ;lcd.c: 163: {
  1000                          ;lcd.c: 164: FanUpdateTimer = FanUpdateTimeReload;
  1001  32FA  55 5C  00         	mov	[_FanUpdateTimer^0], 0
  1002                          ;lcd.c: 165: FanFlag ^= 1;
  1003  32FD  36 35  01         	xor	[_FanFlag^0], 1
  1004                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
  1005  3300                    l71:
  1006                          ;lcd.c: 166: }
  1007                          ;lcd.c: 167: if (FanFlag)
  1008  3300  3C 35  00         	cmp	[_FanFlag^0], 0
  1009  3303  A007              	jz	l72
  1010                          ;lcd.c: 168: {
  1011                          ;lcd.c: 169: DisplayBuf[6] |= 0x1;
  1012  3305  2E 51  01         	or	[(_DisplayBuf+6)^0], 1
  1013                          ;lcd.c: 171: }
  1014  3308  7D 330E           	jmp	l73
  1015                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
  1016  330B                    l72:
  1017                          ;lcd.c: 172: else
  1018                          ;lcd.c: 173: {
  1019                          ;lcd.c: 174: DisplayBuf[6] |= 0x2;
  1020  330B  2E 51  02         	or	[(_DisplayBuf+6)^0], 2
  1021                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
  1022  330E                    l73:
  1023                          ;lcd.c: 176: }
  1024                          ;lcd.c: 181: if (RH_T_Flag == 0)
  1025  330E  39 00             	cmp	a, 0
  1026  3310  B00B              	jnz	l74
  1027                          ;lcd.c: 182: {
  1028                          ;lcd.c: 183: ShowHumiTemp(Humidity);
  1029  3312  51 39             	mov	a, [_Humidity^0]
  1030  3314  71 80             	or	f, 0x80	;select multiple RAM page mode
  1031  3316  7C 3604           	call	_ShowHumiTemp
  1032                          ;lcd.c: 187: }
  1033  3319  7D 333A           	jmp	l75
  1034                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
  1035  331C                    l74:
  1036                          ;lcd.c: 188: else
  1037                          ;lcd.c: 189: {
  1038                          ;lcd.c: 190: if (RH_T_Flag == 1)
  1039  331C  39 01             	cmp	a, 1
  1040  331E  B00E              	jnz	l76
  1041                          ;lcd.c: 191: {
  1042                          ;lcd.c: 192: ShowHumiTemp(Temperature);
  1043  3320  51 46             	mov	a, [_Temperature^0]
  1044  3322  71 80             	or	f, 0x80	;select multiple RAM page mode
  1045  3324  7C 3604           	call	_ShowHumiTemp
  1046                          ;lcd.c: 195: DisplayBuf[7] |= 0x20;
  1047  3327  2E 52  20         	or	[(_DisplayBuf+7)^0], 0x20
  1048                          ;lcd.c: 196: }
  1049  332A  7D 333A           	jmp	l75
  1050                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
  1051  332D                    l76:
  1052                          ;lcd.c: 197: else
  1053                          ;lcd.c: 198: {
  1054                          ;lcd.c: 199: ShowHumiTemp(Timer);
  1055  332D  50 00             	mov	a, 0
  1056  332F  71 80             	or	f, 0x80	;select multiple RAM page mode
  1057  3331  7C 3604           	call	_ShowHumiTemp
  1058                          ;lcd.c: 200: DisplayBuf[9] |= 0x80;
  1059  3334  2E 54  80         	or	[(_DisplayBuf+9)^0], 0x80
  1060                          ;lcd.c: 201: DisplayBuf[7] |= 0x10;
  1061  3337  2E 52  10         	or	[(_DisplayBuf+7)^0], 0x10
  1062                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
  1063                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
  1064  333A                    l75:
  1065                          ; _PlasmaFlag loaded to a
  1066  333A  51 41             	mov	a, [_PlasmaFlag^0]
  1067                          ;lcd.c: 203: }
  1068                          ;lcd.c: 204: }
  1069                          ;lcd.c: 209: if (mode == 0)
  1070  333C  3C 4A  00         	cmp	[_mode^0], 0
  1071  333F  B007              	jnz	l78
  1072                          ;lcd.c: 210: {
  1073                          ;lcd.c: 211: DisplayBuf[7] |= 0x2;
  1074  3341  2E 52  02         	or	[(_DisplayBuf+7)^0], 2
  1075                          ;lcd.c: 213: }
  1076  3344  7D 334A           	jmp	l79
  1077                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
  1078  3347                    l78:
  1079                          ;lcd.c: 214: else
  1080                          ;lcd.c: 215: {
  1081                          ;lcd.c: 216: DisplayBuf[7] |= 0x4;
  1082  3347  2E 52  04         	or	[(_DisplayBuf+7)^0], 4
  1083                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
  1084  334A                    l79:
  1085                          ;lcd.c: 218: }
  1086                          ;lcd.c: 223: if (LockStatus)
  1087  334A  3C 3C  00         	cmp	[_LockStatus^0], 0
  1088  334D  A004              	jz	l80
  1089                          ;lcd.c: 224: {
  1090                          ;lcd.c: 225: DisplayBuf[7] |= 0x1;
  1091  334F  2E 52  01         	or	[(_DisplayBuf+7)^0], 1
  1092                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
  1093  3352                    l80:
  1094                          ;lcd.c: 226: }
  1095                          ;lcd.c: 235: if (Plasma)
  1096  3352  3C 40  00         	cmp	[_Plasma^0], 0
  1097  3355  A020              	jz	l81
  1098                          ;lcd.c: 236: {
  1099                          ;lcd.c: 237: DisplayBuf[6] |= 0x10;
  1100  3357  2E 51  10         	or	[(_DisplayBuf+6)^0], 0x10
  1101                          ;lcd.c: 238: if (!PlasmaTimer)
  1102  335A  3C 5E  00         	cmp	[_PlasmaTimer^0], 0
  1103  335D  B018              	jnz	l81
  1104                          ;lcd.c: 239: {
  1105                          ;lcd.c: 240: PlasmaTimer = 8;
  1106  335F  55 5E  08         	mov	[_PlasmaTimer^0], 8
  1107                          ;lcd.c: 241: if (PlasmaFlag == 0)
  1108  3362  39 00             	cmp	a, 0
  1109  3364  B006              	jnz	l83
  1110                          ;lcd.c: 242: {
  1111                          ;lcd.c: 243: PlasmaFlag = 1;
  1112  3366  50 01             	mov	a, 1
  1113                          ;lcd.c: 244: }
  1114  3368  7D 3376           	jmp	l81
  1115                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
  1116  336B                    l83:
  1117                          ;lcd.c: 245: else
  1118                          ;lcd.c: 246: {
  1119                          ;lcd.c: 247: if (PlasmaFlag == 1)
  1120  336B  39 01             	cmp	a, 1
  1121  336D  B006              	jnz	l85
  1122                          ;lcd.c: 248: {
  1123                          ;lcd.c: 249: PlasmaFlag = 2;
  1124  336F  50 02             	mov	a, 2
  1125                          ;lcd.c: 250: }
  1126  3371  7D 3376           	jmp	l81
  1127                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
  1128  3374                    l85:
  1129                          ;lcd.c: 251: else
  1130                          ;lcd.c: 252: {
  1131                          ;lcd.c: 253: PlasmaFlag = 0;
  1132  3374  50 00             	mov	a, 0
  1133                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
  1134                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
  1135                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
  1136                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
  1137  3376                    l81:
  1138                          ;lcd.c: 254: }
  1139                          ;lcd.c: 255: }
  1140                          ;lcd.c: 256: }
  1141                          ;lcd.c: 257: }
  1142                          ;lcd.c: 258: if (PlasmaFlag == 1)
  1143  3376  39 01             	cmp	a, 1
  1144  3378  B007              	jnz	l87
  1145                          ;lcd.c: 259: {
  1146                          ;lcd.c: 260: DisplayBuf[6] |= 0x40;
  1147  337A  2E 51  40         	or	[(_DisplayBuf+6)^0], 0x40
  1148                          ;lcd.c: 261: }
  1149  337D  7D 3387           	jmp	l88
  1150                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
  1151  3380                    l87:
  1152                          ;lcd.c: 262: else if (PlasmaFlag == 2)
  1153  3380  39 02             	cmp	a, 2
  1154  3382  B004              	jnz	l88
  1155                          ;lcd.c: 263: {
  1156                          ;lcd.c: 264: DisplayBuf[6] |= 0x20 + 0x40;
  1157  3384  2E 51  60         	or	[(_DisplayBuf+6)^0], 0x60
  1158                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
  1159                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
  1160  3387                    l88:
  1161                          ;lcd.c: 265: }
  1162                          ;lcd.c: 271: if (MyPMSUnion.MyPMFrame.PM2_5_US > 150)
  1163  3387  3C 06  00         	cmp	[(_MyPMSUnion+6)^0], 0
  1164  338A  B004              	jnz	u223
  1165  338C  3C 07  97         	cmp	[((_MyPMSUnion+6)^0+1)], 151
  1166  338F                    u223:
  1167  338F  C00A              	jc	l90
  1168                          ;lcd.c: 272: {
  1169                          ;lcd.c: 273: DisplayBuf[11] |= 0x20 + 0x10;
  1170  3391  2E 56  30         	or	[(_DisplayBuf+0xB)^0], 0x30
  1171                          ;lcd.c: 274: DisplayBuf[10] |= 0x1 + 0x2 + 0x4 + 0x8;
  1172  3394  2E 55  0F         	or	[(_DisplayBuf+0xA)^0], 0xF
  1173                          ;lcd.c: 275: }
  1174  3397  7D 33E6           	jmp	l91
  1175                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
  1176  339A                    l90:
  1177                          ;lcd.c: 276: else
  1178                          ;lcd.c: 277: {
  1179                          ;lcd.c: 278: if (MyPMSUnion.MyPMFrame.PM2_5_US > 100)
  1180  339A  3C 06  00         	cmp	[(_MyPMSUnion+6)^0], 0
  1181  339D  B004              	jnz	u233
  1182  339F  3C 07  65         	cmp	[((_MyPMSUnion+6)^0+1)], 101
  1183  33A2                    u233:
  1184  33A2  C00A              	jc	l92
  1185                          ;lcd.c: 279: {
  1186                          ;lcd.c: 280: DisplayBuf[11] |= 0x20 + 0x10;
  1187  33A4  2E 56  30         	or	[(_DisplayBuf+0xB)^0], 0x30
  1188                          ;lcd.c: 281: DisplayBuf[10] |= 0x1 + 0x2 + 0x4;
  1189  33A7  2E 55  07         	or	[(_DisplayBuf+0xA)^0], 7
  1190                          ;lcd.c: 282: }
  1191  33AA  7D 33E6           	jmp	l91
  1192                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
  1193  33AD                    l92:
  1194                          ;lcd.c: 283: else
  1195                          ;lcd.c: 284: {
  1196                          ;lcd.c: 285: if (MyPMSUnion.MyPMFrame.PM2_5_US > 75)
  1197  33AD  3C 06  00         	cmp	[(_MyPMSUnion+6)^0], 0
  1198  33B0  B004              	jnz	u243
  1199  33B2  3C 07  4C         	cmp	[((_MyPMSUnion+6)^0+1)], 76
  1200  33B5                    u243:
  1201  33B5  C00A              	jc	l94
  1202                          ;lcd.c: 286: {
  1203                          ;lcd.c: 287: DisplayBuf[11] |= 0x20 + 0x10;
  1204  33B7  2E 56  30         	or	[(_DisplayBuf+0xB)^0], 0x30
  1205                          ;lcd.c: 288: DisplayBuf[10] |= 0x1 + 0x2;
  1206  33BA  2E 55  03         	or	[(_DisplayBuf+0xA)^0], 3
  1207                          ;lcd.c: 289: }
  1208  33BD  7D 33E6           	jmp	l91
  1209                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
  1210  33C0                    l94:
  1211                          ;lcd.c: 290: else
  1212                          ;lcd.c: 291: {
  1213                          ;lcd.c: 292: if (MyPMSUnion.MyPMFrame.PM2_5_US > 50)
  1214  33C0  3C 06  00         	cmp	[(_MyPMSUnion+6)^0], 0
  1215  33C3  B004              	jnz	u253
  1216  33C5  3C 07  33         	cmp	[((_MyPMSUnion+6)^0+1)], 51
  1217  33C8                    u253:
  1218  33C8  C00A              	jc	l96
  1219                          ;lcd.c: 293: {
  1220                          ;lcd.c: 294: DisplayBuf[11] |= 0x20 + 0x10;
  1221  33CA  2E 56  30         	or	[(_DisplayBuf+0xB)^0], 0x30
  1222                          ;lcd.c: 295: DisplayBuf[10] |= 0x1;
  1223  33CD  2E 55  01         	or	[(_DisplayBuf+0xA)^0], 1
  1224                          ;lcd.c: 296: }
  1225  33D0  7D 33E6           	jmp	l91
  1226                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
  1227  33D3                    l96:
  1228                          ;lcd.c: 297: else
  1229                          ;lcd.c: 298: {
  1230                          ;lcd.c: 299: if (MyPMSUnion.MyPMFrame.PM2_5_US > 25)
  1231  33D3  3C 06  00         	cmp	[(_MyPMSUnion+6)^0], 0
  1232  33D6  B004              	jnz	u263
  1233  33D8  3C 07  1A         	cmp	[((_MyPMSUnion+6)^0+1)], 26
  1234  33DB                    u263:
  1235  33DB  C007              	jc	l98
  1236                          ;lcd.c: 300: DisplayBuf[11] |= 0x20 + 0x10;
  1237  33DD  2E 56  30         	or	[(_DisplayBuf+0xB)^0], 0x30
  1238  33E0  7D 33E6           	jmp	l91
  1239                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
  1240  33E3                    l98:
  1241                          ;lcd.c: 301: else
  1242                          ;lcd.c: 302: DisplayBuf[11] |= 0x20;
  1243  33E3  2E 56  20         	or	[(_DisplayBuf+0xB)^0], 0x20
  1244                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
  1245                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
  1246                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
  1247                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
  1248                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
  1249  33E6                    l91:
  1250                          ;lcd.c: 303: }
  1251                          ;lcd.c: 304: }
  1252                          ;lcd.c: 305: }
  1253                          ;lcd.c: 306: }
  1254                          ;lcd.c: 308: if (Odor > 4)
  1255  33E6  3C 3D  05         	cmp	[_Odor^0], 5
  1256  33E9  C00A              	jc	l100
  1257                          ;lcd.c: 309: {
  1258                          ;lcd.c: 310: DisplayBuf[11] |= 0x1 + 0x2;
  1259  33EB  2E 56  03         	or	[(_DisplayBuf+0xB)^0], 3
  1260                          ;lcd.c: 311: DisplayBuf[10] |= 0x10 + 0x20 + 0x40 + 0x80;
  1261  33EE  2E 55  F0         	or	[(_DisplayBuf+0xA)^0], 0xF0
  1262                          ;lcd.c: 312: }
  1263  33F1  7D 342C           	jmp	l101
  1264                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
  1265  33F4                    l100:
  1266                          ;lcd.c: 313: else
  1267                          ;lcd.c: 314: {
  1268                          ;lcd.c: 315: if (Odor > 3)
  1269  33F4  3C 3D  04         	cmp	[_Odor^0], 4
  1270  33F7  C00A              	jc	l102
  1271                          ;lcd.c: 316: {
  1272                          ;lcd.c: 317: DisplayBuf[11] |= 0x1 + 0x2;
  1273  33F9  2E 56  03         	or	[(_DisplayBuf+0xB)^0], 3
  1274                          ;lcd.c: 318: DisplayBuf[10] |= 0x10 + 0x20 + 0x40;
  1275  33FC  2E 55  70         	or	[(_DisplayBuf+0xA)^0], 0x70
  1276                          ;lcd.c: 319: }
  1277  33FF  7D 342C           	jmp	l101
  1278                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
  1279  3402                    l102:
  1280                          ;lcd.c: 320: else
  1281                          ;lcd.c: 321: {
  1282                          ;lcd.c: 322: if (Odor > 2)
  1283  3402  3C 3D  03         	cmp	[_Odor^0], 3
  1284  3405  C00A              	jc	l104
  1285                          ;lcd.c: 323: {
  1286                          ;lcd.c: 324: DisplayBuf[11] |= 0x1 + 0x2;
  1287  3407  2E 56  03         	or	[(_DisplayBuf+0xB)^0], 3
  1288                          ;lcd.c: 325: DisplayBuf[10] |= 0x10 + 0x20;
  1289  340A  2E 55  30         	or	[(_DisplayBuf+0xA)^0], 0x30
  1290                          ;lcd.c: 326: }
  1291  340D  7D 342C           	jmp	l101
  1292                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
  1293  3410                    l104:
  1294                          ;lcd.c: 327: else
  1295                          ;lcd.c: 328: {
  1296                          ;lcd.c: 329: if (Odor > 1)
  1297  3410  3C 3D  02         	cmp	[_Odor^0], 2
  1298  3413  C00A              	jc	l106
  1299                          ;lcd.c: 330: {
  1300                          ;lcd.c: 331: DisplayBuf[11] |= 0x1 + 0x2;
  1301  3415  2E 56  03         	or	[(_DisplayBuf+0xB)^0], 3
  1302                          ;lcd.c: 332: DisplayBuf[10] |= 0x10;
  1303  3418  2E 55  10         	or	[(_DisplayBuf+0xA)^0], 0x10
  1304                          ;lcd.c: 333: }
  1305  341B  7D 342C           	jmp	l101
  1306                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
  1307  341E                    l106:
  1308                          ;lcd.c: 334: else
  1309                          ;lcd.c: 335: {
  1310                          ;lcd.c: 336: if (Odor > 0)
  1311  341E  3C 3D  00         	cmp	[_Odor^0], 0
  1312  3421  A007              	jz	l108
  1313                          ;lcd.c: 337: DisplayBuf[11] |= 0x1 + 0x2;
  1314  3423  2E 56  03         	or	[(_DisplayBuf+0xB)^0], 3
  1315  3426  7D 342C           	jmp	l101
  1316                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
  1317  3429                    l108:
  1318                          ;lcd.c: 338: else
  1319                          ;lcd.c: 339: DisplayBuf[11] |= 0x2;
  1320  3429  2E 56  02         	or	[(_DisplayBuf+0xB)^0], 2
  1321                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
  1322                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
  1323                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
  1324                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
  1325                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
  1326  342C                    l101:
  1327                          ;lcd.c: 340: }
  1328                          ;lcd.c: 341: }
  1329                          ;lcd.c: 342: }
  1330                          ;lcd.c: 343: }
  1331                          ;lcd.c: 345: DisplayBuf[5] |= 0x8;
  1332  342C  2E 50  08         	or	[(_DisplayBuf+5)^0], 8
  1333                          ;lcd.c: 346: DisplayBuf[6] |= 0x4 + 0x8;
  1334  342F  2E 51  0C         	or	[(_DisplayBuf+6)^0], 0xC
  1335                          ;lcd.c: 347: DisplayBuf[7] |= 0x40 + 0x80;
  1336  3432  2E 52  C0         	or	[(_DisplayBuf+7)^0], 0xC0
  1337                          ;lcd.c: 348: DisplayBuf[11] |= 0x4 + 0x40;
  1338  3435  2E 56  44         	or	[(_DisplayBuf+0xB)^0], 0x44
  1339                          ;_PlasmaFlag stored from a
  1340  3438  53 41             	mov	[_PlasmaFlag^0], a
  1341                          ;lcd.c: 349: WriteAll_1621(0,DisplayBuf,12);
  1342  343A  55 66  0C         	mov	[?_WriteAll_1621^0], 12
  1343  343D  50 00             	mov	a, 0
  1344  343F  57 4B             	mov	x, <(<_DisplayBuf)
  1345  3441  71 80             	or	f, 0x80	;select multiple RAM page mode
  1346  3443  7D 346A           	jmp	_WriteAll_1621
  1347                          ;lcd.c: 350: }
  1348                          ;			CUR_PP=0 XIO=0 
  1349  3446                    __end_of_LCDOuputAll:
  1350                          ; =============== function _LCDOuputAll ends ============
  1351                          ; *************** function _Init_IIC *****************
  1352                          ; Defined at:
  1353                          ;		line 8 in file "./software_iic.c"
  1354                          ; Parameters:
  1355                          ;		None
  1356                          ; Auto variables:
  1357                          ;		None
  1358                          ; Return value:
  1359                          ;		type: void 
  1360                          ;		size: 0
  1361                          ; Registers used:
  1362                          ;		None
  1363                          ; Tracked objects:
  1364                          ;		On entry : CUR_PP=0 IDX_PP? XIO=0 PG=2 MVR_PP? MVW_PP? 
  1365                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG=2 MVR_PP? MVW_PP? 
  1366                          ;		Unchanged: IDX_PP MVR_PP MVW_PP 
  1367                          ; Data sizes:
  1368                          ;		Autos:    0
  1369                          ;		Params:   0
  1370                          ;		Temp:     0
  1371                          ;		Total:    0
  1372                          ; This function calls:
  1373                          ;		Nothing
  1374                          ; This function is called by:
  1375                          ;		_main
  1376                          ; This function uses a non-reentrant model
  1377                          ; 
  1378  0011                    __size_of_Init_IIC	equ	__end_of_Init_IIC-_Init_IIC
  1379                          ;software_iic.c: 7: void Init_IIC(void)
  1380                          ;software_iic.c: 8: {
  1381                          ;			CUR_PP=0 XIO=0 PG=2 
  1382  3446                    _Init_IIC:
  1383                          ;software_iic.c: 10: PRT1DM2 |= (0x20 + 0x80);
  1384  3446  43 07 A0          	or	reg[7], 0xA0
  1385                          ;software_iic.c: 11: PRT1DM1 |= (0x20 + 0x80);
  1386  3449  71 10             	or	f, 0x10	; select config register space
  1387  344B  43 05 A0          	or	reg[5], 0xA0
  1388                          ;software_iic.c: 12: PRT1DM0 |= (0x20 + 0x80);
  1389  344E  43 04 A0          	or	reg[4], 0xA0
  1390                          ;software_iic.c: 13: PRT1DR |= (0x20 + 0x80);
  1391  3451  70 CF             	and	f, 0xCF	;select user reg space
  1392  3453  43 04 A0          	or	reg[4], 0xA0
  1393                          ;software_iic.c: 14: }
  1394                          ;			CUR_PP=0 XIO=0 PG=2 
  1395  3456  7F                	ret
  1396  3457                    __end_of_Init_IIC:
  1397                          ; =============== function _Init_IIC ends ============
  1398                          ; *************** function _HT1621B_Init *****************
  1399                          ; Defined at:
  1400                          ;		line 99 in file "./ht1621b.c"
  1401                          ; Parameters:
  1402                          ;		None
  1403                          ; Auto variables:
  1404                          ;		None
  1405                          ; Return value:
  1406                          ;		type: void 
  1407                          ;		size: 0
  1408                          ; Registers used:
  1409                          ;		a, x, CUR_PP
  1410                          ; Tracked objects:
  1411                          ;		On entry : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  1412                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  1413                          ;		Unchanged: IDX_PP MVR_PP MVW_PP 
  1414                          ; Data sizes:
  1415                          ;		Autos:    0
  1416                          ;		Params:   0
  1417                          ;		Temp:     0
  1418                          ;		Total:    0
  1419                          ; This function calls:
  1420                          ;		_SendCmd
  1421                          ; This function is called by:
  1422                          ;		_main
  1423                          ; This function uses a non-reentrant model
  1424                          ; 
  1425  0013                    __size_of_HT1621B_Init	equ	__end_of_HT1621B_Init-_HT1621B_Init
  1426                          ;ht1621b.c: 98: void HT1621B_Init(void)
  1427                          ;ht1621b.c: 99: {
  1428                          ;			CUR_PP=0 XIO=0 PG=2 
  1429  3457                    _HT1621B_Init:
  1430                          ;ht1621b.c: 100: SendCmd(0x29);
  1431  3457  50 29             	mov	a, 41
  1432  3459  7C 36DC           	call	_SendCmd
  1433                          ;ht1621b.c: 101: SendCmd(0x01);
  1434  345C  50 01             	mov	a, 1
  1435  345E  71 80             	or	f, 0x80	;select multiple RAM page mode
  1436  3460  7C 36DC           	call	_SendCmd
  1437                          ;ht1621b.c: 102: SendCmd(0x03);
  1438  3463  50 03             	mov	a, 3
  1439  3465  71 80             	or	f, 0x80	;select multiple RAM page mode
  1440  3467  7D 36DC           	jmp	_SendCmd
  1441                          ;ht1621b.c: 104: }
  1442                          ;			CUR_PP=0 XIO=0 
  1443  346A                    __end_of_HT1621B_Init:
  1444                          ; =============== function _HT1621B_Init ends ============
  1445                          ; *************** function _WriteAll_1621 *****************
  1446                          ; Defined at:
  1447                          ;		line 85 in file "./ht1621b.c"
  1448                          ; Parameters:
  1449                          ;		addr        	reg:    a	type: unsigned char 
  1450                          ;		p           	reg:    x	type: PTR unsigned char ; Largest target is 12
  1451                          ;		 -> DisplayBuf(12), 
  1452                          ;		cnt         	offs:   0	type: unsigned char 
  1453                          ; Auto variables:
  1454                          ;		p           	       	type: PTR unsigned char ; Largest target is 12
  1455                          ;		 -> DisplayBuf(12), 
  1456                          ;		addr        	       	type: unsigned char 
  1457                          ;		i           	       	type: unsigned char 
  1458                          ; Return value:
  1459                          ;		type: void 
  1460                          ;		size: 0
  1461                          ; Registers used:
  1462                          ;		a, x, CUR_PP
  1463                          ; Tracked objects:
  1464                          ;		On entry : CUR_PP=0 IDX_PP=0 XIO=0 PG? MVR_PP? MVW_PP? 
  1465                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  1466                          ;		Unchanged: MVR_PP MVW_PP 
  1467                          ; Data sizes:
  1468                          ;		Autos:    3
  1469                          ;		Params:   1
  1470                          ;		Temp:     0
  1471                          ;		Total:    4
  1472                          ; This function calls:
  1473                          ;		_SendBit_1621
  1474                          ;		_SendDataBit_1621
  1475                          ;		_delay_us
  1476                          ; This function is called by:
  1477                          ;		_LCDOuputAll
  1478                          ; This function uses a non-reentrant model
  1479                          ; 
  1480  0043                    __size_of_WriteAll_1621	equ	__end_of_WriteAll_1621-_WriteAll_1621
  1481                          ;ht1621b.c: 84: void WriteAll_1621(unsigned char addr,unsigned char *p,unsigned char cnt)
  1482                          ;ht1621b.c: 85: {
  1483                          ;			CUR_PP=0 IDX_PP=0 XIO=0 PG=2 
  1484  346A                    _WriteAll_1621:
  1485                          ;WriteAll_1621@addr stored from a
  1486  346A  53 68             	mov	[(??_WriteAll_1621+1)^0], a
  1487                          ;WriteAll_1621@p stored from x
  1488  346C  5A 67             	mov	[??_WriteAll_1621^0], x
  1489                          ;ht1621b.c: 86: unsigned char i;
  1490                          ;ht1621b.c: 87: (PRT0DR &= ~0x80);
  1491  346E  41 00 7F          	and	reg[0], 0x7F
  1492                          ;ht1621b.c: 88: SendBit_1621(0xa0,3);
  1493  3471  50 A0             	mov	a, 160
  1494  3473  57 03             	mov	x, 3
  1495  3475  7C 3776           	call	_SendBit_1621
  1496                          ;ht1621b.c: 89: SendBit_1621(addr<<2,6);
  1497  3478  51 68             	mov	a, [(??_WriteAll_1621+1)^0]
  1498  347A  64                	asl	a
  1499  347B  64                	asl	a
  1500  347C  57 06             	mov	x, 6
  1501  347E  71 80             	or	f, 0x80	;select multiple RAM page mode
  1502  3480  7C 3776           	call	_SendBit_1621
  1503                          ;ht1621b.c: 90: for(i =0; i <cnt; i ++,p++)
  1504  3483  50 00             	mov	a, 0
  1505  3485  7D 349B           	jmp	l33
  1506                          ;			CUR_PP=0 XIO=0 
  1507  3488                    l30:
  1508                          ;ht1621b.c: 91: {
  1509                          ;ht1621b.c: 92: SendDataBit_1621(*p,8);
  1510  3488  58 67             	mov	x, [??_WriteAll_1621^0]
  1511  348A  62 D3 00          	mov	reg[211], 0
  1512  348D  52 00             	mov	a, [x+0]
  1513  348F  57 08             	mov	x, 8
  1514  3491  71 80             	or	f, 0x80	;select multiple RAM page mode
  1515  3493  7C 381D           	call	_SendDataBit_1621
  1516                          ; WriteAll_1621@i loaded to a
  1517  3496  51 69             	mov	a, [(??_WriteAll_1621+2)^0]
  1518  3498  74                	inc	a
  1519  3499  76 67             	inc	[??_WriteAll_1621^0]
  1520                          ;			CUR_PP=0 XIO=0 
  1521  349B                    l33:
  1522                          ;WriteAll_1621@i stored from a
  1523  349B  53 69             	mov	[(??_WriteAll_1621+2)^0], a
  1524  349D  3A 66             	cmp	a, [?_WriteAll_1621^0]
  1525  349F  CFE8              	jc	l30
  1526                          ;			CUR_PP=0 XIO=0 
  1527                          ;ht1621b.c: 93: }
  1528                          ;ht1621b.c: 94: (PRT0DR |= 0x80);
  1529  34A1  43 00 80          	or	reg[0], 0x80
  1530                          ;ht1621b.c: 95: delay_us(4);
  1531  34A4  50 04             	mov	a, 4
  1532  34A6  57 00             	mov	x, 0
  1533  34A8  71 80             	or	f, 0x80	;select multiple RAM page mode
  1534  34AA  7D 3B5C           	jmp	_delay_us
  1535                          ;ht1621b.c: 96: }
  1536                          ;			CUR_PP=0 XIO=0 
  1537  34AD                    __end_of_WriteAll_1621:
  1538                          ; =============== function _WriteAll_1621 ends ============
  1539                          ; *************** function _LeftRotate *****************
  1540                          ; Defined at:
  1541                          ;		line 114 in file "./si7020.c"
  1542                          ; Parameters:
  1543                          ;		None
  1544                          ; Auto variables:
  1545                          ;		k           	       	type: unsigned char 
  1546                          ; Return value:
  1547                          ;		type: void 
  1548                          ;		size: 0
  1549                          ; Registers used:
  1550                          ;		a, x, CUR_PP
  1551                          ; Tracked objects:
  1552                          ;		On entry : CUR_PP=0 IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  1553                          ;		On exit  : CUR_PP=0 IDX_PP=0 XIO=0 PG? MVR_PP? MVW_PP? 
  1554                          ;		Unchanged: MVR_PP MVW_PP 
  1555                          ; Data sizes:
  1556                          ;		Autos:    2
  1557                          ;		Params:   0
  1558                          ;		Temp:     0
  1559                          ;		Total:    2
  1560                          ; This function calls:
  1561                          ;		Nothing
  1562                          ; This function is called by:
  1563                          ;		_CRC8Check
  1564                          ; This function uses a non-reentrant model
  1565                          ; 
  1566  002C                    __size_of_LeftRotate	equ	__end_of_LeftRotate-_LeftRotate
  1567                          ;si7020.c: 113: void LeftRotate()
  1568                          ;si7020.c: 114: {
  1569                          ;			CUR_PP=0 PG=2 
  1570  34AD                    _LeftRotate:
  1571                          ;si7020.c: 115: unsigned char k;
  1572                          ;si7020.c: 116: for(k=0;k<3;k++)
  1573  34AD  57 00             	mov	x, 0
  1574                          ;			
  1575  34AF                    l182:
  1576                          ;si7020.c: 117: {
  1577                          ;si7020.c: 118: RecBuf[k] <<= 1;
  1578  34AF  70 CF             	and	f, 0xCF	;select user reg space
  1579  34B1  62 D3 00          	mov	reg[211], 0
  1580  34B4  66 57             	asl	[x+_RecBuf]
  1581                          ;si7020.c: 119: if(k < 2)
  1582  34B6  5B                	mov	a, x
  1583  34B7  39 02             	cmp	a, 2
  1584  34B9  D013              	jnc	l185
  1585                          ;si7020.c: 120: {
  1586                          ;si7020.c: 121: RecBuf[k] |= (RecBuf[k+1]&0x80)?1:0;
  1587  34BB  62 D0 00          	mov	reg[208], 0
  1588  34BE  55 66  00         	mov	[(??_LeftRotate+1)^0], 0
  1589  34C1  3D 58  80         	cmp	[x+_RecBuf+1], 128
  1590  34C4  C004              	jc	l500002324
  1591  34C6  55 66  01         	mov	[(??_LeftRotate+1)^0], 1
  1592                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
  1593  34C9                    l500002324:
  1594  34C9  51 66             	mov	a, [(??_LeftRotate+1)^0]
  1595  34CB  2D 57             	or	[x+_RecBuf], a
  1596                          ;			IDX_PP=0 XIO=0 
  1597  34CD                    l185:
  1598  34CD  75                	inc	x
  1599  34CE  5B                	mov	a, x
  1600  34CF  39 03             	cmp	a, 3
  1601  34D1  CFDD              	jc	l182
  1602                          ;			IDX_PP=0 XIO=0 
  1603                          ;si7020.c: 122: }
  1604                          ;si7020.c: 123: }
  1605                          ;si7020.c: 124: data_length --;
  1606  34D3  62 D0 00          	mov	reg[208], 0
  1607  34D6  7A 49             	dec	[_data_length^0]
  1608                          ;si7020.c: 125: }
  1609                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
  1610  34D8  7F                	ret
  1611  34D9                    __end_of_LeftRotate:
  1612                          ; =============== function _LeftRotate ends ============
  1613                          ; *************** function ___lmul *****************
  1614                          ; Defined at:
  1615                          ;		line 3 in file "C:\Program Files (x86)\HI-TECH Software\HCPSOC\PRO\9.61\sources\lmul.c"
  1616                          ; Parameters:
  1617                          ;		multiplier  	offs:   0	type: unsigned long 
  1618                          ;		multiplicand	offs:   4	type: unsigned long 
  1619                          ; Auto variables:
  1620                          ;		product     	       	type: unsigned long 
  1621                          ; Return value:
  1622                          ;		type: unsigned long 
  1623                          ;		size: 4
  1624                          ; Registers used:
  1625                          ;		a, CUR_PP
  1626                          ; Tracked objects:
  1627                          ;		On entry : CUR_PP=0 IDX_PP? XIO=0 PG=2 MVR_PP? MVW_PP? 
  1628                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  1629                          ;		Unchanged: IDX_PP MVR_PP MVW_PP 
  1630                          ; Data sizes:
  1631                          ;		Autos:    4
  1632                          ;		Params:   8
  1633                          ;		Temp:     0
  1634                          ;		Total:   12
  1635                          ; This function calls:
  1636                          ;		Nothing
  1637                          ; This function is called by:
  1638                          ;		_Si7020CalcTemp
  1639                          ;		_Si7020CalcRH
  1640                          ; This function uses a non-reentrant model
  1641                          ; 
  1642  0048                    __size_of___lmul	equ	__end_of___lmul-___lmul
  1643                          ;lmul.c: 1: unsigned long
  1644                          ;lmul.c: 2: __lmul(unsigned long multiplier, unsigned long multiplicand)
  1645                          ;lmul.c: 3: {
  1646                          ;			CUR_PP=0 XIO=0 PG=2 
  1647  34D9                    ___lmul:
  1648                          ;lmul.c: 4: unsigned long product = 0;
  1649  34D9  50 00             	mov	a, 0
  1650  34DB  53 78             	mov	[??___lmul^0], a
  1651  34DD  53 79             	mov	[(??___lmul^0+1)], a
  1652  34DF  53 7A             	mov	[(??___lmul^0+2)], a
  1653  34E1  53 7B             	mov	[(??___lmul^0+3)], a
  1654                          ;lmul.c: 6: do {
  1655                          ;			CUR_PP=0 XIO=0 
  1656  34E3                    l336:
  1657                          ;lmul.c: 7: if(multiplier & 1)
  1658  34E3  47 73  01         	tst	[(?___lmul+3)^0], 1
  1659  34E6  A011              	jz	l337
  1660                          ;lmul.c: 8: product += multiplicand;
  1661  34E8  51 77             	mov	a, [((?___lmul+4)^0+3)]
  1662  34EA  04 7B             	add	[(??___lmul^0+3)], a
  1663  34EC  51 76             	mov	a, [((?___lmul+4)^0+2)]
  1664  34EE  0C 7A             	adc	[(??___lmul^0+2)], a
  1665  34F0  51 75             	mov	a, [((?___lmul+4)^0+1)]
  1666  34F2  0C 79             	adc	[(??___lmul^0+1)], a
  1667  34F4  51 74             	mov	a, [(?___lmul+4)^0]
  1668  34F6  0C 78             	adc	[??___lmul^0], a
  1669                          ;			CUR_PP=0 XIO=0 
  1670  34F8                    l337:
  1671                          ;lmul.c: 9: multiplicand <<= 1;
  1672  34F8  65 77             	asl	[((?___lmul+4)^0+3)]
  1673  34FA  6B 76             	rlc	[((?___lmul+4)^0+2)]
  1674  34FC  6B 75             	rlc	[((?___lmul+4)^0+1)]
  1675  34FE  6B 74             	rlc	[(?___lmul+4)^0]
  1676                          ;lmul.c: 10: multiplier >>= 1;
  1677  3500  70 FB             	and	f, 0xFB
  1678  3502  6E 70             	rrc	[?___lmul^0]
  1679  3504  6E 71             	rrc	[(?___lmul^0+1)]
  1680  3506  6E 72             	rrc	[(?___lmul^0+2)]
  1681  3508  6E 73             	rrc	[(?___lmul^0+3)]
  1682                          ;lmul.c: 11: } while(multiplier != 0);
  1683  350A  51 70             	mov	a, [?___lmul^0]
  1684  350C  2A 71             	or	a, [(?___lmul^0+1)]
  1685  350E  2A 72             	or	a, [(?___lmul^0+2)]
  1686  3510  2A 73             	or	a, [(?___lmul^0+3)]
  1687  3512  BFD0              	jnz	l336
  1688                          ;			CUR_PP=0 XIO=0 
  1689  3514  5F 70  78         	mov	[?___lmul^0], [??___lmul^0]
  1690  3517  5F 71  79         	mov	[(?___lmul+1)^0], [(??___lmul+1)^0]
  1691  351A  5F 72  7A         	mov	[(?___lmul+2)^0], [(??___lmul+2)^0]
  1692  351D  5F 73  7B         	mov	[(?___lmul+3)^0], [(??___lmul+3)^0]
  1693                          ;lmul.c: 13: }
  1694                          ;			CUR_PP=0 XIO=0 
  1695  3520  7F                	ret
  1696  3521                    __end_of___lmul:
  1697                          ; =============== function ___lmul ends ============
  1698                          ; *************** function ___wmul *****************
  1699                          ; Defined at:
  1700                          ;		line 3 in file "C:\Program Files (x86)\HI-TECH Software\HCPSOC\PRO\9.61\sources\wmul.c"
  1701                          ; Parameters:
  1702                          ;		multiplier  	reg:   xa	type: unsigned int 
  1703                          ;		multiplicand	offs:   0	type: unsigned int 
  1704                          ; Auto variables:
  1705                          ;		multiplier  	       	type: unsigned int 
  1706                          ;		product     	       	type: unsigned int 
  1707                          ; Return value:
  1708                          ;		type: unsigned int 
  1709                          ;		size: 2
  1710                          ; Registers used:
  1711                          ;		a, x, CUR_PP
  1712                          ; Tracked objects:
  1713                          ;		On entry : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  1714                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  1715                          ;		Unchanged: IDX_PP MVR_PP MVW_PP 
  1716                          ; Data sizes:
  1717                          ;		Autos:    4
  1718                          ;		Params:   2
  1719                          ;		Temp:     0
  1720                          ;		Total:    6
  1721                          ; This function calls:
  1722                          ;		Nothing
  1723                          ; This function is called by:
  1724                          ;		_Si7020CalcTemp
  1725                          ; This function uses a non-reentrant model
  1726                          ; 
  1727  002C                    __size_of___wmul	equ	__end_of___wmul-___wmul
  1728                          ;wmul.c: 1: unsigned int
  1729                          ;wmul.c: 2: __wmul(unsigned int multiplier, unsigned int multiplicand)
  1730                          ;wmul.c: 3: {
  1731                          ;			CUR_PP=0 XIO=0 PG=2 
  1732  3521                    ___wmul:
  1733                          ;___wmul@multiplier stored from xa
  1734  3521  53 73             	mov	[(??___wmul^0+1)], a
  1735  3523  5A 72             	mov	[??___wmul^0], x
  1736                          ;wmul.c: 4: unsigned int product = 0;
  1737  3525  55 74  00         	mov	[(??___wmul+2)^0], 0
  1738  3528  55 75  00         	mov	[((??___wmul+2)^0+1)], 0
  1739                          ;wmul.c: 6: do {
  1740                          ;			CUR_PP=0 XIO=0 
  1741  352B                    l257:
  1742                          ;wmul.c: 7: if(multiplier & 1)
  1743  352B  47 73  01         	tst	[(??___wmul+1)^0], 1
  1744  352E  A009              	jz	l258
  1745                          ;wmul.c: 8: product += multiplicand;
  1746  3530  51 71             	mov	a, [(?___wmul^0+1)]
  1747  3532  04 75             	add	[((??___wmul+2)^0+1)], a
  1748  3534  51 70             	mov	a, [?___wmul^0]
  1749  3536  0C 74             	adc	[(??___wmul+2)^0], a
  1750                          ;			CUR_PP=0 XIO=0 
  1751  3538                    l258:
  1752                          ;wmul.c: 9: multiplicand <<= 1;
  1753  3538  65 71             	asl	[(?___wmul^0+1)]
  1754  353A  6B 70             	rlc	[?___wmul^0]
  1755                          ;wmul.c: 10: multiplier >>= 1;
  1756  353C  70 FB             	and	f, 0xFB
  1757  353E  6E 72             	rrc	[??___wmul^0]
  1758  3540  6E 73             	rrc	[(??___wmul^0+1)]
  1759                          ;wmul.c: 11: } while(multiplier != 0);
  1760  3542  51 72             	mov	a, [??___wmul^0]
  1761  3544  2A 73             	or	a, [(??___wmul^0+1)]
  1762  3546  BFE4              	jnz	l257
  1763                          ;			CUR_PP=0 XIO=0 
  1764                          ;wmul.c: 12: return product;
  1765  3548  51 75             	mov	a, [((??___wmul+2)^0+1)]
  1766  354A  58 74             	mov	x, [(??___wmul+2)^0]
  1767                          ;wmul.c: 13: }
  1768                          ;			CUR_PP=0 XIO=0 
  1769  354C  7F                	ret
  1770  354D                    __end_of___wmul:
  1771                          ; =============== function ___wmul ends ============
  1772                          ; *************** function _DisplayPMxx *****************
  1773                          ; Defined at:
  1774                          ;		line 12 in file "./lcd.c"
  1775                          ; Parameters:
  1776                          ;		pm          	reg:   xa	type: unsigned int 
  1777                          ; Auto variables:
  1778                          ;		pm          	       	type: unsigned int 
  1779                          ;		temp        	       	type: unsigned int 
  1780                          ;		index       	       	type: unsigned int 
  1781                          ;		k           	       	type: unsigned char 
  1782                          ; Return value:
  1783                          ;		type: void 
  1784                          ;		size: 0
  1785                          ; Registers used:
  1786                          ;		a, x, CUR_PP
  1787                          ; Tracked objects:
  1788                          ;		On entry : CUR_PP=0 IDX_PP=0 XIO=0 PG? MVR_PP? MVW_PP? 
  1789                          ;		On exit  : CUR_PP=0 IDX_PP=0 XIO=0 PG? MVR_PP? MVW_PP? 
  1790                          ;		Unchanged: MVR_PP MVW_PP 
  1791                          ; Data sizes:
  1792                          ;		Autos:    7
  1793                          ;		Params:   0
  1794                          ;		Temp:     0
  1795                          ;		Total:    7
  1796                          ; This function calls:
  1797                          ;		___lwdiv
  1798                          ;		___lwmod
  1799                          ; This function is called by:
  1800                          ;		_LCDOuputAll
  1801                          ; This function uses a non-reentrant model
  1802                          ; 
  1803  00B7                    __size_of_DisplayPMxx	equ	__end_of_DisplayPMxx-_DisplayPMxx
  1804                          ;lcd.c: 11: void DisplayPMxx(unsigned int pm)
  1805                          ;lcd.c: 12: {
  1806                          ;			CUR_PP=0 IDX_PP=0 XIO=0 PG=2 
  1807  354D                    _DisplayPMxx:
  1808                          ;lcd.c: 13: char k = 0;
  1809  354D  55 6C  00         	mov	[(??_DisplayPMxx+6)^0], 0
  1810                          ;lcd.c: 14: unsigned int index;
  1811                          ;lcd.c: 15: unsigned int temp;
  1812                          ;lcd.c: 17: temp = pm;
  1813  3550  53 69             	mov	[((??_DisplayPMxx+2)^0+1)], a
  1814  3552  5A 68             	mov	[(??_DisplayPMxx+2)^0], x
  1815                          ;lcd.c: 18: if(temp > 999)
  1816  3554  3C 68  03         	cmp	[(??_DisplayPMxx+2)^0], 3
  1817  3557  B004              	jnz	u213
  1818  3559  3C 69  E8         	cmp	[((??_DisplayPMxx+2)^0+1)], 232
  1819  355C                    u213:
  1820  355C  C007              	jc	l42
  1821                          ;lcd.c: 19: {
  1822                          ;lcd.c: 20: temp = 999;
  1823  355E  55 68  03         	mov	[(??_DisplayPMxx+2)^0], 3
  1824  3561  55 69  E7         	mov	[((??_DisplayPMxx+2)^0+1)], 231
  1825                          ;			CUR_PP=0 IDX_PP=0 XIO=0 PG=2 
  1826  3564                    l42:
  1827                          ;lcd.c: 21: }
  1828                          ;lcd.c: 23: index = temp/100;
  1829  3564  55 6D  00         	mov	[?___lwdiv^0], 0
  1830  3567  55 6E  64         	mov	[(?___lwdiv^0+1)], 100
  1831  356A  51 69             	mov	a, [((??_DisplayPMxx+2)^0+1)]
  1832  356C  58 68             	mov	x, [(??_DisplayPMxx+2)^0]
  1833  356E  7C 39FC           	call	___lwdiv
  1834  3571  5A 6A             	mov	[(??_DisplayPMxx+4)^0], x
  1835  3573  53 6B             	mov	[(??_DisplayPMxx+5)^0], a
  1836                          ;lcd.c: 24: DisplayNum[0] = index;
  1837  3575  5F 28  6B         	mov	[_DisplayNum^0], [(??_DisplayPMxx+5)^0]
  1838                          ;lcd.c: 26: temp = temp%100;
  1839  3578  55 6D  00         	mov	[?___lwmod^0], 0
  1840  357B  55 6E  64         	mov	[(?___lwmod^0+1)], 100
  1841  357E  51 69             	mov	a, [((??_DisplayPMxx+2)^0+1)]
  1842  3580  58 68             	mov	x, [(??_DisplayPMxx+2)^0]
  1843  3582  71 80             	or	f, 0x80	;select multiple RAM page mode
  1844  3584  7C 37E1           	call	___lwmod
  1845  3587  5A 68             	mov	[(??_DisplayPMxx+2)^0], x
  1846  3589  53 69             	mov	[(??_DisplayPMxx+3)^0], a
  1847                          ;lcd.c: 27: index = temp/10;
  1848  358B  55 6D  00         	mov	[?___lwdiv^0], 0
  1849  358E  55 6E  0A         	mov	[(?___lwdiv^0+1)], 10
  1850  3591  51 69             	mov	a, [((??_DisplayPMxx+2)^0+1)]
  1851  3593  58 68             	mov	x, [(??_DisplayPMxx+2)^0]
  1852  3595  71 80             	or	f, 0x80	;select multiple RAM page mode
  1853  3597  7C 39FC           	call	___lwdiv
  1854  359A  5A 6A             	mov	[(??_DisplayPMxx+4)^0], x
  1855  359C  53 6B             	mov	[(??_DisplayPMxx+5)^0], a
  1856                          ;lcd.c: 28: DisplayNum[1] = index;
  1857  359E  5F 29  6B         	mov	[(_DisplayNum+1)^0], [(??_DisplayPMxx+5)^0]
  1858                          ;lcd.c: 30: index = temp%10;
  1859  35A1  55 6D  00         	mov	[?___lwmod^0], 0
  1860  35A4  55 6E  0A         	mov	[(?___lwmod^0+1)], 10
  1861  35A7  51 69             	mov	a, [((??_DisplayPMxx+2)^0+1)]
  1862  35A9  58 68             	mov	x, [(??_DisplayPMxx+2)^0]
  1863  35AB  71 80             	or	f, 0x80	;select multiple RAM page mode
  1864  35AD  7C 37E1           	call	___lwmod
  1865  35B0  5A 6A             	mov	[(??_DisplayPMxx+4)^0], x
  1866  35B2  53 6B             	mov	[(??_DisplayPMxx+5)^0], a
  1867                          ;lcd.c: 31: DisplayNum[2] = index;
  1868  35B4  5F 2A  6B         	mov	[(_DisplayNum+2)^0], [(??_DisplayPMxx+5)^0]
  1869                          ;lcd.c: 33: k = 0;
  1870  35B7  57 00             	mov	x, 0
  1871                          ;lcd.c: 34: while (k<2)
  1872  35B9  7D 35DF           	jmp	l43
  1873                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
  1874  35BC                    l44:
  1875                          ;DisplayPMxx@k stored from x
  1876  35BC  5A 6C             	mov	[(??_DisplayPMxx+6)^0], x
  1877                          ;lcd.c: 35: {
  1878                          ;lcd.c: 36: if (DisplayNum[k])
  1879  35BE  52 28             	mov	a, [x+_DisplayNum]
  1880  35C0  A018              	jz	l46
  1881                          ;lcd.c: 37: {
  1882                          ;lcd.c: 38: DisplayBuf[k] = DigitSeg[DisplayNum[k]];
  1883  35C2  51 6C             	mov	a, [(??_DisplayPMxx+6)^0]
  1884  35C4  01 28             	add	a, <(<_DisplayNum)
  1885  35C6  5C                	mov	x, a
  1886  35C7  52 00             	mov	a, [x+0]
  1887  35C9  01 00             	add	a, <_DigitSeg
  1888  35CB  5C                	mov	x, a
  1889  35CC  50 3E             	mov	a, >_DigitSeg
  1890  35CE  28                	romx
  1891  35CF  58 6C             	mov	x, [(??_DisplayPMxx+6)^0]
  1892  35D1  54 4B             	mov	[x+_DisplayBuf], a
  1893                          ; DisplayPMxx@k loaded to x
  1894  35D3  58 6C             	mov	x, [(??_DisplayPMxx+6)^0]
  1895                          ;lcd.c: 39: k++;
  1896  35D5  75                	inc	x
  1897                          ;lcd.c: 40: break;
  1898  35D6  7D 35E4           	jmp	l45
  1899                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
  1900  35D9                    l46:
  1901                          ; DisplayPMxx@k loaded to x
  1902  35D9  58 6C             	mov	x, [(??_DisplayPMxx+6)^0]
  1903                          ;lcd.c: 42: else
  1904                          ;lcd.c: 43: {
  1905                          ;lcd.c: 44: DisplayBuf[k] = 0;
  1906  35DB  56 4B  00         	mov	[x+_DisplayBuf], 0
  1907                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
  1908                          ;lcd.c: 45: }
  1909                          ;lcd.c: 46: k++;
  1910  35DE  75                	inc	x
  1911                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
  1912  35DF                    l43:
  1913  35DF  5B                	mov	a, x
  1914  35E0  39 02             	cmp	a, 2
  1915  35E2  CFD9              	jc	l44
  1916                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
  1917  35E4                    l45:
  1918                          ;DisplayPMxx@k stored from x
  1919  35E4  5A 6C             	mov	[(??_DisplayPMxx+6)^0], x
  1920                          ;lcd.c: 47: }
  1921                          ;lcd.c: 49: for (;k<3;k++)
  1922  35E6  5B                	mov	a, x
  1923  35E7  39 03             	cmp	a, 3
  1924  35E9  D019              	jnc	l49
  1925                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
  1926  35EB                    l48:
  1927                          ;lcd.c: 50: {
  1928                          ;lcd.c: 51: DisplayBuf[k] = DigitSeg[DisplayNum[k]];
  1929  35EB  51 6C             	mov	a, [(??_DisplayPMxx+6)^0]
  1930  35ED  01 28             	add	a, <(<_DisplayNum)
  1931  35EF  5C                	mov	x, a
  1932  35F0  52 00             	mov	a, [x+0]
  1933  35F2  01 00             	add	a, <_DigitSeg
  1934  35F4  5C                	mov	x, a
  1935  35F5  50 3E             	mov	a, >_DigitSeg
  1936  35F7  28                	romx
  1937  35F8  58 6C             	mov	x, [(??_DisplayPMxx+6)^0]
  1938  35FA  54 4B             	mov	[x+_DisplayBuf], a
  1939  35FC  76 6C             	inc	[(??_DisplayPMxx+6)^0]
  1940  35FE  3C 6C  03         	cmp	[(??_DisplayPMxx+6)^0], 3
  1941  3601  CFE9              	jc	l48
  1942                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
  1943  3603                    l49:
  1944                          ;lcd.c: 52: }
  1945                          ;lcd.c: 53: }
  1946                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
  1947  3603  7F                	ret
  1948  3604                    __end_of_DisplayPMxx:
  1949                          ; =============== function _DisplayPMxx ends ============
  1950                          ; *************** function _ShowHumiTemp *****************
  1951                          ; Defined at:
  1952                          ;		line 78 in file "./lcd.c"
  1953                          ; Parameters:
  1954                          ;		value       	reg:    a	type: char 
  1955                          ; Auto variables:
  1956                          ;		value       	       	type: char 
  1957                          ;		temp        	       	type: char 
  1958                          ;		index       	       	type: unsigned char 
  1959                          ; Return value:
  1960                          ;		type: void 
  1961                          ;		size: 0
  1962                          ; Registers used:
  1963                          ;		a, x, CUR_PP
  1964                          ; Tracked objects:
  1965                          ;		On entry : CUR_PP=0 IDX_PP=0 XIO=0 PG? MVR_PP? MVW_PP? 
  1966                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  1967                          ;		Unchanged: MVR_PP MVW_PP 
  1968                          ; Data sizes:
  1969                          ;		Autos:    3
  1970                          ;		Params:   0
  1971                          ;		Temp:     2
  1972                          ;		Total:    5
  1973                          ; This function calls:
  1974                          ;		_abs
  1975                          ;		___awdiv
  1976                          ;		___awmod
  1977                          ; This function is called by:
  1978                          ;		_LCDOuputAll
  1979                          ; This function uses a non-reentrant model
  1980                          ; 
  1981  0098                    __size_of_ShowHumiTemp	equ	__end_of_ShowHumiTemp-_ShowHumiTemp
  1982                          ;lcd.c: 77: void ShowHumiTemp(signed char value)
  1983                          ;lcd.c: 78: {
  1984                          ;			CUR_PP=0 IDX_PP=0 XIO=0 PG=2 
  1985  3604                    _ShowHumiTemp:
  1986                          ;ShowHumiTemp@value stored from a
  1987  3604  53 66             	mov	[??_ShowHumiTemp^0], a
  1988                          ;lcd.c: 79: signed char temp = value;
  1989  3606  58 66             	mov	x, [??_ShowHumiTemp^0]
  1990                          ;lcd.c: 80: unsigned char index;
  1991                          ;lcd.c: 81: if (temp > 99)
  1992  3608  5B                	mov	a, x
  1993  3609  31 80             	xor	a, 0x80
  1994  360B  39 E4             	cmp	a, 228
  1995  360D  C003              	jc	l56
  1996                          ;lcd.c: 82: {
  1997                          ;lcd.c: 83: temp = 99;
  1998  360F  57 63             	mov	x, 99
  1999                          ;			CUR_PP=0 IDX_PP=0 XIO=0 PG=2 
  2000  3611                    l56:
  2001                          ;ShowHumiTemp@temp stored from x
  2002  3611  5A 67             	mov	[(??_ShowHumiTemp+1)^0], x
  2003                          ;lcd.c: 84: }
  2004                          ;lcd.c: 86: if (temp < 0)
  2005  3613  5B                	mov	a, x
  2006  3614  31 80             	xor	a, 0x80
  2007  3616  39 80             	cmp	a, 128
  2008  3618  D02E              	jnc	l57
  2009                          ;lcd.c: 87: {
  2010                          ;lcd.c: 88: DisplayBuf[9] = 0x20;
  2011  361A  55 54  20         	mov	[(_DisplayBuf+9)^0], 32
  2012                          ;lcd.c: 89: temp = abs(temp);
  2013  361D  51 67             	mov	a, [(??_ShowHumiTemp+1)^0]
  2014  361F  53 6A             	mov	[(??_ShowHumiTemp^0+4)], a
  2015  3621  55 69  00         	mov	[(??_ShowHumiTemp^0+3)], 0
  2016  3624  6A                	rlc	a
  2017  3625  1E 69  00         	sbb	[(??_ShowHumiTemp^0+3)], 0
  2018  3628  51 6A             	mov	a, [(??_ShowHumiTemp^0+4)]
  2019  362A  58 69             	mov	x, [(??_ShowHumiTemp^0+3)]
  2020  362C  7C 385A           	call	_abs
  2021  362F  53 67             	mov	[(??_ShowHumiTemp+1)^0], a
  2022                          ;lcd.c: 90: if (temp > 9)
  2023  3631  51 67             	mov	a, [(??_ShowHumiTemp+1)^0]
  2024  3633  31 80             	xor	a, 0x80
  2025  3635  39 8A             	cmp	a, 138
  2026  3637  C004              	jc	l58
  2027                          ;lcd.c: 91: {
  2028                          ;lcd.c: 92: temp = 9;
  2029  3639  55 67  09         	mov	[(??_ShowHumiTemp+1)^0], 9
  2030                          ;			CUR_PP=0 IDX_PP=0 XIO=0 PG=2 
  2031  363C                    l58:
  2032                          ;lcd.c: 93: }
  2033                          ;lcd.c: 94: DisplayBuf[8] = DigitSegSwap[temp];
  2034  363C  51 67             	mov	a, [(??_ShowHumiTemp+1)^0]
  2035  363E  01 0A             	add	a, <_DigitSegSwap
  2036  3640  5C                	mov	x, a
  2037  3641  50 3E             	mov	a, >_DigitSegSwap
  2038  3643  28                	romx
  2039  3644  53 53             	mov	[(_DisplayBuf+8)^0], a
  2040                          ;lcd.c: 95: }
  2041  3646  7F                	ret
  2042                          ;			CUR_PP=0 IDX_PP=0 XIO=0 PG=2 
  2043  3647                    l57:
  2044                          ;lcd.c: 96: else
  2045                          ;lcd.c: 97: {
  2046                          ;lcd.c: 98: index = temp/10;
  2047  3647  55 6B  00         	mov	[?___awdiv^0], 0
  2048  364A  55 6C  0A         	mov	[(?___awdiv^0+1)], 10
  2049  364D  51 67             	mov	a, [(??_ShowHumiTemp+1)^0]
  2050  364F  53 6A             	mov	[(??_ShowHumiTemp^0+4)], a
  2051  3651  55 69  00         	mov	[(??_ShowHumiTemp^0+3)], 0
  2052  3654  6A                	rlc	a
  2053  3655  1E 69  00         	sbb	[(??_ShowHumiTemp^0+3)], 0
  2054  3658  51 6A             	mov	a, [(??_ShowHumiTemp^0+4)]
  2055  365A  58 69             	mov	x, [(??_ShowHumiTemp^0+3)]
  2056  365C  7C 3873           	call	___awdiv
  2057  365F  53 68             	mov	[(??_ShowHumiTemp+2)^0], a
  2058                          ;lcd.c: 99: if(index)
  2059  3661  51 68             	mov	a, [(??_ShowHumiTemp+2)^0]
  2060  3663  A00E              	jz	l60
  2061                          ;lcd.c: 100: {
  2062                          ;lcd.c: 101: DisplayBuf[9] = DigitSegSwap[index];
  2063  3665  51 68             	mov	a, [(??_ShowHumiTemp+2)^0]
  2064  3667  01 0A             	add	a, <_DigitSegSwap
  2065  3669  5C                	mov	x, a
  2066  366A  50 3E             	mov	a, >_DigitSegSwap
  2067  366C  28                	romx
  2068  366D  53 54             	mov	[(_DisplayBuf+9)^0], a
  2069                          ;lcd.c: 102: }
  2070  366F  7D 3675           	jmp	l61
  2071                          ;			CUR_PP=0 XIO=0 
  2072  3672                    l60:
  2073                          ;lcd.c: 103: else
  2074                          ;lcd.c: 104: {
  2075                          ;lcd.c: 105: DisplayBuf[9] = 0;
  2076  3672  55 54  00         	mov	[(_DisplayBuf+9)^0], 0
  2077                          ;			CUR_PP=0 XIO=0 
  2078  3675                    l61:
  2079                          ;lcd.c: 106: }
  2080                          ;lcd.c: 108: index = temp%10;
  2081  3675  55 6B  00         	mov	[?___awmod^0], 0
  2082  3678  55 6C  0A         	mov	[(?___awmod^0+1)], 10
  2083  367B  51 67             	mov	a, [(??_ShowHumiTemp+1)^0]
  2084  367D  53 6A             	mov	[(??_ShowHumiTemp^0+4)], a
  2085  367F  55 69  00         	mov	[(??_ShowHumiTemp^0+3)], 0
  2086  3682  6A                	rlc	a
  2087  3683  1E 69  00         	sbb	[(??_ShowHumiTemp^0+3)], 0
  2088  3686  51 6A             	mov	a, [(??_ShowHumiTemp^0+4)]
  2089  3688  58 69             	mov	x, [(??_ShowHumiTemp^0+3)]
  2090  368A  71 80             	or	f, 0x80	;select multiple RAM page mode
  2091  368C  7C 3915           	call	___awmod
  2092  368F  53 68             	mov	[(??_ShowHumiTemp+2)^0], a
  2093                          ;lcd.c: 109: DisplayBuf[8] = DigitSegSwap[index];
  2094  3691  51 68             	mov	a, [(??_ShowHumiTemp+2)^0]
  2095  3693  01 0A             	add	a, <_DigitSegSwap
  2096  3695  5C                	mov	x, a
  2097  3696  50 3E             	mov	a, >_DigitSegSwap
  2098  3698  28                	romx
  2099  3699  53 53             	mov	[(_DisplayBuf+8)^0], a
  2100                          ;			CUR_PP=0 XIO=0 
  2101                          ;lcd.c: 110: }
  2102                          ;lcd.c: 111: }
  2103                          ;			CUR_PP=0 XIO=0 
  2104  369B  7F                	ret
  2105  369C                    __end_of_ShowHumiTemp:
  2106                          ; =============== function _ShowHumiTemp ends ============
  2107                          ; *************** function _ShowLife *****************
  2108                          ; Defined at:
  2109                          ;		line 56 in file "./lcd.c"
  2110                          ; Parameters:
  2111                          ;		life        	reg:    a	type: unsigned char 
  2112                          ; Auto variables:
  2113                          ;		life        	       	type: unsigned char 
  2114                          ;		temp        	       	type: unsigned char 
  2115                          ;		index       	       	type: unsigned char 
  2116                          ; Return value:
  2117                          ;		type: void 
  2118                          ;		size: 0
  2119                          ; Registers used:
  2120                          ;		a, x, CUR_PP
  2121                          ; Tracked objects:
  2122                          ;		On entry : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  2123                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  2124                          ;		Unchanged: MVR_PP MVW_PP 
  2125                          ; Data sizes:
  2126                          ;		Autos:    3
  2127                          ;		Params:   0
  2128                          ;		Temp:     0
  2129                          ;		Total:    3
  2130                          ; This function calls:
  2131                          ;		___lbdiv
  2132                          ;		___lbmod
  2133                          ; This function is called by:
  2134                          ;		_LCDOuputAll
  2135                          ; This function uses a non-reentrant model
  2136                          ; 
  2137  0040                    __size_of_ShowLife	equ	__end_of_ShowLife-_ShowLife
  2138                          ;lcd.c: 55: void ShowLife(unsigned char life)
  2139                          ;lcd.c: 56: {
  2140                          ;			CUR_PP=0 XIO=0 PG=2 
  2141  369C                    _ShowLife:
  2142                          ;ShowLife@life stored from a
  2143  369C  53 66             	mov	[??_ShowLife^0], a
  2144                          ;lcd.c: 57: unsigned char temp = life;
  2145  369E  51 66             	mov	a, [??_ShowLife^0]
  2146                          ;ShowLife@temp stored from a
  2147  36A0  53 68             	mov	[(??_ShowLife+2)^0], a
  2148                          ;lcd.c: 58: unsigned char index;
  2149                          ;lcd.c: 59: if (temp > 99)
  2150  36A2  39 64             	cmp	a, 100
  2151  36A4  C004              	jc	l52
  2152                          ;lcd.c: 60: {
  2153                          ;lcd.c: 61: temp = 99;
  2154  36A6  55 68  63         	mov	[(??_ShowLife+2)^0], 99
  2155                          ;			CUR_PP=0 XIO=0 PG=2 
  2156  36A9                    l52:
  2157                          ;lcd.c: 62: }
  2158                          ;lcd.c: 64: index = temp/10;
  2159  36A9  51 68             	mov	a, [(??_ShowLife+2)^0]
  2160  36AB  57 0A             	mov	x, 10
  2161  36AD  7C 37B1           	call	___lbdiv
  2162  36B0  53 67             	mov	[(??_ShowLife+1)^0], a
  2163                          ;lcd.c: 65: if(index)
  2164  36B2  51 67             	mov	a, [(??_ShowLife+1)^0]
  2165  36B4  A00E              	jz	l53
  2166                          ;lcd.c: 66: {
  2167                          ;lcd.c: 67: DisplayBuf[3] = DigitSeg[index];
  2168  36B6  51 67             	mov	a, [(??_ShowLife+1)^0]
  2169  36B8  01 00             	add	a, <_DigitSeg
  2170  36BA  5C                	mov	x, a
  2171  36BB  50 3E             	mov	a, >_DigitSeg
  2172  36BD  28                	romx
  2173  36BE  53 4E             	mov	[(_DisplayBuf+3)^0], a
  2174                          ;lcd.c: 68: }
  2175  36C0  7D 36C6           	jmp	l54
  2176                          ;			CUR_PP=0 XIO=0 
  2177  36C3                    l53:
  2178                          ;lcd.c: 69: else
  2179                          ;lcd.c: 70: {
  2180                          ;lcd.c: 71: DisplayBuf[3] = 0;
  2181  36C3  55 4E  00         	mov	[(_DisplayBuf+3)^0], 0
  2182                          ;			CUR_PP=0 XIO=0 
  2183  36C6                    l54:
  2184                          ;lcd.c: 72: }
  2185                          ;lcd.c: 74: index = temp%10;
  2186  36C6  51 68             	mov	a, [(??_ShowLife+2)^0]
  2187  36C8  57 0A             	mov	x, 10
  2188  36CA  71 80             	or	f, 0x80	;select multiple RAM page mode
  2189  36CC  7C 38F1           	call	___lbmod
  2190  36CF  53 67             	mov	[(??_ShowLife+1)^0], a
  2191                          ;lcd.c: 75: DisplayBuf[4] = DigitSeg[index];
  2192  36D1  51 67             	mov	a, [(??_ShowLife+1)^0]
  2193  36D3  01 00             	add	a, <_DigitSeg
  2194  36D5  5C                	mov	x, a
  2195  36D6  50 3E             	mov	a, >_DigitSeg
  2196  36D8  28                	romx
  2197  36D9  53 4F             	mov	[(_DisplayBuf+4)^0], a
  2198                          ;lcd.c: 76: }
  2199                          ;			CUR_PP=0 XIO=0 
  2200  36DB  7F                	ret
  2201  36DC                    __end_of_ShowLife:
  2202                          ; =============== function _ShowLife ends ============
  2203                          ; *************** function _SendCmd *****************
  2204                          ; Defined at:
  2205                          ;		line 68 in file "./ht1621b.c"
  2206                          ; Parameters:
  2207                          ;		command     	reg:    a	type: unsigned char 
  2208                          ; Auto variables:
  2209                          ;		command     	       	type: unsigned char 
  2210                          ; Return value:
  2211                          ;		type: void 
  2212                          ;		size: 0
  2213                          ; Registers used:
  2214                          ;		a, x, CUR_PP
  2215                          ; Tracked objects:
  2216                          ;		On entry : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  2217                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  2218                          ;		Unchanged: IDX_PP MVR_PP MVW_PP 
  2219                          ; Data sizes:
  2220                          ;		Autos:    1
  2221                          ;		Params:   0
  2222                          ;		Temp:     0
  2223                          ;		Total:    1
  2224                          ; This function calls:
  2225                          ;		_SendBit_1621
  2226                          ;		_delay_us
  2227                          ; This function is called by:
  2228                          ;		_HT1621B_Init
  2229                          ; This function uses a non-reentrant model
  2230                          ; 
  2231  0021                    __size_of_SendCmd	equ	__end_of_SendCmd-_SendCmd
  2232                          ;ht1621b.c: 67: void SendCmd(unsigned char command)
  2233                          ;ht1621b.c: 68: {
  2234                          ;			CUR_PP=0 XIO=0 PG=2 
  2235  36DC                    _SendCmd:
  2236                          ;SendCmd@command stored from a
  2237  36DC  53 65             	mov	[??_SendCmd^0], a
  2238                          ;ht1621b.c: 69: (PRT0DR &= ~0x80);
  2239  36DE  41 00 7F          	and	reg[0], 0x7F
  2240                          ;ht1621b.c: 70: SendBit_1621(0x80,3);
  2241  36E1  50 80             	mov	a, 128
  2242  36E3  57 03             	mov	x, 3
  2243  36E5  7C 3776           	call	_SendBit_1621
  2244                          ;ht1621b.c: 71: SendBit_1621(command,9);
  2245  36E8  51 65             	mov	a, [??_SendCmd^0]
  2246  36EA  57 09             	mov	x, 9
  2247  36EC  71 80             	or	f, 0x80	;select multiple RAM page mode
  2248  36EE  7C 3776           	call	_SendBit_1621
  2249                          ;ht1621b.c: 72: (PRT0DR |= 0x80);
  2250  36F1  43 00 80          	or	reg[0], 0x80
  2251                          ;ht1621b.c: 73: delay_us(4);
  2252  36F4  50 04             	mov	a, 4
  2253  36F6  57 00             	mov	x, 0
  2254  36F8  71 80             	or	f, 0x80	;select multiple RAM page mode
  2255  36FA  7D 3B5C           	jmp	_delay_us
  2256                          ;ht1621b.c: 74: }
  2257                          ;			CUR_PP=0 XIO=0 
  2258  36FD                    __end_of_SendCmd:
  2259                          ; =============== function _SendCmd ends ============
  2260                          ; *************** function _Si7020SendCommand *****************
  2261                          ; Defined at:
  2262                          ;		line 10 in file "./si7020.c"
  2263                          ; Parameters:
  2264                          ;		cmd         	reg:    a	type: unsigned char 
  2265                          ; Auto variables:
  2266                          ;		cmd         	       	type: unsigned char 
  2267                          ; Return value:
  2268                          ;		type: unsigned char 
  2269                          ;		size: 1
  2270                          ; Registers used:
  2271                          ;		a, x, CUR_PP
  2272                          ; Tracked objects:
  2273                          ;		On entry : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  2274                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  2275                          ;		Unchanged: IDX_PP MVR_PP MVW_PP 
  2276                          ; Data sizes:
  2277                          ;		Autos:    1
  2278                          ;		Params:   0
  2279                          ;		Temp:     0
  2280                          ;		Total:    1
  2281                          ; This function calls:
  2282                          ;		_ISendByte
  2283                          ; This function is called by:
  2284                          ;		_main
  2285                          ;		_Si7020Read_Temp_after_RHM
  2286                          ; This function uses a non-reentrant model
  2287                          ; 
  2288  0009                    __size_of_Si7020SendCommand	equ	__end_of_Si7020SendCommand-_Si7020SendCommand
  2289                          ;si7020.c: 9: unsigned char Si7020SendCommand(char cmd)
  2290                          ;si7020.c: 10: {
  2291                          ;			CUR_PP=0 XIO=0 PG=2 
  2292  36FD                    _Si7020SendCommand:
  2293                          ;Si7020SendCommand@cmd stored from a
  2294  36FD  53 67             	mov	[??_Si7020SendCommand^0], a
  2295                          ;si7020.c: 11: return(ISendByte(0x80,cmd));
  2296  36FF  50 80             	mov	a, 128
  2297  3701  58 67             	mov	x, [??_Si7020SendCommand^0]
  2298  3703  7D 3A46           	jmp	_ISendByte
  2299                          ;si7020.c: 12: }
  2300                          ;			CUR_PP=0 XIO=0 
  2301  3706                    __end_of_Si7020SendCommand:
  2302                          ; =============== function _Si7020SendCommand ends ============
  2303                          ; *************** function _IRcvBytes *****************
  2304                          ; Defined at:
  2305                          ;		line 301 in file "./software_iic.c"
  2306                          ; Parameters:
  2307                          ;		sla         	reg:    a	type: unsigned char 
  2308                          ;		s           	reg:    x	type: PTR unsigned char ; Largest target is 5
  2309                          ;		 -> RecBuf(5), 
  2310                          ;		no          	offs:   0	type: unsigned char 
  2311                          ; Auto variables:
  2312                          ;		s           	       	type: PTR unsigned char ; Largest target is 5
  2313                          ;		 -> RecBuf(5), 
  2314                          ;		sla         	       	type: unsigned char 
  2315                          ;		i           	       	type: unsigned char 
  2316                          ; Return value:
  2317                          ;		type: unsigned char 
  2318                          ;		size: 1
  2319                          ; Registers used:
  2320                          ;		a, x, CUR_PP
  2321                          ; Tracked objects:
  2322                          ;		On entry : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  2323                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  2324                          ;		Unchanged: MVR_PP MVW_PP 
  2325                          ; Data sizes:
  2326                          ;		Autos:    3
  2327                          ;		Params:   1
  2328                          ;		Temp:     2
  2329                          ;		Total:    6
  2330                          ; This function calls:
  2331                          ;		_Start_I2c
  2332                          ;		_SendByte
  2333                          ;		_Stop_I2c
  2334                          ;		_RcvByte
  2335                          ;		_Ack_I2c
  2336                          ; This function is called by:
  2337                          ;		_Si7020Read_RH_NHM
  2338                          ;		_Si7020Read_Temp_after_RHM
  2339                          ; This function uses a non-reentrant model
  2340                          ; 
  2341  0070                    __size_of_IRcvBytes	equ	__end_of_IRcvBytes-_IRcvBytes
  2342                          ;software_iic.c: 300: unsigned char IRcvBytes(unsigned char sla,unsigned char *s,unsigned char no)
  2343                          ;software_iic.c: 301: {
  2344                          ;			CUR_PP=0 XIO=0 PG=2 
  2345  3706                    _IRcvBytes:
  2346                          ;IRcvBytes@sla stored from a
  2347  3706  53 69             	mov	[(??_IRcvBytes+1)^0], a
  2348                          ;IRcvBytes@s stored from x
  2349  3708  5A 68             	mov	[??_IRcvBytes^0], x
  2350                          ;software_iic.c: 302: unsigned char i;
  2351                          ;software_iic.c: 304: Start_I2c();
  2352  370A  7C 3A9D           	call	_Start_I2c
  2353                          ;software_iic.c: 305: SendByte(sla+1);
  2354  370D  50 01             	mov	a, 1
  2355  370F  02 69             	add	a, [(??_IRcvBytes+1)^0]
  2356  3711  71 80             	or	f, 0x80	;select multiple RAM page mode
  2357  3713  7C 3AC2           	call	_SendByte
  2358                          ;software_iic.c: 306: if(ack==0)
  2359  3716  51 48             	mov	a, [_ack^0]
  2360  3718  B009              	jnz	l238
  2361                          ;software_iic.c: 307: {
  2362                          ;software_iic.c: 308: Stop_I2c();
  2363  371A  71 80             	or	f, 0x80	;select multiple RAM page mode
  2364  371C  7C 3A7B           	call	_Stop_I2c
  2365                          ;software_iic.c: 309: return(0);
  2366  371F  50 00             	mov	a, 0
  2367  3721  7F                	ret
  2368                          ;			CUR_PP=0 XIO=0 
  2369  3722                    l238:
  2370                          ;software_iic.c: 310: }
  2371                          ;software_iic.c: 311: for(i=0;i<no-1;i++)
  2372  3722  55 6A  00         	mov	[(??_IRcvBytes+2)^0], 0
  2373  3725  7D 373F           	jmp	l242
  2374                          ;			CUR_PP=0 XIO=0 
  2375  3728                    l239:
  2376                          ;software_iic.c: 312: {
  2377                          ;software_iic.c: 313: *s=RcvByte();
  2378  3728  71 80             	or	f, 0x80	;select multiple RAM page mode
  2379  372A  7C 39B4           	call	_RcvByte
  2380  372D  58 68             	mov	x, [??_IRcvBytes^0]
  2381  372F  62 D3 00          	mov	reg[211], 0
  2382  3732  54 00             	mov	[x+0], a
  2383                          ;software_iic.c: 314: Ack_I2c(0);
  2384  3734  50 00             	mov	a, 0
  2385  3736  71 80             	or	f, 0x80	;select multiple RAM page mode
  2386  3738  7C 3988           	call	_Ack_I2c
  2387                          ;software_iic.c: 315: s++;
  2388  373B  76 68             	inc	[??_IRcvBytes^0]
  2389  373D  76 6A             	inc	[(??_IRcvBytes+2)^0]
  2390                          ;			CUR_PP=0 XIO=0 
  2391  373F                    l242:
  2392  373F  5F 6C  67         	mov	[(??_IRcvBytes^0+4)], [?_IRcvBytes^0]
  2393  3742  55 6B  00         	mov	[(??_IRcvBytes^0+3)], 0
  2394  3745  06 6C  FF         	add	[(??_IRcvBytes^0+4)], 255
  2395  3748  0E 6B  FF         	adc	[(??_IRcvBytes^0+3)], 255
  2396  374B  51 6B             	mov	a, [(??_IRcvBytes^0+3)]
  2397  374D  31 80             	xor	a, 0x80
  2398  374F  39 80             	cmp	a, 128
  2399  3751  72 04             	xor	f, 4
  2400  3753  B005              	jnz	u363
  2401  3755  51 6A             	mov	a, [(??_IRcvBytes+2)^0]
  2402  3757  3A 6C             	cmp	a, [(??_IRcvBytes^0+4)]
  2403  3759                    u363:
  2404  3759  CFCE              	jc	l239
  2405                          ;			CUR_PP=0 XIO=0 
  2406                          ;software_iic.c: 316: }
  2407                          ;software_iic.c: 317: *s=RcvByte();
  2408  375B  71 80             	or	f, 0x80	;select multiple RAM page mode
  2409  375D  7C 39B4           	call	_RcvByte
  2410  3760  58 68             	mov	x, [??_IRcvBytes^0]
  2411  3762  62 D3 00          	mov	reg[211], 0
  2412  3765  54 00             	mov	[x+0], a
  2413                          ;software_iic.c: 318: Ack_I2c(1);
  2414  3767  50 01             	mov	a, 1
  2415  3769  71 80             	or	f, 0x80	;select multiple RAM page mode
  2416  376B  7C 3988           	call	_Ack_I2c
  2417                          ;software_iic.c: 319: Stop_I2c();
  2418  376E  71 80             	or	f, 0x80	;select multiple RAM page mode
  2419  3770  7C 3A7B           	call	_Stop_I2c
  2420                          ;software_iic.c: 320: return(1);
  2421  3773  50 01             	mov	a, 1
  2422                          ;software_iic.c: 321: }
  2423                          ;			CUR_PP=0 XIO=0 
  2424  3775  7F                	ret
  2425  3776                    __end_of_IRcvBytes:
  2426                          ; =============== function _IRcvBytes ends ============
  2427                          ; *************** function _SendBit_1621 *****************
  2428                          ; Defined at:
  2429                          ;		line 28 in file "./ht1621b.c"
  2430                          ; Parameters:
  2431                          ;		data        	reg:    a	type: unsigned char 
  2432                          ;		cnt         	reg:    x	type: unsigned char 
  2433                          ; Auto variables:
  2434                          ;		cnt         	       	type: unsigned char 
  2435                          ;		data        	       	type: unsigned char 
  2436                          ;		i           	       	type: unsigned char 
  2437                          ; Return value:
  2438                          ;		type: void 
  2439                          ;		size: 0
  2440                          ; Registers used:
  2441                          ;		a, x, CUR_PP
  2442                          ; Tracked objects:
  2443                          ;		On entry : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  2444                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  2445                          ;		Unchanged: IDX_PP MVR_PP MVW_PP 
  2446                          ; Data sizes:
  2447                          ;		Autos:    3
  2448                          ;		Params:   0
  2449                          ;		Temp:     0
  2450                          ;		Total:    3
  2451                          ; This function calls:
  2452                          ;		_delay_us
  2453                          ; This function is called by:
  2454                          ;		_SendCmd
  2455                          ;		_WriteAll_1621
  2456                          ; This function uses a non-reentrant model
  2457                          ; 
  2458  003B                    __size_of_SendBit_1621	equ	__end_of_SendBit_1621-_SendBit_1621
  2459                          ;ht1621b.c: 27: void SendBit_1621(unsigned char data,unsigned char cnt)
  2460                          ;ht1621b.c: 28: {
  2461                          ;			CUR_PP=0 XIO=0 PG=2 
  2462  3776                    _SendBit_1621:
  2463                          ;SendBit_1621@data stored from a
  2464  3776  53 6B             	mov	[(??_SendBit_1621+1)^0], a
  2465                          ;SendBit_1621@cnt stored from x
  2466  3778  5A 6A             	mov	[??_SendBit_1621^0], x
  2467                          ;ht1621b.c: 29: unsigned char i;
  2468                          ;ht1621b.c: 30: for(i =0; i <cnt; i ++)
  2469  377A  50 00             	mov	a, 0
  2470  377C  7D 37AA           	jmp	l17
  2471                          ;			CUR_PP=0 XIO=0 
  2472  377F                    l14:
  2473                          ;ht1621b.c: 31: {
  2474                          ;ht1621b.c: 32: if((data&0x80)==0)
  2475  377F  3C 6B  80         	cmp	[(??_SendBit_1621+1)^0], 128
  2476  3782  D007              	jnc	l18
  2477                          ;ht1621b.c: 33: {
  2478                          ;ht1621b.c: 34: (PRT0DR &= ~0x02);
  2479  3784  41 00 FD          	and	reg[0], 0xFD
  2480                          ;ht1621b.c: 35: }
  2481  3787  7D 378D           	jmp	l19
  2482                          ;			CUR_PP=0 XIO=0 
  2483  378A                    l18:
  2484                          ;ht1621b.c: 36: else
  2485                          ;ht1621b.c: 37: {
  2486                          ;ht1621b.c: 38: (PRT0DR |= 0x02);
  2487  378A  43 00 02          	or	reg[0], 2
  2488                          ;			CUR_PP=0 XIO=0 
  2489  378D                    l19:
  2490                          ;ht1621b.c: 39: }
  2491                          ;ht1621b.c: 40: delay_us(4);
  2492  378D  50 04             	mov	a, 4
  2493  378F  57 00             	mov	x, 0
  2494  3791  71 80             	or	f, 0x80	;select multiple RAM page mode
  2495  3793  7C 3B5C           	call	_delay_us
  2496                          ;ht1621b.c: 41: (PRT0DR &= ~0x08);
  2497  3796  41 00 F7          	and	reg[0], 0xF7
  2498                          ;ht1621b.c: 42: delay_us(4);
  2499  3799  50 04             	mov	a, 4
  2500  379B  57 00             	mov	x, 0
  2501  379D  71 80             	or	f, 0x80	;select multiple RAM page mode
  2502  379F  7C 3B5C           	call	_delay_us
  2503                          ;ht1621b.c: 43: (PRT0DR |= 0x08);
  2504  37A2  43 00 08          	or	reg[0], 8
  2505                          ;ht1621b.c: 44: data<<=1;
  2506  37A5  65 6B             	asl	[(??_SendBit_1621+1)^0]
  2507                          ; SendBit_1621@i loaded to a
  2508  37A7  51 6C             	mov	a, [(??_SendBit_1621+2)^0]
  2509  37A9  74                	inc	a
  2510                          ;			CUR_PP=0 XIO=0 
  2511  37AA                    l17:
  2512                          ;SendBit_1621@i stored from a
  2513  37AA  53 6C             	mov	[(??_SendBit_1621+2)^0], a
  2514  37AC  3A 6A             	cmp	a, [??_SendBit_1621^0]
  2515  37AE  CFD0              	jc	l14
  2516                          ;			CUR_PP=0 XIO=0 
  2517                          ;ht1621b.c: 45: }
  2518                          ;ht1621b.c: 46: }
  2519                          ;			CUR_PP=0 XIO=0 
  2520  37B0  7F                	ret
  2521  37B1                    __end_of_SendBit_1621:
  2522                          ; =============== function _SendBit_1621 ends ============
  2523                          ; *************** function ___lbdiv *****************
  2524                          ; Defined at:
  2525                          ;		line 5 in file "C:\Program Files (x86)\HI-TECH Software\HCPSOC\PRO\9.61\sources\lbdiv.c"
  2526                          ; Parameters:
  2527                          ;		dividend    	reg:    a	type: unsigned char 
  2528                          ;		divisor     	reg:    x	type: unsigned char 
  2529                          ; Auto variables:
  2530                          ;		divisor     	       	type: unsigned char 
  2531                          ;		dividend    	       	type: unsigned char 
  2532                          ;		quotient    	       	type: unsigned char 
  2533                          ;		counter     	       	type: unsigned char 
  2534                          ; Return value:
  2535                          ;		type: unsigned char 
  2536                          ;		size: 1
  2537                          ; Registers used:
  2538                          ;		a, x, CUR_PP
  2539                          ; Tracked objects:
  2540                          ;		On entry : CUR_PP=0 IDX_PP? XIO=0 PG=2 MVR_PP? MVW_PP? 
  2541                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  2542                          ;		Unchanged: MVR_PP MVW_PP 
  2543                          ; Data sizes:
  2544                          ;		Autos:    4
  2545                          ;		Params:   0
  2546                          ;		Temp:     0
  2547                          ;		Total:    4
  2548                          ; This function calls:
  2549                          ;		Nothing
  2550                          ; This function is called by:
  2551                          ;		_ShowLife
  2552                          ; This function uses a non-reentrant model
  2553                          ; 
  2554  0030                    __size_of___lbdiv	equ	__end_of___lbdiv-___lbdiv
  2555                          ;lbdiv.c: 3: unsigned char
  2556                          ;lbdiv.c: 4: __lbdiv(unsigned char dividend, unsigned char divisor)
  2557                          ;lbdiv.c: 5: {
  2558                          ;			CUR_PP=0 IDX_PP=0 XIO=0 PG=2 
  2559  37B1                    ___lbdiv:
  2560                          ;___lbdiv@dividend stored from a
  2561  37B1  53 6A             	mov	[(??___lbdiv+1)^0], a
  2562                          ; ___lbdiv@divisor loaded to a
  2563  37B3  5B                	mov	a, x
  2564                          ;lbdiv.c: 6: unsigned char quotient;
  2565                          ;lbdiv.c: 7: unsigned char counter;
  2566                          ;lbdiv.c: 9: quotient = 0;
  2567  37B4  55 6B  00         	mov	[(??___lbdiv+2)^0], 0
  2568                          ;lbdiv.c: 10: if(divisor != 0) {
  2569  37B7  39 00             	cmp	a, 0
  2570  37B9  A024              	jz	l278
  2571                          ;lbdiv.c: 11: counter = 1;
  2572  37BB  55 6C  01         	mov	[(??___lbdiv+3)^0], 1
  2573                          ;lbdiv.c: 12: while((divisor & 0x80) == 0) {
  2574  37BE  7D 37C4           	jmp	l279
  2575                          ;			CUR_PP=0 XIO=0 
  2576  37C1                    l280:
  2577                          ;lbdiv.c: 13: divisor <<= 1;
  2578  37C1  64                	asl	a
  2579                          ;lbdiv.c: 14: counter++;
  2580  37C2  76 6C             	inc	[(??___lbdiv+3)^0]
  2581                          ;			CUR_PP=0 XIO=0 
  2582  37C4                    l279:
  2583  37C4  39 80             	cmp	a, 128
  2584  37C6  CFFA              	jc	l280
  2585                          ;			CUR_PP=0 XIO=0 
  2586                          ;lbdiv.c: 15: }
  2587                          ;lbdiv.c: 16: do {
  2588                          ;			CUR_PP=0 XIO=0 
  2589  37C8                    l284:
  2590                          ;lbdiv.c: 17: quotient <<= 1;
  2591  37C8  65 6B             	asl	[(??___lbdiv+2)^0]
  2592                          ;lbdiv.c: 18: if(divisor <= dividend) {
  2593  37CA  3A 6A             	cmp	a, [(??___lbdiv+1)^0]
  2594  37CC  A003              	jz	u433
  2595  37CE  72 04             	xor	f, 4
  2596  37D0                    u433:
  2597  37D0  C006              	jc	l285
  2598                          ;lbdiv.c: 19: dividend -= divisor;
  2599  37D2  14 6A             	sub	[(??___lbdiv+1)^0], a
  2600                          ;lbdiv.c: 20: quotient |= 1;
  2601  37D4  2E 6B  01         	or	[(??___lbdiv+2)^0], 1
  2602                          ;			CUR_PP=0 XIO=0 
  2603  37D7                    l285:
  2604                          ;lbdiv.c: 21: }
  2605                          ;lbdiv.c: 22: divisor >>= 1;
  2606  37D7  70 FB             	and	f, 0xFB
  2607  37D9  6D                	rrc	a
  2608                          ;lbdiv.c: 23: } while(--counter != 0);
  2609  37DA  7A 6C             	dec	[(??___lbdiv+3)^0]
  2610  37DC  BFEB              	jnz	l284
  2611                          ;			CUR_PP=0 XIO=0 
  2612                          ;			CUR_PP=0 XIO=0 
  2613  37DE                    l278:
  2614                          ;lbdiv.c: 24: }
  2615                          ;lbdiv.c: 25: return quotient;
  2616  37DE  51 6B             	mov	a, [(??___lbdiv+2)^0]
  2617                          ;lbdiv.c: 26: }
  2618                          ;			CUR_PP=0 XIO=0 
  2619  37E0  7F                	ret
  2620  37E1                    __end_of___lbdiv:
  2621                          ; =============== function ___lbdiv ends ============
  2622                          ; *************** function ___lwmod *****************
  2623                          ; Defined at:
  2624                          ;		line 5 in file "C:\Program Files (x86)\HI-TECH Software\HCPSOC\PRO\9.61\sources\lwmod.c"
  2625                          ; Parameters:
  2626                          ;		dividend    	reg:   xa	type: unsigned int 
  2627                          ;		divisor     	offs:   0	type: unsigned int 
  2628                          ; Auto variables:
  2629                          ;		dividend    	       	type: unsigned int 
  2630                          ;		counter     	       	type: unsigned char 
  2631                          ; Return value:
  2632                          ;		type: unsigned int 
  2633                          ;		size: 2
  2634                          ; Registers used:
  2635                          ;		a, x, CUR_PP
  2636                          ; Tracked objects:
  2637                          ;		On entry : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  2638                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  2639                          ;		Unchanged: IDX_PP MVR_PP MVW_PP 
  2640                          ; Data sizes:
  2641                          ;		Autos:    3
  2642                          ;		Params:   2
  2643                          ;		Temp:     0
  2644                          ;		Total:    5
  2645                          ; This function calls:
  2646                          ;		Nothing
  2647                          ; This function is called by:
  2648                          ;		_DisplayPMxx
  2649                          ; This function uses a non-reentrant model
  2650                          ; 
  2651  003C                    __size_of___lwmod	equ	__end_of___lwmod-___lwmod
  2652                          ;lwmod.c: 3: unsigned int
  2653                          ;lwmod.c: 4: __lwmod(unsigned int dividend, unsigned int divisor)
  2654                          ;lwmod.c: 5: {
  2655                          ;			CUR_PP=0 XIO=0 PG=2 
  2656  37E1                    ___lwmod:
  2657                          ;___lwmod@dividend stored from xa
  2658  37E1  53 70             	mov	[(??___lwmod^0+1)], a
  2659  37E3  5A 6F             	mov	[??___lwmod^0], x
  2660                          ;lwmod.c: 6: unsigned char counter;
  2661                          ;lwmod.c: 8: if(divisor != 0) {
  2662  37E5  51 6D             	mov	a, [?___lwmod^0]
  2663  37E7  2A 6E             	or	a, [(?___lwmod^0+1)]
  2664  37E9  A02E              	jz	l269
  2665                          ;lwmod.c: 9: counter = 1;
  2666  37EB  55 71  01         	mov	[(??___lwmod+2)^0], 1
  2667                          ;lwmod.c: 10: while((divisor & 0x8000) == 0) {
  2668  37EE  7D 37F7           	jmp	l270
  2669                          ;			CUR_PP=0 XIO=0 
  2670  37F1                    l271:
  2671                          ;lwmod.c: 11: divisor <<= 1;
  2672  37F1  65 6E             	asl	[(?___lwmod^0+1)]
  2673  37F3  6B 6D             	rlc	[?___lwmod^0]
  2674                          ;lwmod.c: 12: counter++;
  2675  37F5  76 71             	inc	[(??___lwmod+2)^0]
  2676                          ;			CUR_PP=0 XIO=0 
  2677  37F7                    l270:
  2678  37F7  47 6D  80         	tst	[?___lwmod^0], 128
  2679  37FA  AFF6              	jz	l271
  2680                          ;			CUR_PP=0 XIO=0 
  2681                          ;lwmod.c: 13: }
  2682                          ;lwmod.c: 14: do {
  2683                          ;			CUR_PP=0 XIO=0 
  2684  37FC                    l275:
  2685                          ;lwmod.c: 15: if(divisor <= dividend)
  2686  37FC  51 70             	mov	a, [(??___lwmod^0+1)]
  2687  37FE  3A 6E             	cmp	a, [(?___lwmod^0+1)]
  2688  3800  51 6F             	mov	a, [??___lwmod^0]
  2689  3802  1A 6D             	sbb	a, [?___lwmod^0]
  2690  3804  C009              	jc	l276
  2691                          ;lwmod.c: 16: dividend -= divisor;
  2692  3806  51 6E             	mov	a, [(?___lwmod^0+1)]
  2693  3808  14 70             	sub	[(??___lwmod^0+1)], a
  2694  380A  51 6D             	mov	a, [?___lwmod^0]
  2695  380C  1C 6F             	sbb	[??___lwmod^0], a
  2696                          ;			CUR_PP=0 XIO=0 
  2697  380E                    l276:
  2698                          ;lwmod.c: 17: divisor >>= 1;
  2699  380E  70 FB             	and	f, 0xFB
  2700  3810  6E 6D             	rrc	[?___lwmod^0]
  2701  3812  6E 6E             	rrc	[(?___lwmod^0+1)]
  2702                          ;lwmod.c: 18: } while(--counter != 0);
  2703  3814  7A 71             	dec	[(??___lwmod+2)^0]
  2704  3816  BFE5              	jnz	l275
  2705                          ;			CUR_PP=0 XIO=0 
  2706                          ;			CUR_PP=0 XIO=0 
  2707  3818                    l269:
  2708                          ;lwmod.c: 19: }
  2709                          ;lwmod.c: 20: return dividend;
  2710  3818  51 70             	mov	a, [(??___lwmod^0+1)]
  2711  381A  58 6F             	mov	x, [??___lwmod^0]
  2712                          ;lwmod.c: 21: }
  2713                          ;			CUR_PP=0 XIO=0 
  2714  381C  7F                	ret
  2715  381D                    __end_of___lwmod:
  2716                          ; =============== function ___lwmod ends ============
  2717                          ; *************** function _SendDataBit_1621 *****************
  2718                          ; Defined at:
  2719                          ;		line 48 in file "./ht1621b.c"
  2720                          ; Parameters:
  2721                          ;		data        	reg:    a	type: unsigned char 
  2722                          ;		cnt         	reg:    x	type: unsigned char 
  2723                          ; Auto variables:
  2724                          ;		cnt         	       	type: unsigned char 
  2725                          ;		data        	       	type: unsigned char 
  2726                          ;		i           	       	type: unsigned char 
  2727                          ; Return value:
  2728                          ;		type: void 
  2729                          ;		size: 0
  2730                          ; Registers used:
  2731                          ;		a, x, CUR_PP
  2732                          ; Tracked objects:
  2733                          ;		On entry : CUR_PP=0 IDX_PP=0 XIO=0 PG? MVR_PP? MVW_PP? 
  2734                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  2735                          ;		Unchanged: MVR_PP MVW_PP 
  2736                          ; Data sizes:
  2737                          ;		Autos:    3
  2738                          ;		Params:   0
  2739                          ;		Temp:     0
  2740                          ;		Total:    3
  2741                          ; This function calls:
  2742                          ;		_delay_us
  2743                          ; This function is called by:
  2744                          ;		_WriteAll_1621
  2745                          ; This function uses a non-reentrant model
  2746                          ; 
  2747  003D                    __size_of_SendDataBit_1621	equ	__end_of_SendDataBit_1621-_SendDataBit_1621
  2748                          ;ht1621b.c: 47: void SendDataBit_1621(unsigned char data,unsigned char cnt)
  2749                          ;ht1621b.c: 48: {
  2750                          ;			CUR_PP=0 IDX_PP=0 XIO=0 PG=2 
  2751  381D                    _SendDataBit_1621:
  2752                          ;SendDataBit_1621@data stored from a
  2753  381D  53 6B             	mov	[(??_SendDataBit_1621+1)^0], a
  2754                          ;SendDataBit_1621@cnt stored from x
  2755  381F  5A 6A             	mov	[??_SendDataBit_1621^0], x
  2756                          ;ht1621b.c: 49: unsigned char i;
  2757                          ;ht1621b.c: 50: for(i =0; i <cnt; i ++)
  2758  3821  50 00             	mov	a, 0
  2759  3823  7D 3853           	jmp	l24
  2760                          ;			CUR_PP=0 XIO=0 
  2761  3826                    l21:
  2762                          ;ht1621b.c: 51: {
  2763                          ;ht1621b.c: 52: if((data&0x01)==0)
  2764  3826  47 6B  01         	tst	[(??_SendDataBit_1621+1)^0], 1
  2765  3829  B007              	jnz	l25
  2766                          ;ht1621b.c: 53: {
  2767                          ;ht1621b.c: 54: (PRT0DR &= ~0x02);
  2768  382B  41 00 FD          	and	reg[0], 0xFD
  2769                          ;ht1621b.c: 55: }
  2770  382E  7D 3834           	jmp	l26
  2771                          ;			CUR_PP=0 XIO=0 
  2772  3831                    l25:
  2773                          ;ht1621b.c: 56: else
  2774                          ;ht1621b.c: 57: {
  2775                          ;ht1621b.c: 58: (PRT0DR |= 0x02);
  2776  3831  43 00 02          	or	reg[0], 2
  2777                          ;			CUR_PP=0 XIO=0 
  2778  3834                    l26:
  2779                          ;ht1621b.c: 59: }
  2780                          ;ht1621b.c: 60: delay_us(4);
  2781  3834  50 04             	mov	a, 4
  2782  3836  57 00             	mov	x, 0
  2783  3838  71 80             	or	f, 0x80	;select multiple RAM page mode
  2784  383A  7C 3B5C           	call	_delay_us
  2785                          ;ht1621b.c: 61: (PRT0DR &= ~0x08);
  2786  383D  41 00 F7          	and	reg[0], 0xF7
  2787                          ;ht1621b.c: 62: delay_us(4);
  2788  3840  50 04             	mov	a, 4
  2789  3842  57 00             	mov	x, 0
  2790  3844  71 80             	or	f, 0x80	;select multiple RAM page mode
  2791  3846  7C 3B5C           	call	_delay_us
  2792                          ;ht1621b.c: 63: (PRT0DR |= 0x08);
  2793  3849  43 00 08          	or	reg[0], 8
  2794                          ;ht1621b.c: 64: data>>=1;
  2795  384C  70 FB             	and	f, 0xFB
  2796  384E  6E 6B             	rrc	[(??_SendDataBit_1621+1)^0]
  2797                          ; SendDataBit_1621@i loaded to a
  2798  3850  51 6C             	mov	a, [(??_SendDataBit_1621+2)^0]
  2799  3852  74                	inc	a
  2800                          ;			CUR_PP=0 XIO=0 
  2801  3853                    l24:
  2802                          ;SendDataBit_1621@i stored from a
  2803  3853  53 6C             	mov	[(??_SendDataBit_1621+2)^0], a
  2804  3855  3A 6A             	cmp	a, [??_SendDataBit_1621^0]
  2805  3857  CFCE              	jc	l21
  2806                          ;			CUR_PP=0 XIO=0 
  2807                          ;ht1621b.c: 65: }
  2808                          ;ht1621b.c: 66: }
  2809                          ;			CUR_PP=0 XIO=0 
  2810  3859  7F                	ret
  2811  385A                    __end_of_SendDataBit_1621:
  2812                          ; =============== function _SendDataBit_1621 ends ============
  2813                          ; *************** function _abs *****************
  2814                          ; Defined at:
  2815                          ;		line 5 in file "../common/abs.c"
  2816                          ; Parameters:
  2817                          ;		a           	reg:   xa	type: int 
  2818                          ; Auto variables:
  2819                          ;		a           	       	type: int 
  2820                          ; Return value:
  2821                          ;		type: int 
  2822                          ;		size: 2
  2823                          ; Registers used:
  2824                          ;		a, x, CUR_PP
  2825                          ; Tracked objects:
  2826                          ;		On entry : CUR_PP=0 IDX_PP=0 XIO=0 PG=2 MVR_PP? MVW_PP? 
  2827                          ;		On exit  : CUR_PP=0 IDX_PP=0 XIO=0 PG=2 MVR_PP? MVW_PP? 
  2828                          ;		Unchanged: MVR_PP MVW_PP 
  2829                          ; Data sizes:
  2830                          ;		Autos:    2
  2831                          ;		Params:   0
  2832                          ;		Temp:     0
  2833                          ;		Total:    2
  2834                          ; This function calls:
  2835                          ;		Nothing
  2836                          ; This function is called by:
  2837                          ;		_ShowHumiTemp
  2838                          ; This function uses a non-reentrant model
  2839                          ; 
  2840  0019                    __size_of_abs	equ	__end_of_abs-_abs
  2841                          ;abs.c: 3: int
  2842                          ;abs.c: 4: abs(int a)
  2843                          ;abs.c: 5: {
  2844                          ;			CUR_PP=0 IDX_PP=0 XIO=0 PG=2 
  2845  385A                    _abs:
  2846                          ;abs@a stored from xa
  2847  385A  53 6C             	mov	[(??_abs^0+1)], a
  2848  385C  5A 6B             	mov	[??_abs^0], x
  2849                          ;abs.c: 6: if(a < 0)
  2850  385E  47 6B  80         	tst	[??_abs^0], 128
  2851  3861  A00C              	jz	l248
  2852                          ;abs.c: 7: return -a;
  2853  3863  50 00             	mov	a, 0
  2854  3865  12 6C             	sub	a, [(??_abs^0+1)]
  2855  3867  5C                	mov	x, a
  2856  3868  50 00             	mov	a, 0
  2857  386A  1A 6B             	sbb	a, [??_abs^0]
  2858  386C  4B                	swap	a, x
  2859  386D  7F                	ret
  2860                          ;			CUR_PP=0 IDX_PP=0 XIO=0 PG=2 
  2861  386E                    l248:
  2862                          ;abs.c: 8: return a;
  2863  386E  51 6C             	mov	a, [(??_abs^0+1)]
  2864  3870  58 6B             	mov	x, [??_abs^0]
  2865                          ;abs.c: 9: }
  2866                          ;			CUR_PP=0 IDX_PP=0 XIO=0 PG=2 
  2867  3872  7F                	ret
  2868  3873                    __end_of_abs:
  2869                          ; =============== function _abs ends ============
  2870                          ; *************** function ___awdiv *****************
  2871                          ; Defined at:
  2872                          ;		line 5 in file "C:\Program Files (x86)\HI-TECH Software\HCPSOC\PRO\9.61\sources\awdiv.c"
  2873                          ; Parameters:
  2874                          ;		dividend    	reg:   xa	type: int 
  2875                          ;		divisor     	offs:   0	type: int 
  2876                          ; Auto variables:
  2877                          ;		dividend    	       	type: int 
  2878                          ;		quotient    	       	type: int 
  2879                          ;		sign        	       	type: unsigned char 
  2880                          ;		counter     	       	type: unsigned char 
  2881                          ; Return value:
  2882                          ;		type: int 
  2883                          ;		size: 2
  2884                          ; Registers used:
  2885                          ;		a, x, CUR_PP
  2886                          ; Tracked objects:
  2887                          ;		On entry : CUR_PP=0 IDX_PP=0 XIO=0 PG=2 MVR_PP? MVW_PP? 
  2888                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  2889                          ;		Unchanged: MVR_PP MVW_PP 
  2890                          ; Data sizes:
  2891                          ;		Autos:    6
  2892                          ;		Params:   2
  2893                          ;		Temp:     0
  2894                          ;		Total:    8
  2895                          ; This function calls:
  2896                          ;		Nothing
  2897                          ; This function is called by:
  2898                          ;		_ShowHumiTemp
  2899                          ; This function uses a non-reentrant model
  2900                          ; 
  2901  007E                    __size_of___awdiv	equ	__end_of___awdiv-___awdiv
  2902                          ;awdiv.c: 3: signed int
  2903                          ;awdiv.c: 4: __awdiv(signed int dividend, signed int divisor)
  2904                          ;awdiv.c: 5: {
  2905                          ;			CUR_PP=0 IDX_PP=0 XIO=0 PG=2 
  2906  3873                    ___awdiv:
  2907                          ;___awdiv@dividend stored from xa
  2908  3873  53 6E             	mov	[(??___awdiv^0+1)], a
  2909  3875  5A 6D             	mov	[??___awdiv^0], x
  2910                          ;awdiv.c: 6: signed int quotient;
  2911                          ;awdiv.c: 7: unsigned char counter, sign;
  2912                          ;awdiv.c: 9: sign = 0;
  2913  3877  50 00             	mov	a, 0
  2914                          ;awdiv.c: 10: if(divisor < 0) {
  2915  3879  47 6B  80         	tst	[?___awdiv^0], 128
  2916  387C  A00E              	jz	l450
  2917                          ;awdiv.c: 11: divisor = -divisor;
  2918  387E  36 6B  FF         	xor	[?___awdiv^0], 0xFF
  2919  3881  36 6C  FF         	xor	[(?___awdiv^0+1)], 0xFF
  2920  3884  76 6C             	inc	[(?___awdiv^0+1)]
  2921  3886  0E 6B  00         	adc	[?___awdiv^0], 0
  2922                          ;awdiv.c: 12: sign = 1;
  2923  3889  50 01             	mov	a, 1
  2924                          ;			CUR_PP=0 IDX_PP=0 XIO=0 PG=2 
  2925  388B                    l450:
  2926                          ;awdiv.c: 13: }
  2927                          ;awdiv.c: 14: if(dividend < 0) {
  2928  388B  47 6D  80         	tst	[??___awdiv^0], 128
  2929  388E  A00E              	jz	l451
  2930                          ;awdiv.c: 15: dividend = -dividend;
  2931  3890  36 6D  FF         	xor	[??___awdiv^0], 0xFF
  2932  3893  36 6E  FF         	xor	[(??___awdiv^0+1)], 0xFF
  2933  3896  76 6E             	inc	[(??___awdiv^0+1)]
  2934  3898  0E 6D  00         	adc	[??___awdiv^0], 0
  2935                          ;awdiv.c: 16: sign ^= 1;
  2936  389B  31 01             	xor	a, 1
  2937                          ;			CUR_PP=0 IDX_PP=0 XIO=0 PG=2 
  2938  389D                    l451:
  2939                          ;awdiv.c: 17: }
  2940                          ;awdiv.c: 18: quotient = 0;
  2941  389D  55 6F  00         	mov	[(??___awdiv+2)^0], 0
  2942  38A0  55 70  00         	mov	[((??___awdiv+2)^0+1)], 0
  2943                          ;___awdiv@sign stored from a
  2944  38A3  53 71             	mov	[(??___awdiv+4)^0], a
  2945                          ;awdiv.c: 19: if(divisor != 0) {
  2946  38A5  51 6B             	mov	a, [?___awdiv^0]
  2947  38A7  2A 6C             	or	a, [(?___awdiv^0+1)]
  2948  38A9  A036              	jz	l452
  2949                          ;awdiv.c: 20: counter = 1;
  2950  38AB  50 01             	mov	a, 1
  2951                          ;awdiv.c: 21: while((divisor & 0x8000U) == 0) {
  2952  38AD  7D 38B5           	jmp	l453
  2953                          ;			CUR_PP=0 XIO=0 
  2954  38B0                    l454:
  2955                          ;awdiv.c: 22: divisor <<= 1;
  2956  38B0  65 6C             	asl	[(?___awdiv^0+1)]
  2957  38B2  6B 6B             	rlc	[?___awdiv^0]
  2958                          ;awdiv.c: 23: counter++;
  2959  38B4  74                	inc	a
  2960                          ;			CUR_PP=0 XIO=0 
  2961  38B5                    l453:
  2962  38B5  47 6B  80         	tst	[?___awdiv^0], 128
  2963  38B8  AFF7              	jz	l454
  2964                          ;			CUR_PP=0 XIO=0 
  2965                          ;awdiv.c: 24: }
  2966                          ;awdiv.c: 25: do {
  2967                          ;			CUR_PP=0 XIO=0 
  2968  38BA                    l458:
  2969                          ;awdiv.c: 26: quotient <<= 1;
  2970  38BA  65 70             	asl	[((??___awdiv+2)^0+1)]
  2971  38BC  6B 6F             	rlc	[(??___awdiv+2)^0]
  2972                          ;___awdiv@counter stored from a
  2973  38BE  53 72             	mov	[(??___awdiv+5)^0], a
  2974                          ;awdiv.c: 27: if((unsigned int)divisor <= (unsigned int)dividend) {
  2975  38C0  51 6E             	mov	a, [(??___awdiv^0+1)]
  2976  38C2  3A 6C             	cmp	a, [(?___awdiv^0+1)]
  2977  38C4  51 6D             	mov	a, [??___awdiv^0]
  2978  38C6  1A 6B             	sbb	a, [?___awdiv^0]
  2979  38C8  C00C              	jc	l459
  2980                          ;awdiv.c: 28: dividend -= divisor;
  2981  38CA  51 6C             	mov	a, [(?___awdiv^0+1)]
  2982  38CC  14 6E             	sub	[(??___awdiv^0+1)], a
  2983  38CE  51 6B             	mov	a, [?___awdiv^0]
  2984  38D0  1C 6D             	sbb	[??___awdiv^0], a
  2985                          ;awdiv.c: 29: quotient |= 1;
  2986  38D2  2E 70  01         	or	[((??___awdiv+2)^0+1)], 1
  2987                          ;			CUR_PP=0 XIO=0 
  2988  38D5                    l459:
  2989                          ;awdiv.c: 30: }
  2990                          ;awdiv.c: 31: *(unsigned int *)&divisor >>= 1;
  2991  38D5  70 FB             	and	f, 0xFB
  2992  38D7  6E 6B             	rrc	[?___awdiv^0]
  2993  38D9  6E 6C             	rrc	[(?___awdiv^0+1)]
  2994                          ; ___awdiv@counter loaded to a
  2995  38DB  51 72             	mov	a, [(??___awdiv+5)^0]
  2996                          ;awdiv.c: 32: } while(--counter != 0);
  2997  38DD  78                	dec	a
  2998  38DE  BFDB              	jnz	l458
  2999                          ;			CUR_PP=0 XIO=0 
  3000                          ;			CUR_PP=0 XIO=0 
  3001  38E0                    l452:
  3002                          ; ___awdiv@quotient loaded to xa
  3003  38E0  51 70             	mov	a, [((??___awdiv+2)^0+1)]
  3004  38E2  58 6F             	mov	x, [(??___awdiv+2)^0]
  3005                          ;awdiv.c: 33: }
  3006                          ;awdiv.c: 34: if(sign)
  3007  38E4  3C 71  00         	cmp	[(??___awdiv+4)^0], 0
  3008  38E7  A008              	jz	l449
  3009                          ;awdiv.c: 35: quotient = -quotient;
  3010  38E9  73                	cpl	a
  3011  38EA  74                	inc	a
  3012  38EB  4B                	swap	a, x
  3013  38EC  73                	cpl	a
  3014  38ED  09 00             	adc	a, 0
  3015  38EF  4B                	swap	a, x
  3016                          ;			CUR_PP=0 XIO=0 
  3017                          ;awdiv.c: 36: return quotient;
  3018                          ;awdiv.c: 37: }
  3019  38F0                    l449:
  3020                          ;			CUR_PP=0 XIO=0 
  3021  38F0  7F                	ret
  3022  38F1                    __end_of___awdiv:
  3023                          ; =============== function ___awdiv ends ============
  3024                          ; *************** function ___lbmod *****************
  3025                          ; Defined at:
  3026                          ;		line 5 in file "C:\Program Files (x86)\HI-TECH Software\HCPSOC\PRO\9.61\sources\lbmod.c"
  3027                          ; Parameters:
  3028                          ;		dividend    	reg:    a	type: unsigned char 
  3029                          ;		divisor     	reg:    x	type: unsigned char 
  3030                          ; Auto variables:
  3031                          ;		divisor     	       	type: unsigned char 
  3032                          ;		dividend    	       	type: unsigned char 
  3033                          ;		rem         	       	type: unsigned char 
  3034                          ;		counter     	       	type: unsigned char 
  3035                          ; Return value:
  3036                          ;		type: unsigned char 
  3037                          ;		size: 1
  3038                          ; Registers used:
  3039                          ;		a, x, CUR_PP
  3040                          ; Tracked objects:
  3041                          ;		On entry : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  3042                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  3043                          ;		Unchanged: MVR_PP MVW_PP 
  3044                          ; Data sizes:
  3045                          ;		Autos:    4
  3046                          ;		Params:   0
  3047                          ;		Temp:     0
  3048                          ;		Total:    4
  3049                          ; This function calls:
  3050                          ;		Nothing
  3051                          ; This function is called by:
  3052                          ;		_ShowLife
  3053                          ; This function uses a non-reentrant model
  3054                          ; 
  3055  0024                    __size_of___lbmod	equ	__end_of___lbmod-___lbmod
  3056                          ;lbmod.c: 3: unsigned char
  3057                          ;lbmod.c: 4: __lbmod(unsigned char dividend, unsigned char divisor)
  3058                          ;lbmod.c: 5: {
  3059                          ;			CUR_PP=0 IDX_PP=0 XIO=0 PG=2 
  3060  38F1                    ___lbmod:
  3061                          ;___lbmod@dividend stored from a
  3062  38F1  53 6A             	mov	[(??___lbmod+1)^0], a
  3063                          ;___lbmod@divisor stored from x
  3064  38F3  5A 69             	mov	[??___lbmod^0], x
  3065                          ;lbmod.c: 6: unsigned char rem;
  3066                          ;lbmod.c: 7: unsigned char counter;
  3067                          ;lbmod.c: 9: counter = 8;
  3068  38F5  55 6C  08         	mov	[(??___lbmod+3)^0], 8
  3069                          ;lbmod.c: 10: rem = 0;
  3070  38F8  55 6B  00         	mov	[(??___lbmod+2)^0], 0
  3071                          ;lbmod.c: 11: do {
  3072                          ;			CUR_PP=0 XIO=0 
  3073  38FB                    l289:
  3074                          ;lbmod.c: 12: rem = (rem << 1) | (dividend >> 7);
  3075  38FB  51 6A             	mov	a, [(??___lbmod+1)^0]
  3076  38FD  6A                	rlc	a
  3077  38FE  6B 6B             	rlc	[(??___lbmod+2)^0]
  3078                          ;lbmod.c: 13: dividend <<= 1;
  3079  3900  65 6A             	asl	[(??___lbmod+1)^0]
  3080                          ; ___lbmod@divisor loaded to a
  3081  3902  51 69             	mov	a, [??___lbmod^0]
  3082                          ;lbmod.c: 14: if(divisor <= rem)
  3083  3904  3A 6B             	cmp	a, [(??___lbmod+2)^0]
  3084  3906  A003              	jz	u423
  3085  3908  72 04             	xor	f, 4
  3086  390A                    u423:
  3087  390A  C003              	jc	l290
  3088                          ;lbmod.c: 15: rem -= divisor;
  3089  390C  14 6B             	sub	[(??___lbmod+2)^0], a
  3090                          ;			CUR_PP=0 XIO=0 
  3091  390E                    l290:
  3092                          ;lbmod.c: 16: } while(--counter != 0);
  3093  390E  7A 6C             	dec	[(??___lbmod+3)^0]
  3094  3910  BFEA              	jnz	l289
  3095                          ;			CUR_PP=0 XIO=0 
  3096                          ;lbmod.c: 17: return rem;
  3097  3912  51 6B             	mov	a, [(??___lbmod+2)^0]
  3098                          ;lbmod.c: 18: }
  3099                          ;			CUR_PP=0 XIO=0 
  3100  3914  7F                	ret
  3101  3915                    __end_of___lbmod:
  3102                          ; =============== function ___lbmod ends ============
  3103                          ; *************** function ___awmod *****************
  3104                          ; Defined at:
  3105                          ;		line 5 in file "C:\Program Files (x86)\HI-TECH Software\HCPSOC\PRO\9.61\sources\awmod.c"
  3106                          ; Parameters:
  3107                          ;		dividend    	reg:   xa	type: int 
  3108                          ;		divisor     	offs:   0	type: int 
  3109                          ; Auto variables:
  3110                          ;		dividend    	       	type: int 
  3111                          ;		counter     	       	type: unsigned char 
  3112                          ;		sign        	       	type: unsigned char 
  3113                          ; Return value:
  3114                          ;		type: int 
  3115                          ;		size: 2
  3116                          ; Registers used:
  3117                          ;		a, x, CUR_PP
  3118                          ; Tracked objects:
  3119                          ;		On entry : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  3120                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  3121                          ;		Unchanged: MVR_PP MVW_PP 
  3122                          ; Data sizes:
  3123                          ;		Autos:    4
  3124                          ;		Params:   2
  3125                          ;		Temp:     0
  3126                          ;		Total:    6
  3127                          ; This function calls:
  3128                          ;		Nothing
  3129                          ; This function is called by:
  3130                          ;		_ShowHumiTemp
  3131                          ; This function uses a non-reentrant model
  3132                          ; 
  3133  0073                    __size_of___awmod	equ	__end_of___awmod-___awmod
  3134                          ;awmod.c: 3: signed int
  3135                          ;awmod.c: 4: __awmod(signed int dividend, signed int divisor)
  3136                          ;awmod.c: 5: {
  3137                          ;			CUR_PP=0 IDX_PP=0 XIO=0 PG=2 
  3138  3915                    ___awmod:
  3139                          ;awmod.c: 6: unsigned char counter, sign;
  3140                          ;awmod.c: 8: sign = 0;
  3141  3915  55 6F  00         	mov	[(??___awmod+2)^0], 0
  3142                          ;awmod.c: 9: if(dividend < 0) {
  3143  3918  4B                	swap	a, x
  3144  3919  39 80             	cmp	a, 128
  3145  391B  4B                	swap	a, x
  3146  391C  C00B              	jc	l530
  3147                          ;awmod.c: 10: dividend = -dividend;
  3148  391E  73                	cpl	a
  3149  391F  74                	inc	a
  3150  3920  4B                	swap	a, x
  3151  3921  73                	cpl	a
  3152  3922  09 00             	adc	a, 0
  3153  3924  4B                	swap	a, x
  3154                          ;awmod.c: 11: sign = 1;
  3155  3925  55 6F  01         	mov	[(??___awmod+2)^0], 1
  3156                          ;			CUR_PP=0 IDX_PP=0 XIO=0 PG=2 
  3157  3928                    l530:
  3158                          ;awmod.c: 12: }
  3159                          ;awmod.c: 13: if(divisor < 0)
  3160  3928  47 6B  80         	tst	[?___awmod^0], 128
  3161  392B  A00C              	jz	l531
  3162                          ;awmod.c: 14: divisor = -divisor;
  3163  392D  36 6B  FF         	xor	[?___awmod^0], 0xFF
  3164  3930  36 6C  FF         	xor	[(?___awmod^0+1)], 0xFF
  3165  3933  76 6C             	inc	[(?___awmod^0+1)]
  3166  3935  0E 6B  00         	adc	[?___awmod^0], 0
  3167                          ;			CUR_PP=0 IDX_PP=0 XIO=0 PG=2 
  3168  3938                    l531:
  3169                          ;awmod.c: 15: if(divisor != 0) {
  3170  3938  3C 6B  00         	cmp	[?___awmod^0], 0
  3171  393B  B006              	jnz	L1
  3172  393D  3C 6C  00         	cmp	[(?___awmod^0+1)], 0
  3173  3940  A03A              	jz	l532
  3174  3942                    L1:
  3175                          ;awmod.c: 16: counter = 1;
  3176  3942  55 70  01         	mov	[(??___awmod+3)^0], 1
  3177                          ;awmod.c: 17: while(((unsigned int)divisor & 0x8000U) == 0) {
  3178  3945  7D 3952           	jmp	l533
  3179                          ;			CUR_PP=0 XIO=0 
  3180  3948                    l534:
  3181                          ; ___awmod@dividend loaded to xa
  3182  3948  51 6E             	mov	a, [(??___awmod^0+1)]
  3183  394A  58 6D             	mov	x, [??___awmod^0]
  3184                          ;awmod.c: 18: divisor <<= 1;
  3185  394C  65 6C             	asl	[(?___awmod^0+1)]
  3186  394E  6B 6B             	rlc	[?___awmod^0]
  3187                          ;awmod.c: 19: counter++;
  3188  3950  76 70             	inc	[(??___awmod+3)^0]
  3189                          ;			CUR_PP=0 XIO=0 
  3190  3952                    l533:
  3191                          ;___awmod@dividend stored from xa
  3192  3952  53 6E             	mov	[(??___awmod^0+1)], a
  3193  3954  5A 6D             	mov	[??___awmod^0], x
  3194  3956  47 6B  80         	tst	[?___awmod^0], 128
  3195  3959  AFEE              	jz	l534
  3196                          ;			CUR_PP=0 XIO=0 
  3197                          ;awmod.c: 20: }
  3198                          ;awmod.c: 21: do {
  3199                          ;			CUR_PP=0 XIO=0 
  3200  395B                    l538:
  3201                          ;awmod.c: 22: if((unsigned int)divisor <= (unsigned int)dividend)
  3202  395B  51 6E             	mov	a, [(??___awmod^0+1)]
  3203  395D  3A 6C             	cmp	a, [(?___awmod^0+1)]
  3204  395F  51 6D             	mov	a, [??___awmod^0]
  3205  3961  1A 6B             	sbb	a, [?___awmod^0]
  3206  3963  C009              	jc	l539
  3207                          ;awmod.c: 23: dividend -= divisor;
  3208  3965  51 6C             	mov	a, [(?___awmod^0+1)]
  3209  3967  14 6E             	sub	[(??___awmod^0+1)], a
  3210  3969  51 6B             	mov	a, [?___awmod^0]
  3211  396B  1C 6D             	sbb	[??___awmod^0], a
  3212                          ;			CUR_PP=0 XIO=0 
  3213  396D                    l539:
  3214                          ;awmod.c: 24: *(unsigned int *)&divisor >>= 1;
  3215  396D  70 FB             	and	f, 0xFB
  3216  396F  6E 6B             	rrc	[?___awmod^0]
  3217  3971  6E 6C             	rrc	[(?___awmod^0+1)]
  3218                          ;awmod.c: 25: } while(--counter != 0);
  3219  3973  7A 70             	dec	[(??___awmod+3)^0]
  3220  3975  BFE5              	jnz	l538
  3221                          ;			CUR_PP=0 XIO=0 
  3222                          ; ___awmod@dividend loaded to xa
  3223  3977  51 6E             	mov	a, [(??___awmod^0+1)]
  3224  3979  58 6D             	mov	x, [??___awmod^0]
  3225                          ;			CUR_PP=0 XIO=0 
  3226  397B                    l532:
  3227                          ;awmod.c: 26: }
  3228                          ;awmod.c: 27: if(sign)
  3229  397B  3C 6F  00         	cmp	[(??___awmod+2)^0], 0
  3230  397E  A008              	jz	l529
  3231                          ;awmod.c: 28: dividend = -dividend;
  3232  3980  73                	cpl	a
  3233  3981  74                	inc	a
  3234  3982  4B                	swap	a, x
  3235  3983  73                	cpl	a
  3236  3984  09 00             	adc	a, 0
  3237  3986  4B                	swap	a, x
  3238                          ;			CUR_PP=0 XIO=0 
  3239                          ;awmod.c: 29: return dividend;
  3240                          ;awmod.c: 30: }
  3241  3987                    l529:
  3242                          ;			CUR_PP=0 XIO=0 
  3243  3987  7F                	ret
  3244  3988                    __end_of___awmod:
  3245                          ; =============== function ___awmod ends ============
  3246                          ; *************** function _Ack_I2c *****************
  3247                          ; Defined at:
  3248                          ;		line 149 in file "./software_iic.c"
  3249                          ; Parameters:
  3250                          ;		a           	reg:    a	type: unsigned char 
  3251                          ; Auto variables:
  3252                          ;		a           	       	type: unsigned char 
  3253                          ; Return value:
  3254                          ;		type: void 
  3255                          ;		size: 0
  3256                          ; Registers used:
  3257                          ;		a, x, CUR_PP
  3258                          ; Tracked objects:
  3259                          ;		On entry : CUR_PP=0 IDX_PP=0 XIO=0 PG? MVR_PP? MVW_PP? 
  3260                          ;		On exit  : CUR_PP=0 IDX_PP=0 XIO=0 PG? MVR_PP? MVW_PP? 
  3261                          ;		Unchanged: MVR_PP MVW_PP 
  3262                          ; Data sizes:
  3263                          ;		Autos:    1
  3264                          ;		Params:   0
  3265                          ;		Temp:     0
  3266                          ;		Total:    1
  3267                          ; This function calls:
  3268                          ;		_delay_us
  3269                          ; This function is called by:
  3270                          ;		_IRcvBytes
  3271                          ; This function uses a non-reentrant model
  3272                          ; 
  3273  002C                    __size_of_Ack_I2c	equ	__end_of_Ack_I2c-_Ack_I2c
  3274                          ;software_iic.c: 148: void Ack_I2c(unsigned char a)
  3275                          ;software_iic.c: 149: {
  3276                          ;			CUR_PP=0 IDX_PP=0 XIO=0 PG=2 
  3277  3988                    _Ack_I2c:
  3278                          ;software_iic.c: 150: if(a==0)
  3279  3988  39 00             	cmp	a, 0
  3280  398A  B007              	jnz	l214
  3281                          ;software_iic.c: 151: {
  3282                          ;software_iic.c: 152: PRT1DR &= ~0x20;
  3283  398C  41 04 DF          	and	reg[4], 0xDF
  3284                          ;software_iic.c: 153: }
  3285  398F  7D 3995           	jmp	l215
  3286                          ;			CUR_PP=0 IDX_PP=0 XIO=0 PG=2 
  3287  3992                    l214:
  3288                          ;software_iic.c: 154: else
  3289                          ;software_iic.c: 155: {
  3290                          ;software_iic.c: 156: PRT1DR |= 0x20;
  3291  3992  43 04 20          	or	reg[4], 0x20
  3292                          ;			CUR_PP=0 IDX_PP=0 XIO=0 PG=2 
  3293  3995                    l215:
  3294                          ;software_iic.c: 157: }
  3295                          ;software_iic.c: 158: delay_us(1);
  3296  3995  50 01             	mov	a, 1
  3297  3997  57 00             	mov	x, 0
  3298  3999  7C 3B5C           	call	_delay_us
  3299                          ;software_iic.c: 159: PRT1DR |= 0x80;
  3300  399C  43 04 80          	or	reg[4], 0x80
  3301                          ;software_iic.c: 160: delay_us(1);
  3302  399F  50 01             	mov	a, 1
  3303  39A1  57 00             	mov	x, 0
  3304  39A3  71 80             	or	f, 0x80	;select multiple RAM page mode
  3305  39A5  7C 3B5C           	call	_delay_us
  3306                          ;software_iic.c: 161: PRT1DR &= ~0x80;
  3307  39A8  41 04 7F          	and	reg[4], 0x7F
  3308                          ;software_iic.c: 162: delay_us(1);
  3309  39AB  50 01             	mov	a, 1
  3310  39AD  57 00             	mov	x, 0
  3311  39AF  71 80             	or	f, 0x80	;select multiple RAM page mode
  3312  39B1  7D 3B5C           	jmp	_delay_us
  3313                          ;software_iic.c: 163: }
  3314                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
  3315  39B4                    __end_of_Ack_I2c:
  3316                          ; =============== function _Ack_I2c ends ============
  3317                          ; *************** function _RcvByte *****************
  3318                          ; Defined at:
  3319                          ;		line 117 in file "./software_iic.c"
  3320                          ; Parameters:
  3321                          ;		None
  3322                          ; Auto variables:
  3323                          ;		retc        	       	type: unsigned char 
  3324                          ;		BitCnt      	       	type: unsigned char 
  3325                          ; Return value:
  3326                          ;		type: unsigned char 
  3327                          ;		size: 1
  3328                          ; Registers used:
  3329                          ;		a, x, CUR_PP
  3330                          ; Tracked objects:
  3331                          ;		On entry : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  3332                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  3333                          ;		Unchanged: IDX_PP MVR_PP MVW_PP 
  3334                          ; Data sizes:
  3335                          ;		Autos:    2
  3336                          ;		Params:   0
  3337                          ;		Temp:     0
  3338                          ;		Total:    2
  3339                          ; This function calls:
  3340                          ;		_ChangeToRead
  3341                          ;		_delay_us
  3342                          ;		_ChangeToOD
  3343                          ; This function is called by:
  3344                          ;		_IRcvBytes
  3345                          ; This function uses a non-reentrant model
  3346                          ; 
  3347  0048                    __size_of_RcvByte	equ	__end_of_RcvByte-_RcvByte
  3348                          ;software_iic.c: 116: unsigned char RcvByte(void)
  3349                          ;software_iic.c: 117: {
  3350                          ;			CUR_PP=0 XIO=0 PG=2 
  3351  39B4                    _RcvByte:
  3352                          ;software_iic.c: 118: unsigned char retc;
  3353                          ;software_iic.c: 119: unsigned char BitCnt;
  3354                          ;software_iic.c: 121: retc=0;
  3355  39B4  55 6D  00         	mov	[??_RcvByte^0], 0
  3356                          ;software_iic.c: 122: ChangeToRead();
  3357  39B7  7C 3B3C           	call	_ChangeToRead
  3358                          ;software_iic.c: 123: for(BitCnt=0;BitCnt<8;BitCnt++)
  3359  39BA  55 6E  00         	mov	[(??_RcvByte+1)^0], 0
  3360                          ;			CUR_PP=0 XIO=0 
  3361  39BD                    l209:
  3362                          ;software_iic.c: 124: {
  3363                          ;software_iic.c: 125: delay_us(1);
  3364  39BD  50 01             	mov	a, 1
  3365  39BF  57 00             	mov	x, 0
  3366  39C1  71 80             	or	f, 0x80	;select multiple RAM page mode
  3367  39C3  7C 3B5C           	call	_delay_us
  3368                          ;software_iic.c: 126: PRT1DR &= ~0x80;
  3369  39C6  41 04 7F          	and	reg[4], 0x7F
  3370                          ;software_iic.c: 127: delay_us(1);
  3371  39C9  50 01             	mov	a, 1
  3372  39CB  57 00             	mov	x, 0
  3373  39CD  71 80             	or	f, 0x80	;select multiple RAM page mode
  3374  39CF  7C 3B5C           	call	_delay_us
  3375                          ;software_iic.c: 128: PRT1DR |= 0x80;
  3376  39D2  43 04 80          	or	reg[4], 0x80
  3377                          ;software_iic.c: 129: delay_us(1);
  3378  39D5  50 01             	mov	a, 1
  3379  39D7  57 00             	mov	x, 0
  3380  39D9  71 80             	or	f, 0x80	;select multiple RAM page mode
  3381  39DB  7C 3B5C           	call	_delay_us
  3382                          ;software_iic.c: 130: retc=retc<<1;
  3383  39DE  65 6D             	asl	[??_RcvByte^0]
  3384                          ;software_iic.c: 131: if(PRT1DR&0x20)
  3385  39E0  49 04 20          	tst	reg[4], 32
  3386  39E3  A004              	jz	l212
  3387                          ;software_iic.c: 132: {
  3388                          ;software_iic.c: 133: retc |= 1;
  3389  39E5  2E 6D  01         	or	[??_RcvByte^0], 1
  3390                          ;			CUR_PP=0 XIO=0 
  3391  39E8                    l212:
  3392  39E8  76 6E             	inc	[(??_RcvByte+1)^0]
  3393  39EA  3C 6E  08         	cmp	[(??_RcvByte+1)^0], 8
  3394  39ED  CFCF              	jc	l209
  3395                          ;			CUR_PP=0 XIO=0 
  3396                          ;software_iic.c: 134: }
  3397                          ;software_iic.c: 135: }
  3398                          ;software_iic.c: 136: PRT1DR &= ~0x80;
  3399  39EF  41 04 7F          	and	reg[4], 0x7F
  3400  39F2  40                	nop	;#
  3401  39F3  40                	nop	;#
  3402                          ;software_iic.c: 137: asm("nop");
  3403                          ;software_iic.c: 138: asm("nop");
  3404                          ;software_iic.c: 139: ChangeToOD();
  3405  39F4  71 80             	or	f, 0x80	;select multiple RAM page mode
  3406  39F6  7C 3B4D           	call	_ChangeToOD
  3407                          ;software_iic.c: 140: return(retc);
  3408  39F9  51 6D             	mov	a, [??_RcvByte^0]
  3409                          ;software_iic.c: 141: }
  3410                          ;			CUR_PP=0 XIO=0 
  3411  39FB  7F                	ret
  3412  39FC                    __end_of_RcvByte:
  3413                          ; =============== function _RcvByte ends ============
  3414                          ; *************** function ___lwdiv *****************
  3415                          ; Defined at:
  3416                          ;		line 5 in file "C:\Program Files (x86)\HI-TECH Software\HCPSOC\PRO\9.61\sources\lwdiv.c"
  3417                          ; Parameters:
  3418                          ;		dividend    	reg:   xa	type: unsigned int 
  3419                          ;		divisor     	offs:   0	type: unsigned int 
  3420                          ; Auto variables:
  3421                          ;		dividend    	       	type: unsigned int 
  3422                          ;		quotient    	       	type: unsigned int 
  3423                          ;		counter     	       	type: unsigned char 
  3424                          ; Return value:
  3425                          ;		type: unsigned int 
  3426                          ;		size: 2
  3427                          ; Registers used:
  3428                          ;		a, x, CUR_PP
  3429                          ; Tracked objects:
  3430                          ;		On entry : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  3431                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  3432                          ;		Unchanged: IDX_PP MVR_PP MVW_PP 
  3433                          ; Data sizes:
  3434                          ;		Autos:    5
  3435                          ;		Params:   2
  3436                          ;		Temp:     0
  3437                          ;		Total:    7
  3438                          ; This function calls:
  3439                          ;		Nothing
  3440                          ; This function is called by:
  3441                          ;		_DisplayPMxx
  3442                          ; This function uses a non-reentrant model
  3443                          ; 
  3444  004A                    __size_of___lwdiv	equ	__end_of___lwdiv-___lwdiv
  3445                          ;lwdiv.c: 3: unsigned int
  3446                          ;lwdiv.c: 4: __lwdiv(unsigned int dividend, unsigned int divisor)
  3447                          ;lwdiv.c: 5: {
  3448                          ;			CUR_PP=0 XIO=0 PG=2 
  3449  39FC                    ___lwdiv:
  3450                          ;___lwdiv@dividend stored from xa
  3451  39FC  53 70             	mov	[(??___lwdiv^0+1)], a
  3452  39FE  5A 6F             	mov	[??___lwdiv^0], x
  3453                          ;lwdiv.c: 6: unsigned int quotient;
  3454                          ;lwdiv.c: 7: unsigned char counter;
  3455                          ;lwdiv.c: 9: quotient = 0;
  3456  3A00  55 71  00         	mov	[(??___lwdiv+2)^0], 0
  3457  3A03  55 72  00         	mov	[((??___lwdiv+2)^0+1)], 0
  3458                          ;lwdiv.c: 10: if(divisor != 0) {
  3459  3A06  51 6D             	mov	a, [?___lwdiv^0]
  3460  3A08  2A 6E             	or	a, [(?___lwdiv^0+1)]
  3461  3A0A  A036              	jz	l260
  3462                          ;lwdiv.c: 11: counter = 1;
  3463  3A0C  50 01             	mov	a, 1
  3464                          ;lwdiv.c: 12: while((divisor & 0x8000) == 0) {
  3465  3A0E  7D 3A16           	jmp	l261
  3466                          ;			CUR_PP=0 XIO=0 
  3467  3A11                    l262:
  3468                          ;lwdiv.c: 13: divisor <<= 1;
  3469  3A11  65 6E             	asl	[(?___lwdiv^0+1)]
  3470  3A13  6B 6D             	rlc	[?___lwdiv^0]
  3471                          ;lwdiv.c: 14: counter++;
  3472  3A15  74                	inc	a
  3473                          ;			CUR_PP=0 XIO=0 
  3474  3A16                    l261:
  3475  3A16  47 6D  80         	tst	[?___lwdiv^0], 128
  3476  3A19  AFF7              	jz	l262
  3477                          ;			CUR_PP=0 XIO=0 
  3478                          ;lwdiv.c: 15: }
  3479                          ;lwdiv.c: 16: do {
  3480                          ;			CUR_PP=0 XIO=0 
  3481  3A1B                    l266:
  3482                          ;lwdiv.c: 17: quotient <<= 1;
  3483  3A1B  65 72             	asl	[((??___lwdiv+2)^0+1)]
  3484  3A1D  6B 71             	rlc	[(??___lwdiv+2)^0]
  3485                          ;___lwdiv@counter stored from a
  3486  3A1F  53 73             	mov	[(??___lwdiv+4)^0], a
  3487                          ;lwdiv.c: 18: if(divisor <= dividend) {
  3488  3A21  51 70             	mov	a, [(??___lwdiv^0+1)]
  3489  3A23  3A 6E             	cmp	a, [(?___lwdiv^0+1)]
  3490  3A25  51 6F             	mov	a, [??___lwdiv^0]
  3491  3A27  1A 6D             	sbb	a, [?___lwdiv^0]
  3492  3A29  C00C              	jc	l267
  3493                          ;lwdiv.c: 19: dividend -= divisor;
  3494  3A2B  51 6E             	mov	a, [(?___lwdiv^0+1)]
  3495  3A2D  14 70             	sub	[(??___lwdiv^0+1)], a
  3496  3A2F  51 6D             	mov	a, [?___lwdiv^0]
  3497  3A31  1C 6F             	sbb	[??___lwdiv^0], a
  3498                          ;lwdiv.c: 20: quotient |= 1;
  3499  3A33  2E 72  01         	or	[((??___lwdiv+2)^0+1)], 1
  3500                          ;			CUR_PP=0 XIO=0 
  3501  3A36                    l267:
  3502                          ;lwdiv.c: 21: }
  3503                          ;lwdiv.c: 22: divisor >>= 1;
  3504  3A36  70 FB             	and	f, 0xFB
  3505  3A38  6E 6D             	rrc	[?___lwdiv^0]
  3506  3A3A  6E 6E             	rrc	[(?___lwdiv^0+1)]
  3507                          ; ___lwdiv@counter loaded to a
  3508  3A3C  51 73             	mov	a, [(??___lwdiv+4)^0]
  3509                          ;lwdiv.c: 23: } while(--counter != 0);
  3510  3A3E  78                	dec	a
  3511  3A3F  BFDB              	jnz	l266
  3512                          ;			CUR_PP=0 XIO=0 
  3513                          ;			CUR_PP=0 XIO=0 
  3514  3A41                    l260:
  3515                          ;lwdiv.c: 24: }
  3516                          ;lwdiv.c: 25: return quotient;
  3517  3A41  51 72             	mov	a, [((??___lwdiv+2)^0+1)]
  3518  3A43  58 71             	mov	x, [(??___lwdiv+2)^0]
  3519                          ;lwdiv.c: 26: }
  3520                          ;			CUR_PP=0 XIO=0 
  3521  3A45  7F                	ret
  3522  3A46                    __end_of___lwdiv:
  3523                          ; =============== function ___lwdiv ends ============
  3524                          ; *************** function _ISendByte *****************
  3525                          ; Defined at:
  3526                          ;		line 172 in file "./software_iic.c"
  3527                          ; Parameters:
  3528                          ;		sla         	reg:    a	type: unsigned char 
  3529                          ;		c           	reg:    x	type: unsigned char 
  3530                          ; Auto variables:
  3531                          ;		c           	       	type: unsigned char 
  3532                          ;		sla         	       	type: unsigned char 
  3533                          ; Return value:
  3534                          ;		type: unsigned char 
  3535                          ;		size: 1
  3536                          ; Registers used:
  3537                          ;		a, x, CUR_PP
  3538                          ; Tracked objects:
  3539                          ;		On entry : CUR_PP=0 IDX_PP? XIO=0 PG=2 MVR_PP? MVW_PP? 
  3540                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  3541                          ;		Unchanged: IDX_PP MVR_PP MVW_PP 
  3542                          ; Data sizes:
  3543                          ;		Autos:    2
  3544                          ;		Params:   0
  3545                          ;		Temp:     0
  3546                          ;		Total:    2
  3547                          ; This function calls:
  3548                          ;		_Start_I2c
  3549                          ;		_SendByte
  3550                          ;		_Stop_I2c
  3551                          ; This function is called by:
  3552                          ;		_Si7020SendCommand
  3553                          ; This function uses a non-reentrant model
  3554                          ; 
  3555  0035                    __size_of_ISendByte	equ	__end_of_ISendByte-_ISendByte
  3556                          ;software_iic.c: 171: unsigned char ISendByte(unsigned char sla,unsigned char c)
  3557                          ;software_iic.c: 172: {
  3558                          ;			CUR_PP=0 XIO=0 PG=2 
  3559  3A46                    _ISendByte:
  3560                          ;ISendByte@sla stored from a
  3561  3A46  53 69             	mov	[(??_ISendByte+1)^0], a
  3562                          ;ISendByte@c stored from x
  3563  3A48  5A 68             	mov	[??_ISendByte^0], x
  3564                          ;software_iic.c: 173: Start_I2c();
  3565  3A4A  7C 3A9D           	call	_Start_I2c
  3566                          ;software_iic.c: 174: SendByte(sla);
  3567  3A4D  51 69             	mov	a, [(??_ISendByte+1)^0]
  3568  3A4F  71 80             	or	f, 0x80	;select multiple RAM page mode
  3569  3A51  7C 3AC2           	call	_SendByte
  3570                          ;software_iic.c: 175: if(ack==0)
  3571  3A54  51 48             	mov	a, [_ack^0]
  3572  3A56  B009              	jnz	l217
  3573                          ;software_iic.c: 176: {
  3574                          ;software_iic.c: 177: Stop_I2c();
  3575  3A58  71 80             	or	f, 0x80	;select multiple RAM page mode
  3576  3A5A  7C 3A7B           	call	_Stop_I2c
  3577                          ;software_iic.c: 178: return(0);
  3578  3A5D  50 00             	mov	a, 0
  3579  3A5F  7F                	ret
  3580                          ;			CUR_PP=0 XIO=0 
  3581  3A60                    l217:
  3582                          ;software_iic.c: 179: }
  3583                          ;software_iic.c: 180: SendByte(c);
  3584  3A60  51 68             	mov	a, [??_ISendByte^0]
  3585  3A62  71 80             	or	f, 0x80	;select multiple RAM page mode
  3586  3A64  7C 3AC2           	call	_SendByte
  3587                          ;software_iic.c: 181: if(ack==0)
  3588  3A67  51 48             	mov	a, [_ack^0]
  3589  3A69  B009              	jnz	l218
  3590                          ;software_iic.c: 182: {
  3591                          ;software_iic.c: 183: Stop_I2c();
  3592  3A6B  71 80             	or	f, 0x80	;select multiple RAM page mode
  3593  3A6D  7C 3A7B           	call	_Stop_I2c
  3594                          ;software_iic.c: 184: return(0);
  3595  3A70  50 00             	mov	a, 0
  3596  3A72  7F                	ret
  3597                          ;			CUR_PP=0 XIO=0 
  3598  3A73                    l218:
  3599                          ;software_iic.c: 185: }
  3600                          ;software_iic.c: 186: Stop_I2c();
  3601  3A73  71 80             	or	f, 0x80	;select multiple RAM page mode
  3602  3A75  7C 3A7B           	call	_Stop_I2c
  3603                          ;software_iic.c: 187: return(1);
  3604  3A78  50 01             	mov	a, 1
  3605                          ;software_iic.c: 188: }
  3606                          ;			CUR_PP=0 XIO=0 
  3607  3A7A  7F                	ret
  3608  3A7B                    __end_of_ISendByte:
  3609                          ; =============== function _ISendByte ends ============
  3610                          ; *************** function _Stop_I2c *****************
  3611                          ; Defined at:
  3612                          ;		line 58 in file "./software_iic.c"
  3613                          ; Parameters:
  3614                          ;		None
  3615                          ; Auto variables:
  3616                          ;		None
  3617                          ; Return value:
  3618                          ;		type: void 
  3619                          ;		size: 0
  3620                          ; Registers used:
  3621                          ;		a, x, CUR_PP
  3622                          ; Tracked objects:
  3623                          ;		On entry : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  3624                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  3625                          ;		Unchanged: IDX_PP MVR_PP MVW_PP 
  3626                          ; Data sizes:
  3627                          ;		Autos:    0
  3628                          ;		Params:   0
  3629                          ;		Temp:     0
  3630                          ;		Total:    0
  3631                          ; This function calls:
  3632                          ;		_delay_us
  3633                          ; This function is called by:
  3634                          ;		_ISendByte
  3635                          ;		_IRcvBytes
  3636                          ; This function uses a non-reentrant model
  3637                          ; 
  3638  0022                    __size_of_Stop_I2c	equ	__end_of_Stop_I2c-_Stop_I2c
  3639                          ;software_iic.c: 57: void Stop_I2c(void)
  3640                          ;software_iic.c: 58: {
  3641                          ;			CUR_PP=0 XIO=0 PG=2 
  3642  3A7B                    _Stop_I2c:
  3643                          ;software_iic.c: 59: PRT1DR &= ~0x20;
  3644  3A7B  41 04 DF          	and	reg[4], 0xDF
  3645                          ;software_iic.c: 60: delay_us(1);
  3646  3A7E  50 01             	mov	a, 1
  3647  3A80  57 00             	mov	x, 0
  3648  3A82  7C 3B5C           	call	_delay_us
  3649                          ;software_iic.c: 61: PRT1DR |= 0x80;
  3650  3A85  43 04 80          	or	reg[4], 0x80
  3651                          ;software_iic.c: 62: delay_us(1);
  3652  3A88  50 01             	mov	a, 1
  3653  3A8A  57 00             	mov	x, 0
  3654  3A8C  71 80             	or	f, 0x80	;select multiple RAM page mode
  3655  3A8E  7C 3B5C           	call	_delay_us
  3656                          ;software_iic.c: 63: PRT1DR |= 0x20;
  3657  3A91  43 04 20          	or	reg[4], 0x20
  3658                          ;software_iic.c: 64: delay_us(1);
  3659  3A94  50 01             	mov	a, 1
  3660  3A96  57 00             	mov	x, 0
  3661  3A98  71 80             	or	f, 0x80	;select multiple RAM page mode
  3662  3A9A  7D 3B5C           	jmp	_delay_us
  3663                          ;software_iic.c: 65: }
  3664                          ;			CUR_PP=0 XIO=0 
  3665  3A9D                    __end_of_Stop_I2c:
  3666                          ; =============== function _Stop_I2c ends ============
  3667                          ; *************** function _Start_I2c *****************
  3668                          ; Defined at:
  3669                          ;		line 42 in file "./software_iic.c"
  3670                          ; Parameters:
  3671                          ;		None
  3672                          ; Auto variables:
  3673                          ;		None
  3674                          ; Return value:
  3675                          ;		type: void 
  3676                          ;		size: 0
  3677                          ; Registers used:
  3678                          ;		a, x, CUR_PP
  3679                          ; Tracked objects:
  3680                          ;		On entry : CUR_PP=0 IDX_PP? XIO=0 PG=2 MVR_PP? MVW_PP? 
  3681                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  3682                          ;		Unchanged: IDX_PP MVR_PP MVW_PP 
  3683                          ; Data sizes:
  3684                          ;		Autos:    0
  3685                          ;		Params:   0
  3686                          ;		Temp:     0
  3687                          ;		Total:    0
  3688                          ; This function calls:
  3689                          ;		_delay_us
  3690                          ; This function is called by:
  3691                          ;		_ISendByte
  3692                          ;		_IRcvBytes
  3693                          ; This function uses a non-reentrant model
  3694                          ; 
  3695  0025                    __size_of_Start_I2c	equ	__end_of_Start_I2c-_Start_I2c
  3696                          ;software_iic.c: 41: void Start_I2c(void)
  3697                          ;software_iic.c: 42: {
  3698                          ;			CUR_PP=0 XIO=0 PG=2 
  3699  3A9D                    _Start_I2c:
  3700                          ;software_iic.c: 43: PRT1DR |= 0x20;
  3701  3A9D  43 04 20          	or	reg[4], 0x20
  3702                          ;software_iic.c: 44: PRT1DR |= 0x80;
  3703  3AA0  43 04 80          	or	reg[4], 0x80
  3704                          ;software_iic.c: 45: delay_us(2);
  3705  3AA3  50 02             	mov	a, 2
  3706  3AA5  57 00             	mov	x, 0
  3707  3AA7  7C 3B5C           	call	_delay_us
  3708                          ;software_iic.c: 46: PRT1DR &= ~0x20;
  3709  3AAA  41 04 DF          	and	reg[4], 0xDF
  3710                          ;software_iic.c: 47: delay_us(1);
  3711  3AAD  50 01             	mov	a, 1
  3712  3AAF  57 00             	mov	x, 0
  3713  3AB1  71 80             	or	f, 0x80	;select multiple RAM page mode
  3714  3AB3  7C 3B5C           	call	_delay_us
  3715                          ;software_iic.c: 48: PRT1DR &= ~0x80;
  3716  3AB6  41 04 7F          	and	reg[4], 0x7F
  3717                          ;software_iic.c: 49: delay_us(1);
  3718  3AB9  50 01             	mov	a, 1
  3719  3ABB  57 00             	mov	x, 0
  3720  3ABD  71 80             	or	f, 0x80	;select multiple RAM page mode
  3721  3ABF  7D 3B5C           	jmp	_delay_us
  3722                          ;software_iic.c: 50: }
  3723                          ;			CUR_PP=0 XIO=0 
  3724  3AC2                    __end_of_Start_I2c:
  3725                          ; =============== function _Start_I2c ends ============
  3726                          ; *************** function _SendByte *****************
  3727                          ; Defined at:
  3728                          ;		line 74 in file "./software_iic.c"
  3729                          ; Parameters:
  3730                          ;		c           	reg:    a	type: unsigned char 
  3731                          ; Auto variables:
  3732                          ;		c           	       	type: unsigned char 
  3733                          ;		BitCnt      	       	type: unsigned char 
  3734                          ; Return value:
  3735                          ;		type: void 
  3736                          ;		size: 0
  3737                          ; Registers used:
  3738                          ;		a, x, CUR_PP
  3739                          ; Tracked objects:
  3740                          ;		On entry : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  3741                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  3742                          ;		Unchanged: IDX_PP MVR_PP MVW_PP 
  3743                          ; Data sizes:
  3744                          ;		Autos:    2
  3745                          ;		Params:   0
  3746                          ;		Temp:     1
  3747                          ;		Total:    3
  3748                          ; This function calls:
  3749                          ;		_delay_us
  3750                          ;		_ChangeToRead
  3751                          ;		_ChangeToOD
  3752                          ; This function is called by:
  3753                          ;		_ISendByte
  3754                          ;		_IRcvBytes
  3755                          ; This function uses a non-reentrant model
  3756                          ; 
  3757  007A                    __size_of_SendByte	equ	__end_of_SendByte-_SendByte
  3758                          ;software_iic.c: 73: void SendByte(unsigned char c)
  3759                          ;software_iic.c: 74: {
  3760                          ;			CUR_PP=0 XIO=0 PG=2 
  3761  3AC2                    _SendByte:
  3762                          ;SendByte@c stored from a
  3763  3AC2  53 6D             	mov	[??_SendByte^0], a
  3764                          ;software_iic.c: 75: unsigned char BitCnt;
  3765                          ;software_iic.c: 77: for(BitCnt=0;BitCnt<8;BitCnt++)
  3766  3AC4  55 6E  00         	mov	[(??_SendByte+1)^0], 0
  3767                          ;			CUR_PP=0 XIO=0 
  3768  3AC7                    l201:
  3769                          ;software_iic.c: 78: {
  3770                          ;software_iic.c: 79: if((c<<BitCnt)&0x80)
  3771  3AC7  5F 6F  6E         	mov	[(??_SendByte^0+2)], [(??_SendByte+1)^0]
  3772  3ACA  51 6D             	mov	a, [??_SendByte^0]
  3773  3ACC  7D 3AD0           	jmp	u353
  3774  3ACF                    u354:
  3775  3ACF  64                	asl	a
  3776  3AD0                    u353:
  3777  3AD0  7A 6F             	dec	[(??_SendByte^0+2)]
  3778  3AD2  DFFC              	jnc	u354
  3779  3AD4  21 80             	and	a, 0x80
  3780  3AD6  A007              	jz	l204
  3781                          ;software_iic.c: 80: {
  3782                          ;software_iic.c: 81: PRT1DR |= 0x20;
  3783  3AD8  43 04 20          	or	reg[4], 0x20
  3784                          ;software_iic.c: 82: }
  3785  3ADB  7D 3AE1           	jmp	l205
  3786                          ;			CUR_PP=0 XIO=0 
  3787  3ADE                    l204:
  3788                          ;software_iic.c: 83: else
  3789                          ;software_iic.c: 84: {
  3790                          ;software_iic.c: 85: PRT1DR &= ~0x20;
  3791  3ADE  41 04 DF          	and	reg[4], 0xDF
  3792                          ;			CUR_PP=0 XIO=0 
  3793  3AE1                    l205:
  3794                          ;software_iic.c: 86: }
  3795                          ;software_iic.c: 87: delay_us(1);
  3796  3AE1  50 01             	mov	a, 1
  3797  3AE3  57 00             	mov	x, 0
  3798  3AE5  71 80             	or	f, 0x80	;select multiple RAM page mode
  3799  3AE7  7C 3B5C           	call	_delay_us
  3800                          ;software_iic.c: 88: PRT1DR |= 0x80;
  3801  3AEA  43 04 80          	or	reg[4], 0x80
  3802                          ;software_iic.c: 89: delay_us(1);
  3803  3AED  50 01             	mov	a, 1
  3804  3AEF  57 00             	mov	x, 0
  3805  3AF1  71 80             	or	f, 0x80	;select multiple RAM page mode
  3806  3AF3  7C 3B5C           	call	_delay_us
  3807                          ;software_iic.c: 90: PRT1DR &= ~0x80;
  3808  3AF6  41 04 7F          	and	reg[4], 0x7F
  3809                          ;software_iic.c: 91: delay_us(1);
  3810  3AF9  50 01             	mov	a, 1
  3811  3AFB  57 00             	mov	x, 0
  3812  3AFD  71 80             	or	f, 0x80	;select multiple RAM page mode
  3813  3AFF  7C 3B5C           	call	_delay_us
  3814  3B02  76 6E             	inc	[(??_SendByte+1)^0]
  3815  3B04  3C 6E  08         	cmp	[(??_SendByte+1)^0], 8
  3816  3B07  CFBF              	jc	l201
  3817                          ;			CUR_PP=0 XIO=0 
  3818                          ;software_iic.c: 92: }
  3819                          ;software_iic.c: 93: ChangeToRead();
  3820  3B09  71 80             	or	f, 0x80	;select multiple RAM page mode
  3821  3B0B  7C 3B3C           	call	_ChangeToRead
  3822                          ;software_iic.c: 94: delay_us(2);
  3823  3B0E  50 02             	mov	a, 2
  3824  3B10  57 00             	mov	x, 0
  3825  3B12  71 80             	or	f, 0x80	;select multiple RAM page mode
  3826  3B14  7C 3B5C           	call	_delay_us
  3827                          ;software_iic.c: 95: PRT1DR |= 0x80;
  3828  3B17  43 04 80          	or	reg[4], 0x80
  3829                          ;software_iic.c: 96: delay_us(1);
  3830  3B1A  50 01             	mov	a, 1
  3831  3B1C  57 00             	mov	x, 0
  3832  3B1E  71 80             	or	f, 0x80	;select multiple RAM page mode
  3833  3B20  7C 3B5C           	call	_delay_us
  3834                          ;software_iic.c: 97: if(PRT1DR&0x20)
  3835  3B23  49 04 20          	tst	reg[4], 32
  3836  3B26  A007              	jz	l206
  3837                          ;software_iic.c: 98: {
  3838                          ;software_iic.c: 99: ack=0;
  3839  3B28  55 48  00         	mov	[_ack^0], 0
  3840                          ;software_iic.c: 100: }
  3841  3B2B  7D 3B31           	jmp	l207
  3842                          ;			CUR_PP=0 XIO=0 
  3843  3B2E                    l206:
  3844                          ;software_iic.c: 101: else
  3845                          ;software_iic.c: 102: {
  3846                          ;software_iic.c: 103: ack=1;
  3847  3B2E  55 48  01         	mov	[_ack^0], 1
  3848                          ;			CUR_PP=0 XIO=0 
  3849  3B31                    l207:
  3850                          ;software_iic.c: 104: }
  3851                          ;software_iic.c: 105: ChangeToOD();
  3852  3B31  71 80             	or	f, 0x80	;select multiple RAM page mode
  3853  3B33  7C 3B4D           	call	_ChangeToOD
  3854                          ;software_iic.c: 106: PRT1DR &= ~0x80;
  3855  3B36  41 04 7F          	and	reg[4], 0x7F
  3856  3B39  40                	nop	;#
  3857  3B3A  40                	nop	;#
  3858                          ;software_iic.c: 107: asm("nop");
  3859                          ;software_iic.c: 108: asm("nop");
  3860                          ;software_iic.c: 109: }
  3861                          ;			CUR_PP=0 XIO=0 
  3862  3B3B  7F                	ret
  3863  3B3C                    __end_of_SendByte:
  3864                          ; =============== function _SendByte ends ============
  3865                          ; *************** function _ChangeToRead *****************
  3866                          ; Defined at:
  3867                          ;		line 16 in file "./software_iic.c"
  3868                          ; Parameters:
  3869                          ;		None
  3870                          ; Auto variables:
  3871                          ;		None
  3872                          ; Return value:
  3873                          ;		type: void 
  3874                          ;		size: 0
  3875                          ; Registers used:
  3876                          ;		a, x, CUR_PP
  3877                          ; Tracked objects:
  3878                          ;		On entry : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  3879                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  3880                          ;		Unchanged: IDX_PP MVR_PP MVW_PP 
  3881                          ; Data sizes:
  3882                          ;		Autos:    0
  3883                          ;		Params:   0
  3884                          ;		Temp:     0
  3885                          ;		Total:    0
  3886                          ; This function calls:
  3887                          ;		_delay_us
  3888                          ; This function is called by:
  3889                          ;		_SendByte
  3890                          ;		_RcvByte
  3891                          ; This function uses a non-reentrant model
  3892                          ; 
  3893  0011                    __size_of_ChangeToRead	equ	__end_of_ChangeToRead-_ChangeToRead
  3894                          ;software_iic.c: 15: void ChangeToRead(void)
  3895                          ;software_iic.c: 16: {
  3896                          ;			CUR_PP=0 XIO=0 PG=2 
  3897  3B3C                    _ChangeToRead:
  3898                          ;software_iic.c: 17: PRT1DM0 &= ~(0x20);
  3899  3B3C  71 10             	or	f, 0x10	; select config register space
  3900  3B3E  41 04 DF          	and	reg[4], 0xDF
  3901                          ;software_iic.c: 18: PRT1DM2 &= ~(0x20);
  3902  3B41  70 CF             	and	f, 0xCF	;select user reg space
  3903  3B43  41 07 DF          	and	reg[7], 0xDF
  3904                          ;software_iic.c: 19: delay_us(1);
  3905  3B46  50 01             	mov	a, 1
  3906  3B48  57 00             	mov	x, 0
  3907  3B4A  7D 3B5C           	jmp	_delay_us
  3908                          ;software_iic.c: 20: }
  3909                          ;			CUR_PP=0 XIO=0 
  3910  3B4D                    __end_of_ChangeToRead:
  3911                          ; =============== function _ChangeToRead ends ============
  3912                          ; *************** function _ChangeToOD *****************
  3913                          ; Defined at:
  3914                          ;		line 23 in file "./software_iic.c"
  3915                          ; Parameters:
  3916                          ;		None
  3917                          ; Auto variables:
  3918                          ;		None
  3919                          ; Return value:
  3920                          ;		type: void 
  3921                          ;		size: 0
  3922                          ; Registers used:
  3923                          ;		a, x, CUR_PP
  3924                          ; Tracked objects:
  3925                          ;		On entry : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  3926                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  3927                          ;		Unchanged: IDX_PP MVR_PP MVW_PP 
  3928                          ; Data sizes:
  3929                          ;		Autos:    0
  3930                          ;		Params:   0
  3931                          ;		Temp:     0
  3932                          ;		Total:    0
  3933                          ; This function calls:
  3934                          ;		_delay_us
  3935                          ; This function is called by:
  3936                          ;		_SendByte
  3937                          ;		_RcvByte
  3938                          ; This function uses a non-reentrant model
  3939                          ; 
  3940  000F                    __size_of_ChangeToOD	equ	__end_of_ChangeToOD-_ChangeToOD
  3941                          ;software_iic.c: 22: void ChangeToOD(void)
  3942                          ;software_iic.c: 23: {
  3943                          ;			CUR_PP=0 XIO=0 PG=2 
  3944  3B4D                    _ChangeToOD:
  3945                          ;software_iic.c: 24: PRT1DM2 |= (0x20);
  3946  3B4D  43 07 20          	or	reg[7], 0x20
  3947                          ;software_iic.c: 26: PRT1DM0 |= (0x20);
  3948  3B50  71 10             	or	f, 0x10	; select config register space
  3949  3B52  43 04 20          	or	reg[4], 0x20
  3950                          ;software_iic.c: 27: delay_us(1);
  3951  3B55  50 01             	mov	a, 1
  3952  3B57  57 00             	mov	x, 0
  3953  3B59  7D 3B5C           	jmp	_delay_us
  3954                          ;software_iic.c: 28: }
  3955                          ;			CUR_PP=0 XIO=0 
  3956  3B5C                    __end_of_ChangeToOD:
  3957                          ; =============== function _ChangeToOD ends ============
  3958                          ; *************** function _delay_us *****************
  3959                          ; Defined at:
  3960                          ;		line 8 in file "./ht1621b.c"
  3961                          ; Parameters:
  3962                          ;		us          	reg:   xa	type: unsigned int 
  3963                          ; Auto variables:
  3964                          ;		us          	       	type: unsigned int 
  3965                          ; Return value:
  3966                          ;		type: void 
  3967                          ;		size: 0
  3968                          ; Registers used:
  3969                          ;		a, x, CUR_PP
  3970                          ; Tracked objects:
  3971                          ;		On entry : CUR_PP=0 IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  3972                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  3973                          ;		Unchanged: IDX_PP MVR_PP MVW_PP 
  3974                          ; Data sizes:
  3975                          ;		Autos:    2
  3976                          ;		Params:   0
  3977                          ;		Temp:     0
  3978                          ;		Total:    2
  3979                          ; This function calls:
  3980                          ;		Nothing
  3981                          ; This function is called by:
  3982                          ;		_SendBit_1621
  3983                          ;		_SendDataBit_1621
  3984                          ;		_SendCmd
  3985                          ;		_WriteAll_1621
  3986                          ;		_main
  3987                          ;		_ChangeToRead
  3988                          ;		_ChangeToOD
  3989                          ;		_Start_I2c
  3990                          ;		_Stop_I2c
  3991                          ;		_SendByte
  3992                          ;		_RcvByte
  3993                          ;		_Ack_I2c
  3994                          ; This function uses a non-reentrant model
  3995                          ; 
  3996  001E                    __size_of_delay_us	equ	__end_of_delay_us-_delay_us
  3997                          ;ht1621b.c: 7: void delay_us(unsigned int us)
  3998                          ;ht1621b.c: 8: {
  3999                          ;			CUR_PP=0 PG=2 
  4000  3B5C                    _delay_us:
  4001                          ;delay_us@us stored from xa
  4002  3B5C  53 71             	mov	[(??_delay_us^0+1)], a
  4003  3B5E  5A 70             	mov	[??_delay_us^0], x
  4004                          ;ht1621b.c: 9: for (;us>0;us--)
  4005  3B60  51 70             	mov	a, [??_delay_us^0]
  4006  3B62  2A 71             	or	a, [(??_delay_us^0+1)]
  4007  3B64  A012              	jz	l7
  4008                          ;			CUR_PP=0 
  4009  3B66                    l6:
  4010  3B66  40                	nop	;#
  4011  3B67  40                	nop	;#
  4012  3B68  40                	nop	;#
  4013  3B69  40                	nop	;#
  4014  3B6A  40                	nop	;#
  4015  3B6B  40                	nop	;#
  4016                          ;ht1621b.c: 10: {
  4017                          ;ht1621b.c: 11: asm ("NOP");
  4018                          ;ht1621b.c: 12: asm ("NOP");
  4019                          ;ht1621b.c: 13: asm ("NOP");
  4020                          ;ht1621b.c: 14: asm ("NOP");
  4021                          ;ht1621b.c: 15: asm ("NOP");
  4022                          ;ht1621b.c: 16: asm ("NOP");
  4023  3B6C  7A 71             	dec	[(??_delay_us^0+1)]
  4024  3B6E  1E 70  00         	sbb	[??_delay_us^0], 0
  4025  3B71  51 70             	mov	a, [??_delay_us^0]
  4026  3B73  2A 71             	or	a, [(??_delay_us^0+1)]
  4027  3B75  BFF0              	jnz	l6
  4028                          ;			CUR_PP=0 
  4029  3B77                    l7:
  4030                          ;ht1621b.c: 17: }
  4031                          ;ht1621b.c: 18: }
  4032                          ;			CUR_PP=0 
  4033  3B77  70 CF             	and	f, 0xCF	;select user reg space
  4034  3B79  7F                	ret
  4035  3B7A                    __end_of_delay_us:
  4036                          ; =============== function _delay_us ends ============
  4037                          ; *************** function _BoardUART *****************
  4038                          ; Defined at:
  4039                          ;		line 5 in file "./boardcommunication.c"
  4040                          ; Parameters:
  4041                          ;		None
  4042                          ; Auto variables:
  4043                          ;		rxdata      	       	type: unsigned char 
  4044                          ; Return value:
  4045                          ;		type: void 
  4046                          ;		size: 0
  4047                          ; Registers used:
  4048                          ;		a, x, TMP_DR0, TMP_DR1, TMP_DR2, TMP_DR3, CUR_PP, IDX_PP, MVR_PP, MVW_PP, mret
  4049                          ; Tracked objects:
  4050                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  4051                          ;		On exit  : CUR_PP? IDX_PP? XIO=0 PG=2 MVR_PP? MVW_PP? 
  4052                          ;		Unchanged: 
  4053                          ; Data sizes:
  4054                          ;		Autos:    1
  4055                          ;		Params:   0
  4056                          ;		Temp:     0
  4057                          ;		Total:    1
  4058                          ; This function calls:
  4059                          ;		_UART_Board_bReadRxData
  4060                          ;		_UART_Board_bReadTxStatus
  4061                          ;		_UART_Board_SendData
  4062                          ; This function is called by:
  4063                          ;		Interrupt level 2
  4064                          ; This function uses a non-reentrant model
  4065                          ; 
  4066  0019                    __size_of_BoardUART	equ	__end_of_BoardUART-_BoardUART
  4067                          ;boardcommunication.c: 4: void BoardUART(void )
  4068                          ;boardcommunication.c: 5: {
  4069                          ;			PG=2 
  4070  3B7A                    _BoardUART:
  4071                          ;boardcommunication.c: 6: unsigned char rxdata;
  4072                          ;boardcommunication.c: 8: rxdata = UART_Board_bReadRxData();
  4073  3B7A  70 CF             	and	f, 0xCF	;select user reg space
  4074  3B7C  7C 2DE5           	call	_UART_Board_bReadRxData
  4075  3B7F  62 D0 00          	mov	reg[208], 0
  4076  3B82  53 7C             	mov	[??_BoardUART^0], a
  4077                          ;boardcommunication.c: 10: while (!(UART_Board_bReadTxStatus() & 0x10));
  4078                          ;			XIO=0 PG=2 
  4079  3B84                    l2:
  4080  3B84  7C 2DE2           	call	_UART_Board_bReadTxStatus
  4081  3B87  21 10             	and	a, 0x10
  4082  3B89  AFFA              	jz	l2
  4083                          ;			XIO=0 PG=2 
  4084                          ;boardcommunication.c: 11: UART_Board_SendData(rxdata);
  4085  3B8B  62 D0 00          	mov	reg[208], 0
  4086  3B8E  51 7C             	mov	a, [??_BoardUART^0]
  4087  3B90  7D 2DDF           	jmp	_UART_Board_SendData
  4088                          ;boardcommunication.c: 12: }
  4089                          ;			XIO=0 PG=2 
  4090  3B93                    __end_of_BoardUART:
  4091                          ; =============== function _BoardUART ends ============
  4092                          ; *************** function _Timer16ISR *****************
  4093                          ; Defined at:
  4094                          ;		line 27 in file "./main.c"
  4095                          ; Parameters:
  4096                          ;		None
  4097                          ; Auto variables:
  4098                          ;		None
  4099                          ; Return value:
  4100                          ;		type: void 
  4101                          ;		size: 0
  4102                          ; Registers used:
  4103                          ;		a, CUR_PP
  4104                          ; Tracked objects:
  4105                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  4106                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG=2 MVR_PP? MVW_PP? 
  4107                          ;		Unchanged: IDX_PP MVR_PP MVW_PP 
  4108                          ; Data sizes:
  4109                          ;		Autos:    0
  4110                          ;		Params:   0
  4111                          ;		Temp:     0
  4112                          ;		Total:    0
  4113                          ; This function calls:
  4114                          ;		Nothing
  4115                          ; This function is called by:
  4116                          ;		Interrupt level 2
  4117                          ; This function uses a non-reentrant model
  4118                          ; 
  4119  0030                    __size_of_Timer16ISR	equ	__end_of_Timer16ISR-_Timer16ISR
  4120                          ;main.c: 16: unsigned int LightADCValue;
  4121                          ;main.c: 18: unsigned char FanUpdateTimer = 8;
  4122                          ;main.c: 19: unsigned char one_sec_timer = 8;
  4123                          ;main.c: 20: unsigned char rh_sample_timer = 8;
  4124                          ;main.c: 21: unsigned char PlasmaTimer = 8;
  4125                          ;main.c: 22: unsigned char LcdUpdateTimer = 4;
  4126                          ;main.c: 23: unsigned char IICTimeOutTimer;
  4127                          ;main.c: 24: unsigned char RHSampleStep = 0;
  4128                          ;main.c: 25: const unsigned char RankLevel[8] = {48,96,144,192,240,288,336,384};
  4129                          ;main.c: 26: void Timer16ISR(void)
  4130                          ;main.c: 27: {
  4131                          ;			PG=2 
  4132  3B93                    _Timer16ISR:
  4133                          ;main.c: 28: if (one_sec_timer) one_sec_timer--;
  4134  3B93  70 CF             	and	f, 0xCF	;select user reg space
  4135  3B95  62 D0 00          	mov	reg[208], 0
  4136  3B98  51 5F             	mov	a, [_one_sec_timer^0]
  4137  3B9A  A003              	jz	l114
  4138  3B9C  7A 5F             	dec	[_one_sec_timer^0]
  4139                          ;			CUR_PP=0 XIO=0 PG=2 
  4140  3B9E                    l114:
  4141                          ;main.c: 29: if (rh_sample_timer) rh_sample_timer--;
  4142  3B9E  51 62             	mov	a, [_rh_sample_timer^0]
  4143  3BA0  A003              	jz	l115
  4144  3BA2  7A 62             	dec	[_rh_sample_timer^0]
  4145                          ;			CUR_PP=0 XIO=0 PG=2 
  4146  3BA4                    l115:
  4147                          ;main.c: 30: if (FanUpdateTimer) FanUpdateTimer--;
  4148  3BA4  51 5C             	mov	a, [_FanUpdateTimer^0]
  4149  3BA6  A003              	jz	l116
  4150  3BA8  7A 5C             	dec	[_FanUpdateTimer^0]
  4151                          ;			CUR_PP=0 XIO=0 PG=2 
  4152  3BAA                    l116:
  4153                          ;main.c: 31: if (PlasmaTimer) PlasmaTimer--;
  4154  3BAA  51 5E             	mov	a, [_PlasmaTimer^0]
  4155  3BAC  A003              	jz	l117
  4156  3BAE  7A 5E             	dec	[_PlasmaTimer^0]
  4157                          ;			CUR_PP=0 XIO=0 PG=2 
  4158  3BB0                    l117:
  4159                          ;main.c: 32: if (LcdUpdateTimer) LcdUpdateTimer--;
  4160  3BB0  51 5D             	mov	a, [_LcdUpdateTimer^0]
  4161  3BB2  A003              	jz	l118
  4162  3BB4  7A 5D             	dec	[_LcdUpdateTimer^0]
  4163                          ;			CUR_PP=0 XIO=0 PG=2 
  4164  3BB6                    l118:
  4165                          ;main.c: 33: if (IICTimeOutTimer) IICTimeOutTimer--;
  4166  3BB6  51 3A             	mov	a, [_IICTimeOutTimer^0]
  4167  3BB8  A003              	jz	l119
  4168  3BBA  7A 3A             	dec	[_IICTimeOutTimer^0]
  4169                          ;			CUR_PP=0 XIO=0 PG=2 
  4170  3BBC                    l119:
  4171                          ;main.c: 34: if (RecTimeoutTimer) RecTimeoutTimer--;
  4172  3BBC  51 44             	mov	a, [_RecTimeoutTimer^0]
  4173  3BBE  A003              	jz	l120
  4174  3BC0  7A 44             	dec	[_RecTimeoutTimer^0]
  4175                          ;			CUR_PP=0 XIO=0 PG=2 
  4176  3BC2                    l120:
  4177                          ;main.c: 35: }
  4178                          ;			CUR_PP=0 XIO=0 PG=2 
  4179  3BC2  7F                	ret
  4180  3BC3                    __end_of_Timer16ISR:
  4181                          ; =============== function _Timer16ISR ends ============
  4182                          ; *************** function _SensorUART *****************
  4183                          ; Defined at:
  4184                          ;		line 12 in file "./particlesensor.c"
  4185                          ; Parameters:
  4186                          ;		None
  4187                          ; Auto variables:
  4188                          ;		rxdata      	       	type: unsigned char 
  4189                          ; Return value:
  4190                          ;		type: void 
  4191                          ;		size: 0
  4192                          ; Registers used:
  4193                          ;		a, x, TMP_DR0, TMP_DR1, TMP_DR2, TMP_DR3, CUR_PP, IDX_PP, MVR_PP, MVW_PP, mret
  4194                          ; Tracked objects:
  4195                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  4196                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG=2 MVR_PP? MVW_PP? 
  4197                          ;		Unchanged: 
  4198                          ; Data sizes:
  4199                          ;		Autos:    1
  4200                          ;		Params:   0
  4201                          ;		Temp:     2
  4202                          ;		Total:    3
  4203                          ; This function calls:
  4204                          ;		_UART_Sensor_bReadRxData
  4205                          ; This function is called by:
  4206                          ;		Interrupt level 2
  4207                          ; This function uses a non-reentrant model
  4208                          ; 
  4209  007E                    __size_of_SensorUART	equ	__end_of_SensorUART-_SensorUART
  4210                          ;particlesensor.c: 11: void SensorUART(void )
  4211                          ;particlesensor.c: 12: {
  4212                          ;			PG=2 
  4213  3BC3                    _SensorUART:
  4214                          ;particlesensor.c: 13: unsigned char rxdata;
  4215                          ;particlesensor.c: 14: unsigned char i;
  4216                          ;particlesensor.c: 15: rxdata = UART_Sensor_bReadRxData();
  4217  3BC3  70 CF             	and	f, 0xCF	;select user reg space
  4218  3BC5  7C 2F35           	call	_UART_Sensor_bReadRxData
  4219  3BC8  62 D0 00          	mov	reg[208], 0
  4220  3BCB  53 7C             	mov	[??_SensorUART^0], a
  4221                          ;particlesensor.c: 24: RecTimeoutTimer = 3;
  4222  3BCD  55 44  03         	mov	[_RecTimeoutTimer^0], 3
  4223                          ; SensorUART@rxdata loaded to a
  4224  3BD0  51 7C             	mov	a, [??_SensorUART^0]
  4225                          ;particlesensor.c: 26: if(HeadFlag == 0)
  4226  3BD2  3C 37  00         	cmp	[_HeadFlag^0], 0
  4227  3BD5  B030              	jnz	l149
  4228                          ;particlesensor.c: 27: {
  4229                          ;particlesensor.c: 29: if(DataPtr < 2)
  4230  3BD7  3C 34  02         	cmp	[_DataPtr^0], 2
  4231  3BDA  D00D              	jnc	l150
  4232                          ;particlesensor.c: 30: {
  4233                          ;particlesensor.c: 31: MyPMSUnion.PMRxBuf[DataPtr] = rxdata;
  4234  3BDC  58 34             	mov	x, [_DataPtr^0]
  4235  3BDE  62 D3 00          	mov	reg[211], 0
  4236  3BE1  54 00             	mov	[x+_MyPMSUnion], a
  4237                          ;particlesensor.c: 32: DataPtr ++;
  4238  3BE3  76 34             	inc	[_DataPtr^0]
  4239                          ;particlesensor.c: 33: }
  4240  3BE5  7D 3BF3           	jmp	l151
  4241                          ;			CUR_PP=0 XIO=0 PG=2 
  4242  3BE8                    l150:
  4243                          ;particlesensor.c: 34: else
  4244                          ;particlesensor.c: 35: {
  4245                          ;particlesensor.c: 36: MyPMSUnion.MyPMFrame.Head <<= 8;
  4246  3BE8  5F 00  01         	mov	[_MyPMSUnion^0], [(_MyPMSUnion+1)^0]
  4247  3BEB  55 01  00         	mov	[(_MyPMSUnion+1)^0], 0
  4248                          ;particlesensor.c: 37: MyPMSUnion.PMRxBuf[1] = rxdata;
  4249  3BEE  53 01             	mov	[(_MyPMSUnion+1)^0], a
  4250                          ;particlesensor.c: 38: DataPtr = 2;
  4251  3BF0  55 34  02         	mov	[_DataPtr^0], 2
  4252                          ;			CUR_PP=0 XIO=0 PG=2 
  4253  3BF3                    l151:
  4254                          ;particlesensor.c: 39: }
  4255                          ;particlesensor.c: 42: if(DataPtr == 2 && MyPMSUnion.MyPMFrame.Head == 0x424d)
  4256  3BF3  3C 34  02         	cmp	[_DataPtr^0], 2
  4257  3BF6  B049              	jnz	l153
  4258  3BF8  3C 00  42         	cmp	[_MyPMSUnion^0], 66
  4259  3BFB  B009              	jnz	l152
  4260  3BFD  3C 01  4D         	cmp	[(_MyPMSUnion^0+1)], 77
  4261  3C00  B03F              	jnz	l153
  4262                          ;particlesensor.c: 43: {
  4263                          ;particlesensor.c: 44: HeadFlag = 1;
  4264  3C02  55 37  01         	mov	[_HeadFlag^0], 1
  4265                          ;			CUR_PP=0 XIO=0 PG=2 
  4266  3C05                    l152:
  4267                          ;particlesensor.c: 45: }
  4268                          ;particlesensor.c: 46: }
  4269  3C05  7F                	ret
  4270                          ;			CUR_PP=0 XIO=0 PG=2 
  4271  3C06                    l149:
  4272                          ;particlesensor.c: 47: else
  4273                          ;particlesensor.c: 48: {
  4274                          ;particlesensor.c: 49: MyPMSUnion.PMRxBuf[DataPtr] = rxdata;
  4275  3C06  58 34             	mov	x, [_DataPtr^0]
  4276  3C08  62 D3 00          	mov	reg[211], 0
  4277  3C0B  54 00             	mov	[x+_MyPMSUnion], a
  4278                          ;particlesensor.c: 50: if(DataPtr >= (40-1))
  4279  3C0D  3C 34  27         	cmp	[_DataPtr^0], 39
  4280  3C10  C007              	jc	l154
  4281                          ;particlesensor.c: 51: {
  4282                          ;particlesensor.c: 52: DataPtr = (40-1);
  4283  3C12  55 34  27         	mov	[_DataPtr^0], 39
  4284                          ;particlesensor.c: 53: }
  4285  3C15  7D 3C1A           	jmp	l155
  4286                          ;			CUR_PP=0 IDX_PP=0 XIO=0 PG=2 
  4287  3C18                    l154:
  4288                          ;particlesensor.c: 54: else
  4289                          ;particlesensor.c: 55: {
  4290                          ;particlesensor.c: 56: DataPtr++;
  4291  3C18  76 34             	inc	[_DataPtr^0]
  4292                          ;			CUR_PP=0 IDX_PP=0 XIO=0 PG=2 
  4293  3C1A                    l155:
  4294                          ;particlesensor.c: 57: }
  4295                          ;particlesensor.c: 59: if(DataPtr == (MyPMSUnion.MyPMFrame.Length + 4) && DataPtr >= 6)
  4296  3C1A  5F 7D  02         	mov	[(??_SensorUART^0+1)], [(_MyPMSUnion+2)^0]
  4297  3C1D  5F 7E  03         	mov	[(??_SensorUART^0+2)], [(_MyPMSUnion+3)^0]
  4298  3C20  06 7E  04         	add	[(??_SensorUART^0+2)], 4
  4299  3C23  0E 7D  00         	adc	[(??_SensorUART^0+1)], 0
  4300  3C26  51 7D             	mov	a, [(??_SensorUART^0+1)]
  4301  3C28  39 00             	cmp	a, 0
  4302  3C2A  B015              	jnz	l153
  4303  3C2C  51 7E             	mov	a, [(??_SensorUART^0+2)]
  4304  3C2E  3A 34             	cmp	a, [_DataPtr^0]
  4305  3C30  B00F              	jnz	l153
  4306  3C32  3C 34  06         	cmp	[_DataPtr^0], 6
  4307  3C35  C00A              	jc	l153
  4308                          ;particlesensor.c: 60: {
  4309                          ;particlesensor.c: 61: PMSFrameFlag = 1;
  4310  3C37  55 3E  01         	mov	[_PMSFrameFlag^0], 1
  4311                          ;particlesensor.c: 62: HeadFlag = 0;
  4312  3C3A  55 37  00         	mov	[_HeadFlag^0], 0
  4313                          ;particlesensor.c: 63: DataPtr = 0;
  4314  3C3D  55 34  00         	mov	[_DataPtr^0], 0
  4315                          ;			CUR_PP=0 IDX_PP=0 XIO=0 PG=2 
  4316                          ;			CUR_PP=0 XIO=0 PG=2 
  4317  3C40                    l153:
  4318                          ;particlesensor.c: 70: }
  4319                          ;particlesensor.c: 71: }
  4320                          ;particlesensor.c: 72: }
  4321                          ;			CUR_PP=0 XIO=0 PG=2 
  4322  3C40  7F                	ret
  4323  3C41                    __end_of_SensorUART:
  4324  3C41                    ___end_of_c_program_code:
  4325                          
  4326                          	psect	maintext
  4327                          ;Data sizes: Strings 67, constant 28, data 7, bss 92, persistent 0 stack 28
  4328                          ; *************** function _main *****************
  4329                          ; Defined at:
  4330                          ;		line 59 in file "./main.c"
  4331                          ; Parameters:
  4332                          ;		None
  4333                          ; Auto variables:
  4334                          ;		ret         	       	type: unsigned char 
  4335                          ; Return value:
  4336                          ;		type: void 
  4337                          ;		size: 0
  4338                          ; Registers used:
  4339                          ;		a, x, TMP_DR0, TMP_DR1, TMP_DR2, TMP_DR3, CUR_PP, IDX_PP, MVR_PP, MVW_PP, mret
  4340                          ; Tracked objects:
  4341                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  4342                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG=2 MVR_PP? MVW_PP? 
  4343                          ;		Unchanged: 
  4344                          ; Data sizes:
  4345                          ;		Autos:    1
  4346                          ;		Params:   0
  4347                          ;		Temp:     1
  4348                          ;		Total:    2
  4349                          ; This function calls:
  4350                          ;		_Init_IIC
  4351                          ;		_delay_us
  4352                          ;		_HT1621B_Init
  4353                          ;		_PWM8_BL_WritePeriod
  4354                          ;		_PWM8_BL_WritePulseWidth
  4355                          ;		_PWM8_BL_Start
  4356                          ;		_UART_Board_Start
  4357                          ;		_UART_Sensor_Start
  4358                          ;		_UART_Sensor_IntCntl
  4359                          ;		_Timer16_WritePeriod
  4360                          ;		_Timer16_WriteCompareValue
  4361                          ;		_Timer16_EnableInt
  4362                          ;		_Timer16_Start
  4363                          ;		_UART_Board_CPutString
  4364                          ;		_SAR10_SetClk
  4365                          ;		_SAR10_SetRunMode
  4366                          ;		_SAR10_SetADCChannel
  4367                          ;		_SAR10_DisableInt
  4368                          ;		_SAR10_Start
  4369                          ;		_Si7020Init
  4370                          ;		_LCD_Init
  4371                          ;		_FrameCheck
  4372                          ;		_UART_Board_PutSHexInt
  4373                          ;		_UART_Board_PutCRLF
  4374                          ;		_SAR10_Trigger
  4375                          ;		_SAR10_fIsDataAvailable
  4376                          ;		_SAR10_iGetData
  4377                          ;		_LightRank
  4378                          ;		_Si7020SendCommand
  4379                          ;		_Si7020Read_RH_NHM
  4380                          ;		_CRC8Check
  4381                          ;		_Si7020CalcRH
  4382                          ;		_UART_Board_PutSHexByte
  4383                          ;		_Si7020Read_Temp_after_RHM
  4384                          ;		_Si7020CalcTemp
  4385                          ;		_LCDOuputAll
  4386                          ; This function is called by:
  4387                          ;		Startup code after reset
  4388                          ; This function uses a non-reentrant model
  4389                          ; 
  4390  01BF                    __size_of_main	equ	__end_of_main-_main
  4391                          ;main.c: 58: void main(void)
  4392                          ;main.c: 59: {
  4393                          ;			CUR_PP=0 XIO=0 PG=2 
  4394  3C41                    _main:
  4395  3C41  71 01             	or	f, 1	;#
  4396                          ;main.c: 60: unsigned char k;
  4397                          ;main.c: 61: unsigned char ret;
  4398                          ;main.c: 62: unsigned int *p;
  4399                          ;main.c: 63: asm("or  F, 01h") ;
  4400                          ;main.c: 65: RES_WDT = 0;
  4401  3C43  62 E3 00          	mov	reg[227], 0
  4402                          ;main.c: 66: Init_IIC();
  4403  3C46  7C 3446           	call	_Init_IIC
  4404                          ;main.c: 68: delay_us(200);
  4405  3C49  50 C8             	mov	a, 200
  4406  3C4B  57 00             	mov	x, 0
  4407  3C4D  7C 3B5C           	call	_delay_us
  4408                          ;main.c: 69: HT1621B_Init();
  4409  3C50  71 80             	or	f, 0x80	;select multiple RAM page mode
  4410  3C52  7C 3457           	call	_HT1621B_Init
  4411                          ;main.c: 72: PWM8_BL_WritePeriod(255);
  4412  3C55  50 FF             	mov	a, 255
  4413  3C57  71 80             	or	f, 0x80	;select multiple RAM page mode
  4414  3C59  7C 2C57           	call	_PWM8_BL_WritePeriod
  4415                          ;main.c: 73: PWM8_BL_WritePulseWidth(5);
  4416  3C5C  50 05             	mov	a, 5
  4417  3C5E  7C 2C5A           	call	_PWM8_BL_WritePulseWidth
  4418                          ;main.c: 74: PWM8_BL_Start();
  4419  3C61  7C 2C4F           	call	_PWM8_BL_Start
  4420                          ;main.c: 78: UART_Board_Start(0x00);
  4421  3C64  50 00             	mov	a, 0
  4422  3C66  7C 2DD1           	call	_UART_Board_Start
  4423                          ;main.c: 82: UART_Sensor_Start(0x00);
  4424  3C69  50 00             	mov	a, 0
  4425  3C6B  7C 2F21           	call	_UART_Sensor_Start
  4426                          ;main.c: 84: UART_Sensor_IntCntl(0x01 | 0x00);
  4427  3C6E  50 01             	mov	a, 1
  4428  3C70  7C 2F4E           	call	_UART_Sensor_IntCntl
  4429                          ;main.c: 86: Timer16_WritePeriod(9600);
  4430  3C73  50 80             	mov	a, 128
  4431  3C75  57 25             	mov	x, 37
  4432  3C77  7C 2D5F           	call	_Timer16_WritePeriod
  4433                          ;main.c: 87: Timer16_WriteCompareValue(9000);
  4434  3C7A  50 28             	mov	a, 40
  4435  3C7C  57 23             	mov	x, 35
  4436  3C7E  7C 2D65           	call	_Timer16_WriteCompareValue
  4437                          ;main.c: 88: Timer16_EnableInt();
  4438  3C81  7C 2D4F           	call	_Timer16_EnableInt
  4439                          ;main.c: 89: Timer16_Start();
  4440  3C84  7C 2D57           	call	_Timer16_Start
  4441                          ;main.c: 91: UART_Board_CPutString("Woody is a genius!");
  4442  3C87  57 00             	mov	x, <STR_1
  4443  3C89  50 3F             	mov	a, >STR_1
  4444  3C8B  7C 2EE4           	call	_UART_Board_CPutString
  4445                          ;main.c: 93: PMSFrameFlag = 0;
  4446  3C8E  62 D0 00          	mov	reg[208], 0
  4447  3C91  55 3E  00         	mov	[_PMSFrameFlag^0], 0
  4448                          ;main.c: 94: HeadFlag = 0;
  4449  3C94  55 37  00         	mov	[_HeadFlag^0], 0
  4450                          ;main.c: 95: DataPtr = 0;
  4451  3C97  55 34  00         	mov	[_DataPtr^0], 0
  4452                          ;main.c: 97: SAR10_SetClk((0x0A));
  4453  3C9A  50 0A             	mov	a, 10
  4454  3C9C  7C 2D1E           	call	_SAR10_SetClk
  4455                          ;main.c: 98: SAR10_SetRunMode((0x00));
  4456  3C9F  50 00             	mov	a, 0
  4457  3CA1  7C 2D36           	call	_SAR10_SetRunMode
  4458                          ;main.c: 99: SAR10_SetADCChannel((0x60));
  4459  3CA4  50 60             	mov	a, 96
  4460  3CA6  7C 2CD6           	call	_SAR10_SetADCChannel
  4461                          ;main.c: 100: SAR10_DisableInt();
  4462  3CA9  7C 2C94           	call	_SAR10_DisableInt
  4463                          ;main.c: 101: SAR10_Start();
  4464  3CAC  7C 2C98           	call	_SAR10_Start
  4465                          ;main.c: 103: Si7020Init();
  4466  3CAF  7C 30BD           	call	_Si7020Init
  4467                          ;main.c: 105: LCD_Init();
  4468  3CB2  7C 309E           	call	_LCD_Init
  4469                          ;main.c: 107: RES_WDT = 0;
  4470  3CB5  62 E3 00          	mov	reg[227], 0
  4471                          ;main.c: 108: while(1)
  4472                          ;			CUR_PP=0 XIO=0 
  4473  3CB8                    l129:
  4474                          ;main.c: 109: {
  4475                          ;main.c: 110: if (!RecTimeoutTimer)
  4476  3CB8  51 44             	mov	a, [_RecTimeoutTimer^0]
  4477  3CBA  B00A              	jnz	l131
  4478                          ;main.c: 111: {
  4479                          ;main.c: 112: PMSFrameFlag = 0;
  4480  3CBC  55 3E  00         	mov	[_PMSFrameFlag^0], 0
  4481                          ;main.c: 113: HeadFlag = 0;
  4482  3CBF  55 37  00         	mov	[_HeadFlag^0], 0
  4483                          ;main.c: 114: DataPtr = 0;
  4484  3CC2  55 34  00         	mov	[_DataPtr^0], 0
  4485                          ;			CUR_PP=0 XIO=0 
  4486  3CC5                    l131:
  4487                          ;main.c: 115: }
  4488                          ;main.c: 117: if (PMSFrameFlag)
  4489  3CC5  51 3E             	mov	a, [_PMSFrameFlag^0]
  4490  3CC7  A03A              	jz	l132
  4491                          ;main.c: 118: {
  4492                          ;main.c: 119: PMSFrameFlag = 0;
  4493  3CC9  55 3E  00         	mov	[_PMSFrameFlag^0], 0
  4494                          ;main.c: 120: if (FrameCheck())
  4495  3CCC  71 80             	or	f, 0x80	;select multiple RAM page mode
  4496  3CCE  7C 3051           	call	_FrameCheck
  4497  3CD1  78                	dec	a
  4498  3CD2  C026              	jc	l133
  4499                          ;main.c: 121: {
  4500                          ;main.c: 122: data_pm2_5 = MyPMSUnion.MyPMFrame.PM2_5_US;
  4501  3CD4  5F 31  06         	mov	[_data_pm2_5^0], [(_MyPMSUnion+6)^0]
  4502  3CD7  5F 32  07         	mov	[(_data_pm2_5+1)^0], [(_MyPMSUnion+7)^0]
  4503                          ;main.c: 123: data_pm1_0 = MyPMSUnion.MyPMFrame.PM1_0_US;
  4504  3CDA  5F 2F  04         	mov	[_data_pm1_0^0], [(_MyPMSUnion+4)^0]
  4505  3CDD  5F 30  05         	mov	[(_data_pm1_0+1)^0], [(_MyPMSUnion+5)^0]
  4506                          ;main.c: 124: UART_Board_CPutString("PM2.5:");
  4507  3CE0  57 37             	mov	x, <STR_2
  4508  3CE2  50 3F             	mov	a, >STR_2
  4509  3CE4  71 80             	or	f, 0x80	;select multiple RAM page mode
  4510  3CE6  7C 2EE4           	call	_UART_Board_CPutString
  4511                          ;main.c: 125: UART_Board_PutSHexInt(data_pm2_5);
  4512  3CE9  62 D0 00          	mov	reg[208], 0
  4513  3CEC  51 32             	mov	a, [(_data_pm2_5^0+1)]
  4514  3CEE  58 31             	mov	x, [_data_pm2_5^0]
  4515  3CF0  7C 2E3C           	call	_UART_Board_PutSHexInt
  4516                          ;main.c: 126: UART_Board_PutCRLF();
  4517  3CF3  7C 2EF6           	call	_UART_Board_PutCRLF
  4518                          ;main.c: 128: }
  4519  3CF6  7D 3D02           	jmp	l132
  4520                          ;			CUR_PP=0 XIO=0 
  4521  3CF9                    l133:
  4522                          ;main.c: 129: else
  4523                          ;main.c: 130: {
  4524                          ;main.c: 131: UART_Board_CPutString("Checksum fail");
  4525  3CF9  57 21             	mov	x, <STR_3
  4526  3CFB  50 3F             	mov	a, >STR_3
  4527  3CFD  71 80             	or	f, 0x80	;select multiple RAM page mode
  4528  3CFF  7C 2EE4           	call	_UART_Board_CPutString
  4529                          ;			XIO=0 PG=2 
  4530                          ;			XIO=0 
  4531  3D02                    l132:
  4532                          ;main.c: 132: }
  4533                          ;main.c: 133: }
  4534                          ;main.c: 135: if (!one_sec_timer)
  4535  3D02  62 D0 00          	mov	reg[208], 0
  4536  3D05  51 5F             	mov	a, [_one_sec_timer^0]
  4537  3D07  B04A              	jnz	l135
  4538                          ;main.c: 136: {
  4539                          ;main.c: 137: one_sec_timer = 8;
  4540  3D09  55 5F  08         	mov	[_one_sec_timer^0], 8
  4541                          ;main.c: 150: MUX_CR2 |= 0X02;
  4542  3D0C  71 10             	or	f, 0x10	; select config register space
  4543  3D0E  43 DA 02          	or	reg[0xDA], 2
  4544                          ;main.c: 151: SAR10_Trigger();
  4545  3D11  71 80             	or	f, 0x80	;select multiple RAM page mode
  4546  3D13  70 CF             	and	f, 0xCF	;select user reg space
  4547  3D15  7C 2CA8           	call	_SAR10_Trigger
  4548                          ;main.c: 152: while(SAR10_fIsDataAvailable()==0);
  4549                          ;			XIO=0 PG=2 
  4550  3D18                    l136:
  4551  3D18  7C 2CB0           	call	_SAR10_fIsDataAvailable
  4552  3D1B  78                	dec	a
  4553  3D1C  CFFB              	jc	l136
  4554                          ;			XIO=0 PG=2 
  4555                          ;main.c: 153: LightADCValue = SAR10_iGetData();
  4556  3D1E  7C 2CB9           	call	_SAR10_iGetData
  4557  3D21  62 D0 00          	mov	reg[208], 0
  4558  3D24  5A 2B             	mov	[_LightADCValue^0], x
  4559  3D26  53 2C             	mov	[(_LightADCValue+1)^0], a
  4560                          ;main.c: 154: MUX_CR2 &= ~0X02;
  4561  3D28  71 10             	or	f, 0x10	; select config register space
  4562  3D2A  41 DA FD          	and	reg[0xDA], 0xFD
  4563                          ;main.c: 155: UART_Board_CPutString("Light: ");
  4564  3D2D  57 2F             	mov	x, <STR_4
  4565  3D2F  50 3F             	mov	a, >STR_4
  4566  3D31  70 CF             	and	f, 0xCF	;select user reg space
  4567  3D33  7C 2EE4           	call	_UART_Board_CPutString
  4568                          ;main.c: 156: UART_Board_PutSHexInt(LightADCValue);
  4569  3D36  62 D0 00          	mov	reg[208], 0
  4570  3D39  51 2C             	mov	a, [(_LightADCValue^0+1)]
  4571  3D3B  58 2B             	mov	x, [_LightADCValue^0]
  4572  3D3D  7C 2E3C           	call	_UART_Board_PutSHexInt
  4573                          ;main.c: 157: UART_Board_PutCRLF();
  4574  3D40  7C 2EF6           	call	_UART_Board_PutCRLF
  4575                          ;main.c: 159: PWM8_BL_WritePulseWidth(LightRank(LightADCValue));
  4576  3D43  62 D0 00          	mov	reg[208], 0
  4577  3D46  51 2C             	mov	a, [(_LightADCValue^0+1)]
  4578  3D48  58 2B             	mov	x, [_LightADCValue^0]
  4579  3D4A  7C 31C4           	call	_LightRank
  4580  3D4D  71 80             	or	f, 0x80	;select multiple RAM page mode
  4581  3D4F  7C 2C5A           	call	_PWM8_BL_WritePulseWidth
  4582                          ;			XIO=0 
  4583  3D52                    l135:
  4584                          ;main.c: 161: }
  4585                          ;main.c: 164: if(!rh_sample_timer)
  4586  3D52  62 D0 00          	mov	reg[208], 0
  4587  3D55  51 62             	mov	a, [_rh_sample_timer^0]
  4588  3D57  B093              	jnz	l139
  4589                          ;main.c: 165: {
  4590                          ;main.c: 166: rh_sample_timer = 8;
  4591  3D59  55 62  08         	mov	[_rh_sample_timer^0], 8
  4592                          ;main.c: 167: if (!RHSampleStep)
  4593  3D5C  51 42             	mov	a, [_RHSampleStep^0]
  4594  3D5E  B014              	jnz	l140
  4595                          ;main.c: 168: {
  4596                          ;main.c: 169: ret = Si7020SendCommand(0xF5);
  4597  3D60  50 F5             	mov	a, 245
  4598  3D62  71 80             	or	f, 0x80	;select multiple RAM page mode
  4599  3D64  7C 36FD           	call	_Si7020SendCommand
  4600  3D67  53 63             	mov	[??_main^0], a
  4601                          ;main.c: 170: if(ret)
  4602  3D69  51 63             	mov	a, [??_main^0]
  4603  3D6B  A07F              	jz	l139
  4604                          ;main.c: 171: {
  4605                          ;main.c: 174: RHSampleStep = 1;
  4606  3D6D  55 42  01         	mov	[_RHSampleStep^0], 1
  4607                          ;main.c: 175: }
  4608                          ;main.c: 176: else
  4609                          ;main.c: 177: {
  4610                          ;			CUR_PP=0 XIO=0 
  4611                          ;main.c: 180: }
  4612                          ;main.c: 181: }
  4613  3D70  7D 3DEB           	jmp	l139
  4614                          ;			CUR_PP=0 XIO=0 
  4615  3D73                    l140:
  4616                          ;main.c: 182: else
  4617                          ;main.c: 183: {
  4618                          ;main.c: 184: Si7020Read_RH_NHM(RecBuf);
  4619  3D73  50 57             	mov	a, <(<_RecBuf)
  4620  3D75  71 80             	or	f, 0x80	;select multiple RAM page mode
  4621  3D77  7C 30CA           	call	_Si7020Read_RH_NHM
  4622                          ;main.c: 185: Si7020Data = *(unsigned int *)RecBuf;
  4623  3D7A  57 57             	mov	x, <_RecBuf
  4624  3D7C  62 D3 00          	mov	reg[211], 0
  4625  3D7F  52 00             	mov	a, [x+0]
  4626  3D81  08                	push	a
  4627  3D82  52 01             	mov	a, [x+1]
  4628  3D84  53 2E             	mov	[(_Si7020Data^0+1)], a
  4629  3D86  18                	pop	a
  4630  3D87  53 2D             	mov	[_Si7020Data^0], a
  4631                          ;main.c: 186: if (CRC8Check())
  4632  3D89  71 80             	or	f, 0x80	;select multiple RAM page mode
  4633  3D8B  7C 30E6           	call	_CRC8Check
  4634  3D8E  78                	dec	a
  4635  3D8F  C020              	jc	l144
  4636                          ;main.c: 187: {
  4637                          ;main.c: 188: UART_Board_CPutString("RH: ");
  4638  3D91  57 3E             	mov	x, <STR_5
  4639  3D93  50 3F             	mov	a, >STR_5
  4640  3D95  71 80             	or	f, 0x80	;select multiple RAM page mode
  4641  3D97  7C 2EE4           	call	_UART_Board_CPutString
  4642                          ;main.c: 191: Humidity = Si7020CalcRH(Si7020Data);
  4643  3D9A  62 D0 00          	mov	reg[208], 0
  4644  3D9D  51 2E             	mov	a, [(_Si7020Data^0+1)]
  4645  3D9F  58 2D             	mov	x, [_Si7020Data^0]
  4646  3DA1  7C 3110           	call	_Si7020CalcRH
  4647  3DA4  53 39             	mov	[_Humidity^0], a
  4648                          ;main.c: 192: UART_Board_PutSHexByte(Humidity);
  4649  3DA6  51 39             	mov	a, [_Humidity^0]
  4650  3DA8  71 80             	or	f, 0x80	;select multiple RAM page mode
  4651  3DAA  7C 2E29           	call	_UART_Board_PutSHexByte
  4652                          ;main.c: 193: UART_Board_PutCRLF();
  4653  3DAD  7C 2EF6           	call	_UART_Board_PutCRLF
  4654                          ;			XIO=0 
  4655  3DB0                    l144:
  4656                          ;main.c: 194: }
  4657                          ;main.c: 196: Si7020Read_Temp_after_RHM(RecBuf);
  4658  3DB0  50 57             	mov	a, <(<_RecBuf)
  4659  3DB2  71 80             	or	f, 0x80	;select multiple RAM page mode
  4660  3DB4  7C 31A3           	call	_Si7020Read_Temp_after_RHM
  4661                          ;main.c: 197: Si7020Data = *(unsigned int *)RecBuf;
  4662  3DB7  57 57             	mov	x, <_RecBuf
  4663  3DB9  62 D3 00          	mov	reg[211], 0
  4664  3DBC  52 00             	mov	a, [x+0]
  4665  3DBE  08                	push	a
  4666  3DBF  52 01             	mov	a, [x+1]
  4667  3DC1  53 2E             	mov	[(_Si7020Data^0+1)], a
  4668  3DC3  18                	pop	a
  4669  3DC4  53 2D             	mov	[_Si7020Data^0], a
  4670                          ;main.c: 198: UART_Board_CPutString("Temperature: ");
  4671  3DC6  57 13             	mov	x, <STR_6
  4672  3DC8  50 3F             	mov	a, >STR_6
  4673  3DCA  71 80             	or	f, 0x80	;select multiple RAM page mode
  4674  3DCC  7C 2EE4           	call	_UART_Board_CPutString
  4675                          ;main.c: 201: Temperature = Si7020CalcTemp(Si7020Data);
  4676  3DCF  62 D0 00          	mov	reg[208], 0
  4677  3DD2  51 2E             	mov	a, [(_Si7020Data^0+1)]
  4678  3DD4  58 2D             	mov	x, [_Si7020Data^0]
  4679  3DD6  7C 31EF           	call	_Si7020CalcTemp
  4680  3DD9  53 46             	mov	[_Temperature^0], a
  4681                          ;main.c: 202: UART_Board_PutSHexByte(Temperature);
  4682  3DDB  51 46             	mov	a, [_Temperature^0]
  4683  3DDD  71 80             	or	f, 0x80	;select multiple RAM page mode
  4684  3DDF  7C 2E29           	call	_UART_Board_PutSHexByte
  4685                          ;main.c: 203: UART_Board_PutCRLF();
  4686  3DE2  7C 2EF6           	call	_UART_Board_PutCRLF
  4687                          ;main.c: 204: RHSampleStep = 0;
  4688  3DE5  62 D0 00          	mov	reg[208], 0
  4689  3DE8  55 42  00         	mov	[_RHSampleStep^0], 0
  4690                          ;			CUR_PP=0 XIO=0 PG=2 
  4691                          ;			CUR_PP=0 XIO=0 
  4692  3DEB                    l139:
  4693                          ;main.c: 205: }
  4694                          ;main.c: 206: }
  4695                          ;main.c: 208: if (!LcdUpdateTimer)
  4696  3DEB  51 5D             	mov	a, [_LcdUpdateTimer^0]
  4697  3DED  B009              	jnz	l145
  4698                          ;main.c: 209: {
  4699                          ;main.c: 210: LcdUpdateTimer = 4;
  4700  3DEF  55 5D  04         	mov	[_LcdUpdateTimer^0], 4
  4701                          ;main.c: 211: LCDOuputAll();
  4702  3DF2  71 80             	or	f, 0x80	;select multiple RAM page mode
  4703  3DF4  7C 3293           	call	_LCDOuputAll
  4704                          ;			CUR_PP=0 XIO=0 
  4705  3DF7                    l145:
  4706                          ;main.c: 212: }
  4707                          ;main.c: 214: RES_WDT = 0;
  4708  3DF7  62 E3 00          	mov	reg[227], 0
  4709                          ;			CUR_PP=0 XIO=0 
  4710  3DFA  7D 3CB8           	jmp	l129
  4711  3DFD                    ___exit:	;where's that confounded watchdog?
  4712  3DFD  7D 3DFD           	jmp	___exit
  4713  3E00                    __end_of_main:
  4714                          
  4715                          	psect	ramdata0
  4716                          ; =============== function _SensorUART ends ============
  4717  005C                    _FanUpdateTimer:
  4718  005C                    	blk	1
  4719  005D                    _LcdUpdateTimer:
  4720  005D                    	blk	1
  4721  005E                    _PlasmaTimer:
  4722  005E                    	blk	1
  4723  005F                    _one_sec_timer:
  4724  005F                    	blk	1
  4725  0060                    _poly_h:
  4726  0060                    	blk	1
  4727  0061                    _poly_l:
  4728  0061                    	blk	1
  4729  0062                    _rh_sample_timer:
  4730  0062                    	blk	1
  4731                          
  4732                          	psect	romdata0
  4733                          ;initializer for _FanUpdateTimer
  4734  0065  08                	db	8
  4735                          ;initializer for _LcdUpdateTimer
  4736  0066  04                	db	4
  4737                          ;initializer for _PlasmaTimer
  4738  0067  08                	db	8
  4739                          ;initializer for _one_sec_timer
  4740  0068  08                	db	8
  4741                          ;initializer for _poly_h
  4742  0069  98                	db	152
  4743                          ;initializer for _poly_l
  4744  006A  80                	db	128
  4745                          ;initializer for _rh_sample_timer
  4746  006B  08                	db	8
  4747                          
  4748                          	psect	cdata
  4749  3E00                    _DigitSeg:
  4750  3E00  F5                	db	245
  4751  3E01  60                	db	96
  4752  3E02  B6                	db	182
  4753  3E03  F2                	db	242
  4754  3E04  63                	db	99
  4755  3E05  D3                	db	211
  4756  3E06  D7                	db	215
  4757  3E07  70                	db	112
  4758  3E08  F7                	db	247
  4759  3E09  F3                	db	243
  4760  3E0A                    _DigitSegSwap:
  4761  3E0A  5F                	db	95
  4762  3E0B  06                	db	6
  4763  3E0C  6B                	db	107
  4764  3E0D  2F                	db	47
  4765  3E0E  36                	db	54
  4766  3E0F  3D                	db	61
  4767  3E10  7D                	db	125
  4768  3E11  07                	db	7
  4769  3E12  7F                	db	127
  4770  3E13  3F                	db	63
  4771  3E14                    _RankLevel:
  4772  3E14  30                	db	48
  4773  3E15  60                	db	96
  4774  3E16  90                	db	144
  4775  3E17  C0                	db	192
  4776  3E18  F0                	db	240
  4777  3E19  20                	db	32
  4778  3E1A  50                	db	80
  4779  3E1B  80                	db	128
  4780                          
  4781                          	psect	bss0
  4782  0000                    _MyPMSUnion:
  4783  0000                    	blk	40
  4784  0028                    _DisplayNum:
  4785  0028                    	blk	3
  4786  002B                    _LightADCValue:
  4787  002B                    	blk	2
  4788  002D                    _Si7020Data:
  4789  002D                    	blk	2
  4790  002F                    _data_pm1_0:
  4791  002F                    	blk	2
  4792  0031                    _data_pm2_5:
  4793  0031                    	blk	2
  4794  0033                    _CarbonLife:
  4795  0033                    	blk	1
  4796  0034                    _DataPtr:
  4797  0034                    	blk	1
  4798  0035                    _FanFlag:
  4799  0035                    	blk	1
  4800  0036                    _FanUpdateTimeReload:
  4801  0036                    	blk	1
  4802  0037                    _HeadFlag:
  4803  0037                    	blk	1
  4804  0038                    _HeapLife:
  4805  0038                    	blk	1
  4806  0039                    _Humidity:
  4807  0039                    	blk	1
  4808  003A                    _IICTimeOutTimer:
  4809  003A                    	blk	1
  4810  003B                    _LifeFlag:
  4811  003B                    	blk	1
  4812  003C                    _LockStatus:
  4813  003C                    	blk	1
  4814  003D                    _Odor:
  4815  003D                    	blk	1
  4816  003E                    _PMSFrameFlag:
  4817  003E                    	blk	1
  4818  003F                    _PM_Flag:
  4819  003F                    	blk	1
  4820  0040                    _Plasma:
  4821  0040                    	blk	1
  4822  0041                    _PlasmaFlag:
  4823  0041                    	blk	1
  4824  0042                    _RHSampleStep:
  4825  0042                    	blk	1
  4826  0043                    _RH_T_Flag:
  4827  0043                    	blk	1
  4828  0044                    _RecTimeoutTimer:
  4829  0044                    	blk	1
  4830  0045                    _SpeedLvl:
  4831  0045                    	blk	1
  4832  0046                    _Temperature:
  4833  0046                    	blk	1
  4834  0047                    _Timer:
  4835  0047                    	blk	1
  4836  0048                    _ack:
  4837  0048                    	blk	1
  4838  0049                    _data_length:
  4839  0049                    	blk	1
  4840  004A                    _mode:
  4841  004A                    	blk	1
  4842  004B                    _DisplayBuf:
  4843  004B                    	blk	12
  4844  0057                    _RecBuf:
  4845  0057                    	blk	5
  4846                          
  4847                          	psect	strings
  4848                          ;			CUR_PP=0 XIO=0 PG=2 
  4849  3F00                    STR_1:
  4850  3F00  57                	db	87	;'W'
  4851  3F01  6F                	db	111	;'o'
  4852  3F02  6F                	db	111	;'o'
  4853  3F03  64                	db	100	;'d'
  4854  3F04  79                	db	121	;'y'
  4855  3F05  20                	db	32
  4856  3F06  69                	db	105	;'i'
  4857  3F07  73                	db	115	;'s'
  4858  3F08  20                	db	32
  4859  3F09  61                	db	97	;'a'
  4860  3F0A  20                	db	32
  4861  3F0B  67                	db	103	;'g'
  4862  3F0C  65                	db	101	;'e'
  4863  3F0D  6E                	db	110	;'n'
  4864  3F0E  69                	db	105	;'i'
  4865  3F0F  75                	db	117	;'u'
  4866  3F10  73                	db	115	;'s'
  4867  3F11  21                	db	33	;'!'
  4868  3F12  00                	db	0
  4869                          ;			CUR_PP=0 XIO=0 PG=2 
  4870  3F13                    STR_6:
  4871  3F13  54                	db	84	;'T'
  4872  3F14  65                	db	101	;'e'
  4873  3F15  6D                	db	109	;'m'
  4874  3F16  70                	db	112	;'p'
  4875  3F17  65                	db	101	;'e'
  4876  3F18  72                	db	114	;'r'
  4877  3F19  61                	db	97	;'a'
  4878  3F1A  74                	db	116	;'t'
  4879  3F1B  75                	db	117	;'u'
  4880  3F1C  72                	db	114	;'r'
  4881  3F1D  65                	db	101	;'e'
  4882  3F1E  3A                	db	58	;':'
  4883  3F1F  20                	db	32
  4884  3F20  00                	db	0
  4885                          ;			CUR_PP=0 XIO=0 PG=2 
  4886  3F21                    STR_3:
  4887  3F21  43                	db	67	;'C'
  4888  3F22  68                	db	104	;'h'
  4889  3F23  65                	db	101	;'e'
  4890  3F24  63                	db	99	;'c'
  4891  3F25  6B                	db	107	;'k'
  4892  3F26  73                	db	115	;'s'
  4893  3F27  75                	db	117	;'u'
  4894  3F28  6D                	db	109	;'m'
  4895  3F29  20                	db	32
  4896  3F2A  66                	db	102	;'f'
  4897  3F2B  61                	db	97	;'a'
  4898  3F2C  69                	db	105	;'i'
  4899  3F2D  6C                	db	108	;'l'
  4900  3F2E  00                	db	0
  4901                          ;			CUR_PP=0 XIO=0 PG=2 
  4902  3F2F                    STR_4:
  4903  3F2F  4C                	db	76	;'L'
  4904  3F30  69                	db	105	;'i'
  4905  3F31  67                	db	103	;'g'
  4906  3F32  68                	db	104	;'h'
  4907  3F33  74                	db	116	;'t'
  4908  3F34  3A                	db	58	;':'
  4909  3F35  20                	db	32
  4910  3F36  00                	db	0
  4911                          ;			CUR_PP=0 XIO=0 PG=2 
  4912  3F37                    STR_2:
  4913  3F37  50                	db	80	;'P'
  4914  3F38  4D                	db	77	;'M'
  4915  3F39  32                	db	50	;'2'
  4916  3F3A  2E                	db	46	;'.'
  4917  3F3B  35                	db	53	;'5'
  4918  3F3C  3A                	db	58	;':'
  4919  3F3D  00                	db	0
  4920                          ;			CUR_PP=0 XIO=0 PG=2 
  4921  3F3E                    STR_5:
  4922  3F3E  52                	db	82	;'R'
  4923  3F3F  48                	db	72	;'H'
  4924  3F40  3A                	db	58	;':'
  4925  3F41  20                	db	32
  4926  3F42  00                	db	0


HI-TECH Software Macro Assembler (PSoC MCU) V9.61
Symbol Table                                                                                               Fri Jun 12 15:43:21 2015

                  DisplayPMxx@index 006A                      SendByte@BitCnt 006E                     DisplayPMxx@temp 0068  
                      _ChangeToRead 3B3C                         ??_LightRank 0065                 _UART_Board_SendData 2DDF  
                  ___awdiv@dividend 006D                                   l2 3B84                                   l6 3B66  
                                 l7 3B77                         _PlasmaTimer 005E                          delay_us@us 0070  
                          _ShowLife 369C                            _SpeedLvl 0045                                  l21 3826  
                                l14 377F                                  l30 3488                                  l24 3853  
                                l25 3831                                  l17 37AA                                  l33 349B  
                                l26 3834                                  l18 378A                                  l42 3564  
                                l19 378D                                  l43 35DF                                  l52 36A9  
                                l60 3672                                  l44 35BC                                  l53 36C3  
                                l61 3675                                  l45 35E4                                  l54 36C6  
                                l46 35D9                                  l70 32E9                                  l71 3300  
                                l63 3295                                  l56 3611                                  l48 35EB  
                                l80 3352                                  l72 330B                                  l57 3647  
                                l49 3603                                  l81 3376                                  l73 330E  
                                l58 363C                                  l90 339A                                  l74 331C  
                                l66 32B7                                  l91 33E6                                  l83 336B  
                                l75 333A                                  l67 32C3                                  l92 33AD  
                                l76 332D                                  l68 32D7                                  l85 3374  
                                l69 32E1                                  l94 33C0                                  l78 3347  
                                l87 3380                                  l79 334A                                  l96 33D3  
                                l88 3387                                  l98 33E3                          ??_SendByte 006D  
              __end_of_ChangeToRead 3B4D                            _Stop_I2c 3A7B                          _Timer16ISR 3B93  
                         l500002324 34C9                  __end_of_Timer16ISR 3BC3                          ??_ShowLife 0066  
                               l100 33F4                                 l101 342C                                 l102 3402  
                               l120 3BC2                                 l104 3410                                 l201 3AC7  
                               l114 3B9E                                 l106 341E                                 l122 31CE  
                               l115 3BA4                                 l123 31EC                                 l131 3CC5  
                               l116 3BAA                                 l204 3ADE                                 l212 39E8  
                               l108 3429                                 l140 3D73                                 l132 3D02  
                               l117 3BB0                                 l205 3AE1                                 l133 3CF9  
                               l150 3BE8                                 l118 3BB6                                 l206 3B2E  
                               l214 3992                                 l151 3BF3                                 l119 3BBC  
                               l207 3B31                                 l215 3995                                 l135 3D52  
                               l152 3C05                                 l144 3DB0                                 l136 3D18  
                               l153 3C40                                 l217 3A60                                 l209 39BD  
                               l161 3067                                 l145 3DF7                                 l129 3CB8  
                               l154 3C18                                 l218 3A73                                 l242 373F  
                               l170 31C3                                 l162 309B                                 l155 3C1A  
                               l139 3DEB                                 l260 3A41                                 l149 3C06  
                               l261 3A16                                 l262 3A11                                 l270 37F7  
                               l238 3722                                 l182 34AF                                 l174 3290  
                               l190 30F9                                 l158 305C                                 l271 37F1  
                               l239 3728                                 l191 30FE                                 l167 30CF  
                               l248 386E                                 l280 37C1                                 l336 34E3  
                               l176 3196                                 l168 30E5                                 l257 352B  
                               l337 34F8                                 l185 34CD                                 l177 3187  
                               l193 310D                                 l266 3A1B                                 l530 3928  
                               l290 390E                                 l450 388B                                 l258 3538  
                               l267 3A36                                 l531 3938                                 l451 389D  
                               l275 37FC                                 l179 31A0                                 l532 397B  
                               l452 38E0                                 l276 380E                                 l284 37C8  
                               l188 30E6                                 l533 3952                                 l453 38B5  
                               l269 3818                                 l285 37D7                                 l534 3948  
                               l454 38B0                                 l278 37DE                                 l279 37C4  
                               l529 3987                                 l289 38FB                                 l449 38F0  
                               l538 395B                                 l458 38BA                                 l539 396D  
                               l459 38D5                                 u213 355C                                 u223 338F  
                               u233 33A2                                 u243 33B5                                 u324 3236  
                               u253 33C8                                 u334 325A                                 u423 390A  
                               u263 33DB                                 u344 314B                                 u353 3AD0  
                               u433 37D0                                 u354 3ACF                                 u363 3759  
                  SendBit_1621@data 006B                       _one_sec_timer 005F                         IRcvBytes@no 0067  
                ??_SendDataBit_1621 006A                                 _ack 0048                                 _abs 385A  
                       _data_length 0049                          _SensorUART 3BC3                        _Si7020CalcRH 3110  
                         _Start_I2c 3A9D                   __end_of_Start_I2c 3AC2                  __end_of_SensorUART 3C41  
                   ___lbmod@divisor 0069                        DisplayPMxx@k 006C                     ___lbmod@counter 006C  
                     SendBit_1621@i 006C         ??_Si7020Read_Temp_after_RHM 0065           __end_of_Si7020Read_RH_NHM 30E6  
                          _delay_us 3B5C                __end_of_Si7020CalcRH 31A3                     __end_of_Ack_I2c 39B4  
                              STR_1 3F00                                STR_2 3F37                                STR_3 3F21  
                              STR_4 3F2F                                STR_5 3F3E                                STR_6 3F13  
                  ___awdiv@quotient 006F                   WriteAll_1621@addr 0068                       ??_LCDOuputAll 0065  
                      IRcvBytes@sla 0069                                _Odor 003D                 ??_Si7020SendCommand 0067  
                      ___awdiv@sign 0071                                abs@a 006B                          ??_delay_us 0070  
                              _main 3C41                                _mode 004A                   ___lmul@multiplier 0070  
                  __end_of_LCD_Init 30BD                     _LeftRotate$3395 0066               _UART_Board_PutSHexInt 2E3C  
                 SendDataBit_1621@i 006C             ___end_of_c_program_code 3C41                    ShowHumiTemp@temp 0067  
                  ___lbmod@dividend 006A                     __end_of_RcvByte 39FC                     __end_of_SendCmd 36FD  
                       _Temperature 0046                       LightRank@duty 0068                        ___awmod@sign 006F  
                      _HT1621B_Init 3457           _Si7020Read_Temp_after_RHM 31A3                      ??_ShowHumiTemp 0066  
                    _FanUpdateTimer 005C                    ___lbdiv@dividend 006A                             ?___lmul 0070  
                        _Si7020Data 002D                             ?___wmul 0070                            ??___lmul 0078  
                        _Si7020Init 30BD                               ??_abs 006B                     __end_of___awdiv 38F1  
                   __end_of___lbdiv 37E1                            ??___wmul 0072                     __end_of___awmod 3988  
                   __end_of___lbmod 3915                __end_of_HT1621B_Init 346A                  __end_of_Si7020Init 30CA  
                      ??_SensorUART 007C                   _Timer16_EnableInt 2D4F                     __end_of___lwdiv 3A46  
                   __end_of___lwmod 381D                               IDX_PP 00D3                        ShowLife@life 0066  
                             CUR_PP 00D0                        ShowLife@temp 0068                      ___wmul@product 0074  
                         _CRC8Check 30E6                       _SAR10_Trigger 2CA8                   __end_of_CRC8Check 3110  
                      ISendByte@sla 0069                     ___lwdiv@divisor 006D                    _SAR10_SetRunMode 2D36  
                   ___lwdiv@counter 0073                    Si7020CalcRH@data 0065                        _RHSampleStep 0042  
                  Si7020CalcRH@temp 0067                      ?_WriteAll_1621 0066                      SendCmd@command 0065  
                      _DigitSegSwap 3E0A                               _Timer 0047                    _UART_Board_Start 2DD1  
                   ??_WriteAll_1621 0067             _UART_Sensor_bReadRxData 2F35                 _PWM8_BL_WritePeriod 2C57  
   Si7020Read_Temp_after_RHM@buffer 0065               _UART_Board_CPutString 2EE4                             _Ack_I2c 3988  
                           _PM_Flag 003F                       _LightADCValue 002B           __end_of_Si7020SendCommand 3706  
            _UART_Board_bReadRxData 2DE5                    ___lbdiv@quotient 006B                             _FanFlag 0035  
                         ??_Ack_I2c 006D                             _DataPtr 0034                         _DisplayPMxx 354D  
                          intlevel2 0003                Si7020Read_RH_NHM@ret 0066              _UART_Board_PutSHexByte 2E29  
                  __end_of_Init_IIC 3457                      _Si7020CalcTemp 31EF                   ShowHumiTemp@index 0068  
               __end_of_DisplayPMxx 3604                   ShowHumiTemp@value 0066                         RcvByte@retc 006D  
                 ___wmul@multiplier 0072                        ??_Si7020Init 0065             _PWM8_BL_WritePulseWidth 2C5A  
                           _RcvByte 39B4                             _SendCmd 36DC              _SAR10_fIsDataAvailable 2CB0  
                        _ChangeToOD 3B4D                    __end_of_SendByte 3B3C                          _CarbonLife 0033  
                    LightRank@light 0065                    SensorUART@rxdata 007C                    ??_Si7020CalcTemp 0065  
         _Timer16_WriteCompareValue 2D65                  __end_of_ChangeToOD 3B5C        Si7020Read_Temp_after_RHM@ret 0066  
                      _ShowHumiTemp 3604                     ___awdiv@divisor 006B                  _UART_Board_PutCRLF 2EF6  
                         ??_RcvByte 006D                           ??_SendCmd 0065                     ___awdiv@counter 0072  
                        LightRank@i 0067                   _Si7020Read_RH_NHM 30CA                    __end_of_ShowLife 36DC  
                        _data_pm1_0 002F                          _data_pm2_5 0031                             ___awdiv 3873  
                           ___lbdiv 37B1                             ___awmod 3915                             ___lbmod 38F1  
                        IRcvBytes@i 006A                     SendBit_1621@cnt 006A                          IRcvBytes@s 0068  
                          ?___awdiv 006B                            ?___awmod 006B                             ___lwdiv 39FC  
               _UART_Sensor_IntCntl 2F4E                             ___lwmod 37E1            __end_of_SendDataBit_1621 385A  
              __end_of_ShowHumiTemp 369C                            ?___lwdiv 006D                            ?___lwmod 006D  
                         ??___awdiv 006D                           ??___lbdiv 0069                           ??___awmod 006D  
                         ??___lbmod 0069                    __end_of_Stop_I2c 3A9D             Si7020Read_RH_NHM@buffer 0065  
                         ??___lwdiv 006F                           ??___lwmod 006F                              ??_main 0063  
                        ISendByte@c 0068                      _LcdUpdateTimer 005D                    WriteAll_1621@cnt 0066  
                 Si7020Init@my_data 0065                       _Timer16_Start 2D57   __end_of_Si7020Read_Temp_after_RHM 31C4  
                     ShowLife@index 0067                    ___lwmod@dividend 006F                      ??_SendBit_1621 006A  
            __end_of_Si7020CalcTemp 3293                      _SAR10_iGetData 2CB9                         ___lbmod@rem 006B  
                      _SAR10_SetClk 2D1E                      __end_of___lmul 3521                    __end_of_delay_us 3B7A  
                   ___lbdiv@counter 006C                    ___lwdiv@dividend 006F                      __end_of___wmul 354D  
                         _RH_T_Flag 0043                             main@ret 0063                     BoardUART@rxdata 007C  
                      __end_of_main 3E00                           _IRcvBytes 3706                   __end_of_IRcvBytes 3776  
                         _ISendByte 3A46                   __end_of_ISendByte 3A7B                       _PWM8_BL_Start 2C4F  
               _Timer16_WritePeriod 2D5F                          ?_IRcvBytes 0067                            _LCD_Init 309E  
                        _DisplayBuf 004B                          _DisplayNum 0028                     _rh_sample_timer 0062  
                        _FrameCheck 3051                  __end_of_FrameCheck 309E                              _RecBuf 0057  
                            _Plasma 0040            _UART_Board_bReadTxStatus 2DE2                              ___exit 3DFD  
                       ??_IRcvBytes 0068                              ___lmul 34D9                              ___wmul 3521  
                         _BoardUART 3B7A                       RcvByte@BitCnt 006E                         ??_ISendByte 0068  
               _FanUpdateTimeReload 0036                   __end_of_BoardUART 3B93                          _MyPMSUnion 0000  
                        _LeftRotate 34AD                         _LCDOuputAll 3293                  __end_of_LeftRotate 34D9  
                  ___lwdiv@quotient 0071                   _Si7020SendCommand 36FD                     ___lwmod@divisor 006D  
              Si7020SendCommand@cmd 0067                  FrameCheck@checksum 0065                 __end_of_LCDOuputAll 3446  
                   ___lwmod@counter 0071                       ??_DisplayPMxx 0066                              _poly_h 0060  
                            _poly_l 0061                         _SAR10_Start 2C98                         __end_of_abs 3873  
               ___lmul@multiplicand 0074                  Si7020CalcTemp@data 0065                SendDataBit_1621@data 006B  
                      _SendBit_1621 3776                  Si7020CalcTemp@temp 0067                       _WriteAll_1621 346A  
                    ??_Si7020CalcRH 0065                         ??_BoardUART 007C                            _HeadFlag 0037  
               ___wmul@multiplicand 0070                __end_of_SendBit_1621 37B1                          _LockStatus 003C  
                          _HeapLife 0038                      WriteAll_1621@i 0069                      WriteAll_1621@p 0067  
                          _DigitSeg 3E00                   _UART_Sensor_Start 2F21                      ___lmul@product 0078  
                  _SendDataBit_1621 381D                           SendByte@c 006D                     _RecTimeoutTimer 0044  
               ??_Si7020Read_RH_NHM 0065                     _IICTimeOutTimer 003A                        ??_FrameCheck 0065  
                         _LightRank 31C4                 SendDataBit_1621@cnt 006A                   __end_of_LightRank 31EF  
                  _SAR10_DisableInt 2C94                            _LifeFlag 003B               __end_of_WriteAll_1621 34AD  
                          _Init_IIC 3446                           _RankLevel 3E14                 _SAR10_SetADCChannel 2CD6  
                      _PMSFrameFlag 003E                    ___awmod@dividend 006D                        ??_LeftRotate 0065  
                          _Humidity 0039           ___start_of_c_program_code 3051                     ___awmod@divisor 006B  
                          _SendByte 3AC2                     ___awmod@counter 0070                          _PlasmaFlag 0041  
HI-TECH Software Macro Assembler (PSoC MCU) V9.61
                                                                                                           Fri Jun 12 09:25:10 2015
     1                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     2                          ;;;
     3                          ;;;  M8C.INC -- Microcontroller Device System Declarations
     4                          ;;;
     5                          ;;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
     6                          ;;;
     7                          ;;;  This file provides address constants, bit field masks and a set of macro
     8                          ;;;  facilities for the Cypress Semiconductor CY8C22045 Microcontroller devices.
     9                          ;;;
    10                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    11                          
    12                          ;;=============================================================================
    13                          ;; Definition of abbreviations used in the descriptions below
    14                          ;;  (RW)   The register or bit supports reads and writes
    15                          ;;  (W)    The register or bit is write-only
    16                          ;;  (R)    The register or bit is read-only
    17                          ;;  (#)    Access to the register is bit specific (see the family datasheet)
    18                          ;;  (RC)   The register or bit can be read, but writing a 0 will clear it,
    19                          ;;         writing a 1 will have no effect.
    20                          ;;=============================================================================
    21                          
    22                          ;;=============================================================================
    23                          ;;      System Registers
    24                          ;;=============================================================================
    25                          
    26                          ;----------------------------
    27                          ;  Flag Register Bit Fields
    28                          ;----------------------------
    29  00C0                    FLAG_PGMODE_MASK:  equ 0C0h     ; Paging control for > 256 bytes of RAM
    30  0000                    FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
    31  0040                    FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
    32  0080                    FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
    33  00C0                    FLAG_PGMODE_3:     equ 0C0h       ; Direct to CUR_PP page, indexed to STK_PP page
    34  0000                    FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
    35  0040                    FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
    36  0080                    FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
    37  00C0                    FLAG_PGMODE_11b:   equ 0C0h       ; Same as PGMODE_3
    38  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    39  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    40  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    41  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    42  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    43                          
    44                          
    45                          ;;=============================================================================
    46                          ;;      Register Space, Bank 0
    47                          ;;=============================================================================
    48                          
    49                          ;------------------------------------------------
    50                          ;  Port Registers
    51                          ;  Note: Also see this address range in Bank 1.
    52                          ;------------------------------------------------
    53                          ; Port 0
    54  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    55  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    56  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    57  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    58                          ; Port 1
    59  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    60  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    61  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    62  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    63                          ; Port 2
    64  0008                    PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
    65  0009                    PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
    66  000A                    PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
    67  000B                    PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
    68                          ; Port 3
    69  000C                    PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
    70  000D                    PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
    71  000E                    PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
    72  000F                    PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
    73                          ; Port 4
    74  0010                    PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
    75  0011                    PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
    76  0012                    PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
    77  0013                    PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
    78                          
    79                          ;------------------------------------------------
    80                          ;  Digital PSoC(tm) block Registers
    81                          ;  Note: Also see this address range in Bank 1.
    82                          ;------------------------------------------------
    83                          ; Digital PSoC block 00, Basic Type C
    84  0020                    DBC00DR0:     equ 20h          ; data register 0                          (#)
    85  0021                    DBC00DR1:     equ 21h          ; data register 1                          (W)
    86  0022                    DBC00DR2:     equ 22h          ; data register 2                          (RW)
    87  0023                    DBC00CR0:     equ 23h          ; control & status register 0              (#)
    88                          
    89                          ; Digital PSoC block 01, Basic Type C
    90  0024                    DBC01DR0:     equ 24h          ; data register 0                          (#)
    91  0025                    DBC01DR1:     equ 25h          ; data register 1                          (W)
    92  0026                    DBC01DR2:     equ 26h          ; data register 2                          (RW)
    93  0027                    DBC01CR0:     equ 27h          ; control & status register 0              (#)
    94                          
    95                          ; Digital PSoC block 02, Communications Type C
    96  0028                    DCC02DR0:     equ 28h          ; data register 0                          (#)
    97  0029                    DCC02DR1:     equ 29h          ; data register 1                          (W)
    98  002A                    DCC02DR2:     equ 2Ah          ; data register 2                          (RW)
    99  002B                    DCC02CR0:     equ 2Bh          ; control & status register 0              (#)
   100                          
   101                          ; Digital PSoC block 03, Communications Type C
   102  002C                    DCC03DR0:     equ 2Ch          ; data register 0                          (#)
   103  002D                    DCC03DR1:     equ 2Dh          ; data register 1                          (W)
   104  002E                    DCC03DR2:     equ 2Eh          ; data register 2                          (RW)
   105  002F                    DCC03CR0:     equ 2Fh          ; control & status register 0              (#)
   106                          
   107                          ; Digital PSoC block 10, Basic Type C
   108  0030                    DBC10DR0:     equ 30h          ; data register 0                          (#)
   109  0031                    DBC10DR1:     equ 31h          ; data register 1                          (W)
   110  0032                    DBC10DR2:     equ 32h          ; data register 2                          (RW)
   111  0033                    DBC10CR0:     equ 33h          ; control & status register 0              (#)
   112                          
   113                          ; Digital PSoC block 11, Basic Type C
   114  0034                    DBC11DR0:     equ 34h          ; data register 0                          (#)
   115  0035                    DBC11DR1:     equ 35h          ; data register 1                          (W)
   116  0036                    DBC11DR2:     equ 36h          ; data register 2                          (RW)
   117  0037                    DBC11CR0:     equ 37h          ; control & status register 0              (#)
   118                          
   119                          ; Digital PSoC block 12, Communications Type C
   120  0038                    DCC12DR0:     equ 38h          ; data register 0                          (#)
   121  0039                    DCC12DR1:     equ 39h          ; data register 1                          (W)
   122  003A                    DCC12DR2:     equ 3Ah          ; data register 2                          (RW)
   123  003B                    DCC12CR0:     equ 3Bh          ; control & status register 0              (#)
   124                          
   125                          ; Digital PSoC block 13, Communications Type C
   126  003C                    DCC13DR0:     equ 3Ch          ; data register 0                          (#)
   127  003D                    DCC13DR1:     equ 3Dh          ; data register 1                          (W)
   128  003E                    DCC13DR2:     equ 3Eh          ; data register 2                          (RW)
   129  003F                    DCC13CR0:     equ 3Fh          ; control & status register 0              (#)
   130                          
   131                          ;-------------------------------------
   132                          ;  Analog Control Registers
   133                          ;-------------------------------------
   134  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
   135  00C0                    AMX_IN_ACI3:          equ C0h    ; MASK: column 3 input mux
   136  0030                    AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
   137  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
   138  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
   139                          
   140  0061                    AMUX_CFG:      equ 61h          ; Analog MUX Configuration
   141  0030                    AMUX_CFG_INTCAP:       equ 30h    ;
   142  000E                    AMUX_CFG_MUXCLK:  	  equ 0Eh	 ;
   143  0001                    AMUX_CFG_EN:		  	  equ 01h	 ;
   144                          
   145                          ; old declarations DO NOT USE
   146  0061                    AMUXCFG:      equ 61h          ; Analog MUX Configuration
   147  0030                    AMUXCFG_INTCAP:       equ 30h    ;
   148  000E                    AMUXCFG_MUXCLK:  	  equ 0Eh	 ;
   149  0001                    AMUXCFG_EN:		  	  equ 01h	 ;
   150                          
   151  0062                    PWM_CR:       equ 62h          ; Pulse-Width Modulator Control
   152  0038                    PWM_CR_HIGH:          equ 38h    ; MASK: PWM high time
   153  0006                    PWM_CR_LOW:           equ 06h	 ; MASK: PWM low time
   154  0001                    PWM_CR_EN:            equ 01h	 ; MASK: Enable/Disable PWM function
   155                          
   156  0063                    ARF_CR:       equ 63h          ; Analog Reference Control
   157                          
   158  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus Register           (#)
   159  0080                    CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
   160  0040                    CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
   161  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
   162  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
   163  0008                    CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
   164  0004                    CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
   165  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
   166  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   167                          
   168  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   169  0020                    CMP_CR1_CLDIS1:       equ 20h    ; MASK: Column 1 comparator output latch
   170  0010                    CMP_CR1_CLDIS0:	      equ 10h    ; MASK: Column 0 comparator output latch
   171                          
   172  0068                    ADC0_CR:      equ 68h          ; Analog Column 0 Configuration
   173  0080                    ADC0_CR_CMPST:        equ 80h    ;
   174  0040                    ADC0_CR_LOREN:        equ 40h    ;
   175  0020                    ADC0_CR_SHEN:         equ 20h    ;
   176  0008                    ADC0_CR_CBSRC:        equ 08h    ;
   177  0004                    ADC0_CR_ADCM:         equ 04h    ;
   178  0001                    ADC0_CR_EN:	          equ 01h    ;
   179                          
   180  0069                    ADC1_CR:      equ 69h          ; Analog Column 1 Configuration
   181  0080                    ADC1_CR_CMPST:        equ 80h    ;
   182  0040                    ADC1_CR_LOREN:        equ 40h    ;
   183  0020                    ADC1_CR_SHEN:         equ 20h    ;
   184  0008                    ADC1_CR_CBSRC:        equ 08h    ;
   185  0004                    ADC1_CR_ADCM:         equ 04h    ;
   186  0001                    ADC1_CR_EN:	          equ 01h    ;
   187                          
   188                          ; Continuous Time PSoC block Type E Row 0 Col 0
   189  0072                    ACE00CR1:     equ 72h          ; Control register 1                       (RW)
   190  0073                    ACE00CR2:     equ 73h          ; Control register 2                       (RW)
   191                          
   192                          ; Continuous Time PSoC block Type E Row 0 Col 1
   193  0076                    ACE01CR1:     equ 76h          ; Control register 1                       (RW)
   194  0077                    ACE01CR2:     equ 77h          ; Control register 2                       (RW)
   195                          
   196                          ; Switched Cap PSoC blockType E Row 1 Col 0
   197  0080                    ASE10CR0:     equ 80h          ; Control register 0                       (RW)
   198                          
   199                          ; Switched Cap PSoC blockType E Row 1 Col 1
   200  0084                    ASE11CR0:     equ 84h          ; Control register 0                       (RW)
   201+                         
   202+                         ;-----------------------------------------------
   203+                         ;  Global General Purpose Data Registers
   204+                         ;-----------------------------------------------
   205+ 006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   206+ 006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   207  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   208  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   209                          
   210                          ;------------------------------------------------
   211                          ;  Row Digital Interconnects
   212                          ;
   213                          ;  Note: the following registers are mapped into
   214                          ;  both register bank 0 AND register bank 1.
   215                          ;------------------------------------------------
   216                          
   217  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   218  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   219  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   220  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   221  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   222  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   223  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   224                          
   225  00B8                    RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
   226  00B9                    RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
   227  00BA                    RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
   228  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   229  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   230  00BD                    RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
   231  00BE                    RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
   232                          
   233                          ;-----------------------------------------------
   234                          ;  Ram Page Pointers
   235                          ;-----------------------------------------------
   236  00D0                    CUR_PP:      equ 0D0h           ; Current   Page Pointer
   237  00D1                    STK_PP:      equ 0D1h           ; Stack     Page Pointer
   238  00D3                    IDX_PP:      equ 0D3h           ; Index     Page Pointer
   239  00D4                    MVR_PP:      equ 0D4h           ; MVI Read  Page Pointer
   240  00D5                    MVW_PP:      equ 0D5h           ; MVI Write Page Pointer
   241                          
   242                          ;------------------------------------------------
   243                          ;  I2C Configuration Registers
   244                          ;------------------------------------------------
   245  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   246  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   247  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   248  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   249  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   250  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   251  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   252  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   253  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   254  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   255                          
   256  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   257  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   258  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   259  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   260  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   261  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   262  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   263  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   264  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   265                          
   266  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   267                          
   268  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   269  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   270  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   271  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   272  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   273                          
   274                          ;------------------------------------------------
   275                          ;  System and Global Resource Registers
   276                          ;------------------------------------------------
   277  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   278                                                         ; Use INT_MSK0 bit field masks
   279  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   280                                                         ; Use INT_MSK1 bit field masks
   281  00DC                    INT_CLR2:     equ 0DCh          ; Interrupt Clear Register 2               (RW)
   282                                                         ; Use INT_MSK2 bit field masks
   283  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   284                                                         ; Use INT_MSK3 bit field masks
   285                          
   286  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   287  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   288  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   289                          
   290  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   291  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   292  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   293  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   294  0010                    INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
   295  0008                    INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
   296  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   297  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   298  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   299                          
   300  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   301  0080                    INT_MSK1_DCC13:            equ 80h ; MASK: enable/disable DCC13 block interrupt
   302  0040                    INT_MSK1_DCC12:            equ 40h ; MASK: enable/disable DCC12 block interrupt
   303  0020                    INT_MSK1_DBC11:            equ 20h ; MASK: enable/disable DBC11 block interrupt
   304  0010                    INT_MSK1_DBC10:            equ 10h ; MASK: enable/disable DBC10 block interrupt
   305  0008                    INT_MSK1_DCC03:            equ 08h ; MASK: enable/disable DCC03 block interrupt
   306  0004                    INT_MSK1_DCC02:            equ 04h ; MASK: enable/disable DCC02 block interrupt
   307  0002                    INT_MSK1_DBC01:            equ 02h ; MASK: enable/disable DBC01 block interrupt
   308  0001                    INT_MSK1_DBC00:            equ 01h ; MASK: enable/disable DBC00 block interrupt
   309                          
   310  00DF                    INT_MSK2:     equ DFh			; Custom block Mask Register			   (RW)
   311  0010                    INT_MSK2_SARADC:           equ 10h ; MASK: enable/disable SARADC block interrupt
   312  0020                    INT_MSK2_CSD0:             equ 20h ; MASK: enable/disable CSD0 block interrupt
   313  0040                    INT_MSK2_CSD1:             equ 40h ; MASK: enable/disable CSD1 block interrupt
   314  0080                    INT_MSK2_RTC:              equ 80h ; MASK: enable/disable RTC block interrupt
   315                          
   316  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   317  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   318                          
   319                          ;------------------------------------------------------
   320                          ;  MAC Registers
   321                          ;------------------------------------------------------
   322                          
   323  00E8                    MUL0_X:       equ 0E8h          ; Multiply Input X Register                (W)
   324  00E9                    MUL0_Y:       equ 0E9h          ; Multiply Input Y Register                (W)
   325  00EA                    MUL0_DH:      equ 0EAh          ; Multiply Result High Byte Register       (R)
   326  00EB                    MUL0_DL:      equ 0EBh          ; Multiply Result Low Byte Register        (R)
   327                          
   328  00EC                    ACC0_DR1:     equ 0ECh          ; Accumulator Data Register 1              (RW)
   329  00ED                    ACC0_DR0:     equ 0EDh          ; Accumulator Data Register 0              (RW)
   330  00EE                    ACC0_DR3:     equ 0EEh          ; Accumulator Data Register 3              (RW)
   331  00EF                    ACC0_DR2:     equ 0EFh          ; Accumulator Data Register 2              (RW)
   332                          
   333                          ; DECIMATOR Control Registers
   334  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   335  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   336                          
   337                          ;------------------------------------------------------
   338                          ;  System Status and Control Registers
   339                          ;
   340                          ;  Note: The following registers are mapped into both
   341                          ;        register bank 0 AND register bank 1.
   342                          ;------------------------------------------------------
   343  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   344                                                             ; Use FLAG_ masks defined at top of file
   345                          
   346  00FD                    DAC_D:        equ 0FDh		   ; DAC Data Register                        (RW)
   347                          
   348  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   349  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: flag, Internal Reset Status bit
   350  0010                    CPU_SCR1_SLIMO:         equ 10h	   ; MASK: Slow IMO (internal main osc) enable
   351  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   352  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   353  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   354                          
   355  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   356  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   357  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   358  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   359  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   360  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   361                          
   362                          ;------------------------------------------------------
   363                          ;  Neon Capsense Digital Control Registers
   364                          ;------------------------------------------------------
   365  0050                    CSD0_DR0_L:				equ 50h		; Capsense 0 data low 0				(RW)
   366  0054                    CSD0_DR0_H:				equ 54h		; Capsense 0 data high 0			(RW)
   367  0058                    CSD1_DR0_L:				equ 58h		; Capsense 1 data low 0				(RW)
   368  005C                    CSD1_DR0_H:				equ 5Ch		; Capsense 1 data high 0			(RW)
   369  0051                    CSD0_DR1_L:				equ 51h		; Capsense 0 data low 1				(RW)
   370  0055                    CSD0_DR1_H:				equ 55h		; Capsense 0 data high 1			(RW)
   371  0059                    CSD1_DR1_L:				equ 59h		; Capsense 1 data low 1				(RW)
   372  005D                    CSD1_DR1_H:				equ 5Dh		; Capsense 1 data high 1			(RW)
   373  0052                    CSD0_CNT_L:				equ 52h		; Capsense 0 counter low			(RW)
   374  0056                    CSD0_CNT_H:				equ 56h		; Capsense 0 counter high			(RW)
   375  005A                    CSD1_CNT_L:				equ 5Ah		; Capsense 1 counter low			(RW)
   376  005E                    CSD1_CNT_H:				equ	5Eh		; Capsense 1 counter high			(RW)
   377  0053                    CSD0_CR0:				equ 53h		; Capsense 0 control 0				(RW)
   378  005B                    CSD1_CR0:				equ 5Bh		; Capsense 1 control 0				(RW)
   379  0057                    CSD0_CR1:				equ 57h		; Capsense 0 control 1				(RW)
   380  005F                    CSD1_CR1:				equ 5Fh		; Capsense 1 control 1				(RW)
   381                          
   382                          ;------------------------------------------------------
   383                          ;  Neon Analog Registers
   384                          ;------------------------------------------------------
   385  0065                    ASY_CR:					equ 65h		; Analog Synchronization Control	(RW)
   386  006A                    ADC_DH:					equ 6Ah		; ADC data high						(RW)
   387  006B                    ADC_DL:					equ 6Bh		; ADC data low						(RW)
   388  00C8                    PWMVREF0:				equ C8h		; PWM Voltage Reference 0			(RW)
   389  00C9                    PWMVREF1:				equ C9h		; PWM Voltage Reference 1			(RW)
   390  00CB                    PWMSRC:					equ CBh		; PWM Source						(RW)
   391  00CA                    IDACMODE:				equ CAh		; IDAC Mode							(RW)
   392  00FC                    IDACR_D:				equ FCh		; Analog Mux DAC data 0				(RW)
   393  00FD                    IDACL_D:				equ FDh		; Analog Mux DAC data 1				(RW)
   394                          
   395                          ;------------------------------------------------------
   396                          ;  Neon Digital Registers
   397                          ;------------------------------------------------------
   398  00B7                    RDI0DSM:				equ B7h		; Row Digital Interconnect input select 0	(RW)
   399  00BF                    RDI1DSM:				equ BFh		; Row Digital Interconnect input select 1	(RW)
   400                          
   401                          ;------------------------------------------------------
   402                          ;  Neon Test Registers
   403                          ;------------------------------------------------------
   404  00CC                    TSCR0:					equ CCh		; Tsource 0							(RW)
   405  00CD                    TSCMPH:					equ CDh		; TSCMP high						(RW)
   406  00CE                    TSCMPL:					equ CEh		; TSCMP low							(RW)
   407  00CF                    TSCR1:					equ CFh		; Tsource 1							(RW)
   408                          
   409                          ;;=============================================================================
   410                          ;;      Register Space, Bank 1
   411                          ;;=============================================================================
   412                          
   413                          ;------------------------------------------------
   414                          ;  Port Registers
   415                          ;  Note: Also see this address range in Bank 0.
   416                          ;------------------------------------------------
   417                          ; Port 0
   418  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   419  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   420  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   421  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   422                          
   423                          ; Port 1
   424  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   425  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   426  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   427  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   428                          
   429                          ; Port 2
   430  0008                    PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
   431  0009                    PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
   432  000A                    PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
   433  000B                    PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
   434                          
   435                          ; Port 3
   436  000C                    PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
   437  000D                    PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
   438  000E                    PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
   439  000F                    PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
   440                          
   441                          ; Port 4
   442  0010                    PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
   443  0011                    PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
   444  0012                    PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
   445  0013                    PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
   446                          
   447                          ;------------------------------------------------
   448                          ;  Digital PSoC(tm) block Registers
   449                          ;  Note: Also see this address range in Bank 0.
   450                          ;------------------------------------------------
   451                          
   452                          ; Digital PSoC block 00, Basic Type C
   453  0020                    DBC00FN:      equ 20h          ; Function Register                        (RW)
   454  0021                    DBC00IN:      equ 21h          ;    Input Register                        (RW)
   455  0022                    DBC00OU:      equ 22h          ;   Output Register                        (RW)
   456  0023                    DBC00CR1:     equ 23h          ;   control & status register 1            (RW)
   457                          
   458                          ; Digital PSoC block 01, Basic Type C
   459  0024                    DBC01FN:      equ 24h          ; Function Register                        (RW)
   460  0025                    DBC01IN:      equ 25h          ;    Input Register                        (RW)
   461  0026                    DBC01OU:      equ 26h          ;   Output Register                        (RW)
   462  0027                    DBC01CR1:     equ 27h          ;   control & status register 1            (RW)
   463                          
   464                          ; Digital PSoC block 02, Communications Type C
   465  0028                    DCC02FN:      equ 28h          ; Function Register                        (RW)
   466  0029                    DCC02IN:      equ 29h          ;    Input Register                        (RW)
   467  002A                    DCC02OU:      equ 2Ah          ;   Output Register                        (RW)
   468  002B                    DBC02CR1:     equ 2Bh          ;   control & status register 1            (RW)
   469                          
   470                          ; Digital PSoC block 03, Communications Type C
   471  002C                    DCC03FN:      equ 2Ch          ; Function Register                        (RW)
   472  002D                    DCC03IN:      equ 2Dh          ;    Input Register                        (RW)
   473  002E                    DCC03OU:      equ 2Eh          ;   Output Register                        (RW)
   474  0029                    DBC03CR1:     equ 29h          ;   control & status register 1            (RW)
   475                          
   476                          ; Digital PSoC block 10, Basic Type C
   477  0030                    DBC10FN:      equ 30h          ; Function Register                        (RW)
   478  0031                    DBC10IN:      equ 31h          ;    Input Register                        (RW)
   479  0032                    DBC10OU:      equ 32h          ;   Output Register                        (RW)
   480  0033                    DBC10CR1:     equ 33h          ;   control & status register 1            (RW)
   481                          
   482                          ; Digital PSoC block 11, Basic Type C
   483  0034                    DBC11FN:      equ 34h          ; Function Register                        (RW)
   484  0035                    DBC11IN:      equ 35h          ;    Input Register                        (RW)
   485  0036                    DBC11OU:      equ 36h          ;   Output Register                        (RW)
   486  0037                    DBC11CR1:     equ 37h          ;   control & status register 1            (RW)
   487                          
   488                          ; Digital PSoC block 12, Communications Type C
   489  0038                    DCC12FN:      equ 38h          ; Function Register                        (RW)
   490  0039                    DCC12IN:      equ 39h          ;    Input Register                        (RW)
   491  003A                    DCC12OU:      equ 3Ah          ;   Output Register                        (RW)
   492  003B                    DBC12CR1:     equ 3Bh          ;   control & status register 1            (RW)
   493                          
   494                          ; Digital PSoC block 13, Communications Type C
   495  003C                    DCC13FN:      equ 3Ch          ; Function Register                        (RW)
   496  003D                    DCC13IN:      equ 3Dh          ;    Input Register                        (RW)
   497  003E                    DCC13OU:      equ 3Eh          ;   Output Register                        (RW)
   498  003F                    DBC13CR1:     equ 3Fh          ;   control & status register 1            (RW)
   499                          
   500                          ;------------------------------------------------
   501                          ;  System and Global Resource Registers
   502                          ;  Note: Also see this address range in Bank 0.
   503                          ;------------------------------------------------
   504                          
   505  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   506  00C0                    CLK_CR0_ACOLUMN_3:    equ C0h    ; MASK: Specify clock for analog cloumn
   507  0030                    CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
   508  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   509  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   510                          
   511  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   512  0018                    CLK_CR1_ACLK1:        equ 18h    ; MASK: Digital PSoC block for analog source
   513  0003                    CLK_CR1_ACLK0:        equ 03h    ; MASK: Digital PSoC block for analog source
   514                          
   515  0003                    CLK_CR1_ACLK2:        equ 03h    ; Deprecated do not use
   516                          
   517  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   518  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   519                          
   520  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   521  000F                    AMD_CR0_AMOD0:        equ 0Fh    ; MASK: Modulation source for analog column 0
   522                          
   523  0064                    CMP_GO_EN:    equ 64h          ; Comparator Bus To Global Out Enable      (RW)
   524  0080                    CMP_GO_EN_GOO5:       equ 80h    ; MASK: Selected Col 1 signal to GOO5
   525  0040                    CMP_GO_EN_GOO1:       equ 40h    ; MASK: Selected Col 1 signal to GOO1
   526  0030                    CMP_GO_EN_SEL1:       equ 30h    ; MASK: Column 1 Signal Select
   527  0008                    CMP_GO_EN_GOO4:       equ 08h    ; MASK: Selected Col 0 signal to GOO4
   528  0004                    CMP_GO_EN_GOO0:       equ 04h    ; MASK: Selected Col 0 signal to GOO0
   529  0003                    CMP_GO_EN_SEL0:       equ 03h    ; MASK: Column 0 Signal Select
   530                          
   531  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   532  000F                    AMD_CR1_AMOD1:        equ 0Fh    ; MASK: Modulation ctrl for analog column 1
   533                          
   534  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   535  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   536  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   537                          
   538  006B                    CLK_CR3:      equ 6Bh          ; Analog Clock Source Control Register 3   (RW)
   539  0040                    CLK_CR3_SYS1:         equ 40h    ; MASK: Analog Clock 1 selection
   540  0030                    CLK_CR3_DIVCLK1:      equ 30h    ; MASK: Analog Clock 1 divider
   541  0004                    CLK_CR3_SYS0:         equ 04h    ; MASK: Analog Clock 0 selection
   542  0003                    CLK_CR3_DIVCLK0:      equ 03h    ; MASK: Analog Clock 0 divider
   543                          
   544                          ;------------------------------------------------
   545                          ;  Global Digital Interconnects
   546                          ;------------------------------------------------
   547                          
   548  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   549  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   550  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   551  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   552                          
   553  00A0                    GDI_O_IN_CR:  equ 0A0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   554  00A1                    GDI_E_IN_CR:  equ 0A1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   555  00A2                    GDI_O_OU_CR:  equ 0A2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   556  00A3                    GDI_E_OU_CR:  equ 0A3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   557                          
   558  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   559  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   560                          
   561                          ;------------------------------------------------
   562                          ;  Analog Mux Bus Port Enable Bits
   563                          ;------------------------------------------------
   564  00D8                    MUX_CR0:      equ 0D8h          ; Analog Mux Port 0 Bit Enables Register
   565  00D9                    MUX_CR1:      equ 0D9h          ; Analog Mux Port 1 Bit Enables Register
   566  00DA                    MUX_CR2:      equ 0DAh          ; Analog Mux Port 2 Bit Enables Register
   567  00DB                    MUX_CR3:      equ 0DBh          ; Analog Mux Port 3 Bit Enables Register
   568  00EC                    MUX_CR4:      equ 0ECh          ; Analog Mux Port 4 Bit Enables Register
   569                          
   570                          ;------------------------------------------------
   571                          ;  Clock and System Control Registers
   572                          ;------------------------------------------------
   573                          
   574  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   575  0080                    OSC_GO_EN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   576  0040                    OSC_GO_EN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   577  0020                    OSC_GO_EN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   578  0010                    OSC_GO_EN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   579  0008                    OSC_GO_EN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   580  0004                    OSC_GO_EN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   581  0002                    OSC_GO_EN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   582  0001                    OSC_GO_EN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   583                          
   584  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   585  0003                    OSC_CR4_VC3SEL:       equ 03h    ; MASK: System VC3 Clock source
   586                          
   587  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   588                          
   589  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   590  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   591  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   592  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   593  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   594  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   595  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   596  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   597  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   598  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   599  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   600  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   601  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   602  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   603  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   604  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   605  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   606  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   607                          
   608  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   609  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   610  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   611                          
   612  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   613  0080                    OSC_CR2_PLLGAIN:      equ 80h    ; MASK: High/Low gain
   614  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   615  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   616  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   617                          
   618  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   619  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   620  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   621  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   622  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   623  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   624  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   625  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   626                          
   627  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   628  0008                    VLT_CMP_NOWRITE:      equ 08h    ; MASK: Vcc below Flash Write level
   629  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   630  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   631  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   632                          
   633  00E5                    ADC0_TR:      equ 0E5h          ; ADC Column 0 Trim Register
   634  00E6                    ADC1_TR:      equ 0E6h          ; ADC Column 1 Trim Register
   635                          
   636  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   637  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   638  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   639  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   640                          
   641  00FA                    FLS_PR1:      equ 0FAh          ; Flash Program Register 1                 (RW)
   642  0003                    FLS_PR1_BANK:         equ 03h    ; MASK: Select Active Flash Bank
   643                          
   644  00FD                    DAC_CR0:       equ 0FDh          ; Analog Mux DAC Control Register 0
   645  00DC                    DAC_CR1:       equ 0DCh          ; Analog Mux DAC Control Register 1
   646  0008                    DAC_CR_IRANGE:        equ 08h    ; MASK: Sets the DAC Range low or high
   647  0006                    DAC_CR_OSCMODE:       equ 06h    ; MASK: Defines the reset mode for AMux
   648  0001                    DAC_CR_ENABLE:        equ 01h    ; MASK: Enable/Disable DAC function
   649                          
   650                          ;------------------------------------------------
   651                          ;  I2C Control Registers
   652                          ;------------------------------------------------
   653                          
   654  00AD                    I2C_ADDR:    equ 0ADh          ; I2C Address Register (RW)
   655                          
   656                          ;------------------------------------------------------
   657                          ;  Neon Analog Registers
   658                          ;------------------------------------------------------
   659  0053                    VDAC50CR0:		equ 53h			; V DAC5 control 0				(RW)
   660  0057                    VDAC51CR0:		equ 57h			; V DAC5 control 1				(RW)
   661  00A8                    ADC_CR0:		equ A8h			; ADC control 0					(RW)
   662  00A9                    ADC_CR1:		equ A9h			; ADC control 1					(RW)
   663  00AA                    ADC_CR2:		equ AAh			; ADC control 2					(RW)
   664  00AB                    ADC_CR3TRIM:	equ ABh			; ADC control 3					(RW)
   665  00AC                    ADC_CR4:		equ ACh			; ADC control 4					(RW)
   666  00E7                    VDAC_TRIM:		equ E7h			; V DAC trim					(RW)
   667                          
   668                          ;------------------------------------------------------
   669                          ;  Neon Current Sense CMP Registers
   670                          ;------------------------------------------------------
   671  0050                    CMP0CR1:		equ 50h			; CMP0 control 1				(RW)
   672  0051                    CMP0CR2:		equ 51h			; CMP0 control 2				(RW)
   673  0054                    CMP1CR1:		equ 54h			; CMP1 control 1				(RW)
   674  0055                    CMP1CR2:		equ 55h			; CMP1 control 2				(RW)
   675  0058                    CSCMPCR0:		equ 58h			; CSCMP control 0				(RW)
   676  0059                    CSCMPGOEN:		equ 59h			; CSCMO global out enable		(RW)
   677  005A                    CSLUTCR0:		equ 5Ah			; CSLUT control 0				(RW)
   678  005B                    CMPCOLMUX:		equ 5Bh			; CMP Column Mux				(RW)
   679  005C                    CMPPWMCR:		equ 5Ch			; CMP PWM control				(RW)
   680  005D                    CMPFLTCR:		equ 5Dh			; CMP filter control			(RW)
   681  005E                    CMPCLK1:		equ 5Eh			; CMP clock 1					(RW)
   682  005F                    CMPCLK0:		equ 5Fh			; CMP clock 0					(RW)
   683                          
   684                          ;------------------------------------------------------
   685                          ;  Neon Real Time Clock Registers
   686                          ;------------------------------------------------------
   687  00A4                    RTCH:			equ A4h			; Real time current hour		(RW)
   688  00A5                    RTCM:			equ A5h			; Real time current minute		(RW)
   689  00A6                    RTCS:			equ A6h			; Real time current second		(RW)
   690  00A7                    RTCCR:			equ A7h			; Real time clock control		(RW)
   691                          
   692                          ;------------------------------------------------------
   693                          ;  Analog MUX Config Registers
   694                          ;------------------------------------------------------
   695                          
   696  006A                    AMUX_CFG1:			equ 6Ah  ; Analog MUX Configuration 1
   697  0020                    AMUX_CFG1_GOINVR:	equ 20h  ;
   698  0010                    AMUX_CFG1_GOINVL:  	equ 10h	 ;
   699  000C                    AMUX_CFG1_AMUXMODR:	equ 0Ch	 ;
   700  0003                    AMUX_CFG1_AMUXMODL:	equ 03h	 ;
   701                          
   702                          ;;=============================================================================
   703                          ;;      M8C System Macros
   704                          ;;  These macros should be used when their functions are needed.
   705                          ;;=============================================================================
   706                          
   707                          ;----------------------------------------------------
   708                          ;  Swapping Register Banks
   709                          ;----------------------------------------------------
   710                              macro M8C_SetBank0
   711                              and   F, ~FLAG_XIO_MASK
   712  3C41                        endm
   713                          
   714                              macro M8C_SetBank1
   715                              or    F, FLAG_XIO_MASK
   716  3C41                        endm
   717                          
   718                          ;----------------------------------------------------
   719                          ;  Global Interrupt Enable/Disable
   720                          ;----------------------------------------------------
   721                              macro M8C_EnableGInt
   722                              or    F, FLAG_GLOBAL_IE
   723  3C41                        endm
   724                          
   725                              macro M8C_DisableGInt
   726                              and   F, ~FLAG_GLOBAL_IE
   727  3C41                        endm
   728                          
   729                          ;----------------------------------------------------
   730                          ;  Enable/Disable Interrupt Mask
   731                          ;
   732                          ;  Use the following macros to enable/disable
   733                          ;  bits in the Interrupt mask registers,
   734                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   735                          ;
   736                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   737                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   738                          ;
   739                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   740                          ;        and MASK is the bit set to enable or disable
   741                          ;----------------------------------------------------
   742                          ; Disable Interrupt Bit Mask(s)
   743                              macro M8C_DisableIntMask
   744                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   745  3C41                        endm
   746                          
   747                          ; Enable Interrupt Bit Mask(s)
   748                              macro M8C_EnableIntMask
   749                              or    reg[@0], @1               ; enable specified interrupt enable bit
   750  3C41                        endm
   751                          
   752                          ;----------------------------------------------------
   753                          ;  Clear Posted Interrupt Flag Mask
   754                          ;
   755                          ;  Use the following macros to clear the
   756                          ;  bits in the Interrupt Clear registers,
   757                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   758                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   759                          ;
   760                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   761                          ;        and MASK is the bit set to enable or disable
   762                          ;----------------------------------------------------
   763                              macro M8C_ClearIntFlag
   764                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   765  3C41                        endm
   766                          
   767                          ;----------------------------------------------------
   768                          ;  Power-On Reset & WatchDog Timer Functions
   769                          ;----------------------------------------------------
   770                              macro M8C_EnableWatchDog
   771                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   772  3C41                        endm
   773                          
   774                              macro M8C_ClearWDT
   775                              mov   reg[RES_WDT], 00h
   776  3C41                        endm
   777                          
   778                              macro M8C_ClearWDTAndSleep
   779                              mov   reg[RES_WDT], 38h
   780  3C41                        endm
   781                          
   782                          ;----------------------------------------------------
   783                          ;  Sleep, CPU Stop & Software Reset
   784                          ;----------------------------------------------------
   785                              macro M8C_Sleep
   786                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   787                              ; The next instruction to be executed depends on the state of the
   788                              ; various interrupt enable bits. If some interrupts are enabled
   789                              ; and the global interrupts are disabled, the next instruction will
   790                              ; be the one that follows the invocation of this macro. If global
   791                              ; interrupts are also enabled then the next instruction will be
   792                              ; from the interrupt vector table. If no interrupts are enabled
   793                              ; then the CPU sleeps forever.
   794  3C41                        endm
   795                          
   796                              macro M8C_Stop
   797                              ; In general, you probably don't want to do this, but here's how:
   798                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   799                              ; Next instruction to be executed is located in the interrupt
   800                              ; vector table entry for Power-On Reset.
   801  3C41                        endm
   802                          
   803                              macro M8C_Reset
   804                              ; Restore CPU to the power-on reset state.
   805                              mov A, 0
   806                              SSC
   807                              ; Next non-supervisor instruction will be at interrupt vector 0.
   808  3C41                        endm
   809                          
   810                          ;----------------------------------------------------
   811                          ; ImageCraft Code Compressor Actions
   812                          ;----------------------------------------------------
   813                              ; Suspend Code Compressor
   814                              ; Must not span a RET or RETI instruction
   815                              ; without resuming code compression
   816                              macro Suspend_CodeCompressor
   817                              or   F, 0
   818  3C41                        endm
   819                          
   820                              ; Resume Code Compression
   821                              macro Resume_CodeCompressor
   822                              add  SP, 0
   823                              endm
      + 3C41                    
      + 3C41                    ; end of file m8c.inc
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;
     4                          ;;       FILENAME: Memory.inc
     5                          ;;
     6                          ;;    DESCRIPTION: Memory Model and Stack Parameter Definitions for 
     7                          ;;                 CY8C22045 PSoC devices.
     8                          ;;
     9                          ;;  LAST MODIFIED: August 17, 2004
    10                          ;;
    11                          ;;-----------------------------------------------------------------------------
    12                          ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
    13                          ;;*****************************************************************************
    14                          ;;*****************************************************************************
    15                          ;
    16                          ;
    17                          ;  ******** Define Memory Model and Stack parameters ********
    18                          ;
    19  0001                    IMAGECRAFT: equ 1   
    20  0002                    HITECH: equ 2   
    21  0002                    TOOLCHAIN: equ HITECH   
    22  0001                    SYSTEM_LARGE_MEMORY_MODEL: equ 1   
    23  0000                    SYSTEM_SMALL_MEMORY_MODEL: equ 0   
    24  0003                    SYSTEM_STACK_PAGE: equ 3   
    25  0000                    SYSTEM_STACK_PAGE_OFFSET: equ 0   
    26  0002                    SYSTEM_TOOLS: equ 2   
    27  0000                    SYSTEM_IDXPG_TRACKS_STK_PP: equ 0   
    28  0001                    SYSTEM_IDXPG_TRACKS_IDX_PP: equ 1   
    29  0000                    SYSTEM_MULTIPAGE_STACK: equ 0 
    30                          
    31                          
    32                          ;  ******* Function Class Definitions *******
    33                          ;
    34                          ;  These definitions are used to describe RAM access patterns. They provide
    35                          ;  documentation and they control prologue and epilogue macros that perform
    36                          ;  the necessary housekeeping functions for large memory model devices like
    37                          ;  the CY8C22045.
    38                          
    39  0001                    RAM_USE_CLASS_1:               equ 1   ; PUSH, POP & I/O access
    40  0002                    RAM_USE_CLASS_2:               equ 2   ; Indexed address mode on stack page
    41  0004                    RAM_USE_CLASS_3:               equ 4   ; Indexed address mode to any page
    42  0008                    RAM_USE_CLASS_4:               equ 8   ; Direct/Indirect address mode access
    43                          
    44                          ; ******* Hi Tech Specific *******
    45                          ; Turn on the expansion of all macros by default
    46                          IF (TOOLCHAIN & HITECH)
    47                          OPT EXPAND
    48                          ENDIF
    49                          ; ******* Page Pointer Manipulation Macros *******
    50                          ;
    51                          ;  ******* Page Pointer Manipulation Macros *******
    52                          ;
    53                          ;  Most of the following macros are conditionally compiled so they only
    54                          ;  produce code if the large memory model is selected.
    55                          
    56                             ;-----------------------------------------------
    57                             ;  Set Stack Page Macro
    58                             ;-----------------------------------------------
    59                             ;
    60                             ;  DESC: Modify STK_PP in the large or small memory Models.
    61                             ;
    62                             ; INPUT: Constant (e.g., SYSTEM_STACK_PAGE) that specifies the RAM page on
    63                             ;        which stack operations like PUSH and POP store and retrieve their
    64                             ;        data
    65                             ;
    66                             ;  COST: 8 instruction cycles (in LMM only)
    67                          
    68                             macro RAM_SETPAGE_STK( PG_NUMBER )
    69                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    70                                mov reg[STK_PP], @PG_NUMBER
    71                             ENDIF
    72  3C41                       endm
    73                          
    74                             ;-----------------------------------------------
    75                             ;  Set Current Page Macro
    76                             ;-----------------------------------------------
    77                             ;
    78                             ;  DESC: Modify CUR_PP in the large or small memory Models.
    79                             ;
    80                             ; INPUT: Constant value (e.g., >bFoo) for the RAM page number used in
    81                             ;        calculation of effective direct-mode address operands.
    82                             ;
    83                             ;  COST: 8 instruction cycles (in LMM only)
    84                          
    85                             macro RAM_SETPAGE_CUR( PG_NUMBER )
    86                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    87                                mov reg[CUR_PP], @PG_NUMBER
    88                             ENDIF
    89  3C41                       endm
    90                          
    91                             ;-----------------------------------------------
    92                             ;  Set Index Page Macro
    93                             ;-----------------------------------------------
    94                             ;
    95                             ;  DESC: Modify IDX_PP in the large or small emory Models.
    96                             ;
    97                             ; INPUT: Constant value (e.g., >caFoo) for the RAM page number used in
    98                             ;         calculation of effective index-mode address operands.
    99                             ;
   100                             ;  COST: 8 instruction cycles (in LMM only)
   101                          
   102                             macro RAM_SETPAGE_IDX( PG_NUMBER )
   103                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   104                                mov reg[IDX_PP], @PG_NUMBER
   105                             ENDIF
   106  3C41                       endm
   107                          
   108                             ;-----------------------------------------------
   109                             ;  Set MVI Read Page Macro
   110                             ;-----------------------------------------------
   111                             ;
   112                             ;  DESC: Modify MVR_PP in the large or small memory Models.
   113                             ;
   114                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   115                             ;        calculation of indirect address operands used in the
   116                             ;        "mvi A, [pFoo]" instructions.
   117                             ;
   118                             ;  COST: 8 instruction cycles (in LMM only)
   119                          
   120                             macro RAM_SETPAGE_MVR( PG_NUMBER )
   121                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   122                                mov reg[MVR_PP], @PG_NUMBER
   123                             ENDIF
   124  3C41                       endm
   125                          
   126                             ;-----------------------------------------------
   127                             ;  Set MVI Write Page Macro
   128                             ;-----------------------------------------------
   129                             ;
   130                             ;  DESC: Modify MVW_PP in the large or small memory Models.
   131                             ;
   132                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   133                             ;        calculation of indirect address operands used in the
   134                             ;        "mvi [pFoo], A" instructions.
   135                             ;
   136                             ;  COST: 8 instruction cycles (in LMM only)
   137                          
   138                             macro RAM_SETPAGE_MVW( PG_NUMBER )
   139                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   140                                mov reg[MVW_PP], @PG_NUMBER
   141                             ENDIF
   142  3C41                       endm
   143                          
   144                             ;-----------------------------------------------
   145                             ;  Force Index Page Pointer to Stack Page
   146                             ;-----------------------------------------------
   147                             ;
   148                             ;  DESC: Map index-mode operands onto the stack page by modifying IDX_PP.
   149                             ;        See also RAM_LOCK_INDEX_TO_STACKPAGE.
   150                             ;
   151                             ; INPUT: None
   152                             ;
   153                             ;  COST: 8 instruction cycles (in LMM only)
   154                          
   155                             macro RAM_SETPAGE_IDX2STK
   156                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   157                                IF ( SYSTEM_MULTIPAGE_STACK )
   158                                   mov   A, reg[STK_PP]
   159                                   mov   reg[IDX_PP], A
   160                                ELSE
   161                                   RAM_SETPAGE_IDX SYSTEM_STACK_PAGE
   162                                ENDIF
   163                             ENDIF
   164  3C41                       endm
   165                          
   166                             ;-----------------------------------------------
   167                             ;  Change Memory Mode
   168                             ;-----------------------------------------------
   169                             ;
   170                             ;  DESC: Modify FLAG_PAGEMODE bits in the large and small memory Models.
   171                             ;
   172                             ; INPUT: Constant value for PGMODE bitfield of CPU Flag register, F.
   173                             ;        See FLAG_PGMODE_{x} constants in M8C.INC.
   174                             ;
   175                             ;  COST: 8 instruction cycles (in LMM only)
   176                          
   177                             macro RAM_CHANGE_PAGE_MODE( MODE )
   178                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   179                                and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
   180                                or    F,  FLAG_PGMODE_MASK & @MODE
   181                             ENDIF
   182  3C41                       endm
   183                          
   184                             ;-----------------------------------------------
   185                             ;  Set Large Memory Model Native Paging Mode
   186                             ;-----------------------------------------------
   187                             ;
   188                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   189                             ;        paging mode *IFF* a simple "OR" is guaranteed to work---for
   190                             ;        example, in an ISR, when the PGMODE bits have been cleared
   191                             ;        to zero. If a simple "OR" is not guaranteed to work, use
   192                             ;        the slower RAM_RESTORE_NATIVE_PAGING instead.
   193                             ;
   194                             ; INPUT: none
   195                             ;
   196                             ;  COST: 4 instruction cycles (in LMM only)
   197                          
   198                             macro RAM_SET_NATIVE_PAGING
   199                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   200                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   201                                or    F,  FLAG_PGMODE_11b            ; LMM w/ IndexPage<==>StackPage
   202                             ENDIF ;  PGMODE LOCKED
   203                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   204                                or    F,  FLAG_PGMODE_10b            ; LMM with independent IndexPage
   205                             ENDIF ; PGMODE FREE
   206                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   207  3C41                       endm
   208                          
   209                             ;-----------------------------------------------
   210                             ; Restore Large Memory Model Native Paging Mode
   211                             ;-----------------------------------------------
   212                             ;
   213                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   214                             ;        paging mode. Always works because it clears the PGMODE bits
   215                             ;        before OR-ing in the new ones. See RAM_RESTORE_NATIVE_PAGING
   216                             ;        for a faster method.
   217                             ;
   218                             ; INPUT: none
   219                             ;
   220                             ;  COST: 8 instruction cycles (in LMM only)
   221                          
   222                             macro RAM_RESTORE_NATIVE_PAGING
   223                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   224                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   225                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_11b ; LMM w/ IndexPage<==>StackPage
   226                             ENDIF ;  PGMODE LOCKED
   227                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   228                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b ; LMM with independent IndexPage
   229                             ENDIF ; PGMODE FREE
   230                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   231  3C41                       endm
   232                          
   233                             ;-----------------------------------------------
   234                             ; Force indexed addr mode operands to Stack Pg
   235                             ;-----------------------------------------------
   236                             ;
   237                             ;  DESC: Force instructions that use indexed address mode to reference the
   238                             ;        stack page (as defined by STK_PP). This macro sets the "Indexed
   239                             ;        Stack Mode" bit (LSB) of the PGMODE bit field in the CPU Flag
   240                             ;        register, F. (See also RAM_SETPAGE_IDX2STK, above.)
   241                             ;
   242                             ; INPUT: none
   243                             ;
   244                             ;  COST: 4 instruction cycles (in LMM only)
   245                          
   246                             macro RAM_X_POINTS_TO_STACKPAGE
   247                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   248                                or   F, FLAG_PGMODE_01b
   249                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   250  3C41                       endm
   251                          
   252                             ;-----------------------------------------------
   253                             ;  Force indexed addr mode operands to Index Pg
   254                             ;-----------------------------------------------
   255                             ;
   256                             ;  DESC: Permit instructions that use indexed address mode to reference page
   257                             ;        zero or the page pointed to by the IDX_PP register, depending on the
   258                             ;        setting of the MSb (or "Direct Page Mode" bit) of the PGMODE bits
   259                             ;        in the CPU Flag register, F. (This macro clears the PGMODE LSb.)
   260                             ;
   261                             ; INPUT: none
   262                             ;
   263                             ;  COST: 4 instruction cycles (in LMM only)
   264                          
   265                             macro RAM_X_POINTS_TO_INDEXPAGE
   266                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   267                                and  F, ~FLAG_PGMODE_01b
   268                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   269  3C41                       endm
   270                          
   271                             ;-----------------------------------------------
   272                             ;  Function Prologue
   273                             ;-----------------------------------------------
   274                             ;
   275                             ;  Prologue for functions that run in the LMM and SMM.
   276                             ;
   277                          
   278                             macro RAM_PROLOGUE( ACTUAL_CLASS )
   279                          
   280                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   281                             ; Nothing to do
   282                             ENDIF ; RAM_USE_CLASS_1
   283                          
   284                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   285                                IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   286                                   RAM_X_POINTS_TO_STACKPAGE         ; exit native paging mode!
   287                                ENDIF
   288                             ENDIF ; RAM_USE_CLASS_2
   289                          
   290                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   291                                IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   292                                   RAM_X_POINTS_TO_INDEXPAGE         ; exit native paging mode!
   293                                ENDIF
   294                             ENDIF ; RAM_USE_CLASS_3
   295                          
   296                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   297                             ; Nothing to do
   298                             ENDIF ; RAM_USE_CLASS_4
   299                          
   300  3C41                       endm
   301                          
   302                             ;-----------------------------------------------
   303                             ;  Function Epilogue
   304                             ;-----------------------------------------------
   305                             ;
   306                             ;  Prologue for functions that run in the LMM and SMM.
   307                             ;
   308                          
   309                             macro RAM_EPILOGUE( ACTUAL_CLASS )
   310                          
   311                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   312                             ; Nothing to do
   313                             ENDIF ; RAM_USE_CLASS_1
   314                          
   315                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   316                                RAM_RESTORE_NATIVE_PAGING
   317                             ENDIF ; RAM_USE_CLASS_2
   318                          
   319                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   320                                RAM_RESTORE_NATIVE_PAGING
   321                             ENDIF ; RAM_USE_CLASS_3
   322                          
   323                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   324                             ; Nothing to do
   325                             ENDIF ; RAM_USE_CLASS_4
   326                          
   327  3C41                       endm
   328                          
   329                             ;-----------------------------------------------
   330                             ;  Preserve Register
   331                             ;-----------------------------------------------
   332                             ;
   333                             ;  DESC: Preserve a register value on the stack
   334                             ;
   335                             ; INPUT: Name or address of register in I/O Space
   336                             ;        The I/O bank is an implicit parameter. That is, this function will
   337                             ;        Access the I/O bank currently specified by the CPU Flag register.
   338                             ;
   339                             ;  USES: CPU 'A' register
   340                             ;
   341                             ;  COST: 9 instruction cycles
   342                          
   343                             macro REG_PRESERVE( IOReg )
   344                             mov   A, reg[ @IOReg ]
   345                             push  A
   346  3C41                       endm
   347                          
   348                             ;-----------------------------------------------
   349                             ;  Restore Register
   350                             ;-----------------------------------------------
   351                             ;
   352                             ;  DESC: Restore a register value from the stack
   353                             ;
   354                             ; INPUT: Name or address of register in I/O Space
   355                             ;        The I/O bank is an implicit parameter. That is, this function will
   356                             ;        Access the I/O bank currently specified by the CPU Flag register.
   357                             ;
   358                             ;  USES: CPU 'A' register
   359                             ;
   360                             ;  COST: 10 instruction cycles
   361                          
   362                             macro REG_RESTORE( IOReg )
   363                             pop   A
   364                             mov   reg[ @IOReg ], A
   365  3C41                       endm
   366                          
   367                             ;-----------------------------------------------
   368                             ;  Preserve Volatile Page Pointer Registers
   369                             ;-----------------------------------------------
   370                             ;
   371                             ;  DESC: Invoked by ISRs before switching to the LMM mode and calling
   372                             ;        functions that require on it.
   373                             ;
   374                             ; INPUT: none
   375                             ;
   376                             ;  USES: CPU 'A' register
   377                             ;
   378                             ;  COST: 45 instruction cycles (in LMM only)
   379                          
   380                             macro ISR_PRESERVE_PAGE_POINTERS
   381                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   382                                REG_PRESERVE CUR_PP
   383                                REG_PRESERVE IDX_PP
   384                                REG_PRESERVE MVR_PP
   385                                REG_PRESERVE MVW_PP
   386                             ENDIF
   387  3C41                       endm
   388                          
   389                             ;-----------------------------------------------
   390                             ;  Restore Volatile Page Pointer Registers
   391                             ;-----------------------------------------------
   392                             ;
   393                             ;  DESC: Undo for RAM_PRESERVE_PAGE_POINTERS macro. Invoked by ISRs after
   394                             ;        calling functions that run in the LMM mode and before executing
   395                             ;        the RETI instruction.
   396                             ;
   397                             ; INPUT: none
   398                             ;
   399                             ;  USES: CPU 'A' register
   400                             ;
   401                             ;  COST: 50 instruction cycles (in LMM only)
   402                          
   403                             macro ISR_RESTORE_PAGE_POINTERS
   404                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   405                                REG_RESTORE MVW_PP
   406                                REG_RESTORE MVR_PP
   407                                REG_RESTORE IDX_PP
   408                                REG_RESTORE CUR_PP
   409                             ENDIF
   410                             endm
      + 3C41                    
      + 3C41                    ; end of file Memory.inc
     1                          ;  Generated by PSoC Designer 5.4.2946
     2                          ;
     3                          ;=============================================================================
     4                          ;  FILENAME:   GlobalParams.inc
     5                          ;  DATE:       27 September 2004
     6                          ;
     7                          ;  DESCRIPTION:
     8                          ;  Constants describing many of the global parameter settings.
     9                          ;  This file contains equates to support oscillator register initialization
    10                          ;  for the CY8C22345
    11                          ;
    12                          ;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
    13                          ;
    14                          ; NOTES:
    15                          ; Do not modify this file. It is generated by PSoC Designer each time the
    16                          ; generate application function is run. The values of the parameters in this
    17                          ; file can be modified by changing the values of the global parameters in the
    18                          ; device editor.
    19                          ;=============================================================================
    20                          ;
    21                          
    22  0003                    CPU_CLOCK:				equ	3h	;CPU clock value
    23  0007                    CPU_CLOCK_MASK:			equ	7h	;CPU clock mask
    24  0003                    CPU_CLOCK_JUST:			equ	3h	;CPU clock value justified
    25  0000                    SELECT_32K:				equ	0h		;32K select value
    26  0080                    SELECT_32K_MASK:		equ	80h		;32K select mask
    27  0000                    SELECT_32K_JUST:		equ	0h		;32K select value justified
    28  0000                    PLL_MODE:				equ	0h		;PLL mode value
    29  0040                    PLL_MODE_MASK:			equ	40h		;PLL mode mask
    30  0000                    PLL_MODE_JUST:			equ	0h		;PLL mode value justified
    31                          
    32  0002                    SLEEP_TIMER:			equ	2h		;Sleep Timer value
    33  0018                    SLEEP_TIMER_MASK:		equ	18h		;Sleep Timer mask
    34  0010                    SLEEP_TIMER_JUST:		equ	10h		;Sleep Timer value justified
    35                          
    36  0000                    SLEEP_TIMER2:			equ	0h		;Sleep Extend value
    37  0010                    SLEEP_TIMER_MASK2:		equ	10h		;Sleep Extend mask
    38  0000                    SLEEP_TIMER_JUST2:		equ	0h		;Sleep Extend value justified
    39                          
    40  0001                    SWITCH_MODE_PUMP:		equ	1h	;Switch Mode Pump setting
    41  0080                    SWITCH_MODE_PUMP_MASK:	equ	80h	;Switch Mode Pump mask
    42  0080                    SWITCH_MODE_PUMP_JUST:	equ	80h	;Switch Mode Pump justified
    43  0000                    LVD_TBEN:               equ 0   ; Low Voltage Throttle-back enable value
    44  0008                    LVD_TBEN_MASK:          equ 8  ; Low Voltage Throttle-back enable mask
    45  0000                    LVD_TBEN_JUST:          equ 0  ; Low Voltage Throttle-back enable justified
    46  0007                    TRIP_VOLTAGE:			equ	7h   ;Trip Voltage value
    47  0007                    TRIP_VOLTAGE_MASK:      equ 7h  ;Trip Voltage mask
    48  0007                    TRIP_VOLTAGE_JUST:      equ 7h  ;Trip Voltage justified
    49                                                        
    50  0010                    POWER_SETTING:			equ	10h
    51  0010                    POWER_SET_5V0:          equ 10h  ; MASK for 5.0V operation, fast and slow 
    52  0010                    POWER_SET_5V0_24MHZ:    equ 10h  ; Power Setting value for 5.0V fast      
    53  0011                    POWER_SET_5V0_6MHZ:     equ 11h  ; Power Setting value for 5.0V slow      
    54  0008                    POWER_SET_3V3:          equ 08h  ; MASK for 3.3V operation, fast and slow 
    55  0008                    POWER_SET_3V3_24MHZ:    equ 08h	 ; Power Setting value for 3.3V fast      
    56  0009                    POWER_SET_3V3_6MHZ:     equ 09h	 ; Power Setting value for 3.3V slow      
    57  0006                    POWER_SET_2V7:          equ 06h  ; MASK for 2.7V operation, fast and slow
    58  0004                    POWER_SET_2V7_12MHZ:    equ 04h	 ; MASK for 2.7V, 12MHZ operation
    59  0002                    POWER_SET_2V7_6MHZ:     equ 02h	 ; MASK for 2.7V,  6MHZ operation
    60  0001                    POWER_SET_SLOW_IMO:     equ 01h  ; MASK for slow Internal Main Oscillator (IMO) 
    61                          
    62  0001                    COMM_RX_PRESENT:		equ	1	;1 = TRUE
    63  0001                    WATCHDOG_ENABLE:		equ 1	;Watchdog Enable 1 = Enable
    64                          
    65  0007                    CLOCK_DIV_VC1:			equ	7h	;VC1 clock divider
    66  00F0                    CLOCK_DIV_VC1_MASK:		equ	f0h	;VC1 clock divider mask
    67  0070                    CLOCK_DIV_VC1_JUST:		equ	70h	;VC1 clock divider justified
    68  000F                    CLOCK_DIV_VC2:			equ	fh	;VC2 clock divider
    69  000F                    CLOCK_DIV_VC2_MASK:		equ	fh	;VC2 clock divider mask
    70  000F                    CLOCK_DIV_VC2_JUST:		equ	fh	;VC2 clock divider justified
    71  0001                    CLOCK_INPUT_VC3:		equ	1h	;VC3 clock source
    72  0003                    CLOCK_INPUT_VC3_MASK:	equ	3h	;VC3 clock source mask
    73  0001                    CLOCK_INPUT_VC3_JUST:	equ	1h	;VC3 clock source justified
    74  0026                    CLOCK_DIV_VC3:			equ	26h	;VC3 clock divider
    75  00FF                    CLOCK_DIV_VC3_MASK:		equ	ffh	;VC3 clock divider mask
    76  0026                    CLOCK_DIV_VC3_JUST:		equ	26h	;VC3 clock divider justified
    77  0000                    SYSCLK_SOURCE:				equ	(0h | 0h)	;SysClk Source setting
    78  0006                    SYSCLK_SOURCE_MASK:			equ	(4h | 2h)	;SysClk Source setting mask
    79  0000                    SYSCLK_SOURCE_JUST:			equ	(0h | 0h)	;SysClk Source setting justified
    80  0000                    SYSCLK_2_DISABLE:				equ	0h	;SysClk*2 Disable setting
    81  0001                    SYSCLK_2_DISABLE_MASK:			equ	1h	;SysClk*2 Disable setting mask
    82  0000                    SYSCLK_2_DISABLE_JUST:			equ	0h	;SysClk*2 Disable setting justified
    83                          ;
    84                          ; register initial values
    85                          ;
    86  0000                    ANALOG_IO_CONTROL:		equ 0h	;Analog IO Control register (ABF_CR)
    87  0011                    PORT_0_GLOBAL_SELECT:	equ 11h	;Port 0 global select register (PRT0GS)
    88  00FE                    PORT_0_DRIVE_0:			equ feh	;Port 0 drive mode 0 register (PRT0DM0)
    89  0001                    PORT_0_DRIVE_1:			equ 1h	;Port 0 drive mode 1 register (PRT0DM1)
    90  0000                    PORT_0_DRIVE_2:			equ 0h	;Port 0 drive mode 2 register (PRT0DM2)
    91  0000                    PORT_0_INTENABLE:		equ 0h	;Port 0 interrupt enable register (PRT0IE)
    92  0000                    PORT_0_INTCTRL_0:		equ 0h	;Port 0 interrupt control 0 register (PRT0IC0)
    93  0000                    PORT_0_INTCTRL_1:		equ 0h	;Port 0 interrupt control 1 register (PRT0IC1)
    94  0000                    PORT_1_GLOBAL_SELECT:	equ 0h	;Port 1 global select register (PRT1GS)
    95  00A0                    PORT_1_DRIVE_0:			equ a0h	;Port 1 drive mode 0 register (PRT1DM0)
    96  00FF                    PORT_1_DRIVE_1:			equ ffh	;Port 1 drive mode 1 register (PRT1DM1)
    97  00FF                    PORT_1_DRIVE_2:			equ ffh	;Port 1 drive mode 2 register (PRT1DM2)
    98  0000                    PORT_1_INTENABLE:		equ 0h	;Port 1 interrupt enable register (PRT1IE)
    99  0000                    PORT_1_INTCTRL_0:		equ 0h	;Port 1 interrupt control 0 register (PRT1IC0)
   100  0000                    PORT_1_INTCTRL_1:		equ 0h	;Port 1 interrupt control 1 register (PRT1IC1)
   101  0019                    PORT_2_GLOBAL_SELECT:	equ 19h	;Port 2 global select register (PRT2GS)
   102  0009                    PORT_2_DRIVE_0:			equ 9h	;Port 2 drive mode 0 register (PRT2DM0)
   103  00F6                    PORT_2_DRIVE_1:			equ f6h	;Port 2 drive mode 1 register (PRT2DM1)
   104  00E6                    PORT_2_DRIVE_2:			equ e6h	;Port 2 drive mode 2 register (PRT2DM2)
   105  0000                    PORT_2_INTENABLE:		equ 0h	;Port 2 interrupt enable register (PRT2IE)
   106  0000                    PORT_2_INTCTRL_0:		equ 0h	;Port 2 interrupt control 0 register (PRT2IC0)
   107  0000                    PORT_2_INTCTRL_1:		equ 0h	;Port 2 interrupt control 1 register (PRT2IC1)
   108  0000                    PORT_3_GLOBAL_SELECT:	equ 0h	;Port 3 global select register (PRT3GS)
   109  0000                    PORT_3_DRIVE_0:			equ 0h	;Port 3 drive mode 0 register (PRT3DM0)
   110  0000                    PORT_3_DRIVE_1:			equ 0h	;Port 3 drive mode 1 register (PRT3DM1)
   111  0000                    PORT_3_DRIVE_2:			equ 0h	;Port 3 drive mode 2 register (PRT3DM2)
   112  0000                    PORT_3_INTENABLE:		equ 0h	;Port 3 interrupt enable register (PRT3IE)
   113  0000                    PORT_3_INTCTRL_0:		equ 0h	;Port 3 interrupt control 0 register (PRT3IC0)
   114  0000                    PORT_3_INTCTRL_1:		equ 0h	;Port 3 interrupt control 1 register (PRT3IC1)
     1                          ;  Generated by PSoC Designer 5.4.2946
     2                          ;
     3                          ;==========================================================================
     4                          ;  PSoCConfig.asm
     5                          ;  @PSOC_VERSION
     6                          ;
     7                          ;  Version: 0.85
     8                          ;  Revised: June 22, 2004
     9                          ;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
    10                          ;
    11                          ;  This file is generated by the Device Editor on Application Generation.
    12                          ;  It contains code which loads the configuration data table generated in
    13                          ;  the file PSoCConfigTBL.asm
    14                          ;
    15                          ;  DO NOT EDIT THIS FILE MANUALLY, AS IT IS OVERWRITTEN!!!
    16                          ;  Edits to this file will not be preserved.
    17                          ;==========================================================================
    18                          ;
    19                          include "m8c.inc"
    20                          include "memory.inc"
    21                          include "GlobalParams.inc"
    22                          
    23                          export LoadConfigInit
    24                          export _LoadConfigInit
    25                          export LoadConfig_led_display
    26                          export _LoadConfig_led_display
    27                          
    28                          export NO_SHADOW
    29                          export _NO_SHADOW
    30                          
    31  0010                    FLAG_CFG_MASK:      equ 10h         ;M8C flag register REG address bit mask
    32  00FF                    END_CONFIG_TABLE:   equ ffh         ;end of config table indicator
    33                          
    34                          AREA psoc_config(rom, rel)
    35                          
    36                          ;---------------------------------------------------------------------------
    37                          ; LoadConfigInit - Establish the start-up configuration (except for a few
    38                          ;                  parameters handled by boot code, like CPU speed). This
    39                          ;                  function can be called from user code, but typically it
    40                          ;                  is only called from boot.
    41                          ;
    42                          ;       INPUTS: None.
    43                          ;      RETURNS: Nothing.
    44                          ; SIDE EFFECTS: Registers are volatile: the A and X registers can be modified!
    45                          ;               In the large memory model currently only the page
    46                          ;               pointer registers listed below are modified.  This does
    47                          ;               not guarantee that in future implementations of this
    48                          ;               function other page pointer registers will not be
    49                          ;               modified.
    50                          ;          
    51                          ;               Page Pointer Registers Modified: 
    52                          ;               CUR_PP
    53                          ;
    54  2AB1                    _LoadConfigInit:
    55  2AB1                     LoadConfigInit:
    56                              RAM_PROLOGUE RAM_USE_CLASS_4
    57                              
    58  2AB1  7C 2AB8           	lcall	LoadConfig_led_display
    59  2AB4  7C 3E1C           	lcall	LoadConfigTBL_led_display_Ordered
    60                          
    61                          
    62                              RAM_EPILOGUE RAM_USE_CLASS_4
    63  2AB7  7F                    ret
    64                          
    65                          ;---------------------------------------------------------------------------
    66                          ; Load Configuration led_display
    67                          ;
    68                          ;    Load configuration registers for led_display.
    69                          ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
    70                          ;
    71                          ;       INPUTS: None.
    72                          ;      RETURNS: Nothing.
    73                          ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
    74                          ;               modified as may the Page Pointer registers!
    75                          ;               In the large memory model currently only the page
    76                          ;               pointer registers listed below are modified.  This does
    77                          ;               not guarantee that in future implementations of this
    78                          ;               function other page pointer registers will not be
    79                          ;               modified.
    80                          ;          
    81                          ;               Page Pointer Registers Modified: 
    82                          ;               CUR_PP
    83                          ;
    84  2AB8                    _LoadConfig_led_display:
    85  2AB8                     LoadConfig_led_display:
    86                              RAM_PROLOGUE RAM_USE_CLASS_4
    87                          
    88  2AB8  10                	push	x
    89  2AB9  70 EF                 M8C_SetBank0                    ; Force bank 0
    90  2ABB  50 00                 mov     a, 0                    ; Specify bank 0
    91  2ABD  67                    asr     a                       ; Store in carry flag
    92                                                              ; Load bank 0 table:
    93  2ABE  50 2B                 mov     A, >LoadConfigTBL_led_display_Bank0
    94  2AC0  57 15                 mov     X, <LoadConfigTBL_led_display_Bank0
    95  2AC2  7C 2AD3               lcall   LoadConfig              ; Load the bank 0 values
    96                          
    97  2AC5  50 01                 mov     a, 1                    ; Specify bank 1
    98  2AC7  67                    asr     a                       ; Store in carry flag
    99                                                              ; Load bank 1 table:
   100  2AC8  50 2B                 mov     A, >LoadConfigTBL_led_display_Bank1
   101  2ACA  57 AC                 mov     X, <LoadConfigTBL_led_display_Bank1
   102  2ACC  7C 2AD3               lcall   LoadConfig              ; Load the bank 1 values
   103                          
   104  2ACF  70 EF                 M8C_SetBank0                    ; Force return to bank 0
   105  2AD1  20                	pop		x
   106                          
   107                              RAM_EPILOGUE RAM_USE_CLASS_4
   108  2AD2  7F                    ret
   109                          
   110                          
   111                          
   112                          
   113                          ;---------------------------------------------------------------------------
   114                          ; LoadConfig - Set IO registers as specified in ROM table of (address,value)
   115                          ;              pairs. Terminate on address=0xFF.
   116                          ;
   117                          ;  INPUTS:  [A,X] points to the table to be loaded
   118                          ;           Flag Register Carry bit encodes the Register Bank
   119                          ;           (Carry=0 => Bank 0; Carry=1 => Bank 1)
   120                          ;
   121                          ;  RETURNS: nothing.
   122                          ;
   123                          ;  STACK FRAME:  X-4 I/O Bank 0/1 indicator
   124                          ;                X-3 Temporary store for register address
   125                          ;                X-2 LSB of config table address
   126                          ;                X-1 MSB of config table address
   127                          ;
   128  2AD3                    LoadConfig:
   129  2AD3  71 40                 RAM_PROLOGUE RAM_USE_CLASS_2
   130  2AD5  38 02                 add     SP, 2                   ; Set up local vars
   131  2AD7  10                    push    X                       ; Save config table address on stack
   132  2AD8  08                    push    A
   133  2AD9  4F                    mov     X, SP
   134  2ADA  56 FC 00              mov     [X-4], 0                ; Set default Destination to Bank 0
   135  2ADD  D004                  jnc     .BankSelectSaved        ; Carry says Bank 0 is OK
   136  2ADF  56 FC 01              mov     [X-4], 1                ; No Carry: default to Bank 1
   137  2AE2                    .BankSelectSaved:
   138  2AE2  18                    pop     A
   139  2AE3  20                    pop     X
   140                          
   141  2AE4                    LoadConfigLp:
   142  2AE4  70 EF                 M8C_SetBank0                    ; Switch to bank 0
   143  2AE6  62 E3 00              M8C_ClearWDT                    ; Clear the watchdog for long inits
   144  2AE9  10                    push    X                       ; Preserve the config table address
   145  2AEA  08                    push    A
   146  2AEB  28                    romx                            ; Load register address from table
   147  2AEC  39 FF                 cmp     A, END_CONFIG_TABLE     ; End of table?
   148  2AEE  A01F                  jz      EndLoadConfig           ;   Yes, go wrap it up
   149  2AF0  4F                    mov     X, SP                   ;
   150  2AF1  48 FC 01              tst     [X-4], 1                ; Loading IO Bank 1?
   151  2AF4  A003                  jz      .IOBankNowSet           ;    No, Bank 0 is fine
   152  2AF6  71 10                 M8C_SetBank1                    ;   Yes, switch to Bank 1
   153  2AF8                    .IOBankNowSet:
   154  2AF8  54 FD                 mov     [X-3], A                ; Stash the register address
   155  2AFA  18                    pop     A                       ; Retrieve the table address
   156  2AFB  20                    pop     X
   157  2AFC  75                    inc     X                       ; Advance to the data byte
   158  2AFD  09 00                 adc     A, 0
   159  2AFF  10                    push    X                       ; Save the config table address again
   160  2B00  08                    push    A
   161  2B01  28                    romx                            ; load config data from the table
   162  2B02  4F                    mov     X, SP                   ; retrieve the register address
   163  2B03  59 FD                 mov     X, [X-3]
   164  2B05  61 00                 mov     reg[X], A               ; Configure the register
   165  2B07  18                    pop     A                       ; retrieve the table address
   166  2B08  20                    pop     X
   167  2B09  75                    inc     X                       ; advance to next table entry
   168  2B0A  09 00                 adc     A, 0
   169  2B0C  8FD7                  jmp     LoadConfigLp            ; loop to configure another register
   170  2B0E                    EndLoadConfig:
   171  2B0E  38 FC                 add     SP, -4
   172                              RAM_EPILOGUE RAM_USE_CLASS_2
      + 2B10  70 3F             	and	f, 0x3F
      + 2B12  71 80             	or	f, 0x80
   173  2B14  7F                    ret
   174                          
   175                          AREA InterruptRAM(ram, rel)
   176                          
   177  007F                    NO_SHADOW:
   178  007F                    _NO_SHADOW:
HI-TECH Software Macro Assembler (PSoC MCU) V9.61
Symbol Table                                                                                               Fri Jun 12 09:25:10 2015
                  _LoadConfigInit 2AB1    LoadConfigTBL_led_display_Bank0 2B15    LoadConfigTBL_led_display_Bank1 2BAC  
           LoadConfig_led_display 2AB8                             HITECH 0002                    FLAG_PGMODE_01b 0040  
                  FLAG_PGMODE_10b 0080            _LoadConfig_led_display 2AB8          SYSTEM_LARGE_MEMORY_MODEL 0001  
                        NO_SHADOW 007F                          TOOLCHAIN 0002                         _NO_SHADOW 007F  
                 FLAG_PGMODE_MASK 00C0                            RES_WDT 00E3                    RAM_USE_CLASS_1 0001  
                  RAM_USE_CLASS_2 0002                    RAM_USE_CLASS_3 0004                    RAM_USE_CLASS_4 0008  
LoadConfigTBL_led_display_Ordered 3E1C                         LoadConfig 2AD3                     LoadConfigInit 2AB1  
                 END_CONFIG_TABLE 00FF                      EndLoadConfig 2B0E                      FLAG_XIO_MASK 0010  
       SYSTEM_IDXPG_TRACKS_IDX_PP 0001                       LoadConfigLp 2AE4         SYSTEM_IDXPG_TRACKS_STK_PP 0000  
HI-TECH Software Macro Assembler (PSoC MCU) V9.61
                                                                                                           Fri Jun 12 09:25:10 2015
     1                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     2                          ;;;
     3                          ;;;  M8C.INC -- Microcontroller Device System Declarations
     4                          ;;;
     5                          ;;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
     6                          ;;;
     7                          ;;;  This file provides address constants, bit field masks and a set of macro
     8                          ;;;  facilities for the Cypress Semiconductor CY8C22045 Microcontroller devices.
     9                          ;;;
    10                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    11                          
    12                          ;;=============================================================================
    13                          ;; Definition of abbreviations used in the descriptions below
    14                          ;;  (RW)   The register or bit supports reads and writes
    15                          ;;  (W)    The register or bit is write-only
    16                          ;;  (R)    The register or bit is read-only
    17                          ;;  (#)    Access to the register is bit specific (see the family datasheet)
    18                          ;;  (RC)   The register or bit can be read, but writing a 0 will clear it,
    19                          ;;         writing a 1 will have no effect.
    20                          ;;=============================================================================
    21                          
    22                          ;;=============================================================================
    23                          ;;      System Registers
    24                          ;;=============================================================================
    25                          
    26                          ;----------------------------
    27                          ;  Flag Register Bit Fields
    28                          ;----------------------------
    29  00C0                    FLAG_PGMODE_MASK:  equ 0C0h     ; Paging control for > 256 bytes of RAM
    30  0000                    FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
    31  0040                    FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
    32  0080                    FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
    33  00C0                    FLAG_PGMODE_3:     equ 0C0h       ; Direct to CUR_PP page, indexed to STK_PP page
    34  0000                    FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
    35  0040                    FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
    36  0080                    FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
    37  00C0                    FLAG_PGMODE_11b:   equ 0C0h       ; Same as PGMODE_3
    38  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    39  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    40  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    41  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    42  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    43                          
    44                          
    45                          ;;=============================================================================
    46                          ;;      Register Space, Bank 0
    47                          ;;=============================================================================
    48                          
    49                          ;------------------------------------------------
    50                          ;  Port Registers
    51                          ;  Note: Also see this address range in Bank 1.
    52                          ;------------------------------------------------
    53                          ; Port 0
    54  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    55  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    56  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    57  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    58                          ; Port 1
    59  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    60  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    61  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    62  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    63                          ; Port 2
    64  0008                    PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
    65  0009                    PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
    66  000A                    PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
    67  000B                    PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
    68                          ; Port 3
    69  000C                    PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
    70  000D                    PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
    71  000E                    PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
    72  000F                    PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
    73                          ; Port 4
    74  0010                    PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
    75  0011                    PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
    76  0012                    PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
    77  0013                    PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
    78                          
    79                          ;------------------------------------------------
    80                          ;  Digital PSoC(tm) block Registers
    81                          ;  Note: Also see this address range in Bank 1.
    82                          ;------------------------------------------------
    83                          ; Digital PSoC block 00, Basic Type C
    84  0020                    DBC00DR0:     equ 20h          ; data register 0                          (#)
    85  0021                    DBC00DR1:     equ 21h          ; data register 1                          (W)
    86  0022                    DBC00DR2:     equ 22h          ; data register 2                          (RW)
    87  0023                    DBC00CR0:     equ 23h          ; control & status register 0              (#)
    88                          
    89                          ; Digital PSoC block 01, Basic Type C
    90  0024                    DBC01DR0:     equ 24h          ; data register 0                          (#)
    91  0025                    DBC01DR1:     equ 25h          ; data register 1                          (W)
    92  0026                    DBC01DR2:     equ 26h          ; data register 2                          (RW)
    93  0027                    DBC01CR0:     equ 27h          ; control & status register 0              (#)
    94                          
    95                          ; Digital PSoC block 02, Communications Type C
    96  0028                    DCC02DR0:     equ 28h          ; data register 0                          (#)
    97  0029                    DCC02DR1:     equ 29h          ; data register 1                          (W)
    98  002A                    DCC02DR2:     equ 2Ah          ; data register 2                          (RW)
    99  002B                    DCC02CR0:     equ 2Bh          ; control & status register 0              (#)
   100                          
   101                          ; Digital PSoC block 03, Communications Type C
   102  002C                    DCC03DR0:     equ 2Ch          ; data register 0                          (#)
   103  002D                    DCC03DR1:     equ 2Dh          ; data register 1                          (W)
   104  002E                    DCC03DR2:     equ 2Eh          ; data register 2                          (RW)
   105  002F                    DCC03CR0:     equ 2Fh          ; control & status register 0              (#)
   106                          
   107                          ; Digital PSoC block 10, Basic Type C
   108  0030                    DBC10DR0:     equ 30h          ; data register 0                          (#)
   109  0031                    DBC10DR1:     equ 31h          ; data register 1                          (W)
   110  0032                    DBC10DR2:     equ 32h          ; data register 2                          (RW)
   111  0033                    DBC10CR0:     equ 33h          ; control & status register 0              (#)
   112                          
   113                          ; Digital PSoC block 11, Basic Type C
   114  0034                    DBC11DR0:     equ 34h          ; data register 0                          (#)
   115  0035                    DBC11DR1:     equ 35h          ; data register 1                          (W)
   116  0036                    DBC11DR2:     equ 36h          ; data register 2                          (RW)
   117  0037                    DBC11CR0:     equ 37h          ; control & status register 0              (#)
   118                          
   119                          ; Digital PSoC block 12, Communications Type C
   120  0038                    DCC12DR0:     equ 38h          ; data register 0                          (#)
   121  0039                    DCC12DR1:     equ 39h          ; data register 1                          (W)
   122  003A                    DCC12DR2:     equ 3Ah          ; data register 2                          (RW)
   123  003B                    DCC12CR0:     equ 3Bh          ; control & status register 0              (#)
   124                          
   125                          ; Digital PSoC block 13, Communications Type C
   126  003C                    DCC13DR0:     equ 3Ch          ; data register 0                          (#)
   127  003D                    DCC13DR1:     equ 3Dh          ; data register 1                          (W)
   128  003E                    DCC13DR2:     equ 3Eh          ; data register 2                          (RW)
   129  003F                    DCC13CR0:     equ 3Fh          ; control & status register 0              (#)
   130                          
   131                          ;-------------------------------------
   132                          ;  Analog Control Registers
   133                          ;-------------------------------------
   134  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
   135  00C0                    AMX_IN_ACI3:          equ C0h    ; MASK: column 3 input mux
   136  0030                    AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
   137  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
   138  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
   139                          
   140  0061                    AMUX_CFG:      equ 61h          ; Analog MUX Configuration
   141  0030                    AMUX_CFG_INTCAP:       equ 30h    ;
   142  000E                    AMUX_CFG_MUXCLK:  	  equ 0Eh	 ;
   143  0001                    AMUX_CFG_EN:		  	  equ 01h	 ;
   144                          
   145                          ; old declarations DO NOT USE
   146  0061                    AMUXCFG:      equ 61h          ; Analog MUX Configuration
   147  0030                    AMUXCFG_INTCAP:       equ 30h    ;
   148  000E                    AMUXCFG_MUXCLK:  	  equ 0Eh	 ;
   149  0001                    AMUXCFG_EN:		  	  equ 01h	 ;
   150                          
   151  0062                    PWM_CR:       equ 62h          ; Pulse-Width Modulator Control
   152  0038                    PWM_CR_HIGH:          equ 38h    ; MASK: PWM high time
   153  0006                    PWM_CR_LOW:           equ 06h	 ; MASK: PWM low time
   154  0001                    PWM_CR_EN:            equ 01h	 ; MASK: Enable/Disable PWM function
   155                          
   156  0063                    ARF_CR:       equ 63h          ; Analog Reference Control
   157                          
   158  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus Register           (#)
   159  0080                    CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
   160  0040                    CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
   161  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
   162  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
   163  0008                    CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
   164  0004                    CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
   165  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
   166  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   167                          
   168  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   169  0020                    CMP_CR1_CLDIS1:       equ 20h    ; MASK: Column 1 comparator output latch
   170  0010                    CMP_CR1_CLDIS0:	      equ 10h    ; MASK: Column 0 comparator output latch
   171                          
   172  0068                    ADC0_CR:      equ 68h          ; Analog Column 0 Configuration
   173  0080                    ADC0_CR_CMPST:        equ 80h    ;
   174  0040                    ADC0_CR_LOREN:        equ 40h    ;
   175  0020                    ADC0_CR_SHEN:         equ 20h    ;
   176  0008                    ADC0_CR_CBSRC:        equ 08h    ;
   177  0004                    ADC0_CR_ADCM:         equ 04h    ;
   178  0001                    ADC0_CR_EN:	          equ 01h    ;
   179                          
   180  0069                    ADC1_CR:      equ 69h          ; Analog Column 1 Configuration
   181  0080                    ADC1_CR_CMPST:        equ 80h    ;
   182  0040                    ADC1_CR_LOREN:        equ 40h    ;
   183  0020                    ADC1_CR_SHEN:         equ 20h    ;
   184  0008                    ADC1_CR_CBSRC:        equ 08h    ;
   185  0004                    ADC1_CR_ADCM:         equ 04h    ;
   186  0001                    ADC1_CR_EN:	          equ 01h    ;
   187                          
   188                          ; Continuous Time PSoC block Type E Row 0 Col 0
   189  0072                    ACE00CR1:     equ 72h          ; Control register 1                       (RW)
   190  0073                    ACE00CR2:     equ 73h          ; Control register 2                       (RW)
   191                          
   192                          ; Continuous Time PSoC block Type E Row 0 Col 1
   193  0076                    ACE01CR1:     equ 76h          ; Control register 1                       (RW)
   194  0077                    ACE01CR2:     equ 77h          ; Control register 2                       (RW)
   195                          
   196                          ; Switched Cap PSoC blockType E Row 1 Col 0
   197  0080                    ASE10CR0:     equ 80h          ; Control register 0                       (RW)
   198                          
   199                          ; Switched Cap PSoC blockType E Row 1 Col 1
   200  0084                    ASE11CR0:     equ 84h          ; Control register 0                       (RW)
   201                          
   202                          ;-----------------------------------------------
   203                          ;  Global General Purpose Data Registers
   204                          ;-----------------------------------------------
   205  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   206  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   207+ 006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   208  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   209                          
   210                          ;------------------------------------------------
   211                          ;  Row Digital Interconnects
   212                          ;
   213                          ;  Note: the following registers are mapped into
   214                          ;  both register bank 0 AND register bank 1.
   215                          ;------------------------------------------------
   216                          
   217  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   218  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   219  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   220  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   221  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   222  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   223  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   224                          
   225  00B8                    RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
   226  00B9                    RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
   227  00BA                    RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
   228  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   229  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   230  00BD                    RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
   231  00BE                    RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
   232                          
   233                          ;-----------------------------------------------
   234                          ;  Ram Page Pointers
   235                          ;-----------------------------------------------
   236  00D0                    CUR_PP:      equ 0D0h           ; Current   Page Pointer
   237  00D1                    STK_PP:      equ 0D1h           ; Stack     Page Pointer
   238  00D3                    IDX_PP:      equ 0D3h           ; Index     Page Pointer
   239  00D4                    MVR_PP:      equ 0D4h           ; MVI Read  Page Pointer
   240  00D5                    MVW_PP:      equ 0D5h           ; MVI Write Page Pointer
   241                          
   242                          ;------------------------------------------------
   243                          ;  I2C Configuration Registers
   244                          ;------------------------------------------------
   245  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   246  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   247  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   248  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   249  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   250  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   251  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   252  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   253  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   254  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   255                          
   256  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   257  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   258  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   259  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   260  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   261  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   262  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   263  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   264  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   265                          
   266  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   267                          
   268  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   269  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   270  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   271  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   272  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   273                          
   274                          ;------------------------------------------------
   275                          ;  System and Global Resource Registers
   276                          ;------------------------------------------------
   277  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   278                                                         ; Use INT_MSK0 bit field masks
   279  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   280                                                         ; Use INT_MSK1 bit field masks
   281  00DC                    INT_CLR2:     equ 0DCh          ; Interrupt Clear Register 2               (RW)
   282                                                         ; Use INT_MSK2 bit field masks
   283  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   284                                                         ; Use INT_MSK3 bit field masks
   285                          
   286  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   287  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   288  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   289                          
   290  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   291  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   292  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   293  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   294  0010                    INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
   295  0008                    INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
   296  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   297  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   298  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   299                          
   300  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   301  0080                    INT_MSK1_DCC13:            equ 80h ; MASK: enable/disable DCC13 block interrupt
   302  0040                    INT_MSK1_DCC12:            equ 40h ; MASK: enable/disable DCC12 block interrupt
   303  0020                    INT_MSK1_DBC11:            equ 20h ; MASK: enable/disable DBC11 block interrupt
   304  0010                    INT_MSK1_DBC10:            equ 10h ; MASK: enable/disable DBC10 block interrupt
   305  0008                    INT_MSK1_DCC03:            equ 08h ; MASK: enable/disable DCC03 block interrupt
   306  0004                    INT_MSK1_DCC02:            equ 04h ; MASK: enable/disable DCC02 block interrupt
   307  0002                    INT_MSK1_DBC01:            equ 02h ; MASK: enable/disable DBC01 block interrupt
   308  0001                    INT_MSK1_DBC00:            equ 01h ; MASK: enable/disable DBC00 block interrupt
   309                          
   310  00DF                    INT_MSK2:     equ DFh			; Custom block Mask Register			   (RW)
   311  0010                    INT_MSK2_SARADC:           equ 10h ; MASK: enable/disable SARADC block interrupt
   312  0020                    INT_MSK2_CSD0:             equ 20h ; MASK: enable/disable CSD0 block interrupt
   313  0040                    INT_MSK2_CSD1:             equ 40h ; MASK: enable/disable CSD1 block interrupt
   314  0080                    INT_MSK2_RTC:              equ 80h ; MASK: enable/disable RTC block interrupt
   315                          
   316  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   317  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   318                          
   319                          ;------------------------------------------------------
   320                          ;  MAC Registers
   321                          ;------------------------------------------------------
   322                          
   323  00E8                    MUL0_X:       equ 0E8h          ; Multiply Input X Register                (W)
   324  00E9                    MUL0_Y:       equ 0E9h          ; Multiply Input Y Register                (W)
   325  00EA                    MUL0_DH:      equ 0EAh          ; Multiply Result High Byte Register       (R)
   326  00EB                    MUL0_DL:      equ 0EBh          ; Multiply Result Low Byte Register        (R)
   327                          
   328  00EC                    ACC0_DR1:     equ 0ECh          ; Accumulator Data Register 1              (RW)
   329  00ED                    ACC0_DR0:     equ 0EDh          ; Accumulator Data Register 0              (RW)
   330  00EE                    ACC0_DR3:     equ 0EEh          ; Accumulator Data Register 3              (RW)
   331  00EF                    ACC0_DR2:     equ 0EFh          ; Accumulator Data Register 2              (RW)
   332                          
   333                          ; DECIMATOR Control Registers
   334  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   335  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   336                          
   337                          ;------------------------------------------------------
   338                          ;  System Status and Control Registers
   339                          ;
   340                          ;  Note: The following registers are mapped into both
   341                          ;        register bank 0 AND register bank 1.
   342                          ;------------------------------------------------------
   343  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   344                                                             ; Use FLAG_ masks defined at top of file
   345                          
   346  00FD                    DAC_D:        equ 0FDh		   ; DAC Data Register                        (RW)
   347                          
   348  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   349  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: flag, Internal Reset Status bit
   350  0010                    CPU_SCR1_SLIMO:         equ 10h	   ; MASK: Slow IMO (internal main osc) enable
   351  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   352  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   353  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   354                          
   355  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   356  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   357  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   358  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   359  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   360  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   361                          
   362                          ;------------------------------------------------------
   363                          ;  Neon Capsense Digital Control Registers
   364                          ;------------------------------------------------------
   365  0050                    CSD0_DR0_L:				equ 50h		; Capsense 0 data low 0				(RW)
   366  0054                    CSD0_DR0_H:				equ 54h		; Capsense 0 data high 0			(RW)
   367  0058                    CSD1_DR0_L:				equ 58h		; Capsense 1 data low 0				(RW)
   368  005C                    CSD1_DR0_H:				equ 5Ch		; Capsense 1 data high 0			(RW)
   369  0051                    CSD0_DR1_L:				equ 51h		; Capsense 0 data low 1				(RW)
   370  0055                    CSD0_DR1_H:				equ 55h		; Capsense 0 data high 1			(RW)
   371  0059                    CSD1_DR1_L:				equ 59h		; Capsense 1 data low 1				(RW)
   372  005D                    CSD1_DR1_H:				equ 5Dh		; Capsense 1 data high 1			(RW)
   373  0052                    CSD0_CNT_L:				equ 52h		; Capsense 0 counter low			(RW)
   374  0056                    CSD0_CNT_H:				equ 56h		; Capsense 0 counter high			(RW)
   375  005A                    CSD1_CNT_L:				equ 5Ah		; Capsense 1 counter low			(RW)
   376  005E                    CSD1_CNT_H:				equ	5Eh		; Capsense 1 counter high			(RW)
   377  0053                    CSD0_CR0:				equ 53h		; Capsense 0 control 0				(RW)
   378  005B                    CSD1_CR0:				equ 5Bh		; Capsense 1 control 0				(RW)
   379  0057                    CSD0_CR1:				equ 57h		; Capsense 0 control 1				(RW)
   380  005F                    CSD1_CR1:				equ 5Fh		; Capsense 1 control 1				(RW)
   381                          
   382                          ;------------------------------------------------------
   383                          ;  Neon Analog Registers
   384                          ;------------------------------------------------------
   385  0065                    ASY_CR:					equ 65h		; Analog Synchronization Control	(RW)
   386  006A                    ADC_DH:					equ 6Ah		; ADC data high						(RW)
   387  006B                    ADC_DL:					equ 6Bh		; ADC data low						(RW)
   388  00C8                    PWMVREF0:				equ C8h		; PWM Voltage Reference 0			(RW)
   389  00C9                    PWMVREF1:				equ C9h		; PWM Voltage Reference 1			(RW)
   390  00CB                    PWMSRC:					equ CBh		; PWM Source						(RW)
   391  00CA                    IDACMODE:				equ CAh		; IDAC Mode							(RW)
   392  00FC                    IDACR_D:				equ FCh		; Analog Mux DAC data 0				(RW)
   393  00FD                    IDACL_D:				equ FDh		; Analog Mux DAC data 1				(RW)
   394                          
   395                          ;------------------------------------------------------
   396                          ;  Neon Digital Registers
   397                          ;------------------------------------------------------
   398  00B7                    RDI0DSM:				equ B7h		; Row Digital Interconnect input select 0	(RW)
   399  00BF                    RDI1DSM:				equ BFh		; Row Digital Interconnect input select 1	(RW)
   400                          
   401                          ;------------------------------------------------------
   402                          ;  Neon Test Registers
   403                          ;------------------------------------------------------
   404  00CC                    TSCR0:					equ CCh		; Tsource 0							(RW)
   405  00CD                    TSCMPH:					equ CDh		; TSCMP high						(RW)
   406  00CE                    TSCMPL:					equ CEh		; TSCMP low							(RW)
   407  00CF                    TSCR1:					equ CFh		; Tsource 1							(RW)
   408                          
   409                          ;;=============================================================================
   410                          ;;      Register Space, Bank 1
   411                          ;;=============================================================================
   412                          
   413                          ;------------------------------------------------
   414                          ;  Port Registers
   415                          ;  Note: Also see this address range in Bank 0.
   416                          ;------------------------------------------------
   417                          ; Port 0
   418  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   419  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   420  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   421  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   422                          
   423                          ; Port 1
   424  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   425  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   426  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   427  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   428                          
   429                          ; Port 2
   430  0008                    PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
   431  0009                    PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
   432  000A                    PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
   433  000B                    PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
   434                          
   435                          ; Port 3
   436  000C                    PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
   437  000D                    PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
   438  000E                    PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
   439  000F                    PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
   440                          
   441                          ; Port 4
   442  0010                    PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
   443  0011                    PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
   444  0012                    PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
   445  0013                    PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
   446                          
   447                          ;------------------------------------------------
   448                          ;  Digital PSoC(tm) block Registers
   449                          ;  Note: Also see this address range in Bank 0.
   450                          ;------------------------------------------------
   451                          
   452                          ; Digital PSoC block 00, Basic Type C
   453  0020                    DBC00FN:      equ 20h          ; Function Register                        (RW)
   454  0021                    DBC00IN:      equ 21h          ;    Input Register                        (RW)
   455  0022                    DBC00OU:      equ 22h          ;   Output Register                        (RW)
   456  0023                    DBC00CR1:     equ 23h          ;   control & status register 1            (RW)
   457                          
   458                          ; Digital PSoC block 01, Basic Type C
   459  0024                    DBC01FN:      equ 24h          ; Function Register                        (RW)
   460  0025                    DBC01IN:      equ 25h          ;    Input Register                        (RW)
   461  0026                    DBC01OU:      equ 26h          ;   Output Register                        (RW)
   462  0027                    DBC01CR1:     equ 27h          ;   control & status register 1            (RW)
   463                          
   464                          ; Digital PSoC block 02, Communications Type C
   465  0028                    DCC02FN:      equ 28h          ; Function Register                        (RW)
   466  0029                    DCC02IN:      equ 29h          ;    Input Register                        (RW)
   467  002A                    DCC02OU:      equ 2Ah          ;   Output Register                        (RW)
   468  002B                    DBC02CR1:     equ 2Bh          ;   control & status register 1            (RW)
   469                          
   470                          ; Digital PSoC block 03, Communications Type C
   471  002C                    DCC03FN:      equ 2Ch          ; Function Register                        (RW)
   472  002D                    DCC03IN:      equ 2Dh          ;    Input Register                        (RW)
   473  002E                    DCC03OU:      equ 2Eh          ;   Output Register                        (RW)
   474  0029                    DBC03CR1:     equ 29h          ;   control & status register 1            (RW)
   475                          
   476                          ; Digital PSoC block 10, Basic Type C
   477  0030                    DBC10FN:      equ 30h          ; Function Register                        (RW)
   478  0031                    DBC10IN:      equ 31h          ;    Input Register                        (RW)
   479  0032                    DBC10OU:      equ 32h          ;   Output Register                        (RW)
   480  0033                    DBC10CR1:     equ 33h          ;   control & status register 1            (RW)
   481                          
   482                          ; Digital PSoC block 11, Basic Type C
   483  0034                    DBC11FN:      equ 34h          ; Function Register                        (RW)
   484  0035                    DBC11IN:      equ 35h          ;    Input Register                        (RW)
   485  0036                    DBC11OU:      equ 36h          ;   Output Register                        (RW)
   486  0037                    DBC11CR1:     equ 37h          ;   control & status register 1            (RW)
   487                          
   488                          ; Digital PSoC block 12, Communications Type C
   489  0038                    DCC12FN:      equ 38h          ; Function Register                        (RW)
   490  0039                    DCC12IN:      equ 39h          ;    Input Register                        (RW)
   491  003A                    DCC12OU:      equ 3Ah          ;   Output Register                        (RW)
   492  003B                    DBC12CR1:     equ 3Bh          ;   control & status register 1            (RW)
   493                          
   494                          ; Digital PSoC block 13, Communications Type C
   495  003C                    DCC13FN:      equ 3Ch          ; Function Register                        (RW)
   496  003D                    DCC13IN:      equ 3Dh          ;    Input Register                        (RW)
   497  003E                    DCC13OU:      equ 3Eh          ;   Output Register                        (RW)
   498  003F                    DBC13CR1:     equ 3Fh          ;   control & status register 1            (RW)
   499                          
   500                          ;------------------------------------------------
   501                          ;  System and Global Resource Registers
   502                          ;  Note: Also see this address range in Bank 0.
   503                          ;------------------------------------------------
   504                          
   505  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   506  00C0                    CLK_CR0_ACOLUMN_3:    equ C0h    ; MASK: Specify clock for analog cloumn
   507  0030                    CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
   508  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   509  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   510                          
   511  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   512  0018                    CLK_CR1_ACLK1:        equ 18h    ; MASK: Digital PSoC block for analog source
   513  0003                    CLK_CR1_ACLK0:        equ 03h    ; MASK: Digital PSoC block for analog source
   514                          
   515  0003                    CLK_CR1_ACLK2:        equ 03h    ; Deprecated do not use
   516                          
   517  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   518  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   519                          
   520  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   521  000F                    AMD_CR0_AMOD0:        equ 0Fh    ; MASK: Modulation source for analog column 0
   522                          
   523  0064                    CMP_GO_EN:    equ 64h          ; Comparator Bus To Global Out Enable      (RW)
   524  0080                    CMP_GO_EN_GOO5:       equ 80h    ; MASK: Selected Col 1 signal to GOO5
   525  0040                    CMP_GO_EN_GOO1:       equ 40h    ; MASK: Selected Col 1 signal to GOO1
   526  0030                    CMP_GO_EN_SEL1:       equ 30h    ; MASK: Column 1 Signal Select
   527  0008                    CMP_GO_EN_GOO4:       equ 08h    ; MASK: Selected Col 0 signal to GOO4
   528  0004                    CMP_GO_EN_GOO0:       equ 04h    ; MASK: Selected Col 0 signal to GOO0
   529  0003                    CMP_GO_EN_SEL0:       equ 03h    ; MASK: Column 0 Signal Select
   530                          
   531  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   532  000F                    AMD_CR1_AMOD1:        equ 0Fh    ; MASK: Modulation ctrl for analog column 1
   533                          
   534  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   535  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   536  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   537                          
   538  006B                    CLK_CR3:      equ 6Bh          ; Analog Clock Source Control Register 3   (RW)
   539  0040                    CLK_CR3_SYS1:         equ 40h    ; MASK: Analog Clock 1 selection
   540  0030                    CLK_CR3_DIVCLK1:      equ 30h    ; MASK: Analog Clock 1 divider
   541  0004                    CLK_CR3_SYS0:         equ 04h    ; MASK: Analog Clock 0 selection
   542  0003                    CLK_CR3_DIVCLK0:      equ 03h    ; MASK: Analog Clock 0 divider
   543                          
   544                          ;------------------------------------------------
   545                          ;  Global Digital Interconnects
   546                          ;------------------------------------------------
   547                          
   548  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   549  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   550  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   551  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   552                          
   553  00A0                    GDI_O_IN_CR:  equ 0A0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   554  00A1                    GDI_E_IN_CR:  equ 0A1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   555  00A2                    GDI_O_OU_CR:  equ 0A2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   556  00A3                    GDI_E_OU_CR:  equ 0A3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   557                          
   558  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   559  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   560                          
   561                          ;------------------------------------------------
   562                          ;  Analog Mux Bus Port Enable Bits
   563                          ;------------------------------------------------
   564  00D8                    MUX_CR0:      equ 0D8h          ; Analog Mux Port 0 Bit Enables Register
   565  00D9                    MUX_CR1:      equ 0D9h          ; Analog Mux Port 1 Bit Enables Register
   566  00DA                    MUX_CR2:      equ 0DAh          ; Analog Mux Port 2 Bit Enables Register
   567  00DB                    MUX_CR3:      equ 0DBh          ; Analog Mux Port 3 Bit Enables Register
   568  00EC                    MUX_CR4:      equ 0ECh          ; Analog Mux Port 4 Bit Enables Register
   569                          
   570                          ;------------------------------------------------
   571                          ;  Clock and System Control Registers
   572                          ;------------------------------------------------
   573                          
   574  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   575  0080                    OSC_GO_EN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   576  0040                    OSC_GO_EN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   577  0020                    OSC_GO_EN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   578  0010                    OSC_GO_EN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   579  0008                    OSC_GO_EN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   580  0004                    OSC_GO_EN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   581  0002                    OSC_GO_EN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   582  0001                    OSC_GO_EN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   583                          
   584  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   585  0003                    OSC_CR4_VC3SEL:       equ 03h    ; MASK: System VC3 Clock source
   586                          
   587  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   588                          
   589  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   590  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   591  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   592  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   593  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   594  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   595  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   596  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   597  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   598  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   599  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   600  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   601  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   602  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   603  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   604  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   605  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   606  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   607                          
   608  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   609  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   610  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   611                          
   612  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   613  0080                    OSC_CR2_PLLGAIN:      equ 80h    ; MASK: High/Low gain
   614  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   615  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   616  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   617                          
   618  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   619  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   620  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   621  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   622  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   623  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   624  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   625  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   626                          
   627  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   628  0008                    VLT_CMP_NOWRITE:      equ 08h    ; MASK: Vcc below Flash Write level
   629  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   630  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   631  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   632                          
   633  00E5                    ADC0_TR:      equ 0E5h          ; ADC Column 0 Trim Register
   634  00E6                    ADC1_TR:      equ 0E6h          ; ADC Column 1 Trim Register
   635                          
   636  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   637  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   638  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   639  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   640                          
   641  00FA                    FLS_PR1:      equ 0FAh          ; Flash Program Register 1                 (RW)
   642  0003                    FLS_PR1_BANK:         equ 03h    ; MASK: Select Active Flash Bank
   643                          
   644  00FD                    DAC_CR0:       equ 0FDh          ; Analog Mux DAC Control Register 0
   645  00DC                    DAC_CR1:       equ 0DCh          ; Analog Mux DAC Control Register 1
   646  0008                    DAC_CR_IRANGE:        equ 08h    ; MASK: Sets the DAC Range low or high
   647  0006                    DAC_CR_OSCMODE:       equ 06h    ; MASK: Defines the reset mode for AMux
   648  0001                    DAC_CR_ENABLE:        equ 01h    ; MASK: Enable/Disable DAC function
   649                          
   650                          ;------------------------------------------------
   651                          ;  I2C Control Registers
   652                          ;------------------------------------------------
   653                          
   654  00AD                    I2C_ADDR:    equ 0ADh          ; I2C Address Register (RW)
   655                          
   656                          ;------------------------------------------------------
   657                          ;  Neon Analog Registers
   658                          ;------------------------------------------------------
   659  0053                    VDAC50CR0:		equ 53h			; V DAC5 control 0				(RW)
   660  0057                    VDAC51CR0:		equ 57h			; V DAC5 control 1				(RW)
   661  00A8                    ADC_CR0:		equ A8h			; ADC control 0					(RW)
   662  00A9                    ADC_CR1:		equ A9h			; ADC control 1					(RW)
   663  00AA                    ADC_CR2:		equ AAh			; ADC control 2					(RW)
   664  00AB                    ADC_CR3TRIM:	equ ABh			; ADC control 3					(RW)
   665  00AC                    ADC_CR4:		equ ACh			; ADC control 4					(RW)
   666  00E7                    VDAC_TRIM:		equ E7h			; V DAC trim					(RW)
   667                          
   668                          ;------------------------------------------------------
   669                          ;  Neon Current Sense CMP Registers
   670                          ;------------------------------------------------------
   671  0050                    CMP0CR1:		equ 50h			; CMP0 control 1				(RW)
   672  0051                    CMP0CR2:		equ 51h			; CMP0 control 2				(RW)
   673  0054                    CMP1CR1:		equ 54h			; CMP1 control 1				(RW)
   674  0055                    CMP1CR2:		equ 55h			; CMP1 control 2				(RW)
   675  0058                    CSCMPCR0:		equ 58h			; CSCMP control 0				(RW)
   676  0059                    CSCMPGOEN:		equ 59h			; CSCMO global out enable		(RW)
   677  005A                    CSLUTCR0:		equ 5Ah			; CSLUT control 0				(RW)
   678  005B                    CMPCOLMUX:		equ 5Bh			; CMP Column Mux				(RW)
   679  005C                    CMPPWMCR:		equ 5Ch			; CMP PWM control				(RW)
   680  005D                    CMPFLTCR:		equ 5Dh			; CMP filter control			(RW)
   681  005E                    CMPCLK1:		equ 5Eh			; CMP clock 1					(RW)
   682  005F                    CMPCLK0:		equ 5Fh			; CMP clock 0					(RW)
   683                          
   684                          ;------------------------------------------------------
   685                          ;  Neon Real Time Clock Registers
   686                          ;------------------------------------------------------
   687  00A4                    RTCH:			equ A4h			; Real time current hour		(RW)
   688  00A5                    RTCM:			equ A5h			; Real time current minute		(RW)
   689  00A6                    RTCS:			equ A6h			; Real time current second		(RW)
   690  00A7                    RTCCR:			equ A7h			; Real time clock control		(RW)
   691                          
   692                          ;------------------------------------------------------
   693                          ;  Analog MUX Config Registers
   694                          ;------------------------------------------------------
   695                          
   696  006A                    AMUX_CFG1:			equ 6Ah  ; Analog MUX Configuration 1
   697  0020                    AMUX_CFG1_GOINVR:	equ 20h  ;
   698  0010                    AMUX_CFG1_GOINVL:  	equ 10h	 ;
   699  000C                    AMUX_CFG1_AMUXMODR:	equ 0Ch	 ;
   700  0003                    AMUX_CFG1_AMUXMODL:	equ 03h	 ;
   701                          
   702                          ;;=============================================================================
   703                          ;;      M8C System Macros
   704                          ;;  These macros should be used when their functions are needed.
   705                          ;;=============================================================================
   706                          
   707                          ;----------------------------------------------------
   708                          ;  Swapping Register Banks
   709                          ;----------------------------------------------------
   710                              macro M8C_SetBank0
   711                              and   F, ~FLAG_XIO_MASK
   712  3C41                        endm
   713                          
   714                              macro M8C_SetBank1
   715                              or    F, FLAG_XIO_MASK
   716  3C41                        endm
   717                          
   718                          ;----------------------------------------------------
   719                          ;  Global Interrupt Enable/Disable
   720                          ;----------------------------------------------------
   721                              macro M8C_EnableGInt
   722                              or    F, FLAG_GLOBAL_IE
   723  3C41                        endm
   724                          
   725                              macro M8C_DisableGInt
   726                              and   F, ~FLAG_GLOBAL_IE
   727  3C41                        endm
   728                          
   729                          ;----------------------------------------------------
   730                          ;  Enable/Disable Interrupt Mask
   731                          ;
   732                          ;  Use the following macros to enable/disable
   733                          ;  bits in the Interrupt mask registers,
   734                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   735                          ;
   736                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   737                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   738                          ;
   739                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   740                          ;        and MASK is the bit set to enable or disable
   741                          ;----------------------------------------------------
   742                          ; Disable Interrupt Bit Mask(s)
   743                              macro M8C_DisableIntMask
   744                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   745  3C41                        endm
   746                          
   747                          ; Enable Interrupt Bit Mask(s)
   748                              macro M8C_EnableIntMask
   749                              or    reg[@0], @1               ; enable specified interrupt enable bit
   750  3C41                        endm
   751                          
   752                          ;----------------------------------------------------
   753                          ;  Clear Posted Interrupt Flag Mask
   754                          ;
   755                          ;  Use the following macros to clear the
   756                          ;  bits in the Interrupt Clear registers,
   757                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   758                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   759                          ;
   760                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   761                          ;        and MASK is the bit set to enable or disable
   762                          ;----------------------------------------------------
   763                              macro M8C_ClearIntFlag
   764                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   765  3C41                        endm
   766                          
   767                          ;----------------------------------------------------
   768                          ;  Power-On Reset & WatchDog Timer Functions
   769                          ;----------------------------------------------------
   770                              macro M8C_EnableWatchDog
   771                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   772  3C41                        endm
   773                          
   774                              macro M8C_ClearWDT
   775                              mov   reg[RES_WDT], 00h
   776  3C41                        endm
   777                          
   778                              macro M8C_ClearWDTAndSleep
   779                              mov   reg[RES_WDT], 38h
   780  3C41                        endm
   781                          
   782                          ;----------------------------------------------------
   783                          ;  Sleep, CPU Stop & Software Reset
   784                          ;----------------------------------------------------
   785                              macro M8C_Sleep
   786                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   787                              ; The next instruction to be executed depends on the state of the
   788                              ; various interrupt enable bits. If some interrupts are enabled
   789                              ; and the global interrupts are disabled, the next instruction will
   790                              ; be the one that follows the invocation of this macro. If global
   791                              ; interrupts are also enabled then the next instruction will be
   792                              ; from the interrupt vector table. If no interrupts are enabled
   793                              ; then the CPU sleeps forever.
   794  3C41                        endm
   795                          
   796                              macro M8C_Stop
   797                              ; In general, you probably don't want to do this, but here's how:
   798                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   799                              ; Next instruction to be executed is located in the interrupt
   800                              ; vector table entry for Power-On Reset.
   801  3C41                        endm
   802                          
   803                              macro M8C_Reset
   804                              ; Restore CPU to the power-on reset state.
   805                              mov A, 0
   806                              SSC
   807                              ; Next non-supervisor instruction will be at interrupt vector 0.
   808  3C41                        endm
   809                          
   810                          ;----------------------------------------------------
   811                          ; ImageCraft Code Compressor Actions
   812                          ;----------------------------------------------------
   813                              ; Suspend Code Compressor
   814                              ; Must not span a RET or RETI instruction
   815                              ; without resuming code compression
   816                              macro Suspend_CodeCompressor
   817                              or   F, 0
   818  3C41                        endm
   819                          
   820                              ; Resume Code Compression
   821                              macro Resume_CodeCompressor
   822                              add  SP, 0
   823  3C41                        endm
     1                          ;  Generated by PSoC Designer 5.4.2946
     2                          ;
     3                          ; =============================================================================
     4                          ; FILENAME: PSoCConfigTBL.asm
     5                          ;  
     6                          ; Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
     7                          ;  
     8                          ; NOTES:
     9                          ; Do not modify this file. It is generated by PSoC Designer each time the
    10                          ; generate application function is run. The values of the parameters in this
    11                          ; file can be modified by changing the values of the global parameters in the
    12                          ; device editor.
    13                          ;  
    14                          ; =============================================================================
    15                           
    16                          include "m8c.inc"
    17                          ;  Personalization tables 
    18                          export LoadConfigTBL_led_display_Bank1
    19                          export LoadConfigTBL_led_display_Bank0
    20                          export LoadConfigTBL_led_display_Ordered
    21                          AREA lit(rom, rel)
    22  2B15                    LoadConfigTBL_led_display_Bank0:
    23                          ;  Instance name PWM8_BL, User Module PWM8
    24                          ;       Instance name PWM8_BL, Block Name PWM8(DBC10)
    25  2B15  33 00             	db		33h, 00h		;PWM8_BL_CONTROL_REG(DBC10CR0)
    26  2B17  31 00             	db		31h, 00h		;PWM8_BL_PERIOD_REG(DBC10DR1)
    27  2B19  32 00             	db		32h, 00h		;PWM8_BL_COMPARE_REG(DBC10DR2)
    28                          ;  Instance name SAR10, User Module SAR10
    29                          ;  Instance name Timer16, User Module Timer16
    30                          ;       Instance name Timer16, Block Name TIMER16_LSB(DBC00)
    31  2B1B  23 00             	db		23h, 00h		;Timer16_CONTROL_LSB_REG(DBC00CR0)
    32  2B1D  21 80             	db		21h, 80h		;Timer16_PERIOD_LSB_REG(DBC00DR1)
    33  2B1F  22 28             	db		22h, 28h		;Timer16_COMPARE_LSB_REG(DBC00DR2)
    34                          ;       Instance name Timer16, Block Name TIMER16_MSB(DBC01)
    35  2B21  27 04             	db		27h, 04h		;Timer16_CONTROL_MSB_REG(DBC01CR0)
    36  2B23  25 25             	db		25h, 25h		;Timer16_PERIOD_MSB_REG(DBC01DR1)
    37  2B25  26 23             	db		26h, 23h		;Timer16_COMPARE_MSB_REG(DBC01DR2)
    38                          ;  Instance name UART_Board, User Module UART
    39                          ;       Instance name UART_Board, Block Name RX(DCC13)
    40  2B27  3F 00             	db		3fh, 00h		;UART_Board_RX_CONTROL_REG(DCC13CR0)
    41  2B29  3D 00             	db		3dh, 00h		;UART_Board_(DCC13DR1)
    42  2B2B  3E 00             	db		3eh, 00h		;UART_Board_RX_BUFFER_REG (DCC13DR2)
    43                          ;       Instance name UART_Board, Block Name TX(DCC12)
    44  2B2D  3B 00             	db		3bh, 00h		;UART_Board_TX_CONTROL_REG(DCC12CR0)
    45  2B2F  39 00             	db		39h, 00h		;UART_Board_TX_BUFFER_REG (DCC12DR1)
    46  2B31  3A 00             	db		3ah, 00h		;UART_Board_(DCC12DR2)
    47                          ;  Instance name UART_Sensor, User Module UART
    48                          ;       Instance name UART_Sensor, Block Name RX(DCC03)
    49  2B33  2F 00             	db		2fh, 00h		;UART_Sensor_RX_CONTROL_REG(DCC03CR0)
    50  2B35  2D 00             	db		2dh, 00h		;UART_Sensor_(DCC03DR1)
    51  2B37  2E 00             	db		2eh, 00h		;UART_Sensor_RX_BUFFER_REG (DCC03DR2)
    52                          ;       Instance name UART_Sensor, Block Name TX(DCC02)
    53  2B39  2B 00             	db		2bh, 00h		;UART_Sensor_TX_CONTROL_REG(DCC02CR0)
    54  2B3B  29 00             	db		29h, 00h		;UART_Sensor_TX_BUFFER_REG (DCC02DR1)
    55  2B3D  2A 00             	db		2ah, 00h		;UART_Sensor_(DCC02DR2)
    56                          ;  Global Register values Bank 0
    57  2B3F  6A 00             	db		6ah, 00h		; ADCDataHigh register (ADC_DH)
    58  2B41  6B 00             	db		6bh, 00h		; ADCDataLow register (ADC_DL)
    59  2B43  60 09             	db		60h, 09h		; AnalogColumnInputSelect register (AMX_IN)
    60  2B45  66 00             	db		66h, 00h		; AnalogComparatorControl1 register (CMP_CR1)
    61  2B47  61 00             	db		61h, 00h		; AnalogMuxBusConfig register (AMUX_CFG)
    62  2B49  FC 00             	db		fch, 00h		; AnalogMuxDACData:0 register (IDACR_D)
    63  2B4B  FD 00             	db		fdh, 00h		; AnalogMuxDACData:1 register (IDACL_D)
    64  2B4D  65 00             	db		65h, 00h		; AnalogSynchronizationControl register (ASY_CR)
    65  2B4F  53 00             	db		53h, 00h		; CSD0Control0 register (CSD0_CR0)
    66  2B51  57 00             	db		57h, 00h		; CSD0Control1 register (CSD0_CR1)
    67  2B53  56 00             	db		56h, 00h		; CSD0CounterHigh register (CSD0_CNT_H)
    68  2B55  52 00             	db		52h, 00h		; CSD0CounterLow register (CSD0_CNT_L)
    69  2B57  54 00             	db		54h, 00h		; CSD0Data0High register (CSD0_DR0_H)
    70  2B59  50 00             	db		50h, 00h		; CSD0Data0Low register (CSD0_DR0_L)
    71  2B5B  55 00             	db		55h, 00h		; CSD0Data1High register (CSD0_DR1_H)
    72  2B5D  51 00             	db		51h, 00h		; CSD0Data1Low register (CSD0_DR1_L)
    73  2B5F  5B 00             	db		5bh, 00h		; CSD1Control0 register (CSD1_CR0)
    74  2B61  5F 00             	db		5fh, 00h		; CSD1Control1 register (CSD1_CR1)
    75  2B63  5E 00             	db		5eh, 00h		; CSD1CounterHigh register (CSD1_CNT_H)
    76  2B65  5A 00             	db		5ah, 00h		; CSD1CounterLow register (CSD1_CNT_L)
    77  2B67  5C 00             	db		5ch, 00h		; CSD1Data0High register (CSD1_DR0_H)
    78  2B69  58 00             	db		58h, 00h		; CSD1Data0Low register (CSD1_DR0_L)
    79  2B6B  5D 00             	db		5dh, 00h		; CSD1Data1High register (CSD1_DR1_H)
    80  2B6D  59 00             	db		59h, 00h		; CSD1Data1Low register (CSD1_DR1_L)
    81  2B6F  E6 00             	db		e6h, 00h		; DecimatorControl_0 register (DEC_CR0)
    82  2B71  E7 00             	db		e7h, 00h		; DecimatorControl_1 register (DEC_CR1)
    83  2B73  E4 00             	db		e4h, 00h		; DecimatorDataHigh register (DEC_DH)
    84  2B75  E5 00             	db		e5h, 00h		; DecimatorDataLow register (DEC_DL)
    85  2B77  D6 00             	db		d6h, 00h		; I2CConfig register (I2CCFG)
    86  2B79  CA 00             	db		cah, 00h		; IDACMode register (IDACMODE)
    87  2B7B  CB 00             	db		cbh, 00h		; PWMSource register (PWMSRC)
    88  2B7D  C8 00             	db		c8h, 00h		; PWMVoltageReference_0 register (PWMVREF0)
    89  2B7F  C9 00             	db		c9h, 00h		; PWMVoltageReference_1 register (PWMVREF1)
    90  2B81  62 00             	db		62h, 00h		; PWM_Control register (PWM_CR)
    91  2B83  B7 00             	db		b7h, 00h		; RowDigitalInterconnectInputSelect:0 register (RDI0DSM)
    92  2B85  BF 00             	db		bfh, 00h		; RowDigitalInterconnectInputSelect:1 register (RDI1DSM)
    93  2B87  B0 00             	db		b0h, 00h		; Row_0_InputMux register (RDI0RI)
    94  2B89  B1 00             	db		b1h, 00h		; Row_0_InputSync register (RDI0SYN)
    95  2B8B  B2 00             	db		b2h, 00h		; Row_0_LogicInputAMux register (RDI0IS)
    96  2B8D  B3 33             	db		b3h, 33h		; Row_0_LogicSelect_0 register (RDI0LT0)
    97  2B8F  B4 33             	db		b4h, 33h		; Row_0_LogicSelect_1 register (RDI0LT1)
    98  2B91  B5 01             	db		b5h, 01h		; Row_0_OutputDrive_0 register (RDI0SRO0)
    99  2B93  B6 00             	db		b6h, 00h		; Row_0_OutputDrive_1 register (RDI0SRO1)
   100  2B95  B8 55             	db		b8h, 55h		; Row_1_InputMux register (RDI1RI)
   101  2B97  B9 00             	db		b9h, 00h		; Row_1_InputSync register (RDI1SYN)
   102  2B99  BA 10             	db		bah, 10h		; Row_1_LogicInputAMux register (RDI1IS)
   103  2B9B  BB 33             	db		bbh, 33h		; Row_1_LogicSelect_0 register (RDI1LT0)
   104  2B9D  BC 33             	db		bch, 33h		; Row_1_LogicSelect_1 register (RDI1LT1)
   105  2B9F  BD 02             	db		bdh, 02h		; Row_1_OutputDrive_0 register (RDI1SRO0)
   106  2BA1  BE 10             	db		beh, 10h		; Row_1_OutputDrive_1 register (RDI1SRO1)
   107  2BA3  CD 00             	db		cdh, 00h		; TSCMPHigh register (TSCMPH)
   108  2BA5  CE 00             	db		ceh, 00h		; TSCMPLow register (TSCMPL)
   109  2BA7  CC 00             	db		cch, 00h		; TSource:0 register (TSCR0)
   110  2BA9  CF 00             	db		cfh, 00h		; TSource:1 register (TSCR1)
   111  2BAB  FF                	db		ffh
   112  2BAC                    LoadConfigTBL_led_display_Bank1:
   113                          ;  Instance name PWM8_BL, User Module PWM8
   114                          ;       Instance name PWM8_BL, Block Name PWM8(DBC10)
   115  2BAC  33 00             	db		33h, 00h		;PWM8_BL_(DBC10CR1)
   116  2BAE  30 21             	db		30h, 21h		;PWM8_BL_FUNC_REG(DBC10FN)
   117  2BB0  31 11             	db		31h, 11h		;PWM8_BL_INPUT_REG(DBC10IN)
   118  2BB2  32 07             	db		32h, 07h		;PWM8_BL_OUTPUT_REG(DBC10OU)
   119                          ;  Instance name SAR10, User Module SAR10
   120                          ;  Instance name Timer16, User Module Timer16
   121                          ;       Instance name Timer16, Block Name TIMER16_LSB(DBC00)
   122  2BB4  23 00             	db		23h, 00h		;Timer16_(DBC00CR1)
   123  2BB6  20 00             	db		20h, 00h		;Timer16_FUNC_LSB_REG(DBC00FN)
   124  2BB8  21 01             	db		21h, 01h		;Timer16_INPUT_LSB_REG(DBC00IN)
   125  2BBA  22 40             	db		22h, 40h		;Timer16_OUTPUT_LSB_REG(DBC00OU)
   126                          ;       Instance name Timer16, Block Name TIMER16_MSB(DBC01)
   127  2BBC  27 00             	db		27h, 00h		;Timer16_(DBC01CR1)
   128  2BBE  24 20             	db		24h, 20h		;Timer16_FUNC_MSB_REG(DBC01FN)
   129  2BC0  25 31             	db		25h, 31h		;Timer16_INPUT_MSB_REG(DBC01IN)
   130  2BC2  26 40             	db		26h, 40h		;Timer16_OUTPUT_MSB_REG(DBC01OU)
   131                          ;  Instance name UART_Board, User Module UART
   132                          ;       Instance name UART_Board, Block Name RX(DCC13)
   133  2BC4  3F 00             	db		3fh, 00h		;UART_Board_(DCC13CR1)
   134  2BC6  3C 05             	db		3ch, 05h		;UART_Board_RX_FUNC_REG   (DCC13FN)
   135  2BC8  3D C1             	db		3dh, c1h		;UART_Board_RX_INPUT_REG  (DCC13IN)
   136  2BCA  3E 40             	db		3eh, 40h		;UART_Board_RX_OUTPUT_REG (DCC13OU)
   137                          ;       Instance name UART_Board, Block Name TX(DCC12)
   138  2BCC  3B 00             	db		3bh, 00h		;UART_Board_(DCC12CR1)
   139  2BCE  38 1D             	db		38h, 1dh		;UART_Board_TX_FUNC_REG   (DCC12FN)
   140  2BD0  39 01             	db		39h, 01h		;UART_Board_TX_INPUT_REG  (DCC12IN)
   141  2BD2  3A 44             	db		3ah, 44h		;UART_Board_TX_OUTPUT_REG (DCC12OU)
   142                          ;  Instance name UART_Sensor, User Module UART
   143                          ;       Instance name UART_Sensor, Block Name RX(DCC03)
   144  2BD4  2F 00             	db		2fh, 00h		;UART_Sensor_(DCC03CR1)
   145  2BD6  2C 05             	db		2ch, 05h		;UART_Sensor_RX_FUNC_REG   (DCC03FN)
   146  2BD8  2D C1             	db		2dh, c1h		;UART_Sensor_RX_INPUT_REG  (DCC03IN)
   147  2BDA  2E 40             	db		2eh, 40h		;UART_Sensor_RX_OUTPUT_REG (DCC03OU)
   148                          ;       Instance name UART_Sensor, Block Name TX(DCC02)
   149  2BDC  2B 00             	db		2bh, 00h		;UART_Sensor_(DCC02CR1)
   150  2BDE  28 1D             	db		28h, 1dh		;UART_Sensor_TX_FUNC_REG   (DCC02FN)
   151  2BE0  29 01             	db		29h, 01h		;UART_Sensor_TX_INPUT_REG  (DCC02IN)
   152  2BE2  2A 44             	db		2ah, 44h		;UART_Sensor_TX_OUTPUT_REG (DCC02OU)
   153                          ;  Global Register values Bank 1
   154  2BE4  A8 60             	db		a8h, 60h		; ADCControl0 register (ADC_CR0)
   155  2BE6  A9 0A             	db		a9h, 0ah		; ADCControl1 register (ADC_CR1)
   156  2BE8  AA 00             	db		aah, 00h		; ADCControl2 register (ADC_CR2)
   157  2BEA  AB 00             	db		abh, 00h		; ADCControl3 register (ADC_CR3TRIM)
   158  2BEC  AC 00             	db		ach, 00h		; ADCControl4 register (ADC_CR4)
   159  2BEE  61 00             	db		61h, 00h		; AnalogClockSelect1 register (CLK_CR1)
   160  2BF0  69 00             	db		69h, 00h		; AnalogClockSelect2 register (CLK_CR2)
   161  2BF2  60 00             	db		60h, 00h		; AnalogColumnClockSelect register (CLK_CR0)
   162  2BF4  62 00             	db		62h, 00h		; AnalogIOControl_0 register (ABF_CR0)
   163  2BF6  67 33             	db		67h, 33h		; AnalogLUTControl0 register (ALT_CR0)
   164  2BF8  68 00             	db		68h, 00h		; AnalogLUTControl1 register (ALT_CR1)
   165  2BFA  5F 00             	db		5fh, 00h		; CMPClock:0 register (CMPCLK0)
   166  2BFC  5E 00             	db		5eh, 00h		; CMPClock:1 register (CMPCLK1)
   167  2BFE  5B 02             	db		5bh, 02h		; CMPColumnMux register (CMPCOLMUX)
   168  2C00  5D 00             	db		5dh, 00h		; CMPFilterControl register (CMPFLTCR)
   169  2C02  5C 00             	db		5ch, 00h		; CMPPWMControl register (CMPPWMCR)
   170  2C04  59 00             	db		59h, 00h		; CSCMOGlobalOutEnable register (CSCMPGOEN)
   171  2C06  58 00             	db		58h, 00h		; CSCMPControl:0 register (CSCMPCR0)
   172  2C08  5A 33             	db		5ah, 33h		; CSLUTControl register (CSLUTCR0)
   173  2C0A  64 00             	db		64h, 00h		; ComparatorGlobalOutEn register (CMP_GO_EN)
   174  2C0C  65 00             	db		65h, 00h		; ComparatorGlobalOutEn1 register (CMP_GO_EN1)
   175  2C0E  FD 00             	db		fdh, 00h		; DAC_Control register (DAC_CR0)
   176  2C10  DC 00             	db		dch, 00h		; DAC_Control_1 register (DAC_CR1)
   177  2C12  D1 00             	db		d1h, 00h		; GlobalDigitalInterconnect_Drive_Even_Input register (GDI_E_IN)
   178  2C14  A1 00             	db		a1h, 00h		; GlobalDigitalInterconnect_Drive_Even_Input_Control register (GDI_E_IN_CR)
   179  2C16  D3 00             	db		d3h, 00h		; GlobalDigitalInterconnect_Drive_Even_Output register (GDI_E_OU)
   180  2C18  A3 00             	db		a3h, 00h		; GlobalDigitalInterconnect_Drive_Even_Output_Control register (GDI_E_OU_CR)
   181  2C1A  D0 00             	db		d0h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Input register (GDI_O_IN)
   182  2C1C  A0 00             	db		a0h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Input_Control register (GDI_O_IN_CR)
   183  2C1E  D2 00             	db		d2h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Output register (GDI_O_OU)
   184  2C20  A2 00             	db		a2h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Output_Control register (GDI_O_OU_CR)
   185  2C22  AD 00             	db		adh, 00h		; I2CAddress register (I2C_ADDR)
   186  2C24  E1 7F             	db		e1h, 7fh		; OscillatorControl_1 register (OSC_CR1)
   187  2C26  E2 00             	db		e2h, 00h		; OscillatorControl_2 register (OSC_CR2)
   188  2C28  DF 26             	db		dfh, 26h		; OscillatorControl_3 register (OSC_CR3)
   189  2C2A  DE 01             	db		deh, 01h		; OscillatorControl_4 register (OSC_CR4)
   190  2C2C  DD 00             	db		ddh, 00h		; OscillatorGlobalBusEnableControl register (OSC_GO_EN)
   191  2C2E  D8 00             	db		d8h, 00h		; Port_0_MUXBusCtrl register (MUX_CR0)
   192  2C30  D9 00             	db		d9h, 00h		; Port_1_MUXBusCtrl register (MUX_CR1)
   193  2C32  DA 00             	db		dah, 00h		; Port_2_MUXBusCtrl register (MUX_CR2)
   194  2C34  DB 00             	db		dbh, 00h		; Port_3_MUXBusCtrl register (MUX_CR3)
   195  2C36  EC 00             	db		ech, 00h		; Port_4_MUXBusCtrl register (MUX_CR4)
   196  2C38  A7 00             	db		a7h, 00h		; RTClockControl register (RTCCR)
   197  2C3A  A4 00             	db		a4h, 00h		; RTCurrentHour register (RTCH)
   198  2C3C  A5 00             	db		a5h, 00h		; RTCurrentMinute register (RTCM)
   199  2C3E  A6 00             	db		a6h, 00h		; RTCurrentSecond register (RTCS)
   200  2C40  53 00             	db		53h, 00h		; VDAC5Control0:0 register (VDAC50CR0)
   201  2C42  57 00             	db		57h, 00h		; VDAC5Control0:1 register (VDAC51CR0)
   202  2C44  E7 00             	db		e7h, 00h		; VDACTrim register (VDAC_TRIM)
   203  2C46  FF                	db		ffh
   204                          AREA psoc_config(rom, rel)
   205  3E1C                    LoadConfigTBL_led_display_Ordered:
   206                          ;  Ordered Global Register values
   207  3E1C  70 EF             	M8C_SetBank0
   208  3E1E  62 00 EE          	mov	reg[00h], eeh		; Port_0_Data register (PRT0DR)
   209  3E21  71 10             	M8C_SetBank1
   210  3E23  62 00 FE          	mov	reg[00h], feh		; Port_0_DriveMode_0 register (PRT0DM0)
   211  3E26  62 01 01          	mov	reg[01h], 01h		; Port_0_DriveMode_1 register (PRT0DM1)
   212  3E29  70 EF             	M8C_SetBank0
   213  3E2B  62 03 00          	mov	reg[03h], 00h		; Port_0_DriveMode_2 register (PRT0DM2)
   214  3E2E  62 02 11          	mov	reg[02h], 11h		; Port_0_GlobalSelect register (PRT0GS)
   215  3E31  71 10             	M8C_SetBank1
   216  3E33  62 02 00          	mov	reg[02h], 00h		; Port_0_IntCtrl_0 register (PRT0IC0)
   217  3E36  62 03 00          	mov	reg[03h], 00h		; Port_0_IntCtrl_1 register (PRT0IC1)
   218  3E39  70 EF             	M8C_SetBank0
   219  3E3B  62 01 00          	mov	reg[01h], 00h		; Port_0_IntEn register (PRT0IE)
   220  3E3E  62 04 A0          	mov	reg[04h], a0h		; Port_1_Data register (PRT1DR)
   221  3E41  71 10             	M8C_SetBank1
   222  3E43  62 04 A0          	mov	reg[04h], a0h		; Port_1_DriveMode_0 register (PRT1DM0)
   223  3E46  62 05 FF          	mov	reg[05h], ffh		; Port_1_DriveMode_1 register (PRT1DM1)
   224  3E49  70 EF             	M8C_SetBank0
   225  3E4B  62 07 FF          	mov	reg[07h], ffh		; Port_1_DriveMode_2 register (PRT1DM2)
   226  3E4E  62 06 00          	mov	reg[06h], 00h		; Port_1_GlobalSelect register (PRT1GS)
   227  3E51  71 10             	M8C_SetBank1
   228  3E53  62 06 00          	mov	reg[06h], 00h		; Port_1_IntCtrl_0 register (PRT1IC0)
   229  3E56  62 07 00          	mov	reg[07h], 00h		; Port_1_IntCtrl_1 register (PRT1IC1)
   230  3E59  70 EF             	M8C_SetBank0
   231  3E5B  62 05 00          	mov	reg[05h], 00h		; Port_1_IntEn register (PRT1IE)
   232  3E5E  62 08 00          	mov	reg[08h], 00h		; Port_2_Data register (PRT2DR)
   233  3E61  71 10             	M8C_SetBank1
   234  3E63  62 08 09          	mov	reg[08h], 09h		; Port_2_DriveMode_0 register (PRT2DM0)
   235  3E66  62 09 F6          	mov	reg[09h], f6h		; Port_2_DriveMode_1 register (PRT2DM1)
   236  3E69  70 EF             	M8C_SetBank0
   237  3E6B  62 0B E6          	mov	reg[0bh], e6h		; Port_2_DriveMode_2 register (PRT2DM2)
   238  3E6E  62 0A 19          	mov	reg[0ah], 19h		; Port_2_GlobalSelect register (PRT2GS)
   239  3E71  71 10             	M8C_SetBank1
   240  3E73  62 0A 00          	mov	reg[0ah], 00h		; Port_2_IntCtrl_0 register (PRT2IC0)
   241  3E76  62 0B 00          	mov	reg[0bh], 00h		; Port_2_IntCtrl_1 register (PRT2IC1)
   242  3E79  70 EF             	M8C_SetBank0
   243  3E7B  62 09 00          	mov	reg[09h], 00h		; Port_2_IntEn register (PRT2IE)
   244  3E7E  62 0C 00          	mov	reg[0ch], 00h		; Port_3_Data register (PRT3DR)
   245  3E81  71 10             	M8C_SetBank1
   246  3E83  62 0C 00          	mov	reg[0ch], 00h		; Port_3_DriveMode_0 register (PRT3DM0)
   247  3E86  62 0D 00          	mov	reg[0dh], 00h		; Port_3_DriveMode_1 register (PRT3DM1)
   248  3E89  70 EF             	M8C_SetBank0
   249  3E8B  62 0F 00          	mov	reg[0fh], 00h		; Port_3_DriveMode_2 register (PRT3DM2)
   250  3E8E  62 0E 00          	mov	reg[0eh], 00h		; Port_3_GlobalSelect register (PRT3GS)
   251  3E91  71 10             	M8C_SetBank1
   252  3E93  62 0E 00          	mov	reg[0eh], 00h		; Port_3_IntCtrl_0 register (PRT3IC0)
   253  3E96  62 0F 00          	mov	reg[0fh], 00h		; Port_3_IntCtrl_1 register (PRT3IC1)
   254  3E99  70 EF             	M8C_SetBank0
   255  3E9B  62 0D 00          	mov	reg[0dh], 00h		; Port_3_IntEn register (PRT3IE)
   256  3E9E  62 10 00          	mov	reg[10h], 00h		; Port_4_Data register (PRT4DR)
   257  3EA1  71 10             	M8C_SetBank1
   258  3EA3  62 10 00          	mov	reg[10h], 00h		; Port_4_DriveMode_0 register (PRT4DM0)
   259  3EA6  62 11 00          	mov	reg[11h], 00h		; Port_4_DriveMode_1 register (PRT4DM1)
   260  3EA9  70 EF             	M8C_SetBank0
   261  3EAB  62 13 00          	mov	reg[13h], 00h		; Port_4_DriveMode_2 register (PRT4DM2)
   262  3EAE  62 12 00          	mov	reg[12h], 00h		; Port_4_GlobalSelect register (PRT4GS)
   263  3EB1  71 10             	M8C_SetBank1
   264  3EB3  62 12 00          	mov	reg[12h], 00h		; Port_4_IntCtrl_0 register (PRT4IC0)
   265  3EB6  62 13 00          	mov	reg[13h], 00h		; Port_4_IntCtrl_1 register (PRT4IC1)
   266  3EB9  70 EF             	M8C_SetBank0
   267  3EBB  62 11 00          	mov	reg[11h], 00h		; Port_4_IntEn register (PRT4IE)
   268  3EBE  70 EF             	M8C_SetBank0
   269  3EC0  7F                	ret
HI-TECH Software Macro Assembler (PSoC MCU) V9.61
Symbol Table                                                                                               Fri Jun 12 09:25:10 2015
  LoadConfigTBL_led_display_Bank0 2B15    LoadConfigTBL_led_display_Bank1 2BAC  LoadConfigTBL_led_display_Ordered 3E1C  
                    FLAG_XIO_MASK 0010  
HI-TECH Software Macro Assembler (PSoC MCU) V9.61
                                                                                                           Fri Jun 12 09:25:10 2015
     1                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     2                          ;;;
     3                          ;;;  M8C.INC -- Microcontroller Device System Declarations
     4                          ;;;
     5                          ;;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
     6                          ;;;
     7                          ;;;  This file provides address constants, bit field masks and a set of macro
     8                          ;;;  facilities for the Cypress Semiconductor CY8C22045 Microcontroller devices.
     9                          ;;;
    10                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    11                          
    12                          ;;=============================================================================
    13                          ;; Definition of abbreviations used in the descriptions below
    14                          ;;  (RW)   The register or bit supports reads and writes
    15                          ;;  (W)    The register or bit is write-only
    16                          ;;  (R)    The register or bit is read-only
    17                          ;;  (#)    Access to the register is bit specific (see the family datasheet)
    18                          ;;  (RC)   The register or bit can be read, but writing a 0 will clear it,
    19                          ;;         writing a 1 will have no effect.
    20                          ;;=============================================================================
    21                          
    22                          ;;=============================================================================
    23                          ;;      System Registers
    24                          ;;=============================================================================
    25                          
    26                          ;----------------------------
    27                          ;  Flag Register Bit Fields
    28                          ;----------------------------
    29  00C0                    FLAG_PGMODE_MASK:  equ 0C0h     ; Paging control for > 256 bytes of RAM
    30  0000                    FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
    31  0040                    FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
    32  0080                    FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
    33  00C0                    FLAG_PGMODE_3:     equ 0C0h       ; Direct to CUR_PP page, indexed to STK_PP page
    34  0000                    FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
    35  0040                    FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
    36  0080                    FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
    37  00C0                    FLAG_PGMODE_11b:   equ 0C0h       ; Same as PGMODE_3
    38  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    39  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    40  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    41  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    42  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    43                          
    44                          
    45                          ;;=============================================================================
    46                          ;;      Register Space, Bank 0
    47                          ;;=============================================================================
    48                          
    49                          ;------------------------------------------------
    50                          ;  Port Registers
    51                          ;  Note: Also see this address range in Bank 1.
    52                          ;------------------------------------------------
    53                          ; Port 0
    54  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    55  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    56  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    57  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    58                          ; Port 1
    59  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    60  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    61  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    62  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    63                          ; Port 2
    64  0008                    PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
    65  0009                    PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
    66  000A                    PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
    67  000B                    PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
    68                          ; Port 3
    69  000C                    PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
    70  000D                    PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
    71  000E                    PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
    72  000F                    PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
    73                          ; Port 4
    74  0010                    PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
    75  0011                    PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
    76  0012                    PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
    77  0013                    PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
    78                          
    79                          ;------------------------------------------------
    80                          ;  Digital PSoC(tm) block Registers
    81                          ;  Note: Also see this address range in Bank 1.
    82                          ;------------------------------------------------
    83                          ; Digital PSoC block 00, Basic Type C
    84  0020                    DBC00DR0:     equ 20h          ; data register 0                          (#)
    85  0021                    DBC00DR1:     equ 21h          ; data register 1                          (W)
    86  0022                    DBC00DR2:     equ 22h          ; data register 2                          (RW)
    87  0023                    DBC00CR0:     equ 23h          ; control & status register 0              (#)
    88                          
    89                          ; Digital PSoC block 01, Basic Type C
    90  0024                    DBC01DR0:     equ 24h          ; data register 0                          (#)
    91  0025                    DBC01DR1:     equ 25h          ; data register 1                          (W)
    92  0026                    DBC01DR2:     equ 26h          ; data register 2                          (RW)
    93  0027                    DBC01CR0:     equ 27h          ; control & status register 0              (#)
    94                          
    95                          ; Digital PSoC block 02, Communications Type C
    96  0028                    DCC02DR0:     equ 28h          ; data register 0                          (#)
    97  0029                    DCC02DR1:     equ 29h          ; data register 1                          (W)
    98  002A                    DCC02DR2:     equ 2Ah          ; data register 2                          (RW)
    99  002B                    DCC02CR0:     equ 2Bh          ; control & status register 0              (#)
   100                          
   101                          ; Digital PSoC block 03, Communications Type C
   102  002C                    DCC03DR0:     equ 2Ch          ; data register 0                          (#)
   103  002D                    DCC03DR1:     equ 2Dh          ; data register 1                          (W)
   104  002E                    DCC03DR2:     equ 2Eh          ; data register 2                          (RW)
   105  002F                    DCC03CR0:     equ 2Fh          ; control & status register 0              (#)
   106                          
   107                          ; Digital PSoC block 10, Basic Type C
   108  0030                    DBC10DR0:     equ 30h          ; data register 0                          (#)
   109  0031                    DBC10DR1:     equ 31h          ; data register 1                          (W)
   110  0032                    DBC10DR2:     equ 32h          ; data register 2                          (RW)
   111  0033                    DBC10CR0:     equ 33h          ; control & status register 0              (#)
   112                          
   113                          ; Digital PSoC block 11, Basic Type C
   114  0034                    DBC11DR0:     equ 34h          ; data register 0                          (#)
   115  0035                    DBC11DR1:     equ 35h          ; data register 1                          (W)
   116  0036                    DBC11DR2:     equ 36h          ; data register 2                          (RW)
   117  0037                    DBC11CR0:     equ 37h          ; control & status register 0              (#)
   118                          
   119                          ; Digital PSoC block 12, Communications Type C
   120  0038                    DCC12DR0:     equ 38h          ; data register 0                          (#)
   121  0039                    DCC12DR1:     equ 39h          ; data register 1                          (W)
   122  003A                    DCC12DR2:     equ 3Ah          ; data register 2                          (RW)
   123  003B                    DCC12CR0:     equ 3Bh          ; control & status register 0              (#)
   124                          
   125                          ; Digital PSoC block 13, Communications Type C
   126  003C                    DCC13DR0:     equ 3Ch          ; data register 0                          (#)
   127  003D                    DCC13DR1:     equ 3Dh          ; data register 1                          (W)
   128  003E                    DCC13DR2:     equ 3Eh          ; data register 2                          (RW)
   129  003F                    DCC13CR0:     equ 3Fh          ; control & status register 0              (#)
   130                          
   131                          ;-------------------------------------
   132                          ;  Analog Control Registers
   133                          ;-------------------------------------
   134  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
   135  00C0                    AMX_IN_ACI3:          equ C0h    ; MASK: column 3 input mux
   136  0030                    AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
   137  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
   138  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
   139                          
   140  0061                    AMUX_CFG:      equ 61h          ; Analog MUX Configuration
   141  0030                    AMUX_CFG_INTCAP:       equ 30h    ;
   142  000E                    AMUX_CFG_MUXCLK:  	  equ 0Eh	 ;
   143  0001                    AMUX_CFG_EN:		  	  equ 01h	 ;
   144                          
   145                          ; old declarations DO NOT USE
   146  0061                    AMUXCFG:      equ 61h          ; Analog MUX Configuration
   147  0030                    AMUXCFG_INTCAP:       equ 30h    ;
   148  000E                    AMUXCFG_MUXCLK:  	  equ 0Eh	 ;
   149  0001                    AMUXCFG_EN:		  	  equ 01h	 ;
   150                          
   151  0062                    PWM_CR:       equ 62h          ; Pulse-Width Modulator Control
   152  0038                    PWM_CR_HIGH:          equ 38h    ; MASK: PWM high time
   153  0006                    PWM_CR_LOW:           equ 06h	 ; MASK: PWM low time
   154  0001                    PWM_CR_EN:            equ 01h	 ; MASK: Enable/Disable PWM function
   155                          
   156  0063                    ARF_CR:       equ 63h          ; Analog Reference Control
   157                          
   158  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus Register           (#)
   159  0080                    CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
   160  0040                    CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
   161  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
   162  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
   163  0008                    CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
   164  0004                    CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
   165  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
   166  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   167                          
   168  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   169  0020                    CMP_CR1_CLDIS1:       equ 20h    ; MASK: Column 1 comparator output latch
   170  0010                    CMP_CR1_CLDIS0:	      equ 10h    ; MASK: Column 0 comparator output latch
   171                          
   172  0068                    ADC0_CR:      equ 68h          ; Analog Column 0 Configuration
   173  0080                    ADC0_CR_CMPST:        equ 80h    ;
   174  0040                    ADC0_CR_LOREN:        equ 40h    ;
   175  0020                    ADC0_CR_SHEN:         equ 20h    ;
   176  0008                    ADC0_CR_CBSRC:        equ 08h    ;
   177  0004                    ADC0_CR_ADCM:         equ 04h    ;
   178  0001                    ADC0_CR_EN:	          equ 01h    ;
   179                          
   180  0069                    ADC1_CR:      equ 69h          ; Analog Column 1 Configuration
   181  0080                    ADC1_CR_CMPST:        equ 80h    ;
   182  0040                    ADC1_CR_LOREN:        equ 40h    ;
   183  0020                    ADC1_CR_SHEN:         equ 20h    ;
   184  0008                    ADC1_CR_CBSRC:        equ 08h    ;
   185  0004                    ADC1_CR_ADCM:         equ 04h    ;
   186  0001                    ADC1_CR_EN:	          equ 01h    ;
   187                          
   188                          ; Continuous Time PSoC block Type E Row 0 Col 0
   189  0072                    ACE00CR1:     equ 72h          ; Control register 1                       (RW)
   190  0073                    ACE00CR2:     equ 73h          ; Control register 2                       (RW)
   191                          
   192                          ; Continuous Time PSoC block Type E Row 0 Col 1
   193  0076                    ACE01CR1:     equ 76h          ; Control register 1                       (RW)
   194  0077                    ACE01CR2:     equ 77h          ; Control register 2                       (RW)
   195                          
   196                          ; Switched Cap PSoC blockType E Row 1 Col 0
   197  0080                    ASE10CR0:     equ 80h          ; Control register 0                       (RW)
   198                          
   199                          ; Switched Cap PSoC blockType E Row 1 Col 1
   200  0084                    ASE11CR0:     equ 84h          ; Control register 0                       (RW)
   201                          
   202                          ;-----------------------------------------------
   203                          ;  Global General Purpose Data Registers
   204                          ;-----------------------------------------------
   205  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   206  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   207  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   208  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   209                          
   210                          ;------------------------------------------------
   211                          ;  Row Digital Interconnects
   212                          ;
   213                          ;  Note: the following registers are mapped into
   214                          ;  both register bank 0 AND register bank 1.
   215                          ;------------------------------------------------
   216                          
   217  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   218  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   219  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   220  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   221  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   222  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   223  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   224                          
   225  00B8                    RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
   226  00B9                    RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
   227  00BA                    RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
   228  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   229  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   230  00BD                    RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
   231  00BE                    RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
   232                          
   233                          ;-----------------------------------------------
   234                          ;  Ram Page Pointers
   235                          ;-----------------------------------------------
   236  00D0                    CUR_PP:      equ 0D0h           ; Current   Page Pointer
   237  00D1                    STK_PP:      equ 0D1h           ; Stack     Page Pointer
   238  00D3                    IDX_PP:      equ 0D3h           ; Index     Page Pointer
   239  00D4                    MVR_PP:      equ 0D4h           ; MVI Read  Page Pointer
   240  00D5                    MVW_PP:      equ 0D5h           ; MVI Write Page Pointer
   241                          
   242                          ;------------------------------------------------
   243                          ;  I2C Configuration Registers
   244                          ;------------------------------------------------
   245  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   246  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   247  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   248  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   249  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   250  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   251  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   252  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   253  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   254  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   255                          
   256  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   257  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   258  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   259  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   260  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   261  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   262  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   263  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   264  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   265                          
   266  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   267                          
   268  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   269  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   270  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   271  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   272  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   273                          
   274                          ;------------------------------------------------
   275                          ;  System and Global Resource Registers
   276                          ;------------------------------------------------
   277  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   278                                                         ; Use INT_MSK0 bit field masks
   279  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   280                                                         ; Use INT_MSK1 bit field masks
   281  00DC                    INT_CLR2:     equ 0DCh          ; Interrupt Clear Register 2               (RW)
   282                                                         ; Use INT_MSK2 bit field masks
   283  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   284                                                         ; Use INT_MSK3 bit field masks
   285                          
   286  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   287  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   288  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   289                          
   290  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   291  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   292  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   293  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   294  0010                    INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
   295  0008                    INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
   296  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   297  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   298  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   299                          
   300  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   301  0080                    INT_MSK1_DCC13:            equ 80h ; MASK: enable/disable DCC13 block interrupt
   302  0040                    INT_MSK1_DCC12:            equ 40h ; MASK: enable/disable DCC12 block interrupt
   303  0020                    INT_MSK1_DBC11:            equ 20h ; MASK: enable/disable DBC11 block interrupt
   304  0010                    INT_MSK1_DBC10:            equ 10h ; MASK: enable/disable DBC10 block interrupt
   305+ 0008                    INT_MSK1_DCC03:            equ 08h ; MASK: enable/disable DCC03 block interrupt
   306  0004                    INT_MSK1_DCC02:            equ 04h ; MASK: enable/disable DCC02 block interrupt
   307  0002                    INT_MSK1_DBC01:            equ 02h ; MASK: enable/disable DBC01 block interrupt
   308  0001                    INT_MSK1_DBC00:            equ 01h ; MASK: enable/disable DBC00 block interrupt
   309                          
   310  00DF                    INT_MSK2:     equ DFh			; Custom block Mask Register			   (RW)
   311  0010                    INT_MSK2_SARADC:           equ 10h ; MASK: enable/disable SARADC block interrupt
   312  0020                    INT_MSK2_CSD0:             equ 20h ; MASK: enable/disable CSD0 block interrupt
   313  0040                    INT_MSK2_CSD1:             equ 40h ; MASK: enable/disable CSD1 block interrupt
   314  0080                    INT_MSK2_RTC:              equ 80h ; MASK: enable/disable RTC block interrupt
   315                          
   316  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   317  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   318                          
   319                          ;------------------------------------------------------
   320                          ;  MAC Registers
   321                          ;------------------------------------------------------
   322                          
   323  00E8                    MUL0_X:       equ 0E8h          ; Multiply Input X Register                (W)
   324  00E9                    MUL0_Y:       equ 0E9h          ; Multiply Input Y Register                (W)
   325  00EA                    MUL0_DH:      equ 0EAh          ; Multiply Result High Byte Register       (R)
   326  00EB                    MUL0_DL:      equ 0EBh          ; Multiply Result Low Byte Register        (R)
   327                          
   328  00EC                    ACC0_DR1:     equ 0ECh          ; Accumulator Data Register 1              (RW)
   329+ 00ED                    ACC0_DR0:     equ 0EDh          ; Accumulator Data Register 0              (RW)
   330+ 00EE                    ACC0_DR3:     equ 0EEh          ; Accumulator Data Register 3              (RW)
   331  00EF                    ACC0_DR2:     equ 0EFh          ; Accumulator Data Register 2              (RW)
   332                          
   333                          ; DECIMATOR Control Registers
   334  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   335  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   336                          
   337                          ;------------------------------------------------------
   338                          ;  System Status and Control Registers
   339                          ;
   340                          ;  Note: The following registers are mapped into both
   341                          ;        register bank 0 AND register bank 1.
   342                          ;------------------------------------------------------
   343  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   344                                                             ; Use FLAG_ masks defined at top of file
   345                          
   346  00FD                    DAC_D:        equ 0FDh		   ; DAC Data Register                        (RW)
   347                          
   348  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   349  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: flag, Internal Reset Status bit
   350  0010                    CPU_SCR1_SLIMO:         equ 10h	   ; MASK: Slow IMO (internal main osc) enable
   351  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   352  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   353  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   354                          
   355  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   356  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   357  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   358  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   359  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   360  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   361                          
   362                          ;------------------------------------------------------
   363                          ;  Neon Capsense Digital Control Registers
   364                          ;------------------------------------------------------
   365  0050                    CSD0_DR0_L:				equ 50h		; Capsense 0 data low 0				(RW)
   366  0054                    CSD0_DR0_H:				equ 54h		; Capsense 0 data high 0			(RW)
   367  0058                    CSD1_DR0_L:				equ 58h		; Capsense 1 data low 0				(RW)
   368  005C                    CSD1_DR0_H:				equ 5Ch		; Capsense 1 data high 0			(RW)
   369  0051                    CSD0_DR1_L:				equ 51h		; Capsense 0 data low 1				(RW)
   370  0055                    CSD0_DR1_H:				equ 55h		; Capsense 0 data high 1			(RW)
   371  0059                    CSD1_DR1_L:				equ 59h		; Capsense 1 data low 1				(RW)
   372  005D                    CSD1_DR1_H:				equ 5Dh		; Capsense 1 data high 1			(RW)
   373  0052                    CSD0_CNT_L:				equ 52h		; Capsense 0 counter low			(RW)
   374  0056                    CSD0_CNT_H:				equ 56h		; Capsense 0 counter high			(RW)
   375  005A                    CSD1_CNT_L:				equ 5Ah		; Capsense 1 counter low			(RW)
   376  005E                    CSD1_CNT_H:				equ	5Eh		; Capsense 1 counter high			(RW)
   377  0053                    CSD0_CR0:				equ 53h		; Capsense 0 control 0				(RW)
   378  005B                    CSD1_CR0:				equ 5Bh		; Capsense 1 control 0				(RW)
   379  0057                    CSD0_CR1:				equ 57h		; Capsense 0 control 1				(RW)
   380  005F                    CSD1_CR1:				equ 5Fh		; Capsense 1 control 1				(RW)
   381                          
   382                          ;------------------------------------------------------
   383                          ;  Neon Analog Registers
   384                          ;------------------------------------------------------
   385  0065                    ASY_CR:					equ 65h		; Analog Synchronization Control	(RW)
   386  006A                    ADC_DH:					equ 6Ah		; ADC data high						(RW)
   387  006B                    ADC_DL:					equ 6Bh		; ADC data low						(RW)
   388  00C8                    PWMVREF0:				equ C8h		; PWM Voltage Reference 0			(RW)
   389  00C9                    PWMVREF1:				equ C9h		; PWM Voltage Reference 1			(RW)
   390  00CB                    PWMSRC:					equ CBh		; PWM Source						(RW)
   391  00CA                    IDACMODE:				equ CAh		; IDAC Mode							(RW)
   392  00FC                    IDACR_D:				equ FCh		; Analog Mux DAC data 0				(RW)
   393  00FD                    IDACL_D:				equ FDh		; Analog Mux DAC data 1				(RW)
   394                          
   395                          ;------------------------------------------------------
   396                          ;  Neon Digital Registers
   397                          ;------------------------------------------------------
   398  00B7                    RDI0DSM:				equ B7h		; Row Digital Interconnect input select 0	(RW)
   399  00BF                    RDI1DSM:				equ BFh		; Row Digital Interconnect input select 1	(RW)
   400                          
   401                          ;------------------------------------------------------
   402                          ;  Neon Test Registers
   403                          ;------------------------------------------------------
   404  00CC                    TSCR0:					equ CCh		; Tsource 0							(RW)
   405  00CD                    TSCMPH:					equ CDh		; TSCMP high						(RW)
   406  00CE                    TSCMPL:					equ CEh		; TSCMP low							(RW)
   407  00CF                    TSCR1:					equ CFh		; Tsource 1							(RW)
   408                          
   409                          ;;=============================================================================
   410                          ;;      Register Space, Bank 1
   411                          ;;=============================================================================
   412                          
   413                          ;------------------------------------------------
   414                          ;  Port Registers
   415                          ;  Note: Also see this address range in Bank 0.
   416                          ;------------------------------------------------
   417                          ; Port 0
   418  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   419  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   420  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   421  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   422                          
   423                          ; Port 1
   424  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   425  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   426  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   427  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   428                          
   429                          ; Port 2
   430  0008                    PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
   431  0009                    PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
   432  000A                    PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
   433  000B                    PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
   434                          
   435                          ; Port 3
   436  000C                    PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
   437  000D                    PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
   438  000E                    PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
   439  000F                    PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
   440                          
   441                          ; Port 4
   442  0010                    PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
   443  0011                    PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
   444  0012                    PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
   445  0013                    PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
   446                          
   447                          ;------------------------------------------------
   448                          ;  Digital PSoC(tm) block Registers
   449                          ;  Note: Also see this address range in Bank 0.
   450                          ;------------------------------------------------
   451                          
   452                          ; Digital PSoC block 00, Basic Type C
   453  0020                    DBC00FN:      equ 20h          ; Function Register                        (RW)
   454  0021                    DBC00IN:      equ 21h          ;    Input Register                        (RW)
   455  0022                    DBC00OU:      equ 22h          ;   Output Register                        (RW)
   456  0023                    DBC00CR1:     equ 23h          ;   control & status register 1            (RW)
   457                          
   458                          ; Digital PSoC block 01, Basic Type C
   459  0024                    DBC01FN:      equ 24h          ; Function Register                        (RW)
   460  0025                    DBC01IN:      equ 25h          ;    Input Register                        (RW)
   461  0026                    DBC01OU:      equ 26h          ;   Output Register                        (RW)
   462  0027                    DBC01CR1:     equ 27h          ;   control & status register 1            (RW)
   463                          
   464                          ; Digital PSoC block 02, Communications Type C
   465  0028                    DCC02FN:      equ 28h          ; Function Register                        (RW)
   466  0029                    DCC02IN:      equ 29h          ;    Input Register                        (RW)
   467  002A                    DCC02OU:      equ 2Ah          ;   Output Register                        (RW)
   468  002B                    DBC02CR1:     equ 2Bh          ;   control & status register 1            (RW)
   469                          
   470                          ; Digital PSoC block 03, Communications Type C
   471  002C                    DCC03FN:      equ 2Ch          ; Function Register                        (RW)
   472  002D                    DCC03IN:      equ 2Dh          ;    Input Register                        (RW)
   473  002E                    DCC03OU:      equ 2Eh          ;   Output Register                        (RW)
   474  0029                    DBC03CR1:     equ 29h          ;   control & status register 1            (RW)
   475                          
   476                          ; Digital PSoC block 10, Basic Type C
   477  0030                    DBC10FN:      equ 30h          ; Function Register                        (RW)
   478  0031                    DBC10IN:      equ 31h          ;    Input Register                        (RW)
   479  0032                    DBC10OU:      equ 32h          ;   Output Register                        (RW)
   480  0033                    DBC10CR1:     equ 33h          ;   control & status register 1            (RW)
   481                          
   482                          ; Digital PSoC block 11, Basic Type C
   483  0034                    DBC11FN:      equ 34h          ; Function Register                        (RW)
   484  0035                    DBC11IN:      equ 35h          ;    Input Register                        (RW)
   485  0036                    DBC11OU:      equ 36h          ;   Output Register                        (RW)
   486  0037                    DBC11CR1:     equ 37h          ;   control & status register 1            (RW)
   487                          
   488                          ; Digital PSoC block 12, Communications Type C
   489  0038                    DCC12FN:      equ 38h          ; Function Register                        (RW)
   490  0039                    DCC12IN:      equ 39h          ;    Input Register                        (RW)
   491  003A                    DCC12OU:      equ 3Ah          ;   Output Register                        (RW)
   492  003B                    DBC12CR1:     equ 3Bh          ;   control & status register 1            (RW)
   493                          
   494                          ; Digital PSoC block 13, Communications Type C
   495  003C                    DCC13FN:      equ 3Ch          ; Function Register                        (RW)
   496  003D                    DCC13IN:      equ 3Dh          ;    Input Register                        (RW)
   497  003E                    DCC13OU:      equ 3Eh          ;   Output Register                        (RW)
   498  003F                    DBC13CR1:     equ 3Fh          ;   control & status register 1            (RW)
   499                          
   500                          ;------------------------------------------------
   501                          ;  System and Global Resource Registers
   502                          ;  Note: Also see this address range in Bank 0.
   503                          ;------------------------------------------------
   504                          
   505  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   506  00C0                    CLK_CR0_ACOLUMN_3:    equ C0h    ; MASK: Specify clock for analog cloumn
   507  0030                    CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
   508  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   509  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   510                          
   511  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   512  0018                    CLK_CR1_ACLK1:        equ 18h    ; MASK: Digital PSoC block for analog source
   513  0003                    CLK_CR1_ACLK0:        equ 03h    ; MASK: Digital PSoC block for analog source
   514                          
   515  0003                    CLK_CR1_ACLK2:        equ 03h    ; Deprecated do not use
   516                          
   517  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   518  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   519                          
   520  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   521  000F                    AMD_CR0_AMOD0:        equ 0Fh    ; MASK: Modulation source for analog column 0
   522                          
   523  0064                    CMP_GO_EN:    equ 64h          ; Comparator Bus To Global Out Enable      (RW)
   524  0080                    CMP_GO_EN_GOO5:       equ 80h    ; MASK: Selected Col 1 signal to GOO5
   525  0040                    CMP_GO_EN_GOO1:       equ 40h    ; MASK: Selected Col 1 signal to GOO1
   526  0030                    CMP_GO_EN_SEL1:       equ 30h    ; MASK: Column 1 Signal Select
   527  0008                    CMP_GO_EN_GOO4:       equ 08h    ; MASK: Selected Col 0 signal to GOO4
   528  0004                    CMP_GO_EN_GOO0:       equ 04h    ; MASK: Selected Col 0 signal to GOO0
   529  0003                    CMP_GO_EN_SEL0:       equ 03h    ; MASK: Column 0 Signal Select
   530                          
   531  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   532  000F                    AMD_CR1_AMOD1:        equ 0Fh    ; MASK: Modulation ctrl for analog column 1
   533                          
   534  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   535  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   536  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   537                          
   538  006B                    CLK_CR3:      equ 6Bh          ; Analog Clock Source Control Register 3   (RW)
   539  0040                    CLK_CR3_SYS1:         equ 40h    ; MASK: Analog Clock 1 selection
   540  0030                    CLK_CR3_DIVCLK1:      equ 30h    ; MASK: Analog Clock 1 divider
   541  0004                    CLK_CR3_SYS0:         equ 04h    ; MASK: Analog Clock 0 selection
   542  0003                    CLK_CR3_DIVCLK0:      equ 03h    ; MASK: Analog Clock 0 divider
   543                          
   544                          ;------------------------------------------------
   545                          ;  Global Digital Interconnects
   546                          ;------------------------------------------------
   547                          
   548  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   549  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   550  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   551  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   552                          
   553  00A0                    GDI_O_IN_CR:  equ 0A0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   554  00A1                    GDI_E_IN_CR:  equ 0A1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   555  00A2                    GDI_O_OU_CR:  equ 0A2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   556  00A3                    GDI_E_OU_CR:  equ 0A3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   557                          
   558  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   559  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   560                          
   561                          ;------------------------------------------------
   562                          ;  Analog Mux Bus Port Enable Bits
   563                          ;------------------------------------------------
   564  00D8                    MUX_CR0:      equ 0D8h          ; Analog Mux Port 0 Bit Enables Register
   565  00D9                    MUX_CR1:      equ 0D9h          ; Analog Mux Port 1 Bit Enables Register
   566  00DA                    MUX_CR2:      equ 0DAh          ; Analog Mux Port 2 Bit Enables Register
   567  00DB                    MUX_CR3:      equ 0DBh          ; Analog Mux Port 3 Bit Enables Register
   568  00EC                    MUX_CR4:      equ 0ECh          ; Analog Mux Port 4 Bit Enables Register
   569                          
   570                          ;------------------------------------------------
   571                          ;  Clock and System Control Registers
   572                          ;------------------------------------------------
   573                          
   574  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   575  0080                    OSC_GO_EN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   576  0040                    OSC_GO_EN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   577  0020                    OSC_GO_EN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   578  0010                    OSC_GO_EN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   579  0008                    OSC_GO_EN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   580  0004                    OSC_GO_EN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   581  0002                    OSC_GO_EN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   582  0001                    OSC_GO_EN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   583                          
   584  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   585  0003                    OSC_CR4_VC3SEL:       equ 03h    ; MASK: System VC3 Clock source
   586                          
   587  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   588                          
   589  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   590  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   591  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   592  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   593  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   594  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   595  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   596  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   597  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   598  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   599  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   600  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   601  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   602  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   603  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   604  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   605  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   606  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   607                          
   608  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   609  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   610  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   611                          
   612  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   613  0080                    OSC_CR2_PLLGAIN:      equ 80h    ; MASK: High/Low gain
   614  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   615  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   616  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   617                          
   618  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   619  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   620  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   621  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   622  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   623  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   624  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   625  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   626                          
   627  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   628  0008                    VLT_CMP_NOWRITE:      equ 08h    ; MASK: Vcc below Flash Write level
   629  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   630  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   631  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   632                          
   633  00E5                    ADC0_TR:      equ 0E5h          ; ADC Column 0 Trim Register
   634  00E6                    ADC1_TR:      equ 0E6h          ; ADC Column 1 Trim Register
   635                          
   636  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   637  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   638  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   639  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   640                          
   641  00FA                    FLS_PR1:      equ 0FAh          ; Flash Program Register 1                 (RW)
   642  0003                    FLS_PR1_BANK:         equ 03h    ; MASK: Select Active Flash Bank
   643                          
   644  00FD                    DAC_CR0:       equ 0FDh          ; Analog Mux DAC Control Register 0
   645  00DC                    DAC_CR1:       equ 0DCh          ; Analog Mux DAC Control Register 1
   646  0008                    DAC_CR_IRANGE:        equ 08h    ; MASK: Sets the DAC Range low or high
   647  0006                    DAC_CR_OSCMODE:       equ 06h    ; MASK: Defines the reset mode for AMux
   648  0001                    DAC_CR_ENABLE:        equ 01h    ; MASK: Enable/Disable DAC function
   649                          
   650                          ;------------------------------------------------
   651                          ;  I2C Control Registers
   652                          ;------------------------------------------------
   653                          
   654  00AD                    I2C_ADDR:    equ 0ADh          ; I2C Address Register (RW)
   655                          
   656                          ;------------------------------------------------------
   657                          ;  Neon Analog Registers
   658                          ;------------------------------------------------------
   659  0053                    VDAC50CR0:		equ 53h			; V DAC5 control 0				(RW)
   660  0057                    VDAC51CR0:		equ 57h			; V DAC5 control 1				(RW)
   661  00A8                    ADC_CR0:		equ A8h			; ADC control 0					(RW)
   662  00A9                    ADC_CR1:		equ A9h			; ADC control 1					(RW)
   663  00AA                    ADC_CR2:		equ AAh			; ADC control 2					(RW)
   664  00AB                    ADC_CR3TRIM:	equ ABh			; ADC control 3					(RW)
   665  00AC                    ADC_CR4:		equ ACh			; ADC control 4					(RW)
   666  00E7                    VDAC_TRIM:		equ E7h			; V DAC trim					(RW)
   667                          
   668                          ;------------------------------------------------------
   669                          ;  Neon Current Sense CMP Registers
   670                          ;------------------------------------------------------
   671  0050                    CMP0CR1:		equ 50h			; CMP0 control 1				(RW)
   672  0051                    CMP0CR2:		equ 51h			; CMP0 control 2				(RW)
   673  0054                    CMP1CR1:		equ 54h			; CMP1 control 1				(RW)
   674  0055                    CMP1CR2:		equ 55h			; CMP1 control 2				(RW)
   675  0058                    CSCMPCR0:		equ 58h			; CSCMP control 0				(RW)
   676  0059                    CSCMPGOEN:		equ 59h			; CSCMO global out enable		(RW)
   677  005A                    CSLUTCR0:		equ 5Ah			; CSLUT control 0				(RW)
   678  005B                    CMPCOLMUX:		equ 5Bh			; CMP Column Mux				(RW)
   679  005C                    CMPPWMCR:		equ 5Ch			; CMP PWM control				(RW)
   680  005D                    CMPFLTCR:		equ 5Dh			; CMP filter control			(RW)
   681  005E                    CMPCLK1:		equ 5Eh			; CMP clock 1					(RW)
   682  005F                    CMPCLK0:		equ 5Fh			; CMP clock 0					(RW)
   683                          
   684                          ;------------------------------------------------------
   685                          ;  Neon Real Time Clock Registers
   686                          ;------------------------------------------------------
   687  00A4                    RTCH:			equ A4h			; Real time current hour		(RW)
   688  00A5                    RTCM:			equ A5h			; Real time current minute		(RW)
   689  00A6                    RTCS:			equ A6h			; Real time current second		(RW)
   690  00A7                    RTCCR:			equ A7h			; Real time clock control		(RW)
   691                          
   692                          ;------------------------------------------------------
   693                          ;  Analog MUX Config Registers
   694                          ;------------------------------------------------------
   695                          
   696  006A                    AMUX_CFG1:			equ 6Ah  ; Analog MUX Configuration 1
   697  0020                    AMUX_CFG1_GOINVR:	equ 20h  ;
   698  0010                    AMUX_CFG1_GOINVL:  	equ 10h	 ;
   699  000C                    AMUX_CFG1_AMUXMODR:	equ 0Ch	 ;
   700  0003                    AMUX_CFG1_AMUXMODL:	equ 03h	 ;
   701                          
   702                          ;;=============================================================================
   703                          ;;      M8C System Macros
   704                          ;;  These macros should be used when their functions are needed.
   705                          ;;=============================================================================
   706                          
   707                          ;----------------------------------------------------
   708                          ;  Swapping Register Banks
   709                          ;----------------------------------------------------
   710                              macro M8C_SetBank0
   711                              and   F, ~FLAG_XIO_MASK
   712  3C41                        endm
   713                          
   714                              macro M8C_SetBank1
   715                              or    F, FLAG_XIO_MASK
   716  3C41                        endm
   717                          
   718                          ;----------------------------------------------------
   719                          ;  Global Interrupt Enable/Disable
   720                          ;----------------------------------------------------
   721                              macro M8C_EnableGInt
   722                              or    F, FLAG_GLOBAL_IE
   723  3C41                        endm
   724                          
   725                              macro M8C_DisableGInt
   726                              and   F, ~FLAG_GLOBAL_IE
   727  3C41                        endm
   728                          
   729                          ;----------------------------------------------------
   730                          ;  Enable/Disable Interrupt Mask
   731                          ;
   732                          ;  Use the following macros to enable/disable
   733                          ;  bits in the Interrupt mask registers,
   734                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   735                          ;
   736                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   737                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   738                          ;
   739                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   740                          ;        and MASK is the bit set to enable or disable
   741                          ;----------------------------------------------------
   742                          ; Disable Interrupt Bit Mask(s)
   743                              macro M8C_DisableIntMask
   744                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   745  3C41                        endm
   746                          
   747                          ; Enable Interrupt Bit Mask(s)
   748                              macro M8C_EnableIntMask
   749                              or    reg[@0], @1               ; enable specified interrupt enable bit
   750  3C41                        endm
   751                          
   752                          ;----------------------------------------------------
   753                          ;  Clear Posted Interrupt Flag Mask
   754                          ;
   755                          ;  Use the following macros to clear the
   756                          ;  bits in the Interrupt Clear registers,
   757                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   758                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   759                          ;
   760                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   761                          ;        and MASK is the bit set to enable or disable
   762                          ;----------------------------------------------------
   763                              macro M8C_ClearIntFlag
   764                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   765  3C41                        endm
   766                          
   767                          ;----------------------------------------------------
   768                          ;  Power-On Reset & WatchDog Timer Functions
   769                          ;----------------------------------------------------
   770                              macro M8C_EnableWatchDog
   771                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   772  3C41                        endm
   773                          
   774                              macro M8C_ClearWDT
   775                              mov   reg[RES_WDT], 00h
   776  3C41                        endm
   777                          
   778                              macro M8C_ClearWDTAndSleep
   779                              mov   reg[RES_WDT], 38h
   780  3C41                        endm
   781                          
   782                          ;----------------------------------------------------
   783                          ;  Sleep, CPU Stop & Software Reset
   784                          ;----------------------------------------------------
   785                              macro M8C_Sleep
   786                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   787                              ; The next instruction to be executed depends on the state of the
   788                              ; various interrupt enable bits. If some interrupts are enabled
   789                              ; and the global interrupts are disabled, the next instruction will
   790                              ; be the one that follows the invocation of this macro. If global
   791                              ; interrupts are also enabled then the next instruction will be
   792                              ; from the interrupt vector table. If no interrupts are enabled
   793                              ; then the CPU sleeps forever.
   794  3C41                        endm
   795                          
   796                              macro M8C_Stop
   797                              ; In general, you probably don't want to do this, but here's how:
   798                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   799                              ; Next instruction to be executed is located in the interrupt
   800                              ; vector table entry for Power-On Reset.
   801  3C41                        endm
   802                          
   803                              macro M8C_Reset
   804                              ; Restore CPU to the power-on reset state.
   805                              mov A, 0
   806                              SSC
   807                              ; Next non-supervisor instruction will be at interrupt vector 0.
   808  3C41                        endm
   809                          
   810                          ;----------------------------------------------------
   811                          ; ImageCraft Code Compressor Actions
   812                          ;----------------------------------------------------
   813                              ; Suspend Code Compressor
   814                              ; Must not span a RET or RETI instruction
   815                              ; without resuming code compression
   816                              macro Suspend_CodeCompressor
   817                              or   F, 0
   818  3C41                        endm
   819                          
   820                              ; Resume Code Compression
   821                              macro Resume_CodeCompressor
   822                              add  SP, 0
   823                              endm
      + 3C41                    
      + 3C41                    ; end of file m8c.inc
      + 3C41                    ;;*****************************************************************************
;;******************
      +                         ***********************************************************
;;  FILENAME: PWM8_BL.inc
;;   Version: 
      +                         2.60, Updated on 2013/5/19 at 10:44:7
;;  Generated by PSoC Designer 5.4.2946
;;
;;  DESCRIPTION: As
      +                         sembler declarations for the PWM8 user module interface
;;------------------------------------------
      +                         -----------------------------------
;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserve
      +                         d.
;;*****************************************************************************
;;***************
      +                         **************************************************************
   824                          
   825                          ; end of file m8c.inc
    29  00C0                    FLAG_PGMODE_MASK:  equ 0C0h     ; Paging control for > 256 bytes of RAM
    30  0000                    FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
    31  0040                    FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
    32  0080                    FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
    33  00C0                    FLAG_PGMODE_3:     equ 0C0h       ; Direct to CUR_PP page, indexed to STK_PP page
    34  0000                    FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
    35  0040                    FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
    36  0080                    FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
    37  00C0                    FLAG_PGMODE_11b:   equ 0C0h       ; Same as PGMODE_3
    38  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    39  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    40  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    41  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    42  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    43                          
    44                          
    45                          ;;=============================================================================
    46                          ;;      Register Space, Bank 0
    47                          ;;=============================================================================
    48                          
    49                          ;------------------------------------------------
    50                          ;  Port Registers
    51                          ;  Note: Also see this address range in Bank 1.
    52                          ;------------------------------------------------
    53                          ; Port 0
    54  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    55  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    56  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    57  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    58                          ; Port 1
    59  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    60  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    61  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    62  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    63                          ; Port 2
    64  0008                    PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
    65  0009                    PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
    66  000A                    PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
    67  000B                    PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
    68                          ; Port 3
    69  000C                    PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
    70  000D                    PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
    71  000E                    PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
    72  000F                    PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
    73                          ; Port 4
    74  0010                    PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
    75  0011                    PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
    76  0012                    PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
    77  0013                    PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
    78                          
    79                          ;------------------------------------------------
    80                          ;  Digital PSoC(tm) block Registers
    81                          ;  Note: Also see this address range in Bank 1.
    82                          ;------------------------------------------------
    83                          ; Digital PSoC block 00, Basic Type C
    84  0020                    DBC00DR0:     equ 20h          ; data register 0                          (#)
    85  0021                    DBC00DR1:     equ 21h          ; data register 1                          (W)
    86  0022                    DBC00DR2:     equ 22h          ; data register 2                          (RW)
    87  0023                    DBC00CR0:     equ 23h          ; control & status register 0              (#)
    88                          
    89                          ; Digital PSoC block 01, Basic Type C
    90  0024                    DBC01DR0:     equ 24h          ; data register 0                          (#)
    91  0025                    DBC01DR1:     equ 25h          ; data register 1                          (W)
    92  0026                    DBC01DR2:     equ 26h          ; data register 2                          (RW)
    93  0027                    DBC01CR0:     equ 27h          ; control & status register 0              (#)
    94                          
    95                          ; Digital PSoC block 02, Communications Type C
    96  0028                    DCC02DR0:     equ 28h          ; data register 0                          (#)
    97  0029                    DCC02DR1:     equ 29h          ; data register 1                          (W)
    98  002A                    DCC02DR2:     equ 2Ah          ; data register 2                          (RW)
    99  002B                    DCC02CR0:     equ 2Bh          ; control & status register 0              (#)
   100                          
   101                          ; Digital PSoC block 03, Communications Type C
   102  002C                    DCC03DR0:     equ 2Ch          ; data register 0                          (#)
   103  002D                    DCC03DR1:     equ 2Dh          ; data register 1                          (W)
   104  002E                    DCC03DR2:     equ 2Eh          ; data register 2                          (RW)
   105  002F                    DCC03CR0:     equ 2Fh          ; control & status register 0              (#)
   106                          
   107                          ; Digital PSoC block 10, Basic Type C
   108  0030                    DBC10DR0:     equ 30h          ; data register 0                          (#)
   109  0031                    DBC10DR1:     equ 31h          ; data register 1                          (W)
   110  0032                    DBC10DR2:     equ 32h          ; data register 2                          (RW)
   111  0033                    DBC10CR0:     equ 33h          ; control & status register 0              (#)
   112                          
   113                          ; Digital PSoC block 11, Basic Type C
   114  0034                    DBC11DR0:     equ 34h          ; data register 0                          (#)
   115  0035                    DBC11DR1:     equ 35h          ; data register 1                          (W)
   116  0036                    DBC11DR2:     equ 36h          ; data register 2                          (RW)
   117  0037                    DBC11CR0:     equ 37h          ; control & status register 0              (#)
   118                          
   119                          ; Digital PSoC block 12, Communications Type C
   120  0038                    DCC12DR0:     equ 38h          ; data register 0                          (#)
   121  0039                    DCC12DR1:     equ 39h          ; data register 1                          (W)
   122  003A                    DCC12DR2:     equ 3Ah          ; data register 2                          (RW)
   123  003B                    DCC12CR0:     equ 3Bh          ; control & status register 0              (#)
   124                          
   125                          ; Digital PSoC block 13, Communications Type C
   126  003C                    DCC13DR0:     equ 3Ch          ; data register 0                          (#)
   127  003D                    DCC13DR1:     equ 3Dh          ; data register 1                          (W)
   128  003E                    DCC13DR2:     equ 3Eh          ; data register 2                          (RW)
   129  003F                    DCC13CR0:     equ 3Fh          ; control & status register 0              (#)
   130                          
   131                          ;-------------------------------------
   132                          ;  Analog Control Registers
   133                          ;-------------------------------------
   134  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
   135  00C0                    AMX_IN_ACI3:          equ C0h    ; MASK: column 3 input mux
   136  0030                    AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
   137  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
   138  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
   139                          
   140  0061                    AMUX_CFG:      equ 61h          ; Analog MUX Configuration
   141  0030                    AMUX_CFG_INTCAP:       equ 30h    ;
   142  000E                    AMUX_CFG_MUXCLK:  	  equ 0Eh	 ;
   143  0001                    AMUX_CFG_EN:		  	  equ 01h	 ;
   144                          
   145                          ; old declarations DO NOT USE
   146  0061                    AMUXCFG:      equ 61h          ; Analog MUX Configuration
   147  0030                    AMUXCFG_INTCAP:       equ 30h    ;
   148  000E                    AMUXCFG_MUXCLK:  	  equ 0Eh	 ;
   149  0001                    AMUXCFG_EN:		  	  equ 01h	 ;
   150                          
   151  0062                    PWM_CR:       equ 62h          ; Pulse-Width Modulator Control
   152  0038                    PWM_CR_HIGH:          equ 38h    ; MASK: PWM high time
   153  0006                    PWM_CR_LOW:           equ 06h	 ; MASK: PWM low time
   154  0001                    PWM_CR_EN:            equ 01h	 ; MASK: Enable/Disable PWM function
   155                          
   156  0063                    ARF_CR:       equ 63h          ; Analog Reference Control
   157                          
   158  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus Register           (#)
   159  0080                    CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
   160  0040                    CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
   161  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
   162  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
   163  0008                    CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
   164  0004                    CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
   165  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
   166  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   167                          
   168  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   169  0020                    CMP_CR1_CLDIS1:       equ 20h    ; MASK: Column 1 comparator output latch
   170  0010                    CMP_CR1_CLDIS0:	      equ 10h    ; MASK: Column 0 comparator output latch
   171                          
   172  0068                    ADC0_CR:      equ 68h          ; Analog Column 0 Configuration
   173  0080                    ADC0_CR_CMPST:        equ 80h    ;
   174  0040                    ADC0_CR_LOREN:        equ 40h    ;
   175  0020                    ADC0_CR_SHEN:         equ 20h    ;
   176  0008                    ADC0_CR_CBSRC:        equ 08h    ;
   177  0004                    ADC0_CR_ADCM:         equ 04h    ;
   178  0001                    ADC0_CR_EN:	          equ 01h    ;
   179                          
   180  0069                    ADC1_CR:      equ 69h          ; Analog Column 1 Configuration
   181  0080                    ADC1_CR_CMPST:        equ 80h    ;
   182  0040                    ADC1_CR_LOREN:        equ 40h    ;
   183  0020                    ADC1_CR_SHEN:         equ 20h    ;
   184  0008                    ADC1_CR_CBSRC:        equ 08h    ;
   185  0004                    ADC1_CR_ADCM:         equ 04h    ;
   186  0001                    ADC1_CR_EN:	          equ 01h    ;
   187                          
   188                          ; Continuous Time PSoC block Type E Row 0 Col 0
   189  0072                    ACE00CR1:     equ 72h          ; Control register 1                       (RW)
   190  0073                    ACE00CR2:     equ 73h          ; Control register 2                       (RW)
   191                          
   192                          ; Continuous Time PSoC block Type E Row 0 Col 1
   193  0076                    ACE01CR1:     equ 76h          ; Control register 1                       (RW)
   194  0077                    ACE01CR2:     equ 77h          ; Control register 2                       (RW)
   195                          
   196                          ; Switched Cap PSoC blockType E Row 1 Col 0
   197  0080                    ASE10CR0:     equ 80h          ; Control register 0                       (RW)
   198                          
   199                          ; Switched Cap PSoC blockType E Row 1 Col 1
   200  0084                    ASE11CR0:     equ 84h          ; Control register 0                       (RW)
   201                          
   202                          ;-----------------------------------------------
   203                          ;  Global General Purpose Data Registers
   204                          ;-----------------------------------------------
   205  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   206  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   207  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   208  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   209                          
   210                          ;------------------------------------------------
   211                          ;  Row Digital Interconnects
   212                          ;
   213                          ;  Note: the following registers are mapped into
   214                          ;  both register bank 0 AND register bank 1.
   215                          ;------------------------------------------------
   216                          
   217  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   218  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   219  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   220  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   221  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   222  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   223  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   224                          
   225  00B8                    RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
   226  00B9                    RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
   227  00BA                    RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
   228  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   229  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   230  00BD                    RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
   231  00BE                    RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
   232                          
   233                          ;-----------------------------------------------
   234                          ;  Ram Page Pointers
   235                          ;-----------------------------------------------
   236  00D0                    CUR_PP:      equ 0D0h           ; Current   Page Pointer
   237  00D1                    STK_PP:      equ 0D1h           ; Stack     Page Pointer
   238  00D3                    IDX_PP:      equ 0D3h           ; Index     Page Pointer
   239  00D4                    MVR_PP:      equ 0D4h           ; MVI Read  Page Pointer
   240  00D5                    MVW_PP:      equ 0D5h           ; MVI Write Page Pointer
   241                          
   242                          ;------------------------------------------------
   243                          ;  I2C Configuration Registers
   244                          ;------------------------------------------------
   245  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   246  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   247  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   248  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   249  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   250  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   251  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   252  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   253  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   254  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   255                          
   256  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   257  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   258  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   259  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   260  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   261  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   262  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   263  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   264  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   265                          
   266  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   267                          
   268  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   269  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   270  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   271  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   272  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   273                          
   274                          ;------------------------------------------------
   275                          ;  System and Global Resource Registers
   276                          ;------------------------------------------------
   277  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   278                                                         ; Use INT_MSK0 bit field masks
   279  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   280                                                         ; Use INT_MSK1 bit field masks
   281  00DC                    INT_CLR2:     equ 0DCh          ; Interrupt Clear Register 2               (RW)
   282                                                         ; Use INT_MSK2 bit field masks
   283  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   284                                                         ; Use INT_MSK3 bit field masks
   285                          
   286  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   287  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   288  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   289                          
   290  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   291  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   292  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   293  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   294  0010                    INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
   295  0008                    INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
   296  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   297  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   298  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   299                          
   300  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   301  0080                    INT_MSK1_DCC13:            equ 80h ; MASK: enable/disable DCC13 block interrupt
   302  0040                    INT_MSK1_DCC12:            equ 40h ; MASK: enable/disable DCC12 block interrupt
   303  0020                    INT_MSK1_DBC11:            equ 20h ; MASK: enable/disable DBC11 block interrupt
   304  0010                    INT_MSK1_DBC10:            equ 10h ; MASK: enable/disable DBC10 block interrupt
   305  0008                    INT_MSK1_DCC03:            equ 08h ; MASK: enable/disable DCC03 block interrupt
   306  0004                    INT_MSK1_DCC02:            equ 04h ; MASK: enable/disable DCC02 block interrupt
   307  0002                    INT_MSK1_DBC01:            equ 02h ; MASK: enable/disable DBC01 block interrupt
   308  0001                    INT_MSK1_DBC00:            equ 01h ; MASK: enable/disable DBC00 block interrupt
   309                          
   310  00DF                    INT_MSK2:     equ DFh			; Custom block Mask Register			   (RW)
   311  0010                    INT_MSK2_SARADC:           equ 10h ; MASK: enable/disable SARADC block interrupt
   312  0020                    INT_MSK2_CSD0:             equ 20h ; MASK: enable/disable CSD0 block interrupt
   313  0040                    INT_MSK2_CSD1:             equ 40h ; MASK: enable/disable CSD1 block interrupt
   314  0080                    INT_MSK2_RTC:              equ 80h ; MASK: enable/disable RTC block interrupt
   315                          
   316  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   317  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   318                          
   319                          ;------------------------------------------------------
   320                          ;  MAC Registers
   321                          ;------------------------------------------------------
   322                          
   323  00E8                    MUL0_X:       equ 0E8h          ; Multiply Input X Register                (W)
   324  00E9                    MUL0_Y:       equ 0E9h          ; Multiply Input Y Register                (W)
   325  00EA                    MUL0_DH:      equ 0EAh          ; Multiply Result High Byte Register       (R)
   326  00EB                    MUL0_DL:      equ 0EBh          ; Multiply Result Low Byte Register        (R)
   327                          
   328  00EC                    ACC0_DR1:     equ 0ECh          ; Accumulator Data Register 1              (RW)
   329  00ED                    ACC0_DR0:     equ 0EDh          ; Accumulator Data Register 0              (RW)
   330  00EE                    ACC0_DR3:     equ 0EEh          ; Accumulator Data Register 3              (RW)
   331  00EF                    ACC0_DR2:     equ 0EFh          ; Accumulator Data Register 2              (RW)
   332                          
   333                          ; DECIMATOR Control Registers
   334  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   335  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   336                          
   337                          ;------------------------------------------------------
   338                          ;  System Status and Control Registers
   339                          ;
   340                          ;  Note: The following registers are mapped into both
   341                          ;        register bank 0 AND register bank 1.
   342                          ;------------------------------------------------------
   343  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   344                                                             ; Use FLAG_ masks defined at top of file
   345                          
   346  00FD                    DAC_D:        equ 0FDh		   ; DAC Data Register                        (RW)
   347                          
   348  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   349  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: flag, Internal Reset Status bit
   350  0010                    CPU_SCR1_SLIMO:         equ 10h	   ; MASK: Slow IMO (internal main osc) enable
   351  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   352  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   353  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   354                          
   355  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   356  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   357  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   358  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   359  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   360  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   361                          
   362                          ;------------------------------------------------------
   363                          ;  Neon Capsense Digital Control Registers
   364                          ;------------------------------------------------------
   365  0050                    CSD0_DR0_L:				equ 50h		; Capsense 0 data low 0				(RW)
   366  0054                    CSD0_DR0_H:				equ 54h		; Capsense 0 data high 0			(RW)
   367  0058                    CSD1_DR0_L:				equ 58h		; Capsense 1 data low 0				(RW)
   368  005C                    CSD1_DR0_H:				equ 5Ch		; Capsense 1 data high 0			(RW)
   369  0051                    CSD0_DR1_L:				equ 51h		; Capsense 0 data low 1				(RW)
   370  0055                    CSD0_DR1_H:				equ 55h		; Capsense 0 data high 1			(RW)
   371  0059                    CSD1_DR1_L:				equ 59h		; Capsense 1 data low 1				(RW)
   372  005D                    CSD1_DR1_H:				equ 5Dh		; Capsense 1 data high 1			(RW)
   373  0052                    CSD0_CNT_L:				equ 52h		; Capsense 0 counter low			(RW)
   374  0056                    CSD0_CNT_H:				equ 56h		; Capsense 0 counter high			(RW)
   375  005A                    CSD1_CNT_L:				equ 5Ah		; Capsense 1 counter low			(RW)
   376  005E                    CSD1_CNT_H:				equ	5Eh		; Capsense 1 counter high			(RW)
   377  0053                    CSD0_CR0:				equ 53h		; Capsense 0 control 0				(RW)
   378  005B                    CSD1_CR0:				equ 5Bh		; Capsense 1 control 0				(RW)
   379  0057                    CSD0_CR1:				equ 57h		; Capsense 0 control 1				(RW)
   380  005F                    CSD1_CR1:				equ 5Fh		; Capsense 1 control 1				(RW)
   381                          
   382                          ;------------------------------------------------------
   383                          ;  Neon Analog Registers
   384                          ;------------------------------------------------------
   385  0065                    ASY_CR:					equ 65h		; Analog Synchronization Control	(RW)
   386  006A                    ADC_DH:					equ 6Ah		; ADC data high						(RW)
   387  006B                    ADC_DL:					equ 6Bh		; ADC data low						(RW)
   388  00C8                    PWMVREF0:				equ C8h		; PWM Voltage Reference 0			(RW)
   389  00C9                    PWMVREF1:				equ C9h		; PWM Voltage Reference 1			(RW)
   390  00CB                    PWMSRC:					equ CBh		; PWM Source						(RW)
   391  00CA                    IDACMODE:				equ CAh		; IDAC Mode							(RW)
   392  00FC                    IDACR_D:				equ FCh		; Analog Mux DAC data 0				(RW)
   393  00FD                    IDACL_D:				equ FDh		; Analog Mux DAC data 1				(RW)
   394                          
   395                          ;------------------------------------------------------
   396                          ;  Neon Digital Registers
   397                          ;------------------------------------------------------
   398  00B7                    RDI0DSM:				equ B7h		; Row Digital Interconnect input select 0	(RW)
   399  00BF                    RDI1DSM:				equ BFh		; Row Digital Interconnect input select 1	(RW)
   400                          
   401                          ;------------------------------------------------------
   402                          ;  Neon Test Registers
   403                          ;------------------------------------------------------
   404  00CC                    TSCR0:					equ CCh		; Tsource 0							(RW)
   405  00CD                    TSCMPH:					equ CDh		; TSCMP high						(RW)
   406  00CE                    TSCMPL:					equ CEh		; TSCMP low							(RW)
   407  00CF                    TSCR1:					equ CFh		; Tsource 1							(RW)
   408                          
   409                          ;;=============================================================================
   410                          ;;      Register Space, Bank 1
   411                          ;;=============================================================================
   412                          
   413                          ;------------------------------------------------
   414                          ;  Port Registers
   415                          ;  Note: Also see this address range in Bank 0.
   416                          ;------------------------------------------------
   417                          ; Port 0
   418  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   419  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   420  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   421  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   422                          
   423                          ; Port 1
   424  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   425  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   426  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   427  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   428                          
   429                          ; Port 2
   430  0008                    PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
   431  0009                    PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
   432  000A                    PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
   433  000B                    PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
   434                          
   435                          ; Port 3
   436  000C                    PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
   437  000D                    PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
   438  000E                    PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
   439  000F                    PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
   440                          
   441                          ; Port 4
   442  0010                    PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
   443  0011                    PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
   444  0012                    PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
   445  0013                    PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
   446                          
   447                          ;------------------------------------------------
   448                          ;  Digital PSoC(tm) block Registers
   449                          ;  Note: Also see this address range in Bank 0.
   450                          ;------------------------------------------------
   451                          
   452                          ; Digital PSoC block 00, Basic Type C
   453  0020                    DBC00FN:      equ 20h          ; Function Register                        (RW)
   454  0021                    DBC00IN:      equ 21h          ;    Input Register                        (RW)
   455  0022                    DBC00OU:      equ 22h          ;   Output Register                        (RW)
   456  0023                    DBC00CR1:     equ 23h          ;   control & status register 1            (RW)
   457                          
   458                          ; Digital PSoC block 01, Basic Type C
   459  0024                    DBC01FN:      equ 24h          ; Function Register                        (RW)
   460  0025                    DBC01IN:      equ 25h          ;    Input Register                        (RW)
   461  0026                    DBC01OU:      equ 26h          ;   Output Register                        (RW)
   462  0027                    DBC01CR1:     equ 27h          ;   control & status register 1            (RW)
   463                          
   464                          ; Digital PSoC block 02, Communications Type C
   465  0028                    DCC02FN:      equ 28h          ; Function Register                        (RW)
   466  0029                    DCC02IN:      equ 29h          ;    Input Register                        (RW)
   467  002A                    DCC02OU:      equ 2Ah          ;   Output Register                        (RW)
   468  002B                    DBC02CR1:     equ 2Bh          ;   control & status register 1            (RW)
   469                          
   470                          ; Digital PSoC block 03, Communications Type C
   471  002C                    DCC03FN:      equ 2Ch          ; Function Register                        (RW)
   472  002D                    DCC03IN:      equ 2Dh          ;    Input Register                        (RW)
   473  002E                    DCC03OU:      equ 2Eh          ;   Output Register                        (RW)
   474  0029                    DBC03CR1:     equ 29h          ;   control & status register 1            (RW)
   475                          
   476                          ; Digital PSoC block 10, Basic Type C
   477  0030                    DBC10FN:      equ 30h          ; Function Register                        (RW)
   478  0031                    DBC10IN:      equ 31h          ;    Input Register                        (RW)
   479  0032                    DBC10OU:      equ 32h          ;   Output Register                        (RW)
   480  0033                    DBC10CR1:     equ 33h          ;   control & status register 1            (RW)
   481                          
   482                          ; Digital PSoC block 11, Basic Type C
   483  0034                    DBC11FN:      equ 34h          ; Function Register                        (RW)
   484  0035                    DBC11IN:      equ 35h          ;    Input Register                        (RW)
   485  0036                    DBC11OU:      equ 36h          ;   Output Register                        (RW)
   486  0037                    DBC11CR1:     equ 37h          ;   control & status register 1            (RW)
   487                          
   488                          ; Digital PSoC block 12, Communications Type C
   489  0038                    DCC12FN:      equ 38h          ; Function Register                        (RW)
   490  0039                    DCC12IN:      equ 39h          ;    Input Register                        (RW)
   491  003A                    DCC12OU:      equ 3Ah          ;   Output Register                        (RW)
   492  003B                    DBC12CR1:     equ 3Bh          ;   control & status register 1            (RW)
   493                          
   494                          ; Digital PSoC block 13, Communications Type C
   495  003C                    DCC13FN:      equ 3Ch          ; Function Register                        (RW)
   496  003D                    DCC13IN:      equ 3Dh          ;    Input Register                        (RW)
   497  003E                    DCC13OU:      equ 3Eh          ;   Output Register                        (RW)
   498  003F                    DBC13CR1:     equ 3Fh          ;   control & status register 1            (RW)
   499                          
   500                          ;------------------------------------------------
   501                          ;  System and Global Resource Registers
   502                          ;  Note: Also see this address range in Bank 0.
   503                          ;------------------------------------------------
   504                          
   505  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   506  00C0                    CLK_CR0_ACOLUMN_3:    equ C0h    ; MASK: Specify clock for analog cloumn
   507  0030                    CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
   508  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   509  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   510                          
   511  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   512  0018                    CLK_CR1_ACLK1:        equ 18h    ; MASK: Digital PSoC block for analog source
   513  0003                    CLK_CR1_ACLK0:        equ 03h    ; MASK: Digital PSoC block for analog source
   514                          
   515  0003                    CLK_CR1_ACLK2:        equ 03h    ; Deprecated do not use
   516                          
   517  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   518  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   519                          
   520  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   521  000F                    AMD_CR0_AMOD0:        equ 0Fh    ; MASK: Modulation source for analog column 0
   522                          
   523  0064                    CMP_GO_EN:    equ 64h          ; Comparator Bus To Global Out Enable      (RW)
   524  0080                    CMP_GO_EN_GOO5:       equ 80h    ; MASK: Selected Col 1 signal to GOO5
   525  0040                    CMP_GO_EN_GOO1:       equ 40h    ; MASK: Selected Col 1 signal to GOO1
   526  0030                    CMP_GO_EN_SEL1:       equ 30h    ; MASK: Column 1 Signal Select
   527  0008                    CMP_GO_EN_GOO4:       equ 08h    ; MASK: Selected Col 0 signal to GOO4
   528  0004                    CMP_GO_EN_GOO0:       equ 04h    ; MASK: Selected Col 0 signal to GOO0
   529  0003                    CMP_GO_EN_SEL0:       equ 03h    ; MASK: Column 0 Signal Select
   530                          
   531  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   532  000F                    AMD_CR1_AMOD1:        equ 0Fh    ; MASK: Modulation ctrl for analog column 1
   533                          
   534  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   535  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   536  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   537                          
   538  006B                    CLK_CR3:      equ 6Bh          ; Analog Clock Source Control Register 3   (RW)
   539  0040                    CLK_CR3_SYS1:         equ 40h    ; MASK: Analog Clock 1 selection
   540  0030                    CLK_CR3_DIVCLK1:      equ 30h    ; MASK: Analog Clock 1 divider
   541  0004                    CLK_CR3_SYS0:         equ 04h    ; MASK: Analog Clock 0 selection
   542  0003                    CLK_CR3_DIVCLK0:      equ 03h    ; MASK: Analog Clock 0 divider
   543                          
   544                          ;------------------------------------------------
   545                          ;  Global Digital Interconnects
   546                          ;------------------------------------------------
   547                          
   548  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   549  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   550  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   551  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   552                          
   553  00A0                    GDI_O_IN_CR:  equ 0A0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   554  00A1                    GDI_E_IN_CR:  equ 0A1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   555  00A2                    GDI_O_OU_CR:  equ 0A2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   556  00A3                    GDI_E_OU_CR:  equ 0A3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   557                          
   558  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   559  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   560                          
   561                          ;------------------------------------------------
   562                          ;  Analog Mux Bus Port Enable Bits
   563                          ;------------------------------------------------
   564  00D8                    MUX_CR0:      equ 0D8h          ; Analog Mux Port 0 Bit Enables Register
   565  00D9                    MUX_CR1:      equ 0D9h          ; Analog Mux Port 1 Bit Enables Register
   566  00DA                    MUX_CR2:      equ 0DAh          ; Analog Mux Port 2 Bit Enables Register
   567  00DB                    MUX_CR3:      equ 0DBh          ; Analog Mux Port 3 Bit Enables Register
   568  00EC                    MUX_CR4:      equ 0ECh          ; Analog Mux Port 4 Bit Enables Register
   569                          
   570                          ;------------------------------------------------
   571                          ;  Clock and System Control Registers
   572                          ;------------------------------------------------
   573                          
   574  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   575  0080                    OSC_GO_EN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   576  0040                    OSC_GO_EN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   577  0020                    OSC_GO_EN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   578  0010                    OSC_GO_EN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   579  0008                    OSC_GO_EN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   580  0004                    OSC_GO_EN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   581  0002                    OSC_GO_EN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   582  0001                    OSC_GO_EN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   583                          
   584  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   585  0003                    OSC_CR4_VC3SEL:       equ 03h    ; MASK: System VC3 Clock source
   586                          
   587  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   588                          
   589  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   590  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   591  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   592  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   593  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   594  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   595  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   596  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   597  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   598  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   599  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   600  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   601  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   602  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   603  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   604  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   605  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   606  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   607                          
   608  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   609  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   610  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   611                          
   612  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   613  0080                    OSC_CR2_PLLGAIN:      equ 80h    ; MASK: High/Low gain
   614  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   615  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   616  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   617                          
   618  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   619  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   620  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   621  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   622  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   623  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   624  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   625  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   626                          
   627  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   628  0008                    VLT_CMP_NOWRITE:      equ 08h    ; MASK: Vcc below Flash Write level
   629  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   630  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   631  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   632                          
   633  00E5                    ADC0_TR:      equ 0E5h          ; ADC Column 0 Trim Register
   634  00E6                    ADC1_TR:      equ 0E6h          ; ADC Column 1 Trim Register
   635                          
   636  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   637  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   638  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   639  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   640                          
   641  00FA                    FLS_PR1:      equ 0FAh          ; Flash Program Register 1                 (RW)
   642  0003                    FLS_PR1_BANK:         equ 03h    ; MASK: Select Active Flash Bank
   643                          
   644  00FD                    DAC_CR0:       equ 0FDh          ; Analog Mux DAC Control Register 0
   645  00DC                    DAC_CR1:       equ 0DCh          ; Analog Mux DAC Control Register 1
   646  0008                    DAC_CR_IRANGE:        equ 08h    ; MASK: Sets the DAC Range low or high
   647  0006                    DAC_CR_OSCMODE:       equ 06h    ; MASK: Defines the reset mode for AMux
   648  0001                    DAC_CR_ENABLE:        equ 01h    ; MASK: Enable/Disable DAC function
   649                          
   650                          ;------------------------------------------------
   651                          ;  I2C Control Registers
   652                          ;------------------------------------------------
   653                          
   654  00AD                    I2C_ADDR:    equ 0ADh          ; I2C Address Register (RW)
   655                          
   656                          ;------------------------------------------------------
   657                          ;  Neon Analog Registers
   658                          ;------------------------------------------------------
   659  0053                    VDAC50CR0:		equ 53h			; V DAC5 control 0				(RW)
   660  0057                    VDAC51CR0:		equ 57h			; V DAC5 control 1				(RW)
   661  00A8                    ADC_CR0:		equ A8h			; ADC control 0					(RW)
   662  00A9                    ADC_CR1:		equ A9h			; ADC control 1					(RW)
   663  00AA                    ADC_CR2:		equ AAh			; ADC control 2					(RW)
   664  00AB                    ADC_CR3TRIM:	equ ABh			; ADC control 3					(RW)
   665  00AC                    ADC_CR4:		equ ACh			; ADC control 4					(RW)
   666  00E7                    VDAC_TRIM:		equ E7h			; V DAC trim					(RW)
   667                          
   668                          ;------------------------------------------------------
   669                          ;  Neon Current Sense CMP Registers
   670                          ;------------------------------------------------------
   671  0050                    CMP0CR1:		equ 50h			; CMP0 control 1				(RW)
   672  0051                    CMP0CR2:		equ 51h			; CMP0 control 2				(RW)
   673  0054                    CMP1CR1:		equ 54h			; CMP1 control 1				(RW)
   674  0055                    CMP1CR2:		equ 55h			; CMP1 control 2				(RW)
   675  0058                    CSCMPCR0:		equ 58h			; CSCMP control 0				(RW)
   676  0059                    CSCMPGOEN:		equ 59h			; CSCMO global out enable		(RW)
   677  005A                    CSLUTCR0:		equ 5Ah			; CSLUT control 0				(RW)
   678  005B                    CMPCOLMUX:		equ 5Bh			; CMP Column Mux				(RW)
   679  005C                    CMPPWMCR:		equ 5Ch			; CMP PWM control				(RW)
   680  005D                    CMPFLTCR:		equ 5Dh			; CMP filter control			(RW)
   681  005E                    CMPCLK1:		equ 5Eh			; CMP clock 1					(RW)
   682  005F                    CMPCLK0:		equ 5Fh			; CMP clock 0					(RW)
   683                          
   684                          ;------------------------------------------------------
   685                          ;  Neon Real Time Clock Registers
   686                          ;------------------------------------------------------
   687  00A4                    RTCH:			equ A4h			; Real time current hour		(RW)
   688  00A5                    RTCM:			equ A5h			; Real time current minute		(RW)
   689  00A6                    RTCS:			equ A6h			; Real time current second		(RW)
   690  00A7                    RTCCR:			equ A7h			; Real time clock control		(RW)
   691                          
   692                          ;------------------------------------------------------
   693                          ;  Analog MUX Config Registers
   694                          ;------------------------------------------------------
   695                          
   696  006A                    AMUX_CFG1:			equ 6Ah  ; Analog MUX Configuration 1
   697  0020                    AMUX_CFG1_GOINVR:	equ 20h  ;
   698  0010                    AMUX_CFG1_GOINVL:  	equ 10h	 ;
   699  000C                    AMUX_CFG1_AMUXMODR:	equ 0Ch	 ;
   700  0003                    AMUX_CFG1_AMUXMODL:	equ 03h	 ;
   701                          
   702                          ;;=============================================================================
   703                          ;;      M8C System Macros
   704                          ;;  These macros should be used when their functions are needed.
   705                          ;;=============================================================================
   706                          
   707                          ;----------------------------------------------------
   708                          ;  Swapping Register Banks
   709                          ;----------------------------------------------------
   710                              macro M8C_SetBank0
   711                              and   F, ~FLAG_XIO_MASK
   712  3C41                        endm
   713                          
   714                              macro M8C_SetBank1
   715                              or    F, FLAG_XIO_MASK
   716  3C41                        endm
   717                          
   718                          ;----------------------------------------------------
   719                          ;  Global Interrupt Enable/Disable
   720                          ;----------------------------------------------------
   721                              macro M8C_EnableGInt
   722                              or    F, FLAG_GLOBAL_IE
   723  3C41                        endm
   724                          
   725                              macro M8C_DisableGInt
   726                              and   F, ~FLAG_GLOBAL_IE
   727  3C41                        endm
   728                          
   729                          ;----------------------------------------------------
   730                          ;  Enable/Disable Interrupt Mask
   731                          ;
   732                          ;  Use the following macros to enable/disable
   733                          ;  bits in the Interrupt mask registers,
   734                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   735                          ;
   736                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   737                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   738                          ;
   739                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   740                          ;        and MASK is the bit set to enable or disable
   741                          ;----------------------------------------------------
   742                          ; Disable Interrupt Bit Mask(s)
   743                              macro M8C_DisableIntMask
   744                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   745  3C41                        endm
   746                          
   747                          ; Enable Interrupt Bit Mask(s)
   748                              macro M8C_EnableIntMask
   749                              or    reg[@0], @1               ; enable specified interrupt enable bit
   750  3C41                        endm
   751                          
   752                          ;----------------------------------------------------
   753                          ;  Clear Posted Interrupt Flag Mask
   754                          ;
   755                          ;  Use the following macros to clear the
   756                          ;  bits in the Interrupt Clear registers,
   757                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   758                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   759                          ;
   760                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   761                          ;        and MASK is the bit set to enable or disable
   762                          ;----------------------------------------------------
   763                              macro M8C_ClearIntFlag
   764                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   765  3C41                        endm
   766                          
   767                          ;----------------------------------------------------
   768                          ;  Power-On Reset & WatchDog Timer Functions
   769                          ;----------------------------------------------------
   770                              macro M8C_EnableWatchDog
   771                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   772  3C41                        endm
   773                          
   774                              macro M8C_ClearWDT
   775                              mov   reg[RES_WDT], 00h
   776  3C41                        endm
   777                          
   778                              macro M8C_ClearWDTAndSleep
   779                              mov   reg[RES_WDT], 38h
   780  3C41                        endm
   781                          
   782                          ;----------------------------------------------------
   783                          ;  Sleep, CPU Stop & Software Reset
   784                          ;----------------------------------------------------
   785                              macro M8C_Sleep
   786                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   787                              ; The next instruction to be executed depends on the state of the
   788                              ; various interrupt enable bits. If some interrupts are enabled
   789                              ; and the global interrupts are disabled, the next instruction will
   790                              ; be the one that follows the invocation of this macro. If global
   791                              ; interrupts are also enabled then the next instruction will be
   792                              ; from the interrupt vector table. If no interrupts are enabled
   793                              ; then the CPU sleeps forever.
   794  3C41                        endm
   795                          
   796                              macro M8C_Stop
   797                              ; In general, you probably don't want to do this, but here's how:
   798                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   799                              ; Next instruction to be executed is located in the interrupt
   800                              ; vector table entry for Power-On Reset.
   801  3C41                        endm
   802                          
   803                              macro M8C_Reset
   804                              ; Restore CPU to the power-on reset state.
   805                              mov A, 0
   806                              SSC
   807                              ; Next non-supervisor instruction will be at interrupt vector 0.
   808  3C41                        endm
   809                          
   810                          ;----------------------------------------------------
   811                          ; ImageCraft Code Compressor Actions
   812                          ;----------------------------------------------------
   813                              ; Suspend Code Compressor
   814                              ; Must not span a RET or RETI instruction
   815                              ; without resuming code compression
   816                              macro Suspend_CodeCompressor
   817                              or   F, 0
   818  3C41                        endm
   819                          
   820                              ; Resume Code Compression
   821                              macro Resume_CodeCompressor
   822                              add  SP, 0
   823  3C41                        endm
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  FILENAME: PWM8_BL.inc
     4                          ;;   Version: 2.60, Updated on 2013/5/19 at 10:44:7
     5                          ;;  Generated by PSoC Designer 5.4.2946
     6                          ;;
     7                          ;;  DESCRIPTION: Assembler declarations for the PWM8 user module interface
     8                          ;;-----------------------------------------------------------------------------
     9                          ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
    10                          ;;*****************************************************************************
    11                          ;;*****************************************************************************
    12                          
    13                          include "m8c.inc"
    14                          
    15                          
    16                          ;--------------------------------------------------
    17                          ; Constants for PWM8_BL API's.
    18                          ;--------------------------------------------------
    19                          
    20  0001                    PWM8_BL_CONTROL_REG_START_BIT:             equ 0x01    ; Control register start bit
    21  00E1                    PWM8_BL_INT_REG:                           equ 0x0e1
    22  0010                    PWM8_BL_INT_MASK:                          equ 0x10
    23                          
    24                          
    25                          ;--------------------------------------------------
    26                          ; Constants for PWM8_BL user defined values
    27                          ;--------------------------------------------------
    28                          
    29  0000                    PWM8_BL_PERIOD:                            equ 0x00
    30  0000                    PWM8_BL_PULSE_WIDTH:                       equ 0x00
    31                          
    32                          
    33                          ;--------------------------------------------------
    34                          ; Register Address Constants for PWM8_BL
    35                          ;--------------------------------------------------
    36                          
    37  0030                    PWM8_BL_COUNTER_REG:                   equ 0x30   ; DR0 Count register
    38  0031                    PWM8_BL_PERIOD_REG:                    equ 0x31   ; DR1 Period register
    39  0032                    PWM8_BL_COMPARE_REG:                   equ 0x32   ; DR2 Compare register
    40  0033                    PWM8_BL_CONTROL_REG:                   equ 0x33   ; Control register
    41  0030                    PWM8_BL_FUNC_REG:                      equ 0x30   ; Function register
    42  0031                    PWM8_BL_INPUT_REG:                     equ 0x31   ; Input register
    43  0032                    PWM8_BL_OUTPUT_REG:                    equ 0x32   ; Output register
    44                          
    45                          
    46                          ;--------------------------------------------------
    47                          ; PWM8_BL Macro 'Functions'
    48                          ;--------------------------------------------------
    49                          
    50                             macro PWM8_BL_Start_M
    51                             or    reg[PWM8_BL_CONTROL_REG],  PWM8_BL_CONTROL_REG_START_BIT
    52  3C41                       endm
    53                          
    54                             macro PWM8_BL_Stop_M
    55                             and   reg[PWM8_BL_CONTROL_REG], ~PWM8_BL_CONTROL_REG_START_BIT
    56  3C41                       endm
    57                          
    58                             macro PWM8_BL_EnableInt_M
    59                             M8C_EnableIntMask PWM8_BL_INT_REG, PWM8_BL_INT_MASK
    60  3C41                       endm
    61                          
    62                             macro PWM8_BL_DisableInt_M
    63                             M8C_DisableIntMask PWM8_BL_INT_REG, PWM8_BL_INT_MASK
    64                             endm
      + 3C41                    
      + 3C41                    ; end of file PWM8_BL.inc
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;
     4                          ;;       FILENAME: Memory.inc
     5                          ;;
     6                          ;;    DESCRIPTION: Memory Model and Stack Parameter Definitions for 
     7                          ;;                 CY8C22045 PSoC devices.
     8                          ;;
     9                          ;;  LAST MODIFIED: August 17, 2004
    10                          ;;
    11                          ;;-----------------------------------------------------------------------------
    12                          ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
    13                          ;;*****************************************************************************
    14                          ;;*****************************************************************************
    15                          ;
    16                          ;
    17                          ;  ******** Define Memory Model and Stack parameters ********
    18                          ;
    19  0001                    IMAGECRAFT: equ 1   
    20  0002                    HITECH: equ 2   
    21  0002                    TOOLCHAIN: equ HITECH   
    22  0001                    SYSTEM_LARGE_MEMORY_MODEL: equ 1   
    23  0000                    SYSTEM_SMALL_MEMORY_MODEL: equ 0   
    24  0003                    SYSTEM_STACK_PAGE: equ 3   
    25  0000                    SYSTEM_STACK_PAGE_OFFSET: equ 0   
    26  0002                    SYSTEM_TOOLS: equ 2   
    27  0000                    SYSTEM_IDXPG_TRACKS_STK_PP: equ 0   
    28  0001                    SYSTEM_IDXPG_TRACKS_IDX_PP: equ 1   
    29  0000                    SYSTEM_MULTIPAGE_STACK: equ 0 
    30                          
    31                          
    32                          ;  ******* Function Class Definitions *******
    33                          ;
    34                          ;  These definitions are used to describe RAM access patterns. They provide
    35                          ;  documentation and they control prologue and epilogue macros that perform
    36                          ;  the necessary housekeeping functions for large memory model devices like
    37                          ;  the CY8C22045.
    38                          
    39  0001                    RAM_USE_CLASS_1:               equ 1   ; PUSH, POP & I/O access
    40  0002                    RAM_USE_CLASS_2:               equ 2   ; Indexed address mode on stack page
    41  0004                    RAM_USE_CLASS_3:               equ 4   ; Indexed address mode to any page
    42  0008                    RAM_USE_CLASS_4:               equ 8   ; Direct/Indirect address mode access
    43                          
    44                          ; ******* Hi Tech Specific *******
    45                          ; Turn on the expansion of all macros by default
    46                          IF (TOOLCHAIN & HITECH)
    47                          OPT EXPAND
    48                          ENDIF
    49                          ; ******* Page Pointer Manipulation Macros *******
    50                          ;
    51                          ;  ******* Page Pointer Manipulation Macros *******
    52                          ;
    53                          ;  Most of the following macros are conditionally compiled so they only
    54                          ;  produce code if the large memory model is selected.
    55                          
    56                             ;-----------------------------------------------
    57                             ;  Set Stack Page Macro
    58                             ;-----------------------------------------------
    59                             ;
    60                             ;  DESC: Modify STK_PP in the large or small memory Models.
    61                             ;
    62                             ; INPUT: Constant (e.g., SYSTEM_STACK_PAGE) that specifies the RAM page on
    63                             ;        which stack operations like PUSH and POP store and retrieve their
    64                             ;        data
    65                             ;
    66                             ;  COST: 8 instruction cycles (in LMM only)
    67                          
    68                             macro RAM_SETPAGE_STK( PG_NUMBER )
    69                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    70                                mov reg[STK_PP], @PG_NUMBER
    71                             ENDIF
    72  3C41                       endm
    73                          
    74                             ;-----------------------------------------------
    75                             ;  Set Current Page Macro
    76                             ;-----------------------------------------------
    77                             ;
    78                             ;  DESC: Modify CUR_PP in the large or small memory Models.
    79                             ;
    80                             ; INPUT: Constant value (e.g., >bFoo) for the RAM page number used in
    81                             ;        calculation of effective direct-mode address operands.
    82                             ;
    83                             ;  COST: 8 instruction cycles (in LMM only)
    84                          
    85                             macro RAM_SETPAGE_CUR( PG_NUMBER )
    86                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    87                                mov reg[CUR_PP], @PG_NUMBER
    88                             ENDIF
    89  3C41                       endm
    90                          
    91                             ;-----------------------------------------------
    92                             ;  Set Index Page Macro
    93                             ;-----------------------------------------------
    94                             ;
    95                             ;  DESC: Modify IDX_PP in the large or small emory Models.
    96                             ;
    97                             ; INPUT: Constant value (e.g., >caFoo) for the RAM page number used in
    98                             ;         calculation of effective index-mode address operands.
    99                             ;
   100                             ;  COST: 8 instruction cycles (in LMM only)
   101                          
   102                             macro RAM_SETPAGE_IDX( PG_NUMBER )
   103                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   104                                mov reg[IDX_PP], @PG_NUMBER
   105                             ENDIF
   106  3C41                       endm
   107                          
   108                             ;-----------------------------------------------
   109                             ;  Set MVI Read Page Macro
   110                             ;-----------------------------------------------
   111                             ;
   112                             ;  DESC: Modify MVR_PP in the large or small memory Models.
   113                             ;
   114                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   115                             ;        calculation of indirect address operands used in the
   116                             ;        "mvi A, [pFoo]" instructions.
   117                             ;
   118                             ;  COST: 8 instruction cycles (in LMM only)
   119                          
   120                             macro RAM_SETPAGE_MVR( PG_NUMBER )
   121                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   122                                mov reg[MVR_PP], @PG_NUMBER
   123                             ENDIF
   124  3C41                       endm
   125                          
   126                             ;-----------------------------------------------
   127                             ;  Set MVI Write Page Macro
   128                             ;-----------------------------------------------
   129                             ;
   130                             ;  DESC: Modify MVW_PP in the large or small memory Models.
   131                             ;
   132                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   133                             ;        calculation of indirect address operands used in the
   134                             ;        "mvi [pFoo], A" instructions.
   135                             ;
   136                             ;  COST: 8 instruction cycles (in LMM only)
   137                          
   138                             macro RAM_SETPAGE_MVW( PG_NUMBER )
   139                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   140                                mov reg[MVW_PP], @PG_NUMBER
   141                             ENDIF
   142  3C41                       endm
   143                          
   144                             ;-----------------------------------------------
   145                             ;  Force Index Page Pointer to Stack Page
   146                             ;-----------------------------------------------
   147                             ;
   148                             ;  DESC: Map index-mode operands onto the stack page by modifying IDX_PP.
   149                             ;        See also RAM_LOCK_INDEX_TO_STACKPAGE.
   150                             ;
   151                             ; INPUT: None
   152                             ;
   153                             ;  COST: 8 instruction cycles (in LMM only)
   154                          
   155                             macro RAM_SETPAGE_IDX2STK
   156                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   157                                IF ( SYSTEM_MULTIPAGE_STACK )
   158                                   mov   A, reg[STK_PP]
   159                                   mov   reg[IDX_PP], A
   160                                ELSE
   161                                   RAM_SETPAGE_IDX SYSTEM_STACK_PAGE
   162                                ENDIF
   163                             ENDIF
   164  3C41                       endm
   165                          
   166                             ;-----------------------------------------------
   167                             ;  Change Memory Mode
   168                             ;-----------------------------------------------
   169                             ;
   170                             ;  DESC: Modify FLAG_PAGEMODE bits in the large and small memory Models.
   171                             ;
   172                             ; INPUT: Constant value for PGMODE bitfield of CPU Flag register, F.
   173                             ;        See FLAG_PGMODE_{x} constants in M8C.INC.
   174                             ;
   175                             ;  COST: 8 instruction cycles (in LMM only)
   176                          
   177                             macro RAM_CHANGE_PAGE_MODE( MODE )
   178                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   179                                and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
   180                                or    F,  FLAG_PGMODE_MASK & @MODE
   181                             ENDIF
   182  3C41                       endm
   183                          
   184                             ;-----------------------------------------------
   185                             ;  Set Large Memory Model Native Paging Mode
   186                             ;-----------------------------------------------
   187                             ;
   188                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   189                             ;        paging mode *IFF* a simple "OR" is guaranteed to work---for
   190                             ;        example, in an ISR, when the PGMODE bits have been cleared
   191                             ;        to zero. If a simple "OR" is not guaranteed to work, use
   192                             ;        the slower RAM_RESTORE_NATIVE_PAGING instead.
   193                             ;
   194                             ; INPUT: none
   195                             ;
   196                             ;  COST: 4 instruction cycles (in LMM only)
   197                          
   198                             macro RAM_SET_NATIVE_PAGING
   199                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   200                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   201                                or    F,  FLAG_PGMODE_11b            ; LMM w/ IndexPage<==>StackPage
   202                             ENDIF ;  PGMODE LOCKED
   203                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   204                                or    F,  FLAG_PGMODE_10b            ; LMM with independent IndexPage
   205                             ENDIF ; PGMODE FREE
   206                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   207  3C41                       endm
   208                          
   209                             ;-----------------------------------------------
   210                             ; Restore Large Memory Model Native Paging Mode
   211                             ;-----------------------------------------------
   212                             ;
   213                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   214                             ;        paging mode. Always works because it clears the PGMODE bits
   215                             ;        before OR-ing in the new ones. See RAM_RESTORE_NATIVE_PAGING
   216                             ;        for a faster method.
   217                             ;
   218                             ; INPUT: none
   219                             ;
   220                             ;  COST: 8 instruction cycles (in LMM only)
   221                          
   222                             macro RAM_RESTORE_NATIVE_PAGING
   223                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   224                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   225                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_11b ; LMM w/ IndexPage<==>StackPage
   226                             ENDIF ;  PGMODE LOCKED
   227                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   228                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b ; LMM with independent IndexPage
   229                             ENDIF ; PGMODE FREE
   230                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   231  3C41                       endm
   232                          
   233                             ;-----------------------------------------------
   234                             ; Force indexed addr mode operands to Stack Pg
   235                             ;-----------------------------------------------
   236                             ;
   237                             ;  DESC: Force instructions that use indexed address mode to reference the
   238                             ;        stack page (as defined by STK_PP). This macro sets the "Indexed
   239                             ;        Stack Mode" bit (LSB) of the PGMODE bit field in the CPU Flag
   240                             ;        register, F. (See also RAM_SETPAGE_IDX2STK, above.)
   241                             ;
   242                             ; INPUT: none
   243                             ;
   244                             ;  COST: 4 instruction cycles (in LMM only)
   245                          
   246                             macro RAM_X_POINTS_TO_STACKPAGE
   247                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   248                                or   F, FLAG_PGMODE_01b
   249                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   250  3C41                       endm
   251                          
   252                             ;-----------------------------------------------
   253                             ;  Force indexed addr mode operands to Index Pg
   254                             ;-----------------------------------------------
   255                             ;
   256                             ;  DESC: Permit instructions that use indexed address mode to reference page
   257                             ;        zero or the page pointed to by the IDX_PP register, depending on the
   258                             ;        setting of the MSb (or "Direct Page Mode" bit) of the PGMODE bits
   259                             ;        in the CPU Flag register, F. (This macro clears the PGMODE LSb.)
   260                             ;
   261                             ; INPUT: none
   262                             ;
   263                             ;  COST: 4 instruction cycles (in LMM only)
   264                          
   265                             macro RAM_X_POINTS_TO_INDEXPAGE
   266                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   267                                and  F, ~FLAG_PGMODE_01b
   268                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   269  3C41                       endm
   270                          
   271                             ;-----------------------------------------------
   272                             ;  Function Prologue
   273                             ;-----------------------------------------------
   274                             ;
   275                             ;  Prologue for functions that run in the LMM and SMM.
   276                             ;
   277                          
   278                             macro RAM_PROLOGUE( ACTUAL_CLASS )
   279                          
   280                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   281                             ; Nothing to do
   282                             ENDIF ; RAM_USE_CLASS_1
   283                          
   284                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   285                                IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   286                                   RAM_X_POINTS_TO_STACKPAGE         ; exit native paging mode!
   287                                ENDIF
   288                             ENDIF ; RAM_USE_CLASS_2
   289                          
   290                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   291                                IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   292                                   RAM_X_POINTS_TO_INDEXPAGE         ; exit native paging mode!
   293                                ENDIF
   294                             ENDIF ; RAM_USE_CLASS_3
   295                          
   296                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   297                             ; Nothing to do
   298                             ENDIF ; RAM_USE_CLASS_4
   299                          
   300  3C41                       endm
   301                          
   302                             ;-----------------------------------------------
   303                             ;  Function Epilogue
   304                             ;-----------------------------------------------
   305                             ;
   306                             ;  Prologue for functions that run in the LMM and SMM.
   307                             ;
   308                          
   309                             macro RAM_EPILOGUE( ACTUAL_CLASS )
   310                          
   311                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   312                             ; Nothing to do
   313                             ENDIF ; RAM_USE_CLASS_1
   314                          
   315                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   316                                RAM_RESTORE_NATIVE_PAGING
   317                             ENDIF ; RAM_USE_CLASS_2
   318                          
   319                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   320                                RAM_RESTORE_NATIVE_PAGING
   321                             ENDIF ; RAM_USE_CLASS_3
   322                          
   323                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   324                             ; Nothing to do
   325                             ENDIF ; RAM_USE_CLASS_4
   326                          
   327  3C41                       endm
   328                          
   329                             ;-----------------------------------------------
   330                             ;  Preserve Register
   331                             ;-----------------------------------------------
   332                             ;
   333                             ;  DESC: Preserve a register value on the stack
   334                             ;
   335                             ; INPUT: Name or address of register in I/O Space
   336                             ;        The I/O bank is an implicit parameter. That is, this function will
   337                             ;        Access the I/O bank currently specified by the CPU Flag register.
   338                             ;
   339                             ;  USES: CPU 'A' register
   340                             ;
   341                             ;  COST: 9 instruction cycles
   342                          
   343                             macro REG_PRESERVE( IOReg )
   344                             mov   A, reg[ @IOReg ]
   345                             push  A
   346  3C41                       endm
   347                          
   348                             ;-----------------------------------------------
   349                             ;  Restore Register
   350                             ;-----------------------------------------------
   351                             ;
   352                             ;  DESC: Restore a register value from the stack
   353                             ;
   354                             ; INPUT: Name or address of register in I/O Space
   355                             ;        The I/O bank is an implicit parameter. That is, this function will
   356                             ;        Access the I/O bank currently specified by the CPU Flag register.
   357                             ;
   358                             ;  USES: CPU 'A' register
   359                             ;
   360                             ;  COST: 10 instruction cycles
   361                          
   362                             macro REG_RESTORE( IOReg )
   363                             pop   A
   364                             mov   reg[ @IOReg ], A
   365  3C41                       endm
   366                          
   367                             ;-----------------------------------------------
   368                             ;  Preserve Volatile Page Pointer Registers
   369                             ;-----------------------------------------------
   370                             ;
   371                             ;  DESC: Invoked by ISRs before switching to the LMM mode and calling
   372                             ;        functions that require on it.
   373                             ;
   374                             ; INPUT: none
   375                             ;
   376                             ;  USES: CPU 'A' register
   377                             ;
   378                             ;  COST: 45 instruction cycles (in LMM only)
   379                          
   380                             macro ISR_PRESERVE_PAGE_POINTERS
   381                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   382                                REG_PRESERVE CUR_PP
   383                                REG_PRESERVE IDX_PP
   384                                REG_PRESERVE MVR_PP
   385                                REG_PRESERVE MVW_PP
   386                             ENDIF
   387  3C41                       endm
   388                          
   389                             ;-----------------------------------------------
   390                             ;  Restore Volatile Page Pointer Registers
   391                             ;-----------------------------------------------
   392                             ;
   393                             ;  DESC: Undo for RAM_PRESERVE_PAGE_POINTERS macro. Invoked by ISRs after
   394                             ;        calling functions that run in the LMM mode and before executing
   395                             ;        the RETI instruction.
   396                             ;
   397                             ; INPUT: none
   398                             ;
   399                             ;  USES: CPU 'A' register
   400                             ;
   401                             ;  COST: 50 instruction cycles (in LMM only)
   402                          
   403                             macro ISR_RESTORE_PAGE_POINTERS
   404                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   405                                REG_RESTORE MVW_PP
   406                                REG_RESTORE MVR_PP
   407                                REG_RESTORE IDX_PP
   408                                REG_RESTORE CUR_PP
   409                             ENDIF
   410  3C41                       endm
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  FILENAME: PWM8_BL.asm
     4                          ;;   Version: 2.60, Updated on 2013/5/19 at 10:44:7
     5                          ;;  Generated by PSoC Designer 5.4.2946
     6                          ;;
     7                          ;;  DESCRIPTION: PWM8 User Module software implementation file
     8                          ;;
     9                          ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
    10                          ;;        arguments and observe the associated "Registers are volatile" policy.
    11                          ;;        This means it is the caller's responsibility to preserve any values
    12                          ;;        in the X and A registers that are still needed after the API functions
    13                          ;;        returns. For Large Memory Model devices it is also the caller's 
    14                          ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
    15                          ;;        MVW_PP registers. Even though some of these registers may not be modified
    16                          ;;        now, there is no guarantee that will remain the case in future releases.
    17                          ;;-----------------------------------------------------------------------------
    18                          ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
    19                          ;;*****************************************************************************
    20                          ;;*****************************************************************************
    21                          
    22                          include "m8c.inc"
    23                          include "PWM8_BL.inc"
    24                          include "memory.inc"
    25                          
    26                          ;-----------------------------------------------
    27                          ;  Global Symbols
    28                          ;-----------------------------------------------
    29                          export  PWM8_BL_EnableInt
    30                          export _PWM8_BL_EnableInt
    31                          export  PWM8_BL_DisableInt
    32                          export _PWM8_BL_DisableInt
    33                          export  PWM8_BL_Start
    34                          export _PWM8_BL_Start
    35                          export  PWM8_BL_Stop
    36                          export _PWM8_BL_Stop
    37                          export  PWM8_BL_WritePeriod
    38                          export _PWM8_BL_WritePeriod
    39                          export  PWM8_BL_WritePulseWidth
    40                          export _PWM8_BL_WritePulseWidth
    41                          export  PWM8_BL_bReadPulseWidth
    42                          export _PWM8_BL_bReadPulseWidth
    43                          export  PWM8_BL_bReadCounter
    44                          export _PWM8_BL_bReadCounter
    45                          
    46                          ; The following functions are deprecated and subject to omission in future releases
    47                          ;
    48                          export  bPWM8_BL_ReadPulseWidth    ; deprecated
    49                          export _bPWM8_BL_ReadPulseWidth    ; deprecated
    50                          export  bPWM8_BL_ReadCounter       ; deprecated
    51                          export _bPWM8_BL_ReadCounter       ; deprecated
    52                          
    53                          
    54                          AREA led_display_RAM (RAM,REL)
    55                          
    56                          ;-----------------------------------------------
    57                          ;  Constant Definitions
    58                          ;-----------------------------------------------
    59                          
    60  0000                    INPUT_REG_NULL:                equ 0x00    ; Clear the input register
    61                          
    62                          
    63                          ;-----------------------------------------------
    64                          ; Variable Allocation
    65                          ;-----------------------------------------------
    66                          
    67                          
    68                          AREA UserModules (ROM, REL)
    69                          
    70                          .SECTION
    71                          ;-----------------------------------------------------------------------------
    72                          ;  FUNCTION NAME: PWM8_BL_EnableInt
    73                          ;
    74                          ;  DESCRIPTION:
    75                          ;     Enables this PWM's interrupt by setting the interrupt enable mask bit
    76                          ;     associated with this User Module. This function has no effect until and
    77                          ;     unless the global interrupts are enabled (for example by using the
    78                          ;     macro M8C_EnableGInt).
    79                          ;-----------------------------------------------------------------------------
    80                          ;
    81                          ;  ARGUMENTS:    None.
    82                          ;  RETURNS:      Nothing.
    83                          ;  SIDE EFFECTS:
    84                          ;    The A and X registers may be modified by this or future implementations
    85                          ;    of this function.  The same is true for all RAM page pointer registers in
    86                          ;    the Large Memory Model.  When necessary, it is the calling function's
    87                          ;    responsibility to perserve their values across calls to fastcall16 
    88                          ;    functions.
    89                          ;
    90  2C47                     PWM8_BL_EnableInt:
    91  2C47                    _PWM8_BL_EnableInt:
    92                             RAM_PROLOGUE RAM_USE_CLASS_1
    93  2C47  43 E1 10             PWM8_BL_EnableInt_M
    94                             RAM_EPILOGUE RAM_USE_CLASS_1
    95  2C4A  7F                   ret
    96                          
    97                          
    98                          .ENDSECTION
    99                          
   100                          .SECTION
   101                          ;-----------------------------------------------------------------------------
   102                          ;  FUNCTION NAME: PWM8_BL_DisableInt
   103                          ;
   104                          ;  DESCRIPTION:
   105                          ;     Disables this PWM's interrupt by clearing the interrupt enable
   106                          ;     mask bit associated with this User Module.
   107                          ;-----------------------------------------------------------------------------
   108                          ;
   109                          ;  ARGUMENTS:    None
   110                          ;  RETURNS:      Nothing
   111                          ;  SIDE EFFECTS:
   112                          ;    The A and X registers may be modified by this or future implementations
   113                          ;    of this function.  The same is true for all RAM page pointer registers in
   114                          ;    the Large Memory Model.  When necessary, it is the calling function's
   115                          ;    responsibility to perserve their values across calls to fastcall16 
   116                          ;    functions.
   117                          ;
   118  2C4B                     PWM8_BL_DisableInt:
   119  2C4B                    _PWM8_BL_DisableInt:
   120                             RAM_PROLOGUE RAM_USE_CLASS_1
   121  2C4B  41 E1 EF             PWM8_BL_DisableInt_M
   122                             RAM_EPILOGUE RAM_USE_CLASS_1
   123  2C4E  7F                   ret
   124                          
   125                          
   126                          .ENDSECTION
   127                          
   128                          .SECTION
   129                          ;-----------------------------------------------------------------------------
   130                          ;  FUNCTION NAME: PWM8_BL_Start
   131                          ;
   132                          ;  DESCRIPTION:
   133                          ;     Sets the start bit in the Control register of this user module.  The
   134                          ;     PWM will begin counting on the next input clock as soon as the
   135                          ;     enable input is asserted high.
   136                          ;-----------------------------------------------------------------------------
   137                          ;
   138                          ;  ARGUMENTS:    None
   139                          ;  RETURNS:      Nothing
   140                          ;  SIDE EFFECTS:
   141                          ;    The A and X registers may be modified by this or future implementations
   142                          ;    of this function.  The same is true for all RAM page pointer registers in
   143                          ;    the Large Memory Model.  When necessary, it is the calling function's
   144                          ;    responsibility to perserve their values across calls to fastcall16 
   145                          ;    functions.
   146                          ;
   147  2C4F                     PWM8_BL_Start:
   148  2C4F                    _PWM8_BL_Start:
   149                             RAM_PROLOGUE RAM_USE_CLASS_1
   150  2C4F  43 33 01             PWM8_BL_Start_M
   151                             RAM_EPILOGUE RAM_USE_CLASS_1
   152  2C52  7F                   ret
   153                          
   154                          
   155                          .ENDSECTION
   156                          
   157                          .SECTION
   158                          ;-----------------------------------------------------------------------------
   159                          ;  FUNCTION NAME: PWM8_BL_Stop
   160                          ;
   161                          ;  DESCRIPTION:
   162                          ;     Disables PWM operation by clearing the start bit in the Control
   163                          ;     register.
   164                          ;-----------------------------------------------------------------------------
   165                          ;
   166                          ;  ARGUMENTS:    None
   167                          ;  RETURNS:      Nothing
   168                          ;  SIDE EFFECTS:
   169                          ;    The A and X registers may be modified by this or future implementations
   170                          ;    of this function.  The same is true for all RAM page pointer registers in
   171                          ;    the Large Memory Model.  When necessary, it is the calling function's
   172                          ;    responsibility to perserve their values across calls to fastcall16 
   173                          ;    functions.
   174                          ;
   175  2C53                     PWM8_BL_Stop:
   176  2C53                    _PWM8_BL_Stop:
   177                             RAM_PROLOGUE RAM_USE_CLASS_1
   178  2C53  41 33 FE             PWM8_BL_Stop_M
   179                             RAM_EPILOGUE RAM_USE_CLASS_1
   180  2C56  7F                   ret
   181                          
   182                          
   183                          .ENDSECTION
   184                          
   185                          .SECTION
   186                          ;-----------------------------------------------------------------------------
   187                          ;  FUNCTION NAME: PWM8_BL_WritePeriod
   188                          ;
   189                          ;  DESCRIPTION:
   190                          ;     Write the 8-bit period value into the Period register (DR1).
   191                          ;-----------------------------------------------------------------------------
   192                          ;
   193                          ;  ARGUMENTS: fastcall16 BYTE bPeriodValue (passed in A)
   194                          ;  RETURNS:   Nothing
   195                          ;  SIDE EFFECTS:
   196                          ;    If the PWM user module is stopped, then this value will also be
   197                          ;    latched into the Count register (DR0).
   198                          ;    
   199                          ;    The A and X registers may be modified by this or future implementations
   200                          ;    of this function.  The same is true for all RAM page pointer registers in
   201                          ;    the Large Memory Model.  When necessary, it is the calling function's
   202                          ;    responsibility to perserve their values across calls to fastcall16 
   203                          ;    functions.
   204                          ;
   205  2C57                     PWM8_BL_WritePeriod:
   206  2C57                    _PWM8_BL_WritePeriod:
   207                             RAM_PROLOGUE RAM_USE_CLASS_1
   208  2C57  60 31                mov   reg[PWM8_BL_PERIOD_REG], A
   209                             RAM_EPILOGUE RAM_USE_CLASS_1
   210  2C59  7F                   ret
   211                          
   212                          
   213                          .ENDSECTION
   214                          
   215                          .SECTION
   216                          ;-----------------------------------------------------------------------------
   217                          ;  FUNCTION NAME: PWM8_BL_WritePulseWidth
   218                          ;
   219                          ;  DESCRIPTION:
   220                          ;     Writes compare value into the Compare register (DR2).
   221                          ;-----------------------------------------------------------------------------
   222                          ;
   223                          ;  ARGUMENTS:    fastcall16 BYTE bCompareValue (passed in A)
   224                          ;  RETURNS:      Nothing
   225                          ;  SIDE EFFECTS:
   226                          ;    The A and X registers may be modified by this or future implementations
   227                          ;    of this function.  The same is true for all RAM page pointer registers in
   228                          ;    the Large Memory Model.  When necessary, it is the calling function's
   229                          ;    responsibility to perserve their values across calls to fastcall16 
   230                          ;    functions.
   231                          ;
   232  2C5A                     PWM8_BL_WritePulseWidth:
   233  2C5A                    _PWM8_BL_WritePulseWidth:
   234                             RAM_PROLOGUE RAM_USE_CLASS_1
   235  2C5A  60 32                mov   reg[PWM8_BL_COMPARE_REG], A
   236                             RAM_EPILOGUE RAM_USE_CLASS_1
   237  2C5C  7F                   ret
   238                          
   239                          
   240                          .ENDSECTION
   241                          
   242                          .SECTION
   243                          ;-----------------------------------------------------------------------------
   244                          ;  FUNCTION NAME: PWM8_BL_bReadPulseWidth
   245                          ;
   246                          ;  DESCRIPTION:
   247                          ;     Reads the Compare register.
   248                          ;-----------------------------------------------------------------------------
   249                          ;
   250                          ;  ARGUMENTS:    None
   251                          ;  RETURNS:      fastcall16 BYTE bCompareValue (value of DR2 in the A register)
   252                          ;  SIDE EFFECTS:
   253                          ;    The A and X registers may be modified by this or future implementations
   254                          ;    of this function.  The same is true for all RAM page pointer registers in
   255                          ;    the Large Memory Model.  When necessary, it is the calling function's
   256                          ;    responsibility to perserve their values across calls to fastcall16 
   257                          ;    functions.
   258                          ;
   259  2C5D                     PWM8_BL_bReadPulseWidth:
   260  2C5D                    _PWM8_BL_bReadPulseWidth:
   261  2C5D                     bPWM8_BL_ReadPulseWidth:                        ; this name deprecated
   262  2C5D                    _bPWM8_BL_ReadPulseWidth:                        ; this name deprecated
   263                             RAM_PROLOGUE RAM_USE_CLASS_1
   264  2C5D  5D 32                mov   A, reg[PWM8_BL_COMPARE_REG]
   265                             RAM_EPILOGUE RAM_USE_CLASS_1
   266  2C5F  7F                   ret
   267                          
   268                          
   269                          .ENDSECTION
   270                          
   271                          .SECTION
   272                          ;-----------------------------------------------------------------------------
   273                          ;  FUNCTION NAME: PWM8_BL_bReadCounter
   274                          ;
   275                          ;  DESCRIPTION:
   276                          ;     Returns the value in the Count register (DR0), preserving the value in
   277                          ;     the compare register (DR2). Interrupts are prevented during the transfer
   278                          ;     from the Count to the Compare registers by holding the clock low in
   279                          ;     the PSoC block.
   280                          ;-----------------------------------------------------------------------------
   281                          ;
   282                          ;  ARGUMENTS: None
   283                          ;  RETURNS:   fastcall16 BYTE bCount (value of DR0 in the A register)
   284                          ;  SIDE EFFECTS:
   285                          ;     1) The user module is stopped momentarily and one or more counts may be missed.
   286                          ;     2) The A and X registers may be modified by this or future implementations
   287                          ;        of this function.  The same is true for all RAM page pointer registers in
   288                          ;        the Large Memory Model.  When necessary, it is the calling function's
   289                          ;        responsibility to perserve their values across calls to fastcall16 
   290                          ;        functions.
   291                          ;
   292  2C60                     PWM8_BL_bReadCounter:
   293  2C60                    _PWM8_BL_bReadCounter:
   294  2C60                     bPWM8_BL_ReadCounter:                           ; this name deprecated
   295  2C60                    _bPWM8_BL_ReadCounter:                           ; this name deprecated
   296                          
   297  0000                       bOrigCompareValue:      EQU   0               ; Frame offset to temp Compare store
   298  0001                       bOrigClockSetting:      EQU   1               ; Frame offset to temp Input   store
   299  0002                       wCounter:               EQU   2               ; Frame offset to temp Count   store
   300  0003                       STACK_FRAME_SIZE:       EQU   3               ; max stack frame size is 3 bytes
   301                          
   302  2C60  71 40                RAM_PROLOGUE RAM_USE_CLASS_2
   303  2C62  4F                   mov   X, SP                                   ; X <- stack frame pointer
   304  2C63  5D 32                mov   A, reg[PWM8_BL_COMPARE_REG]             ; Save the Compare register on the stack
   305  2C65  08                   push  A                                       ;
   306  2C66  41 33 FE             PWM8_BL_Stop_M                                ; Disable (stop) the PWM
   307  2C69  71 10                M8C_SetBank1                                  ;
   308  2C6B  5D 31                mov   A, reg[PWM8_BL_INPUT_REG]               ; save the clock input setting
   309  2C6D  08                   push  A                                       ;   on the stack (now 2 bytes) and ...
   310                                                                           ;   hold the clock low:
   311  2C6E  62 31 00             mov   reg[PWM8_BL_INPUT_REG], INPUT_REG_NULL
   312  2C71  70 EF                M8C_SetBank0
   313                                                                           ; Extract the Count via DR2 register
   314  2C73  5D 30                mov   A, reg[PWM8_BL_COUNTER_REG]             ; DR2 <- DR0
   315  2C75  5D 32                mov   A, reg[PWM8_BL_COMPARE_REG]             ; Stash the Count on the stack
   316  2C77  08                   push  A                                       ;  -stack frame is now 3 bytes
   317  2C78  52 00                mov   A, [X+bOrigCompareValue]                ; Restore the Compare register
   318  2C7A  60 32                mov   reg[PWM8_BL_COMPARE_REG], A
   319  2C7C  71 10                M8C_SetBank1                                  ; Restore the PWM operation:
   320  2C7E  52 01                mov   A, [X+bOrigClockSetting]                ;   First, the clock setting...
   321  2C80  60 31                mov   reg[PWM8_BL_INPUT_REG], A               ;
   322  2C82  70 EF                M8C_SetBank0                                  ;
   323  2C84  43 33 01             PWM8_BL_Start_M                               ;   then re-enable the PWM.
   324  2C87  18                   pop   A                                       ; Setup the return value
   325  2C88  38 FE                ADD   SP, -(STACK_FRAME_SIZE-1)               ; Zap remainder of stack frame
   326                             RAM_EPILOGUE RAM_USE_CLASS_2
      + 2C8A  70 3F             	and	f, 0x3F
      + 2C8C  71 80             	or	f, 0x80
   327  2C8E  7F                   ret
HI-TECH Software Macro Assembler (PSoC MCU) V9.61
Symbol Table                                                                                               Fri Jun 12 09:25:10 2015
                PWM8_BL_Start 2C4F                PWM8_BL_INT_REG 00E1           PWM8_BL_bReadCounter 2C60  
        _bPWM8_BL_ReadCounter 2C60               PWM8_BL_INT_MASK 0010        PWM8_BL_WritePulseWidth 2C5A  
            bOrigClockSetting 0001                         HITECH 0002            PWM8_BL_COMPARE_REG 0032  
              FLAG_PGMODE_01b 0040                FLAG_PGMODE_10b 0080           _PWM8_BL_WritePeriod 2C57  
          PWM8_BL_CONTROL_REG 0033              PWM8_BL_INPUT_REG 0031            PWM8_BL_COUNTER_REG 0030  
               INPUT_REG_NULL 0000       _PWM8_BL_WritePulseWidth 2C5A      SYSTEM_LARGE_MEMORY_MODEL 0001  
      bPWM8_BL_ReadPulseWidth 2C5D                   PWM8_BL_Stop 2C53  PWM8_BL_CONTROL_REG_START_BIT 0001  
           PWM8_BL_DisableInt 2C4B                      TOOLCHAIN 0002              bOrigCompareValue 0000  
      PWM8_BL_bReadPulseWidth 2C5D               FLAG_PGMODE_MASK 00C0            PWM8_BL_WritePeriod 2C57  
              RAM_USE_CLASS_1 0001                RAM_USE_CLASS_2 0002                RAM_USE_CLASS_3 0004  
              RAM_USE_CLASS_4 0008           bPWM8_BL_ReadCounter 2C60          _PWM8_BL_bReadCounter 2C60  
               _PWM8_BL_Start 2C4F              PWM8_BL_EnableInt 2C47       _bPWM8_BL_ReadPulseWidth 2C5D  
             STACK_FRAME_SIZE 0003       _PWM8_BL_bReadPulseWidth 2C5D                  _PWM8_BL_Stop 2C53  
                FLAG_XIO_MASK 0010     SYSTEM_IDXPG_TRACKS_IDX_PP 0001             PWM8_BL_PERIOD_REG 0031  
          _PWM8_BL_DisableInt 2C4B     SYSTEM_IDXPG_TRACKS_STK_PP 0000             _PWM8_BL_EnableInt 2C47  
HI-TECH Software Macro Assembler (PSoC MCU) V9.61
                                                                                                           Fri Jun 12 09:25:10 2015
     1                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     2                          ;;;
     3                          ;;;  M8C.INC -- Microcontroller Device System Declarations
     4                          ;;;
     5                          ;;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
     6                          ;;;
     7                          ;;;  This file provides address constants, bit field masks and a set of macro
     8                          ;;;  facilities for the Cypress Semiconductor CY8C22045 Microcontroller devices.
     9                          ;;;
    10                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    11                          
    12                          ;;=============================================================================
    13                          ;; Definition of abbreviations used in the descriptions below
    14                          ;;  (RW)   The register or bit supports reads and writes
    15                          ;;  (W)    The register or bit is write-only
    16                          ;;  (R)    The register or bit is read-only
    17                          ;;  (#)    Access to the register is bit specific (see the family datasheet)
    18                          ;;  (RC)   The register or bit can be read, but writing a 0 will clear it,
    19                          ;;         writing a 1 will have no effect.
    20                          ;;=============================================================================
    21                          
    22                          ;;=============================================================================
    23                          ;;      System Registers
    24                          ;;=============================================================================
    25                          
    26                          ;----------------------------
    27                          ;  Flag Register Bit Fields
    28                          ;----------------------------
    29  00C0                    FLAG_PGMODE_MASK:  equ 0C0h     ; Paging control for > 256 bytes of RAM
    30  0000                    FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
    31  0040                    FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
    32  0080                    FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
    33  00C0                    FLAG_PGMODE_3:     equ 0C0h       ; Direct to CUR_PP page, indexed to STK_PP page
    34  0000                    FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
    35  0040                    FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
    36  0080                    FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
    37  00C0                    FLAG_PGMODE_11b:   equ 0C0h       ; Same as PGMODE_3
    38  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    39  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    40  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    41  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    42  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    43                          
    44                          
    45                          ;;=============================================================================
    46                          ;;      Register Space, Bank 0
    47                          ;;=============================================================================
    48                          
    49                          ;------------------------------------------------
    50                          ;  Port Registers
    51                          ;  Note: Also see this address range in Bank 1.
    52                          ;------------------------------------------------
    53                          ; Port 0
    54  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    55  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    56  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    57  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    58                          ; Port 1
    59  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    60  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    61  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    62  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    63                          ; Port 2
    64  0008                    PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
    65  0009                    PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
    66  000A                    PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
    67  000B                    PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
    68                          ; Port 3
    69  000C                    PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
    70  000D                    PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
    71  000E                    PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
    72  000F                    PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
    73                          ; Port 4
    74  0010                    PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
    75  0011                    PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
    76  0012                    PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
    77  0013                    PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
    78                          
    79                          ;------------------------------------------------
    80                          ;  Digital PSoC(tm) block Registers
    81                          ;  Note: Also see this address range in Bank 1.
    82                          ;------------------------------------------------
    83                          ; Digital PSoC block 00, Basic Type C
    84  0020                    DBC00DR0:     equ 20h          ; data register 0                          (#)
    85  0021                    DBC00DR1:     equ 21h          ; data register 1                          (W)
    86  0022                    DBC00DR2:     equ 22h          ; data register 2                          (RW)
    87  0023                    DBC00CR0:     equ 23h          ; control & status register 0              (#)
    88                          
    89                          ; Digital PSoC block 01, Basic Type C
    90  0024                    DBC01DR0:     equ 24h          ; data register 0                          (#)
    91  0025                    DBC01DR1:     equ 25h          ; data register 1                          (W)
    92  0026                    DBC01DR2:     equ 26h          ; data register 2                          (RW)
    93  0027                    DBC01CR0:     equ 27h          ; control & status register 0              (#)
    94                          
    95                          ; Digital PSoC block 02, Communications Type C
    96  0028                    DCC02DR0:     equ 28h          ; data register 0                          (#)
    97  0029                    DCC02DR1:     equ 29h          ; data register 1                          (W)
    98  002A                    DCC02DR2:     equ 2Ah          ; data register 2                          (RW)
    99  002B                    DCC02CR0:     equ 2Bh          ; control & status register 0              (#)
   100                          
   101                          ; Digital PSoC block 03, Communications Type C
   102  002C                    DCC03DR0:     equ 2Ch          ; data register 0                          (#)
   103  002D                    DCC03DR1:     equ 2Dh          ; data register 1                          (W)
   104  002E                    DCC03DR2:     equ 2Eh          ; data register 2                          (RW)
   105  002F                    DCC03CR0:     equ 2Fh          ; control & status register 0              (#)
   106                          
   107                          ; Digital PSoC block 10, Basic Type C
   108  0030                    DBC10DR0:     equ 30h          ; data register 0                          (#)
   109  0031                    DBC10DR1:     equ 31h          ; data register 1                          (W)
   110  0032                    DBC10DR2:     equ 32h          ; data register 2                          (RW)
   111  0033                    DBC10CR0:     equ 33h          ; control & status register 0              (#)
   112                          
   113                          ; Digital PSoC block 11, Basic Type C
   114  0034                    DBC11DR0:     equ 34h          ; data register 0                          (#)
   115  0035                    DBC11DR1:     equ 35h          ; data register 1                          (W)
   116  0036                    DBC11DR2:     equ 36h          ; data register 2                          (RW)
   117  0037                    DBC11CR0:     equ 37h          ; control & status register 0              (#)
   118                          
   119                          ; Digital PSoC block 12, Communications Type C
   120  0038                    DCC12DR0:     equ 38h          ; data register 0                          (#)
   121  0039                    DCC12DR1:     equ 39h          ; data register 1                          (W)
   122  003A                    DCC12DR2:     equ 3Ah          ; data register 2                          (RW)
   123  003B                    DCC12CR0:     equ 3Bh          ; control & status register 0              (#)
   124                          
   125                          ; Digital PSoC block 13, Communications Type C
   126  003C                    DCC13DR0:     equ 3Ch          ; data register 0                          (#)
   127  003D                    DCC13DR1:     equ 3Dh          ; data register 1                          (W)
   128  003E                    DCC13DR2:     equ 3Eh          ; data register 2                          (RW)
   129  003F                    DCC13CR0:     equ 3Fh          ; control & status register 0              (#)
   130                          
   131                          ;-------------------------------------
   132                          ;  Analog Control Registers
   133                          ;-------------------------------------
   134  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
   135  00C0                    AMX_IN_ACI3:          equ C0h    ; MASK: column 3 input mux
   136  0030                    AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
   137  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
   138  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
   139                          
   140  0061                    AMUX_CFG:      equ 61h          ; Analog MUX Configuration
   141  0030                    AMUX_CFG_INTCAP:       equ 30h    ;
   142  000E                    AMUX_CFG_MUXCLK:  	  equ 0Eh	 ;
   143  0001                    AMUX_CFG_EN:		  	  equ 01h	 ;
   144                          
   145                          ; old declarations DO NOT USE
   146  0061                    AMUXCFG:      equ 61h          ; Analog MUX Configuration
   147  0030                    AMUXCFG_INTCAP:       equ 30h    ;
   148  000E                    AMUXCFG_MUXCLK:  	  equ 0Eh	 ;
   149  0001                    AMUXCFG_EN:		  	  equ 01h	 ;
   150                          
   151  0062                    PWM_CR:       equ 62h          ; Pulse-Width Modulator Control
   152  0038                    PWM_CR_HIGH:          equ 38h    ; MASK: PWM high time
   153  0006                    PWM_CR_LOW:           equ 06h	 ; MASK: PWM low time
   154  0001                    PWM_CR_EN:            equ 01h	 ; MASK: Enable/Disable PWM function
   155                          
   156  0063                    ARF_CR:       equ 63h          ; Analog Reference Control
   157                          
   158  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus Register           (#)
   159  0080                    CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
   160  0040                    CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
   161  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
   162  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
   163  0008                    CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
   164  0004                    CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
   165  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
   166  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   167                          
   168  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   169  0020                    CMP_CR1_CLDIS1:       equ 20h    ; MASK: Column 1 comparator output latch
   170  0010                    CMP_CR1_CLDIS0:	      equ 10h    ; MASK: Column 0 comparator output latch
   171                          
   172  0068                    ADC0_CR:      equ 68h          ; Analog Column 0 Configuration
   173  0080                    ADC0_CR_CMPST:        equ 80h    ;
   174  0040                    ADC0_CR_LOREN:        equ 40h    ;
   175  0020                    ADC0_CR_SHEN:         equ 20h    ;
   176  0008                    ADC0_CR_CBSRC:        equ 08h    ;
   177  0004                    ADC0_CR_ADCM:         equ 04h    ;
   178  0001                    ADC0_CR_EN:	          equ 01h    ;
   179                          
   180  0069                    ADC1_CR:      equ 69h          ; Analog Column 1 Configuration
   181  0080                    ADC1_CR_CMPST:        equ 80h    ;
   182  0040                    ADC1_CR_LOREN:        equ 40h    ;
   183  0020                    ADC1_CR_SHEN:         equ 20h    ;
   184  0008                    ADC1_CR_CBSRC:        equ 08h    ;
   185  0004                    ADC1_CR_ADCM:         equ 04h    ;
   186+ 0001                    ADC1_CR_EN:	          equ 01h    ;
   187                          
   188                          ; Continuous Time PSoC block Type E Row 0 Col 0
   189  0072                    ACE00CR1:     equ 72h          ; Control register 1                       (RW)
   190  0073                    ACE00CR2:     equ 73h          ; Control register 2                       (RW)
   191                          
   192                          ; Continuous Time PSoC block Type E Row 0 Col 1
   193  0076                    ACE01CR1:     equ 76h          ; Control register 1                       (RW)
   194  0077                    ACE01CR2:     equ 77h          ; Control register 2                       (RW)
   195                          
   196                          ; Switched Cap PSoC blockType E Row 1 Col 0
   197  0080                    ASE10CR0:     equ 80h          ; Control register 0                       (RW)
   198                          
   199                          ; Switched Cap PSoC blockType E Row 1 Col 1
   200  0084                    ASE11CR0:     equ 84h          ; Control register 0                       (RW)
   201                          
   202                          ;-----------------------------------------------
   203                          ;  Global General Purpose Data Registers
   204                          ;-----------------------------------------------
   205  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   206  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   207  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   208  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   209                          
   210                          ;------------------------------------------------
   211                          ;  Row Digital Interconnects
   212                          ;
   213                          ;  Note: the following registers are mapped into
   214                          ;  both register bank 0 AND register bank 1.
   215                          ;------------------------------------------------
   216                          
   217  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   218  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   219  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   220  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   221  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   222  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   223  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   224                          
   225  00B8                    RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
   226  00B9                    RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
   227  00BA                    RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
   228  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   229  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   230  00BD                    RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
   231  00BE                    RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
   232                          
   233                          ;-----------------------------------------------
   234                          ;  Ram Page Pointers
   235                          ;-----------------------------------------------
   236  00D0                    CUR_PP:      equ 0D0h           ; Current   Page Pointer
   237  00D1                    STK_PP:      equ 0D1h           ; Stack     Page Pointer
   238  00D3                    IDX_PP:      equ 0D3h           ; Index     Page Pointer
   239  00D4                    MVR_PP:      equ 0D4h           ; MVI Read  Page Pointer
   240  00D5                    MVW_PP:      equ 0D5h           ; MVI Write Page Pointer
   241                          
   242                          ;------------------------------------------------
   243                          ;  I2C Configuration Registers
   244                          ;------------------------------------------------
   245  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   246  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   247  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   248  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   249  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   250  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   251  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   252  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   253  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   254  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   255                          
   256  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   257  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   258  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   259  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   260  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   261  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   262  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   263  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   264  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   265                          
   266  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   267                          
   268  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   269  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   270  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   271  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   272  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   273                          
   274                          ;------------------------------------------------
   275                          ;  System and Global Resource Registers
   276                          ;------------------------------------------------
   277  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   278                                                         ; Use INT_MSK0 bit field masks
   279  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   280                                                         ; Use INT_MSK1 bit field masks
   281  00DC                    INT_CLR2:     equ 0DCh          ; Interrupt Clear Register 2               (RW)
   282                                                         ; Use INT_MSK2 bit field masks
   283  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   284                                                         ; Use INT_MSK3 bit field masks
   285                          
   286  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   287  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   288  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   289                          
   290  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   291  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   292  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   293  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   294  0010                    INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
   295  0008                    INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
   296  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   297  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   298  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   299                          
   300  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   301  0080                    INT_MSK1_DCC13:            equ 80h ; MASK: enable/disable DCC13 block interrupt
   302  0040                    INT_MSK1_DCC12:            equ 40h ; MASK: enable/disable DCC12 block interrupt
   303  0020                    INT_MSK1_DBC11:            equ 20h ; MASK: enable/disable DBC11 block interrupt
   304  0010                    INT_MSK1_DBC10:            equ 10h ; MASK: enable/disable DBC10 block interrupt
   305  0008                    INT_MSK1_DCC03:            equ 08h ; MASK: enable/disable DCC03 block interrupt
   306  0004                    INT_MSK1_DCC02:            equ 04h ; MASK: enable/disable DCC02 block interrupt
   307  0002                    INT_MSK1_DBC01:            equ 02h ; MASK: enable/disable DBC01 block interrupt
   308  0001                    INT_MSK1_DBC00:            equ 01h ; MASK: enable/disable DBC00 block interrupt
   309                          
   310  00DF                    INT_MSK2:     equ DFh			; Custom block Mask Register			   (RW)
   311  0010                    INT_MSK2_SARADC:           equ 10h ; MASK: enable/disable SARADC block interrupt
   312  0020                    INT_MSK2_CSD0:             equ 20h ; MASK: enable/disable CSD0 block interrupt
   313  0040                    INT_MSK2_CSD1:             equ 40h ; MASK: enable/disable CSD1 block interrupt
   314  0080                    INT_MSK2_RTC:              equ 80h ; MASK: enable/disable RTC block interrupt
   315                          
   316  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   317  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   318                          
   319                          ;------------------------------------------------------
   320                          ;  MAC Registers
   321                          ;------------------------------------------------------
   322                          
   323  00E8                    MUL0_X:       equ 0E8h          ; Multiply Input X Register                (W)
   324  00E9                    MUL0_Y:       equ 0E9h          ; Multiply Input Y Register                (W)
   325  00EA                    MUL0_DH:      equ 0EAh          ; Multiply Result High Byte Register       (R)
   326  00EB                    MUL0_DL:      equ 0EBh          ; Multiply Result Low Byte Register        (R)
   327                          
   328  00EC                    ACC0_DR1:     equ 0ECh          ; Accumulator Data Register 1              (RW)
   329  00ED                    ACC0_DR0:     equ 0EDh          ; Accumulator Data Register 0              (RW)
   330  00EE                    ACC0_DR3:     equ 0EEh          ; Accumulator Data Register 3              (RW)
   331  00EF                    ACC0_DR2:     equ 0EFh          ; Accumulator Data Register 2              (RW)
   332                          
   333                          ; DECIMATOR Control Registers
   334  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   335  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   336                          
   337                          ;------------------------------------------------------
   338                          ;  System Status and Control Registers
   339                          ;
   340                          ;  Note: The following registers are mapped into both
   341                          ;        register bank 0 AND register bank 1.
   342                          ;------------------------------------------------------
   343  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   344                                                             ; Use FLAG_ masks defined at top of file
   345                          
   346  00FD                    DAC_D:        equ 0FDh		   ; DAC Data Register                        (RW)
   347                          
   348  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   349  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: flag, Internal Reset Status bit
   350  0010                    CPU_SCR1_SLIMO:         equ 10h	   ; MASK: Slow IMO (internal main osc) enable
   351  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   352  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   353  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   354                          
   355  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   356  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   357  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   358  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   359  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   360  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   361                          
   362                          ;------------------------------------------------------
   363                          ;  Neon Capsense Digital Control Registers
   364                          ;------------------------------------------------------
   365  0050                    CSD0_DR0_L:				equ 50h		; Capsense 0 data low 0				(RW)
   366  0054                    CSD0_DR0_H:				equ 54h		; Capsense 0 data high 0			(RW)
   367  0058                    CSD1_DR0_L:				equ 58h		; Capsense 1 data low 0				(RW)
   368  005C                    CSD1_DR0_H:				equ 5Ch		; Capsense 1 data high 0			(RW)
   369  0051                    CSD0_DR1_L:				equ 51h		; Capsense 0 data low 1				(RW)
   370  0055                    CSD0_DR1_H:				equ 55h		; Capsense 0 data high 1			(RW)
   371  0059                    CSD1_DR1_L:				equ 59h		; Capsense 1 data low 1				(RW)
   372  005D                    CSD1_DR1_H:				equ 5Dh		; Capsense 1 data high 1			(RW)
   373  0052                    CSD0_CNT_L:				equ 52h		; Capsense 0 counter low			(RW)
   374  0056                    CSD0_CNT_H:				equ 56h		; Capsense 0 counter high			(RW)
   375  005A                    CSD1_CNT_L:				equ 5Ah		; Capsense 1 counter low			(RW)
   376  005E                    CSD1_CNT_H:				equ	5Eh		; Capsense 1 counter high			(RW)
   377  0053                    CSD0_CR0:				equ 53h		; Capsense 0 control 0				(RW)
   378  005B                    CSD1_CR0:				equ 5Bh		; Capsense 1 control 0				(RW)
   379  0057                    CSD0_CR1:				equ 57h		; Capsense 0 control 1				(RW)
   380  005F                    CSD1_CR1:				equ 5Fh		; Capsense 1 control 1				(RW)
   381                          
   382                          ;------------------------------------------------------
   383                          ;  Neon Analog Registers
   384                          ;------------------------------------------------------
   385  0065                    ASY_CR:					equ 65h		; Analog Synchronization Control	(RW)
   386  006A                    ADC_DH:					equ 6Ah		; ADC data high						(RW)
   387  006B                    ADC_DL:					equ 6Bh		; ADC data low						(RW)
   388  00C8                    PWMVREF0:				equ C8h		; PWM Voltage Reference 0			(RW)
   389  00C9                    PWMVREF1:				equ C9h		; PWM Voltage Reference 1			(RW)
   390  00CB                    PWMSRC:					equ CBh		; PWM Source						(RW)
   391  00CA                    IDACMODE:				equ CAh		; IDAC Mode							(RW)
   392  00FC                    IDACR_D:				equ FCh		; Analog Mux DAC data 0				(RW)
   393  00FD                    IDACL_D:				equ FDh		; Analog Mux DAC data 1				(RW)
   394                          
   395                          ;------------------------------------------------------
   396                          ;  Neon Digital Registers
   397                          ;------------------------------------------------------
   398  00B7                    RDI0DSM:				equ B7h		; Row Digital Interconnect input select 0	(RW)
   399  00BF                    RDI1DSM:				equ BFh		; Row Digital Interconnect input select 1	(RW)
   400                          
   401                          ;------------------------------------------------------
   402                          ;  Neon Test Registers
   403                          ;------------------------------------------------------
   404  00CC                    TSCR0:					equ CCh		; Tsource 0							(RW)
   405  00CD                    TSCMPH:					equ CDh		; TSCMP high						(RW)
   406  00CE                    TSCMPL:					equ CEh		; TSCMP low							(RW)
   407  00CF                    TSCR1:					equ CFh		; Tsource 1							(RW)
   408                          
   409                          ;;=============================================================================
   410                          ;;      Register Space, Bank 1
   411                          ;;=============================================================================
   412                          
   413                          ;------------------------------------------------
   414                          ;  Port Registers
   415                          ;  Note: Also see this address range in Bank 0.
   416                          ;------------------------------------------------
   417                          ; Port 0
   418  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   419  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   420  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   421  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   422                          
   423                          ; Port 1
   424  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   425  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   426  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   427  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   428                          
   429                          ; Port 2
   430  0008                    PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
   431  0009                    PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
   432  000A                    PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
   433  000B                    PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
   434                          
   435                          ; Port 3
   436  000C                    PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
   437  000D                    PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
   438  000E                    PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
   439  000F                    PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
   440                          
   441                          ; Port 4
   442  0010                    PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
   443  0011                    PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
   444  0012                    PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
   445  0013                    PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
   446                          
   447                          ;------------------------------------------------
   448                          ;  Digital PSoC(tm) block Registers
   449                          ;  Note: Also see this address range in Bank 0.
   450                          ;------------------------------------------------
   451                          
   452                          ; Digital PSoC block 00, Basic Type C
   453  0020                    DBC00FN:      equ 20h          ; Function Register                        (RW)
   454  0021                    DBC00IN:      equ 21h          ;    Input Register                        (RW)
   455  0022                    DBC00OU:      equ 22h          ;   Output Register                        (RW)
   456  0023                    DBC00CR1:     equ 23h          ;   control & status register 1            (RW)
   457                          
   458                          ; Digital PSoC block 01, Basic Type C
   459  0024                    DBC01FN:      equ 24h          ; Function Register                        (RW)
   460  0025                    DBC01IN:      equ 25h          ;    Input Register                        (RW)
   461  0026                    DBC01OU:      equ 26h          ;   Output Register                        (RW)
   462  0027                    DBC01CR1:     equ 27h          ;   control & status register 1            (RW)
   463                          
   464                          ; Digital PSoC block 02, Communications Type C
   465  0028                    DCC02FN:      equ 28h          ; Function Register                        (RW)
   466  0029                    DCC02IN:      equ 29h          ;    Input Register                        (RW)
   467  002A                    DCC02OU:      equ 2Ah          ;   Output Register                        (RW)
   468  002B                    DBC02CR1:     equ 2Bh          ;   control & status register 1            (RW)
   469                          
   470                          ; Digital PSoC block 03, Communications Type C
   471  002C                    DCC03FN:      equ 2Ch          ; Function Register                        (RW)
   472  002D                    DCC03IN:      equ 2Dh          ;    Input Register                        (RW)
   473  002E                    DCC03OU:      equ 2Eh          ;   Output Register                        (RW)
   474  0029                    DBC03CR1:     equ 29h          ;   control & status register 1            (RW)
   475                          
   476                          ; Digital PSoC block 10, Basic Type C
   477  0030                    DBC10FN:      equ 30h          ; Function Register                        (RW)
   478  0031                    DBC10IN:      equ 31h          ;    Input Register                        (RW)
   479  0032                    DBC10OU:      equ 32h          ;   Output Register                        (RW)
   480  0033                    DBC10CR1:     equ 33h          ;   control & status register 1            (RW)
   481                          
   482                          ; Digital PSoC block 11, Basic Type C
   483  0034                    DBC11FN:      equ 34h          ; Function Register                        (RW)
   484  0035                    DBC11IN:      equ 35h          ;    Input Register                        (RW)
   485  0036                    DBC11OU:      equ 36h          ;   Output Register                        (RW)
   486  0037                    DBC11CR1:     equ 37h          ;   control & status register 1            (RW)
   487                          
   488                          ; Digital PSoC block 12, Communications Type C
   489  0038                    DCC12FN:      equ 38h          ; Function Register                        (RW)
   490  0039                    DCC12IN:      equ 39h          ;    Input Register                        (RW)
   491  003A                    DCC12OU:      equ 3Ah          ;   Output Register                        (RW)
   492  003B                    DBC12CR1:     equ 3Bh          ;   control & status register 1            (RW)
   493                          
   494                          ; Digital PSoC block 13, Communications Type C
   495  003C                    DCC13FN:      equ 3Ch          ; Function Register                        (RW)
   496  003D                    DCC13IN:      equ 3Dh          ;    Input Register                        (RW)
   497  003E                    DCC13OU:      equ 3Eh          ;   Output Register                        (RW)
   498  003F                    DBC13CR1:     equ 3Fh          ;   control & status register 1            (RW)
   499                          
   500                          ;------------------------------------------------
   501                          ;  System and Global Resource Registers
   502                          ;  Note: Also see this address range in Bank 0.
   503                          ;------------------------------------------------
   504                          
   505  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   506  00C0                    CLK_CR0_ACOLUMN_3:    equ C0h    ; MASK: Specify clock for analog cloumn
   507  0030                    CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
   508  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   509  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   510                          
   511  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   512  0018                    CLK_CR1_ACLK1:        equ 18h    ; MASK: Digital PSoC block for analog source
   513  0003                    CLK_CR1_ACLK0:        equ 03h    ; MASK: Digital PSoC block for analog source
   514                          
   515  0003                    CLK_CR1_ACLK2:        equ 03h    ; Deprecated do not use
   516                          
   517  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   518  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   519                          
   520  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   521  000F                    AMD_CR0_AMOD0:        equ 0Fh    ; MASK: Modulation source for analog column 0
   522                          
   523  0064                    CMP_GO_EN:    equ 64h          ; Comparator Bus To Global Out Enable      (RW)
   524  0080                    CMP_GO_EN_GOO5:       equ 80h    ; MASK: Selected Col 1 signal to GOO5
   525  0040                    CMP_GO_EN_GOO1:       equ 40h    ; MASK: Selected Col 1 signal to GOO1
   526  0030                    CMP_GO_EN_SEL1:       equ 30h    ; MASK: Column 1 Signal Select
   527  0008                    CMP_GO_EN_GOO4:       equ 08h    ; MASK: Selected Col 0 signal to GOO4
   528  0004                    CMP_GO_EN_GOO0:       equ 04h    ; MASK: Selected Col 0 signal to GOO0
   529  0003                    CMP_GO_EN_SEL0:       equ 03h    ; MASK: Column 0 Signal Select
   530                          
   531  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   532  000F                    AMD_CR1_AMOD1:        equ 0Fh    ; MASK: Modulation ctrl for analog column 1
   533                          
   534  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   535  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   536  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   537                          
   538  006B                    CLK_CR3:      equ 6Bh          ; Analog Clock Source Control Register 3   (RW)
   539  0040                    CLK_CR3_SYS1:         equ 40h    ; MASK: Analog Clock 1 selection
   540  0030                    CLK_CR3_DIVCLK1:      equ 30h    ; MASK: Analog Clock 1 divider
   541  0004                    CLK_CR3_SYS0:         equ 04h    ; MASK: Analog Clock 0 selection
   542  0003                    CLK_CR3_DIVCLK0:      equ 03h    ; MASK: Analog Clock 0 divider
   543                          
   544                          ;------------------------------------------------
   545                          ;  Global Digital Interconnects
   546                          ;------------------------------------------------
   547                          
   548  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   549  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   550  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   551  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   552                          
   553  00A0                    GDI_O_IN_CR:  equ 0A0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   554  00A1                    GDI_E_IN_CR:  equ 0A1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   555  00A2                    GDI_O_OU_CR:  equ 0A2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   556  00A3                    GDI_E_OU_CR:  equ 0A3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   557                          
   558  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   559  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   560                          
   561                          ;------------------------------------------------
   562                          ;  Analog Mux Bus Port Enable Bits
   563                          ;------------------------------------------------
   564  00D8                    MUX_CR0:      equ 0D8h          ; Analog Mux Port 0 Bit Enables Register
   565  00D9                    MUX_CR1:      equ 0D9h          ; Analog Mux Port 1 Bit Enables Register
   566  00DA                    MUX_CR2:      equ 0DAh          ; Analog Mux Port 2 Bit Enables Register
   567  00DB                    MUX_CR3:      equ 0DBh          ; Analog Mux Port 3 Bit Enables Register
   568  00EC                    MUX_CR4:      equ 0ECh          ; Analog Mux Port 4 Bit Enables Register
   569                          
   570                          ;------------------------------------------------
   571                          ;  Clock and System Control Registers
   572                          ;------------------------------------------------
   573                          
   574  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   575  0080                    OSC_GO_EN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   576  0040                    OSC_GO_EN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   577  0020                    OSC_GO_EN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   578  0010                    OSC_GO_EN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   579  0008                    OSC_GO_EN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   580  0004                    OSC_GO_EN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   581  0002                    OSC_GO_EN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   582  0001                    OSC_GO_EN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   583                          
   584  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   585  0003                    OSC_CR4_VC3SEL:       equ 03h    ; MASK: System VC3 Clock source
   586                          
   587  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   588                          
   589  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   590  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   591  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   592  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   593  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   594  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   595  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   596  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   597  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   598  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   599  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   600  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   601  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   602  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   603  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   604  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   605  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   606  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   607                          
   608  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   609  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   610  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   611                          
   612  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   613  0080                    OSC_CR2_PLLGAIN:      equ 80h    ; MASK: High/Low gain
   614  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   615  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   616  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   617                          
   618  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   619  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   620  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   621  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   622  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   623  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   624  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   625  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   626                          
   627  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   628  0008                    VLT_CMP_NOWRITE:      equ 08h    ; MASK: Vcc below Flash Write level
   629  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   630  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   631  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   632                          
   633  00E5                    ADC0_TR:      equ 0E5h          ; ADC Column 0 Trim Register
   634  00E6                    ADC1_TR:      equ 0E6h          ; ADC Column 1 Trim Register
   635                          
   636  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   637  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   638  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   639  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   640                          
   641  00FA                    FLS_PR1:      equ 0FAh          ; Flash Program Register 1                 (RW)
   642  0003                    FLS_PR1_BANK:         equ 03h    ; MASK: Select Active Flash Bank
   643                          
   644  00FD                    DAC_CR0:       equ 0FDh          ; Analog Mux DAC Control Register 0
   645  00DC                    DAC_CR1:       equ 0DCh          ; Analog Mux DAC Control Register 1
   646  0008                    DAC_CR_IRANGE:        equ 08h    ; MASK: Sets the DAC Range low or high
   647  0006                    DAC_CR_OSCMODE:       equ 06h    ; MASK: Defines the reset mode for AMux
   648  0001                    DAC_CR_ENABLE:        equ 01h    ; MASK: Enable/Disable DAC function
   649                          
   650                          ;------------------------------------------------
   651                          ;  I2C Control Registers
   652                          ;------------------------------------------------
   653                          
   654  00AD                    I2C_ADDR:    equ 0ADh          ; I2C Address Register (RW)
   655                          
   656                          ;------------------------------------------------------
   657                          ;  Neon Analog Registers
   658                          ;------------------------------------------------------
   659  0053                    VDAC50CR0:		equ 53h			; V DAC5 control 0				(RW)
   660  0057                    VDAC51CR0:		equ 57h			; V DAC5 control 1				(RW)
   661  00A8                    ADC_CR0:		equ A8h			; ADC control 0					(RW)
   662  00A9                    ADC_CR1:		equ A9h			; ADC control 1					(RW)
   663  00AA                    ADC_CR2:		equ AAh			; ADC control 2					(RW)
   664  00AB                    ADC_CR3TRIM:	equ ABh			; ADC control 3					(RW)
   665  00AC                    ADC_CR4:		equ ACh			; ADC control 4					(RW)
   666  00E7                    VDAC_TRIM:		equ E7h			; V DAC trim					(RW)
   667                          
   668                          ;------------------------------------------------------
   669                          ;  Neon Current Sense CMP Registers
   670                          ;------------------------------------------------------
   671  0050                    CMP0CR1:		equ 50h			; CMP0 control 1				(RW)
   672  0051                    CMP0CR2:		equ 51h			; CMP0 control 2				(RW)
   673  0054                    CMP1CR1:		equ 54h			; CMP1 control 1				(RW)
   674  0055                    CMP1CR2:		equ 55h			; CMP1 control 2				(RW)
   675  0058                    CSCMPCR0:		equ 58h			; CSCMP control 0				(RW)
   676  0059                    CSCMPGOEN:		equ 59h			; CSCMO global out enable		(RW)
   677  005A                    CSLUTCR0:		equ 5Ah			; CSLUT control 0				(RW)
   678  005B                    CMPCOLMUX:		equ 5Bh			; CMP Column Mux				(RW)
   679  005C                    CMPPWMCR:		equ 5Ch			; CMP PWM control				(RW)
   680  005D                    CMPFLTCR:		equ 5Dh			; CMP filter control			(RW)
   681  005E                    CMPCLK1:		equ 5Eh			; CMP clock 1					(RW)
   682  005F                    CMPCLK0:		equ 5Fh			; CMP clock 0					(RW)
   683                          
   684                          ;------------------------------------------------------
   685                          ;  Neon Real Time Clock Registers
   686                          ;------------------------------------------------------
   687  00A4                    RTCH:			equ A4h			; Real time current hour		(RW)
   688  00A5                    RTCM:			equ A5h			; Real time current minute		(RW)
   689  00A6                    RTCS:			equ A6h			; Real time current second		(RW)
   690  00A7                    RTCCR:			equ A7h			; Real time clock control		(RW)
   691                          
   692                          ;------------------------------------------------------
   693                          ;  Analog MUX Config Registers
   694                          ;------------------------------------------------------
   695                          
   696  006A                    AMUX_CFG1:			equ 6Ah  ; Analog MUX Configuration 1
   697  0020                    AMUX_CFG1_GOINVR:	equ 20h  ;
   698  0010                    AMUX_CFG1_GOINVL:  	equ 10h	 ;
   699  000C                    AMUX_CFG1_AMUXMODR:	equ 0Ch	 ;
   700  0003                    AMUX_CFG1_AMUXMODL:	equ 03h	 ;
   701                          
   702                          ;;=============================================================================
   703                          ;;      M8C System Macros
   704                          ;;  These macros should be used when their functions are needed.
   705                          ;;=============================================================================
   706                          
   707                          ;----------------------------------------------------
   708                          ;  Swapping Register Banks
   709                          ;----------------------------------------------------
   710                              macro M8C_SetBank0
   711                              and   F, ~FLAG_XIO_MASK
   712  3C41                        endm
   713                          
   714                              macro M8C_SetBank1
   715                              or    F, FLAG_XIO_MASK
   716  3C41                        endm
   717                          
   718                          ;----------------------------------------------------
   719                          ;  Global Interrupt Enable/Disable
   720                          ;----------------------------------------------------
   721                              macro M8C_EnableGInt
   722                              or    F, FLAG_GLOBAL_IE
   723  3C41                        endm
   724                          
   725                              macro M8C_DisableGInt
   726                              and   F, ~FLAG_GLOBAL_IE
   727  3C41                        endm
   728                          
   729                          ;----------------------------------------------------
   730                          ;  Enable/Disable Interrupt Mask
   731                          ;
   732                          ;  Use the following macros to enable/disable
   733                          ;  bits in the Interrupt mask registers,
   734                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   735                          ;
   736                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   737                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   738                          ;
   739                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   740                          ;        and MASK is the bit set to enable or disable
   741                          ;----------------------------------------------------
   742                          ; Disable Interrupt Bit Mask(s)
   743                              macro M8C_DisableIntMask
   744                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   745  3C41                        endm
   746                          
   747                          ; Enable Interrupt Bit Mask(s)
   748                              macro M8C_EnableIntMask
   749                              or    reg[@0], @1               ; enable specified interrupt enable bit
   750  3C41                        endm
   751                          
   752                          ;----------------------------------------------------
   753                          ;  Clear Posted Interrupt Flag Mask
   754                          ;
   755                          ;  Use the following macros to clear the
   756                          ;  bits in the Interrupt Clear registers,
   757                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   758                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   759                          ;
   760                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   761                          ;        and MASK is the bit set to enable or disable
   762                          ;----------------------------------------------------
   763                              macro M8C_ClearIntFlag
   764                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   765  3C41                        endm
   766                          
   767                          ;----------------------------------------------------
   768                          ;  Power-On Reset & WatchDog Timer Functions
   769                          ;----------------------------------------------------
   770                              macro M8C_EnableWatchDog
   771                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   772  3C41                        endm
   773                          
   774                              macro M8C_ClearWDT
   775                              mov   reg[RES_WDT], 00h
   776  3C41                        endm
   777                          
   778                              macro M8C_ClearWDTAndSleep
   779                              mov   reg[RES_WDT], 38h
   780  3C41                        endm
   781                          
   782                          ;----------------------------------------------------
   783                          ;  Sleep, CPU Stop & Software Reset
   784                          ;----------------------------------------------------
   785                              macro M8C_Sleep
   786                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   787                              ; The next instruction to be executed depends on the state of the
   788                              ; various interrupt enable bits. If some interrupts are enabled
   789                              ; and the global interrupts are disabled, the next instruction will
   790                              ; be the one that follows the invocation of this macro. If global
   791                              ; interrupts are also enabled then the next instruction will be
   792                              ; from the interrupt vector table. If no interrupts are enabled
   793                              ; then the CPU sleeps forever.
   794  3C41                        endm
   795                          
   796                              macro M8C_Stop
   797                              ; In general, you probably don't want to do this, but here's how:
   798                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   799                              ; Next instruction to be executed is located in the interrupt
   800                              ; vector table entry for Power-On Reset.
   801  3C41                        endm
   802                          
   803                              macro M8C_Reset
   804                              ; Restore CPU to the power-on reset state.
   805                              mov A, 0
   806                              SSC
   807                              ; Next non-supervisor instruction will be at interrupt vector 0.
   808  3C41                        endm
   809                          
   810                          ;----------------------------------------------------
   811                          ; ImageCraft Code Compressor Actions
   812                          ;----------------------------------------------------
   813                              ; Suspend Code Compressor
   814                              ; Must not span a RET or RETI instruction
   815                              ; without resuming code compression
   816                              macro Suspend_CodeCompressor
   817                              or   F, 0
   818  3C41                        endm
   819                          
   820                              ; Resume Code Compression
   821                              macro Resume_CodeCompressor
   822                              add  SP, 0
   823                              endm
      + 3C41                    
      + 3C41                    ; end of file m8c.inc
      + 3C41                    ;;*****************************************************************************
;;******************
      +                         ***********************************************************
;;  FILENAME: PWM8_BL.inc
;;   Version: 
      +                         2.60, Updated on 2013/5/19 at 10:44:7
;;  Generated by PSoC Designer 5.4.2946
;;
;;  DESCRIPTION: As
      +                         sembler declarations for the PWM8 user module interface
;;------------------------------------------
      +                         -----------------------------------
;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserve
      +                         d.
;;*****************************************************************************
;;***************
      +                         **************************************************************
   824                          
   825                          ; end of file m8c.inc
    29  00C0                    FLAG_PGMODE_MASK:  equ 0C0h     ; Paging control for > 256 bytes of RAM
    30  0000                    FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
    31  0040                    FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
    32  0080                    FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
    33  00C0                    FLAG_PGMODE_3:     equ 0C0h       ; Direct to CUR_PP page, indexed to STK_PP page
    34  0000                    FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
    35  0040                    FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
    36  0080                    FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
    37  00C0                    FLAG_PGMODE_11b:   equ 0C0h       ; Same as PGMODE_3
    38  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    39  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    40  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    41  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    42  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    43                          
    44                          
    45                          ;;=============================================================================
    46                          ;;      Register Space, Bank 0
    47                          ;;=============================================================================
    48                          
    49                          ;------------------------------------------------
    50                          ;  Port Registers
    51                          ;  Note: Also see this address range in Bank 1.
    52                          ;------------------------------------------------
    53                          ; Port 0
    54  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    55  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    56  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    57  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    58                          ; Port 1
    59  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    60  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    61  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    62  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    63                          ; Port 2
    64  0008                    PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
    65  0009                    PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
    66  000A                    PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
    67  000B                    PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
    68                          ; Port 3
    69  000C                    PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
    70  000D                    PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
    71  000E                    PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
    72  000F                    PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
    73                          ; Port 4
    74  0010                    PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
    75  0011                    PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
    76  0012                    PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
    77  0013                    PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
    78                          
    79                          ;------------------------------------------------
    80                          ;  Digital PSoC(tm) block Registers
    81                          ;  Note: Also see this address range in Bank 1.
    82                          ;------------------------------------------------
    83                          ; Digital PSoC block 00, Basic Type C
    84  0020                    DBC00DR0:     equ 20h          ; data register 0                          (#)
    85  0021                    DBC00DR1:     equ 21h          ; data register 1                          (W)
    86  0022                    DBC00DR2:     equ 22h          ; data register 2                          (RW)
    87  0023                    DBC00CR0:     equ 23h          ; control & status register 0              (#)
    88                          
    89                          ; Digital PSoC block 01, Basic Type C
    90  0024                    DBC01DR0:     equ 24h          ; data register 0                          (#)
    91  0025                    DBC01DR1:     equ 25h          ; data register 1                          (W)
    92  0026                    DBC01DR2:     equ 26h          ; data register 2                          (RW)
    93  0027                    DBC01CR0:     equ 27h          ; control & status register 0              (#)
    94                          
    95                          ; Digital PSoC block 02, Communications Type C
    96  0028                    DCC02DR0:     equ 28h          ; data register 0                          (#)
    97  0029                    DCC02DR1:     equ 29h          ; data register 1                          (W)
    98  002A                    DCC02DR2:     equ 2Ah          ; data register 2                          (RW)
    99  002B                    DCC02CR0:     equ 2Bh          ; control & status register 0              (#)
   100                          
   101                          ; Digital PSoC block 03, Communications Type C
   102  002C                    DCC03DR0:     equ 2Ch          ; data register 0                          (#)
   103  002D                    DCC03DR1:     equ 2Dh          ; data register 1                          (W)
   104  002E                    DCC03DR2:     equ 2Eh          ; data register 2                          (RW)
   105  002F                    DCC03CR0:     equ 2Fh          ; control & status register 0              (#)
   106                          
   107                          ; Digital PSoC block 10, Basic Type C
   108  0030                    DBC10DR0:     equ 30h          ; data register 0                          (#)
   109  0031                    DBC10DR1:     equ 31h          ; data register 1                          (W)
   110  0032                    DBC10DR2:     equ 32h          ; data register 2                          (RW)
   111  0033                    DBC10CR0:     equ 33h          ; control & status register 0              (#)
   112                          
   113                          ; Digital PSoC block 11, Basic Type C
   114  0034                    DBC11DR0:     equ 34h          ; data register 0                          (#)
   115  0035                    DBC11DR1:     equ 35h          ; data register 1                          (W)
   116  0036                    DBC11DR2:     equ 36h          ; data register 2                          (RW)
   117  0037                    DBC11CR0:     equ 37h          ; control & status register 0              (#)
   118                          
   119                          ; Digital PSoC block 12, Communications Type C
   120  0038                    DCC12DR0:     equ 38h          ; data register 0                          (#)
   121  0039                    DCC12DR1:     equ 39h          ; data register 1                          (W)
   122  003A                    DCC12DR2:     equ 3Ah          ; data register 2                          (RW)
   123  003B                    DCC12CR0:     equ 3Bh          ; control & status register 0              (#)
   124                          
   125                          ; Digital PSoC block 13, Communications Type C
   126  003C                    DCC13DR0:     equ 3Ch          ; data register 0                          (#)
   127  003D                    DCC13DR1:     equ 3Dh          ; data register 1                          (W)
   128  003E                    DCC13DR2:     equ 3Eh          ; data register 2                          (RW)
   129  003F                    DCC13CR0:     equ 3Fh          ; control & status register 0              (#)
   130                          
   131                          ;-------------------------------------
   132                          ;  Analog Control Registers
   133                          ;-------------------------------------
   134  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
   135  00C0                    AMX_IN_ACI3:          equ C0h    ; MASK: column 3 input mux
   136  0030                    AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
   137  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
   138  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
   139                          
   140  0061                    AMUX_CFG:      equ 61h          ; Analog MUX Configuration
   141  0030                    AMUX_CFG_INTCAP:       equ 30h    ;
   142  000E                    AMUX_CFG_MUXCLK:  	  equ 0Eh	 ;
   143  0001                    AMUX_CFG_EN:		  	  equ 01h	 ;
   144                          
   145                          ; old declarations DO NOT USE
   146  0061                    AMUXCFG:      equ 61h          ; Analog MUX Configuration
   147  0030                    AMUXCFG_INTCAP:       equ 30h    ;
   148  000E                    AMUXCFG_MUXCLK:  	  equ 0Eh	 ;
   149  0001                    AMUXCFG_EN:		  	  equ 01h	 ;
   150                          
   151  0062                    PWM_CR:       equ 62h          ; Pulse-Width Modulator Control
   152  0038                    PWM_CR_HIGH:          equ 38h    ; MASK: PWM high time
   153  0006                    PWM_CR_LOW:           equ 06h	 ; MASK: PWM low time
   154  0001                    PWM_CR_EN:            equ 01h	 ; MASK: Enable/Disable PWM function
   155                          
   156  0063                    ARF_CR:       equ 63h          ; Analog Reference Control
   157                          
   158  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus Register           (#)
   159  0080                    CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
   160  0040                    CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
   161  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
   162  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
   163  0008                    CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
   164  0004                    CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
   165  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
   166  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   167                          
   168  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   169  0020                    CMP_CR1_CLDIS1:       equ 20h    ; MASK: Column 1 comparator output latch
   170  0010                    CMP_CR1_CLDIS0:	      equ 10h    ; MASK: Column 0 comparator output latch
   171                          
   172  0068                    ADC0_CR:      equ 68h          ; Analog Column 0 Configuration
   173  0080                    ADC0_CR_CMPST:        equ 80h    ;
   174  0040                    ADC0_CR_LOREN:        equ 40h    ;
   175  0020                    ADC0_CR_SHEN:         equ 20h    ;
   176  0008                    ADC0_CR_CBSRC:        equ 08h    ;
   177  0004                    ADC0_CR_ADCM:         equ 04h    ;
   178  0001                    ADC0_CR_EN:	          equ 01h    ;
   179                          
   180  0069                    ADC1_CR:      equ 69h          ; Analog Column 1 Configuration
   181  0080                    ADC1_CR_CMPST:        equ 80h    ;
   182  0040                    ADC1_CR_LOREN:        equ 40h    ;
   183  0020                    ADC1_CR_SHEN:         equ 20h    ;
   184  0008                    ADC1_CR_CBSRC:        equ 08h    ;
   185  0004                    ADC1_CR_ADCM:         equ 04h    ;
   186  0001                    ADC1_CR_EN:	          equ 01h    ;
   187                          
   188                          ; Continuous Time PSoC block Type E Row 0 Col 0
   189  0072                    ACE00CR1:     equ 72h          ; Control register 1                       (RW)
   190  0073                    ACE00CR2:     equ 73h          ; Control register 2                       (RW)
   191                          
   192                          ; Continuous Time PSoC block Type E Row 0 Col 1
   193  0076                    ACE01CR1:     equ 76h          ; Control register 1                       (RW)
   194  0077                    ACE01CR2:     equ 77h          ; Control register 2                       (RW)
   195                          
   196                          ; Switched Cap PSoC blockType E Row 1 Col 0
   197  0080                    ASE10CR0:     equ 80h          ; Control register 0                       (RW)
   198                          
   199                          ; Switched Cap PSoC blockType E Row 1 Col 1
   200  0084                    ASE11CR0:     equ 84h          ; Control register 0                       (RW)
   201                          
   202                          ;-----------------------------------------------
   203                          ;  Global General Purpose Data Registers
   204                          ;-----------------------------------------------
   205  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   206  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   207  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   208  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   209                          
   210                          ;------------------------------------------------
   211                          ;  Row Digital Interconnects
   212                          ;
   213                          ;  Note: the following registers are mapped into
   214                          ;  both register bank 0 AND register bank 1.
   215                          ;------------------------------------------------
   216                          
   217  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   218  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   219  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   220  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   221  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   222  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   223  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   224                          
   225  00B8                    RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
   226  00B9                    RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
   227  00BA                    RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
   228  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   229  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   230  00BD                    RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
   231  00BE                    RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
   232                          
   233                          ;-----------------------------------------------
   234                          ;  Ram Page Pointers
   235                          ;-----------------------------------------------
   236  00D0                    CUR_PP:      equ 0D0h           ; Current   Page Pointer
   237  00D1                    STK_PP:      equ 0D1h           ; Stack     Page Pointer
   238  00D3                    IDX_PP:      equ 0D3h           ; Index     Page Pointer
   239  00D4                    MVR_PP:      equ 0D4h           ; MVI Read  Page Pointer
   240  00D5                    MVW_PP:      equ 0D5h           ; MVI Write Page Pointer
   241                          
   242                          ;------------------------------------------------
   243                          ;  I2C Configuration Registers
   244                          ;------------------------------------------------
   245  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   246  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   247  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   248  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   249  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   250  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   251  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   252  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   253  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   254  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   255                          
   256  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   257  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   258  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   259  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   260  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   261  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   262  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   263  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   264  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   265                          
   266  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   267                          
   268  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   269  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   270  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   271  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   272  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   273                          
   274                          ;------------------------------------------------
   275                          ;  System and Global Resource Registers
   276                          ;------------------------------------------------
   277  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   278                                                         ; Use INT_MSK0 bit field masks
   279  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   280                                                         ; Use INT_MSK1 bit field masks
   281  00DC                    INT_CLR2:     equ 0DCh          ; Interrupt Clear Register 2               (RW)
   282                                                         ; Use INT_MSK2 bit field masks
   283  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   284                                                         ; Use INT_MSK3 bit field masks
   285                          
   286  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   287  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   288  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   289                          
   290  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   291  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   292  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   293  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   294  0010                    INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
   295  0008                    INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
   296  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   297  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   298  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   299                          
   300  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   301  0080                    INT_MSK1_DCC13:            equ 80h ; MASK: enable/disable DCC13 block interrupt
   302  0040                    INT_MSK1_DCC12:            equ 40h ; MASK: enable/disable DCC12 block interrupt
   303  0020                    INT_MSK1_DBC11:            equ 20h ; MASK: enable/disable DBC11 block interrupt
   304  0010                    INT_MSK1_DBC10:            equ 10h ; MASK: enable/disable DBC10 block interrupt
   305  0008                    INT_MSK1_DCC03:            equ 08h ; MASK: enable/disable DCC03 block interrupt
   306  0004                    INT_MSK1_DCC02:            equ 04h ; MASK: enable/disable DCC02 block interrupt
   307  0002                    INT_MSK1_DBC01:            equ 02h ; MASK: enable/disable DBC01 block interrupt
   308  0001                    INT_MSK1_DBC00:            equ 01h ; MASK: enable/disable DBC00 block interrupt
   309                          
   310  00DF                    INT_MSK2:     equ DFh			; Custom block Mask Register			   (RW)
   311  0010                    INT_MSK2_SARADC:           equ 10h ; MASK: enable/disable SARADC block interrupt
   312  0020                    INT_MSK2_CSD0:             equ 20h ; MASK: enable/disable CSD0 block interrupt
   313  0040                    INT_MSK2_CSD1:             equ 40h ; MASK: enable/disable CSD1 block interrupt
   314  0080                    INT_MSK2_RTC:              equ 80h ; MASK: enable/disable RTC block interrupt
   315                          
   316  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   317  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   318                          
   319                          ;------------------------------------------------------
   320                          ;  MAC Registers
   321                          ;------------------------------------------------------
   322                          
   323  00E8                    MUL0_X:       equ 0E8h          ; Multiply Input X Register                (W)
   324  00E9                    MUL0_Y:       equ 0E9h          ; Multiply Input Y Register                (W)
   325  00EA                    MUL0_DH:      equ 0EAh          ; Multiply Result High Byte Register       (R)
   326  00EB                    MUL0_DL:      equ 0EBh          ; Multiply Result Low Byte Register        (R)
   327                          
   328  00EC                    ACC0_DR1:     equ 0ECh          ; Accumulator Data Register 1              (RW)
   329  00ED                    ACC0_DR0:     equ 0EDh          ; Accumulator Data Register 0              (RW)
   330  00EE                    ACC0_DR3:     equ 0EEh          ; Accumulator Data Register 3              (RW)
   331  00EF                    ACC0_DR2:     equ 0EFh          ; Accumulator Data Register 2              (RW)
   332                          
   333                          ; DECIMATOR Control Registers
   334  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   335  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   336                          
   337                          ;------------------------------------------------------
   338                          ;  System Status and Control Registers
   339                          ;
   340                          ;  Note: The following registers are mapped into both
   341                          ;        register bank 0 AND register bank 1.
   342                          ;------------------------------------------------------
   343  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   344                                                             ; Use FLAG_ masks defined at top of file
   345                          
   346  00FD                    DAC_D:        equ 0FDh		   ; DAC Data Register                        (RW)
   347                          
   348  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   349  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: flag, Internal Reset Status bit
   350  0010                    CPU_SCR1_SLIMO:         equ 10h	   ; MASK: Slow IMO (internal main osc) enable
   351  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   352  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   353  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   354                          
   355  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   356  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   357  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   358  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   359  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   360  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   361                          
   362                          ;------------------------------------------------------
   363                          ;  Neon Capsense Digital Control Registers
   364                          ;------------------------------------------------------
   365  0050                    CSD0_DR0_L:				equ 50h		; Capsense 0 data low 0				(RW)
   366  0054                    CSD0_DR0_H:				equ 54h		; Capsense 0 data high 0			(RW)
   367  0058                    CSD1_DR0_L:				equ 58h		; Capsense 1 data low 0				(RW)
   368  005C                    CSD1_DR0_H:				equ 5Ch		; Capsense 1 data high 0			(RW)
   369  0051                    CSD0_DR1_L:				equ 51h		; Capsense 0 data low 1				(RW)
   370  0055                    CSD0_DR1_H:				equ 55h		; Capsense 0 data high 1			(RW)
   371  0059                    CSD1_DR1_L:				equ 59h		; Capsense 1 data low 1				(RW)
   372  005D                    CSD1_DR1_H:				equ 5Dh		; Capsense 1 data high 1			(RW)
   373  0052                    CSD0_CNT_L:				equ 52h		; Capsense 0 counter low			(RW)
   374  0056                    CSD0_CNT_H:				equ 56h		; Capsense 0 counter high			(RW)
   375  005A                    CSD1_CNT_L:				equ 5Ah		; Capsense 1 counter low			(RW)
   376  005E                    CSD1_CNT_H:				equ	5Eh		; Capsense 1 counter high			(RW)
   377  0053                    CSD0_CR0:				equ 53h		; Capsense 0 control 0				(RW)
   378  005B                    CSD1_CR0:				equ 5Bh		; Capsense 1 control 0				(RW)
   379  0057                    CSD0_CR1:				equ 57h		; Capsense 0 control 1				(RW)
   380  005F                    CSD1_CR1:				equ 5Fh		; Capsense 1 control 1				(RW)
   381                          
   382                          ;------------------------------------------------------
   383                          ;  Neon Analog Registers
   384                          ;------------------------------------------------------
   385  0065                    ASY_CR:					equ 65h		; Analog Synchronization Control	(RW)
   386  006A                    ADC_DH:					equ 6Ah		; ADC data high						(RW)
   387  006B                    ADC_DL:					equ 6Bh		; ADC data low						(RW)
   388  00C8                    PWMVREF0:				equ C8h		; PWM Voltage Reference 0			(RW)
   389  00C9                    PWMVREF1:				equ C9h		; PWM Voltage Reference 1			(RW)
   390  00CB                    PWMSRC:					equ CBh		; PWM Source						(RW)
   391  00CA                    IDACMODE:				equ CAh		; IDAC Mode							(RW)
   392  00FC                    IDACR_D:				equ FCh		; Analog Mux DAC data 0				(RW)
   393  00FD                    IDACL_D:				equ FDh		; Analog Mux DAC data 1				(RW)
   394                          
   395                          ;------------------------------------------------------
   396                          ;  Neon Digital Registers
   397                          ;------------------------------------------------------
   398  00B7                    RDI0DSM:				equ B7h		; Row Digital Interconnect input select 0	(RW)
   399  00BF                    RDI1DSM:				equ BFh		; Row Digital Interconnect input select 1	(RW)
   400                          
   401                          ;------------------------------------------------------
   402                          ;  Neon Test Registers
   403                          ;------------------------------------------------------
   404  00CC                    TSCR0:					equ CCh		; Tsource 0							(RW)
   405  00CD                    TSCMPH:					equ CDh		; TSCMP high						(RW)
   406  00CE                    TSCMPL:					equ CEh		; TSCMP low							(RW)
   407  00CF                    TSCR1:					equ CFh		; Tsource 1							(RW)
   408                          
   409                          ;;=============================================================================
   410                          ;;      Register Space, Bank 1
   411                          ;;=============================================================================
   412                          
   413                          ;------------------------------------------------
   414                          ;  Port Registers
   415                          ;  Note: Also see this address range in Bank 0.
   416                          ;------------------------------------------------
   417                          ; Port 0
   418  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   419  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   420  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   421  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   422                          
   423                          ; Port 1
   424  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   425  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   426  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   427  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   428                          
   429                          ; Port 2
   430  0008                    PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
   431  0009                    PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
   432  000A                    PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
   433  000B                    PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
   434                          
   435                          ; Port 3
   436  000C                    PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
   437  000D                    PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
   438  000E                    PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
   439  000F                    PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
   440                          
   441                          ; Port 4
   442  0010                    PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
   443  0011                    PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
   444  0012                    PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
   445  0013                    PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
   446                          
   447                          ;------------------------------------------------
   448                          ;  Digital PSoC(tm) block Registers
   449                          ;  Note: Also see this address range in Bank 0.
   450                          ;------------------------------------------------
   451                          
   452                          ; Digital PSoC block 00, Basic Type C
   453  0020                    DBC00FN:      equ 20h          ; Function Register                        (RW)
   454  0021                    DBC00IN:      equ 21h          ;    Input Register                        (RW)
   455  0022                    DBC00OU:      equ 22h          ;   Output Register                        (RW)
   456  0023                    DBC00CR1:     equ 23h          ;   control & status register 1            (RW)
   457                          
   458                          ; Digital PSoC block 01, Basic Type C
   459  0024                    DBC01FN:      equ 24h          ; Function Register                        (RW)
   460  0025                    DBC01IN:      equ 25h          ;    Input Register                        (RW)
   461  0026                    DBC01OU:      equ 26h          ;   Output Register                        (RW)
   462  0027                    DBC01CR1:     equ 27h          ;   control & status register 1            (RW)
   463                          
   464                          ; Digital PSoC block 02, Communications Type C
   465  0028                    DCC02FN:      equ 28h          ; Function Register                        (RW)
   466  0029                    DCC02IN:      equ 29h          ;    Input Register                        (RW)
   467  002A                    DCC02OU:      equ 2Ah          ;   Output Register                        (RW)
   468  002B                    DBC02CR1:     equ 2Bh          ;   control & status register 1            (RW)
   469                          
   470                          ; Digital PSoC block 03, Communications Type C
   471  002C                    DCC03FN:      equ 2Ch          ; Function Register                        (RW)
   472  002D                    DCC03IN:      equ 2Dh          ;    Input Register                        (RW)
   473  002E                    DCC03OU:      equ 2Eh          ;   Output Register                        (RW)
   474  0029                    DBC03CR1:     equ 29h          ;   control & status register 1            (RW)
   475                          
   476                          ; Digital PSoC block 10, Basic Type C
   477  0030                    DBC10FN:      equ 30h          ; Function Register                        (RW)
   478  0031                    DBC10IN:      equ 31h          ;    Input Register                        (RW)
   479  0032                    DBC10OU:      equ 32h          ;   Output Register                        (RW)
   480  0033                    DBC10CR1:     equ 33h          ;   control & status register 1            (RW)
   481                          
   482                          ; Digital PSoC block 11, Basic Type C
   483  0034                    DBC11FN:      equ 34h          ; Function Register                        (RW)
   484  0035                    DBC11IN:      equ 35h          ;    Input Register                        (RW)
   485  0036                    DBC11OU:      equ 36h          ;   Output Register                        (RW)
   486  0037                    DBC11CR1:     equ 37h          ;   control & status register 1            (RW)
   487                          
   488                          ; Digital PSoC block 12, Communications Type C
   489  0038                    DCC12FN:      equ 38h          ; Function Register                        (RW)
   490  0039                    DCC12IN:      equ 39h          ;    Input Register                        (RW)
   491  003A                    DCC12OU:      equ 3Ah          ;   Output Register                        (RW)
   492  003B                    DBC12CR1:     equ 3Bh          ;   control & status register 1            (RW)
   493                          
   494                          ; Digital PSoC block 13, Communications Type C
   495  003C                    DCC13FN:      equ 3Ch          ; Function Register                        (RW)
   496  003D                    DCC13IN:      equ 3Dh          ;    Input Register                        (RW)
   497  003E                    DCC13OU:      equ 3Eh          ;   Output Register                        (RW)
   498  003F                    DBC13CR1:     equ 3Fh          ;   control & status register 1            (RW)
   499                          
   500                          ;------------------------------------------------
   501                          ;  System and Global Resource Registers
   502                          ;  Note: Also see this address range in Bank 0.
   503                          ;------------------------------------------------
   504                          
   505  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   506  00C0                    CLK_CR0_ACOLUMN_3:    equ C0h    ; MASK: Specify clock for analog cloumn
   507  0030                    CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
   508  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   509  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   510                          
   511  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   512  0018                    CLK_CR1_ACLK1:        equ 18h    ; MASK: Digital PSoC block for analog source
   513  0003                    CLK_CR1_ACLK0:        equ 03h    ; MASK: Digital PSoC block for analog source
   514                          
   515  0003                    CLK_CR1_ACLK2:        equ 03h    ; Deprecated do not use
   516                          
   517  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   518  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   519                          
   520  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   521  000F                    AMD_CR0_AMOD0:        equ 0Fh    ; MASK: Modulation source for analog column 0
   522                          
   523  0064                    CMP_GO_EN:    equ 64h          ; Comparator Bus To Global Out Enable      (RW)
   524  0080                    CMP_GO_EN_GOO5:       equ 80h    ; MASK: Selected Col 1 signal to GOO5
   525  0040                    CMP_GO_EN_GOO1:       equ 40h    ; MASK: Selected Col 1 signal to GOO1
   526  0030                    CMP_GO_EN_SEL1:       equ 30h    ; MASK: Column 1 Signal Select
   527  0008                    CMP_GO_EN_GOO4:       equ 08h    ; MASK: Selected Col 0 signal to GOO4
   528  0004                    CMP_GO_EN_GOO0:       equ 04h    ; MASK: Selected Col 0 signal to GOO0
   529  0003                    CMP_GO_EN_SEL0:       equ 03h    ; MASK: Column 0 Signal Select
   530                          
   531  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   532  000F                    AMD_CR1_AMOD1:        equ 0Fh    ; MASK: Modulation ctrl for analog column 1
   533                          
   534  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   535  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   536  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   537                          
   538  006B                    CLK_CR3:      equ 6Bh          ; Analog Clock Source Control Register 3   (RW)
   539  0040                    CLK_CR3_SYS1:         equ 40h    ; MASK: Analog Clock 1 selection
   540  0030                    CLK_CR3_DIVCLK1:      equ 30h    ; MASK: Analog Clock 1 divider
   541  0004                    CLK_CR3_SYS0:         equ 04h    ; MASK: Analog Clock 0 selection
   542  0003                    CLK_CR3_DIVCLK0:      equ 03h    ; MASK: Analog Clock 0 divider
   543                          
   544                          ;------------------------------------------------
   545                          ;  Global Digital Interconnects
   546                          ;------------------------------------------------
   547                          
   548  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   549  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   550  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   551  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   552                          
   553  00A0                    GDI_O_IN_CR:  equ 0A0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   554  00A1                    GDI_E_IN_CR:  equ 0A1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   555  00A2                    GDI_O_OU_CR:  equ 0A2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   556  00A3                    GDI_E_OU_CR:  equ 0A3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   557                          
   558  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   559  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   560                          
   561                          ;------------------------------------------------
   562                          ;  Analog Mux Bus Port Enable Bits
   563                          ;------------------------------------------------
   564  00D8                    MUX_CR0:      equ 0D8h          ; Analog Mux Port 0 Bit Enables Register
   565  00D9                    MUX_CR1:      equ 0D9h          ; Analog Mux Port 1 Bit Enables Register
   566  00DA                    MUX_CR2:      equ 0DAh          ; Analog Mux Port 2 Bit Enables Register
   567  00DB                    MUX_CR3:      equ 0DBh          ; Analog Mux Port 3 Bit Enables Register
   568  00EC                    MUX_CR4:      equ 0ECh          ; Analog Mux Port 4 Bit Enables Register
   569                          
   570                          ;------------------------------------------------
   571                          ;  Clock and System Control Registers
   572                          ;------------------------------------------------
   573                          
   574  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   575  0080                    OSC_GO_EN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   576  0040                    OSC_GO_EN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   577  0020                    OSC_GO_EN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   578  0010                    OSC_GO_EN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   579  0008                    OSC_GO_EN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   580  0004                    OSC_GO_EN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   581  0002                    OSC_GO_EN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   582  0001                    OSC_GO_EN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   583                          
   584  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   585  0003                    OSC_CR4_VC3SEL:       equ 03h    ; MASK: System VC3 Clock source
   586                          
   587  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   588                          
   589  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   590  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   591  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   592  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   593  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   594  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   595  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   596  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   597  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   598  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   599  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   600  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   601  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   602  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   603  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   604  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   605  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   606  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   607                          
   608  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   609  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   610  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   611                          
   612  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   613  0080                    OSC_CR2_PLLGAIN:      equ 80h    ; MASK: High/Low gain
   614  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   615  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   616  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   617                          
   618  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   619  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   620  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   621  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   622  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   623  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   624  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   625  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   626                          
   627  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   628  0008                    VLT_CMP_NOWRITE:      equ 08h    ; MASK: Vcc below Flash Write level
   629  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   630  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   631  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   632                          
   633  00E5                    ADC0_TR:      equ 0E5h          ; ADC Column 0 Trim Register
   634  00E6                    ADC1_TR:      equ 0E6h          ; ADC Column 1 Trim Register
   635                          
   636  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   637  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   638  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   639  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   640                          
   641  00FA                    FLS_PR1:      equ 0FAh          ; Flash Program Register 1                 (RW)
   642  0003                    FLS_PR1_BANK:         equ 03h    ; MASK: Select Active Flash Bank
   643                          
   644  00FD                    DAC_CR0:       equ 0FDh          ; Analog Mux DAC Control Register 0
   645  00DC                    DAC_CR1:       equ 0DCh          ; Analog Mux DAC Control Register 1
   646  0008                    DAC_CR_IRANGE:        equ 08h    ; MASK: Sets the DAC Range low or high
   647  0006                    DAC_CR_OSCMODE:       equ 06h    ; MASK: Defines the reset mode for AMux
   648  0001                    DAC_CR_ENABLE:        equ 01h    ; MASK: Enable/Disable DAC function
   649                          
   650                          ;------------------------------------------------
   651                          ;  I2C Control Registers
   652                          ;------------------------------------------------
   653                          
   654  00AD                    I2C_ADDR:    equ 0ADh          ; I2C Address Register (RW)
   655                          
   656                          ;------------------------------------------------------
   657                          ;  Neon Analog Registers
   658                          ;------------------------------------------------------
   659  0053                    VDAC50CR0:		equ 53h			; V DAC5 control 0				(RW)
   660  0057                    VDAC51CR0:		equ 57h			; V DAC5 control 1				(RW)
   661  00A8                    ADC_CR0:		equ A8h			; ADC control 0					(RW)
   662  00A9                    ADC_CR1:		equ A9h			; ADC control 1					(RW)
   663  00AA                    ADC_CR2:		equ AAh			; ADC control 2					(RW)
   664  00AB                    ADC_CR3TRIM:	equ ABh			; ADC control 3					(RW)
   665  00AC                    ADC_CR4:		equ ACh			; ADC control 4					(RW)
   666  00E7                    VDAC_TRIM:		equ E7h			; V DAC trim					(RW)
   667                          
   668                          ;------------------------------------------------------
   669                          ;  Neon Current Sense CMP Registers
   670                          ;------------------------------------------------------
   671  0050                    CMP0CR1:		equ 50h			; CMP0 control 1				(RW)
   672  0051                    CMP0CR2:		equ 51h			; CMP0 control 2				(RW)
   673  0054                    CMP1CR1:		equ 54h			; CMP1 control 1				(RW)
   674  0055                    CMP1CR2:		equ 55h			; CMP1 control 2				(RW)
   675  0058                    CSCMPCR0:		equ 58h			; CSCMP control 0				(RW)
   676  0059                    CSCMPGOEN:		equ 59h			; CSCMO global out enable		(RW)
   677  005A                    CSLUTCR0:		equ 5Ah			; CSLUT control 0				(RW)
   678  005B                    CMPCOLMUX:		equ 5Bh			; CMP Column Mux				(RW)
   679  005C                    CMPPWMCR:		equ 5Ch			; CMP PWM control				(RW)
   680  005D                    CMPFLTCR:		equ 5Dh			; CMP filter control			(RW)
   681  005E                    CMPCLK1:		equ 5Eh			; CMP clock 1					(RW)
   682  005F                    CMPCLK0:		equ 5Fh			; CMP clock 0					(RW)
   683                          
   684                          ;------------------------------------------------------
   685                          ;  Neon Real Time Clock Registers
   686                          ;------------------------------------------------------
   687  00A4                    RTCH:			equ A4h			; Real time current hour		(RW)
   688  00A5                    RTCM:			equ A5h			; Real time current minute		(RW)
   689  00A6                    RTCS:			equ A6h			; Real time current second		(RW)
   690  00A7                    RTCCR:			equ A7h			; Real time clock control		(RW)
   691                          
   692                          ;------------------------------------------------------
   693                          ;  Analog MUX Config Registers
   694                          ;------------------------------------------------------
   695                          
   696  006A                    AMUX_CFG1:			equ 6Ah  ; Analog MUX Configuration 1
   697  0020                    AMUX_CFG1_GOINVR:	equ 20h  ;
   698  0010                    AMUX_CFG1_GOINVL:  	equ 10h	 ;
   699  000C                    AMUX_CFG1_AMUXMODR:	equ 0Ch	 ;
   700  0003                    AMUX_CFG1_AMUXMODL:	equ 03h	 ;
   701                          
   702                          ;;=============================================================================
   703                          ;;      M8C System Macros
   704                          ;;  These macros should be used when their functions are needed.
   705                          ;;=============================================================================
   706                          
   707                          ;----------------------------------------------------
   708                          ;  Swapping Register Banks
   709                          ;----------------------------------------------------
   710                              macro M8C_SetBank0
   711                              and   F, ~FLAG_XIO_MASK
   712  3C41                        endm
   713                          
   714                              macro M8C_SetBank1
   715                              or    F, FLAG_XIO_MASK
   716  3C41                        endm
   717                          
   718                          ;----------------------------------------------------
   719                          ;  Global Interrupt Enable/Disable
   720                          ;----------------------------------------------------
   721                              macro M8C_EnableGInt
   722                              or    F, FLAG_GLOBAL_IE
   723  3C41                        endm
   724                          
   725                              macro M8C_DisableGInt
   726                              and   F, ~FLAG_GLOBAL_IE
   727  3C41                        endm
   728                          
   729                          ;----------------------------------------------------
   730                          ;  Enable/Disable Interrupt Mask
   731                          ;
   732                          ;  Use the following macros to enable/disable
   733                          ;  bits in the Interrupt mask registers,
   734                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   735                          ;
   736                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   737                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   738                          ;
   739                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   740                          ;        and MASK is the bit set to enable or disable
   741                          ;----------------------------------------------------
   742                          ; Disable Interrupt Bit Mask(s)
   743                              macro M8C_DisableIntMask
   744                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   745  3C41                        endm
   746                          
   747                          ; Enable Interrupt Bit Mask(s)
   748                              macro M8C_EnableIntMask
   749                              or    reg[@0], @1               ; enable specified interrupt enable bit
   750  3C41                        endm
   751                          
   752                          ;----------------------------------------------------
   753                          ;  Clear Posted Interrupt Flag Mask
   754                          ;
   755                          ;  Use the following macros to clear the
   756                          ;  bits in the Interrupt Clear registers,
   757                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   758                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   759                          ;
   760                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   761                          ;        and MASK is the bit set to enable or disable
   762                          ;----------------------------------------------------
   763                              macro M8C_ClearIntFlag
   764                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   765  3C41                        endm
   766                          
   767                          ;----------------------------------------------------
   768                          ;  Power-On Reset & WatchDog Timer Functions
   769                          ;----------------------------------------------------
   770                              macro M8C_EnableWatchDog
   771                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   772  3C41                        endm
   773                          
   774                              macro M8C_ClearWDT
   775                              mov   reg[RES_WDT], 00h
   776  3C41                        endm
   777                          
   778                              macro M8C_ClearWDTAndSleep
   779                              mov   reg[RES_WDT], 38h
   780  3C41                        endm
   781                          
   782                          ;----------------------------------------------------
   783                          ;  Sleep, CPU Stop & Software Reset
   784                          ;----------------------------------------------------
   785                              macro M8C_Sleep
   786                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   787                              ; The next instruction to be executed depends on the state of the
   788                              ; various interrupt enable bits. If some interrupts are enabled
   789                              ; and the global interrupts are disabled, the next instruction will
   790                              ; be the one that follows the invocation of this macro. If global
   791                              ; interrupts are also enabled then the next instruction will be
   792                              ; from the interrupt vector table. If no interrupts are enabled
   793                              ; then the CPU sleeps forever.
   794  3C41                        endm
   795                          
   796                              macro M8C_Stop
   797                              ; In general, you probably don't want to do this, but here's how:
   798                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   799                              ; Next instruction to be executed is located in the interrupt
   800                              ; vector table entry for Power-On Reset.
   801  3C41                        endm
   802                          
   803                              macro M8C_Reset
   804                              ; Restore CPU to the power-on reset state.
   805                              mov A, 0
   806                              SSC
   807                              ; Next non-supervisor instruction will be at interrupt vector 0.
   808  3C41                        endm
   809                          
   810                          ;----------------------------------------------------
   811                          ; ImageCraft Code Compressor Actions
   812                          ;----------------------------------------------------
   813                              ; Suspend Code Compressor
   814                              ; Must not span a RET or RETI instruction
   815                              ; without resuming code compression
   816                              macro Suspend_CodeCompressor
   817                              or   F, 0
   818  3C41                        endm
   819                          
   820                              ; Resume Code Compression
   821                              macro Resume_CodeCompressor
   822                              add  SP, 0
   823  3C41                        endm
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  FILENAME: PWM8_BL.inc
     4                          ;;   Version: 2.60, Updated on 2013/5/19 at 10:44:7
     5                          ;;  Generated by PSoC Designer 5.4.2946
     6                          ;;
     7                          ;;  DESCRIPTION: Assembler declarations for the PWM8 user module interface
     8                          ;;-----------------------------------------------------------------------------
     9                          ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
    10                          ;;*****************************************************************************
    11                          ;;*****************************************************************************
    12                          
    13                          include "m8c.inc"
    14                          
    15                          
    16                          ;--------------------------------------------------
    17                          ; Constants for PWM8_BL API's.
    18                          ;--------------------------------------------------
    19                          
    20  0001                    PWM8_BL_CONTROL_REG_START_BIT:             equ 0x01    ; Control register start bit
    21  00E1                    PWM8_BL_INT_REG:                           equ 0x0e1
    22  0010                    PWM8_BL_INT_MASK:                          equ 0x10
    23                          
    24                          
    25                          ;--------------------------------------------------
    26                          ; Constants for PWM8_BL user defined values
    27                          ;--------------------------------------------------
    28                          
    29  0000                    PWM8_BL_PERIOD:                            equ 0x00
    30  0000                    PWM8_BL_PULSE_WIDTH:                       equ 0x00
    31                          
    32                          
    33                          ;--------------------------------------------------
    34                          ; Register Address Constants for PWM8_BL
    35                          ;--------------------------------------------------
    36                          
    37  0030                    PWM8_BL_COUNTER_REG:                   equ 0x30   ; DR0 Count register
    38  0031                    PWM8_BL_PERIOD_REG:                    equ 0x31   ; DR1 Period register
    39  0032                    PWM8_BL_COMPARE_REG:                   equ 0x32   ; DR2 Compare register
    40  0033                    PWM8_BL_CONTROL_REG:                   equ 0x33   ; Control register
    41  0030                    PWM8_BL_FUNC_REG:                      equ 0x30   ; Function register
    42  0031                    PWM8_BL_INPUT_REG:                     equ 0x31   ; Input register
    43  0032                    PWM8_BL_OUTPUT_REG:                    equ 0x32   ; Output register
    44                          
    45                          
    46                          ;--------------------------------------------------
    47                          ; PWM8_BL Macro 'Functions'
    48                          ;--------------------------------------------------
    49                          
    50                             macro PWM8_BL_Start_M
    51                             or    reg[PWM8_BL_CONTROL_REG],  PWM8_BL_CONTROL_REG_START_BIT
    52  3C41                       endm
    53                          
    54                             macro PWM8_BL_Stop_M
    55                             and   reg[PWM8_BL_CONTROL_REG], ~PWM8_BL_CONTROL_REG_START_BIT
    56  3C41                       endm
    57                          
    58                             macro PWM8_BL_EnableInt_M
    59                             M8C_EnableIntMask PWM8_BL_INT_REG, PWM8_BL_INT_MASK
    60  3C41                       endm
    61                          
    62                             macro PWM8_BL_DisableInt_M
    63                             M8C_DisableIntMask PWM8_BL_INT_REG, PWM8_BL_INT_MASK
    64                             endm
      + 3C41                    
      + 3C41                    ; end of file PWM8_BL.inc
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;
     4                          ;;       FILENAME: Memory.inc
     5                          ;;
     6                          ;;    DESCRIPTION: Memory Model and Stack Parameter Definitions for 
     7                          ;;                 CY8C22045 PSoC devices.
     8                          ;;
     9                          ;;  LAST MODIFIED: August 17, 2004
    10                          ;;
    11                          ;;-----------------------------------------------------------------------------
    12                          ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
    13                          ;;*****************************************************************************
    14                          ;;*****************************************************************************
    15                          ;
    16                          ;
    17                          ;  ******** Define Memory Model and Stack parameters ********
    18                          ;
    19  0001                    IMAGECRAFT: equ 1   
    20  0002                    HITECH: equ 2   
    21  0002                    TOOLCHAIN: equ HITECH   
    22  0001                    SYSTEM_LARGE_MEMORY_MODEL: equ 1   
    23  0000                    SYSTEM_SMALL_MEMORY_MODEL: equ 0   
    24  0003                    SYSTEM_STACK_PAGE: equ 3   
    25  0000                    SYSTEM_STACK_PAGE_OFFSET: equ 0   
    26  0002                    SYSTEM_TOOLS: equ 2   
    27  0000                    SYSTEM_IDXPG_TRACKS_STK_PP: equ 0   
    28  0001                    SYSTEM_IDXPG_TRACKS_IDX_PP: equ 1   
    29  0000                    SYSTEM_MULTIPAGE_STACK: equ 0 
    30                          
    31                          
    32                          ;  ******* Function Class Definitions *******
    33                          ;
    34                          ;  These definitions are used to describe RAM access patterns. They provide
    35                          ;  documentation and they control prologue and epilogue macros that perform
    36                          ;  the necessary housekeeping functions for large memory model devices like
    37                          ;  the CY8C22045.
    38                          
    39  0001                    RAM_USE_CLASS_1:               equ 1   ; PUSH, POP & I/O access
    40  0002                    RAM_USE_CLASS_2:               equ 2   ; Indexed address mode on stack page
    41  0004                    RAM_USE_CLASS_3:               equ 4   ; Indexed address mode to any page
    42  0008                    RAM_USE_CLASS_4:               equ 8   ; Direct/Indirect address mode access
    43                          
    44                          ; ******* Hi Tech Specific *******
    45                          ; Turn on the expansion of all macros by default
    46                          IF (TOOLCHAIN & HITECH)
    47                          OPT EXPAND
    48                          ENDIF
    49                          ; ******* Page Pointer Manipulation Macros *******
    50                          ;
    51                          ;  ******* Page Pointer Manipulation Macros *******
    52                          ;
    53                          ;  Most of the following macros are conditionally compiled so they only
    54                          ;  produce code if the large memory model is selected.
    55                          
    56                             ;-----------------------------------------------
    57                             ;  Set Stack Page Macro
    58                             ;-----------------------------------------------
    59                             ;
    60                             ;  DESC: Modify STK_PP in the large or small memory Models.
    61                             ;
    62                             ; INPUT: Constant (e.g., SYSTEM_STACK_PAGE) that specifies the RAM page on
    63                             ;        which stack operations like PUSH and POP store and retrieve their
    64                             ;        data
    65                             ;
    66                             ;  COST: 8 instruction cycles (in LMM only)
    67                          
    68                             macro RAM_SETPAGE_STK( PG_NUMBER )
    69                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    70                                mov reg[STK_PP], @PG_NUMBER
    71                             ENDIF
    72  3C41                       endm
    73                          
    74                             ;-----------------------------------------------
    75                             ;  Set Current Page Macro
    76                             ;-----------------------------------------------
    77                             ;
    78                             ;  DESC: Modify CUR_PP in the large or small memory Models.
    79                             ;
    80                             ; INPUT: Constant value (e.g., >bFoo) for the RAM page number used in
    81                             ;        calculation of effective direct-mode address operands.
    82                             ;
    83                             ;  COST: 8 instruction cycles (in LMM only)
    84                          
    85                             macro RAM_SETPAGE_CUR( PG_NUMBER )
    86                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    87                                mov reg[CUR_PP], @PG_NUMBER
    88                             ENDIF
    89  3C41                       endm
    90                          
    91                             ;-----------------------------------------------
    92                             ;  Set Index Page Macro
    93                             ;-----------------------------------------------
    94                             ;
    95                             ;  DESC: Modify IDX_PP in the large or small emory Models.
    96                             ;
    97                             ; INPUT: Constant value (e.g., >caFoo) for the RAM page number used in
    98                             ;         calculation of effective index-mode address operands.
    99                             ;
   100                             ;  COST: 8 instruction cycles (in LMM only)
   101                          
   102                             macro RAM_SETPAGE_IDX( PG_NUMBER )
   103                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   104                                mov reg[IDX_PP], @PG_NUMBER
   105                             ENDIF
   106  3C41                       endm
   107                          
   108                             ;-----------------------------------------------
   109                             ;  Set MVI Read Page Macro
   110                             ;-----------------------------------------------
   111                             ;
   112                             ;  DESC: Modify MVR_PP in the large or small memory Models.
   113                             ;
   114                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   115                             ;        calculation of indirect address operands used in the
   116                             ;        "mvi A, [pFoo]" instructions.
   117                             ;
   118                             ;  COST: 8 instruction cycles (in LMM only)
   119                          
   120                             macro RAM_SETPAGE_MVR( PG_NUMBER )
   121                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   122                                mov reg[MVR_PP], @PG_NUMBER
   123                             ENDIF
   124  3C41                       endm
   125                          
   126                             ;-----------------------------------------------
   127                             ;  Set MVI Write Page Macro
   128                             ;-----------------------------------------------
   129                             ;
   130                             ;  DESC: Modify MVW_PP in the large or small memory Models.
   131                             ;
   132                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   133                             ;        calculation of indirect address operands used in the
   134                             ;        "mvi [pFoo], A" instructions.
   135                             ;
   136                             ;  COST: 8 instruction cycles (in LMM only)
   137                          
   138                             macro RAM_SETPAGE_MVW( PG_NUMBER )
   139                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   140                                mov reg[MVW_PP], @PG_NUMBER
   141                             ENDIF
   142  3C41                       endm
   143                          
   144                             ;-----------------------------------------------
   145                             ;  Force Index Page Pointer to Stack Page
   146                             ;-----------------------------------------------
   147                             ;
   148                             ;  DESC: Map index-mode operands onto the stack page by modifying IDX_PP.
   149                             ;        See also RAM_LOCK_INDEX_TO_STACKPAGE.
   150                             ;
   151                             ; INPUT: None
   152                             ;
   153                             ;  COST: 8 instruction cycles (in LMM only)
   154                          
   155                             macro RAM_SETPAGE_IDX2STK
   156                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   157                                IF ( SYSTEM_MULTIPAGE_STACK )
   158                                   mov   A, reg[STK_PP]
   159                                   mov   reg[IDX_PP], A
   160                                ELSE
   161                                   RAM_SETPAGE_IDX SYSTEM_STACK_PAGE
   162                                ENDIF
   163                             ENDIF
   164  3C41                       endm
   165                          
   166                             ;-----------------------------------------------
   167                             ;  Change Memory Mode
   168                             ;-----------------------------------------------
   169                             ;
   170                             ;  DESC: Modify FLAG_PAGEMODE bits in the large and small memory Models.
   171                             ;
   172                             ; INPUT: Constant value for PGMODE bitfield of CPU Flag register, F.
   173                             ;        See FLAG_PGMODE_{x} constants in M8C.INC.
   174                             ;
   175                             ;  COST: 8 instruction cycles (in LMM only)
   176                          
   177                             macro RAM_CHANGE_PAGE_MODE( MODE )
   178                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   179                                and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
   180                                or    F,  FLAG_PGMODE_MASK & @MODE
   181                             ENDIF
   182  3C41                       endm
   183                          
   184                             ;-----------------------------------------------
   185                             ;  Set Large Memory Model Native Paging Mode
   186                             ;-----------------------------------------------
   187                             ;
   188                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   189                             ;        paging mode *IFF* a simple "OR" is guaranteed to work---for
   190                             ;        example, in an ISR, when the PGMODE bits have been cleared
   191                             ;        to zero. If a simple "OR" is not guaranteed to work, use
   192                             ;        the slower RAM_RESTORE_NATIVE_PAGING instead.
   193                             ;
   194                             ; INPUT: none
   195                             ;
   196                             ;  COST: 4 instruction cycles (in LMM only)
   197                          
   198                             macro RAM_SET_NATIVE_PAGING
   199                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   200                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   201                                or    F,  FLAG_PGMODE_11b            ; LMM w/ IndexPage<==>StackPage
   202                             ENDIF ;  PGMODE LOCKED
   203                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   204                                or    F,  FLAG_PGMODE_10b            ; LMM with independent IndexPage
   205                             ENDIF ; PGMODE FREE
   206                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   207  3C41                       endm
   208                          
   209                             ;-----------------------------------------------
   210                             ; Restore Large Memory Model Native Paging Mode
   211                             ;-----------------------------------------------
   212                             ;
   213                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   214                             ;        paging mode. Always works because it clears the PGMODE bits
   215                             ;        before OR-ing in the new ones. See RAM_RESTORE_NATIVE_PAGING
   216                             ;        for a faster method.
   217                             ;
   218                             ; INPUT: none
   219                             ;
   220                             ;  COST: 8 instruction cycles (in LMM only)
   221                          
   222                             macro RAM_RESTORE_NATIVE_PAGING
   223                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   224                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   225                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_11b ; LMM w/ IndexPage<==>StackPage
   226                             ENDIF ;  PGMODE LOCKED
   227                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   228                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b ; LMM with independent IndexPage
   229                             ENDIF ; PGMODE FREE
   230                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   231  3C41                       endm
   232                          
   233                             ;-----------------------------------------------
   234                             ; Force indexed addr mode operands to Stack Pg
   235                             ;-----------------------------------------------
   236                             ;
   237                             ;  DESC: Force instructions that use indexed address mode to reference the
   238                             ;        stack page (as defined by STK_PP). This macro sets the "Indexed
   239                             ;        Stack Mode" bit (LSB) of the PGMODE bit field in the CPU Flag
   240                             ;        register, F. (See also RAM_SETPAGE_IDX2STK, above.)
   241                             ;
   242                             ; INPUT: none
   243                             ;
   244                             ;  COST: 4 instruction cycles (in LMM only)
   245                          
   246                             macro RAM_X_POINTS_TO_STACKPAGE
   247                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   248                                or   F, FLAG_PGMODE_01b
   249                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   250  3C41                       endm
   251                          
   252                             ;-----------------------------------------------
   253                             ;  Force indexed addr mode operands to Index Pg
   254                             ;-----------------------------------------------
   255                             ;
   256                             ;  DESC: Permit instructions that use indexed address mode to reference page
   257                             ;        zero or the page pointed to by the IDX_PP register, depending on the
   258                             ;        setting of the MSb (or "Direct Page Mode" bit) of the PGMODE bits
   259                             ;        in the CPU Flag register, F. (This macro clears the PGMODE LSb.)
   260                             ;
   261                             ; INPUT: none
   262                             ;
   263                             ;  COST: 4 instruction cycles (in LMM only)
   264                          
   265                             macro RAM_X_POINTS_TO_INDEXPAGE
   266                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   267                                and  F, ~FLAG_PGMODE_01b
   268                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   269  3C41                       endm
   270                          
   271                             ;-----------------------------------------------
   272                             ;  Function Prologue
   273                             ;-----------------------------------------------
   274                             ;
   275                             ;  Prologue for functions that run in the LMM and SMM.
   276                             ;
   277                          
   278                             macro RAM_PROLOGUE( ACTUAL_CLASS )
   279                          
   280                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   281                             ; Nothing to do
   282                             ENDIF ; RAM_USE_CLASS_1
   283                          
   284                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   285                                IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   286                                   RAM_X_POINTS_TO_STACKPAGE         ; exit native paging mode!
   287                                ENDIF
   288                             ENDIF ; RAM_USE_CLASS_2
   289                          
   290                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   291                                IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   292                                   RAM_X_POINTS_TO_INDEXPAGE         ; exit native paging mode!
   293                                ENDIF
   294                             ENDIF ; RAM_USE_CLASS_3
   295                          
   296                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   297                             ; Nothing to do
   298                             ENDIF ; RAM_USE_CLASS_4
   299                          
   300  3C41                       endm
   301                          
   302                             ;-----------------------------------------------
   303                             ;  Function Epilogue
   304                             ;-----------------------------------------------
   305                             ;
   306                             ;  Prologue for functions that run in the LMM and SMM.
   307                             ;
   308                          
   309                             macro RAM_EPILOGUE( ACTUAL_CLASS )
   310                          
   311                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   312                             ; Nothing to do
   313                             ENDIF ; RAM_USE_CLASS_1
   314                          
   315                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   316                                RAM_RESTORE_NATIVE_PAGING
   317                             ENDIF ; RAM_USE_CLASS_2
   318                          
   319                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   320                                RAM_RESTORE_NATIVE_PAGING
   321                             ENDIF ; RAM_USE_CLASS_3
   322                          
   323                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   324                             ; Nothing to do
   325                             ENDIF ; RAM_USE_CLASS_4
   326                          
   327  3C41                       endm
   328                          
   329                             ;-----------------------------------------------
   330                             ;  Preserve Register
   331                             ;-----------------------------------------------
   332                             ;
   333                             ;  DESC: Preserve a register value on the stack
   334                             ;
   335                             ; INPUT: Name or address of register in I/O Space
   336                             ;        The I/O bank is an implicit parameter. That is, this function will
   337                             ;        Access the I/O bank currently specified by the CPU Flag register.
   338                             ;
   339                             ;  USES: CPU 'A' register
   340                             ;
   341                             ;  COST: 9 instruction cycles
   342                          
   343                             macro REG_PRESERVE( IOReg )
   344                             mov   A, reg[ @IOReg ]
   345                             push  A
   346  3C41                       endm
   347                          
   348                             ;-----------------------------------------------
   349                             ;  Restore Register
   350                             ;-----------------------------------------------
   351                             ;
   352                             ;  DESC: Restore a register value from the stack
   353                             ;
   354                             ; INPUT: Name or address of register in I/O Space
   355                             ;        The I/O bank is an implicit parameter. That is, this function will
   356                             ;        Access the I/O bank currently specified by the CPU Flag register.
   357                             ;
   358                             ;  USES: CPU 'A' register
   359                             ;
   360                             ;  COST: 10 instruction cycles
   361                          
   362                             macro REG_RESTORE( IOReg )
   363                             pop   A
   364                             mov   reg[ @IOReg ], A
   365  3C41                       endm
   366                          
   367                             ;-----------------------------------------------
   368                             ;  Preserve Volatile Page Pointer Registers
   369                             ;-----------------------------------------------
   370                             ;
   371                             ;  DESC: Invoked by ISRs before switching to the LMM mode and calling
   372                             ;        functions that require on it.
   373                             ;
   374                             ; INPUT: none
   375                             ;
   376                             ;  USES: CPU 'A' register
   377                             ;
   378                             ;  COST: 45 instruction cycles (in LMM only)
   379                          
   380                             macro ISR_PRESERVE_PAGE_POINTERS
   381                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   382                                REG_PRESERVE CUR_PP
   383                                REG_PRESERVE IDX_PP
   384                                REG_PRESERVE MVR_PP
   385                                REG_PRESERVE MVW_PP
   386                             ENDIF
   387  3C41                       endm
   388                          
   389                             ;-----------------------------------------------
   390                             ;  Restore Volatile Page Pointer Registers
   391                             ;-----------------------------------------------
   392                             ;
   393                             ;  DESC: Undo for RAM_PRESERVE_PAGE_POINTERS macro. Invoked by ISRs after
   394                             ;        calling functions that run in the LMM mode and before executing
   395                             ;        the RETI instruction.
   396                             ;
   397                             ; INPUT: none
   398                             ;
   399                             ;  USES: CPU 'A' register
   400                             ;
   401                             ;  COST: 50 instruction cycles (in LMM only)
   402                          
   403                             macro ISR_RESTORE_PAGE_POINTERS
   404                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   405                                REG_RESTORE MVW_PP
   406                                REG_RESTORE MVR_PP
   407                                REG_RESTORE IDX_PP
   408                                REG_RESTORE CUR_PP
   409                             ENDIF
   410  3C41                       endm
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  FILENAME: PWM8_BLINT.asm
     4                          ;;   Version: 2.60, Updated on 2013/5/19 at 10:44:7
     5                          ;;  Generated by PSoC Designer 5.4.2946
     6                          ;;
     7                          ;;  DESCRIPTION: PWM8 Interrupt Service Routine
     8                          ;;-----------------------------------------------------------------------------
     9                          ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
    10                          ;;*****************************************************************************
    11                          ;;*****************************************************************************
    12                          
    13                          include "m8c.inc"
    14                          include "PWM8_BL.inc"
    15                          include "memory.inc"
    16                          
    17                          
    18                          ;-----------------------------------------------
    19                          ;  Global Symbols
    20                          ;-----------------------------------------------
    21                          export  _PWM8_BL_ISR
    22                          
    23                          
    24                          AREA InterruptRAM (RAM,REL,CON)
    25                          
    26                          ;@PSoC_UserCode_INIT@ (Do not change this line.)
    27                          ;---------------------------------------------------
    28                          ; Insert your custom declarations below this banner
    29                          ;---------------------------------------------------
    30                          
    31                          ;------------------------
    32                          ; Includes
    33                          ;------------------------
    34                          
    35                          	
    36                          ;------------------------
    37                          ;  Constant Definitions
    38                          ;------------------------
    39                          
    40                          
    41                          ;------------------------
    42                          ; Variable Allocation
    43                          ;------------------------
    44                          
    45                          
    46                          ;---------------------------------------------------
    47                          ; Insert your custom declarations above this banner
    48                          ;---------------------------------------------------
    49                          ;@PSoC_UserCode_END@ (Do not change this line.)
    50                          
    51                          
    52                          AREA UserModules (ROM, REL)
    53                          
    54                          ;-----------------------------------------------------------------------------
    55                          ;  FUNCTION NAME: _PWM8_BL_ISR
    56                          ;
    57                          ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
    58                          ;
    59                          ;-----------------------------------------------------------------------------
    60                          ;
    61                          
    62  2C8F                    _PWM8_BL_ISR:
    63                          
    64                             ;@PSoC_UserCode_BODY@ (Do not change this line.)
    65                             ;---------------------------------------------------
    66                             ; Insert your custom assembly code below this banner
    67                             ;---------------------------------------------------
    68                             ;   NOTE: interrupt service routines must preserve
    69                             ;   the values of the A and X CPU registers.
    70                             
    71                             ;---------------------------------------------------
    72                             ; Insert your custom assembly code above this banner
    73                             ;---------------------------------------------------
    74                             
    75                             ;---------------------------------------------------
    76                             ; Insert a lcall to a C function below this banner
    77                             ; and un-comment the lines between these banners
    78                             ;---------------------------------------------------
    79                             
    80                             ;PRESERVE_CPU_CONTEXT
    81                             ;lcall _My_C_Function
    82                             ;RESTORE_CPU_CONTEXT
    83                             
    84                             ;---------------------------------------------------
    85                             ; Insert a lcall to a C function above this banner
    86                             ; and un-comment the lines between these banners
    87                             ;---------------------------------------------------
    88                             ;@PSoC_UserCode_END@ (Do not change this line.)
    89                          
    90  2C8F  7E                   reti
HI-TECH Software Macro Assembler (PSoC MCU) V9.61
Symbol Table                                                                                               Fri Jun 12 09:25:10 2015
                       HITECH 0002                   _PWM8_BL_ISR 2C8F                      TOOLCHAIN 0002  
HI-TECH Software Macro Assembler (PSoC MCU) V9.61
                                                                                                           Fri Jun 12 09:25:10 2015
     1                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     2                          ;;;
     3                          ;;;  M8C.INC -- Microcontroller Device System Declarations
     4                          ;;;
     5                          ;;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
     6                          ;;;
     7                          ;;;  This file provides address constants, bit field masks and a set of macro
     8                          ;;;  facilities for the Cypress Semiconductor CY8C22045 Microcontroller devices.
     9                          ;;;
    10                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    11                          
    12                          ;;=============================================================================
    13                          ;; Definition of abbreviations used in the descriptions below
    14                          ;;  (RW)   The register or bit supports reads and writes
    15                          ;;  (W)    The register or bit is write-only
    16                          ;;  (R)    The register or bit is read-only
    17                          ;;  (#)    Access to the register is bit specific (see the family datasheet)
    18                          ;;  (RC)   The register or bit can be read, but writing a 0 will clear it,
    19                          ;;         writing a 1 will have no effect.
    20                          ;;=============================================================================
    21                          
    22                          ;;=============================================================================
    23                          ;;      System Registers
    24                          ;;=============================================================================
    25                          
    26                          ;----------------------------
    27                          ;  Flag Register Bit Fields
    28                          ;----------------------------
    29  00C0                    FLAG_PGMODE_MASK:  equ 0C0h     ; Paging control for > 256 bytes of RAM
    30  0000                    FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
    31  0040                    FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
    32  0080                    FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
    33  00C0                    FLAG_PGMODE_3:     equ 0C0h       ; Direct to CUR_PP page, indexed to STK_PP page
    34  0000                    FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
    35  0040                    FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
    36  0080                    FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
    37  00C0                    FLAG_PGMODE_11b:   equ 0C0h       ; Same as PGMODE_3
    38  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    39  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    40  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    41  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    42  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    43                          
    44                          
    45                          ;;=============================================================================
    46                          ;;      Register Space, Bank 0
    47                          ;;=============================================================================
    48                          
    49                          ;------------------------------------------------
    50                          ;  Port Registers
    51                          ;  Note: Also see this address range in Bank 1.
    52                          ;------------------------------------------------
    53                          ; Port 0
    54  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    55  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    56  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    57  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    58                          ; Port 1
    59  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    60  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    61  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    62  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    63                          ; Port 2
    64  0008                    PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
    65  0009                    PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
    66  000A                    PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
    67  000B                    PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
    68                          ; Port 3
    69  000C                    PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
    70  000D                    PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
    71  000E                    PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
    72  000F                    PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
    73                          ; Port 4
    74  0010                    PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
    75  0011                    PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
    76  0012                    PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
    77  0013                    PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
    78                          
    79                          ;------------------------------------------------
    80                          ;  Digital PSoC(tm) block Registers
    81                          ;  Note: Also see this address range in Bank 1.
    82                          ;------------------------------------------------
    83                          ; Digital PSoC block 00, Basic Type C
    84  0020                    DBC00DR0:     equ 20h          ; data register 0                          (#)
    85  0021                    DBC00DR1:     equ 21h          ; data register 1                          (W)
    86  0022                    DBC00DR2:     equ 22h          ; data register 2                          (RW)
    87  0023                    DBC00CR0:     equ 23h          ; control & status register 0              (#)
    88                          
    89                          ; Digital PSoC block 01, Basic Type C
    90  0024                    DBC01DR0:     equ 24h          ; data register 0                          (#)
    91  0025                    DBC01DR1:     equ 25h          ; data register 1                          (W)
    92  0026                    DBC01DR2:     equ 26h          ; data register 2                          (RW)
    93  0027                    DBC01CR0:     equ 27h          ; control & status register 0              (#)
    94                          
    95                          ; Digital PSoC block 02, Communications Type C
    96  0028                    DCC02DR0:     equ 28h          ; data register 0                          (#)
    97  0029                    DCC02DR1:     equ 29h          ; data register 1                          (W)
    98  002A                    DCC02DR2:     equ 2Ah          ; data register 2                          (RW)
    99  002B                    DCC02CR0:     equ 2Bh          ; control & status register 0              (#)
   100                          
   101                          ; Digital PSoC block 03, Communications Type C
   102  002C                    DCC03DR0:     equ 2Ch          ; data register 0                          (#)
   103  002D                    DCC03DR1:     equ 2Dh          ; data register 1                          (W)
   104  002E                    DCC03DR2:     equ 2Eh          ; data register 2                          (RW)
   105  002F                    DCC03CR0:     equ 2Fh          ; control & status register 0              (#)
   106                          
   107                          ; Digital PSoC block 10, Basic Type C
   108  0030                    DBC10DR0:     equ 30h          ; data register 0                          (#)
   109  0031                    DBC10DR1:     equ 31h          ; data register 1                          (W)
   110  0032                    DBC10DR2:     equ 32h          ; data register 2                          (RW)
   111  0033                    DBC10CR0:     equ 33h          ; control & status register 0              (#)
   112                          
   113                          ; Digital PSoC block 11, Basic Type C
   114  0034                    DBC11DR0:     equ 34h          ; data register 0                          (#)
   115  0035                    DBC11DR1:     equ 35h          ; data register 1                          (W)
   116  0036                    DBC11DR2:     equ 36h          ; data register 2                          (RW)
   117  0037                    DBC11CR0:     equ 37h          ; control & status register 0              (#)
   118                          
   119                          ; Digital PSoC block 12, Communications Type C
   120  0038                    DCC12DR0:     equ 38h          ; data register 0                          (#)
   121  0039                    DCC12DR1:     equ 39h          ; data register 1                          (W)
   122  003A                    DCC12DR2:     equ 3Ah          ; data register 2                          (RW)
   123  003B                    DCC12CR0:     equ 3Bh          ; control & status register 0              (#)
   124                          
   125                          ; Digital PSoC block 13, Communications Type C
   126  003C                    DCC13DR0:     equ 3Ch          ; data register 0                          (#)
   127  003D                    DCC13DR1:     equ 3Dh          ; data register 1                          (W)
   128  003E                    DCC13DR2:     equ 3Eh          ; data register 2                          (RW)
   129  003F                    DCC13CR0:     equ 3Fh          ; control & status register 0              (#)
   130                          
   131                          ;-------------------------------------
   132                          ;  Analog Control Registers
   133                          ;-------------------------------------
   134  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
   135  00C0                    AMX_IN_ACI3:          equ C0h    ; MASK: column 3 input mux
   136  0030                    AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
   137  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
   138  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
   139                          
   140  0061                    AMUX_CFG:      equ 61h          ; Analog MUX Configuration
   141  0030                    AMUX_CFG_INTCAP:       equ 30h    ;
   142  000E                    AMUX_CFG_MUXCLK:  	  equ 0Eh	 ;
   143  0001                    AMUX_CFG_EN:		  	  equ 01h	 ;
   144                          
   145                          ; old declarations DO NOT USE
   146  0061                    AMUXCFG:      equ 61h          ; Analog MUX Configuration
   147  0030                    AMUXCFG_INTCAP:       equ 30h    ;
   148  000E                    AMUXCFG_MUXCLK:  	  equ 0Eh	 ;
   149  0001                    AMUXCFG_EN:		  	  equ 01h	 ;
   150                          
   151  0062                    PWM_CR:       equ 62h          ; Pulse-Width Modulator Control
   152  0038                    PWM_CR_HIGH:          equ 38h    ; MASK: PWM high time
   153  0006                    PWM_CR_LOW:           equ 06h	 ; MASK: PWM low time
   154  0001                    PWM_CR_EN:            equ 01h	 ; MASK: Enable/Disable PWM function
   155                          
   156  0063                    ARF_CR:       equ 63h          ; Analog Reference Control
   157                          
   158  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus Register           (#)
   159  0080                    CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
   160  0040                    CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
   161  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
   162  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
   163  0008                    CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
   164  0004                    CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
   165  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
   166  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   167                          
   168  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   169  0020                    CMP_CR1_CLDIS1:       equ 20h    ; MASK: Column 1 comparator output latch
   170  0010                    CMP_CR1_CLDIS0:	      equ 10h    ; MASK: Column 0 comparator output latch
   171                          
   172  0068                    ADC0_CR:      equ 68h          ; Analog Column 0 Configuration
   173  0080                    ADC0_CR_CMPST:        equ 80h    ;
   174  0040                    ADC0_CR_LOREN:        equ 40h    ;
   175  0020                    ADC0_CR_SHEN:         equ 20h    ;
   176  0008                    ADC0_CR_CBSRC:        equ 08h    ;
   177  0004                    ADC0_CR_ADCM:         equ 04h    ;
   178  0001                    ADC0_CR_EN:	          equ 01h    ;
   179                          
   180  0069                    ADC1_CR:      equ 69h          ; Analog Column 1 Configuration
   181  0080                    ADC1_CR_CMPST:        equ 80h    ;
   182  0040                    ADC1_CR_LOREN:        equ 40h    ;
   183  0020                    ADC1_CR_SHEN:         equ 20h    ;
   184  0008                    ADC1_CR_CBSRC:        equ 08h    ;
   185  0004                    ADC1_CR_ADCM:         equ 04h    ;
   186  0001                    ADC1_CR_EN:	          equ 01h    ;
   187                          
   188                          ; Continuous Time PSoC block Type E Row 0 Col 0
   189  0072                    ACE00CR1:     equ 72h          ; Control register 1                       (RW)
   190  0073                    ACE00CR2:     equ 73h          ; Control register 2                       (RW)
   191                          
   192                          ; Continuous Time PSoC block Type E Row 0 Col 1
   193  0076                    ACE01CR1:     equ 76h          ; Control register 1                       (RW)
   194  0077                    ACE01CR2:     equ 77h          ; Control register 2                       (RW)
   195                          
   196                          ; Switched Cap PSoC blockType E Row 1 Col 0
   197  0080                    ASE10CR0:     equ 80h          ; Control register 0                       (RW)
   198                          
   199                          ; Switched Cap PSoC blockType E Row 1 Col 1
   200  0084                    ASE11CR0:     equ 84h          ; Control register 0                       (RW)
   201                          
   202                          ;-----------------------------------------------
   203                          ;  Global General Purpose Data Registers
   204                          ;-----------------------------------------------
   205  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   206  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   207  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   208  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   209                          
   210                          ;------------------------------------------------
   211                          ;  Row Digital Interconnects
   212                          ;
   213                          ;  Note: the following registers are mapped into
   214                          ;  both register bank 0 AND register bank 1.
   215                          ;------------------------------------------------
   216                          
   217  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   218  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   219  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   220  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   221  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   222  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   223  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   224                          
   225  00B8                    RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
   226  00B9                    RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
   227  00BA                    RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
   228  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   229  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   230  00BD                    RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
   231  00BE                    RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
   232                          
   233                          ;-----------------------------------------------
   234                          ;  Ram Page Pointers
   235                          ;-----------------------------------------------
   236  00D0                    CUR_PP:      equ 0D0h           ; Current   Page Pointer
   237  00D1                    STK_PP:      equ 0D1h           ; Stack     Page Pointer
   238  00D3                    IDX_PP:      equ 0D3h           ; Index     Page Pointer
   239  00D4                    MVR_PP:      equ 0D4h           ; MVI Read  Page Pointer
   240  00D5                    MVW_PP:      equ 0D5h           ; MVI Write Page Pointer
   241                          
   242                          ;------------------------------------------------
   243                          ;  I2C Configuration Registers
   244                          ;------------------------------------------------
   245  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   246  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   247  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   248  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   249  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   250  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   251  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   252  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   253  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   254  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   255                          
   256  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   257  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   258  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   259  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   260  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   261  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   262  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   263  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   264  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   265                          
   266  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   267                          
   268  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   269  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   270  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   271  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   272  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   273                          
   274                          ;------------------------------------------------
   275                          ;  System and Global Resource Registers
   276                          ;------------------------------------------------
   277  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   278                                                         ; Use INT_MSK0 bit field masks
   279  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   280                                                         ; Use INT_MSK1 bit field masks
   281  00DC                    INT_CLR2:     equ 0DCh          ; Interrupt Clear Register 2               (RW)
   282                                                         ; Use INT_MSK2 bit field masks
   283  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   284                                                         ; Use INT_MSK3 bit field masks
   285                          
   286  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   287  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   288  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   289                          
   290  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   291  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   292  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   293  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   294  0010                    INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
   295  0008                    INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
   296  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   297  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   298  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   299                          
   300  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   301  0080                    INT_MSK1_DCC13:            equ 80h ; MASK: enable/disable DCC13 block interrupt
   302  0040                    INT_MSK1_DCC12:            equ 40h ; MASK: enable/disable DCC12 block interrupt
   303  0020                    INT_MSK1_DBC11:            equ 20h ; MASK: enable/disable DBC11 block interrupt
   304  0010                    INT_MSK1_DBC10:            equ 10h ; MASK: enable/disable DBC10 block interrupt
   305  0008                    INT_MSK1_DCC03:            equ 08h ; MASK: enable/disable DCC03 block interrupt
   306  0004                    INT_MSK1_DCC02:            equ 04h ; MASK: enable/disable DCC02 block interrupt
   307+ 0002                    INT_MSK1_DBC01:            equ 02h ; MASK: enable/disable DBC01 block interrupt
   308  0001                    INT_MSK1_DBC00:            equ 01h ; MASK: enable/disable DBC00 block interrupt
   309                          
   310  00DF                    INT_MSK2:     equ DFh			; Custom block Mask Register			   (RW)
   311  0010                    INT_MSK2_SARADC:           equ 10h ; MASK: enable/disable SARADC block interrupt
   312  0020                    INT_MSK2_CSD0:             equ 20h ; MASK: enable/disable CSD0 block interrupt
   313  0040                    INT_MSK2_CSD1:             equ 40h ; MASK: enable/disable CSD1 block interrupt
   314  0080                    INT_MSK2_RTC:              equ 80h ; MASK: enable/disable RTC block interrupt
   315                          
   316  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   317  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   318                          
   319                          ;------------------------------------------------------
   320                          ;  MAC Registers
   321                          ;------------------------------------------------------
   322                          
   323  00E8                    MUL0_X:       equ 0E8h          ; Multiply Input X Register                (W)
   324  00E9                    MUL0_Y:       equ 0E9h          ; Multiply Input Y Register                (W)
   325  00EA                    MUL0_DH:      equ 0EAh          ; Multiply Result High Byte Register       (R)
   326  00EB                    MUL0_DL:      equ 0EBh          ; Multiply Result Low Byte Register        (R)
   327                          
   328  00EC                    ACC0_DR1:     equ 0ECh          ; Accumulator Data Register 1              (RW)
   329  00ED                    ACC0_DR0:     equ 0EDh          ; Accumulator Data Register 0              (RW)
   330  00EE                    ACC0_DR3:     equ 0EEh          ; Accumulator Data Register 3              (RW)
   331+ 00EF                    ACC0_DR2:     equ 0EFh          ; Accumulator Data Register 2              (RW)
   332+                         
   333+                         ; DECIMATOR Control Registers
   334+ 00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   335  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   336                          
   337                          ;------------------------------------------------------
   338                          ;  System Status and Control Registers
   339                          ;
   340                          ;  Note: The following registers are mapped into both
   341                          ;        register bank 0 AND register bank 1.
   342                          ;------------------------------------------------------
   343  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   344                                                             ; Use FLAG_ masks defined at top of file
   345                          
   346  00FD                    DAC_D:        equ 0FDh		   ; DAC Data Register                        (RW)
   347                          
   348  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   349  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: flag, Internal Reset Status bit
   350  0010                    CPU_SCR1_SLIMO:         equ 10h	   ; MASK: Slow IMO (internal main osc) enable
   351  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   352  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   353  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   354                          
   355  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   356  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   357  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   358  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   359  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   360  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   361                          
   362                          ;------------------------------------------------------
   363                          ;  Neon Capsense Digital Control Registers
   364                          ;------------------------------------------------------
   365  0050                    CSD0_DR0_L:				equ 50h		; Capsense 0 data low 0				(RW)
   366  0054                    CSD0_DR0_H:				equ 54h		; Capsense 0 data high 0			(RW)
   367  0058                    CSD1_DR0_L:				equ 58h		; Capsense 1 data low 0				(RW)
   368  005C                    CSD1_DR0_H:				equ 5Ch		; Capsense 1 data high 0			(RW)
   369  0051                    CSD0_DR1_L:				equ 51h		; Capsense 0 data low 1				(RW)
   370  0055                    CSD0_DR1_H:				equ 55h		; Capsense 0 data high 1			(RW)
   371  0059                    CSD1_DR1_L:				equ 59h		; Capsense 1 data low 1				(RW)
   372  005D                    CSD1_DR1_H:				equ 5Dh		; Capsense 1 data high 1			(RW)
   373  0052                    CSD0_CNT_L:				equ 52h		; Capsense 0 counter low			(RW)
   374  0056                    CSD0_CNT_H:				equ 56h		; Capsense 0 counter high			(RW)
   375  005A                    CSD1_CNT_L:				equ 5Ah		; Capsense 1 counter low			(RW)
   376  005E                    CSD1_CNT_H:				equ	5Eh		; Capsense 1 counter high			(RW)
   377  0053                    CSD0_CR0:				equ 53h		; Capsense 0 control 0				(RW)
   378  005B                    CSD1_CR0:				equ 5Bh		; Capsense 1 control 0				(RW)
   379  0057                    CSD0_CR1:				equ 57h		; Capsense 0 control 1				(RW)
   380  005F                    CSD1_CR1:				equ 5Fh		; Capsense 1 control 1				(RW)
   381                          
   382                          ;------------------------------------------------------
   383                          ;  Neon Analog Registers
   384                          ;------------------------------------------------------
   385  0065                    ASY_CR:					equ 65h		; Analog Synchronization Control	(RW)
   386  006A                    ADC_DH:					equ 6Ah		; ADC data high						(RW)
   387  006B                    ADC_DL:					equ 6Bh		; ADC data low						(RW)
   388  00C8                    PWMVREF0:				equ C8h		; PWM Voltage Reference 0			(RW)
   389  00C9                    PWMVREF1:				equ C9h		; PWM Voltage Reference 1			(RW)
   390  00CB                    PWMSRC:					equ CBh		; PWM Source						(RW)
   391  00CA                    IDACMODE:				equ CAh		; IDAC Mode							(RW)
   392  00FC                    IDACR_D:				equ FCh		; Analog Mux DAC data 0				(RW)
   393  00FD                    IDACL_D:				equ FDh		; Analog Mux DAC data 1				(RW)
   394                          
   395                          ;------------------------------------------------------
   396                          ;  Neon Digital Registers
   397                          ;------------------------------------------------------
   398  00B7                    RDI0DSM:				equ B7h		; Row Digital Interconnect input select 0	(RW)
   399  00BF                    RDI1DSM:				equ BFh		; Row Digital Interconnect input select 1	(RW)
   400                          
   401                          ;------------------------------------------------------
   402                          ;  Neon Test Registers
   403                          ;------------------------------------------------------
   404  00CC                    TSCR0:					equ CCh		; Tsource 0							(RW)
   405  00CD                    TSCMPH:					equ CDh		; TSCMP high						(RW)
   406  00CE                    TSCMPL:					equ CEh		; TSCMP low							(RW)
   407  00CF                    TSCR1:					equ CFh		; Tsource 1							(RW)
   408                          
   409                          ;;=============================================================================
   410                          ;;      Register Space, Bank 1
   411                          ;;=============================================================================
   412                          
   413                          ;------------------------------------------------
   414                          ;  Port Registers
   415                          ;  Note: Also see this address range in Bank 0.
   416                          ;------------------------------------------------
   417                          ; Port 0
   418  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   419  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   420  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   421  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   422                          
   423                          ; Port 1
   424  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   425  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   426  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   427  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   428                          
   429                          ; Port 2
   430  0008                    PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
   431  0009                    PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
   432  000A                    PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
   433  000B                    PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
   434                          
   435                          ; Port 3
   436  000C                    PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
   437  000D                    PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
   438  000E                    PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
   439  000F                    PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
   440                          
   441                          ; Port 4
   442  0010                    PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
   443  0011                    PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
   444  0012                    PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
   445  0013                    PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
   446                          
   447                          ;------------------------------------------------
   448                          ;  Digital PSoC(tm) block Registers
   449                          ;  Note: Also see this address range in Bank 0.
   450                          ;------------------------------------------------
   451                          
   452                          ; Digital PSoC block 00, Basic Type C
   453  0020                    DBC00FN:      equ 20h          ; Function Register                        (RW)
   454  0021                    DBC00IN:      equ 21h          ;    Input Register                        (RW)
   455  0022                    DBC00OU:      equ 22h          ;   Output Register                        (RW)
   456  0023                    DBC00CR1:     equ 23h          ;   control & status register 1            (RW)
   457                          
   458                          ; Digital PSoC block 01, Basic Type C
   459  0024                    DBC01FN:      equ 24h          ; Function Register                        (RW)
   460  0025                    DBC01IN:      equ 25h          ;    Input Register                        (RW)
   461  0026                    DBC01OU:      equ 26h          ;   Output Register                        (RW)
   462  0027                    DBC01CR1:     equ 27h          ;   control & status register 1            (RW)
   463                          
   464                          ; Digital PSoC block 02, Communications Type C
   465  0028                    DCC02FN:      equ 28h          ; Function Register                        (RW)
   466  0029                    DCC02IN:      equ 29h          ;    Input Register                        (RW)
   467  002A                    DCC02OU:      equ 2Ah          ;   Output Register                        (RW)
   468  002B                    DBC02CR1:     equ 2Bh          ;   control & status register 1            (RW)
   469                          
   470                          ; Digital PSoC block 03, Communications Type C
   471  002C                    DCC03FN:      equ 2Ch          ; Function Register                        (RW)
   472  002D                    DCC03IN:      equ 2Dh          ;    Input Register                        (RW)
   473  002E                    DCC03OU:      equ 2Eh          ;   Output Register                        (RW)
   474  0029                    DBC03CR1:     equ 29h          ;   control & status register 1            (RW)
   475                          
   476                          ; Digital PSoC block 10, Basic Type C
   477  0030                    DBC10FN:      equ 30h          ; Function Register                        (RW)
   478  0031                    DBC10IN:      equ 31h          ;    Input Register                        (RW)
   479  0032                    DBC10OU:      equ 32h          ;   Output Register                        (RW)
   480  0033                    DBC10CR1:     equ 33h          ;   control & status register 1            (RW)
   481                          
   482                          ; Digital PSoC block 11, Basic Type C
   483  0034                    DBC11FN:      equ 34h          ; Function Register                        (RW)
   484  0035                    DBC11IN:      equ 35h          ;    Input Register                        (RW)
   485  0036                    DBC11OU:      equ 36h          ;   Output Register                        (RW)
   486  0037                    DBC11CR1:     equ 37h          ;   control & status register 1            (RW)
   487                          
   488                          ; Digital PSoC block 12, Communications Type C
   489  0038                    DCC12FN:      equ 38h          ; Function Register                        (RW)
   490  0039                    DCC12IN:      equ 39h          ;    Input Register                        (RW)
   491  003A                    DCC12OU:      equ 3Ah          ;   Output Register                        (RW)
   492  003B                    DBC12CR1:     equ 3Bh          ;   control & status register 1            (RW)
   493                          
   494                          ; Digital PSoC block 13, Communications Type C
   495  003C                    DCC13FN:      equ 3Ch          ; Function Register                        (RW)
   496  003D                    DCC13IN:      equ 3Dh          ;    Input Register                        (RW)
   497  003E                    DCC13OU:      equ 3Eh          ;   Output Register                        (RW)
   498  003F                    DBC13CR1:     equ 3Fh          ;   control & status register 1            (RW)
   499                          
   500                          ;------------------------------------------------
   501                          ;  System and Global Resource Registers
   502                          ;  Note: Also see this address range in Bank 0.
   503                          ;------------------------------------------------
   504                          
   505  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   506  00C0                    CLK_CR0_ACOLUMN_3:    equ C0h    ; MASK: Specify clock for analog cloumn
   507  0030                    CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
   508  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   509  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   510                          
   511  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   512  0018                    CLK_CR1_ACLK1:        equ 18h    ; MASK: Digital PSoC block for analog source
   513  0003                    CLK_CR1_ACLK0:        equ 03h    ; MASK: Digital PSoC block for analog source
   514                          
   515  0003                    CLK_CR1_ACLK2:        equ 03h    ; Deprecated do not use
   516                          
   517  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   518  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   519                          
   520  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   521  000F                    AMD_CR0_AMOD0:        equ 0Fh    ; MASK: Modulation source for analog column 0
   522                          
   523  0064                    CMP_GO_EN:    equ 64h          ; Comparator Bus To Global Out Enable      (RW)
   524  0080                    CMP_GO_EN_GOO5:       equ 80h    ; MASK: Selected Col 1 signal to GOO5
   525  0040                    CMP_GO_EN_GOO1:       equ 40h    ; MASK: Selected Col 1 signal to GOO1
   526  0030                    CMP_GO_EN_SEL1:       equ 30h    ; MASK: Column 1 Signal Select
   527  0008                    CMP_GO_EN_GOO4:       equ 08h    ; MASK: Selected Col 0 signal to GOO4
   528  0004                    CMP_GO_EN_GOO0:       equ 04h    ; MASK: Selected Col 0 signal to GOO0
   529  0003                    CMP_GO_EN_SEL0:       equ 03h    ; MASK: Column 0 Signal Select
   530                          
   531  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   532  000F                    AMD_CR1_AMOD1:        equ 0Fh    ; MASK: Modulation ctrl for analog column 1
   533                          
   534  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   535  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   536  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   537                          
   538  006B                    CLK_CR3:      equ 6Bh          ; Analog Clock Source Control Register 3   (RW)
   539  0040                    CLK_CR3_SYS1:         equ 40h    ; MASK: Analog Clock 1 selection
   540  0030                    CLK_CR3_DIVCLK1:      equ 30h    ; MASK: Analog Clock 1 divider
   541  0004                    CLK_CR3_SYS0:         equ 04h    ; MASK: Analog Clock 0 selection
   542  0003                    CLK_CR3_DIVCLK0:      equ 03h    ; MASK: Analog Clock 0 divider
   543                          
   544                          ;------------------------------------------------
   545                          ;  Global Digital Interconnects
   546                          ;------------------------------------------------
   547                          
   548  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   549  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   550  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   551  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   552                          
   553  00A0                    GDI_O_IN_CR:  equ 0A0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   554  00A1                    GDI_E_IN_CR:  equ 0A1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   555  00A2                    GDI_O_OU_CR:  equ 0A2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   556  00A3                    GDI_E_OU_CR:  equ 0A3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   557                          
   558  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   559  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   560                          
   561                          ;------------------------------------------------
   562                          ;  Analog Mux Bus Port Enable Bits
   563                          ;------------------------------------------------
   564  00D8                    MUX_CR0:      equ 0D8h          ; Analog Mux Port 0 Bit Enables Register
   565  00D9                    MUX_CR1:      equ 0D9h          ; Analog Mux Port 1 Bit Enables Register
   566  00DA                    MUX_CR2:      equ 0DAh          ; Analog Mux Port 2 Bit Enables Register
   567  00DB                    MUX_CR3:      equ 0DBh          ; Analog Mux Port 3 Bit Enables Register
   568  00EC                    MUX_CR4:      equ 0ECh          ; Analog Mux Port 4 Bit Enables Register
   569                          
   570                          ;------------------------------------------------
   571                          ;  Clock and System Control Registers
   572                          ;------------------------------------------------
   573                          
   574  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   575  0080                    OSC_GO_EN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   576  0040                    OSC_GO_EN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   577  0020                    OSC_GO_EN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   578  0010                    OSC_GO_EN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   579  0008                    OSC_GO_EN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   580  0004                    OSC_GO_EN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   581  0002                    OSC_GO_EN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   582  0001                    OSC_GO_EN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   583                          
   584  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   585  0003                    OSC_CR4_VC3SEL:       equ 03h    ; MASK: System VC3 Clock source
   586                          
   587  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   588                          
   589  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   590  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   591  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   592  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   593  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   594  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   595  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   596  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   597  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   598  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   599  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   600  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   601  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   602  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   603  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   604  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   605  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   606  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   607                          
   608  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   609  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   610  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   611                          
   612  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   613  0080                    OSC_CR2_PLLGAIN:      equ 80h    ; MASK: High/Low gain
   614  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   615  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   616  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   617                          
   618  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   619  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   620  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   621  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   622  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   623  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   624  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   625  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   626                          
   627  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   628  0008                    VLT_CMP_NOWRITE:      equ 08h    ; MASK: Vcc below Flash Write level
   629  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   630  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   631  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   632                          
   633  00E5                    ADC0_TR:      equ 0E5h          ; ADC Column 0 Trim Register
   634  00E6                    ADC1_TR:      equ 0E6h          ; ADC Column 1 Trim Register
   635                          
   636  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   637  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   638  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   639  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   640                          
   641  00FA                    FLS_PR1:      equ 0FAh          ; Flash Program Register 1                 (RW)
   642  0003                    FLS_PR1_BANK:         equ 03h    ; MASK: Select Active Flash Bank
   643                          
   644  00FD                    DAC_CR0:       equ 0FDh          ; Analog Mux DAC Control Register 0
   645  00DC                    DAC_CR1:       equ 0DCh          ; Analog Mux DAC Control Register 1
   646  0008                    DAC_CR_IRANGE:        equ 08h    ; MASK: Sets the DAC Range low or high
   647  0006                    DAC_CR_OSCMODE:       equ 06h    ; MASK: Defines the reset mode for AMux
   648  0001                    DAC_CR_ENABLE:        equ 01h    ; MASK: Enable/Disable DAC function
   649                          
   650                          ;------------------------------------------------
   651                          ;  I2C Control Registers
   652                          ;------------------------------------------------
   653                          
   654  00AD                    I2C_ADDR:    equ 0ADh          ; I2C Address Register (RW)
   655                          
   656                          ;------------------------------------------------------
   657                          ;  Neon Analog Registers
   658                          ;------------------------------------------------------
   659  0053                    VDAC50CR0:		equ 53h			; V DAC5 control 0				(RW)
   660  0057                    VDAC51CR0:		equ 57h			; V DAC5 control 1				(RW)
   661  00A8                    ADC_CR0:		equ A8h			; ADC control 0					(RW)
   662  00A9                    ADC_CR1:		equ A9h			; ADC control 1					(RW)
   663  00AA                    ADC_CR2:		equ AAh			; ADC control 2					(RW)
   664  00AB                    ADC_CR3TRIM:	equ ABh			; ADC control 3					(RW)
   665  00AC                    ADC_CR4:		equ ACh			; ADC control 4					(RW)
   666  00E7                    VDAC_TRIM:		equ E7h			; V DAC trim					(RW)
   667                          
   668                          ;------------------------------------------------------
   669                          ;  Neon Current Sense CMP Registers
   670                          ;------------------------------------------------------
   671  0050                    CMP0CR1:		equ 50h			; CMP0 control 1				(RW)
   672  0051                    CMP0CR2:		equ 51h			; CMP0 control 2				(RW)
   673  0054                    CMP1CR1:		equ 54h			; CMP1 control 1				(RW)
   674  0055                    CMP1CR2:		equ 55h			; CMP1 control 2				(RW)
   675  0058                    CSCMPCR0:		equ 58h			; CSCMP control 0				(RW)
   676  0059                    CSCMPGOEN:		equ 59h			; CSCMO global out enable		(RW)
   677  005A                    CSLUTCR0:		equ 5Ah			; CSLUT control 0				(RW)
   678  005B                    CMPCOLMUX:		equ 5Bh			; CMP Column Mux				(RW)
   679  005C                    CMPPWMCR:		equ 5Ch			; CMP PWM control				(RW)
   680  005D                    CMPFLTCR:		equ 5Dh			; CMP filter control			(RW)
   681  005E                    CMPCLK1:		equ 5Eh			; CMP clock 1					(RW)
   682  005F                    CMPCLK0:		equ 5Fh			; CMP clock 0					(RW)
   683                          
   684                          ;------------------------------------------------------
   685                          ;  Neon Real Time Clock Registers
   686                          ;------------------------------------------------------
   687  00A4                    RTCH:			equ A4h			; Real time current hour		(RW)
   688  00A5                    RTCM:			equ A5h			; Real time current minute		(RW)
   689  00A6                    RTCS:			equ A6h			; Real time current second		(RW)
   690  00A7                    RTCCR:			equ A7h			; Real time clock control		(RW)
   691                          
   692                          ;------------------------------------------------------
   693                          ;  Analog MUX Config Registers
   694                          ;------------------------------------------------------
   695                          
   696  006A                    AMUX_CFG1:			equ 6Ah  ; Analog MUX Configuration 1
   697  0020                    AMUX_CFG1_GOINVR:	equ 20h  ;
   698  0010                    AMUX_CFG1_GOINVL:  	equ 10h	 ;
   699  000C                    AMUX_CFG1_AMUXMODR:	equ 0Ch	 ;
   700  0003                    AMUX_CFG1_AMUXMODL:	equ 03h	 ;
   701                          
   702                          ;;=============================================================================
   703                          ;;      M8C System Macros
   704                          ;;  These macros should be used when their functions are needed.
   705                          ;;=============================================================================
   706                          
   707                          ;----------------------------------------------------
   708                          ;  Swapping Register Banks
   709                          ;----------------------------------------------------
   710                              macro M8C_SetBank0
   711                              and   F, ~FLAG_XIO_MASK
   712  3C41                        endm
   713                          
   714                              macro M8C_SetBank1
   715                              or    F, FLAG_XIO_MASK
   716  3C41                        endm
   717                          
   718                          ;----------------------------------------------------
   719                          ;  Global Interrupt Enable/Disable
   720                          ;----------------------------------------------------
   721                              macro M8C_EnableGInt
   722                              or    F, FLAG_GLOBAL_IE
   723  3C41                        endm
   724                          
   725                              macro M8C_DisableGInt
   726                              and   F, ~FLAG_GLOBAL_IE
   727  3C41                        endm
   728                          
   729                          ;----------------------------------------------------
   730                          ;  Enable/Disable Interrupt Mask
   731                          ;
   732                          ;  Use the following macros to enable/disable
   733                          ;  bits in the Interrupt mask registers,
   734                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   735                          ;
   736                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   737                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   738                          ;
   739                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   740                          ;        and MASK is the bit set to enable or disable
   741                          ;----------------------------------------------------
   742                          ; Disable Interrupt Bit Mask(s)
   743                              macro M8C_DisableIntMask
   744                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   745  3C41                        endm
   746                          
   747                          ; Enable Interrupt Bit Mask(s)
   748                              macro M8C_EnableIntMask
   749                              or    reg[@0], @1               ; enable specified interrupt enable bit
   750  3C41                        endm
   751                          
   752                          ;----------------------------------------------------
   753                          ;  Clear Posted Interrupt Flag Mask
   754                          ;
   755                          ;  Use the following macros to clear the
   756                          ;  bits in the Interrupt Clear registers,
   757                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   758                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   759                          ;
   760                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   761                          ;        and MASK is the bit set to enable or disable
   762                          ;----------------------------------------------------
   763                              macro M8C_ClearIntFlag
   764                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   765  3C41                        endm
   766                          
   767                          ;----------------------------------------------------
   768                          ;  Power-On Reset & WatchDog Timer Functions
   769                          ;----------------------------------------------------
   770                              macro M8C_EnableWatchDog
   771                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   772  3C41                        endm
   773                          
   774                              macro M8C_ClearWDT
   775                              mov   reg[RES_WDT], 00h
   776  3C41                        endm
   777                          
   778                              macro M8C_ClearWDTAndSleep
   779                              mov   reg[RES_WDT], 38h
   780  3C41                        endm
   781                          
   782                          ;----------------------------------------------------
   783                          ;  Sleep, CPU Stop & Software Reset
   784                          ;----------------------------------------------------
   785                              macro M8C_Sleep
   786                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   787                              ; The next instruction to be executed depends on the state of the
   788                              ; various interrupt enable bits. If some interrupts are enabled
   789                              ; and the global interrupts are disabled, the next instruction will
   790                              ; be the one that follows the invocation of this macro. If global
   791                              ; interrupts are also enabled then the next instruction will be
   792                              ; from the interrupt vector table. If no interrupts are enabled
   793                              ; then the CPU sleeps forever.
   794  3C41                        endm
   795                          
   796                              macro M8C_Stop
   797                              ; In general, you probably don't want to do this, but here's how:
   798                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   799                              ; Next instruction to be executed is located in the interrupt
   800                              ; vector table entry for Power-On Reset.
   801  3C41                        endm
   802                          
   803                              macro M8C_Reset
   804                              ; Restore CPU to the power-on reset state.
   805                              mov A, 0
   806                              SSC
   807                              ; Next non-supervisor instruction will be at interrupt vector 0.
   808  3C41                        endm
   809                          
   810                          ;----------------------------------------------------
   811                          ; ImageCraft Code Compressor Actions
   812                          ;----------------------------------------------------
   813                              ; Suspend Code Compressor
   814                              ; Must not span a RET or RETI instruction
   815                              ; without resuming code compression
   816                              macro Suspend_CodeCompressor
   817                              or   F, 0
   818  3C41                        endm
   819                          
   820                              ; Resume Code Compression
   821                              macro Resume_CodeCompressor
   822                              add  SP, 0
   823                              endm
      + 3C41                    
      + 3C41                    ; end of file m8c.inc
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;
     4                          ;;       FILENAME: Memory.inc
     5                          ;;
     6                          ;;    DESCRIPTION: Memory Model and Stack Parameter Definitions for 
     7                          ;;                 CY8C22045 PSoC devices.
     8                          ;;
     9                          ;;  LAST MODIFIED: August 17, 2004
    10                          ;;
    11                          ;;-----------------------------------------------------------------------------
    12                          ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
    13                          ;;*****************************************************************************
    14                          ;;*****************************************************************************
    15                          ;
    16                          ;
    17                          ;  ******** Define Memory Model and Stack parameters ********
    18                          ;
    19  0001                    IMAGECRAFT: equ 1   
    20  0002                    HITECH: equ 2   
    21  0002                    TOOLCHAIN: equ HITECH   
    22  0001                    SYSTEM_LARGE_MEMORY_MODEL: equ 1   
    23  0000                    SYSTEM_SMALL_MEMORY_MODEL: equ 0   
    24  0003                    SYSTEM_STACK_PAGE: equ 3   
    25  0000                    SYSTEM_STACK_PAGE_OFFSET: equ 0   
    26  0002                    SYSTEM_TOOLS: equ 2   
    27  0000                    SYSTEM_IDXPG_TRACKS_STK_PP: equ 0   
    28  0001                    SYSTEM_IDXPG_TRACKS_IDX_PP: equ 1   
    29  0000                    SYSTEM_MULTIPAGE_STACK: equ 0 
    30                          
    31                          
    32                          ;  ******* Function Class Definitions *******
    33                          ;
    34                          ;  These definitions are used to describe RAM access patterns. They provide
    35                          ;  documentation and they control prologue and epilogue macros that perform
    36                          ;  the necessary housekeeping functions for large memory model devices like
    37                          ;  the CY8C22045.
    38                          
    39  0001                    RAM_USE_CLASS_1:               equ 1   ; PUSH, POP & I/O access
    40  0002                    RAM_USE_CLASS_2:               equ 2   ; Indexed address mode on stack page
    41  0004                    RAM_USE_CLASS_3:               equ 4   ; Indexed address mode to any page
    42  0008                    RAM_USE_CLASS_4:               equ 8   ; Direct/Indirect address mode access
    43                          
    44                          ; ******* Hi Tech Specific *******
    45                          ; Turn on the expansion of all macros by default
    46                          IF (TOOLCHAIN & HITECH)
    47                          OPT EXPAND
    48                          ENDIF
    49                          ; ******* Page Pointer Manipulation Macros *******
    50                          ;
    51                          ;  ******* Page Pointer Manipulation Macros *******
    52                          ;
    53                          ;  Most of the following macros are conditionally compiled so they only
    54                          ;  produce code if the large memory model is selected.
    55                          
    56                             ;-----------------------------------------------
    57                             ;  Set Stack Page Macro
    58                             ;-----------------------------------------------
    59                             ;
    60                             ;  DESC: Modify STK_PP in the large or small memory Models.
    61                             ;
    62                             ; INPUT: Constant (e.g., SYSTEM_STACK_PAGE) that specifies the RAM page on
    63                             ;        which stack operations like PUSH and POP store and retrieve their
    64                             ;        data
    65                             ;
    66                             ;  COST: 8 instruction cycles (in LMM only)
    67                          
    68                             macro RAM_SETPAGE_STK( PG_NUMBER )
    69                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    70                                mov reg[STK_PP], @PG_NUMBER
    71                             ENDIF
    72  3C41                       endm
    73                          
    74                             ;-----------------------------------------------
    75                             ;  Set Current Page Macro
    76                             ;-----------------------------------------------
    77                             ;
    78                             ;  DESC: Modify CUR_PP in the large or small memory Models.
    79                             ;
    80                             ; INPUT: Constant value (e.g., >bFoo) for the RAM page number used in
    81                             ;        calculation of effective direct-mode address operands.
    82                             ;
    83                             ;  COST: 8 instruction cycles (in LMM only)
    84                          
    85                             macro RAM_SETPAGE_CUR( PG_NUMBER )
    86                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    87                                mov reg[CUR_PP], @PG_NUMBER
    88                             ENDIF
    89  3C41                       endm
    90                          
    91                             ;-----------------------------------------------
    92                             ;  Set Index Page Macro
    93                             ;-----------------------------------------------
    94                             ;
    95                             ;  DESC: Modify IDX_PP in the large or small emory Models.
    96                             ;
    97                             ; INPUT: Constant value (e.g., >caFoo) for the RAM page number used in
    98                             ;         calculation of effective index-mode address operands.
    99                             ;
   100                             ;  COST: 8 instruction cycles (in LMM only)
   101                          
   102                             macro RAM_SETPAGE_IDX( PG_NUMBER )
   103                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   104                                mov reg[IDX_PP], @PG_NUMBER
   105                             ENDIF
   106  3C41                       endm
   107                          
   108                             ;-----------------------------------------------
   109                             ;  Set MVI Read Page Macro
   110                             ;-----------------------------------------------
   111                             ;
   112                             ;  DESC: Modify MVR_PP in the large or small memory Models.
   113                             ;
   114                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   115                             ;        calculation of indirect address operands used in the
   116                             ;        "mvi A, [pFoo]" instructions.
   117                             ;
   118                             ;  COST: 8 instruction cycles (in LMM only)
   119                          
   120                             macro RAM_SETPAGE_MVR( PG_NUMBER )
   121                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   122                                mov reg[MVR_PP], @PG_NUMBER
   123                             ENDIF
   124  3C41                       endm
   125                          
   126                             ;-----------------------------------------------
   127                             ;  Set MVI Write Page Macro
   128                             ;-----------------------------------------------
   129                             ;
   130                             ;  DESC: Modify MVW_PP in the large or small memory Models.
   131                             ;
   132                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   133                             ;        calculation of indirect address operands used in the
   134                             ;        "mvi [pFoo], A" instructions.
   135                             ;
   136                             ;  COST: 8 instruction cycles (in LMM only)
   137                          
   138                             macro RAM_SETPAGE_MVW( PG_NUMBER )
   139                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   140                                mov reg[MVW_PP], @PG_NUMBER
   141                             ENDIF
   142  3C41                       endm
   143                          
   144                             ;-----------------------------------------------
   145                             ;  Force Index Page Pointer to Stack Page
   146                             ;-----------------------------------------------
   147                             ;
   148                             ;  DESC: Map index-mode operands onto the stack page by modifying IDX_PP.
   149                             ;        See also RAM_LOCK_INDEX_TO_STACKPAGE.
   150                             ;
   151                             ; INPUT: None
   152                             ;
   153                             ;  COST: 8 instruction cycles (in LMM only)
   154                          
   155                             macro RAM_SETPAGE_IDX2STK
   156                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   157                                IF ( SYSTEM_MULTIPAGE_STACK )
   158                                   mov   A, reg[STK_PP]
   159                                   mov   reg[IDX_PP], A
   160                                ELSE
   161                                   RAM_SETPAGE_IDX SYSTEM_STACK_PAGE
   162                                ENDIF
   163                             ENDIF
   164  3C41                       endm
   165                          
   166                             ;-----------------------------------------------
   167                             ;  Change Memory Mode
   168                             ;-----------------------------------------------
   169                             ;
   170                             ;  DESC: Modify FLAG_PAGEMODE bits in the large and small memory Models.
   171                             ;
   172                             ; INPUT: Constant value for PGMODE bitfield of CPU Flag register, F.
   173                             ;        See FLAG_PGMODE_{x} constants in M8C.INC.
   174                             ;
   175                             ;  COST: 8 instruction cycles (in LMM only)
   176                          
   177                             macro RAM_CHANGE_PAGE_MODE( MODE )
   178                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   179                                and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
   180                                or    F,  FLAG_PGMODE_MASK & @MODE
   181                             ENDIF
   182  3C41                       endm
   183                          
   184                             ;-----------------------------------------------
   185                             ;  Set Large Memory Model Native Paging Mode
   186                             ;-----------------------------------------------
   187                             ;
   188                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   189                             ;        paging mode *IFF* a simple "OR" is guaranteed to work---for
   190                             ;        example, in an ISR, when the PGMODE bits have been cleared
   191                             ;        to zero. If a simple "OR" is not guaranteed to work, use
   192                             ;        the slower RAM_RESTORE_NATIVE_PAGING instead.
   193                             ;
   194                             ; INPUT: none
   195                             ;
   196                             ;  COST: 4 instruction cycles (in LMM only)
   197                          
   198                             macro RAM_SET_NATIVE_PAGING
   199                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   200                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   201                                or    F,  FLAG_PGMODE_11b            ; LMM w/ IndexPage<==>StackPage
   202                             ENDIF ;  PGMODE LOCKED
   203                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   204                                or    F,  FLAG_PGMODE_10b            ; LMM with independent IndexPage
   205                             ENDIF ; PGMODE FREE
   206                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   207  3C41                       endm
   208                          
   209                             ;-----------------------------------------------
   210                             ; Restore Large Memory Model Native Paging Mode
   211                             ;-----------------------------------------------
   212                             ;
   213                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   214                             ;        paging mode. Always works because it clears the PGMODE bits
   215                             ;        before OR-ing in the new ones. See RAM_RESTORE_NATIVE_PAGING
   216                             ;        for a faster method.
   217                             ;
   218                             ; INPUT: none
   219                             ;
   220                             ;  COST: 8 instruction cycles (in LMM only)
   221                          
   222                             macro RAM_RESTORE_NATIVE_PAGING
   223                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   224                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   225                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_11b ; LMM w/ IndexPage<==>StackPage
   226                             ENDIF ;  PGMODE LOCKED
   227                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   228                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b ; LMM with independent IndexPage
   229                             ENDIF ; PGMODE FREE
   230                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   231  3C41                       endm
   232                          
   233                             ;-----------------------------------------------
   234                             ; Force indexed addr mode operands to Stack Pg
   235                             ;-----------------------------------------------
   236                             ;
   237                             ;  DESC: Force instructions that use indexed address mode to reference the
   238                             ;        stack page (as defined by STK_PP). This macro sets the "Indexed
   239                             ;        Stack Mode" bit (LSB) of the PGMODE bit field in the CPU Flag
   240                             ;        register, F. (See also RAM_SETPAGE_IDX2STK, above.)
   241                             ;
   242                             ; INPUT: none
   243                             ;
   244                             ;  COST: 4 instruction cycles (in LMM only)
   245                          
   246                             macro RAM_X_POINTS_TO_STACKPAGE
   247                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   248                                or   F, FLAG_PGMODE_01b
   249                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   250  3C41                       endm
   251                          
   252                             ;-----------------------------------------------
   253                             ;  Force indexed addr mode operands to Index Pg
   254                             ;-----------------------------------------------
   255                             ;
   256                             ;  DESC: Permit instructions that use indexed address mode to reference page
   257                             ;        zero or the page pointed to by the IDX_PP register, depending on the
   258                             ;        setting of the MSb (or "Direct Page Mode" bit) of the PGMODE bits
   259                             ;        in the CPU Flag register, F. (This macro clears the PGMODE LSb.)
   260                             ;
   261                             ; INPUT: none
   262                             ;
   263                             ;  COST: 4 instruction cycles (in LMM only)
   264                          
   265                             macro RAM_X_POINTS_TO_INDEXPAGE
   266                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   267                                and  F, ~FLAG_PGMODE_01b
   268                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   269  3C41                       endm
   270                          
   271                             ;-----------------------------------------------
   272                             ;  Function Prologue
   273                             ;-----------------------------------------------
   274                             ;
   275                             ;  Prologue for functions that run in the LMM and SMM.
   276                             ;
   277                          
   278                             macro RAM_PROLOGUE( ACTUAL_CLASS )
   279                          
   280                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   281                             ; Nothing to do
   282                             ENDIF ; RAM_USE_CLASS_1
   283                          
   284                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   285                                IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   286                                   RAM_X_POINTS_TO_STACKPAGE         ; exit native paging mode!
   287                                ENDIF
   288                             ENDIF ; RAM_USE_CLASS_2
   289                          
   290                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   291                                IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   292                                   RAM_X_POINTS_TO_INDEXPAGE         ; exit native paging mode!
   293                                ENDIF
   294                             ENDIF ; RAM_USE_CLASS_3
   295                          
   296                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   297                             ; Nothing to do
   298                             ENDIF ; RAM_USE_CLASS_4
   299                          
   300  3C41                       endm
   301                          
   302                             ;-----------------------------------------------
   303                             ;  Function Epilogue
   304                             ;-----------------------------------------------
   305                             ;
   306                             ;  Prologue for functions that run in the LMM and SMM.
   307                             ;
   308                          
   309                             macro RAM_EPILOGUE( ACTUAL_CLASS )
   310                          
   311                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   312                             ; Nothing to do
   313                             ENDIF ; RAM_USE_CLASS_1
   314                          
   315                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   316                                RAM_RESTORE_NATIVE_PAGING
   317                             ENDIF ; RAM_USE_CLASS_2
   318                          
   319                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   320                                RAM_RESTORE_NATIVE_PAGING
   321                             ENDIF ; RAM_USE_CLASS_3
   322                          
   323                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   324                             ; Nothing to do
   325                             ENDIF ; RAM_USE_CLASS_4
   326                          
   327  3C41                       endm
   328                          
   329                             ;-----------------------------------------------
   330                             ;  Preserve Register
   331                             ;-----------------------------------------------
   332                             ;
   333                             ;  DESC: Preserve a register value on the stack
   334                             ;
   335                             ; INPUT: Name or address of register in I/O Space
   336                             ;        The I/O bank is an implicit parameter. That is, this function will
   337                             ;        Access the I/O bank currently specified by the CPU Flag register.
   338                             ;
   339                             ;  USES: CPU 'A' register
   340                             ;
   341                             ;  COST: 9 instruction cycles
   342                          
   343                             macro REG_PRESERVE( IOReg )
   344                             mov   A, reg[ @IOReg ]
   345                             push  A
   346  3C41                       endm
   347                          
   348                             ;-----------------------------------------------
   349                             ;  Restore Register
   350                             ;-----------------------------------------------
   351                             ;
   352                             ;  DESC: Restore a register value from the stack
   353                             ;
   354                             ; INPUT: Name or address of register in I/O Space
   355                             ;        The I/O bank is an implicit parameter. That is, this function will
   356                             ;        Access the I/O bank currently specified by the CPU Flag register.
   357                             ;
   358                             ;  USES: CPU 'A' register
   359                             ;
   360                             ;  COST: 10 instruction cycles
   361                          
   362                             macro REG_RESTORE( IOReg )
   363                             pop   A
   364                             mov   reg[ @IOReg ], A
   365  3C41                       endm
   366                          
   367                             ;-----------------------------------------------
   368                             ;  Preserve Volatile Page Pointer Registers
   369                             ;-----------------------------------------------
   370                             ;
   371                             ;  DESC: Invoked by ISRs before switching to the LMM mode and calling
   372                             ;        functions that require on it.
   373                             ;
   374                             ; INPUT: none
   375                             ;
   376                             ;  USES: CPU 'A' register
   377                             ;
   378                             ;  COST: 45 instruction cycles (in LMM only)
   379                          
   380                             macro ISR_PRESERVE_PAGE_POINTERS
   381                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   382                                REG_PRESERVE CUR_PP
   383                                REG_PRESERVE IDX_PP
   384                                REG_PRESERVE MVR_PP
   385                                REG_PRESERVE MVW_PP
   386                             ENDIF
   387  3C41                       endm
   388                          
   389                             ;-----------------------------------------------
   390                             ;  Restore Volatile Page Pointer Registers
   391                             ;-----------------------------------------------
   392                             ;
   393                             ;  DESC: Undo for RAM_PRESERVE_PAGE_POINTERS macro. Invoked by ISRs after
   394                             ;        calling functions that run in the LMM mode and before executing
   395                             ;        the RETI instruction.
   396                             ;
   397                             ; INPUT: none
   398                             ;
   399                             ;  USES: CPU 'A' register
   400                             ;
   401                             ;  COST: 50 instruction cycles (in LMM only)
   402                          
   403                             macro ISR_RESTORE_PAGE_POINTERS
   404                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   405                                REG_RESTORE MVW_PP
   406                                REG_RESTORE MVR_PP
   407                                REG_RESTORE IDX_PP
   408                                REG_RESTORE CUR_PP
   409                             ENDIF
   410                             endm
      + 3C41                    
      + 3C41                    ; end of file Memory.inc
      + 3C41                    ;;*****************************************************************************
;;******************
      +                         ***********************************************************
;;  FILENAME: SAR10.inc
;;   Version: 2.
      +                         00, Updated on 2013/5/19 at 10:39:9
;;  Generated by PSoC Designer 5.4.2946
;;
;;  DESCRIPTION: Asse
      +                         mbler declarations for the SAR10 user module interface
;;-------------------------------------------
      +                         ----------------------------------
;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved
      +                         .
;;*****************************************************************************
;;****************
      +                         *************************************************************
   824                          
   825                          ; end of file m8c.inc
    29  00C0                    FLAG_PGMODE_MASK:  equ 0C0h     ; Paging control for > 256 bytes of RAM
    30  0000                    FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
    31  0040                    FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
    32  0080                    FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
    33  00C0                    FLAG_PGMODE_3:     equ 0C0h       ; Direct to CUR_PP page, indexed to STK_PP page
    34  0000                    FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
    35  0040                    FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
    36  0080                    FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
    37  00C0                    FLAG_PGMODE_11b:   equ 0C0h       ; Same as PGMODE_3
    38  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    39  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    40  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    41  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    42  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    43                          
    44                          
    45                          ;;=============================================================================
    46                          ;;      Register Space, Bank 0
    47                          ;;=============================================================================
    48                          
    49                          ;------------------------------------------------
    50                          ;  Port Registers
    51                          ;  Note: Also see this address range in Bank 1.
    52                          ;------------------------------------------------
    53                          ; Port 0
    54  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    55  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    56  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    57  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    58                          ; Port 1
    59  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    60  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    61  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    62  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    63                          ; Port 2
    64  0008                    PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
    65  0009                    PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
    66  000A                    PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
    67  000B                    PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
    68                          ; Port 3
    69  000C                    PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
    70  000D                    PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
    71  000E                    PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
    72  000F                    PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
    73                          ; Port 4
    74  0010                    PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
    75  0011                    PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
    76  0012                    PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
    77  0013                    PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
    78                          
    79                          ;------------------------------------------------
    80                          ;  Digital PSoC(tm) block Registers
    81                          ;  Note: Also see this address range in Bank 1.
    82                          ;------------------------------------------------
    83                          ; Digital PSoC block 00, Basic Type C
    84  0020                    DBC00DR0:     equ 20h          ; data register 0                          (#)
    85  0021                    DBC00DR1:     equ 21h          ; data register 1                          (W)
    86  0022                    DBC00DR2:     equ 22h          ; data register 2                          (RW)
    87  0023                    DBC00CR0:     equ 23h          ; control & status register 0              (#)
    88                          
    89                          ; Digital PSoC block 01, Basic Type C
    90  0024                    DBC01DR0:     equ 24h          ; data register 0                          (#)
    91  0025                    DBC01DR1:     equ 25h          ; data register 1                          (W)
    92  0026                    DBC01DR2:     equ 26h          ; data register 2                          (RW)
    93  0027                    DBC01CR0:     equ 27h          ; control & status register 0              (#)
    94                          
    95                          ; Digital PSoC block 02, Communications Type C
    96  0028                    DCC02DR0:     equ 28h          ; data register 0                          (#)
    97  0029                    DCC02DR1:     equ 29h          ; data register 1                          (W)
    98  002A                    DCC02DR2:     equ 2Ah          ; data register 2                          (RW)
    99  002B                    DCC02CR0:     equ 2Bh          ; control & status register 0              (#)
   100                          
   101                          ; Digital PSoC block 03, Communications Type C
   102  002C                    DCC03DR0:     equ 2Ch          ; data register 0                          (#)
   103  002D                    DCC03DR1:     equ 2Dh          ; data register 1                          (W)
   104  002E                    DCC03DR2:     equ 2Eh          ; data register 2                          (RW)
   105  002F                    DCC03CR0:     equ 2Fh          ; control & status register 0              (#)
   106                          
   107                          ; Digital PSoC block 10, Basic Type C
   108  0030                    DBC10DR0:     equ 30h          ; data register 0                          (#)
   109  0031                    DBC10DR1:     equ 31h          ; data register 1                          (W)
   110  0032                    DBC10DR2:     equ 32h          ; data register 2                          (RW)
   111  0033                    DBC10CR0:     equ 33h          ; control & status register 0              (#)
   112                          
   113                          ; Digital PSoC block 11, Basic Type C
   114  0034                    DBC11DR0:     equ 34h          ; data register 0                          (#)
   115  0035                    DBC11DR1:     equ 35h          ; data register 1                          (W)
   116  0036                    DBC11DR2:     equ 36h          ; data register 2                          (RW)
   117  0037                    DBC11CR0:     equ 37h          ; control & status register 0              (#)
   118                          
   119                          ; Digital PSoC block 12, Communications Type C
   120  0038                    DCC12DR0:     equ 38h          ; data register 0                          (#)
   121  0039                    DCC12DR1:     equ 39h          ; data register 1                          (W)
   122  003A                    DCC12DR2:     equ 3Ah          ; data register 2                          (RW)
   123  003B                    DCC12CR0:     equ 3Bh          ; control & status register 0              (#)
   124                          
   125                          ; Digital PSoC block 13, Communications Type C
   126  003C                    DCC13DR0:     equ 3Ch          ; data register 0                          (#)
   127  003D                    DCC13DR1:     equ 3Dh          ; data register 1                          (W)
   128  003E                    DCC13DR2:     equ 3Eh          ; data register 2                          (RW)
   129  003F                    DCC13CR0:     equ 3Fh          ; control & status register 0              (#)
   130                          
   131                          ;-------------------------------------
   132                          ;  Analog Control Registers
   133                          ;-------------------------------------
   134  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
   135  00C0                    AMX_IN_ACI3:          equ C0h    ; MASK: column 3 input mux
   136  0030                    AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
   137  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
   138  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
   139                          
   140  0061                    AMUX_CFG:      equ 61h          ; Analog MUX Configuration
   141  0030                    AMUX_CFG_INTCAP:       equ 30h    ;
   142  000E                    AMUX_CFG_MUXCLK:  	  equ 0Eh	 ;
   143  0001                    AMUX_CFG_EN:		  	  equ 01h	 ;
   144                          
   145                          ; old declarations DO NOT USE
   146  0061                    AMUXCFG:      equ 61h          ; Analog MUX Configuration
   147  0030                    AMUXCFG_INTCAP:       equ 30h    ;
   148  000E                    AMUXCFG_MUXCLK:  	  equ 0Eh	 ;
   149  0001                    AMUXCFG_EN:		  	  equ 01h	 ;
   150                          
   151  0062                    PWM_CR:       equ 62h          ; Pulse-Width Modulator Control
   152  0038                    PWM_CR_HIGH:          equ 38h    ; MASK: PWM high time
   153  0006                    PWM_CR_LOW:           equ 06h	 ; MASK: PWM low time
   154  0001                    PWM_CR_EN:            equ 01h	 ; MASK: Enable/Disable PWM function
   155                          
   156  0063                    ARF_CR:       equ 63h          ; Analog Reference Control
   157                          
   158  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus Register           (#)
   159  0080                    CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
   160  0040                    CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
   161  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
   162  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
   163  0008                    CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
   164  0004                    CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
   165  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
   166  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   167                          
   168  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   169  0020                    CMP_CR1_CLDIS1:       equ 20h    ; MASK: Column 1 comparator output latch
   170  0010                    CMP_CR1_CLDIS0:	      equ 10h    ; MASK: Column 0 comparator output latch
   171                          
   172  0068                    ADC0_CR:      equ 68h          ; Analog Column 0 Configuration
   173  0080                    ADC0_CR_CMPST:        equ 80h    ;
   174  0040                    ADC0_CR_LOREN:        equ 40h    ;
   175  0020                    ADC0_CR_SHEN:         equ 20h    ;
   176  0008                    ADC0_CR_CBSRC:        equ 08h    ;
   177  0004                    ADC0_CR_ADCM:         equ 04h    ;
   178  0001                    ADC0_CR_EN:	          equ 01h    ;
   179                          
   180  0069                    ADC1_CR:      equ 69h          ; Analog Column 1 Configuration
   181  0080                    ADC1_CR_CMPST:        equ 80h    ;
   182  0040                    ADC1_CR_LOREN:        equ 40h    ;
   183  0020                    ADC1_CR_SHEN:         equ 20h    ;
   184  0008                    ADC1_CR_CBSRC:        equ 08h    ;
   185  0004                    ADC1_CR_ADCM:         equ 04h    ;
   186  0001                    ADC1_CR_EN:	          equ 01h    ;
   187                          
   188                          ; Continuous Time PSoC block Type E Row 0 Col 0
   189  0072                    ACE00CR1:     equ 72h          ; Control register 1                       (RW)
   190  0073                    ACE00CR2:     equ 73h          ; Control register 2                       (RW)
   191                          
   192                          ; Continuous Time PSoC block Type E Row 0 Col 1
   193  0076                    ACE01CR1:     equ 76h          ; Control register 1                       (RW)
   194  0077                    ACE01CR2:     equ 77h          ; Control register 2                       (RW)
   195                          
   196                          ; Switched Cap PSoC blockType E Row 1 Col 0
   197  0080                    ASE10CR0:     equ 80h          ; Control register 0                       (RW)
   198                          
   199                          ; Switched Cap PSoC blockType E Row 1 Col 1
   200  0084                    ASE11CR0:     equ 84h          ; Control register 0                       (RW)
   201                          
   202                          ;-----------------------------------------------
   203                          ;  Global General Purpose Data Registers
   204                          ;-----------------------------------------------
   205  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   206  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   207  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   208  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   209                          
   210                          ;------------------------------------------------
   211                          ;  Row Digital Interconnects
   212                          ;
   213                          ;  Note: the following registers are mapped into
   214                          ;  both register bank 0 AND register bank 1.
   215                          ;------------------------------------------------
   216                          
   217  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   218  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   219  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   220  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   221  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   222  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   223  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   224                          
   225  00B8                    RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
   226  00B9                    RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
   227  00BA                    RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
   228  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   229  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   230  00BD                    RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
   231  00BE                    RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
   232                          
   233                          ;-----------------------------------------------
   234                          ;  Ram Page Pointers
   235                          ;-----------------------------------------------
   236  00D0                    CUR_PP:      equ 0D0h           ; Current   Page Pointer
   237  00D1                    STK_PP:      equ 0D1h           ; Stack     Page Pointer
   238  00D3                    IDX_PP:      equ 0D3h           ; Index     Page Pointer
   239  00D4                    MVR_PP:      equ 0D4h           ; MVI Read  Page Pointer
   240  00D5                    MVW_PP:      equ 0D5h           ; MVI Write Page Pointer
   241                          
   242                          ;------------------------------------------------
   243                          ;  I2C Configuration Registers
   244                          ;------------------------------------------------
   245  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   246  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   247  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   248  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   249  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   250  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   251  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   252  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   253  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   254  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   255                          
   256  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   257  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   258  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   259  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   260  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   261  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   262  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   263  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   264  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   265                          
   266  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   267                          
   268  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   269  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   270  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   271  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   272  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   273                          
   274                          ;------------------------------------------------
   275                          ;  System and Global Resource Registers
   276                          ;------------------------------------------------
   277  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   278                                                         ; Use INT_MSK0 bit field masks
   279  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   280                                                         ; Use INT_MSK1 bit field masks
   281  00DC                    INT_CLR2:     equ 0DCh          ; Interrupt Clear Register 2               (RW)
   282                                                         ; Use INT_MSK2 bit field masks
   283  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   284                                                         ; Use INT_MSK3 bit field masks
   285                          
   286  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   287  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   288  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   289                          
   290  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   291  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   292  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   293  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   294  0010                    INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
   295  0008                    INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
   296  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   297  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   298  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   299                          
   300  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   301  0080                    INT_MSK1_DCC13:            equ 80h ; MASK: enable/disable DCC13 block interrupt
   302  0040                    INT_MSK1_DCC12:            equ 40h ; MASK: enable/disable DCC12 block interrupt
   303  0020                    INT_MSK1_DBC11:            equ 20h ; MASK: enable/disable DBC11 block interrupt
   304  0010                    INT_MSK1_DBC10:            equ 10h ; MASK: enable/disable DBC10 block interrupt
   305  0008                    INT_MSK1_DCC03:            equ 08h ; MASK: enable/disable DCC03 block interrupt
   306  0004                    INT_MSK1_DCC02:            equ 04h ; MASK: enable/disable DCC02 block interrupt
   307  0002                    INT_MSK1_DBC01:            equ 02h ; MASK: enable/disable DBC01 block interrupt
   308  0001                    INT_MSK1_DBC00:            equ 01h ; MASK: enable/disable DBC00 block interrupt
   309                          
   310  00DF                    INT_MSK2:     equ DFh			; Custom block Mask Register			   (RW)
   311  0010                    INT_MSK2_SARADC:           equ 10h ; MASK: enable/disable SARADC block interrupt
   312  0020                    INT_MSK2_CSD0:             equ 20h ; MASK: enable/disable CSD0 block interrupt
   313  0040                    INT_MSK2_CSD1:             equ 40h ; MASK: enable/disable CSD1 block interrupt
   314  0080                    INT_MSK2_RTC:              equ 80h ; MASK: enable/disable RTC block interrupt
   315                          
   316  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   317  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   318                          
   319                          ;------------------------------------------------------
   320                          ;  MAC Registers
   321                          ;------------------------------------------------------
   322                          
   323  00E8                    MUL0_X:       equ 0E8h          ; Multiply Input X Register                (W)
   324  00E9                    MUL0_Y:       equ 0E9h          ; Multiply Input Y Register                (W)
   325  00EA                    MUL0_DH:      equ 0EAh          ; Multiply Result High Byte Register       (R)
   326  00EB                    MUL0_DL:      equ 0EBh          ; Multiply Result Low Byte Register        (R)
   327                          
   328  00EC                    ACC0_DR1:     equ 0ECh          ; Accumulator Data Register 1              (RW)
   329  00ED                    ACC0_DR0:     equ 0EDh          ; Accumulator Data Register 0              (RW)
   330  00EE                    ACC0_DR3:     equ 0EEh          ; Accumulator Data Register 3              (RW)
   331  00EF                    ACC0_DR2:     equ 0EFh          ; Accumulator Data Register 2              (RW)
   332                          
   333                          ; DECIMATOR Control Registers
   334  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   335  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   336                          
   337                          ;------------------------------------------------------
   338                          ;  System Status and Control Registers
   339                          ;
   340                          ;  Note: The following registers are mapped into both
   341                          ;        register bank 0 AND register bank 1.
   342                          ;------------------------------------------------------
   343  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   344                                                             ; Use FLAG_ masks defined at top of file
   345                          
   346  00FD                    DAC_D:        equ 0FDh		   ; DAC Data Register                        (RW)
   347                          
   348  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   349  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: flag, Internal Reset Status bit
   350  0010                    CPU_SCR1_SLIMO:         equ 10h	   ; MASK: Slow IMO (internal main osc) enable
   351  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   352  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   353  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   354                          
   355  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   356  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   357  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   358  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   359  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   360  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   361                          
   362                          ;------------------------------------------------------
   363                          ;  Neon Capsense Digital Control Registers
   364                          ;------------------------------------------------------
   365  0050                    CSD0_DR0_L:				equ 50h		; Capsense 0 data low 0				(RW)
   366  0054                    CSD0_DR0_H:				equ 54h		; Capsense 0 data high 0			(RW)
   367  0058                    CSD1_DR0_L:				equ 58h		; Capsense 1 data low 0				(RW)
   368  005C                    CSD1_DR0_H:				equ 5Ch		; Capsense 1 data high 0			(RW)
   369  0051                    CSD0_DR1_L:				equ 51h		; Capsense 0 data low 1				(RW)
   370  0055                    CSD0_DR1_H:				equ 55h		; Capsense 0 data high 1			(RW)
   371  0059                    CSD1_DR1_L:				equ 59h		; Capsense 1 data low 1				(RW)
   372  005D                    CSD1_DR1_H:				equ 5Dh		; Capsense 1 data high 1			(RW)
   373  0052                    CSD0_CNT_L:				equ 52h		; Capsense 0 counter low			(RW)
   374  0056                    CSD0_CNT_H:				equ 56h		; Capsense 0 counter high			(RW)
   375  005A                    CSD1_CNT_L:				equ 5Ah		; Capsense 1 counter low			(RW)
   376  005E                    CSD1_CNT_H:				equ	5Eh		; Capsense 1 counter high			(RW)
   377  0053                    CSD0_CR0:				equ 53h		; Capsense 0 control 0				(RW)
   378  005B                    CSD1_CR0:				equ 5Bh		; Capsense 1 control 0				(RW)
   379  0057                    CSD0_CR1:				equ 57h		; Capsense 0 control 1				(RW)
   380  005F                    CSD1_CR1:				equ 5Fh		; Capsense 1 control 1				(RW)
   381                          
   382                          ;------------------------------------------------------
   383                          ;  Neon Analog Registers
   384                          ;------------------------------------------------------
   385  0065                    ASY_CR:					equ 65h		; Analog Synchronization Control	(RW)
   386  006A                    ADC_DH:					equ 6Ah		; ADC data high						(RW)
   387  006B                    ADC_DL:					equ 6Bh		; ADC data low						(RW)
   388  00C8                    PWMVREF0:				equ C8h		; PWM Voltage Reference 0			(RW)
   389  00C9                    PWMVREF1:				equ C9h		; PWM Voltage Reference 1			(RW)
   390  00CB                    PWMSRC:					equ CBh		; PWM Source						(RW)
   391  00CA                    IDACMODE:				equ CAh		; IDAC Mode							(RW)
   392  00FC                    IDACR_D:				equ FCh		; Analog Mux DAC data 0				(RW)
   393  00FD                    IDACL_D:				equ FDh		; Analog Mux DAC data 1				(RW)
   394                          
   395                          ;------------------------------------------------------
   396                          ;  Neon Digital Registers
   397                          ;------------------------------------------------------
   398  00B7                    RDI0DSM:				equ B7h		; Row Digital Interconnect input select 0	(RW)
   399  00BF                    RDI1DSM:				equ BFh		; Row Digital Interconnect input select 1	(RW)
   400                          
   401                          ;------------------------------------------------------
   402                          ;  Neon Test Registers
   403                          ;------------------------------------------------------
   404  00CC                    TSCR0:					equ CCh		; Tsource 0							(RW)
   405  00CD                    TSCMPH:					equ CDh		; TSCMP high						(RW)
   406  00CE                    TSCMPL:					equ CEh		; TSCMP low							(RW)
   407  00CF                    TSCR1:					equ CFh		; Tsource 1							(RW)
   408                          
   409                          ;;=============================================================================
   410                          ;;      Register Space, Bank 1
   411                          ;;=============================================================================
   412                          
   413                          ;------------------------------------------------
   414                          ;  Port Registers
   415                          ;  Note: Also see this address range in Bank 0.
   416                          ;------------------------------------------------
   417                          ; Port 0
   418  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   419  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   420  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   421  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   422                          
   423                          ; Port 1
   424  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   425  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   426  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   427  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   428                          
   429                          ; Port 2
   430  0008                    PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
   431  0009                    PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
   432  000A                    PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
   433  000B                    PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
   434                          
   435                          ; Port 3
   436  000C                    PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
   437  000D                    PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
   438  000E                    PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
   439  000F                    PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
   440                          
   441                          ; Port 4
   442  0010                    PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
   443  0011                    PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
   444  0012                    PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
   445  0013                    PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
   446                          
   447                          ;------------------------------------------------
   448                          ;  Digital PSoC(tm) block Registers
   449                          ;  Note: Also see this address range in Bank 0.
   450                          ;------------------------------------------------
   451                          
   452                          ; Digital PSoC block 00, Basic Type C
   453  0020                    DBC00FN:      equ 20h          ; Function Register                        (RW)
   454  0021                    DBC00IN:      equ 21h          ;    Input Register                        (RW)
   455  0022                    DBC00OU:      equ 22h          ;   Output Register                        (RW)
   456  0023                    DBC00CR1:     equ 23h          ;   control & status register 1            (RW)
   457                          
   458                          ; Digital PSoC block 01, Basic Type C
   459  0024                    DBC01FN:      equ 24h          ; Function Register                        (RW)
   460  0025                    DBC01IN:      equ 25h          ;    Input Register                        (RW)
   461  0026                    DBC01OU:      equ 26h          ;   Output Register                        (RW)
   462  0027                    DBC01CR1:     equ 27h          ;   control & status register 1            (RW)
   463                          
   464                          ; Digital PSoC block 02, Communications Type C
   465  0028                    DCC02FN:      equ 28h          ; Function Register                        (RW)
   466  0029                    DCC02IN:      equ 29h          ;    Input Register                        (RW)
   467  002A                    DCC02OU:      equ 2Ah          ;   Output Register                        (RW)
   468  002B                    DBC02CR1:     equ 2Bh          ;   control & status register 1            (RW)
   469                          
   470                          ; Digital PSoC block 03, Communications Type C
   471  002C                    DCC03FN:      equ 2Ch          ; Function Register                        (RW)
   472  002D                    DCC03IN:      equ 2Dh          ;    Input Register                        (RW)
   473  002E                    DCC03OU:      equ 2Eh          ;   Output Register                        (RW)
   474  0029                    DBC03CR1:     equ 29h          ;   control & status register 1            (RW)
   475                          
   476                          ; Digital PSoC block 10, Basic Type C
   477  0030                    DBC10FN:      equ 30h          ; Function Register                        (RW)
   478  0031                    DBC10IN:      equ 31h          ;    Input Register                        (RW)
   479  0032                    DBC10OU:      equ 32h          ;   Output Register                        (RW)
   480  0033                    DBC10CR1:     equ 33h          ;   control & status register 1            (RW)
   481                          
   482                          ; Digital PSoC block 11, Basic Type C
   483  0034                    DBC11FN:      equ 34h          ; Function Register                        (RW)
   484  0035                    DBC11IN:      equ 35h          ;    Input Register                        (RW)
   485  0036                    DBC11OU:      equ 36h          ;   Output Register                        (RW)
   486  0037                    DBC11CR1:     equ 37h          ;   control & status register 1            (RW)
   487                          
   488                          ; Digital PSoC block 12, Communications Type C
   489  0038                    DCC12FN:      equ 38h          ; Function Register                        (RW)
   490  0039                    DCC12IN:      equ 39h          ;    Input Register                        (RW)
   491  003A                    DCC12OU:      equ 3Ah          ;   Output Register                        (RW)
   492  003B                    DBC12CR1:     equ 3Bh          ;   control & status register 1            (RW)
   493                          
   494                          ; Digital PSoC block 13, Communications Type C
   495  003C                    DCC13FN:      equ 3Ch          ; Function Register                        (RW)
   496  003D                    DCC13IN:      equ 3Dh          ;    Input Register                        (RW)
   497  003E                    DCC13OU:      equ 3Eh          ;   Output Register                        (RW)
   498  003F                    DBC13CR1:     equ 3Fh          ;   control & status register 1            (RW)
   499                          
   500                          ;------------------------------------------------
   501                          ;  System and Global Resource Registers
   502                          ;  Note: Also see this address range in Bank 0.
   503                          ;------------------------------------------------
   504                          
   505  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   506  00C0                    CLK_CR0_ACOLUMN_3:    equ C0h    ; MASK: Specify clock for analog cloumn
   507  0030                    CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
   508  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   509  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   510                          
   511  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   512  0018                    CLK_CR1_ACLK1:        equ 18h    ; MASK: Digital PSoC block for analog source
   513  0003                    CLK_CR1_ACLK0:        equ 03h    ; MASK: Digital PSoC block for analog source
   514                          
   515  0003                    CLK_CR1_ACLK2:        equ 03h    ; Deprecated do not use
   516                          
   517  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   518  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   519                          
   520  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   521  000F                    AMD_CR0_AMOD0:        equ 0Fh    ; MASK: Modulation source for analog column 0
   522                          
   523  0064                    CMP_GO_EN:    equ 64h          ; Comparator Bus To Global Out Enable      (RW)
   524  0080                    CMP_GO_EN_GOO5:       equ 80h    ; MASK: Selected Col 1 signal to GOO5
   525  0040                    CMP_GO_EN_GOO1:       equ 40h    ; MASK: Selected Col 1 signal to GOO1
   526  0030                    CMP_GO_EN_SEL1:       equ 30h    ; MASK: Column 1 Signal Select
   527  0008                    CMP_GO_EN_GOO4:       equ 08h    ; MASK: Selected Col 0 signal to GOO4
   528  0004                    CMP_GO_EN_GOO0:       equ 04h    ; MASK: Selected Col 0 signal to GOO0
   529  0003                    CMP_GO_EN_SEL0:       equ 03h    ; MASK: Column 0 Signal Select
   530                          
   531  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   532  000F                    AMD_CR1_AMOD1:        equ 0Fh    ; MASK: Modulation ctrl for analog column 1
   533                          
   534  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   535  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   536  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   537                          
   538  006B                    CLK_CR3:      equ 6Bh          ; Analog Clock Source Control Register 3   (RW)
   539  0040                    CLK_CR3_SYS1:         equ 40h    ; MASK: Analog Clock 1 selection
   540  0030                    CLK_CR3_DIVCLK1:      equ 30h    ; MASK: Analog Clock 1 divider
   541  0004                    CLK_CR3_SYS0:         equ 04h    ; MASK: Analog Clock 0 selection
   542  0003                    CLK_CR3_DIVCLK0:      equ 03h    ; MASK: Analog Clock 0 divider
   543                          
   544                          ;------------------------------------------------
   545                          ;  Global Digital Interconnects
   546                          ;------------------------------------------------
   547                          
   548  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   549  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   550  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   551  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   552                          
   553  00A0                    GDI_O_IN_CR:  equ 0A0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   554  00A1                    GDI_E_IN_CR:  equ 0A1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   555  00A2                    GDI_O_OU_CR:  equ 0A2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   556  00A3                    GDI_E_OU_CR:  equ 0A3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   557                          
   558  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   559  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   560                          
   561                          ;------------------------------------------------
   562                          ;  Analog Mux Bus Port Enable Bits
   563                          ;------------------------------------------------
   564  00D8                    MUX_CR0:      equ 0D8h          ; Analog Mux Port 0 Bit Enables Register
   565  00D9                    MUX_CR1:      equ 0D9h          ; Analog Mux Port 1 Bit Enables Register
   566  00DA                    MUX_CR2:      equ 0DAh          ; Analog Mux Port 2 Bit Enables Register
   567  00DB                    MUX_CR3:      equ 0DBh          ; Analog Mux Port 3 Bit Enables Register
   568  00EC                    MUX_CR4:      equ 0ECh          ; Analog Mux Port 4 Bit Enables Register
   569                          
   570                          ;------------------------------------------------
   571                          ;  Clock and System Control Registers
   572                          ;------------------------------------------------
   573                          
   574  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   575  0080                    OSC_GO_EN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   576  0040                    OSC_GO_EN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   577  0020                    OSC_GO_EN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   578  0010                    OSC_GO_EN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   579  0008                    OSC_GO_EN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   580  0004                    OSC_GO_EN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   581  0002                    OSC_GO_EN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   582  0001                    OSC_GO_EN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   583                          
   584  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   585  0003                    OSC_CR4_VC3SEL:       equ 03h    ; MASK: System VC3 Clock source
   586                          
   587  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   588                          
   589  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   590  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   591  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   592  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   593  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   594  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   595  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   596  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   597  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   598  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   599  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   600  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   601  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   602  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   603  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   604  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   605  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   606  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   607                          
   608  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   609  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   610  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   611                          
   612  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   613  0080                    OSC_CR2_PLLGAIN:      equ 80h    ; MASK: High/Low gain
   614  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   615  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   616  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   617                          
   618  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   619  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   620  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   621  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   622  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   623  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   624  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   625  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   626                          
   627  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   628  0008                    VLT_CMP_NOWRITE:      equ 08h    ; MASK: Vcc below Flash Write level
   629  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   630  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   631  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   632                          
   633  00E5                    ADC0_TR:      equ 0E5h          ; ADC Column 0 Trim Register
   634  00E6                    ADC1_TR:      equ 0E6h          ; ADC Column 1 Trim Register
   635                          
   636  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   637  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   638  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   639  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   640                          
   641  00FA                    FLS_PR1:      equ 0FAh          ; Flash Program Register 1                 (RW)
   642  0003                    FLS_PR1_BANK:         equ 03h    ; MASK: Select Active Flash Bank
   643                          
   644  00FD                    DAC_CR0:       equ 0FDh          ; Analog Mux DAC Control Register 0
   645  00DC                    DAC_CR1:       equ 0DCh          ; Analog Mux DAC Control Register 1
   646  0008                    DAC_CR_IRANGE:        equ 08h    ; MASK: Sets the DAC Range low or high
   647  0006                    DAC_CR_OSCMODE:       equ 06h    ; MASK: Defines the reset mode for AMux
   648  0001                    DAC_CR_ENABLE:        equ 01h    ; MASK: Enable/Disable DAC function
   649                          
   650                          ;------------------------------------------------
   651                          ;  I2C Control Registers
   652                          ;------------------------------------------------
   653                          
   654  00AD                    I2C_ADDR:    equ 0ADh          ; I2C Address Register (RW)
   655                          
   656                          ;------------------------------------------------------
   657                          ;  Neon Analog Registers
   658                          ;------------------------------------------------------
   659  0053                    VDAC50CR0:		equ 53h			; V DAC5 control 0				(RW)
   660  0057                    VDAC51CR0:		equ 57h			; V DAC5 control 1				(RW)
   661  00A8                    ADC_CR0:		equ A8h			; ADC control 0					(RW)
   662  00A9                    ADC_CR1:		equ A9h			; ADC control 1					(RW)
   663  00AA                    ADC_CR2:		equ AAh			; ADC control 2					(RW)
   664  00AB                    ADC_CR3TRIM:	equ ABh			; ADC control 3					(RW)
   665  00AC                    ADC_CR4:		equ ACh			; ADC control 4					(RW)
   666  00E7                    VDAC_TRIM:		equ E7h			; V DAC trim					(RW)
   667                          
   668                          ;------------------------------------------------------
   669                          ;  Neon Current Sense CMP Registers
   670                          ;------------------------------------------------------
   671  0050                    CMP0CR1:		equ 50h			; CMP0 control 1				(RW)
   672  0051                    CMP0CR2:		equ 51h			; CMP0 control 2				(RW)
   673  0054                    CMP1CR1:		equ 54h			; CMP1 control 1				(RW)
   674  0055                    CMP1CR2:		equ 55h			; CMP1 control 2				(RW)
   675  0058                    CSCMPCR0:		equ 58h			; CSCMP control 0				(RW)
   676  0059                    CSCMPGOEN:		equ 59h			; CSCMO global out enable		(RW)
   677  005A                    CSLUTCR0:		equ 5Ah			; CSLUT control 0				(RW)
   678  005B                    CMPCOLMUX:		equ 5Bh			; CMP Column Mux				(RW)
   679  005C                    CMPPWMCR:		equ 5Ch			; CMP PWM control				(RW)
   680  005D                    CMPFLTCR:		equ 5Dh			; CMP filter control			(RW)
   681  005E                    CMPCLK1:		equ 5Eh			; CMP clock 1					(RW)
   682  005F                    CMPCLK0:		equ 5Fh			; CMP clock 0					(RW)
   683                          
   684                          ;------------------------------------------------------
   685                          ;  Neon Real Time Clock Registers
   686                          ;------------------------------------------------------
   687  00A4                    RTCH:			equ A4h			; Real time current hour		(RW)
   688  00A5                    RTCM:			equ A5h			; Real time current minute		(RW)
   689  00A6                    RTCS:			equ A6h			; Real time current second		(RW)
   690  00A7                    RTCCR:			equ A7h			; Real time clock control		(RW)
   691                          
   692                          ;------------------------------------------------------
   693                          ;  Analog MUX Config Registers
   694                          ;------------------------------------------------------
   695                          
   696  006A                    AMUX_CFG1:			equ 6Ah  ; Analog MUX Configuration 1
   697  0020                    AMUX_CFG1_GOINVR:	equ 20h  ;
   698  0010                    AMUX_CFG1_GOINVL:  	equ 10h	 ;
   699  000C                    AMUX_CFG1_AMUXMODR:	equ 0Ch	 ;
   700  0003                    AMUX_CFG1_AMUXMODL:	equ 03h	 ;
   701                          
   702                          ;;=============================================================================
   703                          ;;      M8C System Macros
   704                          ;;  These macros should be used when their functions are needed.
   705                          ;;=============================================================================
   706                          
   707                          ;----------------------------------------------------
   708                          ;  Swapping Register Banks
   709                          ;----------------------------------------------------
   710                              macro M8C_SetBank0
   711                              and   F, ~FLAG_XIO_MASK
   712  3C41                        endm
   713                          
   714                              macro M8C_SetBank1
   715                              or    F, FLAG_XIO_MASK
   716  3C41                        endm
   717                          
   718                          ;----------------------------------------------------
   719                          ;  Global Interrupt Enable/Disable
   720                          ;----------------------------------------------------
   721                              macro M8C_EnableGInt
   722                              or    F, FLAG_GLOBAL_IE
   723  3C41                        endm
   724                          
   725                              macro M8C_DisableGInt
   726                              and   F, ~FLAG_GLOBAL_IE
   727  3C41                        endm
   728                          
   729                          ;----------------------------------------------------
   730                          ;  Enable/Disable Interrupt Mask
   731                          ;
   732                          ;  Use the following macros to enable/disable
   733                          ;  bits in the Interrupt mask registers,
   734                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   735                          ;
   736                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   737                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   738                          ;
   739                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   740                          ;        and MASK is the bit set to enable or disable
   741                          ;----------------------------------------------------
   742                          ; Disable Interrupt Bit Mask(s)
   743                              macro M8C_DisableIntMask
   744                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   745  3C41                        endm
   746                          
   747                          ; Enable Interrupt Bit Mask(s)
   748                              macro M8C_EnableIntMask
   749                              or    reg[@0], @1               ; enable specified interrupt enable bit
   750  3C41                        endm
   751                          
   752                          ;----------------------------------------------------
   753                          ;  Clear Posted Interrupt Flag Mask
   754                          ;
   755                          ;  Use the following macros to clear the
   756                          ;  bits in the Interrupt Clear registers,
   757                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   758                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   759                          ;
   760                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   761                          ;        and MASK is the bit set to enable or disable
   762                          ;----------------------------------------------------
   763                              macro M8C_ClearIntFlag
   764                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   765  3C41                        endm
   766                          
   767                          ;----------------------------------------------------
   768                          ;  Power-On Reset & WatchDog Timer Functions
   769                          ;----------------------------------------------------
   770                              macro M8C_EnableWatchDog
   771                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   772  3C41                        endm
   773                          
   774                              macro M8C_ClearWDT
   775                              mov   reg[RES_WDT], 00h
   776  3C41                        endm
   777                          
   778                              macro M8C_ClearWDTAndSleep
   779                              mov   reg[RES_WDT], 38h
   780  3C41                        endm
   781                          
   782                          ;----------------------------------------------------
   783                          ;  Sleep, CPU Stop & Software Reset
   784                          ;----------------------------------------------------
   785                              macro M8C_Sleep
   786                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   787                              ; The next instruction to be executed depends on the state of the
   788                              ; various interrupt enable bits. If some interrupts are enabled
   789                              ; and the global interrupts are disabled, the next instruction will
   790                              ; be the one that follows the invocation of this macro. If global
   791                              ; interrupts are also enabled then the next instruction will be
   792                              ; from the interrupt vector table. If no interrupts are enabled
   793                              ; then the CPU sleeps forever.
   794  3C41                        endm
   795                          
   796                              macro M8C_Stop
   797                              ; In general, you probably don't want to do this, but here's how:
   798                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   799                              ; Next instruction to be executed is located in the interrupt
   800                              ; vector table entry for Power-On Reset.
   801  3C41                        endm
   802                          
   803                              macro M8C_Reset
   804                              ; Restore CPU to the power-on reset state.
   805                              mov A, 0
   806                              SSC
   807                              ; Next non-supervisor instruction will be at interrupt vector 0.
   808  3C41                        endm
   809                          
   810                          ;----------------------------------------------------
   811                          ; ImageCraft Code Compressor Actions
   812                          ;----------------------------------------------------
   813                              ; Suspend Code Compressor
   814                              ; Must not span a RET or RETI instruction
   815                              ; without resuming code compression
   816                              macro Suspend_CodeCompressor
   817                              or   F, 0
   818  3C41                        endm
   819                          
   820                              ; Resume Code Compression
   821                              macro Resume_CodeCompressor
   822                              add  SP, 0
   823  3C41                        endm
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  FILENAME: SAR10.inc
     4                          ;;   Version: 2.00, Updated on 2013/5/19 at 10:39:9
     5                          ;;  Generated by PSoC Designer 5.4.2946
     6                          ;;
     7                          ;;  DESCRIPTION: Assembler declarations for the SAR10 user module interface
     8                          ;;-----------------------------------------------------------------------------
     9                          ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
    10                          ;;*****************************************************************************
    11                          ;;*****************************************************************************
    12                          
    13                          include "m8c.inc"
    14                          
    15                          
    16                          ;--------------------------------------------------
    17                          ; Constants for SAR10 API's.
    18                          ;--------------------------------------------------
    19                          
    20  0001                    SAR10_SAR_CR0_REG_START_BIT:                               equ 0x01    ; Control register start bit
    21  0078                    SAR10_CHN_SEL_MASK:                                        equ 0x78
    22  0030                    SAR10_TRG_SEL_MASK:                                        equ 0x30
    23  0001                    SAR10_ALIGN_EN_MASK:                                       equ 0x01
    24  000E                    SAR10_CLK_SEL_MASK:                                        equ 0x0E
    25  0008                    SAR10_FREE_RUN_MASK:                                       equ 0x08
    26  0004                    SAR10_READY_MASK:                                          equ 0x04
    27  0002                    SAR10_SAR_CR0_REG_SW_TRIG_BIT:                             equ 0x02
    28                          
    29  00DF                    SAR10_INT_REG:                                             equ 0x0df
    30  0010                    SAR10_INT_SAR_MASK:                                        equ 0x10
    31                          ;--------------------------------------------------
    32                          ; SAR10 channel selection definitions
    33                          ;--------------------------------------------------
    34  0000                    SAR10_CHS_P00:                                             equ   (00h)
    35  0008                    SAR10_CHS_P01:                                             equ   (08h)
    36  0010                    SAR10_CHS_P02:                                             equ   (10h)
    37  0018                    SAR10_CHS_P03:                                             equ   (18h)
    38  0020                    SAR10_CHS_P04:                                             equ   (20h)
    39  0028                    SAR10_CHS_P05:                                             equ   (28h)
    40  0030                    SAR10_CHS_P06:                                             equ   (30h)
    41  0038                    SAR10_CHS_P07:                                             equ   (38h)
    42  0060                    SAR10_CHS_AMUX0:                                           equ   (60h)
    43  0068                    SAR10_CHS_AMUX1:                                           equ   (68h)
    44                          ;for compatibly with olds projects
    45  0060                    SAR10_CHS_AMUXL:                                           equ   (60h)
    46  0068                    SAR10_CHS_AMUXR:                                           equ   (68h)
    47                          
    48                          ;--------------------------------------------------
    49                          ; SAR10 trigger source definitions
    50                          ;--------------------------------------------------
    51  0000                    SAR10_SRC_TGRL:                                            equ   (00h)
    52  0010                    SAR10_SRC_TGRH:                                            equ   (10h)
    53  0020                    SAR10_SRC_TGR16:                                           equ   (20h)
    54  0030                    SAR10_SRC_TGRINCMP:                                        equ   (30h)
    55                          
    56                          ;--------------------------------------------------
    57                          ; SAR10 auto trigger definitions
    58                          ;--------------------------------------------------
    59  0001                    SAR10_AUTOTGR_ENABLE:                                      equ   (01h)
    60  0000                    SAR10_AUTOTGR_DISABLE:                                     equ   (00h)
    61                          
    62                          ;--------------------------------------------------
    63                          ; SAR10 clock selection definitions
    64                          ;--------------------------------------------------
    65  0000                    SAR10_SYSCLK_2:                                            equ   (00h)
    66  0002                    SAR10_SYSCLK_4:                                            equ   (02h)
    67  0004                    SAR10_SYSCLK_6:                                            equ   (04h)
    68  0006                    SAR10_SYSCLK_8:                                            equ   (06h)
    69  0008                    SAR10_SYSCLK_12:                                           equ   (08h)
    70  000A                    SAR10_SYSCLK_16:                                           equ   (0Ah)
    71  000C                    SAR10_SYSCLK_32:                                           equ   (0Ch)
    72  000E                    SAR10_SYSCLK_64:                                           equ   (0Eh)
    73                          
    74                          ;--------------------------------------------------
    75                          ; SAR10 run mode selection definitions
    76                          ;--------------------------------------------------
    77  0000                    SAR10_ONESHOT:                                             equ   (00h)
    78  0008                    SAR10_FREERUN:                                             equ   (08h)
    79                          
    80                          ;--------------------------------------------------
    81                          ; SAR10 definitions
    82                          ;--------------------------------------------------
    83  0000                    SAR10_Justify:                                             equ 0h
    84                          
    85                          ;--------------------------------------------------
    86                          ; Register Address Constants for SAR10
    87                          ;--------------------------------------------------
    88                          
    89  00A8                    SAR10_SAR_CR0_REG:                             equ 0xa8   ; SAR Control_0 register
    90  00A9                    SAR10_SAR_CR1_REG:                             equ 0xa9   ; SAR Control_1 register
    91  00AA                    SAR10_SAR_CR2_REG:                             equ 0xaa   ; SAR Control_2 register
    92  006A                    SAR10_SAR_DH_REG:                              equ 0x6a    ; SAR Data (MSB) register
    93  006B                    SAR10_SAR_DL_REG:                              equ 0x6b    ; SAR Data (LSB) register
    94                          
    95                          ;--------------------------------------------------
    96                          ; SAR10 Macro 'Functions'
    97                          ;--------------------------------------------------
    98                          
    99                             macro SAR10_Start_M
   100                             or    reg[SAR10_SAR_CR0_REG],  SAR10_SAR_CR0_REG_START_BIT
   101  3C41                       endm
   102                          
   103                             macro SAR10_Stop_M
   104                             and   reg[SAR10_SAR_CR0_REG], ~SAR10_SAR_CR0_REG_START_BIT
   105  3C41                       endm
   106                          
   107                             macro SAR10_EnableInt_M
   108                             M8C_EnableIntMask SAR10_INT_REG, SAR10_INT_SAR_MASK
   109  3C41                       endm
   110                          
   111                             macro SAR10_DisableInt_M
   112                             M8C_DisableIntMask SAR10_INT_REG, SAR10_INT_SAR_MASK
   113  3C41                       endm
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  FILENAME: SAR10.asm
     4                          ;;   Version: 2.00, Updated on 2013/5/19 at 10:39:9
     5                          ;;  Generated by PSoC Designer 5.4.2946
     6                          ;;
     7                          ;;  DESCRIPTION: SAR10 User Module software implementation file
     8                          ;;
     9                          ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
    10                          ;;        arguments and observe the associated "Registers are volatile" policy.
    11                          ;;        This means it is the caller's responsibility to preserve any values
    12                          ;;        in the X and A registers that are still needed after the API functions
    13                          ;;        returns. For Large Memory Model devices it is also the caller's 
    14                          ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
    15                          ;;        MVW_PP registers. Even though some of these registers may not be modified
    16                          ;;        now, there is no guarantee that will remain the case in future releases.
    17                          ;;-----------------------------------------------------------------------------
    18                          ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
    19                          ;;*****************************************************************************
    20                          ;;*****************************************************************************
    21                          
    22                          include "m8c.inc"
    23                          include "memory.inc"
    24                          include "SAR10.inc"
    25                          
    26                          ;-----------------------------------------------
    27                          ;  Global Symbols
    28                          ;-----------------------------------------------
    29                          export  SAR10_EnableInt
    30                          export _SAR10_EnableInt
    31                          export  SAR10_DisableInt
    32                          export _SAR10_DisableInt
    33                          export  SAR10_Start
    34                          export _SAR10_Start
    35                          export  SAR10_Stop
    36                          export _SAR10_Stop
    37                          export  SAR10_Trigger
    38                          export _SAR10_Trigger
    39                          export  SAR10_fIsDataAvailable
    40                          export _SAR10_fIsDataAvailable
    41                          export  SAR10_iGetData
    42                          export _SAR10_iGetData
    43                          export  SAR10_bGetData
    44                          export _SAR10_bGetData
    45                          export  SAR10_SetADCChannel
    46                          export _SAR10_SetADCChannel
    47                          export  SAR10_SetTriggerSrc
    48                          export _SAR10_SetTriggerSrc
    49                          export  SAR10_EnableAutoTrigger
    50                          export _SAR10_EnableAutoTrigger
    51                          export  SAR10_SetClk
    52                          export _SAR10_SetClk
    53                          export  SAR10_SetRunMode
    54                          export _SAR10_SetRunMode
    55                          
    56                          AREA led_display_RAM (RAM,REL)
    57                          
    58                          ;-----------------------------------------------
    59                          ;  Constant Definitions
    60                          ;-----------------------------------------------
    61                          
    62                          ;-----------------------------------------------
    63                          ; Variable Allocation
    64                          ;-----------------------------------------------
    65                          
    66                          
    67                          AREA UserModules (ROM, REL)
    68                          
    69                          .SECTION
    70                          ;-----------------------------------------------------------------------------
    71                          ;  FUNCTION NAME: SAR10_EnableInt
    72                          ;
    73                          ;  DESCRIPTION:
    74                          ;     Enables the interrupt mode operation by setting the interrupt enable mask bit
    75                          ;     associated with this User Module. This function has no effect until and
    76                          ;     unless the global interrupts are enabled (for example by using the
    77                          ;     macro M8C_EnableGInt).
    78                          ;-----------------------------------------------------------------------------
    79                          ;
    80                          ;  ARGUMENTS:    None.
    81                          ;  RETURNS:      Nothing.
    82                          ;  SIDE EFFECTS: 
    83                          ;    The A and X registers may be modified by this or future implementations
    84                          ;    of this function.  The same is true for all RAM page pointer registers in
    85                          ;    the Large Memory Model.  When necessary, it is the calling function's
    86                          ;    responsibility to perserve their values across calls to fastcall16 
    87                          ;    functions.
    88                          ;
    89  2C90                     SAR10_EnableInt:
    90  2C90                    _SAR10_EnableInt:
    91                             RAM_PROLOGUE RAM_USE_CLASS_1
    92  2C90  43 DF 10             SAR10_EnableInt_M
    93                             RAM_EPILOGUE RAM_USE_CLASS_1
    94  2C93  7F                   ret
    95                          
    96                          .ENDSECTION
    97                          
    98                          
    99                          .SECTION
   100                          ;-----------------------------------------------------------------------------
   101                          ;  FUNCTION NAME: SAR10_DisableInt
   102                          ;
   103                          ;  DESCRIPTION:
   104                          ;     Disables the interrupt mode operation by clearing the interrupt enable
   105                          ;     mask bit associated with this User Module.
   106                          ;-----------------------------------------------------------------------------
   107                          ;
   108                          ;  ARGUMENTS:    None
   109                          ;  RETURNS:      Nothing
   110                          ;  SIDE EFFECTS: 
   111                          ;    The A and X registers may be modified by this or future implementations
   112                          ;    of this function.  The same is true for all RAM page pointer registers in
   113                          ;    the Large Memory Model.  When necessary, it is the calling function's
   114                          ;    responsibility to perserve their values across calls to fastcall16 
   115                          ;    functions.
   116                          ;
   117  2C94                     SAR10_DisableInt:
   118  2C94                    _SAR10_DisableInt:
   119                             RAM_PROLOGUE RAM_USE_CLASS_1
   120  2C94  41 DF EF             SAR10_DisableInt_M
   121                             RAM_EPILOGUE RAM_USE_CLASS_1
   122  2C97  7F                   ret
   123                          
   124                          .ENDSECTION
   125                          
   126                          
   127                          .SECTION
   128                          ;-----------------------------------------------------------------------------
   129                          ;  FUNCTION NAME: SAR10_Start
   130                          ;
   131                          ;  DESCRIPTION:
   132                          ;     Enables SAR operation. 
   133                          ;     Set the ADC_EN bit in SAR_CR0 register
   134                          ;-----------------------------------------------------------------------------
   135                          ;
   136                          ;  ARGUMENTS:    None
   137                          ;  RETURNS:      Nothing
   138                          ;  SIDE EFFECTS: 
   139                          ;    The A and X registers may be modified by this or future implementations
   140                          ;    of this function.  The same is true for all RAM page pointer registers in
   141                          ;    the Large Memory Model.  When necessary, it is the calling function's
   142                          ;    responsibility to perserve their values across calls to fastcall16 
   143                          ;    functions.
   144                          ;
   145  2C98                     SAR10_Start:
   146  2C98                    _SAR10_Start:
   147                             RAM_PROLOGUE RAM_USE_CLASS_1
   148  2C98  71 10                M8C_SetBank1
   149  2C9A  43 A8 01             SAR10_Start_M
   150  2C9D  70 EF                M8C_SetBank0
   151                             RAM_EPILOGUE RAM_USE_CLASS_1
   152  2C9F  7F                   ret
   153                          
   154                          .ENDSECTION
   155                          
   156                          
   157                          .SECTION
   158                          ;-----------------------------------------------------------------------------
   159                          ;  FUNCTION NAME: SAR10_Stop
   160                          ;
   161                          ;  DESCRIPTION:
   162                          ;     Disables SAR operation 
   163                          ;     Clear ADC_EN bit in SAR_CR0 register
   164                          ;-----------------------------------------------------------------------------
   165                          ;
   166                          ;  ARGUMENTS:    None
   167                          ;  RETURNS:      Nothing
   168                          ;  SIDE EFFECTS: 
   169                          ;    The A and X registers may be modified by this or future implementations
   170                          ;    of this function.  The same is true for all RAM page pointer registers in
   171                          ;    the Large Memory Model.  When necessary, it is the calling function's
   172                          ;    responsibility to perserve their values across calls to fastcall16 
   173                          ;    functions.
   174                          ;
   175  2CA0                     SAR10_Stop:
   176  2CA0                    _SAR10_Stop:
   177                             RAM_PROLOGUE RAM_USE_CLASS_1
   178  2CA0  71 10                M8C_SetBank1
   179  2CA2  41 A8 FE             SAR10_Stop_M
   180  2CA5  70 EF                M8C_SetBank0
   181                             RAM_EPILOGUE RAM_USE_CLASS_1
   182  2CA7  7F                   ret
   183                          
   184                          .ENDSECTION
   185                          
   186                          .SECTION
   187                          ;-----------------------------------------------------------------------------
   188                          ;  FUNCTION NAME: SAR10_Trigger
   189                          ;
   190                          ;  DESCRIPTION:
   191                          ;     Trigger the SAR to sample for one time
   192                          ;     Set START/ONGOING bit in SAR_CR0 register
   193                          ;
   194                          ;-----------------------------------------------------------------------------
   195                          ;
   196                          ;  ARGUMENTS:   Nothing
   197                          ;  RETURNS:         Nothing
   198                          ;  SIDE EFFECTS: 
   199                          ;    The A and X registers may be modified by this or future implementations
   200                          ;    of this function.  The same is true for all RAM page pointer registers in
   201                          ;    the Large Memory Model.  When necessary, it is the calling function's
   202                          ;    responsibility to perserve their values across calls to fastcall16 
   203                          ;    functions.
   204                          ;
   205  2CA8                     SAR10_Trigger:
   206  2CA8                    _SAR10_Trigger:
   207                             RAM_PROLOGUE RAM_USE_CLASS_1
   208  2CA8  71 10                M8C_SetBank1
   209  2CAA  43 A8 02             or    reg[SAR10_SAR_CR0_REG], SAR10_SAR_CR0_REG_SW_TRIG_BIT
   210  2CAD  70 EF                M8C_SetBank0
   211                             RAM_EPILOGUE RAM_USE_CLASS_1
   212  2CAF  7F                   ret
   213                          
   214                          .ENDSECTION
   215                          
   216                          .SECTION
   217                          ;-----------------------------------------------------------------------------
   218                          ;  FUNCTION NAME: SAR10_fIsDataAvailable
   219                          ;
   220                          ;  DESCRIPTION:
   221                          ;     Checks the availability of sampled data.
   222                          ;     Get READY bit from SAR_CR0 register
   223                          ;
   224                          ;-----------------------------------------------------------------------------
   225                          ;
   226                          ;  ARGUMENTS:   None
   227                          ;  RETURNS:     fastcall16 BYTE fIsDataAvailable (void)
   228                          ;  SIDE EFFECTS: 
   229                          ;    The A and X registers may be modified by this or future implementations
   230                          ;    of this function.  The same is true for all RAM page pointer registers in
   231                          ;    the Large Memory Model.  When necessary, it is the calling function's
   232                          ;    responsibility to perserve their values across calls to fastcall16 
   233                          ;    functions.
   234                          ;
   235  2CB0                     SAR10_fIsDataAvailable:
   236  2CB0                    _SAR10_fIsDataAvailable:
   237                             RAM_PROLOGUE RAM_USE_CLASS_4
   238  2CB0  71 10                M8C_SetBank1
   239  2CB2  5D A8                mov   A,reg[SAR10_SAR_CR0_REG]    ; Read value of SAR_CR0 register
   240  2CB4  70 EF                M8C_SetBank0
   241  2CB6  21 04                and   A,SAR10_READY_MASK                   ; Checks the availability of sampled data.
   242                             RAM_EPILOGUE RAM_USE_CLASS_4
   243  2CB8  7F                   ret
   244                          
   245                          .ENDSECTION
   246                          
   247                          .SECTION
   248                          ;-----------------------------------------------------------------------------
   249                          ;  FUNCTION NAME: SAR10_iGetData
   250                          ;
   251                          ;  DESCRIPTION:
   252                          ;     Returns last converted data.
   253                          ;     SAR_DL will be read first, then the SAR_DH
   254                          ;     The MSB is returned in X and the LSB in A
   255                          ;     Note: this function returns correct result only in right-justify mode 
   256                          ;     for CY8C28x45 device.
   257                          ;
   258                          ;-----------------------------------------------------------------------------
   259                          ;
   260                          ;  ARGUMENTS:   None
   261                          ;  RETURNS:     fastcall16 INT iGetData(void)
   262                          ;  SIDE EFFECTS: 
   263                          ;    The A and X registers may be modified by this or future implementations
   264                          ;    of this function.  The same is true for all RAM page pointer registers in
   265                          ;    the Large Memory Model.  When necessary, it is the calling function's
   266                          ;    responsibility to perserve their values across calls to fastcall16 
   267                          ;    functions.
   268                          ;
   269  FFFFFFFE                       Temp_offs:         equ  -2
   270  FFFFFFFF                       DL_REG_offs:       equ  -1
   271                                  
   272  2CB9                     SAR10_iGetData:
   273  2CB9                    _SAR10_iGetData:
   274  2CB9  71 40                RAM_PROLOGUE RAM_USE_CLASS_2
   275                          IF(SAR10_Justify)  ; for CY8C28x45 Device
   276                             mov   A, reg[SAR10_SAR_DL_REG]  ; Get 8 lowest bits
   277                             push  A                                    ; Store 8 lowest bits in stack
   278                             mov   A, reg[SAR10_SAR_DH_REG]  ; Read 2 highest bits
   279                             mov   X, A                                 ; Get MSB of result
   280                             pop   A                                    ; Get LSB of result
   281                          ELSE ;for CY8C22x45 device
   282  2CBB  50 00                mov   A, 0x00                              ; Init local var
   283  2CBD  08                   push  A                                    ; Reserve one byte in stack
   284  2CBE  5D 6B                mov   A, reg[SAR10_SAR_DL_REG]  ; Get 2 lowest bits
   285  2CC0  08                   push  A                                    ; Store 2 lowest bits in stack
   286  2CC1  4F                   mov   X, SP                                ; Set SP in X
   287  2CC2  5D 6A                mov   A, reg[SAR10_SAR_DH_REG]  ; Read 8 highest bits
   288  2CC4  64                   asl   A                                    ; Determine two highest bits and store it in stack
   289  2CC5  6C FE                rlc   [X+Temp_offs]
   290  2CC7  64                   asl   A
   291  2CC8  6C FE                rlc   [X+Temp_offs]
   292  2CCA  2B FF                or    A, [X+DL_REG_offs]                    ; Form LSB of result
   293  2CCC  20                   pop   X                                     
   294  2CCD  20                   pop   X                                     ; Get MSB of result
   295                          ENDIF
   296                             RAM_EPILOGUE RAM_USE_CLASS_2
      + 2CCE  70 3F             	and	f, 0x3F
      + 2CD0  71 80             	or	f, 0x80
   297  2CD2  7F                   ret
   298                          
   299                          .ENDSECTION
   300                          
   301                          .SECTION
   302                          ;-----------------------------------------------------------------------------
   303                          ;  FUNCTION NAME: SAR10_GetDataMSB8
   304                          ;
   305                          ;  DESCRIPTION:
   306                          ;    Returns last converted data.
   307                          ;    Note: this function returns correct result only in left-justify mode
   308                          ;    for CY8C28x45 device.  
   309                          ;
   310                          ;-----------------------------------------------------------------------------
   311                          ;
   312                          ;  ARGUMENTS:    Nothing
   313                          ;  RETURNS:          fastcall16 char GetDataMSB8(void)
   314                          ;  SIDE EFFECTS: 
   315                          ;    The A and X registers may be modified by this or future implementations
   316                          ;    of this function.  The same is true for all RAM page pointer registers in
   317                          ;    the Large Memory Model.  When necessary, it is the calling function's
   318                          ;    responsibility to perserve their values across calls to fastcall16 
   319                          ;    functions.
   320                          ;
   321  2CD3                     SAR10_bGetData:
   322  2CD3                    _SAR10_bGetData:
   323                             RAM_PROLOGUE RAM_USE_CLASS_1
   324  2CD3  5D 6A                mov   A,reg[SAR10_SAR_DH_REG]
   325                             RAM_EPILOGUE RAM_USE_CLASS_1
   326  2CD5  7F                   ret
   327                          
   328                          .ENDSECTION
   329                          
   330                          .SECTION
   331                          ;-----------------------------------------------------------------------------
   332                          ;  FUNCTION NAME: SAR10_SelectADCChannel
   333                          ;
   334                          ;  DESCRIPTION:
   335                          ;    Select the SAR input from 14 optional input channels.
   336                          ;   Set ADC_CHS bits in SAR_CR0 register
   337                          ;-----------------------------------------------------------------------------
   338                          ;
   339                          ;  ARGUMENTS:    fastcall16 void SelectADCChannel(passed in A)
   340                          ;  RETURNS:    None
   341                          ;  SIDE EFFECTS: 
   342                          ;    The A and X registers may be modified by this or future implementations
   343                          ;    of this function.  The same is true for all RAM page pointer registers in
   344                          ;    the Large Memory Model.  When necessary, it is the calling function's
   345                          ;    responsibility to perserve their values across calls to fastcall16 
   346                          ;    functions.
   347                          ;
   348  2CD6                     SAR10_SetADCChannel:
   349  2CD6                    _SAR10_SetADCChannel:
   350  2CD6  71 40                RAM_PROLOGUE RAM_USE_CLASS_2
   351  2CD8  21 78                and   A, SAR10_CHN_SEL_MASK
   352  2CDA  4F                   mov   X, SP
   353  2CDB  08                   push  A                                     ; store value in stack
   354  2CDC  71 10                M8C_SetBank1
   355  2CDE  5D A8                mov   A, reg[SAR10_SAR_CR0_REG]  ; get register value
   356  2CE0  21 87                and   A, ~SAR10_CHN_SEL_MASK     ; clear ADC_CHS bits
   357  2CE2  2B 00                or    A, [X]                                ; set ADC_CHS bits
   358  2CE4  60 A8                mov   reg[SAR10_SAR_CR0_REG], A  ; set new register value
   359  2CE6  70 EF                M8C_SetBank0
   360  2CE8  18                   pop   A
   361                             RAM_EPILOGUE RAM_USE_CLASS_2
      + 2CE9  70 3F             	and	f, 0x3F
      + 2CEB  71 80             	or	f, 0x80
   362  2CED  7F                   ret
   363                          
   364                          .ENDSECTION
   365                          
   366                          .SECTION
   367                          ;-----------------------------------------------------------------------------
   368                          ;  FUNCTION NAME: SAR10_SelectTriggerSrc
   369                          ;
   370                          ;  DESCRIPTION:
   371                          ;    Select the SAR10 auto-trigger source 
   372                          ;    by setting TIGSEL in SAR_CR1
   373                          ;
   374                          ;-----------------------------------------------------------------------------
   375                          ;
   376                          ;  ARGUMENTS:    fastcall16 void SelectTriggerSrc(passed in A)
   377                          ;  RETURNS:    None
   378                          ;  SIDE EFFECTS: 
   379                          ;    The A and X registers may be modified by this or future implementations
   380                          ;    of this function.  The same is true for all RAM page pointer registers in
   381                          ;    the Large Memory Model.  When necessary, it is the calling function's
   382                          ;    responsibility to perserve their values across calls to fastcall16 
   383                          ;    functions.
   384                          ;
   385  2CEE                     SAR10_SetTriggerSrc:
   386  2CEE                    _SAR10_SetTriggerSrc:
   387  2CEE  71 40                RAM_PROLOGUE RAM_USE_CLASS_2
   388  2CF0  21 30                and   A, SAR10_TRG_SEL_MASK 
   389  2CF2  4F                   mov   X, SP
   390  2CF3  08                   push  A                                    ; store value in stack
   391  2CF4  71 10                M8C_SetBank1
   392  2CF6  5D A9                mov   A, reg[SAR10_SAR_CR1_REG]  ; get register value
   393  2CF8  21 CF                and   A, ~SAR10_TRG_SEL_MASK     ; clear TIGSEL bits
   394  2CFA  2B 00                or    A, [X]                                ; set TIGSEL bits
   395  2CFC  60 A9                mov   reg[SAR10_SAR_CR1_REG], A  ; set new register value
   396  2CFE  70 EF                M8C_SetBank0
   397  2D00  18                   pop   A
   398                             RAM_EPILOGUE RAM_USE_CLASS_2
      + 2D01  70 3F             	and	f, 0x3F
      + 2D03  71 80             	or	f, 0x80
   399  2D05  7F                   ret
   400                          
   401                          .ENDSECTION
   402                          
   403                          .SECTION
   404                          ;-----------------------------------------------------------------------------
   405                          ;  FUNCTION NAME: SAR10_EnableAutoTrigger
   406                          ;
   407                          ;  DESCRIPTION:
   408                          ;    Global enable CR of the SAR10 auto-trigger function by setting 
   409                          ;    by setting ALIGN_EN in SAR_CR1
   410                          ;
   411                          ;-----------------------------------------------------------------------------
   412                          ;
   413                          ;  ARGUMENTS:    fastcall16 void EnableAutoTrigger(passed in A)
   414                          ;  RETURNS:    None
   415                          ;  SIDE EFFECTS: 
   416                          ;    The A and X registers may be modified by this or future implementations
   417                          ;    of this function.  The same is true for all RAM page pointer registers in
   418                          ;    the Large Memory Model.  When necessary, it is the calling function's
   419                          ;    responsibility to perserve their values across calls to fastcall16 
   420                          ;    functions.
   421                          ;
   422  2D06                     SAR10_EnableAutoTrigger:
   423  2D06                    _SAR10_EnableAutoTrigger:
   424  2D06  71 40                RAM_PROLOGUE RAM_USE_CLASS_2
   425  2D08  21 01                and   A, SAR10_ALIGN_EN_MASK
   426  2D0A  4F                   mov   X, SP
   427  2D0B  08                   push  A                                    ; store value in stack
   428  2D0C  71 10                M8C_SetBank1
   429  2D0E  5D A9                mov   A, reg[SAR10_SAR_CR1_REG]  ; get register value
   430  2D10  21 FE                and   A, ~SAR10_ALIGN_EN_MASK    ; clear ALIGN_EN bits
   431  2D12  2B 00                or    A, [X]                                ; set ALIGN_EN bits
   432  2D14  60 A9                mov   reg[SAR10_SAR_CR1_REG], A  ; set new register value
   433  2D16  70 EF                M8C_SetBank0
   434  2D18  18                   pop   A
   435                             RAM_EPILOGUE RAM_USE_CLASS_2
      + 2D19  70 3F             	and	f, 0x3F
      + 2D1B  71 80             	or	f, 0x80
   436  2D1D  7F                   ret
   437                          
   438                          .ENDSECTION
   439                          
   440                          .SECTION
   441                          ;-----------------------------------------------------------------------------
   442                          ;  FUNCTION NAME: SAR10_SetClk
   443                          ;
   444                          ;  DESCRIPTION:
   445                          ;    Set SAR Sample Rate and Clock Selection 
   446                          ;    by setting CLKSEL bits in SAR_CR1
   447                          ;
   448                          ;-----------------------------------------------------------------------------
   449                          ;
   450                          ;  ARGUMENTS:    fastcall16 void SetClk(passed in A)
   451                          ;  RETURNS:    None
   452                          ;  SIDE EFFECTS: 
   453                          ;    The A and X registers may be modified by this or future implementations
   454                          ;    of this function.  The same is true for all RAM page pointer registers in
   455                          ;    the Large Memory Model.  When necessary, it is the calling function's
   456                          ;    responsibility to perserve their values across calls to fastcall16 
   457                          ;    functions.
   458                          ;
   459  2D1E                     SAR10_SetClk:
   460  2D1E                    _SAR10_SetClk:
   461  2D1E  71 40                RAM_PROLOGUE RAM_USE_CLASS_2
   462  2D20  21 0E                and   A, SAR10_CLK_SEL_MASK
   463  2D22  4F                   mov   X, SP
   464  2D23  08                   push  A                                    ; store value in stack
   465  2D24  71 10                M8C_SetBank1
   466  2D26  5D A9                mov   A, reg[SAR10_SAR_CR1_REG]  ; get register value
   467  2D28  21 F1                and   A, ~SAR10_CLK_SEL_MASK     ; clear CLKSEL bits
   468  2D2A  2B 00                or    A, [X]                                ; set CLKSEL bits
   469  2D2C  60 A9                mov   reg[SAR10_SAR_CR1_REG], A  ; set new register value
   470  2D2E  70 EF                M8C_SetBank0
   471  2D30  18                   pop   A
   472                             RAM_EPILOGUE RAM_USE_CLASS_2
      + 2D31  70 3F             	and	f, 0x3F
      + 2D33  71 80             	or	f, 0x80
   473  2D35  7F                   ret
   474                          
   475                          .ENDSECTION
   476                          
   477                          .SECTION
   478                          ;-----------------------------------------------------------------------------
   479                          ;  FUNCTION NAME: SAR10_SetRunMode
   480                          ;
   481                          ;  DESCRIPTION:
   482                          ;    Set free-running mode for SAR
   483                          ;    by setting FREERUN bits in SAR_CR2
   484                          ;
   485                          ;-----------------------------------------------------------------------------
   486                          ;
   487                          ;  ARGUMENTS:    fastcall16 void SetRunMode(passed in A)
   488                          ;  RETURNS:    None
   489                          ;  SIDE EFFECTS: 
   490                          ;    The A and X registers may be modified by this or future implementations
   491                          ;    of this function.  The same is true for all RAM page pointer registers in
   492                          ;    the Large Memory Model.  When necessary, it is the calling function's
   493                          ;    responsibility to perserve their values across calls to fastcall16 
   494                          ;    functions.
   495                          ;
   496  2D36                     SAR10_SetRunMode:
   497  2D36                    _SAR10_SetRunMode:
   498  2D36  71 40                RAM_PROLOGUE RAM_USE_CLASS_2
   499  2D38  21 08                and   A, SAR10_FREE_RUN_MASK
   500  2D3A  4F                   mov   X, SP
   501  2D3B  08                   push  A                                    ; store value in stack
   502  2D3C  71 10                M8C_SetBank1
   503  2D3E  5D AA                mov   A, reg[SAR10_SAR_CR2_REG]  ; get register value
   504  2D40  21 F7                and   A, ~SAR10_FREE_RUN_MASK    ; clear FREERUN bits
   505  2D42  2B 00                or    A, [X]                                ; set FREERUN bits
   506  2D44  60 AA                mov reg[SAR10_SAR_CR2_REG], A   ; set new register value   
   507  2D46  70 EF                M8C_SetBank0
   508  2D48  18                   pop   A
   509                             RAM_EPILOGUE RAM_USE_CLASS_2
      + 2D49  70 3F             	and	f, 0x3F
      + 2D4B  71 80             	or	f, 0x80
   510  2D4D  7F                   ret
HI-TECH Software Macro Assembler (PSoC MCU) V9.61
Symbol Table                                                                                               Fri Jun 12 09:25:10 2015
                    Temp_offs FFFFFFFE       _SAR10_EnableAutoTrigger 2D06            SAR10_FREE_RUN_MASK 0008  
          SAR10_ALIGN_EN_MASK 0001               SAR10_READY_MASK 0004             SAR10_TRG_SEL_MASK 0030  
          SAR10_SetADCChannel 2CD6               SAR10_SetRunMode 2D36                 SAR10_bGetData 2CD3  
                       HITECH 0002                FLAG_PGMODE_01b 0040                FLAG_PGMODE_10b 0080  
             SAR10_SAR_DH_REG 006A               SAR10_SAR_DL_REG 006B                 _SAR10_Trigger 2CA8  
                 SAR10_SetClk 2D1E              _SAR10_SetRunMode 2D36                 SAR10_iGetData 2CB9  
       SAR10_fIsDataAvailable 2CB0                SAR10_EnableInt 2C90      SYSTEM_LARGE_MEMORY_MODEL 0001  
      _SAR10_fIsDataAvailable 2CB0                  SAR10_INT_REG 00DF                _SAR10_bGetData 2CD3  
           SAR10_CHN_SEL_MASK 0078                    DL_REG_offs FFFFFFFF                      TOOLCHAIN 0002  
            SAR10_SAR_CR0_REG 00A8              SAR10_SAR_CR1_REG 00A9              SAR10_SAR_CR2_REG 00AA  
SAR10_SAR_CR0_REG_SW_TRIG_BIT 0002               FLAG_PGMODE_MASK 00C0                _SAR10_iGetData 2CB9  
              RAM_USE_CLASS_1 0001                RAM_USE_CLASS_2 0002                RAM_USE_CLASS_3 0004  
              RAM_USE_CLASS_4 0008                  _SAR10_SetClk 2D1E                  SAR10_Justify 0000  
                  SAR10_Start 2C98                  SAR10_Trigger 2CA8    SAR10_SAR_CR0_REG_START_BIT 0001  
           SAR10_CLK_SEL_MASK 000E           _SAR10_SetTriggerSrc 2CEE        SAR10_EnableAutoTrigger 2D06  
                 _SAR10_Start 2C98                     SAR10_Stop 2CA0               SAR10_DisableInt 2C94  
           SAR10_INT_SAR_MASK 0010                    _SAR10_Stop 2CA0                  FLAG_XIO_MASK 0010  
            _SAR10_DisableInt 2C94     SYSTEM_IDXPG_TRACKS_IDX_PP 0001               _SAR10_EnableInt 2C90  
         _SAR10_SetADCChannel 2CD6     SYSTEM_IDXPG_TRACKS_STK_PP 0000            SAR10_SetTriggerSrc 2CEE  
HI-TECH Software Macro Assembler (PSoC MCU) V9.61
                                                                                                           Fri Jun 12 09:25:10 2015
     1                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     2                          ;;;
     3                          ;;;  M8C.INC -- Microcontroller Device System Declarations
     4                          ;;;
     5                          ;;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
     6                          ;;;
     7                          ;;;  This file provides address constants, bit field masks and a set of macro
     8                          ;;;  facilities for the Cypress Semiconductor CY8C22045 Microcontroller devices.
     9                          ;;;
    10                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    11                          
    12                          ;;=============================================================================
    13                          ;; Definition of abbreviations used in the descriptions below
    14                          ;;  (RW)   The register or bit supports reads and writes
    15                          ;;  (W)    The register or bit is write-only
    16                          ;;  (R)    The register or bit is read-only
    17                          ;;  (#)    Access to the register is bit specific (see the family datasheet)
    18                          ;;  (RC)   The register or bit can be read, but writing a 0 will clear it,
    19                          ;;         writing a 1 will have no effect.
    20                          ;;=============================================================================
    21                          
    22                          ;;=============================================================================
    23                          ;;      System Registers
    24                          ;;=============================================================================
    25                          
    26                          ;----------------------------
    27                          ;  Flag Register Bit Fields
    28                          ;----------------------------
    29  00C0                    FLAG_PGMODE_MASK:  equ 0C0h     ; Paging control for > 256 bytes of RAM
    30  0000                    FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
    31  0040                    FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
    32  0080                    FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
    33  00C0                    FLAG_PGMODE_3:     equ 0C0h       ; Direct to CUR_PP page, indexed to STK_PP page
    34  0000                    FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
    35  0040                    FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
    36  0080                    FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
    37  00C0                    FLAG_PGMODE_11b:   equ 0C0h       ; Same as PGMODE_3
    38  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    39  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    40  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    41  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    42  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    43                          
    44                          
    45                          ;;=============================================================================
    46                          ;;      Register Space, Bank 0
    47                          ;;=============================================================================
    48                          
    49                          ;------------------------------------------------
    50                          ;  Port Registers
    51                          ;  Note: Also see this address range in Bank 1.
    52                          ;------------------------------------------------
    53                          ; Port 0
    54  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    55  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    56  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    57  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    58                          ; Port 1
    59  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    60  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    61  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    62  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    63                          ; Port 2
    64  0008                    PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
    65  0009                    PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
    66  000A                    PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
    67  000B                    PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
    68                          ; Port 3
    69  000C                    PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
    70  000D                    PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
    71  000E                    PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
    72  000F                    PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
    73                          ; Port 4
    74  0010                    PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
    75  0011                    PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
    76  0012                    PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
    77  0013                    PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
    78                          
    79                          ;------------------------------------------------
    80                          ;  Digital PSoC(tm) block Registers
    81                          ;  Note: Also see this address range in Bank 1.
    82                          ;------------------------------------------------
    83                          ; Digital PSoC block 00, Basic Type C
    84  0020                    DBC00DR0:     equ 20h          ; data register 0                          (#)
    85  0021                    DBC00DR1:     equ 21h          ; data register 1                          (W)
    86  0022                    DBC00DR2:     equ 22h          ; data register 2                          (RW)
    87  0023                    DBC00CR0:     equ 23h          ; control & status register 0              (#)
    88                          
    89                          ; Digital PSoC block 01, Basic Type C
    90  0024                    DBC01DR0:     equ 24h          ; data register 0                          (#)
    91  0025                    DBC01DR1:     equ 25h          ; data register 1                          (W)
    92  0026                    DBC01DR2:     equ 26h          ; data register 2                          (RW)
    93  0027                    DBC01CR0:     equ 27h          ; control & status register 0              (#)
    94                          
    95                          ; Digital PSoC block 02, Communications Type C
    96  0028                    DCC02DR0:     equ 28h          ; data register 0                          (#)
    97  0029                    DCC02DR1:     equ 29h          ; data register 1                          (W)
    98  002A                    DCC02DR2:     equ 2Ah          ; data register 2                          (RW)
    99  002B                    DCC02CR0:     equ 2Bh          ; control & status register 0              (#)
   100                          
   101                          ; Digital PSoC block 03, Communications Type C
   102  002C                    DCC03DR0:     equ 2Ch          ; data register 0                          (#)
   103  002D                    DCC03DR1:     equ 2Dh          ; data register 1                          (W)
   104  002E                    DCC03DR2:     equ 2Eh          ; data register 2                          (RW)
   105  002F                    DCC03CR0:     equ 2Fh          ; control & status register 0              (#)
   106                          
   107                          ; Digital PSoC block 10, Basic Type C
   108  0030                    DBC10DR0:     equ 30h          ; data register 0                          (#)
   109  0031                    DBC10DR1:     equ 31h          ; data register 1                          (W)
   110  0032                    DBC10DR2:     equ 32h          ; data register 2                          (RW)
   111  0033                    DBC10CR0:     equ 33h          ; control & status register 0              (#)
   112                          
   113                          ; Digital PSoC block 11, Basic Type C
   114  0034                    DBC11DR0:     equ 34h          ; data register 0                          (#)
   115  0035                    DBC11DR1:     equ 35h          ; data register 1                          (W)
   116  0036                    DBC11DR2:     equ 36h          ; data register 2                          (RW)
   117  0037                    DBC11CR0:     equ 37h          ; control & status register 0              (#)
   118                          
   119                          ; Digital PSoC block 12, Communications Type C
   120  0038                    DCC12DR0:     equ 38h          ; data register 0                          (#)
   121  0039                    DCC12DR1:     equ 39h          ; data register 1                          (W)
   122  003A                    DCC12DR2:     equ 3Ah          ; data register 2                          (RW)
   123  003B                    DCC12CR0:     equ 3Bh          ; control & status register 0              (#)
   124                          
   125                          ; Digital PSoC block 13, Communications Type C
   126  003C                    DCC13DR0:     equ 3Ch          ; data register 0                          (#)
   127  003D                    DCC13DR1:     equ 3Dh          ; data register 1                          (W)
   128  003E                    DCC13DR2:     equ 3Eh          ; data register 2                          (RW)
   129  003F                    DCC13CR0:     equ 3Fh          ; control & status register 0              (#)
   130                          
   131                          ;-------------------------------------
   132                          ;  Analog Control Registers
   133                          ;-------------------------------------
   134  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
   135  00C0                    AMX_IN_ACI3:          equ C0h    ; MASK: column 3 input mux
   136  0030                    AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
   137  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
   138  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
   139                          
   140  0061                    AMUX_CFG:      equ 61h          ; Analog MUX Configuration
   141  0030                    AMUX_CFG_INTCAP:       equ 30h    ;
   142  000E                    AMUX_CFG_MUXCLK:  	  equ 0Eh	 ;
   143  0001                    AMUX_CFG_EN:		  	  equ 01h	 ;
   144                          
   145                          ; old declarations DO NOT USE
   146  0061                    AMUXCFG:      equ 61h          ; Analog MUX Configuration
   147  0030                    AMUXCFG_INTCAP:       equ 30h    ;
   148  000E                    AMUXCFG_MUXCLK:  	  equ 0Eh	 ;
   149  0001                    AMUXCFG_EN:		  	  equ 01h	 ;
   150                          
   151  0062                    PWM_CR:       equ 62h          ; Pulse-Width Modulator Control
   152  0038                    PWM_CR_HIGH:          equ 38h    ; MASK: PWM high time
   153  0006                    PWM_CR_LOW:           equ 06h	 ; MASK: PWM low time
   154  0001                    PWM_CR_EN:            equ 01h	 ; MASK: Enable/Disable PWM function
   155                          
   156  0063                    ARF_CR:       equ 63h          ; Analog Reference Control
   157                          
   158  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus Register           (#)
   159  0080                    CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
   160  0040                    CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
   161  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
   162  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
   163  0008                    CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
   164  0004                    CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
   165  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
   166  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   167                          
   168  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   169  0020                    CMP_CR1_CLDIS1:       equ 20h    ; MASK: Column 1 comparator output latch
   170  0010                    CMP_CR1_CLDIS0:	      equ 10h    ; MASK: Column 0 comparator output latch
   171                          
   172  0068                    ADC0_CR:      equ 68h          ; Analog Column 0 Configuration
   173  0080                    ADC0_CR_CMPST:        equ 80h    ;
   174  0040                    ADC0_CR_LOREN:        equ 40h    ;
   175  0020                    ADC0_CR_SHEN:         equ 20h    ;
   176  0008                    ADC0_CR_CBSRC:        equ 08h    ;
   177  0004                    ADC0_CR_ADCM:         equ 04h    ;
   178  0001                    ADC0_CR_EN:	          equ 01h    ;
   179                          
   180  0069                    ADC1_CR:      equ 69h          ; Analog Column 1 Configuration
   181  0080                    ADC1_CR_CMPST:        equ 80h    ;
   182  0040                    ADC1_CR_LOREN:        equ 40h    ;
   183  0020                    ADC1_CR_SHEN:         equ 20h    ;
   184  0008                    ADC1_CR_CBSRC:        equ 08h    ;
   185  0004                    ADC1_CR_ADCM:         equ 04h    ;
   186  0001                    ADC1_CR_EN:	          equ 01h    ;
   187+                         
   188+                         ; Continuous Time PSoC block Type E Row 0 Col 0
   189+ 0072                    ACE00CR1:     equ 72h          ; Control register 1                       (RW)
   190+ 0073                    ACE00CR2:     equ 73h          ; Control register 2                       (RW)
   191                          
   192                          ; Continuous Time PSoC block Type E Row 0 Col 1
   193  0076                    ACE01CR1:     equ 76h          ; Control register 1                       (RW)
   194  0077                    ACE01CR2:     equ 77h          ; Control register 2                       (RW)
   195                          
   196                          ; Switched Cap PSoC blockType E Row 1 Col 0
   197  0080                    ASE10CR0:     equ 80h          ; Control register 0                       (RW)
   198                          
   199                          ; Switched Cap PSoC blockType E Row 1 Col 1
   200  0084                    ASE11CR0:     equ 84h          ; Control register 0                       (RW)
   201                          
   202                          ;-----------------------------------------------
   203                          ;  Global General Purpose Data Registers
   204                          ;-----------------------------------------------
   205  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   206  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   207  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   208  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   209                          
   210                          ;------------------------------------------------
   211                          ;  Row Digital Interconnects
   212                          ;
   213                          ;  Note: the following registers are mapped into
   214                          ;  both register bank 0 AND register bank 1.
   215                          ;------------------------------------------------
   216                          
   217  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   218  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   219  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   220  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   221  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   222  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   223  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   224                          
   225  00B8                    RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
   226  00B9                    RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
   227  00BA                    RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
   228  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   229  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   230  00BD                    RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
   231  00BE                    RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
   232                          
   233                          ;-----------------------------------------------
   234                          ;  Ram Page Pointers
   235                          ;-----------------------------------------------
   236  00D0                    CUR_PP:      equ 0D0h           ; Current   Page Pointer
   237  00D1                    STK_PP:      equ 0D1h           ; Stack     Page Pointer
   238  00D3                    IDX_PP:      equ 0D3h           ; Index     Page Pointer
   239  00D4                    MVR_PP:      equ 0D4h           ; MVI Read  Page Pointer
   240  00D5                    MVW_PP:      equ 0D5h           ; MVI Write Page Pointer
   241                          
   242                          ;------------------------------------------------
   243                          ;  I2C Configuration Registers
   244                          ;------------------------------------------------
   245  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   246  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   247  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   248  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   249  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   250  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   251  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   252  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   253  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   254  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   255                          
   256  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   257  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   258  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   259  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   260  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   261  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   262  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   263  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   264  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   265                          
   266  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   267                          
   268  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   269  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   270  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   271  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   272  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   273                          
   274                          ;------------------------------------------------
   275                          ;  System and Global Resource Registers
   276                          ;------------------------------------------------
   277  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   278                                                         ; Use INT_MSK0 bit field masks
   279  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   280                                                         ; Use INT_MSK1 bit field masks
   281  00DC                    INT_CLR2:     equ 0DCh          ; Interrupt Clear Register 2               (RW)
   282                                                         ; Use INT_MSK2 bit field masks
   283  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   284                                                         ; Use INT_MSK3 bit field masks
   285                          
   286  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   287  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   288  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   289                          
   290  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   291  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   292  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   293  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   294  0010                    INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
   295  0008                    INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
   296  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   297  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   298  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   299                          
   300  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   301  0080                    INT_MSK1_DCC13:            equ 80h ; MASK: enable/disable DCC13 block interrupt
   302  0040                    INT_MSK1_DCC12:            equ 40h ; MASK: enable/disable DCC12 block interrupt
   303  0020                    INT_MSK1_DBC11:            equ 20h ; MASK: enable/disable DBC11 block interrupt
   304  0010                    INT_MSK1_DBC10:            equ 10h ; MASK: enable/disable DBC10 block interrupt
   305  0008                    INT_MSK1_DCC03:            equ 08h ; MASK: enable/disable DCC03 block interrupt
   306  0004                    INT_MSK1_DCC02:            equ 04h ; MASK: enable/disable DCC02 block interrupt
   307  0002                    INT_MSK1_DBC01:            equ 02h ; MASK: enable/disable DBC01 block interrupt
   308  0001                    INT_MSK1_DBC00:            equ 01h ; MASK: enable/disable DBC00 block interrupt
   309                          
   310  00DF                    INT_MSK2:     equ DFh			; Custom block Mask Register			   (RW)
   311  0010                    INT_MSK2_SARADC:           equ 10h ; MASK: enable/disable SARADC block interrupt
   312  0020                    INT_MSK2_CSD0:             equ 20h ; MASK: enable/disable CSD0 block interrupt
   313  0040                    INT_MSK2_CSD1:             equ 40h ; MASK: enable/disable CSD1 block interrupt
   314  0080                    INT_MSK2_RTC:              equ 80h ; MASK: enable/disable RTC block interrupt
   315                          
   316  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   317  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   318                          
   319                          ;------------------------------------------------------
   320                          ;  MAC Registers
   321                          ;------------------------------------------------------
   322                          
   323  00E8                    MUL0_X:       equ 0E8h          ; Multiply Input X Register                (W)
   324  00E9                    MUL0_Y:       equ 0E9h          ; Multiply Input Y Register                (W)
   325  00EA                    MUL0_DH:      equ 0EAh          ; Multiply Result High Byte Register       (R)
   326  00EB                    MUL0_DL:      equ 0EBh          ; Multiply Result Low Byte Register        (R)
   327                          
   328  00EC                    ACC0_DR1:     equ 0ECh          ; Accumulator Data Register 1              (RW)
   329  00ED                    ACC0_DR0:     equ 0EDh          ; Accumulator Data Register 0              (RW)
   330  00EE                    ACC0_DR3:     equ 0EEh          ; Accumulator Data Register 3              (RW)
   331  00EF                    ACC0_DR2:     equ 0EFh          ; Accumulator Data Register 2              (RW)
   332                          
   333                          ; DECIMATOR Control Registers
   334  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   335  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   336                          
   337                          ;------------------------------------------------------
   338                          ;  System Status and Control Registers
   339                          ;
   340                          ;  Note: The following registers are mapped into both
   341                          ;        register bank 0 AND register bank 1.
   342                          ;------------------------------------------------------
   343  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   344                                                             ; Use FLAG_ masks defined at top of file
   345                          
   346  00FD                    DAC_D:        equ 0FDh		   ; DAC Data Register                        (RW)
   347                          
   348  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   349  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: flag, Internal Reset Status bit
   350  0010                    CPU_SCR1_SLIMO:         equ 10h	   ; MASK: Slow IMO (internal main osc) enable
   351  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   352  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   353  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   354                          
   355  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   356  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   357  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   358  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   359  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   360  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   361                          
   362                          ;------------------------------------------------------
   363                          ;  Neon Capsense Digital Control Registers
   364                          ;------------------------------------------------------
   365  0050                    CSD0_DR0_L:				equ 50h		; Capsense 0 data low 0				(RW)
   366  0054                    CSD0_DR0_H:				equ 54h		; Capsense 0 data high 0			(RW)
   367  0058                    CSD1_DR0_L:				equ 58h		; Capsense 1 data low 0				(RW)
   368  005C                    CSD1_DR0_H:				equ 5Ch		; Capsense 1 data high 0			(RW)
   369  0051                    CSD0_DR1_L:				equ 51h		; Capsense 0 data low 1				(RW)
   370  0055                    CSD0_DR1_H:				equ 55h		; Capsense 0 data high 1			(RW)
   371  0059                    CSD1_DR1_L:				equ 59h		; Capsense 1 data low 1				(RW)
   372  005D                    CSD1_DR1_H:				equ 5Dh		; Capsense 1 data high 1			(RW)
   373  0052                    CSD0_CNT_L:				equ 52h		; Capsense 0 counter low			(RW)
   374  0056                    CSD0_CNT_H:				equ 56h		; Capsense 0 counter high			(RW)
   375  005A                    CSD1_CNT_L:				equ 5Ah		; Capsense 1 counter low			(RW)
   376  005E                    CSD1_CNT_H:				equ	5Eh		; Capsense 1 counter high			(RW)
   377  0053                    CSD0_CR0:				equ 53h		; Capsense 0 control 0				(RW)
   378  005B                    CSD1_CR0:				equ 5Bh		; Capsense 1 control 0				(RW)
   379  0057                    CSD0_CR1:				equ 57h		; Capsense 0 control 1				(RW)
   380  005F                    CSD1_CR1:				equ 5Fh		; Capsense 1 control 1				(RW)
   381                          
   382                          ;------------------------------------------------------
   383                          ;  Neon Analog Registers
   384                          ;------------------------------------------------------
   385  0065                    ASY_CR:					equ 65h		; Analog Synchronization Control	(RW)
   386  006A                    ADC_DH:					equ 6Ah		; ADC data high						(RW)
   387  006B                    ADC_DL:					equ 6Bh		; ADC data low						(RW)
   388  00C8                    PWMVREF0:				equ C8h		; PWM Voltage Reference 0			(RW)
   389  00C9                    PWMVREF1:				equ C9h		; PWM Voltage Reference 1			(RW)
   390  00CB                    PWMSRC:					equ CBh		; PWM Source						(RW)
   391  00CA                    IDACMODE:				equ CAh		; IDAC Mode							(RW)
   392  00FC                    IDACR_D:				equ FCh		; Analog Mux DAC data 0				(RW)
   393  00FD                    IDACL_D:				equ FDh		; Analog Mux DAC data 1				(RW)
   394                          
   395                          ;------------------------------------------------------
   396                          ;  Neon Digital Registers
   397                          ;------------------------------------------------------
   398  00B7                    RDI0DSM:				equ B7h		; Row Digital Interconnect input select 0	(RW)
   399  00BF                    RDI1DSM:				equ BFh		; Row Digital Interconnect input select 1	(RW)
   400                          
   401                          ;------------------------------------------------------
   402                          ;  Neon Test Registers
   403                          ;------------------------------------------------------
   404  00CC                    TSCR0:					equ CCh		; Tsource 0							(RW)
   405  00CD                    TSCMPH:					equ CDh		; TSCMP high						(RW)
   406  00CE                    TSCMPL:					equ CEh		; TSCMP low							(RW)
   407  00CF                    TSCR1:					equ CFh		; Tsource 1							(RW)
   408                          
   409                          ;;=============================================================================
   410                          ;;      Register Space, Bank 1
   411                          ;;=============================================================================
   412                          
   413                          ;------------------------------------------------
   414                          ;  Port Registers
   415                          ;  Note: Also see this address range in Bank 0.
   416                          ;------------------------------------------------
   417                          ; Port 0
   418  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   419  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   420  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   421  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   422                          
   423                          ; Port 1
   424  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   425  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   426  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   427  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   428                          
   429                          ; Port 2
   430  0008                    PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
   431  0009                    PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
   432  000A                    PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
   433  000B                    PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
   434                          
   435                          ; Port 3
   436  000C                    PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
   437  000D                    PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
   438  000E                    PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
   439  000F                    PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
   440                          
   441                          ; Port 4
   442  0010                    PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
   443  0011                    PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
   444  0012                    PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
   445  0013                    PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
   446                          
   447                          ;------------------------------------------------
   448                          ;  Digital PSoC(tm) block Registers
   449                          ;  Note: Also see this address range in Bank 0.
   450                          ;------------------------------------------------
   451                          
   452                          ; Digital PSoC block 00, Basic Type C
   453  0020                    DBC00FN:      equ 20h          ; Function Register                        (RW)
   454  0021                    DBC00IN:      equ 21h          ;    Input Register                        (RW)
   455  0022                    DBC00OU:      equ 22h          ;   Output Register                        (RW)
   456  0023                    DBC00CR1:     equ 23h          ;   control & status register 1            (RW)
   457                          
   458                          ; Digital PSoC block 01, Basic Type C
   459  0024                    DBC01FN:      equ 24h          ; Function Register                        (RW)
   460  0025                    DBC01IN:      equ 25h          ;    Input Register                        (RW)
   461  0026                    DBC01OU:      equ 26h          ;   Output Register                        (RW)
   462  0027                    DBC01CR1:     equ 27h          ;   control & status register 1            (RW)
   463                          
   464                          ; Digital PSoC block 02, Communications Type C
   465  0028                    DCC02FN:      equ 28h          ; Function Register                        (RW)
   466  0029                    DCC02IN:      equ 29h          ;    Input Register                        (RW)
   467  002A                    DCC02OU:      equ 2Ah          ;   Output Register                        (RW)
   468  002B                    DBC02CR1:     equ 2Bh          ;   control & status register 1            (RW)
   469                          
   470                          ; Digital PSoC block 03, Communications Type C
   471  002C                    DCC03FN:      equ 2Ch          ; Function Register                        (RW)
   472  002D                    DCC03IN:      equ 2Dh          ;    Input Register                        (RW)
   473  002E                    DCC03OU:      equ 2Eh          ;   Output Register                        (RW)
   474  0029                    DBC03CR1:     equ 29h          ;   control & status register 1            (RW)
   475                          
   476                          ; Digital PSoC block 10, Basic Type C
   477  0030                    DBC10FN:      equ 30h          ; Function Register                        (RW)
   478  0031                    DBC10IN:      equ 31h          ;    Input Register                        (RW)
   479  0032                    DBC10OU:      equ 32h          ;   Output Register                        (RW)
   480  0033                    DBC10CR1:     equ 33h          ;   control & status register 1            (RW)
   481                          
   482                          ; Digital PSoC block 11, Basic Type C
   483  0034                    DBC11FN:      equ 34h          ; Function Register                        (RW)
   484  0035                    DBC11IN:      equ 35h          ;    Input Register                        (RW)
   485  0036                    DBC11OU:      equ 36h          ;   Output Register                        (RW)
   486  0037                    DBC11CR1:     equ 37h          ;   control & status register 1            (RW)
   487                          
   488                          ; Digital PSoC block 12, Communications Type C
   489  0038                    DCC12FN:      equ 38h          ; Function Register                        (RW)
   490  0039                    DCC12IN:      equ 39h          ;    Input Register                        (RW)
   491  003A                    DCC12OU:      equ 3Ah          ;   Output Register                        (RW)
   492  003B                    DBC12CR1:     equ 3Bh          ;   control & status register 1            (RW)
   493                          
   494                          ; Digital PSoC block 13, Communications Type C
   495  003C                    DCC13FN:      equ 3Ch          ; Function Register                        (RW)
   496  003D                    DCC13IN:      equ 3Dh          ;    Input Register                        (RW)
   497  003E                    DCC13OU:      equ 3Eh          ;   Output Register                        (RW)
   498  003F                    DBC13CR1:     equ 3Fh          ;   control & status register 1            (RW)
   499                          
   500                          ;------------------------------------------------
   501                          ;  System and Global Resource Registers
   502                          ;  Note: Also see this address range in Bank 0.
   503                          ;------------------------------------------------
   504                          
   505  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   506  00C0                    CLK_CR0_ACOLUMN_3:    equ C0h    ; MASK: Specify clock for analog cloumn
   507  0030                    CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
   508  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   509  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   510                          
   511  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   512  0018                    CLK_CR1_ACLK1:        equ 18h    ; MASK: Digital PSoC block for analog source
   513  0003                    CLK_CR1_ACLK0:        equ 03h    ; MASK: Digital PSoC block for analog source
   514                          
   515  0003                    CLK_CR1_ACLK2:        equ 03h    ; Deprecated do not use
   516                          
   517  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   518  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   519                          
   520  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   521  000F                    AMD_CR0_AMOD0:        equ 0Fh    ; MASK: Modulation source for analog column 0
   522                          
   523  0064                    CMP_GO_EN:    equ 64h          ; Comparator Bus To Global Out Enable      (RW)
   524  0080                    CMP_GO_EN_GOO5:       equ 80h    ; MASK: Selected Col 1 signal to GOO5
   525  0040                    CMP_GO_EN_GOO1:       equ 40h    ; MASK: Selected Col 1 signal to GOO1
   526  0030                    CMP_GO_EN_SEL1:       equ 30h    ; MASK: Column 1 Signal Select
   527  0008                    CMP_GO_EN_GOO4:       equ 08h    ; MASK: Selected Col 0 signal to GOO4
   528  0004                    CMP_GO_EN_GOO0:       equ 04h    ; MASK: Selected Col 0 signal to GOO0
   529  0003                    CMP_GO_EN_SEL0:       equ 03h    ; MASK: Column 0 Signal Select
   530                          
   531  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   532  000F                    AMD_CR1_AMOD1:        equ 0Fh    ; MASK: Modulation ctrl for analog column 1
   533                          
   534  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   535  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   536  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   537                          
   538  006B                    CLK_CR3:      equ 6Bh          ; Analog Clock Source Control Register 3   (RW)
   539  0040                    CLK_CR3_SYS1:         equ 40h    ; MASK: Analog Clock 1 selection
   540  0030                    CLK_CR3_DIVCLK1:      equ 30h    ; MASK: Analog Clock 1 divider
   541  0004                    CLK_CR3_SYS0:         equ 04h    ; MASK: Analog Clock 0 selection
   542  0003                    CLK_CR3_DIVCLK0:      equ 03h    ; MASK: Analog Clock 0 divider
   543                          
   544                          ;------------------------------------------------
   545                          ;  Global Digital Interconnects
   546                          ;------------------------------------------------
   547                          
   548  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   549  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   550  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   551  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   552                          
   553  00A0                    GDI_O_IN_CR:  equ 0A0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   554  00A1                    GDI_E_IN_CR:  equ 0A1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   555  00A2                    GDI_O_OU_CR:  equ 0A2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   556  00A3                    GDI_E_OU_CR:  equ 0A3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   557                          
   558  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   559  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   560                          
   561                          ;------------------------------------------------
   562                          ;  Analog Mux Bus Port Enable Bits
   563                          ;------------------------------------------------
   564  00D8                    MUX_CR0:      equ 0D8h          ; Analog Mux Port 0 Bit Enables Register
   565  00D9                    MUX_CR1:      equ 0D9h          ; Analog Mux Port 1 Bit Enables Register
   566  00DA                    MUX_CR2:      equ 0DAh          ; Analog Mux Port 2 Bit Enables Register
   567  00DB                    MUX_CR3:      equ 0DBh          ; Analog Mux Port 3 Bit Enables Register
   568  00EC                    MUX_CR4:      equ 0ECh          ; Analog Mux Port 4 Bit Enables Register
   569                          
   570                          ;------------------------------------------------
   571                          ;  Clock and System Control Registers
   572                          ;------------------------------------------------
   573                          
   574  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   575  0080                    OSC_GO_EN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   576  0040                    OSC_GO_EN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   577  0020                    OSC_GO_EN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   578  0010                    OSC_GO_EN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   579  0008                    OSC_GO_EN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   580  0004                    OSC_GO_EN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   581  0002                    OSC_GO_EN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   582  0001                    OSC_GO_EN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   583                          
   584  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   585  0003                    OSC_CR4_VC3SEL:       equ 03h    ; MASK: System VC3 Clock source
   586                          
   587  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   588                          
   589  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   590  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   591  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   592  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   593  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   594  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   595  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   596  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   597  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   598  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   599  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   600  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   601  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   602  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   603  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   604  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   605  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   606  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   607                          
   608  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   609  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   610  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   611                          
   612  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   613  0080                    OSC_CR2_PLLGAIN:      equ 80h    ; MASK: High/Low gain
   614  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   615  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   616  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   617                          
   618  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   619  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   620  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   621  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   622  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   623  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   624  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   625  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   626                          
   627  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   628  0008                    VLT_CMP_NOWRITE:      equ 08h    ; MASK: Vcc below Flash Write level
   629  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   630  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   631  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   632                          
   633  00E5                    ADC0_TR:      equ 0E5h          ; ADC Column 0 Trim Register
   634  00E6                    ADC1_TR:      equ 0E6h          ; ADC Column 1 Trim Register
   635                          
   636  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   637  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   638  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   639  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   640                          
   641  00FA                    FLS_PR1:      equ 0FAh          ; Flash Program Register 1                 (RW)
   642  0003                    FLS_PR1_BANK:         equ 03h    ; MASK: Select Active Flash Bank
   643                          
   644  00FD                    DAC_CR0:       equ 0FDh          ; Analog Mux DAC Control Register 0
   645  00DC                    DAC_CR1:       equ 0DCh          ; Analog Mux DAC Control Register 1
   646  0008                    DAC_CR_IRANGE:        equ 08h    ; MASK: Sets the DAC Range low or high
   647  0006                    DAC_CR_OSCMODE:       equ 06h    ; MASK: Defines the reset mode for AMux
   648  0001                    DAC_CR_ENABLE:        equ 01h    ; MASK: Enable/Disable DAC function
   649                          
   650                          ;------------------------------------------------
   651                          ;  I2C Control Registers
   652                          ;------------------------------------------------
   653                          
   654  00AD                    I2C_ADDR:    equ 0ADh          ; I2C Address Register (RW)
   655                          
   656                          ;------------------------------------------------------
   657                          ;  Neon Analog Registers
   658                          ;------------------------------------------------------
   659  0053                    VDAC50CR0:		equ 53h			; V DAC5 control 0				(RW)
   660  0057                    VDAC51CR0:		equ 57h			; V DAC5 control 1				(RW)
   661  00A8                    ADC_CR0:		equ A8h			; ADC control 0					(RW)
   662  00A9                    ADC_CR1:		equ A9h			; ADC control 1					(RW)
   663  00AA                    ADC_CR2:		equ AAh			; ADC control 2					(RW)
   664  00AB                    ADC_CR3TRIM:	equ ABh			; ADC control 3					(RW)
   665  00AC                    ADC_CR4:		equ ACh			; ADC control 4					(RW)
   666  00E7                    VDAC_TRIM:		equ E7h			; V DAC trim					(RW)
   667                          
   668                          ;------------------------------------------------------
   669                          ;  Neon Current Sense CMP Registers
   670                          ;------------------------------------------------------
   671  0050                    CMP0CR1:		equ 50h			; CMP0 control 1				(RW)
   672  0051                    CMP0CR2:		equ 51h			; CMP0 control 2				(RW)
   673  0054                    CMP1CR1:		equ 54h			; CMP1 control 1				(RW)
   674  0055                    CMP1CR2:		equ 55h			; CMP1 control 2				(RW)
   675  0058                    CSCMPCR0:		equ 58h			; CSCMP control 0				(RW)
   676  0059                    CSCMPGOEN:		equ 59h			; CSCMO global out enable		(RW)
   677  005A                    CSLUTCR0:		equ 5Ah			; CSLUT control 0				(RW)
   678  005B                    CMPCOLMUX:		equ 5Bh			; CMP Column Mux				(RW)
   679  005C                    CMPPWMCR:		equ 5Ch			; CMP PWM control				(RW)
   680  005D                    CMPFLTCR:		equ 5Dh			; CMP filter control			(RW)
   681  005E                    CMPCLK1:		equ 5Eh			; CMP clock 1					(RW)
   682  005F                    CMPCLK0:		equ 5Fh			; CMP clock 0					(RW)
   683                          
   684                          ;------------------------------------------------------
   685                          ;  Neon Real Time Clock Registers
   686                          ;------------------------------------------------------
   687  00A4                    RTCH:			equ A4h			; Real time current hour		(RW)
   688  00A5                    RTCM:			equ A5h			; Real time current minute		(RW)
   689  00A6                    RTCS:			equ A6h			; Real time current second		(RW)
   690  00A7                    RTCCR:			equ A7h			; Real time clock control		(RW)
   691                          
   692                          ;------------------------------------------------------
   693                          ;  Analog MUX Config Registers
   694                          ;------------------------------------------------------
   695                          
   696  006A                    AMUX_CFG1:			equ 6Ah  ; Analog MUX Configuration 1
   697  0020                    AMUX_CFG1_GOINVR:	equ 20h  ;
   698  0010                    AMUX_CFG1_GOINVL:  	equ 10h	 ;
   699  000C                    AMUX_CFG1_AMUXMODR:	equ 0Ch	 ;
   700  0003                    AMUX_CFG1_AMUXMODL:	equ 03h	 ;
   701                          
   702                          ;;=============================================================================
   703                          ;;      M8C System Macros
   704                          ;;  These macros should be used when their functions are needed.
   705                          ;;=============================================================================
   706                          
   707                          ;----------------------------------------------------
   708                          ;  Swapping Register Banks
   709                          ;----------------------------------------------------
   710                              macro M8C_SetBank0
   711                              and   F, ~FLAG_XIO_MASK
   712  3C41                        endm
   713                          
   714                              macro M8C_SetBank1
   715                              or    F, FLAG_XIO_MASK
   716  3C41                        endm
   717                          
   718                          ;----------------------------------------------------
   719                          ;  Global Interrupt Enable/Disable
   720                          ;----------------------------------------------------
   721                              macro M8C_EnableGInt
   722                              or    F, FLAG_GLOBAL_IE
   723  3C41                        endm
   724                          
   725                              macro M8C_DisableGInt
   726                              and   F, ~FLAG_GLOBAL_IE
   727  3C41                        endm
   728                          
   729                          ;----------------------------------------------------
   730                          ;  Enable/Disable Interrupt Mask
   731                          ;
   732                          ;  Use the following macros to enable/disable
   733                          ;  bits in the Interrupt mask registers,
   734                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   735                          ;
   736                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   737                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   738                          ;
   739                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   740                          ;        and MASK is the bit set to enable or disable
   741                          ;----------------------------------------------------
   742                          ; Disable Interrupt Bit Mask(s)
   743                              macro M8C_DisableIntMask
   744                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   745  3C41                        endm
   746                          
   747                          ; Enable Interrupt Bit Mask(s)
   748                              macro M8C_EnableIntMask
   749                              or    reg[@0], @1               ; enable specified interrupt enable bit
   750  3C41                        endm
   751                          
   752                          ;----------------------------------------------------
   753                          ;  Clear Posted Interrupt Flag Mask
   754                          ;
   755                          ;  Use the following macros to clear the
   756                          ;  bits in the Interrupt Clear registers,
   757                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   758                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   759                          ;
   760                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   761                          ;        and MASK is the bit set to enable or disable
   762                          ;----------------------------------------------------
   763                              macro M8C_ClearIntFlag
   764                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   765  3C41                        endm
   766                          
   767                          ;----------------------------------------------------
   768                          ;  Power-On Reset & WatchDog Timer Functions
   769                          ;----------------------------------------------------
   770                              macro M8C_EnableWatchDog
   771                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   772  3C41                        endm
   773                          
   774                              macro M8C_ClearWDT
   775                              mov   reg[RES_WDT], 00h
   776  3C41                        endm
   777                          
   778                              macro M8C_ClearWDTAndSleep
   779                              mov   reg[RES_WDT], 38h
   780  3C41                        endm
   781                          
   782                          ;----------------------------------------------------
   783                          ;  Sleep, CPU Stop & Software Reset
   784                          ;----------------------------------------------------
   785                              macro M8C_Sleep
   786                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   787                              ; The next instruction to be executed depends on the state of the
   788                              ; various interrupt enable bits. If some interrupts are enabled
   789                              ; and the global interrupts are disabled, the next instruction will
   790                              ; be the one that follows the invocation of this macro. If global
   791                              ; interrupts are also enabled then the next instruction will be
   792                              ; from the interrupt vector table. If no interrupts are enabled
   793                              ; then the CPU sleeps forever.
   794  3C41                        endm
   795                          
   796                              macro M8C_Stop
   797                              ; In general, you probably don't want to do this, but here's how:
   798                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   799                              ; Next instruction to be executed is located in the interrupt
   800                              ; vector table entry for Power-On Reset.
   801  3C41                        endm
   802                          
   803                              macro M8C_Reset
   804                              ; Restore CPU to the power-on reset state.
   805                              mov A, 0
   806                              SSC
   807                              ; Next non-supervisor instruction will be at interrupt vector 0.
   808  3C41                        endm
   809                          
   810                          ;----------------------------------------------------
   811                          ; ImageCraft Code Compressor Actions
   812                          ;----------------------------------------------------
   813                              ; Suspend Code Compressor
   814                              ; Must not span a RET or RETI instruction
   815                              ; without resuming code compression
   816                              macro Suspend_CodeCompressor
   817                              or   F, 0
   818  3C41                        endm
   819                          
   820                              ; Resume Code Compression
   821                              macro Resume_CodeCompressor
   822                              add  SP, 0
   823                              endm
      + 3C41                    
      + 3C41                    ; end of file m8c.inc
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;
     4                          ;;       FILENAME: Memory.inc
     5                          ;;
     6                          ;;    DESCRIPTION: Memory Model and Stack Parameter Definitions for 
     7                          ;;                 CY8C22045 PSoC devices.
     8                          ;;
     9                          ;;  LAST MODIFIED: August 17, 2004
    10                          ;;
    11                          ;;-----------------------------------------------------------------------------
    12                          ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
    13                          ;;*****************************************************************************
    14                          ;;*****************************************************************************
    15                          ;
    16                          ;
    17                          ;  ******** Define Memory Model and Stack parameters ********
    18                          ;
    19  0001                    IMAGECRAFT: equ 1   
    20  0002                    HITECH: equ 2   
    21  0002                    TOOLCHAIN: equ HITECH   
    22  0001                    SYSTEM_LARGE_MEMORY_MODEL: equ 1   
    23  0000                    SYSTEM_SMALL_MEMORY_MODEL: equ 0   
    24  0003                    SYSTEM_STACK_PAGE: equ 3   
    25  0000                    SYSTEM_STACK_PAGE_OFFSET: equ 0   
    26  0002                    SYSTEM_TOOLS: equ 2   
    27  0000                    SYSTEM_IDXPG_TRACKS_STK_PP: equ 0   
    28  0001                    SYSTEM_IDXPG_TRACKS_IDX_PP: equ 1   
    29  0000                    SYSTEM_MULTIPAGE_STACK: equ 0 
    30                          
    31                          
    32                          ;  ******* Function Class Definitions *******
    33                          ;
    34                          ;  These definitions are used to describe RAM access patterns. They provide
    35                          ;  documentation and they control prologue and epilogue macros that perform
    36                          ;  the necessary housekeeping functions for large memory model devices like
    37                          ;  the CY8C22045.
    38                          
    39  0001                    RAM_USE_CLASS_1:               equ 1   ; PUSH, POP & I/O access
    40  0002                    RAM_USE_CLASS_2:               equ 2   ; Indexed address mode on stack page
    41  0004                    RAM_USE_CLASS_3:               equ 4   ; Indexed address mode to any page
    42  0008                    RAM_USE_CLASS_4:               equ 8   ; Direct/Indirect address mode access
    43                          
    44                          ; ******* Hi Tech Specific *******
    45                          ; Turn on the expansion of all macros by default
    46                          IF (TOOLCHAIN & HITECH)
    47                          OPT EXPAND
    48                          ENDIF
    49                          ; ******* Page Pointer Manipulation Macros *******
    50                          ;
    51                          ;  ******* Page Pointer Manipulation Macros *******
    52                          ;
    53                          ;  Most of the following macros are conditionally compiled so they only
    54                          ;  produce code if the large memory model is selected.
    55                          
    56                             ;-----------------------------------------------
    57                             ;  Set Stack Page Macro
    58                             ;-----------------------------------------------
    59                             ;
    60                             ;  DESC: Modify STK_PP in the large or small memory Models.
    61                             ;
    62                             ; INPUT: Constant (e.g., SYSTEM_STACK_PAGE) that specifies the RAM page on
    63                             ;        which stack operations like PUSH and POP store and retrieve their
    64                             ;        data
    65                             ;
    66                             ;  COST: 8 instruction cycles (in LMM only)
    67                          
    68                             macro RAM_SETPAGE_STK( PG_NUMBER )
    69                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    70                                mov reg[STK_PP], @PG_NUMBER
    71                             ENDIF
    72  3C41                       endm
    73                          
    74                             ;-----------------------------------------------
    75                             ;  Set Current Page Macro
    76                             ;-----------------------------------------------
    77                             ;
    78                             ;  DESC: Modify CUR_PP in the large or small memory Models.
    79                             ;
    80                             ; INPUT: Constant value (e.g., >bFoo) for the RAM page number used in
    81                             ;        calculation of effective direct-mode address operands.
    82                             ;
    83                             ;  COST: 8 instruction cycles (in LMM only)
    84                          
    85                             macro RAM_SETPAGE_CUR( PG_NUMBER )
    86                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    87                                mov reg[CUR_PP], @PG_NUMBER
    88                             ENDIF
    89  3C41                       endm
    90                          
    91                             ;-----------------------------------------------
    92                             ;  Set Index Page Macro
    93                             ;-----------------------------------------------
    94                             ;
    95                             ;  DESC: Modify IDX_PP in the large or small emory Models.
    96                             ;
    97                             ; INPUT: Constant value (e.g., >caFoo) for the RAM page number used in
    98                             ;         calculation of effective index-mode address operands.
    99                             ;
   100                             ;  COST: 8 instruction cycles (in LMM only)
   101                          
   102                             macro RAM_SETPAGE_IDX( PG_NUMBER )
   103                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   104                                mov reg[IDX_PP], @PG_NUMBER
   105                             ENDIF
   106  3C41                       endm
   107                          
   108                             ;-----------------------------------------------
   109                             ;  Set MVI Read Page Macro
   110                             ;-----------------------------------------------
   111                             ;
   112                             ;  DESC: Modify MVR_PP in the large or small memory Models.
   113                             ;
   114                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   115                             ;        calculation of indirect address operands used in the
   116                             ;        "mvi A, [pFoo]" instructions.
   117                             ;
   118                             ;  COST: 8 instruction cycles (in LMM only)
   119                          
   120                             macro RAM_SETPAGE_MVR( PG_NUMBER )
   121                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   122                                mov reg[MVR_PP], @PG_NUMBER
   123                             ENDIF
   124  3C41                       endm
   125                          
   126                             ;-----------------------------------------------
   127                             ;  Set MVI Write Page Macro
   128                             ;-----------------------------------------------
   129                             ;
   130                             ;  DESC: Modify MVW_PP in the large or small memory Models.
   131                             ;
   132                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   133                             ;        calculation of indirect address operands used in the
   134                             ;        "mvi [pFoo], A" instructions.
   135                             ;
   136                             ;  COST: 8 instruction cycles (in LMM only)
   137                          
   138                             macro RAM_SETPAGE_MVW( PG_NUMBER )
   139                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   140                                mov reg[MVW_PP], @PG_NUMBER
   141                             ENDIF
   142  3C41                       endm
   143                          
   144                             ;-----------------------------------------------
   145                             ;  Force Index Page Pointer to Stack Page
   146                             ;-----------------------------------------------
   147                             ;
   148                             ;  DESC: Map index-mode operands onto the stack page by modifying IDX_PP.
   149                             ;        See also RAM_LOCK_INDEX_TO_STACKPAGE.
   150                             ;
   151                             ; INPUT: None
   152                             ;
   153                             ;  COST: 8 instruction cycles (in LMM only)
   154                          
   155                             macro RAM_SETPAGE_IDX2STK
   156                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   157                                IF ( SYSTEM_MULTIPAGE_STACK )
   158                                   mov   A, reg[STK_PP]
   159                                   mov   reg[IDX_PP], A
   160                                ELSE
   161                                   RAM_SETPAGE_IDX SYSTEM_STACK_PAGE
   162                                ENDIF
   163                             ENDIF
   164  3C41                       endm
   165                          
   166                             ;-----------------------------------------------
   167                             ;  Change Memory Mode
   168                             ;-----------------------------------------------
   169                             ;
   170                             ;  DESC: Modify FLAG_PAGEMODE bits in the large and small memory Models.
   171                             ;
   172                             ; INPUT: Constant value for PGMODE bitfield of CPU Flag register, F.
   173                             ;        See FLAG_PGMODE_{x} constants in M8C.INC.
   174                             ;
   175                             ;  COST: 8 instruction cycles (in LMM only)
   176                          
   177                             macro RAM_CHANGE_PAGE_MODE( MODE )
   178                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   179                                and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
   180                                or    F,  FLAG_PGMODE_MASK & @MODE
   181                             ENDIF
   182  3C41                       endm
   183                          
   184                             ;-----------------------------------------------
   185                             ;  Set Large Memory Model Native Paging Mode
   186                             ;-----------------------------------------------
   187                             ;
   188                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   189                             ;        paging mode *IFF* a simple "OR" is guaranteed to work---for
   190                             ;        example, in an ISR, when the PGMODE bits have been cleared
   191                             ;        to zero. If a simple "OR" is not guaranteed to work, use
   192                             ;        the slower RAM_RESTORE_NATIVE_PAGING instead.
   193                             ;
   194                             ; INPUT: none
   195                             ;
   196                             ;  COST: 4 instruction cycles (in LMM only)
   197                          
   198                             macro RAM_SET_NATIVE_PAGING
   199                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   200                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   201                                or    F,  FLAG_PGMODE_11b            ; LMM w/ IndexPage<==>StackPage
   202                             ENDIF ;  PGMODE LOCKED
   203                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   204                                or    F,  FLAG_PGMODE_10b            ; LMM with independent IndexPage
   205                             ENDIF ; PGMODE FREE
   206                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   207  3C41                       endm
   208                          
   209                             ;-----------------------------------------------
   210                             ; Restore Large Memory Model Native Paging Mode
   211                             ;-----------------------------------------------
   212                             ;
   213                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   214                             ;        paging mode. Always works because it clears the PGMODE bits
   215                             ;        before OR-ing in the new ones. See RAM_RESTORE_NATIVE_PAGING
   216                             ;        for a faster method.
   217                             ;
   218                             ; INPUT: none
   219                             ;
   220                             ;  COST: 8 instruction cycles (in LMM only)
   221                          
   222                             macro RAM_RESTORE_NATIVE_PAGING
   223                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   224                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   225                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_11b ; LMM w/ IndexPage<==>StackPage
   226                             ENDIF ;  PGMODE LOCKED
   227                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   228                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b ; LMM with independent IndexPage
   229                             ENDIF ; PGMODE FREE
   230                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   231  3C41                       endm
   232                          
   233                             ;-----------------------------------------------
   234                             ; Force indexed addr mode operands to Stack Pg
   235                             ;-----------------------------------------------
   236                             ;
   237                             ;  DESC: Force instructions that use indexed address mode to reference the
   238                             ;        stack page (as defined by STK_PP). This macro sets the "Indexed
   239                             ;        Stack Mode" bit (LSB) of the PGMODE bit field in the CPU Flag
   240                             ;        register, F. (See also RAM_SETPAGE_IDX2STK, above.)
   241                             ;
   242                             ; INPUT: none
   243                             ;
   244                             ;  COST: 4 instruction cycles (in LMM only)
   245                          
   246                             macro RAM_X_POINTS_TO_STACKPAGE
   247                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   248                                or   F, FLAG_PGMODE_01b
   249                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   250  3C41                       endm
   251                          
   252                             ;-----------------------------------------------
   253                             ;  Force indexed addr mode operands to Index Pg
   254                             ;-----------------------------------------------
   255                             ;
   256                             ;  DESC: Permit instructions that use indexed address mode to reference page
   257                             ;        zero or the page pointed to by the IDX_PP register, depending on the
   258                             ;        setting of the MSb (or "Direct Page Mode" bit) of the PGMODE bits
   259                             ;        in the CPU Flag register, F. (This macro clears the PGMODE LSb.)
   260                             ;
   261                             ; INPUT: none
   262                             ;
   263                             ;  COST: 4 instruction cycles (in LMM only)
   264                          
   265                             macro RAM_X_POINTS_TO_INDEXPAGE
   266                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   267                                and  F, ~FLAG_PGMODE_01b
   268                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   269  3C41                       endm
   270                          
   271                             ;-----------------------------------------------
   272                             ;  Function Prologue
   273                             ;-----------------------------------------------
   274                             ;
   275                             ;  Prologue for functions that run in the LMM and SMM.
   276                             ;
   277                          
   278                             macro RAM_PROLOGUE( ACTUAL_CLASS )
   279                          
   280                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   281                             ; Nothing to do
   282                             ENDIF ; RAM_USE_CLASS_1
   283                          
   284                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   285                                IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   286                                   RAM_X_POINTS_TO_STACKPAGE         ; exit native paging mode!
   287                                ENDIF
   288                             ENDIF ; RAM_USE_CLASS_2
   289                          
   290                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   291                                IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   292                                   RAM_X_POINTS_TO_INDEXPAGE         ; exit native paging mode!
   293                                ENDIF
   294                             ENDIF ; RAM_USE_CLASS_3
   295                          
   296                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   297                             ; Nothing to do
   298                             ENDIF ; RAM_USE_CLASS_4
   299                          
   300  3C41                       endm
   301                          
   302                             ;-----------------------------------------------
   303                             ;  Function Epilogue
   304                             ;-----------------------------------------------
   305                             ;
   306                             ;  Prologue for functions that run in the LMM and SMM.
   307                             ;
   308                          
   309                             macro RAM_EPILOGUE( ACTUAL_CLASS )
   310                          
   311                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   312                             ; Nothing to do
   313                             ENDIF ; RAM_USE_CLASS_1
   314                          
   315                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   316                                RAM_RESTORE_NATIVE_PAGING
   317                             ENDIF ; RAM_USE_CLASS_2
   318                          
   319                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   320                                RAM_RESTORE_NATIVE_PAGING
   321                             ENDIF ; RAM_USE_CLASS_3
   322                          
   323                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   324                             ; Nothing to do
   325                             ENDIF ; RAM_USE_CLASS_4
   326                          
   327  3C41                       endm
   328                          
   329                             ;-----------------------------------------------
   330                             ;  Preserve Register
   331                             ;-----------------------------------------------
   332                             ;
   333                             ;  DESC: Preserve a register value on the stack
   334                             ;
   335                             ; INPUT: Name or address of register in I/O Space
   336                             ;        The I/O bank is an implicit parameter. That is, this function will
   337                             ;        Access the I/O bank currently specified by the CPU Flag register.
   338                             ;
   339                             ;  USES: CPU 'A' register
   340                             ;
   341                             ;  COST: 9 instruction cycles
   342                          
   343                             macro REG_PRESERVE( IOReg )
   344                             mov   A, reg[ @IOReg ]
   345                             push  A
   346  3C41                       endm
   347                          
   348                             ;-----------------------------------------------
   349                             ;  Restore Register
   350                             ;-----------------------------------------------
   351                             ;
   352                             ;  DESC: Restore a register value from the stack
   353                             ;
   354                             ; INPUT: Name or address of register in I/O Space
   355                             ;        The I/O bank is an implicit parameter. That is, this function will
   356                             ;        Access the I/O bank currently specified by the CPU Flag register.
   357                             ;
   358                             ;  USES: CPU 'A' register
   359                             ;
   360                             ;  COST: 10 instruction cycles
   361                          
   362                             macro REG_RESTORE( IOReg )
   363                             pop   A
   364                             mov   reg[ @IOReg ], A
   365  3C41                       endm
   366                          
   367                             ;-----------------------------------------------
   368                             ;  Preserve Volatile Page Pointer Registers
   369                             ;-----------------------------------------------
   370                             ;
   371                             ;  DESC: Invoked by ISRs before switching to the LMM mode and calling
   372                             ;        functions that require on it.
   373                             ;
   374                             ; INPUT: none
   375                             ;
   376                             ;  USES: CPU 'A' register
   377                             ;
   378                             ;  COST: 45 instruction cycles (in LMM only)
   379                          
   380                             macro ISR_PRESERVE_PAGE_POINTERS
   381                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   382                                REG_PRESERVE CUR_PP
   383                                REG_PRESERVE IDX_PP
   384                                REG_PRESERVE MVR_PP
   385                                REG_PRESERVE MVW_PP
   386                             ENDIF
   387  3C41                       endm
   388                          
   389                             ;-----------------------------------------------
   390                             ;  Restore Volatile Page Pointer Registers
   391                             ;-----------------------------------------------
   392                             ;
   393                             ;  DESC: Undo for RAM_PRESERVE_PAGE_POINTERS macro. Invoked by ISRs after
   394                             ;        calling functions that run in the LMM mode and before executing
   395                             ;        the RETI instruction.
   396                             ;
   397                             ; INPUT: none
   398                             ;
   399                             ;  USES: CPU 'A' register
   400                             ;
   401                             ;  COST: 50 instruction cycles (in LMM only)
   402                          
   403                             macro ISR_RESTORE_PAGE_POINTERS
   404                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   405                                REG_RESTORE MVW_PP
   406                                REG_RESTORE MVR_PP
   407                                REG_RESTORE IDX_PP
   408                                REG_RESTORE CUR_PP
   409                             ENDIF
   410                             endm
      + 3C41                    
      + 3C41                    ; end of file Memory.inc
      + 3C41                    ;;*****************************************************************************
;;******************
      +                         ***********************************************************
;;  FILENAME: SAR10.inc
;;   Version: 2.
      +                         00, Updated on 2013/5/19 at 10:39:9
;;  Generated by PSoC Designer 5.4.2946
;;
;;  DESCRIPTION: Asse
      +                         mbler declarations for the SAR10 user module interface
;;-------------------------------------------
      +                         ----------------------------------
;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved
      +                         .
;;*****************************************************************************
;;****************
      +                         *************************************************************
   824                          
   825                          ; end of file m8c.inc
    29  00C0                    FLAG_PGMODE_MASK:  equ 0C0h     ; Paging control for > 256 bytes of RAM
    30  0000                    FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
    31  0040                    FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
    32  0080                    FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
    33  00C0                    FLAG_PGMODE_3:     equ 0C0h       ; Direct to CUR_PP page, indexed to STK_PP page
    34  0000                    FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
    35  0040                    FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
    36  0080                    FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
    37  00C0                    FLAG_PGMODE_11b:   equ 0C0h       ; Same as PGMODE_3
    38  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    39  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    40  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    41  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    42  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    43                          
    44                          
    45                          ;;=============================================================================
    46                          ;;      Register Space, Bank 0
    47                          ;;=============================================================================
    48                          
    49                          ;------------------------------------------------
    50                          ;  Port Registers
    51                          ;  Note: Also see this address range in Bank 1.
    52                          ;------------------------------------------------
    53                          ; Port 0
    54  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    55  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    56  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    57  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    58                          ; Port 1
    59  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    60  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    61  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    62  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    63                          ; Port 2
    64  0008                    PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
    65  0009                    PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
    66  000A                    PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
    67  000B                    PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
    68                          ; Port 3
    69  000C                    PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
    70  000D                    PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
    71  000E                    PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
    72  000F                    PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
    73                          ; Port 4
    74  0010                    PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
    75  0011                    PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
    76  0012                    PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
    77  0013                    PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
    78                          
    79                          ;------------------------------------------------
    80                          ;  Digital PSoC(tm) block Registers
    81                          ;  Note: Also see this address range in Bank 1.
    82                          ;------------------------------------------------
    83                          ; Digital PSoC block 00, Basic Type C
    84  0020                    DBC00DR0:     equ 20h          ; data register 0                          (#)
    85  0021                    DBC00DR1:     equ 21h          ; data register 1                          (W)
    86  0022                    DBC00DR2:     equ 22h          ; data register 2                          (RW)
    87  0023                    DBC00CR0:     equ 23h          ; control & status register 0              (#)
    88                          
    89                          ; Digital PSoC block 01, Basic Type C
    90  0024                    DBC01DR0:     equ 24h          ; data register 0                          (#)
    91  0025                    DBC01DR1:     equ 25h          ; data register 1                          (W)
    92  0026                    DBC01DR2:     equ 26h          ; data register 2                          (RW)
    93  0027                    DBC01CR0:     equ 27h          ; control & status register 0              (#)
    94                          
    95                          ; Digital PSoC block 02, Communications Type C
    96  0028                    DCC02DR0:     equ 28h          ; data register 0                          (#)
    97  0029                    DCC02DR1:     equ 29h          ; data register 1                          (W)
    98  002A                    DCC02DR2:     equ 2Ah          ; data register 2                          (RW)
    99  002B                    DCC02CR0:     equ 2Bh          ; control & status register 0              (#)
   100                          
   101                          ; Digital PSoC block 03, Communications Type C
   102  002C                    DCC03DR0:     equ 2Ch          ; data register 0                          (#)
   103  002D                    DCC03DR1:     equ 2Dh          ; data register 1                          (W)
   104  002E                    DCC03DR2:     equ 2Eh          ; data register 2                          (RW)
   105  002F                    DCC03CR0:     equ 2Fh          ; control & status register 0              (#)
   106                          
   107                          ; Digital PSoC block 10, Basic Type C
   108  0030                    DBC10DR0:     equ 30h          ; data register 0                          (#)
   109  0031                    DBC10DR1:     equ 31h          ; data register 1                          (W)
   110  0032                    DBC10DR2:     equ 32h          ; data register 2                          (RW)
   111  0033                    DBC10CR0:     equ 33h          ; control & status register 0              (#)
   112                          
   113                          ; Digital PSoC block 11, Basic Type C
   114  0034                    DBC11DR0:     equ 34h          ; data register 0                          (#)
   115  0035                    DBC11DR1:     equ 35h          ; data register 1                          (W)
   116  0036                    DBC11DR2:     equ 36h          ; data register 2                          (RW)
   117  0037                    DBC11CR0:     equ 37h          ; control & status register 0              (#)
   118                          
   119                          ; Digital PSoC block 12, Communications Type C
   120  0038                    DCC12DR0:     equ 38h          ; data register 0                          (#)
   121  0039                    DCC12DR1:     equ 39h          ; data register 1                          (W)
   122  003A                    DCC12DR2:     equ 3Ah          ; data register 2                          (RW)
   123  003B                    DCC12CR0:     equ 3Bh          ; control & status register 0              (#)
   124                          
   125                          ; Digital PSoC block 13, Communications Type C
   126  003C                    DCC13DR0:     equ 3Ch          ; data register 0                          (#)
   127  003D                    DCC13DR1:     equ 3Dh          ; data register 1                          (W)
   128  003E                    DCC13DR2:     equ 3Eh          ; data register 2                          (RW)
   129  003F                    DCC13CR0:     equ 3Fh          ; control & status register 0              (#)
   130                          
   131                          ;-------------------------------------
   132                          ;  Analog Control Registers
   133                          ;-------------------------------------
   134  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
   135  00C0                    AMX_IN_ACI3:          equ C0h    ; MASK: column 3 input mux
   136  0030                    AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
   137  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
   138  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
   139                          
   140  0061                    AMUX_CFG:      equ 61h          ; Analog MUX Configuration
   141  0030                    AMUX_CFG_INTCAP:       equ 30h    ;
   142  000E                    AMUX_CFG_MUXCLK:  	  equ 0Eh	 ;
   143  0001                    AMUX_CFG_EN:		  	  equ 01h	 ;
   144                          
   145                          ; old declarations DO NOT USE
   146  0061                    AMUXCFG:      equ 61h          ; Analog MUX Configuration
   147  0030                    AMUXCFG_INTCAP:       equ 30h    ;
   148  000E                    AMUXCFG_MUXCLK:  	  equ 0Eh	 ;
   149  0001                    AMUXCFG_EN:		  	  equ 01h	 ;
   150                          
   151  0062                    PWM_CR:       equ 62h          ; Pulse-Width Modulator Control
   152  0038                    PWM_CR_HIGH:          equ 38h    ; MASK: PWM high time
   153  0006                    PWM_CR_LOW:           equ 06h	 ; MASK: PWM low time
   154  0001                    PWM_CR_EN:            equ 01h	 ; MASK: Enable/Disable PWM function
   155                          
   156  0063                    ARF_CR:       equ 63h          ; Analog Reference Control
   157                          
   158  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus Register           (#)
   159  0080                    CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
   160  0040                    CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
   161  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
   162  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
   163  0008                    CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
   164  0004                    CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
   165  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
   166  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   167                          
   168  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   169  0020                    CMP_CR1_CLDIS1:       equ 20h    ; MASK: Column 1 comparator output latch
   170  0010                    CMP_CR1_CLDIS0:	      equ 10h    ; MASK: Column 0 comparator output latch
   171                          
   172  0068                    ADC0_CR:      equ 68h          ; Analog Column 0 Configuration
   173  0080                    ADC0_CR_CMPST:        equ 80h    ;
   174  0040                    ADC0_CR_LOREN:        equ 40h    ;
   175  0020                    ADC0_CR_SHEN:         equ 20h    ;
   176  0008                    ADC0_CR_CBSRC:        equ 08h    ;
   177  0004                    ADC0_CR_ADCM:         equ 04h    ;
   178  0001                    ADC0_CR_EN:	          equ 01h    ;
   179                          
   180  0069                    ADC1_CR:      equ 69h          ; Analog Column 1 Configuration
   181  0080                    ADC1_CR_CMPST:        equ 80h    ;
   182  0040                    ADC1_CR_LOREN:        equ 40h    ;
   183  0020                    ADC1_CR_SHEN:         equ 20h    ;
   184  0008                    ADC1_CR_CBSRC:        equ 08h    ;
   185  0004                    ADC1_CR_ADCM:         equ 04h    ;
   186  0001                    ADC1_CR_EN:	          equ 01h    ;
   187                          
   188                          ; Continuous Time PSoC block Type E Row 0 Col 0
   189  0072                    ACE00CR1:     equ 72h          ; Control register 1                       (RW)
   190  0073                    ACE00CR2:     equ 73h          ; Control register 2                       (RW)
   191                          
   192                          ; Continuous Time PSoC block Type E Row 0 Col 1
   193  0076                    ACE01CR1:     equ 76h          ; Control register 1                       (RW)
   194  0077                    ACE01CR2:     equ 77h          ; Control register 2                       (RW)
   195                          
   196                          ; Switched Cap PSoC blockType E Row 1 Col 0
   197  0080                    ASE10CR0:     equ 80h          ; Control register 0                       (RW)
   198                          
   199                          ; Switched Cap PSoC blockType E Row 1 Col 1
   200  0084                    ASE11CR0:     equ 84h          ; Control register 0                       (RW)
   201                          
   202                          ;-----------------------------------------------
   203                          ;  Global General Purpose Data Registers
   204                          ;-----------------------------------------------
   205  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   206  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   207  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   208  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   209                          
   210                          ;------------------------------------------------
   211                          ;  Row Digital Interconnects
   212                          ;
   213                          ;  Note: the following registers are mapped into
   214                          ;  both register bank 0 AND register bank 1.
   215                          ;------------------------------------------------
   216                          
   217  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   218  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   219  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   220  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   221  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   222  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   223  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   224                          
   225  00B8                    RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
   226  00B9                    RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
   227  00BA                    RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
   228  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   229  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   230  00BD                    RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
   231  00BE                    RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
   232                          
   233                          ;-----------------------------------------------
   234                          ;  Ram Page Pointers
   235                          ;-----------------------------------------------
   236  00D0                    CUR_PP:      equ 0D0h           ; Current   Page Pointer
   237  00D1                    STK_PP:      equ 0D1h           ; Stack     Page Pointer
   238  00D3                    IDX_PP:      equ 0D3h           ; Index     Page Pointer
   239  00D4                    MVR_PP:      equ 0D4h           ; MVI Read  Page Pointer
   240  00D5                    MVW_PP:      equ 0D5h           ; MVI Write Page Pointer
   241                          
   242                          ;------------------------------------------------
   243                          ;  I2C Configuration Registers
   244                          ;------------------------------------------------
   245  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   246  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   247  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   248  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   249  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   250  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   251  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   252  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   253  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   254  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   255                          
   256  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   257  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   258  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   259  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   260  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   261  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   262  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   263  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   264  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   265                          
   266  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   267                          
   268  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   269  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   270  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   271  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   272  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   273                          
   274                          ;------------------------------------------------
   275                          ;  System and Global Resource Registers
   276                          ;------------------------------------------------
   277  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   278                                                         ; Use INT_MSK0 bit field masks
   279  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   280                                                         ; Use INT_MSK1 bit field masks
   281  00DC                    INT_CLR2:     equ 0DCh          ; Interrupt Clear Register 2               (RW)
   282                                                         ; Use INT_MSK2 bit field masks
   283  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   284                                                         ; Use INT_MSK3 bit field masks
   285                          
   286  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   287  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   288  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   289                          
   290  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   291  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   292  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   293  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   294  0010                    INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
   295  0008                    INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
   296  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   297  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   298  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   299                          
   300  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   301  0080                    INT_MSK1_DCC13:            equ 80h ; MASK: enable/disable DCC13 block interrupt
   302  0040                    INT_MSK1_DCC12:            equ 40h ; MASK: enable/disable DCC12 block interrupt
   303  0020                    INT_MSK1_DBC11:            equ 20h ; MASK: enable/disable DBC11 block interrupt
   304  0010                    INT_MSK1_DBC10:            equ 10h ; MASK: enable/disable DBC10 block interrupt
   305  0008                    INT_MSK1_DCC03:            equ 08h ; MASK: enable/disable DCC03 block interrupt
   306  0004                    INT_MSK1_DCC02:            equ 04h ; MASK: enable/disable DCC02 block interrupt
   307  0002                    INT_MSK1_DBC01:            equ 02h ; MASK: enable/disable DBC01 block interrupt
   308  0001                    INT_MSK1_DBC00:            equ 01h ; MASK: enable/disable DBC00 block interrupt
   309                          
   310  00DF                    INT_MSK2:     equ DFh			; Custom block Mask Register			   (RW)
   311  0010                    INT_MSK2_SARADC:           equ 10h ; MASK: enable/disable SARADC block interrupt
   312  0020                    INT_MSK2_CSD0:             equ 20h ; MASK: enable/disable CSD0 block interrupt
   313  0040                    INT_MSK2_CSD1:             equ 40h ; MASK: enable/disable CSD1 block interrupt
   314  0080                    INT_MSK2_RTC:              equ 80h ; MASK: enable/disable RTC block interrupt
   315                          
   316  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   317  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   318                          
   319                          ;------------------------------------------------------
   320                          ;  MAC Registers
   321                          ;------------------------------------------------------
   322                          
   323  00E8                    MUL0_X:       equ 0E8h          ; Multiply Input X Register                (W)
   324  00E9                    MUL0_Y:       equ 0E9h          ; Multiply Input Y Register                (W)
   325  00EA                    MUL0_DH:      equ 0EAh          ; Multiply Result High Byte Register       (R)
   326  00EB                    MUL0_DL:      equ 0EBh          ; Multiply Result Low Byte Register        (R)
   327                          
   328  00EC                    ACC0_DR1:     equ 0ECh          ; Accumulator Data Register 1              (RW)
   329  00ED                    ACC0_DR0:     equ 0EDh          ; Accumulator Data Register 0              (RW)
   330  00EE                    ACC0_DR3:     equ 0EEh          ; Accumulator Data Register 3              (RW)
   331  00EF                    ACC0_DR2:     equ 0EFh          ; Accumulator Data Register 2              (RW)
   332                          
   333                          ; DECIMATOR Control Registers
   334  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   335  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   336                          
   337                          ;------------------------------------------------------
   338                          ;  System Status and Control Registers
   339                          ;
   340                          ;  Note: The following registers are mapped into both
   341                          ;        register bank 0 AND register bank 1.
   342                          ;------------------------------------------------------
   343  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   344                                                             ; Use FLAG_ masks defined at top of file
   345                          
   346  00FD                    DAC_D:        equ 0FDh		   ; DAC Data Register                        (RW)
   347                          
   348  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   349  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: flag, Internal Reset Status bit
   350  0010                    CPU_SCR1_SLIMO:         equ 10h	   ; MASK: Slow IMO (internal main osc) enable
   351  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   352  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   353  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   354                          
   355  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   356  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   357  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   358  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   359  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   360  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   361                          
   362                          ;------------------------------------------------------
   363                          ;  Neon Capsense Digital Control Registers
   364                          ;------------------------------------------------------
   365  0050                    CSD0_DR0_L:				equ 50h		; Capsense 0 data low 0				(RW)
   366  0054                    CSD0_DR0_H:				equ 54h		; Capsense 0 data high 0			(RW)
   367  0058                    CSD1_DR0_L:				equ 58h		; Capsense 1 data low 0				(RW)
   368  005C                    CSD1_DR0_H:				equ 5Ch		; Capsense 1 data high 0			(RW)
   369  0051                    CSD0_DR1_L:				equ 51h		; Capsense 0 data low 1				(RW)
   370  0055                    CSD0_DR1_H:				equ 55h		; Capsense 0 data high 1			(RW)
   371  0059                    CSD1_DR1_L:				equ 59h		; Capsense 1 data low 1				(RW)
   372  005D                    CSD1_DR1_H:				equ 5Dh		; Capsense 1 data high 1			(RW)
   373  0052                    CSD0_CNT_L:				equ 52h		; Capsense 0 counter low			(RW)
   374  0056                    CSD0_CNT_H:				equ 56h		; Capsense 0 counter high			(RW)
   375  005A                    CSD1_CNT_L:				equ 5Ah		; Capsense 1 counter low			(RW)
   376  005E                    CSD1_CNT_H:				equ	5Eh		; Capsense 1 counter high			(RW)
   377  0053                    CSD0_CR0:				equ 53h		; Capsense 0 control 0				(RW)
   378  005B                    CSD1_CR0:				equ 5Bh		; Capsense 1 control 0				(RW)
   379  0057                    CSD0_CR1:				equ 57h		; Capsense 0 control 1				(RW)
   380  005F                    CSD1_CR1:				equ 5Fh		; Capsense 1 control 1				(RW)
   381                          
   382                          ;------------------------------------------------------
   383                          ;  Neon Analog Registers
   384                          ;------------------------------------------------------
   385  0065                    ASY_CR:					equ 65h		; Analog Synchronization Control	(RW)
   386  006A                    ADC_DH:					equ 6Ah		; ADC data high						(RW)
   387  006B                    ADC_DL:					equ 6Bh		; ADC data low						(RW)
   388  00C8                    PWMVREF0:				equ C8h		; PWM Voltage Reference 0			(RW)
   389  00C9                    PWMVREF1:				equ C9h		; PWM Voltage Reference 1			(RW)
   390  00CB                    PWMSRC:					equ CBh		; PWM Source						(RW)
   391  00CA                    IDACMODE:				equ CAh		; IDAC Mode							(RW)
   392  00FC                    IDACR_D:				equ FCh		; Analog Mux DAC data 0				(RW)
   393  00FD                    IDACL_D:				equ FDh		; Analog Mux DAC data 1				(RW)
   394                          
   395                          ;------------------------------------------------------
   396                          ;  Neon Digital Registers
   397                          ;------------------------------------------------------
   398  00B7                    RDI0DSM:				equ B7h		; Row Digital Interconnect input select 0	(RW)
   399  00BF                    RDI1DSM:				equ BFh		; Row Digital Interconnect input select 1	(RW)
   400                          
   401                          ;------------------------------------------------------
   402                          ;  Neon Test Registers
   403                          ;------------------------------------------------------
   404  00CC                    TSCR0:					equ CCh		; Tsource 0							(RW)
   405  00CD                    TSCMPH:					equ CDh		; TSCMP high						(RW)
   406  00CE                    TSCMPL:					equ CEh		; TSCMP low							(RW)
   407  00CF                    TSCR1:					equ CFh		; Tsource 1							(RW)
   408                          
   409                          ;;=============================================================================
   410                          ;;      Register Space, Bank 1
   411                          ;;=============================================================================
   412                          
   413                          ;------------------------------------------------
   414                          ;  Port Registers
   415                          ;  Note: Also see this address range in Bank 0.
   416                          ;------------------------------------------------
   417                          ; Port 0
   418  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   419  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   420  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   421  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   422                          
   423                          ; Port 1
   424  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   425  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   426  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   427  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   428                          
   429                          ; Port 2
   430  0008                    PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
   431  0009                    PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
   432  000A                    PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
   433  000B                    PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
   434                          
   435                          ; Port 3
   436  000C                    PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
   437  000D                    PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
   438  000E                    PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
   439  000F                    PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
   440                          
   441                          ; Port 4
   442  0010                    PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
   443  0011                    PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
   444  0012                    PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
   445  0013                    PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
   446                          
   447                          ;------------------------------------------------
   448                          ;  Digital PSoC(tm) block Registers
   449                          ;  Note: Also see this address range in Bank 0.
   450                          ;------------------------------------------------
   451                          
   452                          ; Digital PSoC block 00, Basic Type C
   453  0020                    DBC00FN:      equ 20h          ; Function Register                        (RW)
   454  0021                    DBC00IN:      equ 21h          ;    Input Register                        (RW)
   455  0022                    DBC00OU:      equ 22h          ;   Output Register                        (RW)
   456  0023                    DBC00CR1:     equ 23h          ;   control & status register 1            (RW)
   457                          
   458                          ; Digital PSoC block 01, Basic Type C
   459  0024                    DBC01FN:      equ 24h          ; Function Register                        (RW)
   460  0025                    DBC01IN:      equ 25h          ;    Input Register                        (RW)
   461  0026                    DBC01OU:      equ 26h          ;   Output Register                        (RW)
   462  0027                    DBC01CR1:     equ 27h          ;   control & status register 1            (RW)
   463                          
   464                          ; Digital PSoC block 02, Communications Type C
   465  0028                    DCC02FN:      equ 28h          ; Function Register                        (RW)
   466  0029                    DCC02IN:      equ 29h          ;    Input Register                        (RW)
   467  002A                    DCC02OU:      equ 2Ah          ;   Output Register                        (RW)
   468  002B                    DBC02CR1:     equ 2Bh          ;   control & status register 1            (RW)
   469                          
   470                          ; Digital PSoC block 03, Communications Type C
   471  002C                    DCC03FN:      equ 2Ch          ; Function Register                        (RW)
   472  002D                    DCC03IN:      equ 2Dh          ;    Input Register                        (RW)
   473  002E                    DCC03OU:      equ 2Eh          ;   Output Register                        (RW)
   474  0029                    DBC03CR1:     equ 29h          ;   control & status register 1            (RW)
   475                          
   476                          ; Digital PSoC block 10, Basic Type C
   477  0030                    DBC10FN:      equ 30h          ; Function Register                        (RW)
   478  0031                    DBC10IN:      equ 31h          ;    Input Register                        (RW)
   479  0032                    DBC10OU:      equ 32h          ;   Output Register                        (RW)
   480  0033                    DBC10CR1:     equ 33h          ;   control & status register 1            (RW)
   481                          
   482                          ; Digital PSoC block 11, Basic Type C
   483  0034                    DBC11FN:      equ 34h          ; Function Register                        (RW)
   484  0035                    DBC11IN:      equ 35h          ;    Input Register                        (RW)
   485  0036                    DBC11OU:      equ 36h          ;   Output Register                        (RW)
   486  0037                    DBC11CR1:     equ 37h          ;   control & status register 1            (RW)
   487                          
   488                          ; Digital PSoC block 12, Communications Type C
   489  0038                    DCC12FN:      equ 38h          ; Function Register                        (RW)
   490  0039                    DCC12IN:      equ 39h          ;    Input Register                        (RW)
   491  003A                    DCC12OU:      equ 3Ah          ;   Output Register                        (RW)
   492  003B                    DBC12CR1:     equ 3Bh          ;   control & status register 1            (RW)
   493                          
   494                          ; Digital PSoC block 13, Communications Type C
   495  003C                    DCC13FN:      equ 3Ch          ; Function Register                        (RW)
   496  003D                    DCC13IN:      equ 3Dh          ;    Input Register                        (RW)
   497  003E                    DCC13OU:      equ 3Eh          ;   Output Register                        (RW)
   498  003F                    DBC13CR1:     equ 3Fh          ;   control & status register 1            (RW)
   499                          
   500                          ;------------------------------------------------
   501                          ;  System and Global Resource Registers
   502                          ;  Note: Also see this address range in Bank 0.
   503                          ;------------------------------------------------
   504                          
   505  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   506  00C0                    CLK_CR0_ACOLUMN_3:    equ C0h    ; MASK: Specify clock for analog cloumn
   507  0030                    CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
   508  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   509  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   510                          
   511  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   512  0018                    CLK_CR1_ACLK1:        equ 18h    ; MASK: Digital PSoC block for analog source
   513  0003                    CLK_CR1_ACLK0:        equ 03h    ; MASK: Digital PSoC block for analog source
   514                          
   515  0003                    CLK_CR1_ACLK2:        equ 03h    ; Deprecated do not use
   516                          
   517  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   518  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   519                          
   520  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   521  000F                    AMD_CR0_AMOD0:        equ 0Fh    ; MASK: Modulation source for analog column 0
   522                          
   523  0064                    CMP_GO_EN:    equ 64h          ; Comparator Bus To Global Out Enable      (RW)
   524  0080                    CMP_GO_EN_GOO5:       equ 80h    ; MASK: Selected Col 1 signal to GOO5
   525  0040                    CMP_GO_EN_GOO1:       equ 40h    ; MASK: Selected Col 1 signal to GOO1
   526  0030                    CMP_GO_EN_SEL1:       equ 30h    ; MASK: Column 1 Signal Select
   527  0008                    CMP_GO_EN_GOO4:       equ 08h    ; MASK: Selected Col 0 signal to GOO4
   528  0004                    CMP_GO_EN_GOO0:       equ 04h    ; MASK: Selected Col 0 signal to GOO0
   529  0003                    CMP_GO_EN_SEL0:       equ 03h    ; MASK: Column 0 Signal Select
   530                          
   531  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   532  000F                    AMD_CR1_AMOD1:        equ 0Fh    ; MASK: Modulation ctrl for analog column 1
   533                          
   534  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   535  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   536  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   537                          
   538  006B                    CLK_CR3:      equ 6Bh          ; Analog Clock Source Control Register 3   (RW)
   539  0040                    CLK_CR3_SYS1:         equ 40h    ; MASK: Analog Clock 1 selection
   540  0030                    CLK_CR3_DIVCLK1:      equ 30h    ; MASK: Analog Clock 1 divider
   541  0004                    CLK_CR3_SYS0:         equ 04h    ; MASK: Analog Clock 0 selection
   542  0003                    CLK_CR3_DIVCLK0:      equ 03h    ; MASK: Analog Clock 0 divider
   543                          
   544                          ;------------------------------------------------
   545                          ;  Global Digital Interconnects
   546                          ;------------------------------------------------
   547                          
   548  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   549  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   550  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   551  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   552                          
   553  00A0                    GDI_O_IN_CR:  equ 0A0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   554  00A1                    GDI_E_IN_CR:  equ 0A1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   555  00A2                    GDI_O_OU_CR:  equ 0A2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   556  00A3                    GDI_E_OU_CR:  equ 0A3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   557                          
   558  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   559  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   560                          
   561                          ;------------------------------------------------
   562                          ;  Analog Mux Bus Port Enable Bits
   563                          ;------------------------------------------------
   564  00D8                    MUX_CR0:      equ 0D8h          ; Analog Mux Port 0 Bit Enables Register
   565  00D9                    MUX_CR1:      equ 0D9h          ; Analog Mux Port 1 Bit Enables Register
   566  00DA                    MUX_CR2:      equ 0DAh          ; Analog Mux Port 2 Bit Enables Register
   567  00DB                    MUX_CR3:      equ 0DBh          ; Analog Mux Port 3 Bit Enables Register
   568  00EC                    MUX_CR4:      equ 0ECh          ; Analog Mux Port 4 Bit Enables Register
   569                          
   570                          ;------------------------------------------------
   571                          ;  Clock and System Control Registers
   572                          ;------------------------------------------------
   573                          
   574  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   575  0080                    OSC_GO_EN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   576  0040                    OSC_GO_EN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   577  0020                    OSC_GO_EN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   578  0010                    OSC_GO_EN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   579  0008                    OSC_GO_EN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   580  0004                    OSC_GO_EN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   581  0002                    OSC_GO_EN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   582  0001                    OSC_GO_EN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   583                          
   584  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   585  0003                    OSC_CR4_VC3SEL:       equ 03h    ; MASK: System VC3 Clock source
   586                          
   587  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   588                          
   589  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   590  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   591  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   592  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   593  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   594  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   595  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   596  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   597  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   598  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   599  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   600  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   601  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   602  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   603  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   604  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   605  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   606  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   607                          
   608  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   609  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   610  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   611                          
   612  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   613  0080                    OSC_CR2_PLLGAIN:      equ 80h    ; MASK: High/Low gain
   614  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   615  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   616  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   617                          
   618  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   619  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   620  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   621  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   622  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   623  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   624  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   625  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   626                          
   627  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   628  0008                    VLT_CMP_NOWRITE:      equ 08h    ; MASK: Vcc below Flash Write level
   629  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   630  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   631  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   632                          
   633  00E5                    ADC0_TR:      equ 0E5h          ; ADC Column 0 Trim Register
   634  00E6                    ADC1_TR:      equ 0E6h          ; ADC Column 1 Trim Register
   635                          
   636  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   637  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   638  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   639  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   640                          
   641  00FA                    FLS_PR1:      equ 0FAh          ; Flash Program Register 1                 (RW)
   642  0003                    FLS_PR1_BANK:         equ 03h    ; MASK: Select Active Flash Bank
   643                          
   644  00FD                    DAC_CR0:       equ 0FDh          ; Analog Mux DAC Control Register 0
   645  00DC                    DAC_CR1:       equ 0DCh          ; Analog Mux DAC Control Register 1
   646  0008                    DAC_CR_IRANGE:        equ 08h    ; MASK: Sets the DAC Range low or high
   647  0006                    DAC_CR_OSCMODE:       equ 06h    ; MASK: Defines the reset mode for AMux
   648  0001                    DAC_CR_ENABLE:        equ 01h    ; MASK: Enable/Disable DAC function
   649                          
   650                          ;------------------------------------------------
   651                          ;  I2C Control Registers
   652                          ;------------------------------------------------
   653                          
   654  00AD                    I2C_ADDR:    equ 0ADh          ; I2C Address Register (RW)
   655                          
   656                          ;------------------------------------------------------
   657                          ;  Neon Analog Registers
   658                          ;------------------------------------------------------
   659  0053                    VDAC50CR0:		equ 53h			; V DAC5 control 0				(RW)
   660  0057                    VDAC51CR0:		equ 57h			; V DAC5 control 1				(RW)
   661  00A8                    ADC_CR0:		equ A8h			; ADC control 0					(RW)
   662  00A9                    ADC_CR1:		equ A9h			; ADC control 1					(RW)
   663  00AA                    ADC_CR2:		equ AAh			; ADC control 2					(RW)
   664  00AB                    ADC_CR3TRIM:	equ ABh			; ADC control 3					(RW)
   665  00AC                    ADC_CR4:		equ ACh			; ADC control 4					(RW)
   666  00E7                    VDAC_TRIM:		equ E7h			; V DAC trim					(RW)
   667                          
   668                          ;------------------------------------------------------
   669                          ;  Neon Current Sense CMP Registers
   670                          ;------------------------------------------------------
   671  0050                    CMP0CR1:		equ 50h			; CMP0 control 1				(RW)
   672  0051                    CMP0CR2:		equ 51h			; CMP0 control 2				(RW)
   673  0054                    CMP1CR1:		equ 54h			; CMP1 control 1				(RW)
   674  0055                    CMP1CR2:		equ 55h			; CMP1 control 2				(RW)
   675  0058                    CSCMPCR0:		equ 58h			; CSCMP control 0				(RW)
   676  0059                    CSCMPGOEN:		equ 59h			; CSCMO global out enable		(RW)
   677  005A                    CSLUTCR0:		equ 5Ah			; CSLUT control 0				(RW)
   678  005B                    CMPCOLMUX:		equ 5Bh			; CMP Column Mux				(RW)
   679  005C                    CMPPWMCR:		equ 5Ch			; CMP PWM control				(RW)
   680  005D                    CMPFLTCR:		equ 5Dh			; CMP filter control			(RW)
   681  005E                    CMPCLK1:		equ 5Eh			; CMP clock 1					(RW)
   682  005F                    CMPCLK0:		equ 5Fh			; CMP clock 0					(RW)
   683                          
   684                          ;------------------------------------------------------
   685                          ;  Neon Real Time Clock Registers
   686                          ;------------------------------------------------------
   687  00A4                    RTCH:			equ A4h			; Real time current hour		(RW)
   688  00A5                    RTCM:			equ A5h			; Real time current minute		(RW)
   689  00A6                    RTCS:			equ A6h			; Real time current second		(RW)
   690  00A7                    RTCCR:			equ A7h			; Real time clock control		(RW)
   691                          
   692                          ;------------------------------------------------------
   693                          ;  Analog MUX Config Registers
   694                          ;------------------------------------------------------
   695                          
   696  006A                    AMUX_CFG1:			equ 6Ah  ; Analog MUX Configuration 1
   697  0020                    AMUX_CFG1_GOINVR:	equ 20h  ;
   698  0010                    AMUX_CFG1_GOINVL:  	equ 10h	 ;
   699  000C                    AMUX_CFG1_AMUXMODR:	equ 0Ch	 ;
   700  0003                    AMUX_CFG1_AMUXMODL:	equ 03h	 ;
   701                          
   702                          ;;=============================================================================
   703                          ;;      M8C System Macros
   704                          ;;  These macros should be used when their functions are needed.
   705                          ;;=============================================================================
   706                          
   707                          ;----------------------------------------------------
   708                          ;  Swapping Register Banks
   709                          ;----------------------------------------------------
   710                              macro M8C_SetBank0
   711                              and   F, ~FLAG_XIO_MASK
   712  3C41                        endm
   713                          
   714                              macro M8C_SetBank1
   715                              or    F, FLAG_XIO_MASK
   716  3C41                        endm
   717                          
   718                          ;----------------------------------------------------
   719                          ;  Global Interrupt Enable/Disable
   720                          ;----------------------------------------------------
   721                              macro M8C_EnableGInt
   722                              or    F, FLAG_GLOBAL_IE
   723  3C41                        endm
   724                          
   725                              macro M8C_DisableGInt
   726                              and   F, ~FLAG_GLOBAL_IE
   727  3C41                        endm
   728                          
   729                          ;----------------------------------------------------
   730                          ;  Enable/Disable Interrupt Mask
   731                          ;
   732                          ;  Use the following macros to enable/disable
   733                          ;  bits in the Interrupt mask registers,
   734                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   735                          ;
   736                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   737                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   738                          ;
   739                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   740                          ;        and MASK is the bit set to enable or disable
   741                          ;----------------------------------------------------
   742                          ; Disable Interrupt Bit Mask(s)
   743                              macro M8C_DisableIntMask
   744                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   745  3C41                        endm
   746                          
   747                          ; Enable Interrupt Bit Mask(s)
   748                              macro M8C_EnableIntMask
   749                              or    reg[@0], @1               ; enable specified interrupt enable bit
   750  3C41                        endm
   751                          
   752                          ;----------------------------------------------------
   753                          ;  Clear Posted Interrupt Flag Mask
   754                          ;
   755                          ;  Use the following macros to clear the
   756                          ;  bits in the Interrupt Clear registers,
   757                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   758                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   759                          ;
   760                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   761                          ;        and MASK is the bit set to enable or disable
   762                          ;----------------------------------------------------
   763                              macro M8C_ClearIntFlag
   764                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   765  3C41                        endm
   766                          
   767                          ;----------------------------------------------------
   768                          ;  Power-On Reset & WatchDog Timer Functions
   769                          ;----------------------------------------------------
   770                              macro M8C_EnableWatchDog
   771                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   772  3C41                        endm
   773                          
   774                              macro M8C_ClearWDT
   775                              mov   reg[RES_WDT], 00h
   776  3C41                        endm
   777                          
   778                              macro M8C_ClearWDTAndSleep
   779                              mov   reg[RES_WDT], 38h
   780  3C41                        endm
   781                          
   782                          ;----------------------------------------------------
   783                          ;  Sleep, CPU Stop & Software Reset
   784                          ;----------------------------------------------------
   785                              macro M8C_Sleep
   786                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   787                              ; The next instruction to be executed depends on the state of the
   788                              ; various interrupt enable bits. If some interrupts are enabled
   789                              ; and the global interrupts are disabled, the next instruction will
   790                              ; be the one that follows the invocation of this macro. If global
   791                              ; interrupts are also enabled then the next instruction will be
   792                              ; from the interrupt vector table. If no interrupts are enabled
   793                              ; then the CPU sleeps forever.
   794  3C41                        endm
   795                          
   796                              macro M8C_Stop
   797                              ; In general, you probably don't want to do this, but here's how:
   798                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   799                              ; Next instruction to be executed is located in the interrupt
   800                              ; vector table entry for Power-On Reset.
   801  3C41                        endm
   802                          
   803                              macro M8C_Reset
   804                              ; Restore CPU to the power-on reset state.
   805                              mov A, 0
   806                              SSC
   807                              ; Next non-supervisor instruction will be at interrupt vector 0.
   808  3C41                        endm
   809                          
   810                          ;----------------------------------------------------
   811                          ; ImageCraft Code Compressor Actions
   812                          ;----------------------------------------------------
   813                              ; Suspend Code Compressor
   814                              ; Must not span a RET or RETI instruction
   815                              ; without resuming code compression
   816                              macro Suspend_CodeCompressor
   817                              or   F, 0
   818  3C41                        endm
   819                          
   820                              ; Resume Code Compression
   821                              macro Resume_CodeCompressor
   822                              add  SP, 0
   823  3C41                        endm
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  FILENAME: SAR10.inc
     4                          ;;   Version: 2.00, Updated on 2013/5/19 at 10:39:9
     5                          ;;  Generated by PSoC Designer 5.4.2946
     6                          ;;
     7                          ;;  DESCRIPTION: Assembler declarations for the SAR10 user module interface
     8                          ;;-----------------------------------------------------------------------------
     9                          ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
    10                          ;;*****************************************************************************
    11                          ;;*****************************************************************************
    12                          
    13                          include "m8c.inc"
    14                          
    15                          
    16                          ;--------------------------------------------------
    17                          ; Constants for SAR10 API's.
    18                          ;--------------------------------------------------
    19                          
    20  0001                    SAR10_SAR_CR0_REG_START_BIT:                               equ 0x01    ; Control register start bit
    21  0078                    SAR10_CHN_SEL_MASK:                                        equ 0x78
    22  0030                    SAR10_TRG_SEL_MASK:                                        equ 0x30
    23  0001                    SAR10_ALIGN_EN_MASK:                                       equ 0x01
    24  000E                    SAR10_CLK_SEL_MASK:                                        equ 0x0E
    25  0008                    SAR10_FREE_RUN_MASK:                                       equ 0x08
    26  0004                    SAR10_READY_MASK:                                          equ 0x04
    27  0002                    SAR10_SAR_CR0_REG_SW_TRIG_BIT:                             equ 0x02
    28                          
    29  00DF                    SAR10_INT_REG:                                             equ 0x0df
    30  0010                    SAR10_INT_SAR_MASK:                                        equ 0x10
    31                          ;--------------------------------------------------
    32                          ; SAR10 channel selection definitions
    33                          ;--------------------------------------------------
    34  0000                    SAR10_CHS_P00:                                             equ   (00h)
    35  0008                    SAR10_CHS_P01:                                             equ   (08h)
    36  0010                    SAR10_CHS_P02:                                             equ   (10h)
    37  0018                    SAR10_CHS_P03:                                             equ   (18h)
    38  0020                    SAR10_CHS_P04:                                             equ   (20h)
    39  0028                    SAR10_CHS_P05:                                             equ   (28h)
    40  0030                    SAR10_CHS_P06:                                             equ   (30h)
    41  0038                    SAR10_CHS_P07:                                             equ   (38h)
    42  0060                    SAR10_CHS_AMUX0:                                           equ   (60h)
    43  0068                    SAR10_CHS_AMUX1:                                           equ   (68h)
    44                          ;for compatibly with olds projects
    45  0060                    SAR10_CHS_AMUXL:                                           equ   (60h)
    46  0068                    SAR10_CHS_AMUXR:                                           equ   (68h)
    47                          
    48                          ;--------------------------------------------------
    49                          ; SAR10 trigger source definitions
    50                          ;--------------------------------------------------
    51  0000                    SAR10_SRC_TGRL:                                            equ   (00h)
    52  0010                    SAR10_SRC_TGRH:                                            equ   (10h)
    53  0020                    SAR10_SRC_TGR16:                                           equ   (20h)
    54  0030                    SAR10_SRC_TGRINCMP:                                        equ   (30h)
    55                          
    56                          ;--------------------------------------------------
    57                          ; SAR10 auto trigger definitions
    58                          ;--------------------------------------------------
    59  0001                    SAR10_AUTOTGR_ENABLE:                                      equ   (01h)
    60  0000                    SAR10_AUTOTGR_DISABLE:                                     equ   (00h)
    61                          
    62                          ;--------------------------------------------------
    63                          ; SAR10 clock selection definitions
    64                          ;--------------------------------------------------
    65  0000                    SAR10_SYSCLK_2:                                            equ   (00h)
    66  0002                    SAR10_SYSCLK_4:                                            equ   (02h)
    67  0004                    SAR10_SYSCLK_6:                                            equ   (04h)
    68  0006                    SAR10_SYSCLK_8:                                            equ   (06h)
    69  0008                    SAR10_SYSCLK_12:                                           equ   (08h)
    70  000A                    SAR10_SYSCLK_16:                                           equ   (0Ah)
    71  000C                    SAR10_SYSCLK_32:                                           equ   (0Ch)
    72  000E                    SAR10_SYSCLK_64:                                           equ   (0Eh)
    73                          
    74                          ;--------------------------------------------------
    75                          ; SAR10 run mode selection definitions
    76                          ;--------------------------------------------------
    77  0000                    SAR10_ONESHOT:                                             equ   (00h)
    78  0008                    SAR10_FREERUN:                                             equ   (08h)
    79                          
    80                          ;--------------------------------------------------
    81                          ; SAR10 definitions
    82                          ;--------------------------------------------------
    83  0000                    SAR10_Justify:                                             equ 0h
    84                          
    85                          ;--------------------------------------------------
    86                          ; Register Address Constants for SAR10
    87                          ;--------------------------------------------------
    88                          
    89  00A8                    SAR10_SAR_CR0_REG:                             equ 0xa8   ; SAR Control_0 register
    90  00A9                    SAR10_SAR_CR1_REG:                             equ 0xa9   ; SAR Control_1 register
    91  00AA                    SAR10_SAR_CR2_REG:                             equ 0xaa   ; SAR Control_2 register
    92  006A                    SAR10_SAR_DH_REG:                              equ 0x6a    ; SAR Data (MSB) register
    93  006B                    SAR10_SAR_DL_REG:                              equ 0x6b    ; SAR Data (LSB) register
    94                          
    95                          ;--------------------------------------------------
    96                          ; SAR10 Macro 'Functions'
    97                          ;--------------------------------------------------
    98                          
    99                             macro SAR10_Start_M
   100                             or    reg[SAR10_SAR_CR0_REG],  SAR10_SAR_CR0_REG_START_BIT
   101  3C41                       endm
   102                          
   103                             macro SAR10_Stop_M
   104                             and   reg[SAR10_SAR_CR0_REG], ~SAR10_SAR_CR0_REG_START_BIT
   105  3C41                       endm
   106                          
   107                             macro SAR10_EnableInt_M
   108                             M8C_EnableIntMask SAR10_INT_REG, SAR10_INT_SAR_MASK
   109  3C41                       endm
   110                          
   111                             macro SAR10_DisableInt_M
   112                             M8C_DisableIntMask SAR10_INT_REG, SAR10_INT_SAR_MASK
   113  3C41                       endm
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  FILENAME: SAR10INT.asm
     4                          ;;   Version: 2.00, Updated on 2013/5/19 at 10:39:9
     5                          ;;  Generated by PSoC Designer 5.4.2946
     6                          ;;
     7                          ;;  DESCRIPTION: SAR10 Interrupt Service Routine
     8                          ;;-----------------------------------------------------------------------------
     9                          ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
    10                          ;;*****************************************************************************
    11                          ;;*****************************************************************************
    12                          
    13                          include "m8c.inc"
    14                          include "memory.inc"
    15                          include "SAR10.inc"
    16                          
    17                          ;-----------------------------------------------
    18                          ;  Global Symbols
    19                          ;-----------------------------------------------
    20                          export  _SAR10_ISR
    21                          
    22                          
    23                          AREA InterruptRAM (RAM,REL,CON)
    24                             
    25                          ;@PSoC_UserCode_INIT@ (Do not change this line.)
    26                          ;---------------------------------------------------
    27                          ; Insert your custom declarations below this banner
    28                          ;---------------------------------------------------
    29                          
    30                          ;------------------------
    31                          ; Includes
    32                          ;------------------------
    33                          
    34                          	
    35                          ;------------------------
    36                          ;  Constant Definitions
    37                          ;------------------------
    38                          
    39                          
    40                          ;------------------------
    41                          ; Variable Allocation
    42                          ;------------------------
    43                          
    44                          ;---------------------------------------------------
    45                          ; Insert your custom declarations above this banner
    46                          ;---------------------------------------------------
    47                          ;@PSoC_UserCode_END@ (Do not change this line.)
    48                          
    49                          
    50                          AREA UserModules (ROM, REL)
    51                          
    52                          ;-----------------------------------------------------------------------------
    53                          ;  FUNCTION NAME: _SAR10_ISR
    54                          ;
    55                          ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
    56                          ;
    57                          ;-----------------------------------------------------------------------------
    58                          ;
    59                          
    60  2D4E                    _SAR10_ISR:
    61                          
    62                             ;@PSoC_UserCode_BODY@ (Do not change this line.)
    63                             ;---------------------------------------------------
    64                             ; Insert your custom assembly code below this banner
    65                             ;---------------------------------------------------
    66                             ;   NOTE: interrupt service routines must preserve
    67                             ;   the values of the A and X CPU registers.
    68                             
    69                             ;---------------------------------------------------
    70                             ; Insert your custom assembly code above this banner
    71                             ;---------------------------------------------------
    72                             
    73                             ;---------------------------------------------------
    74                             ; Insert a lcall to a C function below this banner
    75                             ; and un-comment the lines between these banners
    76                             ;---------------------------------------------------
    77                             
    78                             ;PRESERVE_CPU_CONTEXT
    79                             ;lcall _My_C_Function
    80                             ;RESTORE_CPU_CONTEXT
    81                             
    82                             ;---------------------------------------------------
    83                             ; Insert a lcall to a C function above this banner
    84                             ; and un-comment the lines between these banners
    85                             ;---------------------------------------------------
    86                             ;@PSoC_UserCode_END@ (Do not change this line.)
    87                          
    88  2D4E  7E                   reti
HI-TECH Software Macro Assembler (PSoC MCU) V9.61
Symbol Table                                                                                               Fri Jun 12 09:25:10 2015
                       HITECH 0002                     _SAR10_ISR 2D4E                      TOOLCHAIN 0002  
HI-TECH Software Macro Assembler (PSoC MCU) V9.61
                                                                                                           Fri Jun 12 09:25:10 2015
     1                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     2                          ;;;
     3                          ;;;  M8C.INC -- Microcontroller Device System Declarations
     4                          ;;;
     5                          ;;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
     6                          ;;;
     7                          ;;;  This file provides address constants, bit field masks and a set of macro
     8                          ;;;  facilities for the Cypress Semiconductor CY8C22045 Microcontroller devices.
     9                          ;;;
    10                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    11                          
    12                          ;;=============================================================================
    13                          ;; Definition of abbreviations used in the descriptions below
    14                          ;;  (RW)   The register or bit supports reads and writes
    15                          ;;  (W)    The register or bit is write-only
    16                          ;;  (R)    The register or bit is read-only
    17                          ;;  (#)    Access to the register is bit specific (see the family datasheet)
    18                          ;;  (RC)   The register or bit can be read, but writing a 0 will clear it,
    19                          ;;         writing a 1 will have no effect.
    20                          ;;=============================================================================
    21                          
    22                          ;;=============================================================================
    23                          ;;      System Registers
    24                          ;;=============================================================================
    25                          
    26                          ;----------------------------
    27                          ;  Flag Register Bit Fields
    28                          ;----------------------------
    29  00C0                    FLAG_PGMODE_MASK:  equ 0C0h     ; Paging control for > 256 bytes of RAM
    30  0000                    FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
    31  0040                    FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
    32  0080                    FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
    33  00C0                    FLAG_PGMODE_3:     equ 0C0h       ; Direct to CUR_PP page, indexed to STK_PP page
    34  0000                    FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
    35  0040                    FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
    36  0080                    FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
    37  00C0                    FLAG_PGMODE_11b:   equ 0C0h       ; Same as PGMODE_3
    38  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    39  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    40  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    41  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    42  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    43                          
    44                          
    45                          ;;=============================================================================
    46                          ;;      Register Space, Bank 0
    47                          ;;=============================================================================
    48                          
    49                          ;------------------------------------------------
    50                          ;  Port Registers
    51                          ;  Note: Also see this address range in Bank 1.
    52                          ;------------------------------------------------
    53                          ; Port 0
    54  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    55  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    56  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    57  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    58                          ; Port 1
    59  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    60  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    61  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    62  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    63                          ; Port 2
    64  0008                    PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
    65  0009                    PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
    66  000A                    PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
    67  000B                    PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
    68                          ; Port 3
    69  000C                    PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
    70  000D                    PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
    71  000E                    PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
    72  000F                    PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
    73                          ; Port 4
    74  0010                    PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
    75  0011                    PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
    76  0012                    PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
    77  0013                    PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
    78                          
    79                          ;------------------------------------------------
    80                          ;  Digital PSoC(tm) block Registers
    81                          ;  Note: Also see this address range in Bank 1.
    82                          ;------------------------------------------------
    83                          ; Digital PSoC block 00, Basic Type C
    84  0020                    DBC00DR0:     equ 20h          ; data register 0                          (#)
    85  0021                    DBC00DR1:     equ 21h          ; data register 1                          (W)
    86  0022                    DBC00DR2:     equ 22h          ; data register 2                          (RW)
    87  0023                    DBC00CR0:     equ 23h          ; control & status register 0              (#)
    88                          
    89                          ; Digital PSoC block 01, Basic Type C
    90  0024                    DBC01DR0:     equ 24h          ; data register 0                          (#)
    91  0025                    DBC01DR1:     equ 25h          ; data register 1                          (W)
    92  0026                    DBC01DR2:     equ 26h          ; data register 2                          (RW)
    93  0027                    DBC01CR0:     equ 27h          ; control & status register 0              (#)
    94                          
    95                          ; Digital PSoC block 02, Communications Type C
    96  0028                    DCC02DR0:     equ 28h          ; data register 0                          (#)
    97  0029                    DCC02DR1:     equ 29h          ; data register 1                          (W)
    98  002A                    DCC02DR2:     equ 2Ah          ; data register 2                          (RW)
    99  002B                    DCC02CR0:     equ 2Bh          ; control & status register 0              (#)
   100                          
   101                          ; Digital PSoC block 03, Communications Type C
   102  002C                    DCC03DR0:     equ 2Ch          ; data register 0                          (#)
   103  002D                    DCC03DR1:     equ 2Dh          ; data register 1                          (W)
   104  002E                    DCC03DR2:     equ 2Eh          ; data register 2                          (RW)
   105  002F                    DCC03CR0:     equ 2Fh          ; control & status register 0              (#)
   106                          
   107                          ; Digital PSoC block 10, Basic Type C
   108  0030                    DBC10DR0:     equ 30h          ; data register 0                          (#)
   109  0031                    DBC10DR1:     equ 31h          ; data register 1                          (W)
   110  0032                    DBC10DR2:     equ 32h          ; data register 2                          (RW)
   111  0033                    DBC10CR0:     equ 33h          ; control & status register 0              (#)
   112                          
   113                          ; Digital PSoC block 11, Basic Type C
   114  0034                    DBC11DR0:     equ 34h          ; data register 0                          (#)
   115  0035                    DBC11DR1:     equ 35h          ; data register 1                          (W)
   116  0036                    DBC11DR2:     equ 36h          ; data register 2                          (RW)
   117  0037                    DBC11CR0:     equ 37h          ; control & status register 0              (#)
   118                          
   119                          ; Digital PSoC block 12, Communications Type C
   120  0038                    DCC12DR0:     equ 38h          ; data register 0                          (#)
   121  0039                    DCC12DR1:     equ 39h          ; data register 1                          (W)
   122  003A                    DCC12DR2:     equ 3Ah          ; data register 2                          (RW)
   123  003B                    DCC12CR0:     equ 3Bh          ; control & status register 0              (#)
   124                          
   125                          ; Digital PSoC block 13, Communications Type C
   126  003C                    DCC13DR0:     equ 3Ch          ; data register 0                          (#)
   127  003D                    DCC13DR1:     equ 3Dh          ; data register 1                          (W)
   128  003E                    DCC13DR2:     equ 3Eh          ; data register 2                          (RW)
   129  003F                    DCC13CR0:     equ 3Fh          ; control & status register 0              (#)
   130                          
   131                          ;-------------------------------------
   132                          ;  Analog Control Registers
   133                          ;-------------------------------------
   134  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
   135  00C0                    AMX_IN_ACI3:          equ C0h    ; MASK: column 3 input mux
   136  0030                    AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
   137  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
   138  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
   139                          
   140  0061                    AMUX_CFG:      equ 61h          ; Analog MUX Configuration
   141  0030                    AMUX_CFG_INTCAP:       equ 30h    ;
   142  000E                    AMUX_CFG_MUXCLK:  	  equ 0Eh	 ;
   143  0001                    AMUX_CFG_EN:		  	  equ 01h	 ;
   144                          
   145                          ; old declarations DO NOT USE
   146  0061                    AMUXCFG:      equ 61h          ; Analog MUX Configuration
   147  0030                    AMUXCFG_INTCAP:       equ 30h    ;
   148  000E                    AMUXCFG_MUXCLK:  	  equ 0Eh	 ;
   149  0001                    AMUXCFG_EN:		  	  equ 01h	 ;
   150                          
   151  0062                    PWM_CR:       equ 62h          ; Pulse-Width Modulator Control
   152  0038                    PWM_CR_HIGH:          equ 38h    ; MASK: PWM high time
   153  0006                    PWM_CR_LOW:           equ 06h	 ; MASK: PWM low time
   154  0001                    PWM_CR_EN:            equ 01h	 ; MASK: Enable/Disable PWM function
   155                          
   156  0063                    ARF_CR:       equ 63h          ; Analog Reference Control
   157                          
   158  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus Register           (#)
   159  0080                    CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
   160  0040                    CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
   161  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
   162  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
   163  0008                    CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
   164  0004                    CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
   165  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
   166  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   167                          
   168  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   169  0020                    CMP_CR1_CLDIS1:       equ 20h    ; MASK: Column 1 comparator output latch
   170  0010                    CMP_CR1_CLDIS0:	      equ 10h    ; MASK: Column 0 comparator output latch
   171                          
   172  0068                    ADC0_CR:      equ 68h          ; Analog Column 0 Configuration
   173  0080                    ADC0_CR_CMPST:        equ 80h    ;
   174  0040                    ADC0_CR_LOREN:        equ 40h    ;
   175  0020                    ADC0_CR_SHEN:         equ 20h    ;
   176  0008                    ADC0_CR_CBSRC:        equ 08h    ;
   177  0004                    ADC0_CR_ADCM:         equ 04h    ;
   178  0001                    ADC0_CR_EN:	          equ 01h    ;
   179                          
   180  0069                    ADC1_CR:      equ 69h          ; Analog Column 1 Configuration
   181  0080                    ADC1_CR_CMPST:        equ 80h    ;
   182  0040                    ADC1_CR_LOREN:        equ 40h    ;
   183  0020                    ADC1_CR_SHEN:         equ 20h    ;
   184  0008                    ADC1_CR_CBSRC:        equ 08h    ;
   185  0004                    ADC1_CR_ADCM:         equ 04h    ;
   186  0001                    ADC1_CR_EN:	          equ 01h    ;
   187                          
   188                          ; Continuous Time PSoC block Type E Row 0 Col 0
   189  0072                    ACE00CR1:     equ 72h          ; Control register 1                       (RW)
   190  0073                    ACE00CR2:     equ 73h          ; Control register 2                       (RW)
   191                          
   192                          ; Continuous Time PSoC block Type E Row 0 Col 1
   193  0076                    ACE01CR1:     equ 76h          ; Control register 1                       (RW)
   194  0077                    ACE01CR2:     equ 77h          ; Control register 2                       (RW)
   195                          
   196                          ; Switched Cap PSoC blockType E Row 1 Col 0
   197  0080                    ASE10CR0:     equ 80h          ; Control register 0                       (RW)
   198                          
   199                          ; Switched Cap PSoC blockType E Row 1 Col 1
   200  0084                    ASE11CR0:     equ 84h          ; Control register 0                       (RW)
   201                          
   202                          ;-----------------------------------------------
   203                          ;  Global General Purpose Data Registers
   204                          ;-----------------------------------------------
   205  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   206  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   207  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   208  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   209                          
   210                          ;------------------------------------------------
   211                          ;  Row Digital Interconnects
   212                          ;
   213                          ;  Note: the following registers are mapped into
   214                          ;  both register bank 0 AND register bank 1.
   215                          ;------------------------------------------------
   216                          
   217  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   218  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   219  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   220  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   221  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   222  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   223  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   224                          
   225  00B8                    RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
   226  00B9                    RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
   227  00BA                    RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
   228  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   229  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   230  00BD                    RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
   231  00BE                    RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
   232                          
   233                          ;-----------------------------------------------
   234                          ;  Ram Page Pointers
   235                          ;-----------------------------------------------
   236  00D0                    CUR_PP:      equ 0D0h           ; Current   Page Pointer
   237  00D1                    STK_PP:      equ 0D1h           ; Stack     Page Pointer
   238  00D3                    IDX_PP:      equ 0D3h           ; Index     Page Pointer
   239  00D4                    MVR_PP:      equ 0D4h           ; MVI Read  Page Pointer
   240  00D5                    MVW_PP:      equ 0D5h           ; MVI Write Page Pointer
   241                          
   242                          ;------------------------------------------------
   243                          ;  I2C Configuration Registers
   244                          ;------------------------------------------------
   245  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   246  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   247  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   248  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   249  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   250  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   251  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   252  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   253  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   254  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   255                          
   256  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   257  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   258  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   259  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   260  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   261  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   262  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   263  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   264  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   265                          
   266  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   267                          
   268  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   269  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   270  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   271  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   272  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   273                          
   274                          ;------------------------------------------------
   275                          ;  System and Global Resource Registers
   276                          ;------------------------------------------------
   277  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   278                                                         ; Use INT_MSK0 bit field masks
   279  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   280                                                         ; Use INT_MSK1 bit field masks
   281  00DC                    INT_CLR2:     equ 0DCh          ; Interrupt Clear Register 2               (RW)
   282                                                         ; Use INT_MSK2 bit field masks
   283  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   284                                                         ; Use INT_MSK3 bit field masks
   285                          
   286  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   287  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   288  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   289                          
   290  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   291  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   292  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   293  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   294  0010                    INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
   295  0008                    INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
   296  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   297  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   298  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   299                          
   300  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   301  0080                    INT_MSK1_DCC13:            equ 80h ; MASK: enable/disable DCC13 block interrupt
   302  0040                    INT_MSK1_DCC12:            equ 40h ; MASK: enable/disable DCC12 block interrupt
   303  0020                    INT_MSK1_DBC11:            equ 20h ; MASK: enable/disable DBC11 block interrupt
   304  0010                    INT_MSK1_DBC10:            equ 10h ; MASK: enable/disable DBC10 block interrupt
   305+ 0008                    INT_MSK1_DCC03:            equ 08h ; MASK: enable/disable DCC03 block interrupt
   306  0004                    INT_MSK1_DCC02:            equ 04h ; MASK: enable/disable DCC02 block interrupt
   307  0002                    INT_MSK1_DBC01:            equ 02h ; MASK: enable/disable DBC01 block interrupt
   308  0001                    INT_MSK1_DBC00:            equ 01h ; MASK: enable/disable DBC00 block interrupt
   309                          
   310  00DF                    INT_MSK2:     equ DFh			; Custom block Mask Register			   (RW)
   311  0010                    INT_MSK2_SARADC:           equ 10h ; MASK: enable/disable SARADC block interrupt
   312  0020                    INT_MSK2_CSD0:             equ 20h ; MASK: enable/disable CSD0 block interrupt
   313  0040                    INT_MSK2_CSD1:             equ 40h ; MASK: enable/disable CSD1 block interrupt
   314  0080                    INT_MSK2_RTC:              equ 80h ; MASK: enable/disable RTC block interrupt
   315                          
   316  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   317  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   318                          
   319                          ;------------------------------------------------------
   320                          ;  MAC Registers
   321                          ;------------------------------------------------------
   322                          
   323  00E8                    MUL0_X:       equ 0E8h          ; Multiply Input X Register                (W)
   324  00E9                    MUL0_Y:       equ 0E9h          ; Multiply Input Y Register                (W)
   325  00EA                    MUL0_DH:      equ 0EAh          ; Multiply Result High Byte Register       (R)
   326  00EB                    MUL0_DL:      equ 0EBh          ; Multiply Result Low Byte Register        (R)
   327                          
   328  00EC                    ACC0_DR1:     equ 0ECh          ; Accumulator Data Register 1              (RW)
   329+ 00ED                    ACC0_DR0:     equ 0EDh          ; Accumulator Data Register 0              (RW)
   330+ 00EE                    ACC0_DR3:     equ 0EEh          ; Accumulator Data Register 3              (RW)
   331  00EF                    ACC0_DR2:     equ 0EFh          ; Accumulator Data Register 2              (RW)
   332                          
   333                          ; DECIMATOR Control Registers
   334  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   335  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   336                          
   337                          ;------------------------------------------------------
   338                          ;  System Status and Control Registers
   339                          ;
   340                          ;  Note: The following registers are mapped into both
   341                          ;        register bank 0 AND register bank 1.
   342                          ;------------------------------------------------------
   343  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   344                                                             ; Use FLAG_ masks defined at top of file
   345                          
   346  00FD                    DAC_D:        equ 0FDh		   ; DAC Data Register                        (RW)
   347                          
   348  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   349  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: flag, Internal Reset Status bit
   350  0010                    CPU_SCR1_SLIMO:         equ 10h	   ; MASK: Slow IMO (internal main osc) enable
   351  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   352  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   353  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   354                          
   355  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   356  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   357  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   358  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   359  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   360  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   361                          
   362                          ;------------------------------------------------------
   363                          ;  Neon Capsense Digital Control Registers
   364                          ;------------------------------------------------------
   365  0050                    CSD0_DR0_L:				equ 50h		; Capsense 0 data low 0				(RW)
   366  0054                    CSD0_DR0_H:				equ 54h		; Capsense 0 data high 0			(RW)
   367  0058                    CSD1_DR0_L:				equ 58h		; Capsense 1 data low 0				(RW)
   368  005C                    CSD1_DR0_H:				equ 5Ch		; Capsense 1 data high 0			(RW)
   369  0051                    CSD0_DR1_L:				equ 51h		; Capsense 0 data low 1				(RW)
   370  0055                    CSD0_DR1_H:				equ 55h		; Capsense 0 data high 1			(RW)
   371  0059                    CSD1_DR1_L:				equ 59h		; Capsense 1 data low 1				(RW)
   372  005D                    CSD1_DR1_H:				equ 5Dh		; Capsense 1 data high 1			(RW)
   373  0052                    CSD0_CNT_L:				equ 52h		; Capsense 0 counter low			(RW)
   374  0056                    CSD0_CNT_H:				equ 56h		; Capsense 0 counter high			(RW)
   375  005A                    CSD1_CNT_L:				equ 5Ah		; Capsense 1 counter low			(RW)
   376  005E                    CSD1_CNT_H:				equ	5Eh		; Capsense 1 counter high			(RW)
   377  0053                    CSD0_CR0:				equ 53h		; Capsense 0 control 0				(RW)
   378  005B                    CSD1_CR0:				equ 5Bh		; Capsense 1 control 0				(RW)
   379  0057                    CSD0_CR1:				equ 57h		; Capsense 0 control 1				(RW)
   380  005F                    CSD1_CR1:				equ 5Fh		; Capsense 1 control 1				(RW)
   381                          
   382                          ;------------------------------------------------------
   383                          ;  Neon Analog Registers
   384                          ;------------------------------------------------------
   385  0065                    ASY_CR:					equ 65h		; Analog Synchronization Control	(RW)
   386  006A                    ADC_DH:					equ 6Ah		; ADC data high						(RW)
   387  006B                    ADC_DL:					equ 6Bh		; ADC data low						(RW)
   388  00C8                    PWMVREF0:				equ C8h		; PWM Voltage Reference 0			(RW)
   389  00C9                    PWMVREF1:				equ C9h		; PWM Voltage Reference 1			(RW)
   390  00CB                    PWMSRC:					equ CBh		; PWM Source						(RW)
   391  00CA                    IDACMODE:				equ CAh		; IDAC Mode							(RW)
   392  00FC                    IDACR_D:				equ FCh		; Analog Mux DAC data 0				(RW)
   393  00FD                    IDACL_D:				equ FDh		; Analog Mux DAC data 1				(RW)
   394                          
   395                          ;------------------------------------------------------
   396                          ;  Neon Digital Registers
   397                          ;------------------------------------------------------
   398  00B7                    RDI0DSM:				equ B7h		; Row Digital Interconnect input select 0	(RW)
   399  00BF                    RDI1DSM:				equ BFh		; Row Digital Interconnect input select 1	(RW)
   400                          
   401                          ;------------------------------------------------------
   402                          ;  Neon Test Registers
   403                          ;------------------------------------------------------
   404  00CC                    TSCR0:					equ CCh		; Tsource 0							(RW)
   405  00CD                    TSCMPH:					equ CDh		; TSCMP high						(RW)
   406  00CE                    TSCMPL:					equ CEh		; TSCMP low							(RW)
   407  00CF                    TSCR1:					equ CFh		; Tsource 1							(RW)
   408                          
   409                          ;;=============================================================================
   410                          ;;      Register Space, Bank 1
   411                          ;;=============================================================================
   412                          
   413                          ;------------------------------------------------
   414                          ;  Port Registers
   415                          ;  Note: Also see this address range in Bank 0.
   416                          ;------------------------------------------------
   417                          ; Port 0
   418  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   419  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   420  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   421  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   422                          
   423                          ; Port 1
   424  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   425  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   426  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   427  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   428                          
   429                          ; Port 2
   430  0008                    PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
   431  0009                    PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
   432  000A                    PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
   433  000B                    PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
   434                          
   435                          ; Port 3
   436  000C                    PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
   437  000D                    PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
   438  000E                    PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
   439  000F                    PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
   440                          
   441                          ; Port 4
   442  0010                    PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
   443  0011                    PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
   444  0012                    PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
   445  0013                    PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
   446                          
   447                          ;------------------------------------------------
   448                          ;  Digital PSoC(tm) block Registers
   449                          ;  Note: Also see this address range in Bank 0.
   450                          ;------------------------------------------------
   451                          
   452                          ; Digital PSoC block 00, Basic Type C
   453  0020                    DBC00FN:      equ 20h          ; Function Register                        (RW)
   454  0021                    DBC00IN:      equ 21h          ;    Input Register                        (RW)
   455  0022                    DBC00OU:      equ 22h          ;   Output Register                        (RW)
   456  0023                    DBC00CR1:     equ 23h          ;   control & status register 1            (RW)
   457                          
   458                          ; Digital PSoC block 01, Basic Type C
   459  0024                    DBC01FN:      equ 24h          ; Function Register                        (RW)
   460  0025                    DBC01IN:      equ 25h          ;    Input Register                        (RW)
   461  0026                    DBC01OU:      equ 26h          ;   Output Register                        (RW)
   462  0027                    DBC01CR1:     equ 27h          ;   control & status register 1            (RW)
   463                          
   464                          ; Digital PSoC block 02, Communications Type C
   465  0028                    DCC02FN:      equ 28h          ; Function Register                        (RW)
   466  0029                    DCC02IN:      equ 29h          ;    Input Register                        (RW)
   467  002A                    DCC02OU:      equ 2Ah          ;   Output Register                        (RW)
   468  002B                    DBC02CR1:     equ 2Bh          ;   control & status register 1            (RW)
   469                          
   470                          ; Digital PSoC block 03, Communications Type C
   471  002C                    DCC03FN:      equ 2Ch          ; Function Register                        (RW)
   472  002D                    DCC03IN:      equ 2Dh          ;    Input Register                        (RW)
   473  002E                    DCC03OU:      equ 2Eh          ;   Output Register                        (RW)
   474  0029                    DBC03CR1:     equ 29h          ;   control & status register 1            (RW)
   475                          
   476                          ; Digital PSoC block 10, Basic Type C
   477  0030                    DBC10FN:      equ 30h          ; Function Register                        (RW)
   478  0031                    DBC10IN:      equ 31h          ;    Input Register                        (RW)
   479  0032                    DBC10OU:      equ 32h          ;   Output Register                        (RW)
   480  0033                    DBC10CR1:     equ 33h          ;   control & status register 1            (RW)
   481                          
   482                          ; Digital PSoC block 11, Basic Type C
   483  0034                    DBC11FN:      equ 34h          ; Function Register                        (RW)
   484  0035                    DBC11IN:      equ 35h          ;    Input Register                        (RW)
   485  0036                    DBC11OU:      equ 36h          ;   Output Register                        (RW)
   486  0037                    DBC11CR1:     equ 37h          ;   control & status register 1            (RW)
   487                          
   488                          ; Digital PSoC block 12, Communications Type C
   489  0038                    DCC12FN:      equ 38h          ; Function Register                        (RW)
   490  0039                    DCC12IN:      equ 39h          ;    Input Register                        (RW)
   491  003A                    DCC12OU:      equ 3Ah          ;   Output Register                        (RW)
   492  003B                    DBC12CR1:     equ 3Bh          ;   control & status register 1            (RW)
   493                          
   494                          ; Digital PSoC block 13, Communications Type C
   495  003C                    DCC13FN:      equ 3Ch          ; Function Register                        (RW)
   496  003D                    DCC13IN:      equ 3Dh          ;    Input Register                        (RW)
   497  003E                    DCC13OU:      equ 3Eh          ;   Output Register                        (RW)
   498  003F                    DBC13CR1:     equ 3Fh          ;   control & status register 1            (RW)
   499                          
   500                          ;------------------------------------------------
   501                          ;  System and Global Resource Registers
   502                          ;  Note: Also see this address range in Bank 0.
   503                          ;------------------------------------------------
   504                          
   505  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   506  00C0                    CLK_CR0_ACOLUMN_3:    equ C0h    ; MASK: Specify clock for analog cloumn
   507  0030                    CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
   508  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   509  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   510                          
   511  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   512  0018                    CLK_CR1_ACLK1:        equ 18h    ; MASK: Digital PSoC block for analog source
   513  0003                    CLK_CR1_ACLK0:        equ 03h    ; MASK: Digital PSoC block for analog source
   514                          
   515  0003                    CLK_CR1_ACLK2:        equ 03h    ; Deprecated do not use
   516                          
   517  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   518  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   519                          
   520  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   521  000F                    AMD_CR0_AMOD0:        equ 0Fh    ; MASK: Modulation source for analog column 0
   522                          
   523  0064                    CMP_GO_EN:    equ 64h          ; Comparator Bus To Global Out Enable      (RW)
   524  0080                    CMP_GO_EN_GOO5:       equ 80h    ; MASK: Selected Col 1 signal to GOO5
   525  0040                    CMP_GO_EN_GOO1:       equ 40h    ; MASK: Selected Col 1 signal to GOO1
   526  0030                    CMP_GO_EN_SEL1:       equ 30h    ; MASK: Column 1 Signal Select
   527  0008                    CMP_GO_EN_GOO4:       equ 08h    ; MASK: Selected Col 0 signal to GOO4
   528  0004                    CMP_GO_EN_GOO0:       equ 04h    ; MASK: Selected Col 0 signal to GOO0
   529  0003                    CMP_GO_EN_SEL0:       equ 03h    ; MASK: Column 0 Signal Select
   530                          
   531  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   532  000F                    AMD_CR1_AMOD1:        equ 0Fh    ; MASK: Modulation ctrl for analog column 1
   533                          
   534  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   535  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   536  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   537                          
   538  006B                    CLK_CR3:      equ 6Bh          ; Analog Clock Source Control Register 3   (RW)
   539  0040                    CLK_CR3_SYS1:         equ 40h    ; MASK: Analog Clock 1 selection
   540  0030                    CLK_CR3_DIVCLK1:      equ 30h    ; MASK: Analog Clock 1 divider
   541  0004                    CLK_CR3_SYS0:         equ 04h    ; MASK: Analog Clock 0 selection
   542  0003                    CLK_CR3_DIVCLK0:      equ 03h    ; MASK: Analog Clock 0 divider
   543                          
   544                          ;------------------------------------------------
   545                          ;  Global Digital Interconnects
   546                          ;------------------------------------------------
   547                          
   548  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   549  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   550  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   551  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   552                          
   553  00A0                    GDI_O_IN_CR:  equ 0A0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   554  00A1                    GDI_E_IN_CR:  equ 0A1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   555  00A2                    GDI_O_OU_CR:  equ 0A2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   556  00A3                    GDI_E_OU_CR:  equ 0A3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   557                          
   558  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   559  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   560                          
   561                          ;------------------------------------------------
   562                          ;  Analog Mux Bus Port Enable Bits
   563                          ;------------------------------------------------
   564  00D8                    MUX_CR0:      equ 0D8h          ; Analog Mux Port 0 Bit Enables Register
   565  00D9                    MUX_CR1:      equ 0D9h          ; Analog Mux Port 1 Bit Enables Register
   566  00DA                    MUX_CR2:      equ 0DAh          ; Analog Mux Port 2 Bit Enables Register
   567  00DB                    MUX_CR3:      equ 0DBh          ; Analog Mux Port 3 Bit Enables Register
   568  00EC                    MUX_CR4:      equ 0ECh          ; Analog Mux Port 4 Bit Enables Register
   569                          
   570                          ;------------------------------------------------
   571                          ;  Clock and System Control Registers
   572                          ;------------------------------------------------
   573                          
   574  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   575  0080                    OSC_GO_EN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   576  0040                    OSC_GO_EN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   577  0020                    OSC_GO_EN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   578  0010                    OSC_GO_EN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   579  0008                    OSC_GO_EN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   580  0004                    OSC_GO_EN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   581  0002                    OSC_GO_EN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   582  0001                    OSC_GO_EN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   583                          
   584  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   585  0003                    OSC_CR4_VC3SEL:       equ 03h    ; MASK: System VC3 Clock source
   586                          
   587  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   588                          
   589  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   590  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   591  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   592  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   593  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   594  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   595  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   596  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   597  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   598  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   599  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   600  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   601  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   602  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   603  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   604  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   605  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   606  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   607                          
   608  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   609  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   610  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   611                          
   612  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   613  0080                    OSC_CR2_PLLGAIN:      equ 80h    ; MASK: High/Low gain
   614  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   615  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   616  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   617                          
   618  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   619  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   620  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   621  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   622  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   623  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   624  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   625  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   626                          
   627  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   628  0008                    VLT_CMP_NOWRITE:      equ 08h    ; MASK: Vcc below Flash Write level
   629  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   630  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   631  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   632                          
   633  00E5                    ADC0_TR:      equ 0E5h          ; ADC Column 0 Trim Register
   634  00E6                    ADC1_TR:      equ 0E6h          ; ADC Column 1 Trim Register
   635                          
   636  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   637  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   638  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   639  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   640                          
   641  00FA                    FLS_PR1:      equ 0FAh          ; Flash Program Register 1                 (RW)
   642  0003                    FLS_PR1_BANK:         equ 03h    ; MASK: Select Active Flash Bank
   643                          
   644  00FD                    DAC_CR0:       equ 0FDh          ; Analog Mux DAC Control Register 0
   645  00DC                    DAC_CR1:       equ 0DCh          ; Analog Mux DAC Control Register 1
   646  0008                    DAC_CR_IRANGE:        equ 08h    ; MASK: Sets the DAC Range low or high
   647  0006                    DAC_CR_OSCMODE:       equ 06h    ; MASK: Defines the reset mode for AMux
   648  0001                    DAC_CR_ENABLE:        equ 01h    ; MASK: Enable/Disable DAC function
   649                          
   650                          ;------------------------------------------------
   651                          ;  I2C Control Registers
   652                          ;------------------------------------------------
   653                          
   654  00AD                    I2C_ADDR:    equ 0ADh          ; I2C Address Register (RW)
   655                          
   656                          ;------------------------------------------------------
   657                          ;  Neon Analog Registers
   658                          ;------------------------------------------------------
   659  0053                    VDAC50CR0:		equ 53h			; V DAC5 control 0				(RW)
   660  0057                    VDAC51CR0:		equ 57h			; V DAC5 control 1				(RW)
   661  00A8                    ADC_CR0:		equ A8h			; ADC control 0					(RW)
   662  00A9                    ADC_CR1:		equ A9h			; ADC control 1					(RW)
   663  00AA                    ADC_CR2:		equ AAh			; ADC control 2					(RW)
   664  00AB                    ADC_CR3TRIM:	equ ABh			; ADC control 3					(RW)
   665  00AC                    ADC_CR4:		equ ACh			; ADC control 4					(RW)
   666  00E7                    VDAC_TRIM:		equ E7h			; V DAC trim					(RW)
   667                          
   668                          ;------------------------------------------------------
   669                          ;  Neon Current Sense CMP Registers
   670                          ;------------------------------------------------------
   671  0050                    CMP0CR1:		equ 50h			; CMP0 control 1				(RW)
   672  0051                    CMP0CR2:		equ 51h			; CMP0 control 2				(RW)
   673  0054                    CMP1CR1:		equ 54h			; CMP1 control 1				(RW)
   674  0055                    CMP1CR2:		equ 55h			; CMP1 control 2				(RW)
   675  0058                    CSCMPCR0:		equ 58h			; CSCMP control 0				(RW)
   676  0059                    CSCMPGOEN:		equ 59h			; CSCMO global out enable		(RW)
   677  005A                    CSLUTCR0:		equ 5Ah			; CSLUT control 0				(RW)
   678  005B                    CMPCOLMUX:		equ 5Bh			; CMP Column Mux				(RW)
   679  005C                    CMPPWMCR:		equ 5Ch			; CMP PWM control				(RW)
   680  005D                    CMPFLTCR:		equ 5Dh			; CMP filter control			(RW)
   681  005E                    CMPCLK1:		equ 5Eh			; CMP clock 1					(RW)
   682  005F                    CMPCLK0:		equ 5Fh			; CMP clock 0					(RW)
   683                          
   684                          ;------------------------------------------------------
   685                          ;  Neon Real Time Clock Registers
   686                          ;------------------------------------------------------
   687  00A4                    RTCH:			equ A4h			; Real time current hour		(RW)
   688  00A5                    RTCM:			equ A5h			; Real time current minute		(RW)
   689  00A6                    RTCS:			equ A6h			; Real time current second		(RW)
   690  00A7                    RTCCR:			equ A7h			; Real time clock control		(RW)
   691                          
   692                          ;------------------------------------------------------
   693                          ;  Analog MUX Config Registers
   694                          ;------------------------------------------------------
   695                          
   696  006A                    AMUX_CFG1:			equ 6Ah  ; Analog MUX Configuration 1
   697  0020                    AMUX_CFG1_GOINVR:	equ 20h  ;
   698  0010                    AMUX_CFG1_GOINVL:  	equ 10h	 ;
   699  000C                    AMUX_CFG1_AMUXMODR:	equ 0Ch	 ;
   700  0003                    AMUX_CFG1_AMUXMODL:	equ 03h	 ;
   701                          
   702                          ;;=============================================================================
   703                          ;;      M8C System Macros
   704                          ;;  These macros should be used when their functions are needed.
   705                          ;;=============================================================================
   706                          
   707                          ;----------------------------------------------------
   708                          ;  Swapping Register Banks
   709                          ;----------------------------------------------------
   710                              macro M8C_SetBank0
   711                              and   F, ~FLAG_XIO_MASK
   712  3C41                        endm
   713                          
   714                              macro M8C_SetBank1
   715                              or    F, FLAG_XIO_MASK
   716  3C41                        endm
   717                          
   718                          ;----------------------------------------------------
   719                          ;  Global Interrupt Enable/Disable
   720                          ;----------------------------------------------------
   721                              macro M8C_EnableGInt
   722                              or    F, FLAG_GLOBAL_IE
   723  3C41                        endm
   724                          
   725                              macro M8C_DisableGInt
   726                              and   F, ~FLAG_GLOBAL_IE
   727  3C41                        endm
   728                          
   729                          ;----------------------------------------------------
   730                          ;  Enable/Disable Interrupt Mask
   731                          ;
   732                          ;  Use the following macros to enable/disable
   733                          ;  bits in the Interrupt mask registers,
   734                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   735                          ;
   736                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   737                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   738                          ;
   739                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   740                          ;        and MASK is the bit set to enable or disable
   741                          ;----------------------------------------------------
   742                          ; Disable Interrupt Bit Mask(s)
   743                              macro M8C_DisableIntMask
   744                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   745  3C41                        endm
   746                          
   747                          ; Enable Interrupt Bit Mask(s)
   748                              macro M8C_EnableIntMask
   749                              or    reg[@0], @1               ; enable specified interrupt enable bit
   750  3C41                        endm
   751                          
   752                          ;----------------------------------------------------
   753                          ;  Clear Posted Interrupt Flag Mask
   754                          ;
   755                          ;  Use the following macros to clear the
   756                          ;  bits in the Interrupt Clear registers,
   757                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   758                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   759                          ;
   760                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   761                          ;        and MASK is the bit set to enable or disable
   762                          ;----------------------------------------------------
   763                              macro M8C_ClearIntFlag
   764                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   765  3C41                        endm
   766                          
   767                          ;----------------------------------------------------
   768                          ;  Power-On Reset & WatchDog Timer Functions
   769                          ;----------------------------------------------------
   770                              macro M8C_EnableWatchDog
   771                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   772  3C41                        endm
   773                          
   774                              macro M8C_ClearWDT
   775                              mov   reg[RES_WDT], 00h
   776  3C41                        endm
   777                          
   778                              macro M8C_ClearWDTAndSleep
   779                              mov   reg[RES_WDT], 38h
   780  3C41                        endm
   781                          
   782                          ;----------------------------------------------------
   783                          ;  Sleep, CPU Stop & Software Reset
   784                          ;----------------------------------------------------
   785                              macro M8C_Sleep
   786                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   787                              ; The next instruction to be executed depends on the state of the
   788                              ; various interrupt enable bits. If some interrupts are enabled
   789                              ; and the global interrupts are disabled, the next instruction will
   790                              ; be the one that follows the invocation of this macro. If global
   791                              ; interrupts are also enabled then the next instruction will be
   792                              ; from the interrupt vector table. If no interrupts are enabled
   793                              ; then the CPU sleeps forever.
   794  3C41                        endm
   795                          
   796                              macro M8C_Stop
   797                              ; In general, you probably don't want to do this, but here's how:
   798                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   799                              ; Next instruction to be executed is located in the interrupt
   800                              ; vector table entry for Power-On Reset.
   801  3C41                        endm
   802                          
   803                              macro M8C_Reset
   804                              ; Restore CPU to the power-on reset state.
   805                              mov A, 0
   806                              SSC
   807                              ; Next non-supervisor instruction will be at interrupt vector 0.
   808  3C41                        endm
   809                          
   810                          ;----------------------------------------------------
   811                          ; ImageCraft Code Compressor Actions
   812                          ;----------------------------------------------------
   813                              ; Suspend Code Compressor
   814                              ; Must not span a RET or RETI instruction
   815                              ; without resuming code compression
   816                              macro Suspend_CodeCompressor
   817                              or   F, 0
   818  3C41                        endm
   819                          
   820                              ; Resume Code Compression
   821                              macro Resume_CodeCompressor
   822                              add  SP, 0
   823                              endm
      + 3C41                    
      + 3C41                    ; end of file m8c.inc
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;
     4                          ;;       FILENAME: Memory.inc
     5                          ;;
     6                          ;;    DESCRIPTION: Memory Model and Stack Parameter Definitions for 
     7                          ;;                 CY8C22045 PSoC devices.
     8                          ;;
     9                          ;;  LAST MODIFIED: August 17, 2004
    10                          ;;
    11                          ;;-----------------------------------------------------------------------------
    12                          ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
    13                          ;;*****************************************************************************
    14                          ;;*****************************************************************************
    15                          ;
    16                          ;
    17                          ;  ******** Define Memory Model and Stack parameters ********
    18                          ;
    19  0001                    IMAGECRAFT: equ 1   
    20  0002                    HITECH: equ 2   
    21  0002                    TOOLCHAIN: equ HITECH   
    22  0001                    SYSTEM_LARGE_MEMORY_MODEL: equ 1   
    23  0000                    SYSTEM_SMALL_MEMORY_MODEL: equ 0   
    24  0003                    SYSTEM_STACK_PAGE: equ 3   
    25  0000                    SYSTEM_STACK_PAGE_OFFSET: equ 0   
    26  0002                    SYSTEM_TOOLS: equ 2   
    27  0000                    SYSTEM_IDXPG_TRACKS_STK_PP: equ 0   
    28  0001                    SYSTEM_IDXPG_TRACKS_IDX_PP: equ 1   
    29  0000                    SYSTEM_MULTIPAGE_STACK: equ 0 
    30                          
    31                          
    32                          ;  ******* Function Class Definitions *******
    33                          ;
    34                          ;  These definitions are used to describe RAM access patterns. They provide
    35                          ;  documentation and they control prologue and epilogue macros that perform
    36                          ;  the necessary housekeeping functions for large memory model devices like
    37                          ;  the CY8C22045.
    38                          
    39  0001                    RAM_USE_CLASS_1:               equ 1   ; PUSH, POP & I/O access
    40  0002                    RAM_USE_CLASS_2:               equ 2   ; Indexed address mode on stack page
    41  0004                    RAM_USE_CLASS_3:               equ 4   ; Indexed address mode to any page
    42  0008                    RAM_USE_CLASS_4:               equ 8   ; Direct/Indirect address mode access
    43                          
    44                          ; ******* Hi Tech Specific *******
    45                          ; Turn on the expansion of all macros by default
    46                          IF (TOOLCHAIN & HITECH)
    47                          OPT EXPAND
    48                          ENDIF
    49                          ; ******* Page Pointer Manipulation Macros *******
    50                          ;
    51                          ;  ******* Page Pointer Manipulation Macros *******
    52                          ;
    53                          ;  Most of the following macros are conditionally compiled so they only
    54                          ;  produce code if the large memory model is selected.
    55                          
    56                             ;-----------------------------------------------
    57                             ;  Set Stack Page Macro
    58                             ;-----------------------------------------------
    59                             ;
    60                             ;  DESC: Modify STK_PP in the large or small memory Models.
    61                             ;
    62                             ; INPUT: Constant (e.g., SYSTEM_STACK_PAGE) that specifies the RAM page on
    63                             ;        which stack operations like PUSH and POP store and retrieve their
    64                             ;        data
    65                             ;
    66                             ;  COST: 8 instruction cycles (in LMM only)
    67                          
    68                             macro RAM_SETPAGE_STK( PG_NUMBER )
    69                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    70                                mov reg[STK_PP], @PG_NUMBER
    71                             ENDIF
    72  3C41                       endm
    73                          
    74                             ;-----------------------------------------------
    75                             ;  Set Current Page Macro
    76                             ;-----------------------------------------------
    77                             ;
    78                             ;  DESC: Modify CUR_PP in the large or small memory Models.
    79                             ;
    80                             ; INPUT: Constant value (e.g., >bFoo) for the RAM page number used in
    81                             ;        calculation of effective direct-mode address operands.
    82                             ;
    83                             ;  COST: 8 instruction cycles (in LMM only)
    84                          
    85                             macro RAM_SETPAGE_CUR( PG_NUMBER )
    86                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    87                                mov reg[CUR_PP], @PG_NUMBER
    88                             ENDIF
    89  3C41                       endm
    90                          
    91                             ;-----------------------------------------------
    92                             ;  Set Index Page Macro
    93                             ;-----------------------------------------------
    94                             ;
    95                             ;  DESC: Modify IDX_PP in the large or small emory Models.
    96                             ;
    97                             ; INPUT: Constant value (e.g., >caFoo) for the RAM page number used in
    98                             ;         calculation of effective index-mode address operands.
    99                             ;
   100                             ;  COST: 8 instruction cycles (in LMM only)
   101                          
   102                             macro RAM_SETPAGE_IDX( PG_NUMBER )
   103                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   104                                mov reg[IDX_PP], @PG_NUMBER
   105                             ENDIF
   106  3C41                       endm
   107                          
   108                             ;-----------------------------------------------
   109                             ;  Set MVI Read Page Macro
   110                             ;-----------------------------------------------
   111                             ;
   112                             ;  DESC: Modify MVR_PP in the large or small memory Models.
   113                             ;
   114                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   115                             ;        calculation of indirect address operands used in the
   116                             ;        "mvi A, [pFoo]" instructions.
   117                             ;
   118                             ;  COST: 8 instruction cycles (in LMM only)
   119                          
   120                             macro RAM_SETPAGE_MVR( PG_NUMBER )
   121                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   122                                mov reg[MVR_PP], @PG_NUMBER
   123                             ENDIF
   124  3C41                       endm
   125                          
   126                             ;-----------------------------------------------
   127                             ;  Set MVI Write Page Macro
   128                             ;-----------------------------------------------
   129                             ;
   130                             ;  DESC: Modify MVW_PP in the large or small memory Models.
   131                             ;
   132                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   133                             ;        calculation of indirect address operands used in the
   134                             ;        "mvi [pFoo], A" instructions.
   135                             ;
   136                             ;  COST: 8 instruction cycles (in LMM only)
   137                          
   138                             macro RAM_SETPAGE_MVW( PG_NUMBER )
   139                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   140                                mov reg[MVW_PP], @PG_NUMBER
   141                             ENDIF
   142  3C41                       endm
   143                          
   144                             ;-----------------------------------------------
   145                             ;  Force Index Page Pointer to Stack Page
   146                             ;-----------------------------------------------
   147                             ;
   148                             ;  DESC: Map index-mode operands onto the stack page by modifying IDX_PP.
   149                             ;        See also RAM_LOCK_INDEX_TO_STACKPAGE.
   150                             ;
   151                             ; INPUT: None
   152                             ;
   153                             ;  COST: 8 instruction cycles (in LMM only)
   154                          
   155                             macro RAM_SETPAGE_IDX2STK
   156                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   157                                IF ( SYSTEM_MULTIPAGE_STACK )
   158                                   mov   A, reg[STK_PP]
   159                                   mov   reg[IDX_PP], A
   160                                ELSE
   161                                   RAM_SETPAGE_IDX SYSTEM_STACK_PAGE
   162                                ENDIF
   163                             ENDIF
   164  3C41                       endm
   165                          
   166                             ;-----------------------------------------------
   167                             ;  Change Memory Mode
   168                             ;-----------------------------------------------
   169                             ;
   170                             ;  DESC: Modify FLAG_PAGEMODE bits in the large and small memory Models.
   171                             ;
   172                             ; INPUT: Constant value for PGMODE bitfield of CPU Flag register, F.
   173                             ;        See FLAG_PGMODE_{x} constants in M8C.INC.
   174                             ;
   175                             ;  COST: 8 instruction cycles (in LMM only)
   176                          
   177                             macro RAM_CHANGE_PAGE_MODE( MODE )
   178                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   179                                and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
   180                                or    F,  FLAG_PGMODE_MASK & @MODE
   181                             ENDIF
   182  3C41                       endm
   183                          
   184                             ;-----------------------------------------------
   185                             ;  Set Large Memory Model Native Paging Mode
   186                             ;-----------------------------------------------
   187                             ;
   188                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   189                             ;        paging mode *IFF* a simple "OR" is guaranteed to work---for
   190                             ;        example, in an ISR, when the PGMODE bits have been cleared
   191                             ;        to zero. If a simple "OR" is not guaranteed to work, use
   192                             ;        the slower RAM_RESTORE_NATIVE_PAGING instead.
   193                             ;
   194                             ; INPUT: none
   195                             ;
   196                             ;  COST: 4 instruction cycles (in LMM only)
   197                          
   198                             macro RAM_SET_NATIVE_PAGING
   199                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   200                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   201                                or    F,  FLAG_PGMODE_11b            ; LMM w/ IndexPage<==>StackPage
   202                             ENDIF ;  PGMODE LOCKED
   203                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   204                                or    F,  FLAG_PGMODE_10b            ; LMM with independent IndexPage
   205                             ENDIF ; PGMODE FREE
   206                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   207  3C41                       endm
   208                          
   209                             ;-----------------------------------------------
   210                             ; Restore Large Memory Model Native Paging Mode
   211                             ;-----------------------------------------------
   212                             ;
   213                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   214                             ;        paging mode. Always works because it clears the PGMODE bits
   215                             ;        before OR-ing in the new ones. See RAM_RESTORE_NATIVE_PAGING
   216                             ;        for a faster method.
   217                             ;
   218                             ; INPUT: none
   219                             ;
   220                             ;  COST: 8 instruction cycles (in LMM only)
   221                          
   222                             macro RAM_RESTORE_NATIVE_PAGING
   223                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   224                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   225                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_11b ; LMM w/ IndexPage<==>StackPage
   226                             ENDIF ;  PGMODE LOCKED
   227                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   228                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b ; LMM with independent IndexPage
   229                             ENDIF ; PGMODE FREE
   230                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   231  3C41                       endm
   232                          
   233                             ;-----------------------------------------------
   234                             ; Force indexed addr mode operands to Stack Pg
   235                             ;-----------------------------------------------
   236                             ;
   237                             ;  DESC: Force instructions that use indexed address mode to reference the
   238                             ;        stack page (as defined by STK_PP). This macro sets the "Indexed
   239                             ;        Stack Mode" bit (LSB) of the PGMODE bit field in the CPU Flag
   240                             ;        register, F. (See also RAM_SETPAGE_IDX2STK, above.)
   241                             ;
   242                             ; INPUT: none
   243                             ;
   244                             ;  COST: 4 instruction cycles (in LMM only)
   245                          
   246                             macro RAM_X_POINTS_TO_STACKPAGE
   247                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   248                                or   F, FLAG_PGMODE_01b
   249                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   250  3C41                       endm
   251                          
   252                             ;-----------------------------------------------
   253                             ;  Force indexed addr mode operands to Index Pg
   254                             ;-----------------------------------------------
   255                             ;
   256                             ;  DESC: Permit instructions that use indexed address mode to reference page
   257                             ;        zero or the page pointed to by the IDX_PP register, depending on the
   258                             ;        setting of the MSb (or "Direct Page Mode" bit) of the PGMODE bits
   259                             ;        in the CPU Flag register, F. (This macro clears the PGMODE LSb.)
   260                             ;
   261                             ; INPUT: none
   262                             ;
   263                             ;  COST: 4 instruction cycles (in LMM only)
   264                          
   265                             macro RAM_X_POINTS_TO_INDEXPAGE
   266                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   267                                and  F, ~FLAG_PGMODE_01b
   268                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   269  3C41                       endm
   270                          
   271                             ;-----------------------------------------------
   272                             ;  Function Prologue
   273                             ;-----------------------------------------------
   274                             ;
   275                             ;  Prologue for functions that run in the LMM and SMM.
   276                             ;
   277                          
   278                             macro RAM_PROLOGUE( ACTUAL_CLASS )
   279                          
   280                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   281                             ; Nothing to do
   282                             ENDIF ; RAM_USE_CLASS_1
   283                          
   284                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   285                                IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   286                                   RAM_X_POINTS_TO_STACKPAGE         ; exit native paging mode!
   287                                ENDIF
   288                             ENDIF ; RAM_USE_CLASS_2
   289                          
   290                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   291                                IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   292                                   RAM_X_POINTS_TO_INDEXPAGE         ; exit native paging mode!
   293                                ENDIF
   294                             ENDIF ; RAM_USE_CLASS_3
   295                          
   296                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   297                             ; Nothing to do
   298                             ENDIF ; RAM_USE_CLASS_4
   299                          
   300  3C41                       endm
   301                          
   302                             ;-----------------------------------------------
   303                             ;  Function Epilogue
   304                             ;-----------------------------------------------
   305                             ;
   306                             ;  Prologue for functions that run in the LMM and SMM.
   307                             ;
   308                          
   309                             macro RAM_EPILOGUE( ACTUAL_CLASS )
   310                          
   311                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   312                             ; Nothing to do
   313                             ENDIF ; RAM_USE_CLASS_1
   314                          
   315                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   316                                RAM_RESTORE_NATIVE_PAGING
   317                             ENDIF ; RAM_USE_CLASS_2
   318                          
   319                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   320                                RAM_RESTORE_NATIVE_PAGING
   321                             ENDIF ; RAM_USE_CLASS_3
   322                          
   323                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   324                             ; Nothing to do
   325                             ENDIF ; RAM_USE_CLASS_4
   326                          
   327  3C41                       endm
   328                          
   329                             ;-----------------------------------------------
   330                             ;  Preserve Register
   331                             ;-----------------------------------------------
   332                             ;
   333                             ;  DESC: Preserve a register value on the stack
   334                             ;
   335                             ; INPUT: Name or address of register in I/O Space
   336                             ;        The I/O bank is an implicit parameter. That is, this function will
   337                             ;        Access the I/O bank currently specified by the CPU Flag register.
   338                             ;
   339                             ;  USES: CPU 'A' register
   340                             ;
   341                             ;  COST: 9 instruction cycles
   342                          
   343                             macro REG_PRESERVE( IOReg )
   344                             mov   A, reg[ @IOReg ]
   345                             push  A
   346  3C41                       endm
   347                          
   348                             ;-----------------------------------------------
   349                             ;  Restore Register
   350                             ;-----------------------------------------------
   351                             ;
   352                             ;  DESC: Restore a register value from the stack
   353                             ;
   354                             ; INPUT: Name or address of register in I/O Space
   355                             ;        The I/O bank is an implicit parameter. That is, this function will
   356                             ;        Access the I/O bank currently specified by the CPU Flag register.
   357                             ;
   358                             ;  USES: CPU 'A' register
   359                             ;
   360                             ;  COST: 10 instruction cycles
   361                          
   362                             macro REG_RESTORE( IOReg )
   363                             pop   A
   364                             mov   reg[ @IOReg ], A
   365  3C41                       endm
   366                          
   367                             ;-----------------------------------------------
   368                             ;  Preserve Volatile Page Pointer Registers
   369                             ;-----------------------------------------------
   370                             ;
   371                             ;  DESC: Invoked by ISRs before switching to the LMM mode and calling
   372                             ;        functions that require on it.
   373                             ;
   374                             ; INPUT: none
   375                             ;
   376                             ;  USES: CPU 'A' register
   377                             ;
   378                             ;  COST: 45 instruction cycles (in LMM only)
   379                          
   380                             macro ISR_PRESERVE_PAGE_POINTERS
   381                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   382                                REG_PRESERVE CUR_PP
   383                                REG_PRESERVE IDX_PP
   384                                REG_PRESERVE MVR_PP
   385                                REG_PRESERVE MVW_PP
   386                             ENDIF
   387  3C41                       endm
   388                          
   389                             ;-----------------------------------------------
   390                             ;  Restore Volatile Page Pointer Registers
   391                             ;-----------------------------------------------
   392                             ;
   393                             ;  DESC: Undo for RAM_PRESERVE_PAGE_POINTERS macro. Invoked by ISRs after
   394                             ;        calling functions that run in the LMM mode and before executing
   395                             ;        the RETI instruction.
   396                             ;
   397                             ; INPUT: none
   398                             ;
   399                             ;  USES: CPU 'A' register
   400                             ;
   401                             ;  COST: 50 instruction cycles (in LMM only)
   402                          
   403                             macro ISR_RESTORE_PAGE_POINTERS
   404                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   405                                REG_RESTORE MVW_PP
   406                                REG_RESTORE MVR_PP
   407                                REG_RESTORE IDX_PP
   408                                REG_RESTORE CUR_PP
   409                             ENDIF
   410                             endm
      + 3C41                    
      + 3C41                    ; end of file Memory.inc
      + 3C41                    ;;*****************************************************************************
;;******************
      +                         ***********************************************************
;;  FILENAME: Timer16.inc
;;   Version: 
      +                         2.6, Updated on 2013/5/19 at 10:44:39
;;  Generated by PSoC Designer 5.4.2946
;;
;;  DESCRIPTION: As
      +                         sembler declarations for the Timer16 user module interface
;;---------------------------------------
      +                         --------------------------------------
;;  Copyright (c) Cypress Semiconductor 2013. All Rights Rese
      +                         rved.
;;*****************************************************************************
;;************
      +                         *****************************************************************
   824                          
   825                          ; end of file m8c.inc
    29  00C0                    FLAG_PGMODE_MASK:  equ 0C0h     ; Paging control for > 256 bytes of RAM
    30  0000                    FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
    31  0040                    FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
    32  0080                    FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
    33  00C0                    FLAG_PGMODE_3:     equ 0C0h       ; Direct to CUR_PP page, indexed to STK_PP page
    34  0000                    FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
    35  0040                    FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
    36  0080                    FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
    37  00C0                    FLAG_PGMODE_11b:   equ 0C0h       ; Same as PGMODE_3
    38  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    39  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    40  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    41  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    42  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    43                          
    44                          
    45                          ;;=============================================================================
    46                          ;;      Register Space, Bank 0
    47                          ;;=============================================================================
    48                          
    49                          ;------------------------------------------------
    50                          ;  Port Registers
    51                          ;  Note: Also see this address range in Bank 1.
    52                          ;------------------------------------------------
    53                          ; Port 0
    54  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    55  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    56  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    57  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    58                          ; Port 1
    59  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    60  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    61  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    62  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    63                          ; Port 2
    64  0008                    PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
    65  0009                    PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
    66  000A                    PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
    67  000B                    PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
    68                          ; Port 3
    69  000C                    PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
    70  000D                    PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
    71  000E                    PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
    72  000F                    PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
    73                          ; Port 4
    74  0010                    PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
    75  0011                    PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
    76  0012                    PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
    77  0013                    PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
    78                          
    79                          ;------------------------------------------------
    80                          ;  Digital PSoC(tm) block Registers
    81                          ;  Note: Also see this address range in Bank 1.
    82                          ;------------------------------------------------
    83                          ; Digital PSoC block 00, Basic Type C
    84  0020                    DBC00DR0:     equ 20h          ; data register 0                          (#)
    85  0021                    DBC00DR1:     equ 21h          ; data register 1                          (W)
    86  0022                    DBC00DR2:     equ 22h          ; data register 2                          (RW)
    87  0023                    DBC00CR0:     equ 23h          ; control & status register 0              (#)
    88                          
    89                          ; Digital PSoC block 01, Basic Type C
    90  0024                    DBC01DR0:     equ 24h          ; data register 0                          (#)
    91  0025                    DBC01DR1:     equ 25h          ; data register 1                          (W)
    92  0026                    DBC01DR2:     equ 26h          ; data register 2                          (RW)
    93  0027                    DBC01CR0:     equ 27h          ; control & status register 0              (#)
    94                          
    95                          ; Digital PSoC block 02, Communications Type C
    96  0028                    DCC02DR0:     equ 28h          ; data register 0                          (#)
    97  0029                    DCC02DR1:     equ 29h          ; data register 1                          (W)
    98  002A                    DCC02DR2:     equ 2Ah          ; data register 2                          (RW)
    99  002B                    DCC02CR0:     equ 2Bh          ; control & status register 0              (#)
   100                          
   101                          ; Digital PSoC block 03, Communications Type C
   102  002C                    DCC03DR0:     equ 2Ch          ; data register 0                          (#)
   103  002D                    DCC03DR1:     equ 2Dh          ; data register 1                          (W)
   104  002E                    DCC03DR2:     equ 2Eh          ; data register 2                          (RW)
   105  002F                    DCC03CR0:     equ 2Fh          ; control & status register 0              (#)
   106                          
   107                          ; Digital PSoC block 10, Basic Type C
   108  0030                    DBC10DR0:     equ 30h          ; data register 0                          (#)
   109  0031                    DBC10DR1:     equ 31h          ; data register 1                          (W)
   110  0032                    DBC10DR2:     equ 32h          ; data register 2                          (RW)
   111  0033                    DBC10CR0:     equ 33h          ; control & status register 0              (#)
   112                          
   113                          ; Digital PSoC block 11, Basic Type C
   114  0034                    DBC11DR0:     equ 34h          ; data register 0                          (#)
   115  0035                    DBC11DR1:     equ 35h          ; data register 1                          (W)
   116  0036                    DBC11DR2:     equ 36h          ; data register 2                          (RW)
   117  0037                    DBC11CR0:     equ 37h          ; control & status register 0              (#)
   118                          
   119                          ; Digital PSoC block 12, Communications Type C
   120  0038                    DCC12DR0:     equ 38h          ; data register 0                          (#)
   121  0039                    DCC12DR1:     equ 39h          ; data register 1                          (W)
   122  003A                    DCC12DR2:     equ 3Ah          ; data register 2                          (RW)
   123  003B                    DCC12CR0:     equ 3Bh          ; control & status register 0              (#)
   124                          
   125                          ; Digital PSoC block 13, Communications Type C
   126  003C                    DCC13DR0:     equ 3Ch          ; data register 0                          (#)
   127  003D                    DCC13DR1:     equ 3Dh          ; data register 1                          (W)
   128  003E                    DCC13DR2:     equ 3Eh          ; data register 2                          (RW)
   129  003F                    DCC13CR0:     equ 3Fh          ; control & status register 0              (#)
   130                          
   131                          ;-------------------------------------
   132                          ;  Analog Control Registers
   133                          ;-------------------------------------
   134  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
   135  00C0                    AMX_IN_ACI3:          equ C0h    ; MASK: column 3 input mux
   136  0030                    AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
   137  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
   138  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
   139                          
   140  0061                    AMUX_CFG:      equ 61h          ; Analog MUX Configuration
   141  0030                    AMUX_CFG_INTCAP:       equ 30h    ;
   142  000E                    AMUX_CFG_MUXCLK:  	  equ 0Eh	 ;
   143  0001                    AMUX_CFG_EN:		  	  equ 01h	 ;
   144                          
   145                          ; old declarations DO NOT USE
   146  0061                    AMUXCFG:      equ 61h          ; Analog MUX Configuration
   147  0030                    AMUXCFG_INTCAP:       equ 30h    ;
   148  000E                    AMUXCFG_MUXCLK:  	  equ 0Eh	 ;
   149  0001                    AMUXCFG_EN:		  	  equ 01h	 ;
   150                          
   151  0062                    PWM_CR:       equ 62h          ; Pulse-Width Modulator Control
   152  0038                    PWM_CR_HIGH:          equ 38h    ; MASK: PWM high time
   153  0006                    PWM_CR_LOW:           equ 06h	 ; MASK: PWM low time
   154  0001                    PWM_CR_EN:            equ 01h	 ; MASK: Enable/Disable PWM function
   155                          
   156  0063                    ARF_CR:       equ 63h          ; Analog Reference Control
   157                          
   158  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus Register           (#)
   159  0080                    CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
   160  0040                    CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
   161  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
   162  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
   163  0008                    CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
   164  0004                    CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
   165  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
   166  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   167                          
   168  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   169  0020                    CMP_CR1_CLDIS1:       equ 20h    ; MASK: Column 1 comparator output latch
   170  0010                    CMP_CR1_CLDIS0:	      equ 10h    ; MASK: Column 0 comparator output latch
   171                          
   172  0068                    ADC0_CR:      equ 68h          ; Analog Column 0 Configuration
   173  0080                    ADC0_CR_CMPST:        equ 80h    ;
   174  0040                    ADC0_CR_LOREN:        equ 40h    ;
   175  0020                    ADC0_CR_SHEN:         equ 20h    ;
   176  0008                    ADC0_CR_CBSRC:        equ 08h    ;
   177  0004                    ADC0_CR_ADCM:         equ 04h    ;
   178  0001                    ADC0_CR_EN:	          equ 01h    ;
   179                          
   180  0069                    ADC1_CR:      equ 69h          ; Analog Column 1 Configuration
   181  0080                    ADC1_CR_CMPST:        equ 80h    ;
   182  0040                    ADC1_CR_LOREN:        equ 40h    ;
   183  0020                    ADC1_CR_SHEN:         equ 20h    ;
   184  0008                    ADC1_CR_CBSRC:        equ 08h    ;
   185  0004                    ADC1_CR_ADCM:         equ 04h    ;
   186  0001                    ADC1_CR_EN:	          equ 01h    ;
   187                          
   188                          ; Continuous Time PSoC block Type E Row 0 Col 0
   189  0072                    ACE00CR1:     equ 72h          ; Control register 1                       (RW)
   190  0073                    ACE00CR2:     equ 73h          ; Control register 2                       (RW)
   191                          
   192                          ; Continuous Time PSoC block Type E Row 0 Col 1
   193  0076                    ACE01CR1:     equ 76h          ; Control register 1                       (RW)
   194  0077                    ACE01CR2:     equ 77h          ; Control register 2                       (RW)
   195                          
   196                          ; Switched Cap PSoC blockType E Row 1 Col 0
   197  0080                    ASE10CR0:     equ 80h          ; Control register 0                       (RW)
   198                          
   199                          ; Switched Cap PSoC blockType E Row 1 Col 1
   200  0084                    ASE11CR0:     equ 84h          ; Control register 0                       (RW)
   201                          
   202                          ;-----------------------------------------------
   203                          ;  Global General Purpose Data Registers
   204                          ;-----------------------------------------------
   205  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   206  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   207  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   208  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   209                          
   210                          ;------------------------------------------------
   211                          ;  Row Digital Interconnects
   212                          ;
   213                          ;  Note: the following registers are mapped into
   214                          ;  both register bank 0 AND register bank 1.
   215                          ;------------------------------------------------
   216                          
   217  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   218  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   219  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   220  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   221  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   222  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   223  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   224                          
   225  00B8                    RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
   226  00B9                    RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
   227  00BA                    RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
   228  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   229  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   230  00BD                    RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
   231  00BE                    RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
   232                          
   233                          ;-----------------------------------------------
   234                          ;  Ram Page Pointers
   235                          ;-----------------------------------------------
   236  00D0                    CUR_PP:      equ 0D0h           ; Current   Page Pointer
   237  00D1                    STK_PP:      equ 0D1h           ; Stack     Page Pointer
   238  00D3                    IDX_PP:      equ 0D3h           ; Index     Page Pointer
   239  00D4                    MVR_PP:      equ 0D4h           ; MVI Read  Page Pointer
   240  00D5                    MVW_PP:      equ 0D5h           ; MVI Write Page Pointer
   241                          
   242                          ;------------------------------------------------
   243                          ;  I2C Configuration Registers
   244                          ;------------------------------------------------
   245  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   246  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   247  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   248  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   249  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   250  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   251  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   252  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   253  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   254  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   255                          
   256  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   257  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   258  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   259  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   260  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   261  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   262  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   263  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   264  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   265                          
   266  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   267                          
   268  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   269  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   270  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   271  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   272  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   273                          
   274                          ;------------------------------------------------
   275                          ;  System and Global Resource Registers
   276                          ;------------------------------------------------
   277  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   278                                                         ; Use INT_MSK0 bit field masks
   279  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   280                                                         ; Use INT_MSK1 bit field masks
   281  00DC                    INT_CLR2:     equ 0DCh          ; Interrupt Clear Register 2               (RW)
   282                                                         ; Use INT_MSK2 bit field masks
   283  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   284                                                         ; Use INT_MSK3 bit field masks
   285                          
   286  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   287  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   288  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   289                          
   290  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   291  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   292  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   293  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   294  0010                    INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
   295  0008                    INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
   296  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   297  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   298  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   299                          
   300  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   301  0080                    INT_MSK1_DCC13:            equ 80h ; MASK: enable/disable DCC13 block interrupt
   302  0040                    INT_MSK1_DCC12:            equ 40h ; MASK: enable/disable DCC12 block interrupt
   303  0020                    INT_MSK1_DBC11:            equ 20h ; MASK: enable/disable DBC11 block interrupt
   304  0010                    INT_MSK1_DBC10:            equ 10h ; MASK: enable/disable DBC10 block interrupt
   305  0008                    INT_MSK1_DCC03:            equ 08h ; MASK: enable/disable DCC03 block interrupt
   306  0004                    INT_MSK1_DCC02:            equ 04h ; MASK: enable/disable DCC02 block interrupt
   307  0002                    INT_MSK1_DBC01:            equ 02h ; MASK: enable/disable DBC01 block interrupt
   308  0001                    INT_MSK1_DBC00:            equ 01h ; MASK: enable/disable DBC00 block interrupt
   309                          
   310  00DF                    INT_MSK2:     equ DFh			; Custom block Mask Register			   (RW)
   311  0010                    INT_MSK2_SARADC:           equ 10h ; MASK: enable/disable SARADC block interrupt
   312  0020                    INT_MSK2_CSD0:             equ 20h ; MASK: enable/disable CSD0 block interrupt
   313  0040                    INT_MSK2_CSD1:             equ 40h ; MASK: enable/disable CSD1 block interrupt
   314  0080                    INT_MSK2_RTC:              equ 80h ; MASK: enable/disable RTC block interrupt
   315                          
   316  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   317  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   318                          
   319                          ;------------------------------------------------------
   320                          ;  MAC Registers
   321                          ;------------------------------------------------------
   322                          
   323  00E8                    MUL0_X:       equ 0E8h          ; Multiply Input X Register                (W)
   324  00E9                    MUL0_Y:       equ 0E9h          ; Multiply Input Y Register                (W)
   325  00EA                    MUL0_DH:      equ 0EAh          ; Multiply Result High Byte Register       (R)
   326  00EB                    MUL0_DL:      equ 0EBh          ; Multiply Result Low Byte Register        (R)
   327                          
   328  00EC                    ACC0_DR1:     equ 0ECh          ; Accumulator Data Register 1              (RW)
   329  00ED                    ACC0_DR0:     equ 0EDh          ; Accumulator Data Register 0              (RW)
   330  00EE                    ACC0_DR3:     equ 0EEh          ; Accumulator Data Register 3              (RW)
   331  00EF                    ACC0_DR2:     equ 0EFh          ; Accumulator Data Register 2              (RW)
   332                          
   333                          ; DECIMATOR Control Registers
   334  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   335  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   336                          
   337                          ;------------------------------------------------------
   338                          ;  System Status and Control Registers
   339                          ;
   340                          ;  Note: The following registers are mapped into both
   341                          ;        register bank 0 AND register bank 1.
   342                          ;------------------------------------------------------
   343  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   344                                                             ; Use FLAG_ masks defined at top of file
   345                          
   346  00FD                    DAC_D:        equ 0FDh		   ; DAC Data Register                        (RW)
   347                          
   348  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   349  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: flag, Internal Reset Status bit
   350  0010                    CPU_SCR1_SLIMO:         equ 10h	   ; MASK: Slow IMO (internal main osc) enable
   351  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   352  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   353  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   354                          
   355  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   356  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   357  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   358  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   359  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   360  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   361                          
   362                          ;------------------------------------------------------
   363                          ;  Neon Capsense Digital Control Registers
   364                          ;------------------------------------------------------
   365  0050                    CSD0_DR0_L:				equ 50h		; Capsense 0 data low 0				(RW)
   366  0054                    CSD0_DR0_H:				equ 54h		; Capsense 0 data high 0			(RW)
   367  0058                    CSD1_DR0_L:				equ 58h		; Capsense 1 data low 0				(RW)
   368  005C                    CSD1_DR0_H:				equ 5Ch		; Capsense 1 data high 0			(RW)
   369  0051                    CSD0_DR1_L:				equ 51h		; Capsense 0 data low 1				(RW)
   370  0055                    CSD0_DR1_H:				equ 55h		; Capsense 0 data high 1			(RW)
   371  0059                    CSD1_DR1_L:				equ 59h		; Capsense 1 data low 1				(RW)
   372  005D                    CSD1_DR1_H:				equ 5Dh		; Capsense 1 data high 1			(RW)
   373  0052                    CSD0_CNT_L:				equ 52h		; Capsense 0 counter low			(RW)
   374  0056                    CSD0_CNT_H:				equ 56h		; Capsense 0 counter high			(RW)
   375  005A                    CSD1_CNT_L:				equ 5Ah		; Capsense 1 counter low			(RW)
   376  005E                    CSD1_CNT_H:				equ	5Eh		; Capsense 1 counter high			(RW)
   377  0053                    CSD0_CR0:				equ 53h		; Capsense 0 control 0				(RW)
   378  005B                    CSD1_CR0:				equ 5Bh		; Capsense 1 control 0				(RW)
   379  0057                    CSD0_CR1:				equ 57h		; Capsense 0 control 1				(RW)
   380  005F                    CSD1_CR1:				equ 5Fh		; Capsense 1 control 1				(RW)
   381                          
   382                          ;------------------------------------------------------
   383                          ;  Neon Analog Registers
   384                          ;------------------------------------------------------
   385  0065                    ASY_CR:					equ 65h		; Analog Synchronization Control	(RW)
   386  006A                    ADC_DH:					equ 6Ah		; ADC data high						(RW)
   387  006B                    ADC_DL:					equ 6Bh		; ADC data low						(RW)
   388  00C8                    PWMVREF0:				equ C8h		; PWM Voltage Reference 0			(RW)
   389  00C9                    PWMVREF1:				equ C9h		; PWM Voltage Reference 1			(RW)
   390  00CB                    PWMSRC:					equ CBh		; PWM Source						(RW)
   391  00CA                    IDACMODE:				equ CAh		; IDAC Mode							(RW)
   392  00FC                    IDACR_D:				equ FCh		; Analog Mux DAC data 0				(RW)
   393  00FD                    IDACL_D:				equ FDh		; Analog Mux DAC data 1				(RW)
   394                          
   395                          ;------------------------------------------------------
   396                          ;  Neon Digital Registers
   397                          ;------------------------------------------------------
   398  00B7                    RDI0DSM:				equ B7h		; Row Digital Interconnect input select 0	(RW)
   399  00BF                    RDI1DSM:				equ BFh		; Row Digital Interconnect input select 1	(RW)
   400                          
   401                          ;------------------------------------------------------
   402                          ;  Neon Test Registers
   403                          ;------------------------------------------------------
   404  00CC                    TSCR0:					equ CCh		; Tsource 0							(RW)
   405  00CD                    TSCMPH:					equ CDh		; TSCMP high						(RW)
   406  00CE                    TSCMPL:					equ CEh		; TSCMP low							(RW)
   407  00CF                    TSCR1:					equ CFh		; Tsource 1							(RW)
   408                          
   409                          ;;=============================================================================
   410                          ;;      Register Space, Bank 1
   411                          ;;=============================================================================
   412                          
   413                          ;------------------------------------------------
   414                          ;  Port Registers
   415                          ;  Note: Also see this address range in Bank 0.
   416                          ;------------------------------------------------
   417                          ; Port 0
   418  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   419  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   420  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   421  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   422                          
   423                          ; Port 1
   424  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   425  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   426  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   427  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   428                          
   429                          ; Port 2
   430  0008                    PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
   431  0009                    PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
   432  000A                    PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
   433  000B                    PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
   434                          
   435                          ; Port 3
   436  000C                    PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
   437  000D                    PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
   438  000E                    PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
   439  000F                    PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
   440                          
   441                          ; Port 4
   442  0010                    PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
   443  0011                    PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
   444  0012                    PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
   445  0013                    PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
   446                          
   447                          ;------------------------------------------------
   448                          ;  Digital PSoC(tm) block Registers
   449                          ;  Note: Also see this address range in Bank 0.
   450                          ;------------------------------------------------
   451                          
   452                          ; Digital PSoC block 00, Basic Type C
   453  0020                    DBC00FN:      equ 20h          ; Function Register                        (RW)
   454  0021                    DBC00IN:      equ 21h          ;    Input Register                        (RW)
   455  0022                    DBC00OU:      equ 22h          ;   Output Register                        (RW)
   456  0023                    DBC00CR1:     equ 23h          ;   control & status register 1            (RW)
   457                          
   458                          ; Digital PSoC block 01, Basic Type C
   459  0024                    DBC01FN:      equ 24h          ; Function Register                        (RW)
   460  0025                    DBC01IN:      equ 25h          ;    Input Register                        (RW)
   461  0026                    DBC01OU:      equ 26h          ;   Output Register                        (RW)
   462  0027                    DBC01CR1:     equ 27h          ;   control & status register 1            (RW)
   463                          
   464                          ; Digital PSoC block 02, Communications Type C
   465  0028                    DCC02FN:      equ 28h          ; Function Register                        (RW)
   466  0029                    DCC02IN:      equ 29h          ;    Input Register                        (RW)
   467  002A                    DCC02OU:      equ 2Ah          ;   Output Register                        (RW)
   468  002B                    DBC02CR1:     equ 2Bh          ;   control & status register 1            (RW)
   469                          
   470                          ; Digital PSoC block 03, Communications Type C
   471  002C                    DCC03FN:      equ 2Ch          ; Function Register                        (RW)
   472  002D                    DCC03IN:      equ 2Dh          ;    Input Register                        (RW)
   473  002E                    DCC03OU:      equ 2Eh          ;   Output Register                        (RW)
   474  0029                    DBC03CR1:     equ 29h          ;   control & status register 1            (RW)
   475                          
   476                          ; Digital PSoC block 10, Basic Type C
   477  0030                    DBC10FN:      equ 30h          ; Function Register                        (RW)
   478  0031                    DBC10IN:      equ 31h          ;    Input Register                        (RW)
   479  0032                    DBC10OU:      equ 32h          ;   Output Register                        (RW)
   480  0033                    DBC10CR1:     equ 33h          ;   control & status register 1            (RW)
   481                          
   482                          ; Digital PSoC block 11, Basic Type C
   483  0034                    DBC11FN:      equ 34h          ; Function Register                        (RW)
   484  0035                    DBC11IN:      equ 35h          ;    Input Register                        (RW)
   485  0036                    DBC11OU:      equ 36h          ;   Output Register                        (RW)
   486  0037                    DBC11CR1:     equ 37h          ;   control & status register 1            (RW)
   487                          
   488                          ; Digital PSoC block 12, Communications Type C
   489  0038                    DCC12FN:      equ 38h          ; Function Register                        (RW)
   490  0039                    DCC12IN:      equ 39h          ;    Input Register                        (RW)
   491  003A                    DCC12OU:      equ 3Ah          ;   Output Register                        (RW)
   492  003B                    DBC12CR1:     equ 3Bh          ;   control & status register 1            (RW)
   493                          
   494                          ; Digital PSoC block 13, Communications Type C
   495  003C                    DCC13FN:      equ 3Ch          ; Function Register                        (RW)
   496  003D                    DCC13IN:      equ 3Dh          ;    Input Register                        (RW)
   497  003E                    DCC13OU:      equ 3Eh          ;   Output Register                        (RW)
   498  003F                    DBC13CR1:     equ 3Fh          ;   control & status register 1            (RW)
   499                          
   500                          ;------------------------------------------------
   501                          ;  System and Global Resource Registers
   502                          ;  Note: Also see this address range in Bank 0.
   503                          ;------------------------------------------------
   504                          
   505  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   506  00C0                    CLK_CR0_ACOLUMN_3:    equ C0h    ; MASK: Specify clock for analog cloumn
   507  0030                    CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
   508  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   509  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   510                          
   511  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   512  0018                    CLK_CR1_ACLK1:        equ 18h    ; MASK: Digital PSoC block for analog source
   513  0003                    CLK_CR1_ACLK0:        equ 03h    ; MASK: Digital PSoC block for analog source
   514                          
   515  0003                    CLK_CR1_ACLK2:        equ 03h    ; Deprecated do not use
   516                          
   517  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   518  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   519                          
   520  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   521  000F                    AMD_CR0_AMOD0:        equ 0Fh    ; MASK: Modulation source for analog column 0
   522                          
   523  0064                    CMP_GO_EN:    equ 64h          ; Comparator Bus To Global Out Enable      (RW)
   524  0080                    CMP_GO_EN_GOO5:       equ 80h    ; MASK: Selected Col 1 signal to GOO5
   525  0040                    CMP_GO_EN_GOO1:       equ 40h    ; MASK: Selected Col 1 signal to GOO1
   526  0030                    CMP_GO_EN_SEL1:       equ 30h    ; MASK: Column 1 Signal Select
   527  0008                    CMP_GO_EN_GOO4:       equ 08h    ; MASK: Selected Col 0 signal to GOO4
   528  0004                    CMP_GO_EN_GOO0:       equ 04h    ; MASK: Selected Col 0 signal to GOO0
   529  0003                    CMP_GO_EN_SEL0:       equ 03h    ; MASK: Column 0 Signal Select
   530                          
   531  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   532  000F                    AMD_CR1_AMOD1:        equ 0Fh    ; MASK: Modulation ctrl for analog column 1
   533                          
   534  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   535  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   536  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   537                          
   538  006B                    CLK_CR3:      equ 6Bh          ; Analog Clock Source Control Register 3   (RW)
   539  0040                    CLK_CR3_SYS1:         equ 40h    ; MASK: Analog Clock 1 selection
   540  0030                    CLK_CR3_DIVCLK1:      equ 30h    ; MASK: Analog Clock 1 divider
   541  0004                    CLK_CR3_SYS0:         equ 04h    ; MASK: Analog Clock 0 selection
   542  0003                    CLK_CR3_DIVCLK0:      equ 03h    ; MASK: Analog Clock 0 divider
   543                          
   544                          ;------------------------------------------------
   545                          ;  Global Digital Interconnects
   546                          ;------------------------------------------------
   547                          
   548  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   549  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   550  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   551  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   552                          
   553  00A0                    GDI_O_IN_CR:  equ 0A0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   554  00A1                    GDI_E_IN_CR:  equ 0A1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   555  00A2                    GDI_O_OU_CR:  equ 0A2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   556  00A3                    GDI_E_OU_CR:  equ 0A3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   557                          
   558  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   559  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   560                          
   561                          ;------------------------------------------------
   562                          ;  Analog Mux Bus Port Enable Bits
   563                          ;------------------------------------------------
   564  00D8                    MUX_CR0:      equ 0D8h          ; Analog Mux Port 0 Bit Enables Register
   565  00D9                    MUX_CR1:      equ 0D9h          ; Analog Mux Port 1 Bit Enables Register
   566  00DA                    MUX_CR2:      equ 0DAh          ; Analog Mux Port 2 Bit Enables Register
   567  00DB                    MUX_CR3:      equ 0DBh          ; Analog Mux Port 3 Bit Enables Register
   568  00EC                    MUX_CR4:      equ 0ECh          ; Analog Mux Port 4 Bit Enables Register
   569                          
   570                          ;------------------------------------------------
   571                          ;  Clock and System Control Registers
   572                          ;------------------------------------------------
   573                          
   574  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   575  0080                    OSC_GO_EN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   576  0040                    OSC_GO_EN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   577  0020                    OSC_GO_EN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   578  0010                    OSC_GO_EN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   579  0008                    OSC_GO_EN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   580  0004                    OSC_GO_EN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   581  0002                    OSC_GO_EN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   582  0001                    OSC_GO_EN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   583                          
   584  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   585  0003                    OSC_CR4_VC3SEL:       equ 03h    ; MASK: System VC3 Clock source
   586                          
   587  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   588                          
   589  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   590  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   591  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   592  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   593  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   594  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   595  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   596  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   597  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   598  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   599  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   600  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   601  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   602  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   603  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   604  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   605  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   606  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   607                          
   608  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   609  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   610  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   611                          
   612  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   613  0080                    OSC_CR2_PLLGAIN:      equ 80h    ; MASK: High/Low gain
   614  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   615  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   616  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   617                          
   618  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   619  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   620  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   621  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   622  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   623  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   624  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   625  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   626                          
   627  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   628  0008                    VLT_CMP_NOWRITE:      equ 08h    ; MASK: Vcc below Flash Write level
   629  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   630  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   631  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   632                          
   633  00E5                    ADC0_TR:      equ 0E5h          ; ADC Column 0 Trim Register
   634  00E6                    ADC1_TR:      equ 0E6h          ; ADC Column 1 Trim Register
   635                          
   636  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   637  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   638  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   639  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   640                          
   641  00FA                    FLS_PR1:      equ 0FAh          ; Flash Program Register 1                 (RW)
   642  0003                    FLS_PR1_BANK:         equ 03h    ; MASK: Select Active Flash Bank
   643                          
   644  00FD                    DAC_CR0:       equ 0FDh          ; Analog Mux DAC Control Register 0
   645  00DC                    DAC_CR1:       equ 0DCh          ; Analog Mux DAC Control Register 1
   646  0008                    DAC_CR_IRANGE:        equ 08h    ; MASK: Sets the DAC Range low or high
   647  0006                    DAC_CR_OSCMODE:       equ 06h    ; MASK: Defines the reset mode for AMux
   648  0001                    DAC_CR_ENABLE:        equ 01h    ; MASK: Enable/Disable DAC function
   649                          
   650                          ;------------------------------------------------
   651                          ;  I2C Control Registers
   652                          ;------------------------------------------------
   653                          
   654  00AD                    I2C_ADDR:    equ 0ADh          ; I2C Address Register (RW)
   655                          
   656                          ;------------------------------------------------------
   657                          ;  Neon Analog Registers
   658                          ;------------------------------------------------------
   659  0053                    VDAC50CR0:		equ 53h			; V DAC5 control 0				(RW)
   660  0057                    VDAC51CR0:		equ 57h			; V DAC5 control 1				(RW)
   661  00A8                    ADC_CR0:		equ A8h			; ADC control 0					(RW)
   662  00A9                    ADC_CR1:		equ A9h			; ADC control 1					(RW)
   663  00AA                    ADC_CR2:		equ AAh			; ADC control 2					(RW)
   664  00AB                    ADC_CR3TRIM:	equ ABh			; ADC control 3					(RW)
   665  00AC                    ADC_CR4:		equ ACh			; ADC control 4					(RW)
   666  00E7                    VDAC_TRIM:		equ E7h			; V DAC trim					(RW)
   667                          
   668                          ;------------------------------------------------------
   669                          ;  Neon Current Sense CMP Registers
   670                          ;------------------------------------------------------
   671  0050                    CMP0CR1:		equ 50h			; CMP0 control 1				(RW)
   672  0051                    CMP0CR2:		equ 51h			; CMP0 control 2				(RW)
   673  0054                    CMP1CR1:		equ 54h			; CMP1 control 1				(RW)
   674  0055                    CMP1CR2:		equ 55h			; CMP1 control 2				(RW)
   675  0058                    CSCMPCR0:		equ 58h			; CSCMP control 0				(RW)
   676  0059                    CSCMPGOEN:		equ 59h			; CSCMO global out enable		(RW)
   677  005A                    CSLUTCR0:		equ 5Ah			; CSLUT control 0				(RW)
   678  005B                    CMPCOLMUX:		equ 5Bh			; CMP Column Mux				(RW)
   679  005C                    CMPPWMCR:		equ 5Ch			; CMP PWM control				(RW)
   680  005D                    CMPFLTCR:		equ 5Dh			; CMP filter control			(RW)
   681  005E                    CMPCLK1:		equ 5Eh			; CMP clock 1					(RW)
   682  005F                    CMPCLK0:		equ 5Fh			; CMP clock 0					(RW)
   683                          
   684                          ;------------------------------------------------------
   685                          ;  Neon Real Time Clock Registers
   686                          ;------------------------------------------------------
   687  00A4                    RTCH:			equ A4h			; Real time current hour		(RW)
   688  00A5                    RTCM:			equ A5h			; Real time current minute		(RW)
   689  00A6                    RTCS:			equ A6h			; Real time current second		(RW)
   690  00A7                    RTCCR:			equ A7h			; Real time clock control		(RW)
   691                          
   692                          ;------------------------------------------------------
   693                          ;  Analog MUX Config Registers
   694                          ;------------------------------------------------------
   695                          
   696  006A                    AMUX_CFG1:			equ 6Ah  ; Analog MUX Configuration 1
   697  0020                    AMUX_CFG1_GOINVR:	equ 20h  ;
   698  0010                    AMUX_CFG1_GOINVL:  	equ 10h	 ;
   699  000C                    AMUX_CFG1_AMUXMODR:	equ 0Ch	 ;
   700  0003                    AMUX_CFG1_AMUXMODL:	equ 03h	 ;
   701                          
   702                          ;;=============================================================================
   703                          ;;      M8C System Macros
   704                          ;;  These macros should be used when their functions are needed.
   705                          ;;=============================================================================
   706                          
   707                          ;----------------------------------------------------
   708                          ;  Swapping Register Banks
   709                          ;----------------------------------------------------
   710                              macro M8C_SetBank0
   711                              and   F, ~FLAG_XIO_MASK
   712  3C41                        endm
   713                          
   714                              macro M8C_SetBank1
   715                              or    F, FLAG_XIO_MASK
   716  3C41                        endm
   717                          
   718                          ;----------------------------------------------------
   719                          ;  Global Interrupt Enable/Disable
   720                          ;----------------------------------------------------
   721                              macro M8C_EnableGInt
   722                              or    F, FLAG_GLOBAL_IE
   723  3C41                        endm
   724                          
   725                              macro M8C_DisableGInt
   726                              and   F, ~FLAG_GLOBAL_IE
   727  3C41                        endm
   728                          
   729                          ;----------------------------------------------------
   730                          ;  Enable/Disable Interrupt Mask
   731                          ;
   732                          ;  Use the following macros to enable/disable
   733                          ;  bits in the Interrupt mask registers,
   734                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   735                          ;
   736                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   737                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   738                          ;
   739                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   740                          ;        and MASK is the bit set to enable or disable
   741                          ;----------------------------------------------------
   742                          ; Disable Interrupt Bit Mask(s)
   743                              macro M8C_DisableIntMask
   744                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   745  3C41                        endm
   746                          
   747                          ; Enable Interrupt Bit Mask(s)
   748                              macro M8C_EnableIntMask
   749                              or    reg[@0], @1               ; enable specified interrupt enable bit
   750  3C41                        endm
   751                          
   752                          ;----------------------------------------------------
   753                          ;  Clear Posted Interrupt Flag Mask
   754                          ;
   755                          ;  Use the following macros to clear the
   756                          ;  bits in the Interrupt Clear registers,
   757                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   758                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   759                          ;
   760                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   761                          ;        and MASK is the bit set to enable or disable
   762                          ;----------------------------------------------------
   763                              macro M8C_ClearIntFlag
   764                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   765  3C41                        endm
   766                          
   767                          ;----------------------------------------------------
   768                          ;  Power-On Reset & WatchDog Timer Functions
   769                          ;----------------------------------------------------
   770                              macro M8C_EnableWatchDog
   771                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   772  3C41                        endm
   773                          
   774                              macro M8C_ClearWDT
   775                              mov   reg[RES_WDT], 00h
   776  3C41                        endm
   777                          
   778                              macro M8C_ClearWDTAndSleep
   779                              mov   reg[RES_WDT], 38h
   780  3C41                        endm
   781                          
   782                          ;----------------------------------------------------
   783                          ;  Sleep, CPU Stop & Software Reset
   784                          ;----------------------------------------------------
   785                              macro M8C_Sleep
   786                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   787                              ; The next instruction to be executed depends on the state of the
   788                              ; various interrupt enable bits. If some interrupts are enabled
   789                              ; and the global interrupts are disabled, the next instruction will
   790                              ; be the one that follows the invocation of this macro. If global
   791                              ; interrupts are also enabled then the next instruction will be
   792                              ; from the interrupt vector table. If no interrupts are enabled
   793                              ; then the CPU sleeps forever.
   794  3C41                        endm
   795                          
   796                              macro M8C_Stop
   797                              ; In general, you probably don't want to do this, but here's how:
   798                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   799                              ; Next instruction to be executed is located in the interrupt
   800                              ; vector table entry for Power-On Reset.
   801  3C41                        endm
   802                          
   803                              macro M8C_Reset
   804                              ; Restore CPU to the power-on reset state.
   805                              mov A, 0
   806                              SSC
   807                              ; Next non-supervisor instruction will be at interrupt vector 0.
   808  3C41                        endm
   809                          
   810                          ;----------------------------------------------------
   811                          ; ImageCraft Code Compressor Actions
   812                          ;----------------------------------------------------
   813                              ; Suspend Code Compressor
   814                              ; Must not span a RET or RETI instruction
   815                              ; without resuming code compression
   816                              macro Suspend_CodeCompressor
   817                              or   F, 0
   818  3C41                        endm
   819                          
   820                              ; Resume Code Compression
   821                              macro Resume_CodeCompressor
   822                              add  SP, 0
   823  3C41                        endm
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  FILENAME: Timer16.inc
     4                          ;;   Version: 2.6, Updated on 2013/5/19 at 10:44:39
     5                          ;;  Generated by PSoC Designer 5.4.2946
     6                          ;;
     7                          ;;  DESCRIPTION: Assembler declarations for the Timer16 user module interface
     8                          ;;-----------------------------------------------------------------------------
     9                          ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
    10                          ;;*****************************************************************************
    11                          ;;*****************************************************************************
    12                          
    13                          include "m8c.inc"
    14                          
    15                          
    16                          ;--------------------------------------------------
    17                          ; Constants for Timer16 API's.
    18                          ;--------------------------------------------------
    19                          
    20  0001                    Timer16_CONTROL_REG_START_BIT:             equ 0x01    ; Control register start bit
    21  00E1                    Timer16_INT_REG:                           equ 0x0e1
    22  0002                    Timer16_INT_MASK:                          equ 0x02
    23                          
    24                          
    25                          ;--------------------------------------------------
    26                          ; Constants for Timer16 user defined values
    27                          ;--------------------------------------------------
    28                          
    29  2580                    Timer16_PERIOD:                            equ 0x2580
    30  2328                    Timer16_COMPARE_VALUE:                     equ 0x2328
    31                          
    32                          
    33                          ;--------------------------------------------------
    34                          ; Register Address Constants for Timer16
    35                          ;--------------------------------------------------
    36                          
    37  0020                    Timer16_COUNTER_LSB_REG:               equ 0x20   ; DR0 Counter register
    38  0024                    Timer16_COUNTER_MSB_REG:               equ 0x24
    39  0021                    Timer16_PERIOD_LSB_REG:                equ 0x21   ; DR1 Period register
    40  0025                    Timer16_PERIOD_MSB_REG:                equ 0x25
    41  0022                    Timer16_COMPARE_LSB_REG:               equ 0x22   ; DR2 CompareValue register
    42  0026                    Timer16_COMPARE_MSB_REG:               equ 0x26
    43  0023                    Timer16_CONTROL_LSB_REG:               equ 0x23   ; Control register
    44  0027                    Timer16_CONTROL_MSB_REG:               equ 0x27
    45  0020                    Timer16_FUNC_LSB_REG:                  equ 0x20   ; Function register
    46  0024                    Timer16_FUNC_MSB_REG:                  equ 0x24
    47  0021                    Timer16_INPUT_LSB_REG:                 equ 0x21   ; Input register
    48  0025                    Timer16_INPUT_MSB_REG:                 equ 0x25
    49  0022                    Timer16_OUTPUT_LSB_REG:                equ 0x22   ; Output register
    50  0026                    Timer16_OUTPUT_MSB_REG:                equ 0x26
    51                          
    52                          
    53                          ;--------------------------------------------------
    54                          ; Timer16 Macro 'Functions'
    55                          ;--------------------------------------------------
    56                          
    57                             macro Timer16_Start_M
    58                             or    reg[Timer16_CONTROL_LSB_REG],  Timer16_CONTROL_REG_START_BIT
    59  3C41                       endm
    60                          
    61                             macro Timer16_Stop_M
    62                             and   reg[Timer16_CONTROL_LSB_REG], ~Timer16_CONTROL_REG_START_BIT
    63  3C41                       endm
    64                          
    65                             macro Timer16_EnableInt_M
    66                             M8C_EnableIntMask Timer16_INT_REG, Timer16_INT_MASK
    67  3C41                       endm
    68                          
    69                             macro Timer16_DisableInt_M
    70                             M8C_DisableIntMask Timer16_INT_REG, Timer16_INT_MASK
    71  3C41                       endm
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  FILENAME: Timer16.asm
     4                          ;;   Version: 2.6, Updated on 2013/5/19 at 10:44:39
     5                          ;;  Generated by PSoC Designer 5.4.2946
     6                          ;;
     7                          ;;  DESCRIPTION: Timer16 User Module software implementation file
     8                          ;;
     9                          ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
    10                          ;;        arguments and observe the associated "Registers are volatile" policy.
    11                          ;;        This means it is the caller's responsibility to preserve any values
    12                          ;;        in the X and A registers that are still needed after the API functions
    13                          ;;        returns. For Large Memory Model devices it is also the caller's 
    14                          ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
    15                          ;;        MVW_PP registers. Even though some of these registers may not be modified
    16                          ;;        now, there is no guarantee that will remain the case in future releases.
    17                          ;;-----------------------------------------------------------------------------
    18                          ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
    19                          ;;*****************************************************************************
    20                          ;;*****************************************************************************
    21                          
    22                          include "m8c.inc"
    23                          include "memory.inc"
    24                          include "Timer16.inc"
    25                          
    26                          ;-----------------------------------------------
    27                          ;  Global Symbols
    28                          ;-----------------------------------------------
    29                          export  Timer16_EnableInt
    30                          export _Timer16_EnableInt
    31                          export  Timer16_DisableInt
    32                          export _Timer16_DisableInt
    33                          export  Timer16_Start
    34                          export _Timer16_Start
    35                          export  Timer16_Stop
    36                          export _Timer16_Stop
    37                          export  Timer16_WritePeriod
    38                          export _Timer16_WritePeriod
    39                          export  Timer16_WriteCompareValue
    40                          export _Timer16_WriteCompareValue
    41                          export  Timer16_wReadCompareValue
    42                          export _Timer16_wReadCompareValue
    43                          export  Timer16_wReadTimer
    44                          export _Timer16_wReadTimer
    45                          export  Timer16_wReadTimerSaveCV
    46                          export _Timer16_wReadTimerSaveCV
    47                          
    48                          ; The following functions are deprecated and subject to omission in future releases
    49                          ;
    50                          export  wTimer16_ReadCompareValue  ; deprecated
    51                          export _wTimer16_ReadCompareValue  ; deprecated
    52                          export  wTimer16_ReadTimer         ; deprecated
    53                          export _wTimer16_ReadTimer         ; deprecated
    54                          export  wTimer16_ReadTimerSaveCV   ; deprecated
    55                          export _wTimer16_ReadTimerSaveCV   ; deprecated
    56                          
    57                          export  wTimer16_ReadCounter       ; obsolete
    58                          export _wTimer16_ReadCounter       ; obsolete
    59                          export  wTimer16_CaptureCounter    ; obsolete
    60                          export _wTimer16_CaptureCounter    ; obsolete
    61                          
    62                          
    63                          AREA led_display_RAM (RAM,REL)
    64                          
    65                          ;-----------------------------------------------
    66                          ;  Constant Definitions
    67                          ;-----------------------------------------------
    68                          
    69                          
    70                          ;-----------------------------------------------
    71                          ; Variable Allocation
    72                          ;-----------------------------------------------
    73                          
    74                          
    75                          AREA UserModules (ROM, REL)
    76                          
    77                          .SECTION
    78                          ;-----------------------------------------------------------------------------
    79                          ;  FUNCTION NAME: Timer16_EnableInt
    80                          ;
    81                          ;  DESCRIPTION:
    82                          ;     Enables this timer's interrupt by setting the interrupt enable mask bit
    83                          ;     associated with this User Module. This function has no effect until and
    84                          ;     unless the global interrupts are enabled (for example by using the
    85                          ;     macro M8C_EnableGInt).
    86                          ;-----------------------------------------------------------------------------
    87                          ;
    88                          ;  ARGUMENTS:    None.
    89                          ;  RETURNS:      Nothing.
    90                          ;  SIDE EFFECTS: 
    91                          ;    The A and X registers may be modified by this or future implementations
    92                          ;    of this function.  The same is true for all RAM page pointer registers in
    93                          ;    the Large Memory Model.  When necessary, it is the calling function's
    94                          ;    responsibility to perserve their values across calls to fastcall16 
    95                          ;    functions.
    96                          ;
    97  2D4F                     Timer16_EnableInt:
    98  2D4F                    _Timer16_EnableInt:
    99                             RAM_PROLOGUE RAM_USE_CLASS_1
   100  2D4F  43 E1 02             Timer16_EnableInt_M
   101                             RAM_EPILOGUE RAM_USE_CLASS_1
   102  2D52  7F                   ret
   103                          
   104                          .ENDSECTION
   105                          
   106                          
   107                          .SECTION
   108                          ;-----------------------------------------------------------------------------
   109                          ;  FUNCTION NAME: Timer16_DisableInt
   110                          ;
   111                          ;  DESCRIPTION:
   112                          ;     Disables this timer's interrupt by clearing the interrupt enable
   113                          ;     mask bit associated with this User Module.
   114                          ;-----------------------------------------------------------------------------
   115                          ;
   116                          ;  ARGUMENTS:    None
   117                          ;  RETURNS:      Nothing
   118                          ;  SIDE EFFECTS: 
   119                          ;    The A and X registers may be modified by this or future implementations
   120                          ;    of this function.  The same is true for all RAM page pointer registers in
   121                          ;    the Large Memory Model.  When necessary, it is the calling function's
   122                          ;    responsibility to perserve their values across calls to fastcall16 
   123                          ;    functions.
   124                          ;
   125  2D53                     Timer16_DisableInt:
   126  2D53                    _Timer16_DisableInt:
   127                             RAM_PROLOGUE RAM_USE_CLASS_1
   128  2D53  41 E1 FD             Timer16_DisableInt_M
   129                             RAM_EPILOGUE RAM_USE_CLASS_1
   130  2D56  7F                   ret
   131                          
   132                          .ENDSECTION
   133                          
   134                          
   135                          .SECTION
   136                          ;-----------------------------------------------------------------------------
   137                          ;  FUNCTION NAME: Timer16_Start
   138                          ;
   139                          ;  DESCRIPTION:
   140                          ;     Sets the start bit in the Control register of this user module.  The
   141                          ;     timer will begin counting on the next input clock.
   142                          ;-----------------------------------------------------------------------------
   143                          ;
   144                          ;  ARGUMENTS:    None
   145                          ;  RETURNS:      Nothing
   146                          ;  SIDE EFFECTS: 
   147                          ;    The A and X registers may be modified by this or future implementations
   148                          ;    of this function.  The same is true for all RAM page pointer registers in
   149                          ;    the Large Memory Model.  When necessary, it is the calling function's
   150                          ;    responsibility to perserve their values across calls to fastcall16 
   151                          ;    functions.
   152                          ;
   153  2D57                     Timer16_Start:
   154  2D57                    _Timer16_Start:
   155                             RAM_PROLOGUE RAM_USE_CLASS_1
   156  2D57  43 23 01             Timer16_Start_M
   157                             RAM_EPILOGUE RAM_USE_CLASS_1
   158  2D5A  7F                   ret
   159                          
   160                          .ENDSECTION
   161                          
   162                          
   163                          .SECTION
   164                          ;-----------------------------------------------------------------------------
   165                          ;  FUNCTION NAME: Timer16_Stop
   166                          ;
   167                          ;  DESCRIPTION:
   168                          ;     Disables timer operation by clearing the start bit in the Control
   169                          ;     register of the LSB block.
   170                          ;-----------------------------------------------------------------------------
   171                          ;
   172                          ;  ARGUMENTS:    None
   173                          ;  RETURNS:      Nothing
   174                          ;  SIDE EFFECTS: 
   175                          ;    The A and X registers may be modified by this or future implementations
   176                          ;    of this function.  The same is true for all RAM page pointer registers in
   177                          ;    the Large Memory Model.  When necessary, it is the calling function's
   178                          ;    responsibility to perserve their values across calls to fastcall16 
   179                          ;    functions.
   180                          ;
   181  2D5B                     Timer16_Stop:
   182  2D5B                    _Timer16_Stop:
   183                             RAM_PROLOGUE RAM_USE_CLASS_1
   184  2D5B  41 23 FE             Timer16_Stop_M
   185                             RAM_EPILOGUE RAM_USE_CLASS_1
   186  2D5E  7F                   ret
   187                          
   188                          .ENDSECTION
   189                          
   190                          
   191                          .SECTION
   192                          ;-----------------------------------------------------------------------------
   193                          ;  FUNCTION NAME: Timer16_WritePeriod
   194                          ;
   195                          ;  DESCRIPTION:
   196                          ;     Write the 16-bit period value into the Period register (DR1). If the
   197                          ;     Timer user module is stopped, then this value will also be latched
   198                          ;     into the Count register (DR0).
   199                          ;-----------------------------------------------------------------------------
   200                          ;
   201                          ;  ARGUMENTS: fastcall16 WORD wPeriodValue (LSB in A, MSB in X)
   202                          ;  RETURNS:   Nothing
   203                          ;  SIDE EFFECTS:
   204                          ;    The A and X registers may be modified by this or future implementations
   205                          ;    of this function.  The same is true for all RAM page pointer registers in
   206                          ;    the Large Memory Model.  When necessary, it is the calling function's
   207                          ;    responsibility to perserve their values across calls to fastcall16 
   208                          ;    functions.
   209                          ;
   210  2D5F                     Timer16_WritePeriod:
   211  2D5F                    _Timer16_WritePeriod:
   212                             RAM_PROLOGUE RAM_USE_CLASS_1
   213  2D5F  60 21                mov   reg[Timer16_PERIOD_LSB_REG], A
   214  2D61  5B                   mov   A, X
   215  2D62  60 25                mov   reg[Timer16_PERIOD_MSB_REG], A
   216                             RAM_EPILOGUE RAM_USE_CLASS_1
   217  2D64  7F                   ret
   218                          
   219                          .ENDSECTION
   220                          
   221                          
   222                          .SECTION
   223                          ;-----------------------------------------------------------------------------
   224                          ;  FUNCTION NAME: Timer16_WriteCompareValue
   225                          ;
   226                          ;  DESCRIPTION:
   227                          ;     Writes compare value into the Compare register (DR2).
   228                          ;
   229                          ;     NOTE! The Timer user module must be STOPPED in order to write the
   230                          ;           Compare register. (Call Timer16_Stop to disable).
   231                          ;-----------------------------------------------------------------------------
   232                          ;
   233                          ;  ARGUMENTS:    fastcall16 WORD wCompareValue (LSB in A, MSB in X)
   234                          ;  RETURNS:      Nothing
   235                          ;  SIDE EFFECTS: 
   236                          ;    The A and X registers may be modified by this or future implementations
   237                          ;    of this function.  The same is true for all RAM page pointer registers in
   238                          ;    the Large Memory Model.  When necessary, it is the calling function's
   239                          ;    responsibility to perserve their values across calls to fastcall16 
   240                          ;    functions.
   241                          ;
   242  2D65                     Timer16_WriteCompareValue:
   243  2D65                    _Timer16_WriteCompareValue:
   244                             RAM_PROLOGUE RAM_USE_CLASS_1
   245  2D65  60 22                mov   reg[Timer16_COMPARE_LSB_REG], A
   246  2D67  5B                   mov   A, X
   247  2D68  60 26                mov   reg[Timer16_COMPARE_MSB_REG], A
   248                             RAM_EPILOGUE RAM_USE_CLASS_1
   249  2D6A  7F                   ret
   250                          
   251                          .ENDSECTION
   252                          
   253                          
   254                          .SECTION
   255                          ;-----------------------------------------------------------------------------
   256                          ;  FUNCTION NAME: Timer16_wReadCompareValue
   257                          ;
   258                          ;  DESCRIPTION:
   259                          ;     Reads the Compare registers.
   260                          ;-----------------------------------------------------------------------------
   261                          ;
   262                          ;  ARGUMENTS:    None
   263                          ;  RETURNS:      fastcall16 WORD wCompareValue (value of DR2 in the X & A registers)
   264                          ;  SIDE EFFECTS: 
   265                          ;    The A and X registers may be modified by this or future implementations
   266                          ;    of this function.  The same is true for all RAM page pointer registers in
   267                          ;    the Large Memory Model.  When necessary, it is the calling function's
   268                          ;    responsibility to perserve their values across calls to fastcall16 
   269                          ;    functions.
   270                          ;
   271  2D6B                     Timer16_wReadCompareValue:
   272  2D6B                    _Timer16_wReadCompareValue:
   273  2D6B                     wTimer16_ReadCompareValue:                      ; this name deprecated
   274  2D6B                    _wTimer16_ReadCompareValue:                      ; this name deprecated
   275                             RAM_PROLOGUE RAM_USE_CLASS_1
   276  2D6B  5D 26                mov   A, reg[Timer16_COMPARE_MSB_REG]
   277  2D6D  5C                   mov   X, A
   278  2D6E  5D 22                mov   A, reg[Timer16_COMPARE_LSB_REG]
   279                             RAM_EPILOGUE RAM_USE_CLASS_1
   280  2D70  7F                   ret
   281                          
   282                          .ENDSECTION
   283                          
   284                          
   285                          .SECTION
   286                          ;-----------------------------------------------------------------------------
   287                          ;  FUNCTION NAME: Timer16_wReadTimerSaveCV
   288                          ;
   289                          ;  DESCRIPTION:
   290                          ;     Returns the value in the Count register (DR0), preserving the
   291                          ;     value in the compare register (DR2).
   292                          ;-----------------------------------------------------------------------------
   293                          ;
   294                          ;  ARGUMENTS: None
   295                          ;  RETURNS:   fastcall16 WORD wCount (value of DR0 in the X & A registers)
   296                          ;  SIDE EFFECTS:
   297                          ;     1) May cause an interrupt, if interrupt on Compare is enabled.
   298                          ;     2) If enabled, Global interrupts are momentarily disabled.
   299                          ;     3) The user module is stopped momentarily while the compare value is
   300                          ;        restored.  This may cause the Count register to miss one or more
   301                          ;        counts depending on the input clock speed.
   302                          ;     4) The A and X registers may be modified by this or future implementations
   303                          ;        of this function.  The same is true for all RAM page pointer registers in
   304                          ;        the Large Memory Model.  When necessary, it is the calling function's
   305                          ;        responsibility to perserve their values across calls to fastcall16 
   306                          ;        functions.
   307                          ;
   308                          ;  THEORY of OPERATION:
   309                          ;     1) Read and save the Compare register.
   310                          ;     2) Read the Count register, causing its data to be latched into
   311                          ;        the Compare register.
   312                          ;     3) Read and save the Counter value, now in the Compare register,
   313                          ;        to the buffer.
   314                          ;     4) Disable global interrupts
   315                          ;     5) Halt the timer
   316                          ;     6) Restore the Compare register values
   317                          ;     7) Start the Timer again
   318                          ;     8) Restore global interrupt state
   319                          ;
   320  2D71                     Timer16_wReadTimerSaveCV:
   321  2D71                    _Timer16_wReadTimerSaveCV:
   322  2D71                     wTimer16_ReadTimerSaveCV:                       ; this name deprecated
   323  2D71                    _wTimer16_ReadTimerSaveCV:                       ; this name deprecated
   324  2D71                     wTimer16_ReadCounter:                           ; this name deprecated
   325  2D71                    _wTimer16_ReadCounter:                           ; this name deprecated
   326                          
   327  0000                    CpuFlags:      equ   0
   328  0001                    wCount_MSB:    equ   1
   329  0002                    wCount_LSB:    equ   2
   330                          
   331  2D71  71 40                RAM_PROLOGUE RAM_USE_CLASS_2
   332  2D73  4F                   mov   X, SP                                   ; X <- stack frame pointer
   333  2D74  38 03                add   SP, 3                                   ; Reserve space for flags, count
   334  2D76  5D 23                mov   A, reg[Timer16_CONTROL_LSB_REG]         ; save the Control register
   335  2D78  08                   push  A
   336  2D79  5D 22                mov   A, reg[Timer16_COMPARE_LSB_REG]         ; save the Compare register
   337  2D7B  08                   push  A
   338  2D7C  5D 26                mov   A, reg[Timer16_COMPARE_MSB_REG]
   339  2D7E  08                   push  A
   340  2D7F  5D 20                mov   A, reg[Timer16_COUNTER_LSB_REG]         ; synchronous copy DR2 <- DR0
   341                                                                           ; This may cause an interrupt!
   342  2D81  5D 26                mov   A, reg[Timer16_COMPARE_MSB_REG]         ; Now grab DR2 (DR0) and save
   343  2D83  54 01                mov   [X+wCount_MSB], A
   344  2D85  5D 22                mov   A, reg[Timer16_COMPARE_LSB_REG]
   345  2D87  54 02                mov   [X+wCount_LSB], A
   346  2D89  50 00                mov   A, 0                                    ; Guess the global interrupt state
   347  2D8B  49 F7 01             tst   reg[CPU_F], FLAG_GLOBAL_IE              ; Currently Disabled?
   348  2D8E  A003                 jz    .SetupStatusFlag                        ;   Yes, guess was correct
   349  2D90  50 01                mov   A, FLAG_GLOBAL_IE                       ;    No, modify our guess
   350  2D92                    .SetupStatusFlag:                                ; and ...
   351  2D92  54 00                mov   [X+CpuFlags], A                         ;   StackFrame[0] <- Flag Reg image
   352  2D94  70 FE                M8C_DisableGInt                               ; Disable interrupts globally
   353  2D96  41 23 FE             Timer16_Stop_M                                ; Disable (stop) the timer
   354  2D99  18                   pop   A                                       ; Restore the Compare register
   355  2D9A  60 26                mov   reg[Timer16_COMPARE_MSB_REG], A
   356  2D9C  18                   pop   A
   357  2D9D  60 22                mov   reg[Timer16_COMPARE_LSB_REG], A
   358  2D9F  18                   pop   A                                       ; restore start state of the timer
   359  2DA0  60 23                mov   reg[Timer16_CONTROL_LSB_REG], A
   360  2DA2  18                   pop   A                                       ; Return result stored in stack frame
   361  2DA3  20                   pop   X
   362                             RAM_EPILOGUE RAM_USE_CLASS_2
      + 2DA4  70 3F             	and	f, 0x3F
      + 2DA6  71 80             	or	f, 0x80
   363  2DA8  7E                   reti                                          ; Flag Reg <- StackFrame[0]
   364                          
   365                          .ENDSECTION
   366                          
   367                          
   368                          .SECTION
   369                          ;-----------------------------------------------------------------------------
   370                          ;  FUNCTION NAME: Timer16_wReadTimer
   371                          ;
   372                          ;  DESCRIPTION:
   373                          ;     Performs a software capture of the Count register.  A synchronous
   374                          ;     read of the Count register is performed.  The timer is NOT stopped.
   375                          ;
   376                          ;     WARNING - this will cause loss of data in the Compare register.
   377                          ;-----------------------------------------------------------------------------
   378                          ;
   379                          ;  ARGUMENTS:    None
   380                          ;  RETURNS:      fastcall16 WORD wCount, (value of DR0 in the X & A registers)
   381                          ;  SIDE EFFECTS:
   382                          ;    May cause an interrupt.
   383                          ;
   384                          ;    The A and X registers may be modified by this or future implementations
   385                          ;    of this function.  The same is true for all RAM page pointer registers in
   386                          ;    the Large Memory Model.  When necessary, it is the calling function's
   387                          ;    responsibility to perserve their values across calls to fastcall16 
   388                          ;    functions.
   389                          ;
   390                          ;  THEORY of OPERATION:
   391                          ;     1) Read the Count register - this causes the count value to be
   392                          ;        latched into the Compare registers.
   393                          ;     2) Read and return the Count register values from the Compare
   394                          ;        registers into the return buffer.
   395                          ;
   396  2DA9                     Timer16_wReadTimer:
   397  2DA9                    _Timer16_wReadTimer:
   398  2DA9                     wTimer16_ReadTimer:                             ; this name deprecated
   399  2DA9                    _wTimer16_ReadTimer:                             ; this name deprecated
   400  2DA9                     wTimer16_CaptureCounter:                        ; this name deprecated
   401  2DA9                    _wTimer16_CaptureCounter:                        ; this name deprecated
   402                          
   403                             RAM_PROLOGUE RAM_USE_CLASS_1
   404  2DA9  5D 20                mov   A, reg[Timer16_COUNTER_LSB_REG]         ; synchronous copy DR2 <- DR0
   405                                                                           ; This may cause an interrupt!
   406                          
   407  2DAB  5D 26                mov   A, reg[Timer16_COMPARE_MSB_REG]         ; Return DR2 (actually DR0)
   408  2DAD  5C                   mov   X, A
   409  2DAE  5D 22                mov   A, reg[Timer16_COMPARE_LSB_REG]
   410                             RAM_EPILOGUE RAM_USE_CLASS_1
   411  2DB0  7F                   ret
HI-TECH Software Macro Assembler (PSoC MCU) V9.61
Symbol Table                                                                                               Fri Jun 12 09:25:10 2015
           wTimer16_ReadTimer 2DA9           wTimer16_ReadCounter 2D71              Timer16_EnableInt 2D4F  
     Timer16_wReadTimerSaveCV 2D71                          CPU_F 00F7       _wTimer16_CaptureCounter 2DA9  
    Timer16_WriteCompareValue 2D65             Timer16_DisableInt 2D53     _wTimer16_ReadCompareValue 2D6B  
                       HITECH 0002             _Timer16_EnableInt 2D4F                  _Timer16_Stop 2D5B  
              FLAG_PGMODE_01b 0040                FLAG_PGMODE_10b 0080       wTimer16_ReadTimerSaveCV 2D71  
           Timer16_wReadTimer 2DA9                       CpuFlags 0000               Timer16_INT_MASK 0002  
          _wTimer16_ReadTimer 2DA9      SYSTEM_LARGE_MEMORY_MODEL 0001     _Timer16_WriteCompareValue 2D65  
               FLAG_GLOBAL_IE 0001         Timer16_PERIOD_LSB_REG 0021         Timer16_PERIOD_MSB_REG 0025  
        _wTimer16_ReadCounter 2D71                      TOOLCHAIN 0002        Timer16_COUNTER_LSB_REG 0020  
               _Timer16_Start 2D57               FLAG_PGMODE_MASK 00C0            _Timer16_DisableInt 2D53  
              RAM_USE_CLASS_1 0001                RAM_USE_CLASS_2 0002                RAM_USE_CLASS_3 0004  
              RAM_USE_CLASS_4 0008      _Timer16_wReadTimerSaveCV 2D71      Timer16_wReadCompareValue 2D6B  
                   wCount_LSB 0002                     wCount_MSB 0001        Timer16_CONTROL_LSB_REG 0023  
              Timer16_INT_REG 00E1           _Timer16_WritePeriod 2D5F            _Timer16_wReadTimer 2DA9  
      Timer16_COMPARE_LSB_REG 0022        Timer16_COMPARE_MSB_REG 0026      _wTimer16_ReadTimerSaveCV 2D71  
Timer16_CONTROL_REG_START_BIT 0001        wTimer16_CaptureCounter 2DA9     SYSTEM_IDXPG_TRACKS_IDX_PP 0001  
          Timer16_WritePeriod 2D5F     _Timer16_wReadCompareValue 2D6B                  Timer16_Start 2D57  
    wTimer16_ReadCompareValue 2D6B     SYSTEM_IDXPG_TRACKS_STK_PP 0000                   Timer16_Stop 2D5B  
HI-TECH Software Macro Assembler (PSoC MCU) V9.61
                                                                                                           Fri Jun 12 09:25:11 2015
     1                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     2                          ;;;
     3                          ;;;  M8C.INC -- Microcontroller Device System Declarations
     4                          ;;;
     5                          ;;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
     6                          ;;;
     7                          ;;;  This file provides address constants, bit field masks and a set of macro
     8                          ;;;  facilities for the Cypress Semiconductor CY8C22045 Microcontroller devices.
     9                          ;;;
    10                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    11                          
    12                          ;;=============================================================================
    13                          ;; Definition of abbreviations used in the descriptions below
    14                          ;;  (RW)   The register or bit supports reads and writes
    15                          ;;  (W)    The register or bit is write-only
    16                          ;;  (R)    The register or bit is read-only
    17                          ;;  (#)    Access to the register is bit specific (see the family datasheet)
    18                          ;;  (RC)   The register or bit can be read, but writing a 0 will clear it,
    19                          ;;         writing a 1 will have no effect.
    20                          ;;=============================================================================
    21                          
    22                          ;;=============================================================================
    23                          ;;      System Registers
    24                          ;;=============================================================================
    25                          
    26                          ;----------------------------
    27                          ;  Flag Register Bit Fields
    28                          ;----------------------------
    29  00C0                    FLAG_PGMODE_MASK:  equ 0C0h     ; Paging control for > 256 bytes of RAM
    30  0000                    FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
    31  0040                    FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
    32  0080                    FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
    33  00C0                    FLAG_PGMODE_3:     equ 0C0h       ; Direct to CUR_PP page, indexed to STK_PP page
    34  0000                    FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
    35  0040                    FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
    36  0080                    FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
    37  00C0                    FLAG_PGMODE_11b:   equ 0C0h       ; Same as PGMODE_3
    38  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    39  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    40  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    41  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    42  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    43                          
    44                          
    45                          ;;=============================================================================
    46                          ;;      Register Space, Bank 0
    47                          ;;=============================================================================
    48                          
    49                          ;------------------------------------------------
    50                          ;  Port Registers
    51                          ;  Note: Also see this address range in Bank 1.
    52                          ;------------------------------------------------
    53                          ; Port 0
    54  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    55  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    56  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    57  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    58                          ; Port 1
    59  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    60  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    61  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    62  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    63                          ; Port 2
    64  0008                    PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
    65  0009                    PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
    66  000A                    PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
    67  000B                    PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
    68                          ; Port 3
    69  000C                    PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
    70  000D                    PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
    71  000E                    PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
    72  000F                    PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
    73                          ; Port 4
    74  0010                    PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
    75  0011                    PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
    76  0012                    PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
    77  0013                    PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
    78                          
    79                          ;------------------------------------------------
    80                          ;  Digital PSoC(tm) block Registers
    81                          ;  Note: Also see this address range in Bank 1.
    82                          ;------------------------------------------------
    83                          ; Digital PSoC block 00, Basic Type C
    84  0020                    DBC00DR0:     equ 20h          ; data register 0                          (#)
    85  0021                    DBC00DR1:     equ 21h          ; data register 1                          (W)
    86  0022                    DBC00DR2:     equ 22h          ; data register 2                          (RW)
    87  0023                    DBC00CR0:     equ 23h          ; control & status register 0              (#)
    88                          
    89                          ; Digital PSoC block 01, Basic Type C
    90  0024                    DBC01DR0:     equ 24h          ; data register 0                          (#)
    91  0025                    DBC01DR1:     equ 25h          ; data register 1                          (W)
    92  0026                    DBC01DR2:     equ 26h          ; data register 2                          (RW)
    93  0027                    DBC01CR0:     equ 27h          ; control & status register 0              (#)
    94                          
    95                          ; Digital PSoC block 02, Communications Type C
    96  0028                    DCC02DR0:     equ 28h          ; data register 0                          (#)
    97  0029                    DCC02DR1:     equ 29h          ; data register 1                          (W)
    98  002A                    DCC02DR2:     equ 2Ah          ; data register 2                          (RW)
    99  002B                    DCC02CR0:     equ 2Bh          ; control & status register 0              (#)
   100                          
   101                          ; Digital PSoC block 03, Communications Type C
   102  002C                    DCC03DR0:     equ 2Ch          ; data register 0                          (#)
   103  002D                    DCC03DR1:     equ 2Dh          ; data register 1                          (W)
   104  002E                    DCC03DR2:     equ 2Eh          ; data register 2                          (RW)
   105  002F                    DCC03CR0:     equ 2Fh          ; control & status register 0              (#)
   106                          
   107                          ; Digital PSoC block 10, Basic Type C
   108  0030                    DBC10DR0:     equ 30h          ; data register 0                          (#)
   109  0031                    DBC10DR1:     equ 31h          ; data register 1                          (W)
   110  0032                    DBC10DR2:     equ 32h          ; data register 2                          (RW)
   111  0033                    DBC10CR0:     equ 33h          ; control & status register 0              (#)
   112                          
   113                          ; Digital PSoC block 11, Basic Type C
   114  0034                    DBC11DR0:     equ 34h          ; data register 0                          (#)
   115  0035                    DBC11DR1:     equ 35h          ; data register 1                          (W)
   116  0036                    DBC11DR2:     equ 36h          ; data register 2                          (RW)
   117  0037                    DBC11CR0:     equ 37h          ; control & status register 0              (#)
   118                          
   119                          ; Digital PSoC block 12, Communications Type C
   120  0038                    DCC12DR0:     equ 38h          ; data register 0                          (#)
   121  0039                    DCC12DR1:     equ 39h          ; data register 1                          (W)
   122  003A                    DCC12DR2:     equ 3Ah          ; data register 2                          (RW)
   123  003B                    DCC12CR0:     equ 3Bh          ; control & status register 0              (#)
   124                          
   125                          ; Digital PSoC block 13, Communications Type C
   126  003C                    DCC13DR0:     equ 3Ch          ; data register 0                          (#)
   127  003D                    DCC13DR1:     equ 3Dh          ; data register 1                          (W)
   128  003E                    DCC13DR2:     equ 3Eh          ; data register 2                          (RW)
   129  003F                    DCC13CR0:     equ 3Fh          ; control & status register 0              (#)
   130                          
   131                          ;-------------------------------------
   132                          ;  Analog Control Registers
   133                          ;-------------------------------------
   134  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
   135  00C0                    AMX_IN_ACI3:          equ C0h    ; MASK: column 3 input mux
   136  0030                    AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
   137  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
   138  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
   139                          
   140  0061                    AMUX_CFG:      equ 61h          ; Analog MUX Configuration
   141  0030                    AMUX_CFG_INTCAP:       equ 30h    ;
   142  000E                    AMUX_CFG_MUXCLK:  	  equ 0Eh	 ;
   143  0001                    AMUX_CFG_EN:		  	  equ 01h	 ;
   144                          
   145                          ; old declarations DO NOT USE
   146  0061                    AMUXCFG:      equ 61h          ; Analog MUX Configuration
   147  0030                    AMUXCFG_INTCAP:       equ 30h    ;
   148  000E                    AMUXCFG_MUXCLK:  	  equ 0Eh	 ;
   149  0001                    AMUXCFG_EN:		  	  equ 01h	 ;
   150                          
   151  0062                    PWM_CR:       equ 62h          ; Pulse-Width Modulator Control
   152  0038                    PWM_CR_HIGH:          equ 38h    ; MASK: PWM high time
   153  0006                    PWM_CR_LOW:           equ 06h	 ; MASK: PWM low time
   154  0001                    PWM_CR_EN:            equ 01h	 ; MASK: Enable/Disable PWM function
   155                          
   156  0063                    ARF_CR:       equ 63h          ; Analog Reference Control
   157                          
   158  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus Register           (#)
   159  0080                    CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
   160  0040                    CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
   161  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
   162  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
   163  0008                    CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
   164  0004                    CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
   165  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
   166  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   167                          
   168  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   169  0020                    CMP_CR1_CLDIS1:       equ 20h    ; MASK: Column 1 comparator output latch
   170  0010                    CMP_CR1_CLDIS0:	      equ 10h    ; MASK: Column 0 comparator output latch
   171                          
   172  0068                    ADC0_CR:      equ 68h          ; Analog Column 0 Configuration
   173  0080                    ADC0_CR_CMPST:        equ 80h    ;
   174  0040                    ADC0_CR_LOREN:        equ 40h    ;
   175  0020                    ADC0_CR_SHEN:         equ 20h    ;
   176  0008                    ADC0_CR_CBSRC:        equ 08h    ;
   177  0004                    ADC0_CR_ADCM:         equ 04h    ;
   178  0001                    ADC0_CR_EN:	          equ 01h    ;
   179                          
   180  0069                    ADC1_CR:      equ 69h          ; Analog Column 1 Configuration
   181  0080                    ADC1_CR_CMPST:        equ 80h    ;
   182  0040                    ADC1_CR_LOREN:        equ 40h    ;
   183  0020                    ADC1_CR_SHEN:         equ 20h    ;
   184  0008                    ADC1_CR_CBSRC:        equ 08h    ;
   185  0004                    ADC1_CR_ADCM:         equ 04h    ;
   186  0001                    ADC1_CR_EN:	          equ 01h    ;
   187                          
   188                          ; Continuous Time PSoC block Type E Row 0 Col 0
   189  0072                    ACE00CR1:     equ 72h          ; Control register 1                       (RW)
   190  0073                    ACE00CR2:     equ 73h          ; Control register 2                       (RW)
   191                          
   192                          ; Continuous Time PSoC block Type E Row 0 Col 1
   193  0076                    ACE01CR1:     equ 76h          ; Control register 1                       (RW)
   194  0077                    ACE01CR2:     equ 77h          ; Control register 2                       (RW)
   195                          
   196                          ; Switched Cap PSoC blockType E Row 1 Col 0
   197  0080                    ASE10CR0:     equ 80h          ; Control register 0                       (RW)
   198                          
   199                          ; Switched Cap PSoC blockType E Row 1 Col 1
   200  0084                    ASE11CR0:     equ 84h          ; Control register 0                       (RW)
   201                          
   202                          ;-----------------------------------------------
   203                          ;  Global General Purpose Data Registers
   204                          ;-----------------------------------------------
   205  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   206  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   207  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   208  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   209                          
   210                          ;------------------------------------------------
   211                          ;  Row Digital Interconnects
   212                          ;
   213                          ;  Note: the following registers are mapped into
   214                          ;  both register bank 0 AND register bank 1.
   215                          ;------------------------------------------------
   216                          
   217  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   218  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   219  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   220  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   221  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   222  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   223  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   224                          
   225  00B8                    RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
   226  00B9                    RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
   227  00BA                    RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
   228  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   229  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   230  00BD                    RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
   231  00BE                    RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
   232                          
   233                          ;-----------------------------------------------
   234                          ;  Ram Page Pointers
   235                          ;-----------------------------------------------
   236  00D0                    CUR_PP:      equ 0D0h           ; Current   Page Pointer
   237  00D1                    STK_PP:      equ 0D1h           ; Stack     Page Pointer
   238  00D3                    IDX_PP:      equ 0D3h           ; Index     Page Pointer
   239  00D4                    MVR_PP:      equ 0D4h           ; MVI Read  Page Pointer
   240  00D5                    MVW_PP:      equ 0D5h           ; MVI Write Page Pointer
   241                          
   242                          ;------------------------------------------------
   243                          ;  I2C Configuration Registers
   244                          ;------------------------------------------------
   245  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   246  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   247  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   248  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   249  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   250  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   251  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   252  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   253  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   254  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   255                          
   256  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   257  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   258  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   259  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   260  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   261  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   262  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   263  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   264  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   265                          
   266  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   267                          
   268  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   269  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   270  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   271  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   272  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   273                          
   274                          ;------------------------------------------------
   275                          ;  System and Global Resource Registers
   276                          ;------------------------------------------------
   277  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   278                                                         ; Use INT_MSK0 bit field masks
   279  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   280                                                         ; Use INT_MSK1 bit field masks
   281  00DC                    INT_CLR2:     equ 0DCh          ; Interrupt Clear Register 2               (RW)
   282                                                         ; Use INT_MSK2 bit field masks
   283  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   284                                                         ; Use INT_MSK3 bit field masks
   285                          
   286  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   287  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   288  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   289                          
   290  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   291  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   292  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   293  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   294  0010                    INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
   295  0008                    INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
   296  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   297  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   298  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   299                          
   300  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   301  0080                    INT_MSK1_DCC13:            equ 80h ; MASK: enable/disable DCC13 block interrupt
   302  0040                    INT_MSK1_DCC12:            equ 40h ; MASK: enable/disable DCC12 block interrupt
   303  0020                    INT_MSK1_DBC11:            equ 20h ; MASK: enable/disable DBC11 block interrupt
   304  0010                    INT_MSK1_DBC10:            equ 10h ; MASK: enable/disable DBC10 block interrupt
   305  0008                    INT_MSK1_DCC03:            equ 08h ; MASK: enable/disable DCC03 block interrupt
   306  0004                    INT_MSK1_DCC02:            equ 04h ; MASK: enable/disable DCC02 block interrupt
   307  0002                    INT_MSK1_DBC01:            equ 02h ; MASK: enable/disable DBC01 block interrupt
   308  0001                    INT_MSK1_DBC00:            equ 01h ; MASK: enable/disable DBC00 block interrupt
   309                          
   310  00DF                    INT_MSK2:     equ DFh			; Custom block Mask Register			   (RW)
   311  0010                    INT_MSK2_SARADC:           equ 10h ; MASK: enable/disable SARADC block interrupt
   312  0020                    INT_MSK2_CSD0:             equ 20h ; MASK: enable/disable CSD0 block interrupt
   313  0040                    INT_MSK2_CSD1:             equ 40h ; MASK: enable/disable CSD1 block interrupt
   314  0080                    INT_MSK2_RTC:              equ 80h ; MASK: enable/disable RTC block interrupt
   315                          
   316  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   317  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   318                          
   319                          ;------------------------------------------------------
   320                          ;  MAC Registers
   321                          ;------------------------------------------------------
   322                          
   323  00E8                    MUL0_X:       equ 0E8h          ; Multiply Input X Register                (W)
   324  00E9                    MUL0_Y:       equ 0E9h          ; Multiply Input Y Register                (W)
   325  00EA                    MUL0_DH:      equ 0EAh          ; Multiply Result High Byte Register       (R)
   326  00EB                    MUL0_DL:      equ 0EBh          ; Multiply Result Low Byte Register        (R)
   327                          
   328  00EC                    ACC0_DR1:     equ 0ECh          ; Accumulator Data Register 1              (RW)
   329  00ED                    ACC0_DR0:     equ 0EDh          ; Accumulator Data Register 0              (RW)
   330  00EE                    ACC0_DR3:     equ 0EEh          ; Accumulator Data Register 3              (RW)
   331  00EF                    ACC0_DR2:     equ 0EFh          ; Accumulator Data Register 2              (RW)
   332                          
   333                          ; DECIMATOR Control Registers
   334  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   335  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   336                          
   337                          ;------------------------------------------------------
   338                          ;  System Status and Control Registers
   339                          ;
   340                          ;  Note: The following registers are mapped into both
   341                          ;        register bank 0 AND register bank 1.
   342                          ;------------------------------------------------------
   343  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   344                                                             ; Use FLAG_ masks defined at top of file
   345                          
   346  00FD                    DAC_D:        equ 0FDh		   ; DAC Data Register                        (RW)
   347                          
   348  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   349  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: flag, Internal Reset Status bit
   350  0010                    CPU_SCR1_SLIMO:         equ 10h	   ; MASK: Slow IMO (internal main osc) enable
   351  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   352  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   353  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   354                          
   355  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   356  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   357  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   358  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   359  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   360  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   361                          
   362                          ;------------------------------------------------------
   363                          ;  Neon Capsense Digital Control Registers
   364                          ;------------------------------------------------------
   365  0050                    CSD0_DR0_L:				equ 50h		; Capsense 0 data low 0				(RW)
   366  0054                    CSD0_DR0_H:				equ 54h		; Capsense 0 data high 0			(RW)
   367  0058                    CSD1_DR0_L:				equ 58h		; Capsense 1 data low 0				(RW)
   368  005C                    CSD1_DR0_H:				equ 5Ch		; Capsense 1 data high 0			(RW)
   369  0051                    CSD0_DR1_L:				equ 51h		; Capsense 0 data low 1				(RW)
   370  0055                    CSD0_DR1_H:				equ 55h		; Capsense 0 data high 1			(RW)
   371  0059                    CSD1_DR1_L:				equ 59h		; Capsense 1 data low 1				(RW)
   372  005D                    CSD1_DR1_H:				equ 5Dh		; Capsense 1 data high 1			(RW)
   373  0052                    CSD0_CNT_L:				equ 52h		; Capsense 0 counter low			(RW)
   374  0056                    CSD0_CNT_H:				equ 56h		; Capsense 0 counter high			(RW)
   375  005A                    CSD1_CNT_L:				equ 5Ah		; Capsense 1 counter low			(RW)
   376  005E                    CSD1_CNT_H:				equ	5Eh		; Capsense 1 counter high			(RW)
   377  0053                    CSD0_CR0:				equ 53h		; Capsense 0 control 0				(RW)
   378  005B                    CSD1_CR0:				equ 5Bh		; Capsense 1 control 0				(RW)
   379  0057                    CSD0_CR1:				equ 57h		; Capsense 0 control 1				(RW)
   380  005F                    CSD1_CR1:				equ 5Fh		; Capsense 1 control 1				(RW)
   381                          
   382                          ;------------------------------------------------------
   383                          ;  Neon Analog Registers
   384                          ;------------------------------------------------------
   385  0065                    ASY_CR:					equ 65h		; Analog Synchronization Control	(RW)
   386  006A                    ADC_DH:					equ 6Ah		; ADC data high						(RW)
   387  006B                    ADC_DL:					equ 6Bh		; ADC data low						(RW)
   388  00C8                    PWMVREF0:				equ C8h		; PWM Voltage Reference 0			(RW)
   389  00C9                    PWMVREF1:				equ C9h		; PWM Voltage Reference 1			(RW)
   390  00CB                    PWMSRC:					equ CBh		; PWM Source						(RW)
   391  00CA                    IDACMODE:				equ CAh		; IDAC Mode							(RW)
   392  00FC                    IDACR_D:				equ FCh		; Analog Mux DAC data 0				(RW)
   393  00FD                    IDACL_D:				equ FDh		; Analog Mux DAC data 1				(RW)
   394                          
   395                          ;------------------------------------------------------
   396                          ;  Neon Digital Registers
   397                          ;------------------------------------------------------
   398  00B7                    RDI0DSM:				equ B7h		; Row Digital Interconnect input select 0	(RW)
   399  00BF                    RDI1DSM:				equ BFh		; Row Digital Interconnect input select 1	(RW)
   400                          
   401                          ;------------------------------------------------------
   402                          ;  Neon Test Registers
   403                          ;------------------------------------------------------
   404  00CC                    TSCR0:					equ CCh		; Tsource 0							(RW)
   405  00CD                    TSCMPH:					equ CDh		; TSCMP high						(RW)
   406  00CE                    TSCMPL:					equ CEh		; TSCMP low							(RW)
   407  00CF                    TSCR1:					equ CFh		; Tsource 1							(RW)
   408                          
   409                          ;;=============================================================================
   410                          ;;      Register Space, Bank 1
   411                          ;;=============================================================================
   412                          
   413                          ;------------------------------------------------
   414                          ;  Port Registers
   415                          ;  Note: Also see this address range in Bank 0.
   416                          ;------------------------------------------------
   417                          ; Port 0
   418  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   419  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   420  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   421  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   422                          
   423                          ; Port 1
   424  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   425  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   426  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   427  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   428                          
   429                          ; Port 2
   430  0008                    PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
   431  0009                    PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
   432  000A                    PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
   433  000B                    PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
   434                          
   435                          ; Port 3
   436  000C                    PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
   437  000D                    PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
   438  000E                    PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
   439  000F                    PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
   440                          
   441                          ; Port 4
   442  0010                    PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
   443  0011                    PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
   444  0012                    PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
   445  0013                    PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
   446                          
   447                          ;------------------------------------------------
   448                          ;  Digital PSoC(tm) block Registers
   449                          ;  Note: Also see this address range in Bank 0.
   450                          ;------------------------------------------------
   451                          
   452                          ; Digital PSoC block 00, Basic Type C
   453  0020                    DBC00FN:      equ 20h          ; Function Register                        (RW)
   454  0021                    DBC00IN:      equ 21h          ;    Input Register                        (RW)
   455  0022                    DBC00OU:      equ 22h          ;   Output Register                        (RW)
   456  0023                    DBC00CR1:     equ 23h          ;   control & status register 1            (RW)
   457                          
   458                          ; Digital PSoC block 01, Basic Type C
   459  0024                    DBC01FN:      equ 24h          ; Function Register                        (RW)
   460  0025                    DBC01IN:      equ 25h          ;    Input Register                        (RW)
   461  0026                    DBC01OU:      equ 26h          ;   Output Register                        (RW)
   462  0027                    DBC01CR1:     equ 27h          ;   control & status register 1            (RW)
   463                          
   464                          ; Digital PSoC block 02, Communications Type C
   465  0028                    DCC02FN:      equ 28h          ; Function Register                        (RW)
   466  0029                    DCC02IN:      equ 29h          ;    Input Register                        (RW)
   467  002A                    DCC02OU:      equ 2Ah          ;   Output Register                        (RW)
   468  002B                    DBC02CR1:     equ 2Bh          ;   control & status register 1            (RW)
   469                          
   470                          ; Digital PSoC block 03, Communications Type C
   471  002C                    DCC03FN:      equ 2Ch          ; Function Register                        (RW)
   472  002D                    DCC03IN:      equ 2Dh          ;    Input Register                        (RW)
   473  002E                    DCC03OU:      equ 2Eh          ;   Output Register                        (RW)
   474  0029                    DBC03CR1:     equ 29h          ;   control & status register 1            (RW)
   475                          
   476                          ; Digital PSoC block 10, Basic Type C
   477  0030                    DBC10FN:      equ 30h          ; Function Register                        (RW)
   478  0031                    DBC10IN:      equ 31h          ;    Input Register                        (RW)
   479  0032                    DBC10OU:      equ 32h          ;   Output Register                        (RW)
   480  0033                    DBC10CR1:     equ 33h          ;   control & status register 1            (RW)
   481                          
   482                          ; Digital PSoC block 11, Basic Type C
   483  0034                    DBC11FN:      equ 34h          ; Function Register                        (RW)
   484  0035                    DBC11IN:      equ 35h          ;    Input Register                        (RW)
   485  0036                    DBC11OU:      equ 36h          ;   Output Register                        (RW)
   486  0037                    DBC11CR1:     equ 37h          ;   control & status register 1            (RW)
   487                          
   488                          ; Digital PSoC block 12, Communications Type C
   489  0038                    DCC12FN:      equ 38h          ; Function Register                        (RW)
   490  0039                    DCC12IN:      equ 39h          ;    Input Register                        (RW)
   491  003A                    DCC12OU:      equ 3Ah          ;   Output Register                        (RW)
   492  003B                    DBC12CR1:     equ 3Bh          ;   control & status register 1            (RW)
   493                          
   494                          ; Digital PSoC block 13, Communications Type C
   495  003C                    DCC13FN:      equ 3Ch          ; Function Register                        (RW)
   496  003D                    DCC13IN:      equ 3Dh          ;    Input Register                        (RW)
   497  003E                    DCC13OU:      equ 3Eh          ;   Output Register                        (RW)
   498  003F                    DBC13CR1:     equ 3Fh          ;   control & status register 1            (RW)
   499                          
   500                          ;------------------------------------------------
   501                          ;  System and Global Resource Registers
   502                          ;  Note: Also see this address range in Bank 0.
   503                          ;------------------------------------------------
   504                          
   505  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   506  00C0                    CLK_CR0_ACOLUMN_3:    equ C0h    ; MASK: Specify clock for analog cloumn
   507  0030                    CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
   508  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   509  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   510                          
   511  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   512  0018                    CLK_CR1_ACLK1:        equ 18h    ; MASK: Digital PSoC block for analog source
   513  0003                    CLK_CR1_ACLK0:        equ 03h    ; MASK: Digital PSoC block for analog source
   514                          
   515  0003                    CLK_CR1_ACLK2:        equ 03h    ; Deprecated do not use
   516                          
   517  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   518  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   519                          
   520  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   521  000F                    AMD_CR0_AMOD0:        equ 0Fh    ; MASK: Modulation source for analog column 0
   522                          
   523  0064                    CMP_GO_EN:    equ 64h          ; Comparator Bus To Global Out Enable      (RW)
   524  0080                    CMP_GO_EN_GOO5:       equ 80h    ; MASK: Selected Col 1 signal to GOO5
   525  0040                    CMP_GO_EN_GOO1:       equ 40h    ; MASK: Selected Col 1 signal to GOO1
   526  0030                    CMP_GO_EN_SEL1:       equ 30h    ; MASK: Column 1 Signal Select
   527  0008                    CMP_GO_EN_GOO4:       equ 08h    ; MASK: Selected Col 0 signal to GOO4
   528  0004                    CMP_GO_EN_GOO0:       equ 04h    ; MASK: Selected Col 0 signal to GOO0
   529  0003                    CMP_GO_EN_SEL0:       equ 03h    ; MASK: Column 0 Signal Select
   530                          
   531  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   532  000F                    AMD_CR1_AMOD1:        equ 0Fh    ; MASK: Modulation ctrl for analog column 1
   533                          
   534  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   535  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   536  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   537                          
   538  006B                    CLK_CR3:      equ 6Bh          ; Analog Clock Source Control Register 3   (RW)
   539  0040                    CLK_CR3_SYS1:         equ 40h    ; MASK: Analog Clock 1 selection
   540  0030                    CLK_CR3_DIVCLK1:      equ 30h    ; MASK: Analog Clock 1 divider
   541  0004                    CLK_CR3_SYS0:         equ 04h    ; MASK: Analog Clock 0 selection
   542  0003                    CLK_CR3_DIVCLK0:      equ 03h    ; MASK: Analog Clock 0 divider
   543                          
   544                          ;------------------------------------------------
   545                          ;  Global Digital Interconnects
   546                          ;------------------------------------------------
   547                          
   548  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   549  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   550  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   551  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   552                          
   553  00A0                    GDI_O_IN_CR:  equ 0A0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   554  00A1                    GDI_E_IN_CR:  equ 0A1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   555  00A2                    GDI_O_OU_CR:  equ 0A2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   556  00A3                    GDI_E_OU_CR:  equ 0A3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   557                          
   558  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   559  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   560                          
   561                          ;------------------------------------------------
   562                          ;  Analog Mux Bus Port Enable Bits
   563                          ;------------------------------------------------
   564  00D8                    MUX_CR0:      equ 0D8h          ; Analog Mux Port 0 Bit Enables Register
   565  00D9                    MUX_CR1:      equ 0D9h          ; Analog Mux Port 1 Bit Enables Register
   566  00DA                    MUX_CR2:      equ 0DAh          ; Analog Mux Port 2 Bit Enables Register
   567  00DB                    MUX_CR3:      equ 0DBh          ; Analog Mux Port 3 Bit Enables Register
   568  00EC                    MUX_CR4:      equ 0ECh          ; Analog Mux Port 4 Bit Enables Register
   569                          
   570                          ;------------------------------------------------
   571                          ;  Clock and System Control Registers
   572                          ;------------------------------------------------
   573                          
   574  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   575  0080                    OSC_GO_EN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   576  0040                    OSC_GO_EN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   577  0020                    OSC_GO_EN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   578  0010                    OSC_GO_EN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   579  0008                    OSC_GO_EN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   580  0004                    OSC_GO_EN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   581  0002                    OSC_GO_EN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   582  0001                    OSC_GO_EN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   583                          
   584  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   585  0003                    OSC_CR4_VC3SEL:       equ 03h    ; MASK: System VC3 Clock source
   586                          
   587  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   588                          
   589  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   590  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   591  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   592  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   593  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   594  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   595  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   596  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   597  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   598  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   599  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   600  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   601  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   602  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   603  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   604  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   605  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   606  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   607                          
   608  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   609  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   610  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   611                          
   612  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   613  0080                    OSC_CR2_PLLGAIN:      equ 80h    ; MASK: High/Low gain
   614  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   615  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   616  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   617                          
   618  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   619  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   620  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   621  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   622  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   623  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   624  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   625  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   626                          
   627  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   628  0008                    VLT_CMP_NOWRITE:      equ 08h    ; MASK: Vcc below Flash Write level
   629  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   630  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   631  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   632                          
   633  00E5                    ADC0_TR:      equ 0E5h          ; ADC Column 0 Trim Register
   634  00E6                    ADC1_TR:      equ 0E6h          ; ADC Column 1 Trim Register
   635                          
   636  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   637  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   638  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   639  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   640                          
   641  00FA                    FLS_PR1:      equ 0FAh          ; Flash Program Register 1                 (RW)
   642  0003                    FLS_PR1_BANK:         equ 03h    ; MASK: Select Active Flash Bank
   643                          
   644  00FD                    DAC_CR0:       equ 0FDh          ; Analog Mux DAC Control Register 0
   645  00DC                    DAC_CR1:       equ 0DCh          ; Analog Mux DAC Control Register 1
   646  0008                    DAC_CR_IRANGE:        equ 08h    ; MASK: Sets the DAC Range low or high
   647  0006                    DAC_CR_OSCMODE:       equ 06h    ; MASK: Defines the reset mode for AMux
   648  0001                    DAC_CR_ENABLE:        equ 01h    ; MASK: Enable/Disable DAC function
   649                          
   650                          ;------------------------------------------------
   651                          ;  I2C Control Registers
   652                          ;------------------------------------------------
   653                          
   654  00AD                    I2C_ADDR:    equ 0ADh          ; I2C Address Register (RW)
   655                          
   656                          ;------------------------------------------------------
   657                          ;  Neon Analog Registers
   658                          ;------------------------------------------------------
   659  0053                    VDAC50CR0:		equ 53h			; V DAC5 control 0				(RW)
   660  0057                    VDAC51CR0:		equ 57h			; V DAC5 control 1				(RW)
   661  00A8                    ADC_CR0:		equ A8h			; ADC control 0					(RW)
   662  00A9                    ADC_CR1:		equ A9h			; ADC control 1					(RW)
   663  00AA                    ADC_CR2:		equ AAh			; ADC control 2					(RW)
   664  00AB                    ADC_CR3TRIM:	equ ABh			; ADC control 3					(RW)
   665  00AC                    ADC_CR4:		equ ACh			; ADC control 4					(RW)
   666  00E7                    VDAC_TRIM:		equ E7h			; V DAC trim					(RW)
   667                          
   668                          ;------------------------------------------------------
   669                          ;  Neon Current Sense CMP Registers
   670                          ;------------------------------------------------------
   671  0050                    CMP0CR1:		equ 50h			; CMP0 control 1				(RW)
   672  0051                    CMP0CR2:		equ 51h			; CMP0 control 2				(RW)
   673  0054                    CMP1CR1:		equ 54h			; CMP1 control 1				(RW)
   674  0055                    CMP1CR2:		equ 55h			; CMP1 control 2				(RW)
   675  0058                    CSCMPCR0:		equ 58h			; CSCMP control 0				(RW)
   676  0059                    CSCMPGOEN:		equ 59h			; CSCMO global out enable		(RW)
   677  005A                    CSLUTCR0:		equ 5Ah			; CSLUT control 0				(RW)
   678  005B                    CMPCOLMUX:		equ 5Bh			; CMP Column Mux				(RW)
   679  005C                    CMPPWMCR:		equ 5Ch			; CMP PWM control				(RW)
   680  005D                    CMPFLTCR:		equ 5Dh			; CMP filter control			(RW)
   681  005E                    CMPCLK1:		equ 5Eh			; CMP clock 1					(RW)
   682  005F                    CMPCLK0:		equ 5Fh			; CMP clock 0					(RW)
   683                          
   684                          ;------------------------------------------------------
   685                          ;  Neon Real Time Clock Registers
   686                          ;------------------------------------------------------
   687  00A4                    RTCH:			equ A4h			; Real time current hour		(RW)
   688  00A5                    RTCM:			equ A5h			; Real time current minute		(RW)
   689  00A6                    RTCS:			equ A6h			; Real time current second		(RW)
   690  00A7                    RTCCR:			equ A7h			; Real time clock control		(RW)
   691                          
   692                          ;------------------------------------------------------
   693                          ;  Analog MUX Config Registers
   694                          ;------------------------------------------------------
   695                          
   696  006A                    AMUX_CFG1:			equ 6Ah  ; Analog MUX Configuration 1
   697  0020                    AMUX_CFG1_GOINVR:	equ 20h  ;
   698  0010                    AMUX_CFG1_GOINVL:  	equ 10h	 ;
   699  000C                    AMUX_CFG1_AMUXMODR:	equ 0Ch	 ;
   700  0003                    AMUX_CFG1_AMUXMODL:	equ 03h	 ;
   701                          
   702                          ;;=============================================================================
   703                          ;;      M8C System Macros
   704                          ;;  These macros should be used when their functions are needed.
   705                          ;;=============================================================================
   706                          
   707                          ;----------------------------------------------------
   708                          ;  Swapping Register Banks
   709                          ;----------------------------------------------------
   710                              macro M8C_SetBank0
   711                              and   F, ~FLAG_XIO_MASK
   712  0000'                       endm
   713                          
   714                              macro M8C_SetBank1
   715                              or    F, FLAG_XIO_MASK
   716  0000'                       endm
   717                          
   718                          ;----------------------------------------------------
   719                          ;  Global Interrupt Enable/Disable
   720                          ;----------------------------------------------------
   721                              macro M8C_EnableGInt
   722                              or    F, FLAG_GLOBAL_IE
   723  0000'                       endm
   724                          
   725                              macro M8C_DisableGInt
   726                              and   F, ~FLAG_GLOBAL_IE
   727  0000'                       endm
   728                          
   729                          ;----------------------------------------------------
   730                          ;  Enable/Disable Interrupt Mask
   731                          ;
   732                          ;  Use the following macros to enable/disable
   733                          ;  bits in the Interrupt mask registers,
   734                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   735                          ;
   736                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   737                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   738                          ;
   739                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   740                          ;        and MASK is the bit set to enable or disable
   741                          ;----------------------------------------------------
   742                          ; Disable Interrupt Bit Mask(s)
   743                              macro M8C_DisableIntMask
   744                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   745  0000'                       endm
   746                          
   747                          ; Enable Interrupt Bit Mask(s)
   748                              macro M8C_EnableIntMask
   749                              or    reg[@0], @1               ; enable specified interrupt enable bit
   750  0000'                       endm
   751                          
   752                          ;----------------------------------------------------
   753                          ;  Clear Posted Interrupt Flag Mask
   754                          ;
   755                          ;  Use the following macros to clear the
   756                          ;  bits in the Interrupt Clear registers,
   757                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   758                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   759                          ;
   760                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   761                          ;        and MASK is the bit set to enable or disable
   762                          ;----------------------------------------------------
   763                              macro M8C_ClearIntFlag
   764                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   765  0000'                       endm
   766                          
   767                          ;----------------------------------------------------
   768                          ;  Power-On Reset & WatchDog Timer Functions
   769                          ;----------------------------------------------------
   770                              macro M8C_EnableWatchDog
   771                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   772  0000'                       endm
   773                          
   774                              macro M8C_ClearWDT
   775                              mov   reg[RES_WDT], 00h
   776  0000'                       endm
   777                          
   778                              macro M8C_ClearWDTAndSleep
   779                              mov   reg[RES_WDT], 38h
   780  0000'                       endm
   781                          
   782                          ;----------------------------------------------------
   783                          ;  Sleep, CPU Stop & Software Reset
   784                          ;----------------------------------------------------
   785                              macro M8C_Sleep
   786                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   787                              ; The next instruction to be executed depends on the state of the
   788                              ; various interrupt enable bits. If some interrupts are enabled
   789                              ; and the global interrupts are disabled, the next instruction will
   790                              ; be the one that follows the invocation of this macro. If global
   791                              ; interrupts are also enabled then the next instruction will be
   792                              ; from the interrupt vector table. If no interrupts are enabled
   793                              ; then the CPU sleeps forever.
   794  0000'                       endm
   795                          
   796                              macro M8C_Stop
   797                              ; In general, you probably don't want to do this, but here's how:
   798                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   799                              ; Next instruction to be executed is located in the interrupt
   800                              ; vector table entry for Power-On Reset.
   801  0000'                       endm
   802                          
   803                              macro M8C_Reset
   804                              ; Restore CPU to the power-on reset state.
   805                              mov A, 0
   806                              SSC
   807                              ; Next non-supervisor instruction will be at interrupt vector 0.
   808  0000'                       endm
   809                          
   810                          ;----------------------------------------------------
   811                          ; ImageCraft Code Compressor Actions
   812                          ;----------------------------------------------------
   813                              ; Suspend Code Compressor
   814                              ; Must not span a RET or RETI instruction
   815                              ; without resuming code compression
   816                              macro Suspend_CodeCompressor
   817                              or   F, 0
   818  0000'                       endm
   819                          
   820                              ; Resume Code Compression
   821                              macro Resume_CodeCompressor
   822                              add  SP, 0
   823                              endm
      + 0000'                   
      + 0000'                   ; end of file m8c.inc
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;
     4                          ;;       FILENAME: Memory.inc
     5                          ;;
     6                          ;;    DESCRIPTION: Memory Model and Stack Parameter Definitions for 
     7                          ;;                 CY8C22045 PSoC devices.
     8                          ;;
     9                          ;;  LAST MODIFIED: August 17, 2004
    10                          ;;
    11                          ;;-----------------------------------------------------------------------------
    12                          ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
    13                          ;;*****************************************************************************
    14                          ;;*****************************************************************************
    15                          ;
    16                          ;
    17                          ;  ******** Define Memory Model and Stack parameters ********
    18                          ;
    19  0001                    IMAGECRAFT: equ 1   
    20  0002                    HITECH: equ 2   
    21  0002                    TOOLCHAIN: equ HITECH   
    22  0001                    SYSTEM_LARGE_MEMORY_MODEL: equ 1   
    23  0000                    SYSTEM_SMALL_MEMORY_MODEL: equ 0   
    24  0003                    SYSTEM_STACK_PAGE: equ 3   
    25  0000                    SYSTEM_STACK_PAGE_OFFSET: equ 0   
    26  0002                    SYSTEM_TOOLS: equ 2   
    27  0000                    SYSTEM_IDXPG_TRACKS_STK_PP: equ 0   
    28  0001                    SYSTEM_IDXPG_TRACKS_IDX_PP: equ 1   
    29  0000                    SYSTEM_MULTIPAGE_STACK: equ 0 
    30                          
    31                          
    32                          ;  ******* Function Class Definitions *******
    33                          ;
    34                          ;  These definitions are used to describe RAM access patterns. They provide
    35                          ;  documentation and they control prologue and epilogue macros that perform
    36                          ;  the necessary housekeeping functions for large memory model devices like
    37                          ;  the CY8C22045.
    38                          
    39  0001                    RAM_USE_CLASS_1:               equ 1   ; PUSH, POP & I/O access
    40  0002                    RAM_USE_CLASS_2:               equ 2   ; Indexed address mode on stack page
    41  0004                    RAM_USE_CLASS_3:               equ 4   ; Indexed address mode to any page
    42  0008                    RAM_USE_CLASS_4:               equ 8   ; Direct/Indirect address mode access
    43                          
    44                          ; ******* Hi Tech Specific *******
    45                          ; Turn on the expansion of all macros by default
    46                          IF (TOOLCHAIN & HITECH)
    47                          OPT EXPAND
    48                          ENDIF
    49                          ; ******* Page Pointer Manipulation Macros *******
    50                          ;
    51                          ;  ******* Page Pointer Manipulation Macros *******
    52                          ;
    53                          ;  Most of the following macros are conditionally compiled so they only
    54                          ;  produce code if the large memory model is selected.
    55                          
    56                             ;-----------------------------------------------
    57                             ;  Set Stack Page Macro
    58                             ;-----------------------------------------------
    59                             ;
    60                             ;  DESC: Modify STK_PP in the large or small memory Models.
    61                             ;
    62                             ; INPUT: Constant (e.g., SYSTEM_STACK_PAGE) that specifies the RAM page on
    63                             ;        which stack operations like PUSH and POP store and retrieve their
    64                             ;        data
    65                             ;
    66                             ;  COST: 8 instruction cycles (in LMM only)
    67                          
    68                             macro RAM_SETPAGE_STK( PG_NUMBER )
    69                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    70                                mov reg[STK_PP], @PG_NUMBER
    71                             ENDIF
    72  0000'                      endm
    73                          
    74                             ;-----------------------------------------------
    75                             ;  Set Current Page Macro
    76                             ;-----------------------------------------------
    77                             ;
    78                             ;  DESC: Modify CUR_PP in the large or small memory Models.
    79                             ;
    80                             ; INPUT: Constant value (e.g., >bFoo) for the RAM page number used in
    81                             ;        calculation of effective direct-mode address operands.
    82                             ;
    83                             ;  COST: 8 instruction cycles (in LMM only)
    84                          
    85                             macro RAM_SETPAGE_CUR( PG_NUMBER )
    86                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    87                                mov reg[CUR_PP], @PG_NUMBER
    88                             ENDIF
    89  0000'                      endm
    90                          
    91                             ;-----------------------------------------------
    92                             ;  Set Index Page Macro
    93                             ;-----------------------------------------------
    94                             ;
    95                             ;  DESC: Modify IDX_PP in the large or small emory Models.
    96                             ;
    97                             ; INPUT: Constant value (e.g., >caFoo) for the RAM page number used in
    98                             ;         calculation of effective index-mode address operands.
    99                             ;
   100                             ;  COST: 8 instruction cycles (in LMM only)
   101                          
   102                             macro RAM_SETPAGE_IDX( PG_NUMBER )
   103                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   104                                mov reg[IDX_PP], @PG_NUMBER
   105                             ENDIF
   106  0000'                      endm
   107                          
   108                             ;-----------------------------------------------
   109                             ;  Set MVI Read Page Macro
   110                             ;-----------------------------------------------
   111                             ;
   112                             ;  DESC: Modify MVR_PP in the large or small memory Models.
   113                             ;
   114                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   115                             ;        calculation of indirect address operands used in the
   116                             ;        "mvi A, [pFoo]" instructions.
   117                             ;
   118                             ;  COST: 8 instruction cycles (in LMM only)
   119                          
   120                             macro RAM_SETPAGE_MVR( PG_NUMBER )
   121                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   122                                mov reg[MVR_PP], @PG_NUMBER
   123                             ENDIF
   124  0000'                      endm
   125                          
   126                             ;-----------------------------------------------
   127                             ;  Set MVI Write Page Macro
   128                             ;-----------------------------------------------
   129                             ;
   130                             ;  DESC: Modify MVW_PP in the large or small memory Models.
   131                             ;
   132                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   133                             ;        calculation of indirect address operands used in the
   134                             ;        "mvi [pFoo], A" instructions.
   135                             ;
   136                             ;  COST: 8 instruction cycles (in LMM only)
   137                          
   138                             macro RAM_SETPAGE_MVW( PG_NUMBER )
   139                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   140                                mov reg[MVW_PP], @PG_NUMBER
   141                             ENDIF
   142  0000'                      endm
   143                          
   144                             ;-----------------------------------------------
   145                             ;  Force Index Page Pointer to Stack Page
   146                             ;-----------------------------------------------
   147                             ;
   148                             ;  DESC: Map index-mode operands onto the stack page by modifying IDX_PP.
   149                             ;        See also RAM_LOCK_INDEX_TO_STACKPAGE.
   150                             ;
   151                             ; INPUT: None
   152                             ;
   153                             ;  COST: 8 instruction cycles (in LMM only)
   154                          
   155                             macro RAM_SETPAGE_IDX2STK
   156                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   157                                IF ( SYSTEM_MULTIPAGE_STACK )
   158                                   mov   A, reg[STK_PP]
   159                                   mov   reg[IDX_PP], A
   160                                ELSE
   161                                   RAM_SETPAGE_IDX SYSTEM_STACK_PAGE
   162                                ENDIF
   163                             ENDIF
   164  0000'                      endm
   165                          
   166                             ;-----------------------------------------------
   167                             ;  Change Memory Mode
   168                             ;-----------------------------------------------
   169                             ;
   170                             ;  DESC: Modify FLAG_PAGEMODE bits in the large and small memory Models.
   171                             ;
   172                             ; INPUT: Constant value for PGMODE bitfield of CPU Flag register, F.
   173                             ;        See FLAG_PGMODE_{x} constants in M8C.INC.
   174                             ;
   175                             ;  COST: 8 instruction cycles (in LMM only)
   176                          
   177                             macro RAM_CHANGE_PAGE_MODE( MODE )
   178                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   179                                and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
   180                                or    F,  FLAG_PGMODE_MASK & @MODE
   181                             ENDIF
   182  0000'                      endm
   183                          
   184                             ;-----------------------------------------------
   185                             ;  Set Large Memory Model Native Paging Mode
   186                             ;-----------------------------------------------
   187                             ;
   188                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   189                             ;        paging mode *IFF* a simple "OR" is guaranteed to work---for
   190                             ;        example, in an ISR, when the PGMODE bits have been cleared
   191                             ;        to zero. If a simple "OR" is not guaranteed to work, use
   192                             ;        the slower RAM_RESTORE_NATIVE_PAGING instead.
   193                             ;
   194                             ; INPUT: none
   195                             ;
   196                             ;  COST: 4 instruction cycles (in LMM only)
   197                          
   198                             macro RAM_SET_NATIVE_PAGING
   199                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   200                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   201                                or    F,  FLAG_PGMODE_11b            ; LMM w/ IndexPage<==>StackPage
   202                             ENDIF ;  PGMODE LOCKED
   203                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   204                                or    F,  FLAG_PGMODE_10b            ; LMM with independent IndexPage
   205                             ENDIF ; PGMODE FREE
   206                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   207  0000'                      endm
   208                          
   209                             ;-----------------------------------------------
   210                             ; Restore Large Memory Model Native Paging Mode
   211                             ;-----------------------------------------------
   212                             ;
   213                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   214                             ;        paging mode. Always works because it clears the PGMODE bits
   215                             ;        before OR-ing in the new ones. See RAM_RESTORE_NATIVE_PAGING
   216                             ;        for a faster method.
   217                             ;
   218                             ; INPUT: none
   219                             ;
   220                             ;  COST: 8 instruction cycles (in LMM only)
   221                          
   222                             macro RAM_RESTORE_NATIVE_PAGING
   223                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   224                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   225                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_11b ; LMM w/ IndexPage<==>StackPage
   226                             ENDIF ;  PGMODE LOCKED
   227                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   228                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b ; LMM with independent IndexPage
   229                             ENDIF ; PGMODE FREE
   230                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   231  0000'                      endm
   232                          
   233                             ;-----------------------------------------------
   234                             ; Force indexed addr mode operands to Stack Pg
   235                             ;-----------------------------------------------
   236                             ;
   237                             ;  DESC: Force instructions that use indexed address mode to reference the
   238                             ;        stack page (as defined by STK_PP). This macro sets the "Indexed
   239                             ;        Stack Mode" bit (LSB) of the PGMODE bit field in the CPU Flag
   240                             ;        register, F. (See also RAM_SETPAGE_IDX2STK, above.)
   241                             ;
   242                             ; INPUT: none
   243                             ;
   244                             ;  COST: 4 instruction cycles (in LMM only)
   245                          
   246                             macro RAM_X_POINTS_TO_STACKPAGE
   247                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   248                                or   F, FLAG_PGMODE_01b
   249                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   250  0000'                      endm
   251                          
   252                             ;-----------------------------------------------
   253                             ;  Force indexed addr mode operands to Index Pg
   254                             ;-----------------------------------------------
   255                             ;
   256                             ;  DESC: Permit instructions that use indexed address mode to reference page
   257                             ;        zero or the page pointed to by the IDX_PP register, depending on the
   258                             ;        setting of the MSb (or "Direct Page Mode" bit) of the PGMODE bits
   259                             ;        in the CPU Flag register, F. (This macro clears the PGMODE LSb.)
   260                             ;
   261                             ; INPUT: none
   262                             ;
   263                             ;  COST: 4 instruction cycles (in LMM only)
   264                          
   265                             macro RAM_X_POINTS_TO_INDEXPAGE
   266                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   267                                and  F, ~FLAG_PGMODE_01b
   268                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   269  0000'                      endm
   270                          
   271                             ;-----------------------------------------------
   272                             ;  Function Prologue
   273                             ;-----------------------------------------------
   274                             ;
   275                             ;  Prologue for functions that run in the LMM and SMM.
   276                             ;
   277                          
   278                             macro RAM_PROLOGUE( ACTUAL_CLASS )
   279                          
   280                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   281                             ; Nothing to do
   282                             ENDIF ; RAM_USE_CLASS_1
   283                          
   284                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   285                                IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   286                                   RAM_X_POINTS_TO_STACKPAGE         ; exit native paging mode!
   287                                ENDIF
   288                             ENDIF ; RAM_USE_CLASS_2
   289                          
   290                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   291                                IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   292                                   RAM_X_POINTS_TO_INDEXPAGE         ; exit native paging mode!
   293                                ENDIF
   294                             ENDIF ; RAM_USE_CLASS_3
   295                          
   296                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   297                             ; Nothing to do
   298                             ENDIF ; RAM_USE_CLASS_4
   299                          
   300  0000'                      endm
   301                          
   302                             ;-----------------------------------------------
   303                             ;  Function Epilogue
   304                             ;-----------------------------------------------
   305                             ;
   306                             ;  Prologue for functions that run in the LMM and SMM.
   307                             ;
   308                          
   309                             macro RAM_EPILOGUE( ACTUAL_CLASS )
   310                          
   311                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   312                             ; Nothing to do
   313                             ENDIF ; RAM_USE_CLASS_1
   314                          
   315                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   316                                RAM_RESTORE_NATIVE_PAGING
   317                             ENDIF ; RAM_USE_CLASS_2
   318                          
   319                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   320                                RAM_RESTORE_NATIVE_PAGING
   321                             ENDIF ; RAM_USE_CLASS_3
   322                          
   323                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   324                             ; Nothing to do
   325                             ENDIF ; RAM_USE_CLASS_4
   326                          
   327  0000'                      endm
   328                          
   329                             ;-----------------------------------------------
   330                             ;  Preserve Register
   331                             ;-----------------------------------------------
   332                             ;
   333                             ;  DESC: Preserve a register value on the stack
   334                             ;
   335                             ; INPUT: Name or address of register in I/O Space
   336                             ;        The I/O bank is an implicit parameter. That is, this function will
   337                             ;        Access the I/O bank currently specified by the CPU Flag register.
   338                             ;
   339                             ;  USES: CPU 'A' register
   340                             ;
   341                             ;  COST: 9 instruction cycles
   342                          
   343                             macro REG_PRESERVE( IOReg )
   344                             mov   A, reg[ @IOReg ]
   345                             push  A
   346  0000'                      endm
   347                          
   348                             ;-----------------------------------------------
   349                             ;  Restore Register
   350                             ;-----------------------------------------------
   351                             ;
   352                             ;  DESC: Restore a register value from the stack
   353                             ;
   354                             ; INPUT: Name or address of register in I/O Space
   355                             ;        The I/O bank is an implicit parameter. That is, this function will
   356                             ;        Access the I/O bank currently specified by the CPU Flag register.
   357                             ;
   358                             ;  USES: CPU 'A' register
   359                             ;
   360                             ;  COST: 10 instruction cycles
   361                          
   362                             macro REG_RESTORE( IOReg )
   363                             pop   A
   364                             mov   reg[ @IOReg ], A
   365  0000'                      endm
   366                          
   367                             ;-----------------------------------------------
   368                             ;  Preserve Volatile Page Pointer Registers
   369                             ;-----------------------------------------------
   370                             ;
   371                             ;  DESC: Invoked by ISRs before switching to the LMM mode and calling
   372                             ;        functions that require on it.
   373                             ;
   374                             ; INPUT: none
   375                             ;
   376                             ;  USES: CPU 'A' register
   377                             ;
   378                             ;  COST: 45 instruction cycles (in LMM only)
   379                          
   380                             macro ISR_PRESERVE_PAGE_POINTERS
   381                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   382                                REG_PRESERVE CUR_PP
   383                                REG_PRESERVE IDX_PP
   384                                REG_PRESERVE MVR_PP
   385                                REG_PRESERVE MVW_PP
   386                             ENDIF
   387  0000'                      endm
   388                          
   389                             ;-----------------------------------------------
   390                             ;  Restore Volatile Page Pointer Registers
   391                             ;-----------------------------------------------
   392                             ;
   393                             ;  DESC: Undo for RAM_PRESERVE_PAGE_POINTERS macro. Invoked by ISRs after
   394                             ;        calling functions that run in the LMM mode and before executing
   395                             ;        the RETI instruction.
   396                             ;
   397                             ; INPUT: none
   398                             ;
   399                             ;  USES: CPU 'A' register
   400                             ;
   401                             ;  COST: 50 instruction cycles (in LMM only)
   402                          
   403                             macro ISR_RESTORE_PAGE_POINTERS
   404                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   405                                REG_RESTORE MVW_PP
   406                                REG_RESTORE MVR_PP
   407                                REG_RESTORE IDX_PP
   408                                REG_RESTORE CUR_PP
   409                             ENDIF
   410                             endm
      + 0000'                   
      + 0000'                   ; end of file Memory.inc
      + 0000'                   ;;*****************************************************************************
;;******************
      +                         ***********************************************************
;;  FILENAME: Timer16.inc
;;   Version: 
      +                         2.6, Updated on 2013/5/19 at 10:44:39
;;  Generated by PSoC Designer 5.4.2946
;;
;;  DESCRIPTION: As
      +                         sembler declarations for the Timer16 user module interface
;;---------------------------------------
      +                         --------------------------------------
;;  Copyright (c) Cypress Semiconductor 2013. All Rights Rese
      +                         rved.
;;*****************************************************************************
;;************
      +                         *****************************************************************
   824                          
   825                          ; end of file m8c.inc
    29  00C0                    FLAG_PGMODE_MASK:  equ 0C0h     ; Paging control for > 256 bytes of RAM
    30  0000                    FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
    31  0040                    FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
    32  0080                    FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
    33  00C0                    FLAG_PGMODE_3:     equ 0C0h       ; Direct to CUR_PP page, indexed to STK_PP page
    34  0000                    FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
    35  0040                    FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
    36  0080                    FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
    37  00C0                    FLAG_PGMODE_11b:   equ 0C0h       ; Same as PGMODE_3
    38  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    39  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    40  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    41  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    42  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    43                          
    44                          
    45                          ;;=============================================================================
    46                          ;;      Register Space, Bank 0
    47                          ;;=============================================================================
    48                          
    49                          ;------------------------------------------------
    50                          ;  Port Registers
    51                          ;  Note: Also see this address range in Bank 1.
    52                          ;------------------------------------------------
    53                          ; Port 0
    54  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    55  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    56  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    57  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    58                          ; Port 1
    59  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    60  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    61  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    62  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    63                          ; Port 2
    64  0008                    PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
    65  0009                    PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
    66  000A                    PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
    67  000B                    PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
    68                          ; Port 3
    69  000C                    PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
    70  000D                    PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
    71  000E                    PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
    72  000F                    PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
    73                          ; Port 4
    74  0010                    PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
    75  0011                    PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
    76  0012                    PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
    77  0013                    PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
    78                          
    79                          ;------------------------------------------------
    80                          ;  Digital PSoC(tm) block Registers
    81                          ;  Note: Also see this address range in Bank 1.
    82                          ;------------------------------------------------
    83                          ; Digital PSoC block 00, Basic Type C
    84  0020                    DBC00DR0:     equ 20h          ; data register 0                          (#)
    85  0021                    DBC00DR1:     equ 21h          ; data register 1                          (W)
    86  0022                    DBC00DR2:     equ 22h          ; data register 2                          (RW)
    87  0023                    DBC00CR0:     equ 23h          ; control & status register 0              (#)
    88                          
    89                          ; Digital PSoC block 01, Basic Type C
    90  0024                    DBC01DR0:     equ 24h          ; data register 0                          (#)
    91  0025                    DBC01DR1:     equ 25h          ; data register 1                          (W)
    92  0026                    DBC01DR2:     equ 26h          ; data register 2                          (RW)
    93  0027                    DBC01CR0:     equ 27h          ; control & status register 0              (#)
    94                          
    95                          ; Digital PSoC block 02, Communications Type C
    96  0028                    DCC02DR0:     equ 28h          ; data register 0                          (#)
    97  0029                    DCC02DR1:     equ 29h          ; data register 1                          (W)
    98  002A                    DCC02DR2:     equ 2Ah          ; data register 2                          (RW)
    99  002B                    DCC02CR0:     equ 2Bh          ; control & status register 0              (#)
   100                          
   101                          ; Digital PSoC block 03, Communications Type C
   102  002C                    DCC03DR0:     equ 2Ch          ; data register 0                          (#)
   103  002D                    DCC03DR1:     equ 2Dh          ; data register 1                          (W)
   104  002E                    DCC03DR2:     equ 2Eh          ; data register 2                          (RW)
   105  002F                    DCC03CR0:     equ 2Fh          ; control & status register 0              (#)
   106                          
   107                          ; Digital PSoC block 10, Basic Type C
   108  0030                    DBC10DR0:     equ 30h          ; data register 0                          (#)
   109  0031                    DBC10DR1:     equ 31h          ; data register 1                          (W)
   110  0032                    DBC10DR2:     equ 32h          ; data register 2                          (RW)
   111  0033                    DBC10CR0:     equ 33h          ; control & status register 0              (#)
   112                          
   113                          ; Digital PSoC block 11, Basic Type C
   114  0034                    DBC11DR0:     equ 34h          ; data register 0                          (#)
   115  0035                    DBC11DR1:     equ 35h          ; data register 1                          (W)
   116  0036                    DBC11DR2:     equ 36h          ; data register 2                          (RW)
   117  0037                    DBC11CR0:     equ 37h          ; control & status register 0              (#)
   118                          
   119                          ; Digital PSoC block 12, Communications Type C
   120  0038                    DCC12DR0:     equ 38h          ; data register 0                          (#)
   121  0039                    DCC12DR1:     equ 39h          ; data register 1                          (W)
   122  003A                    DCC12DR2:     equ 3Ah          ; data register 2                          (RW)
   123  003B                    DCC12CR0:     equ 3Bh          ; control & status register 0              (#)
   124                          
   125                          ; Digital PSoC block 13, Communications Type C
   126  003C                    DCC13DR0:     equ 3Ch          ; data register 0                          (#)
   127  003D                    DCC13DR1:     equ 3Dh          ; data register 1                          (W)
   128  003E                    DCC13DR2:     equ 3Eh          ; data register 2                          (RW)
   129  003F                    DCC13CR0:     equ 3Fh          ; control & status register 0              (#)
   130                          
   131                          ;-------------------------------------
   132                          ;  Analog Control Registers
   133                          ;-------------------------------------
   134  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
   135  00C0                    AMX_IN_ACI3:          equ C0h    ; MASK: column 3 input mux
   136  0030                    AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
   137  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
   138  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
   139                          
   140  0061                    AMUX_CFG:      equ 61h          ; Analog MUX Configuration
   141  0030                    AMUX_CFG_INTCAP:       equ 30h    ;
   142  000E                    AMUX_CFG_MUXCLK:  	  equ 0Eh	 ;
   143  0001                    AMUX_CFG_EN:		  	  equ 01h	 ;
   144                          
   145                          ; old declarations DO NOT USE
   146  0061                    AMUXCFG:      equ 61h          ; Analog MUX Configuration
   147  0030                    AMUXCFG_INTCAP:       equ 30h    ;
   148  000E                    AMUXCFG_MUXCLK:  	  equ 0Eh	 ;
   149  0001                    AMUXCFG_EN:		  	  equ 01h	 ;
   150                          
   151  0062                    PWM_CR:       equ 62h          ; Pulse-Width Modulator Control
   152  0038                    PWM_CR_HIGH:          equ 38h    ; MASK: PWM high time
   153  0006                    PWM_CR_LOW:           equ 06h	 ; MASK: PWM low time
   154  0001                    PWM_CR_EN:            equ 01h	 ; MASK: Enable/Disable PWM function
   155                          
   156  0063                    ARF_CR:       equ 63h          ; Analog Reference Control
   157                          
   158  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus Register           (#)
   159  0080                    CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
   160  0040                    CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
   161  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
   162  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
   163  0008                    CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
   164  0004                    CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
   165  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
   166  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   167                          
   168  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   169  0020                    CMP_CR1_CLDIS1:       equ 20h    ; MASK: Column 1 comparator output latch
   170  0010                    CMP_CR1_CLDIS0:	      equ 10h    ; MASK: Column 0 comparator output latch
   171                          
   172  0068                    ADC0_CR:      equ 68h          ; Analog Column 0 Configuration
   173  0080                    ADC0_CR_CMPST:        equ 80h    ;
   174  0040                    ADC0_CR_LOREN:        equ 40h    ;
   175  0020                    ADC0_CR_SHEN:         equ 20h    ;
   176  0008                    ADC0_CR_CBSRC:        equ 08h    ;
   177  0004                    ADC0_CR_ADCM:         equ 04h    ;
   178  0001                    ADC0_CR_EN:	          equ 01h    ;
   179                          
   180  0069                    ADC1_CR:      equ 69h          ; Analog Column 1 Configuration
   181  0080                    ADC1_CR_CMPST:        equ 80h    ;
   182  0040                    ADC1_CR_LOREN:        equ 40h    ;
   183  0020                    ADC1_CR_SHEN:         equ 20h    ;
   184  0008                    ADC1_CR_CBSRC:        equ 08h    ;
   185  0004                    ADC1_CR_ADCM:         equ 04h    ;
   186  0001                    ADC1_CR_EN:	          equ 01h    ;
   187                          
   188                          ; Continuous Time PSoC block Type E Row 0 Col 0
   189  0072                    ACE00CR1:     equ 72h          ; Control register 1                       (RW)
   190  0073                    ACE00CR2:     equ 73h          ; Control register 2                       (RW)
   191                          
   192                          ; Continuous Time PSoC block Type E Row 0 Col 1
   193  0076                    ACE01CR1:     equ 76h          ; Control register 1                       (RW)
   194  0077                    ACE01CR2:     equ 77h          ; Control register 2                       (RW)
   195                          
   196                          ; Switched Cap PSoC blockType E Row 1 Col 0
   197  0080                    ASE10CR0:     equ 80h          ; Control register 0                       (RW)
   198                          
   199                          ; Switched Cap PSoC blockType E Row 1 Col 1
   200  0084                    ASE11CR0:     equ 84h          ; Control register 0                       (RW)
   201                          
   202                          ;-----------------------------------------------
   203                          ;  Global General Purpose Data Registers
   204                          ;-----------------------------------------------
   205  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   206  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   207  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   208  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   209                          
   210                          ;------------------------------------------------
   211                          ;  Row Digital Interconnects
   212                          ;
   213                          ;  Note: the following registers are mapped into
   214                          ;  both register bank 0 AND register bank 1.
   215                          ;------------------------------------------------
   216                          
   217  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   218  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   219  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   220  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   221  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   222  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   223  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   224                          
   225  00B8                    RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
   226  00B9                    RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
   227  00BA                    RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
   228  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   229  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   230  00BD                    RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
   231  00BE                    RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
   232                          
   233                          ;-----------------------------------------------
   234                          ;  Ram Page Pointers
   235                          ;-----------------------------------------------
   236  00D0                    CUR_PP:      equ 0D0h           ; Current   Page Pointer
   237  00D1                    STK_PP:      equ 0D1h           ; Stack     Page Pointer
   238  00D3                    IDX_PP:      equ 0D3h           ; Index     Page Pointer
   239  00D4                    MVR_PP:      equ 0D4h           ; MVI Read  Page Pointer
   240  00D5                    MVW_PP:      equ 0D5h           ; MVI Write Page Pointer
   241                          
   242                          ;------------------------------------------------
   243                          ;  I2C Configuration Registers
   244                          ;------------------------------------------------
   245  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   246  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   247  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   248  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   249  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   250  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   251  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   252  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   253  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   254  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   255                          
   256  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   257  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   258  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   259  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   260  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   261  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   262  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   263  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   264  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   265                          
   266  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   267                          
   268  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   269  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   270  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   271  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   272  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   273                          
   274                          ;------------------------------------------------
   275                          ;  System and Global Resource Registers
   276                          ;------------------------------------------------
   277  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   278                                                         ; Use INT_MSK0 bit field masks
   279  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   280                                                         ; Use INT_MSK1 bit field masks
   281  00DC                    INT_CLR2:     equ 0DCh          ; Interrupt Clear Register 2               (RW)
   282                                                         ; Use INT_MSK2 bit field masks
   283  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   284                                                         ; Use INT_MSK3 bit field masks
   285                          
   286  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   287  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   288  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   289                          
   290  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   291  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   292  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   293  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   294  0010                    INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
   295  0008                    INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
   296  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   297  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   298  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   299                          
   300  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   301  0080                    INT_MSK1_DCC13:            equ 80h ; MASK: enable/disable DCC13 block interrupt
   302  0040                    INT_MSK1_DCC12:            equ 40h ; MASK: enable/disable DCC12 block interrupt
   303  0020                    INT_MSK1_DBC11:            equ 20h ; MASK: enable/disable DBC11 block interrupt
   304  0010                    INT_MSK1_DBC10:            equ 10h ; MASK: enable/disable DBC10 block interrupt
   305  0008                    INT_MSK1_DCC03:            equ 08h ; MASK: enable/disable DCC03 block interrupt
   306  0004                    INT_MSK1_DCC02:            equ 04h ; MASK: enable/disable DCC02 block interrupt
   307  0002                    INT_MSK1_DBC01:            equ 02h ; MASK: enable/disable DBC01 block interrupt
   308  0001                    INT_MSK1_DBC00:            equ 01h ; MASK: enable/disable DBC00 block interrupt
   309                          
   310  00DF                    INT_MSK2:     equ DFh			; Custom block Mask Register			   (RW)
   311  0010                    INT_MSK2_SARADC:           equ 10h ; MASK: enable/disable SARADC block interrupt
   312  0020                    INT_MSK2_CSD0:             equ 20h ; MASK: enable/disable CSD0 block interrupt
   313  0040                    INT_MSK2_CSD1:             equ 40h ; MASK: enable/disable CSD1 block interrupt
   314  0080                    INT_MSK2_RTC:              equ 80h ; MASK: enable/disable RTC block interrupt
   315                          
   316  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   317  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   318                          
   319                          ;------------------------------------------------------
   320                          ;  MAC Registers
   321                          ;------------------------------------------------------
   322                          
   323  00E8                    MUL0_X:       equ 0E8h          ; Multiply Input X Register                (W)
   324  00E9                    MUL0_Y:       equ 0E9h          ; Multiply Input Y Register                (W)
   325  00EA                    MUL0_DH:      equ 0EAh          ; Multiply Result High Byte Register       (R)
   326  00EB                    MUL0_DL:      equ 0EBh          ; Multiply Result Low Byte Register        (R)
   327                          
   328  00EC                    ACC0_DR1:     equ 0ECh          ; Accumulator Data Register 1              (RW)
   329  00ED                    ACC0_DR0:     equ 0EDh          ; Accumulator Data Register 0              (RW)
   330  00EE                    ACC0_DR3:     equ 0EEh          ; Accumulator Data Register 3              (RW)
   331  00EF                    ACC0_DR2:     equ 0EFh          ; Accumulator Data Register 2              (RW)
   332                          
   333                          ; DECIMATOR Control Registers
   334  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   335  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   336                          
   337                          ;------------------------------------------------------
   338                          ;  System Status and Control Registers
   339                          ;
   340                          ;  Note: The following registers are mapped into both
   341                          ;        register bank 0 AND register bank 1.
   342                          ;------------------------------------------------------
   343  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   344                                                             ; Use FLAG_ masks defined at top of file
   345                          
   346  00FD                    DAC_D:        equ 0FDh		   ; DAC Data Register                        (RW)
   347                          
   348  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   349  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: flag, Internal Reset Status bit
   350  0010                    CPU_SCR1_SLIMO:         equ 10h	   ; MASK: Slow IMO (internal main osc) enable
   351  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   352  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   353  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   354                          
   355  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   356  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   357  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   358  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   359  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   360  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   361                          
   362                          ;------------------------------------------------------
   363                          ;  Neon Capsense Digital Control Registers
   364                          ;------------------------------------------------------
   365  0050                    CSD0_DR0_L:				equ 50h		; Capsense 0 data low 0				(RW)
   366  0054                    CSD0_DR0_H:				equ 54h		; Capsense 0 data high 0			(RW)
   367  0058                    CSD1_DR0_L:				equ 58h		; Capsense 1 data low 0				(RW)
   368  005C                    CSD1_DR0_H:				equ 5Ch		; Capsense 1 data high 0			(RW)
   369  0051                    CSD0_DR1_L:				equ 51h		; Capsense 0 data low 1				(RW)
   370  0055                    CSD0_DR1_H:				equ 55h		; Capsense 0 data high 1			(RW)
   371  0059                    CSD1_DR1_L:				equ 59h		; Capsense 1 data low 1				(RW)
   372  005D                    CSD1_DR1_H:				equ 5Dh		; Capsense 1 data high 1			(RW)
   373  0052                    CSD0_CNT_L:				equ 52h		; Capsense 0 counter low			(RW)
   374  0056                    CSD0_CNT_H:				equ 56h		; Capsense 0 counter high			(RW)
   375  005A                    CSD1_CNT_L:				equ 5Ah		; Capsense 1 counter low			(RW)
   376  005E                    CSD1_CNT_H:				equ	5Eh		; Capsense 1 counter high			(RW)
   377  0053                    CSD0_CR0:				equ 53h		; Capsense 0 control 0				(RW)
   378  005B                    CSD1_CR0:				equ 5Bh		; Capsense 1 control 0				(RW)
   379  0057                    CSD0_CR1:				equ 57h		; Capsense 0 control 1				(RW)
   380  005F                    CSD1_CR1:				equ 5Fh		; Capsense 1 control 1				(RW)
   381                          
   382                          ;------------------------------------------------------
   383                          ;  Neon Analog Registers
   384                          ;------------------------------------------------------
   385  0065                    ASY_CR:					equ 65h		; Analog Synchronization Control	(RW)
   386  006A                    ADC_DH:					equ 6Ah		; ADC data high						(RW)
   387  006B                    ADC_DL:					equ 6Bh		; ADC data low						(RW)
   388  00C8                    PWMVREF0:				equ C8h		; PWM Voltage Reference 0			(RW)
   389  00C9                    PWMVREF1:				equ C9h		; PWM Voltage Reference 1			(RW)
   390  00CB                    PWMSRC:					equ CBh		; PWM Source						(RW)
   391  00CA                    IDACMODE:				equ CAh		; IDAC Mode							(RW)
   392  00FC                    IDACR_D:				equ FCh		; Analog Mux DAC data 0				(RW)
   393  00FD                    IDACL_D:				equ FDh		; Analog Mux DAC data 1				(RW)
   394                          
   395                          ;------------------------------------------------------
   396                          ;  Neon Digital Registers
   397                          ;------------------------------------------------------
   398  00B7                    RDI0DSM:				equ B7h		; Row Digital Interconnect input select 0	(RW)
   399  00BF                    RDI1DSM:				equ BFh		; Row Digital Interconnect input select 1	(RW)
   400                          
   401                          ;------------------------------------------------------
   402                          ;  Neon Test Registers
   403                          ;------------------------------------------------------
   404  00CC                    TSCR0:					equ CCh		; Tsource 0							(RW)
   405  00CD                    TSCMPH:					equ CDh		; TSCMP high						(RW)
   406  00CE                    TSCMPL:					equ CEh		; TSCMP low							(RW)
   407  00CF                    TSCR1:					equ CFh		; Tsource 1							(RW)
   408                          
   409                          ;;=============================================================================
   410                          ;;      Register Space, Bank 1
   411                          ;;=============================================================================
   412                          
   413                          ;------------------------------------------------
   414                          ;  Port Registers
   415                          ;  Note: Also see this address range in Bank 0.
   416                          ;------------------------------------------------
   417                          ; Port 0
   418  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   419  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   420  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   421  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   422                          
   423                          ; Port 1
   424  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   425  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   426  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   427  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   428                          
   429                          ; Port 2
   430  0008                    PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
   431  0009                    PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
   432  000A                    PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
   433  000B                    PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
   434                          
   435                          ; Port 3
   436  000C                    PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
   437  000D                    PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
   438  000E                    PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
   439  000F                    PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
   440                          
   441                          ; Port 4
   442  0010                    PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
   443  0011                    PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
   444  0012                    PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
   445  0013                    PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
   446                          
   447                          ;------------------------------------------------
   448                          ;  Digital PSoC(tm) block Registers
   449                          ;  Note: Also see this address range in Bank 0.
   450                          ;------------------------------------------------
   451                          
   452                          ; Digital PSoC block 00, Basic Type C
   453  0020                    DBC00FN:      equ 20h          ; Function Register                        (RW)
   454  0021                    DBC00IN:      equ 21h          ;    Input Register                        (RW)
   455  0022                    DBC00OU:      equ 22h          ;   Output Register                        (RW)
   456  0023                    DBC00CR1:     equ 23h          ;   control & status register 1            (RW)
   457                          
   458                          ; Digital PSoC block 01, Basic Type C
   459  0024                    DBC01FN:      equ 24h          ; Function Register                        (RW)
   460  0025                    DBC01IN:      equ 25h          ;    Input Register                        (RW)
   461  0026                    DBC01OU:      equ 26h          ;   Output Register                        (RW)
   462  0027                    DBC01CR1:     equ 27h          ;   control & status register 1            (RW)
   463                          
   464                          ; Digital PSoC block 02, Communications Type C
   465  0028                    DCC02FN:      equ 28h          ; Function Register                        (RW)
   466  0029                    DCC02IN:      equ 29h          ;    Input Register                        (RW)
   467  002A                    DCC02OU:      equ 2Ah          ;   Output Register                        (RW)
   468  002B                    DBC02CR1:     equ 2Bh          ;   control & status register 1            (RW)
   469                          
   470                          ; Digital PSoC block 03, Communications Type C
   471  002C                    DCC03FN:      equ 2Ch          ; Function Register                        (RW)
   472  002D                    DCC03IN:      equ 2Dh          ;    Input Register                        (RW)
   473  002E                    DCC03OU:      equ 2Eh          ;   Output Register                        (RW)
   474  0029                    DBC03CR1:     equ 29h          ;   control & status register 1            (RW)
   475                          
   476                          ; Digital PSoC block 10, Basic Type C
   477  0030                    DBC10FN:      equ 30h          ; Function Register                        (RW)
   478  0031                    DBC10IN:      equ 31h          ;    Input Register                        (RW)
   479  0032                    DBC10OU:      equ 32h          ;   Output Register                        (RW)
   480  0033                    DBC10CR1:     equ 33h          ;   control & status register 1            (RW)
   481                          
   482                          ; Digital PSoC block 11, Basic Type C
   483  0034                    DBC11FN:      equ 34h          ; Function Register                        (RW)
   484  0035                    DBC11IN:      equ 35h          ;    Input Register                        (RW)
   485  0036                    DBC11OU:      equ 36h          ;   Output Register                        (RW)
   486  0037                    DBC11CR1:     equ 37h          ;   control & status register 1            (RW)
   487                          
   488                          ; Digital PSoC block 12, Communications Type C
   489  0038                    DCC12FN:      equ 38h          ; Function Register                        (RW)
   490  0039                    DCC12IN:      equ 39h          ;    Input Register                        (RW)
   491  003A                    DCC12OU:      equ 3Ah          ;   Output Register                        (RW)
   492  003B                    DBC12CR1:     equ 3Bh          ;   control & status register 1            (RW)
   493                          
   494                          ; Digital PSoC block 13, Communications Type C
   495  003C                    DCC13FN:      equ 3Ch          ; Function Register                        (RW)
   496  003D                    DCC13IN:      equ 3Dh          ;    Input Register                        (RW)
   497  003E                    DCC13OU:      equ 3Eh          ;   Output Register                        (RW)
   498  003F                    DBC13CR1:     equ 3Fh          ;   control & status register 1            (RW)
   499                          
   500                          ;------------------------------------------------
   501                          ;  System and Global Resource Registers
   502                          ;  Note: Also see this address range in Bank 0.
   503                          ;------------------------------------------------
   504                          
   505  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   506  00C0                    CLK_CR0_ACOLUMN_3:    equ C0h    ; MASK: Specify clock for analog cloumn
   507  0030                    CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
   508  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   509  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   510                          
   511  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   512  0018                    CLK_CR1_ACLK1:        equ 18h    ; MASK: Digital PSoC block for analog source
   513  0003                    CLK_CR1_ACLK0:        equ 03h    ; MASK: Digital PSoC block for analog source
   514                          
   515  0003                    CLK_CR1_ACLK2:        equ 03h    ; Deprecated do not use
   516                          
   517  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   518  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   519                          
   520  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   521  000F                    AMD_CR0_AMOD0:        equ 0Fh    ; MASK: Modulation source for analog column 0
   522                          
   523  0064                    CMP_GO_EN:    equ 64h          ; Comparator Bus To Global Out Enable      (RW)
   524  0080                    CMP_GO_EN_GOO5:       equ 80h    ; MASK: Selected Col 1 signal to GOO5
   525  0040                    CMP_GO_EN_GOO1:       equ 40h    ; MASK: Selected Col 1 signal to GOO1
   526  0030                    CMP_GO_EN_SEL1:       equ 30h    ; MASK: Column 1 Signal Select
   527  0008                    CMP_GO_EN_GOO4:       equ 08h    ; MASK: Selected Col 0 signal to GOO4
   528  0004                    CMP_GO_EN_GOO0:       equ 04h    ; MASK: Selected Col 0 signal to GOO0
   529  0003                    CMP_GO_EN_SEL0:       equ 03h    ; MASK: Column 0 Signal Select
   530                          
   531  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   532  000F                    AMD_CR1_AMOD1:        equ 0Fh    ; MASK: Modulation ctrl for analog column 1
   533                          
   534  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   535  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   536  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   537                          
   538  006B                    CLK_CR3:      equ 6Bh          ; Analog Clock Source Control Register 3   (RW)
   539  0040                    CLK_CR3_SYS1:         equ 40h    ; MASK: Analog Clock 1 selection
   540  0030                    CLK_CR3_DIVCLK1:      equ 30h    ; MASK: Analog Clock 1 divider
   541  0004                    CLK_CR3_SYS0:         equ 04h    ; MASK: Analog Clock 0 selection
   542  0003                    CLK_CR3_DIVCLK0:      equ 03h    ; MASK: Analog Clock 0 divider
   543                          
   544                          ;------------------------------------------------
   545                          ;  Global Digital Interconnects
   546                          ;------------------------------------------------
   547                          
   548  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   549  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   550  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   551  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   552                          
   553  00A0                    GDI_O_IN_CR:  equ 0A0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   554  00A1                    GDI_E_IN_CR:  equ 0A1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   555  00A2                    GDI_O_OU_CR:  equ 0A2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   556  00A3                    GDI_E_OU_CR:  equ 0A3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   557                          
   558  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   559  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   560                          
   561                          ;------------------------------------------------
   562                          ;  Analog Mux Bus Port Enable Bits
   563                          ;------------------------------------------------
   564  00D8                    MUX_CR0:      equ 0D8h          ; Analog Mux Port 0 Bit Enables Register
   565  00D9                    MUX_CR1:      equ 0D9h          ; Analog Mux Port 1 Bit Enables Register
   566  00DA                    MUX_CR2:      equ 0DAh          ; Analog Mux Port 2 Bit Enables Register
   567  00DB                    MUX_CR3:      equ 0DBh          ; Analog Mux Port 3 Bit Enables Register
   568  00EC                    MUX_CR4:      equ 0ECh          ; Analog Mux Port 4 Bit Enables Register
   569                          
   570                          ;------------------------------------------------
   571                          ;  Clock and System Control Registers
   572                          ;------------------------------------------------
   573                          
   574  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   575  0080                    OSC_GO_EN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   576  0040                    OSC_GO_EN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   577  0020                    OSC_GO_EN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   578  0010                    OSC_GO_EN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   579  0008                    OSC_GO_EN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   580  0004                    OSC_GO_EN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   581  0002                    OSC_GO_EN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   582  0001                    OSC_GO_EN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   583                          
   584  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   585  0003                    OSC_CR4_VC3SEL:       equ 03h    ; MASK: System VC3 Clock source
   586                          
   587  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   588                          
   589  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   590  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   591  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   592  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   593  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   594  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   595  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   596  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   597  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   598  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   599  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   600  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   601  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   602  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   603  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   604  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   605  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   606  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   607                          
   608  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   609  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   610  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   611                          
   612  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   613  0080                    OSC_CR2_PLLGAIN:      equ 80h    ; MASK: High/Low gain
   614  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   615  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   616  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   617                          
   618  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   619  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   620  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   621  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   622  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   623  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   624  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   625  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   626                          
   627  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   628  0008                    VLT_CMP_NOWRITE:      equ 08h    ; MASK: Vcc below Flash Write level
   629  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   630  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   631  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   632                          
   633  00E5                    ADC0_TR:      equ 0E5h          ; ADC Column 0 Trim Register
   634  00E6                    ADC1_TR:      equ 0E6h          ; ADC Column 1 Trim Register
   635                          
   636  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   637  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   638  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   639  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   640                          
   641  00FA                    FLS_PR1:      equ 0FAh          ; Flash Program Register 1                 (RW)
   642  0003                    FLS_PR1_BANK:         equ 03h    ; MASK: Select Active Flash Bank
   643                          
   644  00FD                    DAC_CR0:       equ 0FDh          ; Analog Mux DAC Control Register 0
   645  00DC                    DAC_CR1:       equ 0DCh          ; Analog Mux DAC Control Register 1
   646  0008                    DAC_CR_IRANGE:        equ 08h    ; MASK: Sets the DAC Range low or high
   647  0006                    DAC_CR_OSCMODE:       equ 06h    ; MASK: Defines the reset mode for AMux
   648  0001                    DAC_CR_ENABLE:        equ 01h    ; MASK: Enable/Disable DAC function
   649                          
   650                          ;------------------------------------------------
   651                          ;  I2C Control Registers
   652                          ;------------------------------------------------
   653                          
   654  00AD                    I2C_ADDR:    equ 0ADh          ; I2C Address Register (RW)
   655                          
   656                          ;------------------------------------------------------
   657                          ;  Neon Analog Registers
   658                          ;------------------------------------------------------
   659  0053                    VDAC50CR0:		equ 53h			; V DAC5 control 0				(RW)
   660  0057                    VDAC51CR0:		equ 57h			; V DAC5 control 1				(RW)
   661  00A8                    ADC_CR0:		equ A8h			; ADC control 0					(RW)
   662  00A9                    ADC_CR1:		equ A9h			; ADC control 1					(RW)
   663  00AA                    ADC_CR2:		equ AAh			; ADC control 2					(RW)
   664  00AB                    ADC_CR3TRIM:	equ ABh			; ADC control 3					(RW)
   665  00AC                    ADC_CR4:		equ ACh			; ADC control 4					(RW)
   666  00E7                    VDAC_TRIM:		equ E7h			; V DAC trim					(RW)
   667                          
   668                          ;------------------------------------------------------
   669                          ;  Neon Current Sense CMP Registers
   670                          ;------------------------------------------------------
   671  0050                    CMP0CR1:		equ 50h			; CMP0 control 1				(RW)
   672  0051                    CMP0CR2:		equ 51h			; CMP0 control 2				(RW)
   673  0054                    CMP1CR1:		equ 54h			; CMP1 control 1				(RW)
   674  0055                    CMP1CR2:		equ 55h			; CMP1 control 2				(RW)
   675  0058                    CSCMPCR0:		equ 58h			; CSCMP control 0				(RW)
   676  0059                    CSCMPGOEN:		equ 59h			; CSCMO global out enable		(RW)
   677  005A                    CSLUTCR0:		equ 5Ah			; CSLUT control 0				(RW)
   678  005B                    CMPCOLMUX:		equ 5Bh			; CMP Column Mux				(RW)
   679  005C                    CMPPWMCR:		equ 5Ch			; CMP PWM control				(RW)
   680  005D                    CMPFLTCR:		equ 5Dh			; CMP filter control			(RW)
   681  005E                    CMPCLK1:		equ 5Eh			; CMP clock 1					(RW)
   682  005F                    CMPCLK0:		equ 5Fh			; CMP clock 0					(RW)
   683                          
   684                          ;------------------------------------------------------
   685                          ;  Neon Real Time Clock Registers
   686                          ;------------------------------------------------------
   687  00A4                    RTCH:			equ A4h			; Real time current hour		(RW)
   688  00A5                    RTCM:			equ A5h			; Real time current minute		(RW)
   689  00A6                    RTCS:			equ A6h			; Real time current second		(RW)
   690  00A7                    RTCCR:			equ A7h			; Real time clock control		(RW)
   691                          
   692                          ;------------------------------------------------------
   693                          ;  Analog MUX Config Registers
   694                          ;------------------------------------------------------
   695                          
   696  006A                    AMUX_CFG1:			equ 6Ah  ; Analog MUX Configuration 1
   697  0020                    AMUX_CFG1_GOINVR:	equ 20h  ;
   698  0010                    AMUX_CFG1_GOINVL:  	equ 10h	 ;
   699  000C                    AMUX_CFG1_AMUXMODR:	equ 0Ch	 ;
   700  0003                    AMUX_CFG1_AMUXMODL:	equ 03h	 ;
   701                          
   702                          ;;=============================================================================
   703                          ;;      M8C System Macros
   704                          ;;  These macros should be used when their functions are needed.
   705                          ;;=============================================================================
   706                          
   707                          ;----------------------------------------------------
   708                          ;  Swapping Register Banks
   709                          ;----------------------------------------------------
   710                              macro M8C_SetBank0
   711                              and   F, ~FLAG_XIO_MASK
   712  0000'                       endm
   713                          
   714                              macro M8C_SetBank1
   715                              or    F, FLAG_XIO_MASK
   716  0000'                       endm
   717                          
   718                          ;----------------------------------------------------
   719                          ;  Global Interrupt Enable/Disable
   720                          ;----------------------------------------------------
   721                              macro M8C_EnableGInt
   722                              or    F, FLAG_GLOBAL_IE
   723  0000'                       endm
   724                          
   725                              macro M8C_DisableGInt
   726                              and   F, ~FLAG_GLOBAL_IE
   727  0000'                       endm
   728                          
   729                          ;----------------------------------------------------
   730                          ;  Enable/Disable Interrupt Mask
   731                          ;
   732                          ;  Use the following macros to enable/disable
   733                          ;  bits in the Interrupt mask registers,
   734                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   735                          ;
   736                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   737                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   738                          ;
   739                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   740                          ;        and MASK is the bit set to enable or disable
   741                          ;----------------------------------------------------
   742                          ; Disable Interrupt Bit Mask(s)
   743                              macro M8C_DisableIntMask
   744                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   745  0000'                       endm
   746                          
   747                          ; Enable Interrupt Bit Mask(s)
   748                              macro M8C_EnableIntMask
   749                              or    reg[@0], @1               ; enable specified interrupt enable bit
   750  0000'                       endm
   751                          
   752                          ;----------------------------------------------------
   753                          ;  Clear Posted Interrupt Flag Mask
   754                          ;
   755                          ;  Use the following macros to clear the
   756                          ;  bits in the Interrupt Clear registers,
   757                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   758                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   759                          ;
   760                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   761                          ;        and MASK is the bit set to enable or disable
   762                          ;----------------------------------------------------
   763                              macro M8C_ClearIntFlag
   764                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   765  0000'                       endm
   766                          
   767                          ;----------------------------------------------------
   768                          ;  Power-On Reset & WatchDog Timer Functions
   769                          ;----------------------------------------------------
   770                              macro M8C_EnableWatchDog
   771                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   772  0000'                       endm
   773                          
   774                              macro M8C_ClearWDT
   775                              mov   reg[RES_WDT], 00h
   776  0000'                       endm
   777                          
   778                              macro M8C_ClearWDTAndSleep
   779                              mov   reg[RES_WDT], 38h
   780  0000'                       endm
   781                          
   782                          ;----------------------------------------------------
   783                          ;  Sleep, CPU Stop & Software Reset
   784                          ;----------------------------------------------------
   785                              macro M8C_Sleep
   786                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   787                              ; The next instruction to be executed depends on the state of the
   788                              ; various interrupt enable bits. If some interrupts are enabled
   789                              ; and the global interrupts are disabled, the next instruction will
   790                              ; be the one that follows the invocation of this macro. If global
   791                              ; interrupts are also enabled then the next instruction will be
   792                              ; from the interrupt vector table. If no interrupts are enabled
   793                              ; then the CPU sleeps forever.
   794  0000'                       endm
   795                          
   796                              macro M8C_Stop
   797                              ; In general, you probably don't want to do this, but here's how:
   798                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   799                              ; Next instruction to be executed is located in the interrupt
   800                              ; vector table entry for Power-On Reset.
   801  0000'                       endm
   802                          
   803                              macro M8C_Reset
   804                              ; Restore CPU to the power-on reset state.
   805                              mov A, 0
   806                              SSC
   807                              ; Next non-supervisor instruction will be at interrupt vector 0.
   808  0000'                       endm
   809                          
   810                          ;----------------------------------------------------
   811                          ; ImageCraft Code Compressor Actions
   812                          ;----------------------------------------------------
   813                              ; Suspend Code Compressor
   814                              ; Must not span a RET or RETI instruction
   815                              ; without resuming code compression
   816                              macro Suspend_CodeCompressor
   817                              or   F, 0
   818  0000'                       endm
   819                          
   820                              ; Resume Code Compression
   821                              macro Resume_CodeCompressor
   822                              add  SP, 0
   823  0000'                       endm
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  FILENAME: Timer16.inc
     4                          ;;   Version: 2.6, Updated on 2013/5/19 at 10:44:39
     5                          ;;  Generated by PSoC Designer 5.4.2946
     6                          ;;
     7                          ;;  DESCRIPTION: Assembler declarations for the Timer16 user module interface
     8                          ;;-----------------------------------------------------------------------------
     9                          ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
    10                          ;;*****************************************************************************
    11                          ;;*****************************************************************************
    12                          
    13                          include "m8c.inc"
    14                          
    15                          
    16                          ;--------------------------------------------------
    17                          ; Constants for Timer16 API's.
    18                          ;--------------------------------------------------
    19                          
    20  0001                    Timer16_CONTROL_REG_START_BIT:             equ 0x01    ; Control register start bit
    21  00E1                    Timer16_INT_REG:                           equ 0x0e1
    22  0002                    Timer16_INT_MASK:                          equ 0x02
    23                          
    24                          
    25                          ;--------------------------------------------------
    26                          ; Constants for Timer16 user defined values
    27                          ;--------------------------------------------------
    28                          
    29  2580                    Timer16_PERIOD:                            equ 0x2580
    30  2328                    Timer16_COMPARE_VALUE:                     equ 0x2328
    31                          
    32                          
    33                          ;--------------------------------------------------
    34                          ; Register Address Constants for Timer16
    35                          ;--------------------------------------------------
    36                          
    37  0020                    Timer16_COUNTER_LSB_REG:               equ 0x20   ; DR0 Counter register
    38  0024                    Timer16_COUNTER_MSB_REG:               equ 0x24
    39  0021                    Timer16_PERIOD_LSB_REG:                equ 0x21   ; DR1 Period register
    40  0025                    Timer16_PERIOD_MSB_REG:                equ 0x25
    41  0022                    Timer16_COMPARE_LSB_REG:               equ 0x22   ; DR2 CompareValue register
    42  0026                    Timer16_COMPARE_MSB_REG:               equ 0x26
    43  0023                    Timer16_CONTROL_LSB_REG:               equ 0x23   ; Control register
    44  0027                    Timer16_CONTROL_MSB_REG:               equ 0x27
    45  0020                    Timer16_FUNC_LSB_REG:                  equ 0x20   ; Function register
    46  0024                    Timer16_FUNC_MSB_REG:                  equ 0x24
    47  0021                    Timer16_INPUT_LSB_REG:                 equ 0x21   ; Input register
    48  0025                    Timer16_INPUT_MSB_REG:                 equ 0x25
    49  0022                    Timer16_OUTPUT_LSB_REG:                equ 0x22   ; Output register
    50  0026                    Timer16_OUTPUT_MSB_REG:                equ 0x26
    51                          
    52                          
    53                          ;--------------------------------------------------
    54                          ; Timer16 Macro 'Functions'
    55                          ;--------------------------------------------------
    56                          
    57                             macro Timer16_Start_M
    58                             or    reg[Timer16_CONTROL_LSB_REG],  Timer16_CONTROL_REG_START_BIT
    59  0000'                      endm
    60                          
    61                             macro Timer16_Stop_M
    62                             and   reg[Timer16_CONTROL_LSB_REG], ~Timer16_CONTROL_REG_START_BIT
    63  0000'                      endm
    64                          
    65                             macro Timer16_EnableInt_M
    66                             M8C_EnableIntMask Timer16_INT_REG, Timer16_INT_MASK
    67  0000'                      endm
    68                          
    69                             macro Timer16_DisableInt_M
    70                             M8C_DisableIntMask Timer16_INT_REG, Timer16_INT_MASK
    71  0000'                      endm
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  FILENAME: Timer16INT.asm
     4                          ;;   Version: 2.6, Updated on 2013/5/19 at 10:44:39
     5                          ;;  Generated by PSoC Designer 5.4.2946
     6                          ;;
     7                          ;;  DESCRIPTION: Timer16 Interrupt Service Routine
     8                          ;;-----------------------------------------------------------------------------
     9                          ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
    10                          ;;*****************************************************************************
    11                          ;;*****************************************************************************
    12                          
    13                          include "m8c.inc"
    14                          include "memory.inc"
    15                          include "Timer16.inc"
    16                          
    17                          
    18                          ;-----------------------------------------------
    19                          ;  Global Symbols
    20                          ;-----------------------------------------------
    21                          export  _Timer16_ISR
    22                          
    23                          
    24                          AREA InterruptRAM (RAM,REL,CON)
    25                          
    26                          ;@PSoC_UserCode_INIT@ (Do not change this line.)
    27                          ;---------------------------------------------------
    28                          ; Insert your custom declarations below this banner
    29                          ;---------------------------------------------------
    30                          
    31                          ;------------------------
    32                          ; Includes
    33                          ;------------------------
    34                          
    35                          	
    36                          ;------------------------
    37                          ;  Constant Definitions
    38                          ;------------------------
    39                          
    40                          
    41                          ;------------------------
    42                          ; Variable Allocation
    43                          ;------------------------
    44                          
    45                          
    46                          ;---------------------------------------------------
    47                          ; Insert your custom declarations above this banner
    48                          ;---------------------------------------------------
    49                          ;@PSoC_UserCode_END@ (Do not change this line.)
    50                          
    51                          
    52                          AREA UserModules (ROM, REL)
    53                          
    54                          ;-----------------------------------------------------------------------------
    55                          ;  FUNCTION NAME: _Timer16_ISR
    56                          ;
    57                          ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
    58                          ;
    59                          ;-----------------------------------------------------------------------------
    60                          ;
    61                          
    62  0000'                   _Timer16_ISR:
    63                          
    64                             ;@PSoC_UserCode_BODY@ (Do not change this line.)
    65                             ;---------------------------------------------------
    66                             ; Insert your custom assembly code below this banner
    67                             ;---------------------------------------------------
    68                             ;   NOTE: interrupt service routines must preserve
    69                             ;   the values of the A and X CPU registers.
    70                             
    71                             ;---------------------------------------------------
    72                             ; Insert your custom assembly code above this banner
    73                             ;---------------------------------------------------
    74                             
    75                             ;---------------------------------------------------
    76                             ; Insert a lcall to a C function below this banner
    77                             ; and un-comment the lines between these banners
    78                             ;---------------------------------------------------
    79                             
    80                             ;PRESERVE_CPU_CONTEXT
    81                             ;lcall _My_C_Function
    82                             ;RESTORE_CPU_CONTEXT
    83                             
    84                             ;---------------------------------------------------
    85                             ; Insert a lcall to a C function above this banner
    86                             ; and un-comment the lines between these banners
    87                             ;---------------------------------------------------
    88                             ;@PSoC_UserCode_END@ (Do not change this line.)
    89                          
    90  0000' 7E                   reti
HI-TECH Software Macro Assembler (PSoC MCU) V9.61
Symbol Table                                                                                               Fri Jun 12 09:25:11 2015
                 _Timer16_ISR 0000                         HITECH 0002                      TOOLCHAIN 0002  
HI-TECH Software Macro Assembler (PSoC MCU) V9.61
                                                                                                           Fri Jun 12 09:25:11 2015
     1                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     2                          ;;;
     3                          ;;;  M8C.INC -- Microcontroller Device System Declarations
     4                          ;;;
     5                          ;;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
     6                          ;;;
     7                          ;;;  This file provides address constants, bit field masks and a set of macro
     8                          ;;;  facilities for the Cypress Semiconductor CY8C22045 Microcontroller devices.
     9                          ;;;
    10                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    11                          
    12                          ;;=============================================================================
    13                          ;; Definition of abbreviations used in the descriptions below
    14                          ;;  (RW)   The register or bit supports reads and writes
    15                          ;;  (W)    The register or bit is write-only
    16                          ;;  (R)    The register or bit is read-only
    17                          ;;  (#)    Access to the register is bit specific (see the family datasheet)
    18                          ;;  (RC)   The register or bit can be read, but writing a 0 will clear it,
    19                          ;;         writing a 1 will have no effect.
    20                          ;;=============================================================================
    21                          
    22                          ;;=============================================================================
    23                          ;;      System Registers
    24                          ;;=============================================================================
    25                          
    26                          ;----------------------------
    27                          ;  Flag Register Bit Fields
    28                          ;----------------------------
    29  00C0                    FLAG_PGMODE_MASK:  equ 0C0h     ; Paging control for > 256 bytes of RAM
    30  0000                    FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
    31  0040                    FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
    32  0080                    FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
    33  00C0                    FLAG_PGMODE_3:     equ 0C0h       ; Direct to CUR_PP page, indexed to STK_PP page
    34  0000                    FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
    35  0040                    FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
    36  0080                    FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
    37  00C0                    FLAG_PGMODE_11b:   equ 0C0h       ; Same as PGMODE_3
    38  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    39  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    40  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    41  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    42  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    43                          
    44                          
    45                          ;;=============================================================================
    46                          ;;      Register Space, Bank 0
    47                          ;;=============================================================================
    48                          
    49                          ;------------------------------------------------
    50                          ;  Port Registers
    51                          ;  Note: Also see this address range in Bank 1.
    52                          ;------------------------------------------------
    53                          ; Port 0
    54  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    55  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    56  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    57  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    58                          ; Port 1
    59  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    60  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    61  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    62  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    63                          ; Port 2
    64  0008                    PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
    65  0009                    PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
    66  000A                    PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
    67  000B                    PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
    68                          ; Port 3
    69  000C                    PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
    70  000D                    PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
    71  000E                    PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
    72  000F                    PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
    73                          ; Port 4
    74  0010                    PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
    75  0011                    PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
    76  0012                    PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
    77  0013                    PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
    78                          
    79                          ;------------------------------------------------
    80                          ;  Digital PSoC(tm) block Registers
    81                          ;  Note: Also see this address range in Bank 1.
    82                          ;------------------------------------------------
    83                          ; Digital PSoC block 00, Basic Type C
    84  0020                    DBC00DR0:     equ 20h          ; data register 0                          (#)
    85  0021                    DBC00DR1:     equ 21h          ; data register 1                          (W)
    86  0022                    DBC00DR2:     equ 22h          ; data register 2                          (RW)
    87  0023                    DBC00CR0:     equ 23h          ; control & status register 0              (#)
    88                          
    89                          ; Digital PSoC block 01, Basic Type C
    90  0024                    DBC01DR0:     equ 24h          ; data register 0                          (#)
    91  0025                    DBC01DR1:     equ 25h          ; data register 1                          (W)
    92  0026                    DBC01DR2:     equ 26h          ; data register 2                          (RW)
    93  0027                    DBC01CR0:     equ 27h          ; control & status register 0              (#)
    94                          
    95                          ; Digital PSoC block 02, Communications Type C
    96  0028                    DCC02DR0:     equ 28h          ; data register 0                          (#)
    97  0029                    DCC02DR1:     equ 29h          ; data register 1                          (W)
    98  002A                    DCC02DR2:     equ 2Ah          ; data register 2                          (RW)
    99  002B                    DCC02CR0:     equ 2Bh          ; control & status register 0              (#)
   100                          
   101                          ; Digital PSoC block 03, Communications Type C
   102  002C                    DCC03DR0:     equ 2Ch          ; data register 0                          (#)
   103  002D                    DCC03DR1:     equ 2Dh          ; data register 1                          (W)
   104  002E                    DCC03DR2:     equ 2Eh          ; data register 2                          (RW)
   105  002F                    DCC03CR0:     equ 2Fh          ; control & status register 0              (#)
   106                          
   107                          ; Digital PSoC block 10, Basic Type C
   108  0030                    DBC10DR0:     equ 30h          ; data register 0                          (#)
   109  0031                    DBC10DR1:     equ 31h          ; data register 1                          (W)
   110  0032                    DBC10DR2:     equ 32h          ; data register 2                          (RW)
   111  0033                    DBC10CR0:     equ 33h          ; control & status register 0              (#)
   112                          
   113                          ; Digital PSoC block 11, Basic Type C
   114  0034                    DBC11DR0:     equ 34h          ; data register 0                          (#)
   115  0035                    DBC11DR1:     equ 35h          ; data register 1                          (W)
   116  0036                    DBC11DR2:     equ 36h          ; data register 2                          (RW)
   117  0037                    DBC11CR0:     equ 37h          ; control & status register 0              (#)
   118                          
   119                          ; Digital PSoC block 12, Communications Type C
   120  0038                    DCC12DR0:     equ 38h          ; data register 0                          (#)
   121  0039                    DCC12DR1:     equ 39h          ; data register 1                          (W)
   122  003A                    DCC12DR2:     equ 3Ah          ; data register 2                          (RW)
   123  003B                    DCC12CR0:     equ 3Bh          ; control & status register 0              (#)
   124                          
   125                          ; Digital PSoC block 13, Communications Type C
   126  003C                    DCC13DR0:     equ 3Ch          ; data register 0                          (#)
   127  003D                    DCC13DR1:     equ 3Dh          ; data register 1                          (W)
   128  003E                    DCC13DR2:     equ 3Eh          ; data register 2                          (RW)
   129  003F                    DCC13CR0:     equ 3Fh          ; control & status register 0              (#)
   130                          
   131                          ;-------------------------------------
   132                          ;  Analog Control Registers
   133                          ;-------------------------------------
   134  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
   135  00C0                    AMX_IN_ACI3:          equ C0h    ; MASK: column 3 input mux
   136  0030                    AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
   137  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
   138  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
   139                          
   140  0061                    AMUX_CFG:      equ 61h          ; Analog MUX Configuration
   141  0030                    AMUX_CFG_INTCAP:       equ 30h    ;
   142  000E                    AMUX_CFG_MUXCLK:  	  equ 0Eh	 ;
   143  0001                    AMUX_CFG_EN:		  	  equ 01h	 ;
   144                          
   145                          ; old declarations DO NOT USE
   146  0061                    AMUXCFG:      equ 61h          ; Analog MUX Configuration
   147  0030                    AMUXCFG_INTCAP:       equ 30h    ;
   148  000E                    AMUXCFG_MUXCLK:  	  equ 0Eh	 ;
   149  0001                    AMUXCFG_EN:		  	  equ 01h	 ;
   150                          
   151  0062                    PWM_CR:       equ 62h          ; Pulse-Width Modulator Control
   152  0038                    PWM_CR_HIGH:          equ 38h    ; MASK: PWM high time
   153  0006                    PWM_CR_LOW:           equ 06h	 ; MASK: PWM low time
   154  0001                    PWM_CR_EN:            equ 01h	 ; MASK: Enable/Disable PWM function
   155                          
   156  0063                    ARF_CR:       equ 63h          ; Analog Reference Control
   157                          
   158  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus Register           (#)
   159  0080                    CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
   160  0040                    CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
   161  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
   162  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
   163  0008                    CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
   164  0004                    CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
   165  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
   166  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   167                          
   168  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   169  0020                    CMP_CR1_CLDIS1:       equ 20h    ; MASK: Column 1 comparator output latch
   170  0010                    CMP_CR1_CLDIS0:	      equ 10h    ; MASK: Column 0 comparator output latch
   171                          
   172  0068                    ADC0_CR:      equ 68h          ; Analog Column 0 Configuration
   173  0080                    ADC0_CR_CMPST:        equ 80h    ;
   174  0040                    ADC0_CR_LOREN:        equ 40h    ;
   175  0020                    ADC0_CR_SHEN:         equ 20h    ;
   176  0008                    ADC0_CR_CBSRC:        equ 08h    ;
   177  0004                    ADC0_CR_ADCM:         equ 04h    ;
   178  0001                    ADC0_CR_EN:	          equ 01h    ;
   179                          
   180  0069                    ADC1_CR:      equ 69h          ; Analog Column 1 Configuration
   181  0080                    ADC1_CR_CMPST:        equ 80h    ;
   182  0040                    ADC1_CR_LOREN:        equ 40h    ;
   183  0020                    ADC1_CR_SHEN:         equ 20h    ;
   184  0008                    ADC1_CR_CBSRC:        equ 08h    ;
   185  0004                    ADC1_CR_ADCM:         equ 04h    ;
   186  0001                    ADC1_CR_EN:	          equ 01h    ;
   187                          
   188                          ; Continuous Time PSoC block Type E Row 0 Col 0
   189  0072                    ACE00CR1:     equ 72h          ; Control register 1                       (RW)
   190  0073                    ACE00CR2:     equ 73h          ; Control register 2                       (RW)
   191                          
   192                          ; Continuous Time PSoC block Type E Row 0 Col 1
   193  0076                    ACE01CR1:     equ 76h          ; Control register 1                       (RW)
   194  0077                    ACE01CR2:     equ 77h          ; Control register 2                       (RW)
   195                          
   196                          ; Switched Cap PSoC blockType E Row 1 Col 0
   197  0080                    ASE10CR0:     equ 80h          ; Control register 0                       (RW)
   198                          
   199                          ; Switched Cap PSoC blockType E Row 1 Col 1
   200  0084                    ASE11CR0:     equ 84h          ; Control register 0                       (RW)
   201                          
   202                          ;-----------------------------------------------
   203                          ;  Global General Purpose Data Registers
   204                          ;-----------------------------------------------
   205  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   206  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   207  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   208  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   209                          
   210                          ;------------------------------------------------
   211                          ;  Row Digital Interconnects
   212                          ;
   213                          ;  Note: the following registers are mapped into
   214                          ;  both register bank 0 AND register bank 1.
   215                          ;------------------------------------------------
   216                          
   217  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   218  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   219  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   220  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   221  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   222  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   223  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   224                          
   225  00B8                    RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
   226  00B9                    RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
   227  00BA                    RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
   228  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   229  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   230  00BD                    RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
   231  00BE                    RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
   232                          
   233                          ;-----------------------------------------------
   234                          ;  Ram Page Pointers
   235                          ;-----------------------------------------------
   236  00D0                    CUR_PP:      equ 0D0h           ; Current   Page Pointer
   237  00D1                    STK_PP:      equ 0D1h           ; Stack     Page Pointer
   238  00D3                    IDX_PP:      equ 0D3h           ; Index     Page Pointer
   239  00D4                    MVR_PP:      equ 0D4h           ; MVI Read  Page Pointer
   240  00D5                    MVW_PP:      equ 0D5h           ; MVI Write Page Pointer
   241                          
   242                          ;------------------------------------------------
   243                          ;  I2C Configuration Registers
   244                          ;------------------------------------------------
   245  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   246  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   247  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   248  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   249  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   250  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   251  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   252  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   253  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   254  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   255                          
   256  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   257  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   258  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   259  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   260  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   261  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   262  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   263  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   264  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   265                          
   266  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   267                          
   268  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   269  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   270  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   271  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   272  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   273                          
   274                          ;------------------------------------------------
   275                          ;  System and Global Resource Registers
   276                          ;------------------------------------------------
   277  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   278                                                         ; Use INT_MSK0 bit field masks
   279  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   280                                                         ; Use INT_MSK1 bit field masks
   281  00DC                    INT_CLR2:     equ 0DCh          ; Interrupt Clear Register 2               (RW)
   282                                                         ; Use INT_MSK2 bit field masks
   283  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   284                                                         ; Use INT_MSK3 bit field masks
   285                          
   286  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   287  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   288  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   289                          
   290  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   291  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   292  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   293  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   294  0010                    INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
   295  0008                    INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
   296  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   297  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   298  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   299                          
   300  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   301  0080                    INT_MSK1_DCC13:            equ 80h ; MASK: enable/disable DCC13 block interrupt
   302  0040                    INT_MSK1_DCC12:            equ 40h ; MASK: enable/disable DCC12 block interrupt
   303  0020                    INT_MSK1_DBC11:            equ 20h ; MASK: enable/disable DBC11 block interrupt
   304  0010                    INT_MSK1_DBC10:            equ 10h ; MASK: enable/disable DBC10 block interrupt
   305  0008                    INT_MSK1_DCC03:            equ 08h ; MASK: enable/disable DCC03 block interrupt
   306  0004                    INT_MSK1_DCC02:            equ 04h ; MASK: enable/disable DCC02 block interrupt
   307  0002                    INT_MSK1_DBC01:            equ 02h ; MASK: enable/disable DBC01 block interrupt
   308  0001                    INT_MSK1_DBC00:            equ 01h ; MASK: enable/disable DBC00 block interrupt
   309                          
   310  00DF                    INT_MSK2:     equ DFh			; Custom block Mask Register			   (RW)
   311  0010                    INT_MSK2_SARADC:           equ 10h ; MASK: enable/disable SARADC block interrupt
   312  0020                    INT_MSK2_CSD0:             equ 20h ; MASK: enable/disable CSD0 block interrupt
   313  0040                    INT_MSK2_CSD1:             equ 40h ; MASK: enable/disable CSD1 block interrupt
   314  0080                    INT_MSK2_RTC:              equ 80h ; MASK: enable/disable RTC block interrupt
   315                          
   316  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   317  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   318                          
   319                          ;------------------------------------------------------
   320                          ;  MAC Registers
   321                          ;------------------------------------------------------
   322                          
   323  00E8                    MUL0_X:       equ 0E8h          ; Multiply Input X Register                (W)
   324  00E9                    MUL0_Y:       equ 0E9h          ; Multiply Input Y Register                (W)
   325  00EA                    MUL0_DH:      equ 0EAh          ; Multiply Result High Byte Register       (R)
   326  00EB                    MUL0_DL:      equ 0EBh          ; Multiply Result Low Byte Register        (R)
   327                          
   328  00EC                    ACC0_DR1:     equ 0ECh          ; Accumulator Data Register 1              (RW)
   329  00ED                    ACC0_DR0:     equ 0EDh          ; Accumulator Data Register 0              (RW)
   330  00EE                    ACC0_DR3:     equ 0EEh          ; Accumulator Data Register 3              (RW)
   331  00EF                    ACC0_DR2:     equ 0EFh          ; Accumulator Data Register 2              (RW)
   332                          
   333                          ; DECIMATOR Control Registers
   334  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   335  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   336                          
   337                          ;------------------------------------------------------
   338                          ;  System Status and Control Registers
   339                          ;
   340                          ;  Note: The following registers are mapped into both
   341                          ;        register bank 0 AND register bank 1.
   342                          ;------------------------------------------------------
   343  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   344                                                             ; Use FLAG_ masks defined at top of file
   345                          
   346  00FD                    DAC_D:        equ 0FDh		   ; DAC Data Register                        (RW)
   347                          
   348  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   349  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: flag, Internal Reset Status bit
   350  0010                    CPU_SCR1_SLIMO:         equ 10h	   ; MASK: Slow IMO (internal main osc) enable
   351  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   352  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   353  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   354                          
   355  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   356  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   357  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   358  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   359  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   360  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   361                          
   362                          ;------------------------------------------------------
   363                          ;  Neon Capsense Digital Control Registers
   364                          ;------------------------------------------------------
   365  0050                    CSD0_DR0_L:				equ 50h		; Capsense 0 data low 0				(RW)
   366  0054                    CSD0_DR0_H:				equ 54h		; Capsense 0 data high 0			(RW)
   367  0058                    CSD1_DR0_L:				equ 58h		; Capsense 1 data low 0				(RW)
   368  005C                    CSD1_DR0_H:				equ 5Ch		; Capsense 1 data high 0			(RW)
   369  0051                    CSD0_DR1_L:				equ 51h		; Capsense 0 data low 1				(RW)
   370  0055                    CSD0_DR1_H:				equ 55h		; Capsense 0 data high 1			(RW)
   371  0059                    CSD1_DR1_L:				equ 59h		; Capsense 1 data low 1				(RW)
   372  005D                    CSD1_DR1_H:				equ 5Dh		; Capsense 1 data high 1			(RW)
   373  0052                    CSD0_CNT_L:				equ 52h		; Capsense 0 counter low			(RW)
   374  0056                    CSD0_CNT_H:				equ 56h		; Capsense 0 counter high			(RW)
   375  005A                    CSD1_CNT_L:				equ 5Ah		; Capsense 1 counter low			(RW)
   376  005E                    CSD1_CNT_H:				equ	5Eh		; Capsense 1 counter high			(RW)
   377  0053                    CSD0_CR0:				equ 53h		; Capsense 0 control 0				(RW)
   378  005B                    CSD1_CR0:				equ 5Bh		; Capsense 1 control 0				(RW)
   379  0057                    CSD0_CR1:				equ 57h		; Capsense 0 control 1				(RW)
   380  005F                    CSD1_CR1:				equ 5Fh		; Capsense 1 control 1				(RW)
   381                          
   382                          ;------------------------------------------------------
   383                          ;  Neon Analog Registers
   384                          ;------------------------------------------------------
   385  0065                    ASY_CR:					equ 65h		; Analog Synchronization Control	(RW)
   386  006A                    ADC_DH:					equ 6Ah		; ADC data high						(RW)
   387  006B                    ADC_DL:					equ 6Bh		; ADC data low						(RW)
   388  00C8                    PWMVREF0:				equ C8h		; PWM Voltage Reference 0			(RW)
   389  00C9                    PWMVREF1:				equ C9h		; PWM Voltage Reference 1			(RW)
   390  00CB                    PWMSRC:					equ CBh		; PWM Source						(RW)
   391  00CA                    IDACMODE:				equ CAh		; IDAC Mode							(RW)
   392  00FC                    IDACR_D:				equ FCh		; Analog Mux DAC data 0				(RW)
   393  00FD                    IDACL_D:				equ FDh		; Analog Mux DAC data 1				(RW)
   394                          
   395                          ;------------------------------------------------------
   396                          ;  Neon Digital Registers
   397                          ;------------------------------------------------------
   398  00B7                    RDI0DSM:				equ B7h		; Row Digital Interconnect input select 0	(RW)
   399  00BF                    RDI1DSM:				equ BFh		; Row Digital Interconnect input select 1	(RW)
   400                          
   401                          ;------------------------------------------------------
   402                          ;  Neon Test Registers
   403                          ;------------------------------------------------------
   404  00CC                    TSCR0:					equ CCh		; Tsource 0							(RW)
   405  00CD                    TSCMPH:					equ CDh		; TSCMP high						(RW)
   406  00CE                    TSCMPL:					equ CEh		; TSCMP low							(RW)
   407  00CF                    TSCR1:					equ CFh		; Tsource 1							(RW)
   408                          
   409                          ;;=============================================================================
   410                          ;;      Register Space, Bank 1
   411                          ;;=============================================================================
   412                          
   413                          ;------------------------------------------------
   414                          ;  Port Registers
   415                          ;  Note: Also see this address range in Bank 0.
   416                          ;------------------------------------------------
   417                          ; Port 0
   418  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   419  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   420  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   421  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   422                          
   423                          ; Port 1
   424  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   425  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   426  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   427  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   428                          
   429                          ; Port 2
   430  0008                    PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
   431  0009                    PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
   432  000A                    PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
   433  000B                    PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
   434                          
   435                          ; Port 3
   436  000C                    PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
   437  000D                    PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
   438  000E                    PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
   439  000F                    PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
   440                          
   441                          ; Port 4
   442  0010                    PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
   443  0011                    PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
   444  0012                    PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
   445  0013                    PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
   446                          
   447                          ;------------------------------------------------
   448                          ;  Digital PSoC(tm) block Registers
   449                          ;  Note: Also see this address range in Bank 0.
   450                          ;------------------------------------------------
   451                          
   452                          ; Digital PSoC block 00, Basic Type C
   453  0020                    DBC00FN:      equ 20h          ; Function Register                        (RW)
   454  0021                    DBC00IN:      equ 21h          ;    Input Register                        (RW)
   455  0022                    DBC00OU:      equ 22h          ;   Output Register                        (RW)
   456  0023                    DBC00CR1:     equ 23h          ;   control & status register 1            (RW)
   457                          
   458                          ; Digital PSoC block 01, Basic Type C
   459  0024                    DBC01FN:      equ 24h          ; Function Register                        (RW)
   460  0025                    DBC01IN:      equ 25h          ;    Input Register                        (RW)
   461  0026                    DBC01OU:      equ 26h          ;   Output Register                        (RW)
   462  0027                    DBC01CR1:     equ 27h          ;   control & status register 1            (RW)
   463                          
   464                          ; Digital PSoC block 02, Communications Type C
   465  0028                    DCC02FN:      equ 28h          ; Function Register                        (RW)
   466  0029                    DCC02IN:      equ 29h          ;    Input Register                        (RW)
   467  002A                    DCC02OU:      equ 2Ah          ;   Output Register                        (RW)
   468  002B                    DBC02CR1:     equ 2Bh          ;   control & status register 1            (RW)
   469                          
   470                          ; Digital PSoC block 03, Communications Type C
   471  002C                    DCC03FN:      equ 2Ch          ; Function Register                        (RW)
   472  002D                    DCC03IN:      equ 2Dh          ;    Input Register                        (RW)
   473  002E                    DCC03OU:      equ 2Eh          ;   Output Register                        (RW)
   474  0029                    DBC03CR1:     equ 29h          ;   control & status register 1            (RW)
   475                          
   476                          ; Digital PSoC block 10, Basic Type C
   477  0030                    DBC10FN:      equ 30h          ; Function Register                        (RW)
   478  0031                    DBC10IN:      equ 31h          ;    Input Register                        (RW)
   479  0032                    DBC10OU:      equ 32h          ;   Output Register                        (RW)
   480  0033                    DBC10CR1:     equ 33h          ;   control & status register 1            (RW)
   481                          
   482                          ; Digital PSoC block 11, Basic Type C
   483  0034                    DBC11FN:      equ 34h          ; Function Register                        (RW)
   484  0035                    DBC11IN:      equ 35h          ;    Input Register                        (RW)
   485  0036                    DBC11OU:      equ 36h          ;   Output Register                        (RW)
   486  0037                    DBC11CR1:     equ 37h          ;   control & status register 1            (RW)
   487                          
   488                          ; Digital PSoC block 12, Communications Type C
   489  0038                    DCC12FN:      equ 38h          ; Function Register                        (RW)
   490  0039                    DCC12IN:      equ 39h          ;    Input Register                        (RW)
   491  003A                    DCC12OU:      equ 3Ah          ;   Output Register                        (RW)
   492  003B                    DBC12CR1:     equ 3Bh          ;   control & status register 1            (RW)
   493                          
   494                          ; Digital PSoC block 13, Communications Type C
   495  003C                    DCC13FN:      equ 3Ch          ; Function Register                        (RW)
   496  003D                    DCC13IN:      equ 3Dh          ;    Input Register                        (RW)
   497  003E                    DCC13OU:      equ 3Eh          ;   Output Register                        (RW)
   498  003F                    DBC13CR1:     equ 3Fh          ;   control & status register 1            (RW)
   499                          
   500                          ;------------------------------------------------
   501                          ;  System and Global Resource Registers
   502                          ;  Note: Also see this address range in Bank 0.
   503                          ;------------------------------------------------
   504                          
   505  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   506  00C0                    CLK_CR0_ACOLUMN_3:    equ C0h    ; MASK: Specify clock for analog cloumn
   507  0030                    CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
   508  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   509  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   510                          
   511  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   512  0018                    CLK_CR1_ACLK1:        equ 18h    ; MASK: Digital PSoC block for analog source
   513  0003                    CLK_CR1_ACLK0:        equ 03h    ; MASK: Digital PSoC block for analog source
   514                          
   515  0003                    CLK_CR1_ACLK2:        equ 03h    ; Deprecated do not use
   516                          
   517  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   518  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   519                          
   520  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   521  000F                    AMD_CR0_AMOD0:        equ 0Fh    ; MASK: Modulation source for analog column 0
   522                          
   523  0064                    CMP_GO_EN:    equ 64h          ; Comparator Bus To Global Out Enable      (RW)
   524  0080                    CMP_GO_EN_GOO5:       equ 80h    ; MASK: Selected Col 1 signal to GOO5
   525  0040                    CMP_GO_EN_GOO1:       equ 40h    ; MASK: Selected Col 1 signal to GOO1
   526  0030                    CMP_GO_EN_SEL1:       equ 30h    ; MASK: Column 1 Signal Select
   527  0008                    CMP_GO_EN_GOO4:       equ 08h    ; MASK: Selected Col 0 signal to GOO4
   528  0004                    CMP_GO_EN_GOO0:       equ 04h    ; MASK: Selected Col 0 signal to GOO0
   529  0003                    CMP_GO_EN_SEL0:       equ 03h    ; MASK: Column 0 Signal Select
   530                          
   531  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   532  000F                    AMD_CR1_AMOD1:        equ 0Fh    ; MASK: Modulation ctrl for analog column 1
   533                          
   534  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   535  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   536  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   537                          
   538  006B                    CLK_CR3:      equ 6Bh          ; Analog Clock Source Control Register 3   (RW)
   539  0040                    CLK_CR3_SYS1:         equ 40h    ; MASK: Analog Clock 1 selection
   540  0030                    CLK_CR3_DIVCLK1:      equ 30h    ; MASK: Analog Clock 1 divider
   541  0004                    CLK_CR3_SYS0:         equ 04h    ; MASK: Analog Clock 0 selection
   542  0003                    CLK_CR3_DIVCLK0:      equ 03h    ; MASK: Analog Clock 0 divider
   543                          
   544                          ;------------------------------------------------
   545                          ;  Global Digital Interconnects
   546                          ;------------------------------------------------
   547                          
   548  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   549  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   550  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   551  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   552                          
   553  00A0                    GDI_O_IN_CR:  equ 0A0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   554  00A1                    GDI_E_IN_CR:  equ 0A1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   555  00A2                    GDI_O_OU_CR:  equ 0A2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   556  00A3                    GDI_E_OU_CR:  equ 0A3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   557                          
   558  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   559  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   560                          
   561                          ;------------------------------------------------
   562                          ;  Analog Mux Bus Port Enable Bits
   563                          ;------------------------------------------------
   564  00D8                    MUX_CR0:      equ 0D8h          ; Analog Mux Port 0 Bit Enables Register
   565  00D9                    MUX_CR1:      equ 0D9h          ; Analog Mux Port 1 Bit Enables Register
   566  00DA                    MUX_CR2:      equ 0DAh          ; Analog Mux Port 2 Bit Enables Register
   567  00DB                    MUX_CR3:      equ 0DBh          ; Analog Mux Port 3 Bit Enables Register
   568  00EC                    MUX_CR4:      equ 0ECh          ; Analog Mux Port 4 Bit Enables Register
   569                          
   570                          ;------------------------------------------------
   571                          ;  Clock and System Control Registers
   572                          ;------------------------------------------------
   573                          
   574  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   575  0080                    OSC_GO_EN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   576  0040                    OSC_GO_EN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   577  0020                    OSC_GO_EN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   578  0010                    OSC_GO_EN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   579  0008                    OSC_GO_EN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   580  0004                    OSC_GO_EN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   581  0002                    OSC_GO_EN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   582  0001                    OSC_GO_EN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   583                          
   584  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   585  0003                    OSC_CR4_VC3SEL:       equ 03h    ; MASK: System VC3 Clock source
   586                          
   587  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   588                          
   589  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   590  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   591  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   592  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   593  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   594  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   595  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   596  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   597  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   598  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   599  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   600  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   601  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   602  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   603  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   604  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   605  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   606  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   607                          
   608  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   609  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   610  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   611                          
   612  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   613  0080                    OSC_CR2_PLLGAIN:      equ 80h    ; MASK: High/Low gain
   614  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   615  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   616  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   617                          
   618  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   619  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   620  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   621  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   622  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   623  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   624  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   625  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   626                          
   627  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   628  0008                    VLT_CMP_NOWRITE:      equ 08h    ; MASK: Vcc below Flash Write level
   629  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   630  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   631  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   632                          
   633  00E5                    ADC0_TR:      equ 0E5h          ; ADC Column 0 Trim Register
   634  00E6                    ADC1_TR:      equ 0E6h          ; ADC Column 1 Trim Register
   635                          
   636  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   637  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   638  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   639  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   640                          
   641  00FA                    FLS_PR1:      equ 0FAh          ; Flash Program Register 1                 (RW)
   642  0003                    FLS_PR1_BANK:         equ 03h    ; MASK: Select Active Flash Bank
   643                          
   644  00FD                    DAC_CR0:       equ 0FDh          ; Analog Mux DAC Control Register 0
   645  00DC                    DAC_CR1:       equ 0DCh          ; Analog Mux DAC Control Register 1
   646  0008                    DAC_CR_IRANGE:        equ 08h    ; MASK: Sets the DAC Range low or high
   647  0006                    DAC_CR_OSCMODE:       equ 06h    ; MASK: Defines the reset mode for AMux
   648  0001                    DAC_CR_ENABLE:        equ 01h    ; MASK: Enable/Disable DAC function
   649                          
   650                          ;------------------------------------------------
   651                          ;  I2C Control Registers
   652                          ;------------------------------------------------
   653                          
   654  00AD                    I2C_ADDR:    equ 0ADh          ; I2C Address Register (RW)
   655                          
   656                          ;------------------------------------------------------
   657                          ;  Neon Analog Registers
   658                          ;------------------------------------------------------
   659  0053                    VDAC50CR0:		equ 53h			; V DAC5 control 0				(RW)
   660  0057                    VDAC51CR0:		equ 57h			; V DAC5 control 1				(RW)
   661  00A8                    ADC_CR0:		equ A8h			; ADC control 0					(RW)
   662  00A9                    ADC_CR1:		equ A9h			; ADC control 1					(RW)
   663  00AA                    ADC_CR2:		equ AAh			; ADC control 2					(RW)
   664  00AB                    ADC_CR3TRIM:	equ ABh			; ADC control 3					(RW)
   665  00AC                    ADC_CR4:		equ ACh			; ADC control 4					(RW)
   666  00E7                    VDAC_TRIM:		equ E7h			; V DAC trim					(RW)
   667                          
   668                          ;------------------------------------------------------
   669                          ;  Neon Current Sense CMP Registers
   670                          ;------------------------------------------------------
   671  0050                    CMP0CR1:		equ 50h			; CMP0 control 1				(RW)
   672  0051                    CMP0CR2:		equ 51h			; CMP0 control 2				(RW)
   673  0054                    CMP1CR1:		equ 54h			; CMP1 control 1				(RW)
   674  0055                    CMP1CR2:		equ 55h			; CMP1 control 2				(RW)
   675  0058                    CSCMPCR0:		equ 58h			; CSCMP control 0				(RW)
   676  0059                    CSCMPGOEN:		equ 59h			; CSCMO global out enable		(RW)
   677  005A                    CSLUTCR0:		equ 5Ah			; CSLUT control 0				(RW)
   678  005B                    CMPCOLMUX:		equ 5Bh			; CMP Column Mux				(RW)
   679  005C                    CMPPWMCR:		equ 5Ch			; CMP PWM control				(RW)
   680  005D                    CMPFLTCR:		equ 5Dh			; CMP filter control			(RW)
   681  005E                    CMPCLK1:		equ 5Eh			; CMP clock 1					(RW)
   682  005F                    CMPCLK0:		equ 5Fh			; CMP clock 0					(RW)
   683                          
   684                          ;------------------------------------------------------
   685                          ;  Neon Real Time Clock Registers
   686                          ;------------------------------------------------------
   687  00A4                    RTCH:			equ A4h			; Real time current hour		(RW)
   688  00A5                    RTCM:			equ A5h			; Real time current minute		(RW)
   689  00A6                    RTCS:			equ A6h			; Real time current second		(RW)
   690  00A7                    RTCCR:			equ A7h			; Real time clock control		(RW)
   691                          
   692                          ;------------------------------------------------------
   693                          ;  Analog MUX Config Registers
   694                          ;------------------------------------------------------
   695                          
   696  006A                    AMUX_CFG1:			equ 6Ah  ; Analog MUX Configuration 1
   697  0020                    AMUX_CFG1_GOINVR:	equ 20h  ;
   698  0010                    AMUX_CFG1_GOINVL:  	equ 10h	 ;
   699  000C                    AMUX_CFG1_AMUXMODR:	equ 0Ch	 ;
   700  0003                    AMUX_CFG1_AMUXMODL:	equ 03h	 ;
   701                          
   702                          ;;=============================================================================
   703                          ;;      M8C System Macros
   704                          ;;  These macros should be used when their functions are needed.
   705                          ;;=============================================================================
   706                          
   707                          ;----------------------------------------------------
   708                          ;  Swapping Register Banks
   709                          ;----------------------------------------------------
   710                              macro M8C_SetBank0
   711                              and   F, ~FLAG_XIO_MASK
   712  3C41                        endm
   713                          
   714                              macro M8C_SetBank1
   715                              or    F, FLAG_XIO_MASK
   716  3C41                        endm
   717                          
   718                          ;----------------------------------------------------
   719                          ;  Global Interrupt Enable/Disable
   720                          ;----------------------------------------------------
   721                              macro M8C_EnableGInt
   722                              or    F, FLAG_GLOBAL_IE
   723  3C41                        endm
   724                          
   725                              macro M8C_DisableGInt
   726                              and   F, ~FLAG_GLOBAL_IE
   727  3C41                        endm
   728                          
   729                          ;----------------------------------------------------
   730                          ;  Enable/Disable Interrupt Mask
   731                          ;
   732                          ;  Use the following macros to enable/disable
   733                          ;  bits in the Interrupt mask registers,
   734                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   735                          ;
   736                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   737                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   738                          ;
   739                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   740                          ;        and MASK is the bit set to enable or disable
   741                          ;----------------------------------------------------
   742                          ; Disable Interrupt Bit Mask(s)
   743                              macro M8C_DisableIntMask
   744                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   745  3C41                        endm
   746                          
   747                          ; Enable Interrupt Bit Mask(s)
   748                              macro M8C_EnableIntMask
   749                              or    reg[@0], @1               ; enable specified interrupt enable bit
   750  3C41                        endm
   751                          
   752                          ;----------------------------------------------------
   753                          ;  Clear Posted Interrupt Flag Mask
   754                          ;
   755                          ;  Use the following macros to clear the
   756                          ;  bits in the Interrupt Clear registers,
   757                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   758                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   759                          ;
   760                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   761                          ;        and MASK is the bit set to enable or disable
   762                          ;----------------------------------------------------
   763                              macro M8C_ClearIntFlag
   764                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   765  3C41                        endm
   766                          
   767                          ;----------------------------------------------------
   768                          ;  Power-On Reset & WatchDog Timer Functions
   769                          ;----------------------------------------------------
   770                              macro M8C_EnableWatchDog
   771                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   772  3C41                        endm
   773                          
   774                              macro M8C_ClearWDT
   775                              mov   reg[RES_WDT], 00h
   776  3C41                        endm
   777                          
   778                              macro M8C_ClearWDTAndSleep
   779                              mov   reg[RES_WDT], 38h
   780  3C41                        endm
   781                          
   782                          ;----------------------------------------------------
   783                          ;  Sleep, CPU Stop & Software Reset
   784                          ;----------------------------------------------------
   785                              macro M8C_Sleep
   786                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   787                              ; The next instruction to be executed depends on the state of the
   788                              ; various interrupt enable bits. If some interrupts are enabled
   789                              ; and the global interrupts are disabled, the next instruction will
   790                              ; be the one that follows the invocation of this macro. If global
   791                              ; interrupts are also enabled then the next instruction will be
   792                              ; from the interrupt vector table. If no interrupts are enabled
   793                              ; then the CPU sleeps forever.
   794  3C41                        endm
   795                          
   796                              macro M8C_Stop
   797                              ; In general, you probably don't want to do this, but here's how:
   798                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   799                              ; Next instruction to be executed is located in the interrupt
   800                              ; vector table entry for Power-On Reset.
   801  3C41                        endm
   802                          
   803                              macro M8C_Reset
   804                              ; Restore CPU to the power-on reset state.
   805                              mov A, 0
   806                              SSC
   807                              ; Next non-supervisor instruction will be at interrupt vector 0.
   808  3C41                        endm
   809                          
   810                          ;----------------------------------------------------
   811                          ; ImageCraft Code Compressor Actions
   812                          ;----------------------------------------------------
   813                              ; Suspend Code Compressor
   814                              ; Must not span a RET or RETI instruction
   815                              ; without resuming code compression
   816                              macro Suspend_CodeCompressor
   817                              or   F, 0
   818  3C41                        endm
   819                          
   820                              ; Resume Code Compression
   821                              macro Resume_CodeCompressor
   822                              add  SP, 0
   823                              endm
      + 3C41                    
      + 3C41                    ; end of file m8c.inc
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;
     4                          ;;       FILENAME: Memory.inc
     5                          ;;
     6                          ;;    DESCRIPTION: Memory Model and Stack Parameter Definitions for 
     7                          ;;                 CY8C22045 PSoC devices.
     8                          ;;
     9                          ;;  LAST MODIFIED: August 17, 2004
    10                          ;;
    11                          ;;-----------------------------------------------------------------------------
    12                          ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
    13                          ;;*****************************************************************************
    14                          ;;*****************************************************************************
    15                          ;
    16                          ;
    17                          ;  ******** Define Memory Model and Stack parameters ********
    18                          ;
    19  0001                    IMAGECRAFT: equ 1   
    20  0002                    HITECH: equ 2   
    21  0002                    TOOLCHAIN: equ HITECH   
    22  0001                    SYSTEM_LARGE_MEMORY_MODEL: equ 1   
    23  0000                    SYSTEM_SMALL_MEMORY_MODEL: equ 0   
    24  0003                    SYSTEM_STACK_PAGE: equ 3   
    25  0000                    SYSTEM_STACK_PAGE_OFFSET: equ 0   
    26  0002                    SYSTEM_TOOLS: equ 2   
    27  0000                    SYSTEM_IDXPG_TRACKS_STK_PP: equ 0   
    28  0001                    SYSTEM_IDXPG_TRACKS_IDX_PP: equ 1   
    29  0000                    SYSTEM_MULTIPAGE_STACK: equ 0 
    30                          
    31                          
    32                          ;  ******* Function Class Definitions *******
    33                          ;
    34                          ;  These definitions are used to describe RAM access patterns. They provide
    35                          ;  documentation and they control prologue and epilogue macros that perform
    36                          ;  the necessary housekeeping functions for large memory model devices like
    37                          ;  the CY8C22045.
    38                          
    39  0001                    RAM_USE_CLASS_1:               equ 1   ; PUSH, POP & I/O access
    40  0002                    RAM_USE_CLASS_2:               equ 2   ; Indexed address mode on stack page
    41  0004                    RAM_USE_CLASS_3:               equ 4   ; Indexed address mode to any page
    42  0008                    RAM_USE_CLASS_4:               equ 8   ; Direct/Indirect address mode access
    43                          
    44                          ; ******* Hi Tech Specific *******
    45                          ; Turn on the expansion of all macros by default
    46                          IF (TOOLCHAIN & HITECH)
    47                          OPT EXPAND
    48                          ENDIF
    49                          ; ******* Page Pointer Manipulation Macros *******
    50                          ;
    51                          ;  ******* Page Pointer Manipulation Macros *******
    52                          ;
    53                          ;  Most of the following macros are conditionally compiled so they only
    54                          ;  produce code if the large memory model is selected.
    55                          
    56                             ;-----------------------------------------------
    57                             ;  Set Stack Page Macro
    58                             ;-----------------------------------------------
    59                             ;
    60                             ;  DESC: Modify STK_PP in the large or small memory Models.
    61                             ;
    62                             ; INPUT: Constant (e.g., SYSTEM_STACK_PAGE) that specifies the RAM page on
    63                             ;        which stack operations like PUSH and POP store and retrieve their
    64                             ;        data
    65                             ;
    66                             ;  COST: 8 instruction cycles (in LMM only)
    67                          
    68                             macro RAM_SETPAGE_STK( PG_NUMBER )
    69                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    70                                mov reg[STK_PP], @PG_NUMBER
    71                             ENDIF
    72  3C41                       endm
    73                          
    74                             ;-----------------------------------------------
    75                             ;  Set Current Page Macro
    76                             ;-----------------------------------------------
    77                             ;
    78                             ;  DESC: Modify CUR_PP in the large or small memory Models.
    79                             ;
    80                             ; INPUT: Constant value (e.g., >bFoo) for the RAM page number used in
    81                             ;        calculation of effective direct-mode address operands.
    82                             ;
    83                             ;  COST: 8 instruction cycles (in LMM only)
    84                          
    85                             macro RAM_SETPAGE_CUR( PG_NUMBER )
    86                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    87                                mov reg[CUR_PP], @PG_NUMBER
    88                             ENDIF
    89  3C41                       endm
    90                          
    91                             ;-----------------------------------------------
    92                             ;  Set Index Page Macro
    93                             ;-----------------------------------------------
    94                             ;
    95                             ;  DESC: Modify IDX_PP in the large or small emory Models.
    96                             ;
    97                             ; INPUT: Constant value (e.g., >caFoo) for the RAM page number used in
    98                             ;         calculation of effective index-mode address operands.
    99                             ;
   100                             ;  COST: 8 instruction cycles (in LMM only)
   101                          
   102                             macro RAM_SETPAGE_IDX( PG_NUMBER )
   103                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   104                                mov reg[IDX_PP], @PG_NUMBER
   105                             ENDIF
   106  3C41                       endm
   107                          
   108                             ;-----------------------------------------------
   109                             ;  Set MVI Read Page Macro
   110                             ;-----------------------------------------------
   111                             ;
   112                             ;  DESC: Modify MVR_PP in the large or small memory Models.
   113                             ;
   114                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   115                             ;        calculation of indirect address operands used in the
   116                             ;        "mvi A, [pFoo]" instructions.
   117                             ;
   118                             ;  COST: 8 instruction cycles (in LMM only)
   119                          
   120                             macro RAM_SETPAGE_MVR( PG_NUMBER )
   121                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   122                                mov reg[MVR_PP], @PG_NUMBER
   123                             ENDIF
   124  3C41                       endm
   125                          
   126                             ;-----------------------------------------------
   127                             ;  Set MVI Write Page Macro
   128                             ;-----------------------------------------------
   129                             ;
   130                             ;  DESC: Modify MVW_PP in the large or small memory Models.
   131                             ;
   132                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   133                             ;        calculation of indirect address operands used in the
   134                             ;        "mvi [pFoo], A" instructions.
   135                             ;
   136                             ;  COST: 8 instruction cycles (in LMM only)
   137                          
   138                             macro RAM_SETPAGE_MVW( PG_NUMBER )
   139                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   140                                mov reg[MVW_PP], @PG_NUMBER
   141                             ENDIF
   142  3C41                       endm
   143                          
   144                             ;-----------------------------------------------
   145                             ;  Force Index Page Pointer to Stack Page
   146                             ;-----------------------------------------------
   147                             ;
   148                             ;  DESC: Map index-mode operands onto the stack page by modifying IDX_PP.
   149                             ;        See also RAM_LOCK_INDEX_TO_STACKPAGE.
   150                             ;
   151                             ; INPUT: None
   152                             ;
   153                             ;  COST: 8 instruction cycles (in LMM only)
   154                          
   155                             macro RAM_SETPAGE_IDX2STK
   156                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   157                                IF ( SYSTEM_MULTIPAGE_STACK )
   158                                   mov   A, reg[STK_PP]
   159                                   mov   reg[IDX_PP], A
   160                                ELSE
   161                                   RAM_SETPAGE_IDX SYSTEM_STACK_PAGE
   162                                ENDIF
   163                             ENDIF
   164  3C41                       endm
   165                          
   166                             ;-----------------------------------------------
   167                             ;  Change Memory Mode
   168                             ;-----------------------------------------------
   169                             ;
   170                             ;  DESC: Modify FLAG_PAGEMODE bits in the large and small memory Models.
   171                             ;
   172                             ; INPUT: Constant value for PGMODE bitfield of CPU Flag register, F.
   173                             ;        See FLAG_PGMODE_{x} constants in M8C.INC.
   174                             ;
   175                             ;  COST: 8 instruction cycles (in LMM only)
   176                          
   177                             macro RAM_CHANGE_PAGE_MODE( MODE )
   178                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   179                                and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
   180                                or    F,  FLAG_PGMODE_MASK & @MODE
   181                             ENDIF
   182  3C41                       endm
   183                          
   184                             ;-----------------------------------------------
   185                             ;  Set Large Memory Model Native Paging Mode
   186                             ;-----------------------------------------------
   187                             ;
   188                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   189                             ;        paging mode *IFF* a simple "OR" is guaranteed to work---for
   190                             ;        example, in an ISR, when the PGMODE bits have been cleared
   191                             ;        to zero. If a simple "OR" is not guaranteed to work, use
   192                             ;        the slower RAM_RESTORE_NATIVE_PAGING instead.
   193                             ;
   194                             ; INPUT: none
   195                             ;
   196                             ;  COST: 4 instruction cycles (in LMM only)
   197                          
   198                             macro RAM_SET_NATIVE_PAGING
   199                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   200                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   201                                or    F,  FLAG_PGMODE_11b            ; LMM w/ IndexPage<==>StackPage
   202                             ENDIF ;  PGMODE LOCKED
   203                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   204                                or    F,  FLAG_PGMODE_10b            ; LMM with independent IndexPage
   205                             ENDIF ; PGMODE FREE
   206                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   207  3C41                       endm
   208                          
   209                             ;-----------------------------------------------
   210                             ; Restore Large Memory Model Native Paging Mode
   211                             ;-----------------------------------------------
   212                             ;
   213                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   214                             ;        paging mode. Always works because it clears the PGMODE bits
   215                             ;        before OR-ing in the new ones. See RAM_RESTORE_NATIVE_PAGING
   216                             ;        for a faster method.
   217                             ;
   218                             ; INPUT: none
   219                             ;
   220                             ;  COST: 8 instruction cycles (in LMM only)
   221                          
   222                             macro RAM_RESTORE_NATIVE_PAGING
   223                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   224                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   225                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_11b ; LMM w/ IndexPage<==>StackPage
   226                             ENDIF ;  PGMODE LOCKED
   227                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   228                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b ; LMM with independent IndexPage
   229                             ENDIF ; PGMODE FREE
   230                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   231  3C41                       endm
   232                          
   233                             ;-----------------------------------------------
   234                             ; Force indexed addr mode operands to Stack Pg
   235                             ;-----------------------------------------------
   236                             ;
   237                             ;  DESC: Force instructions that use indexed address mode to reference the
   238                             ;        stack page (as defined by STK_PP). This macro sets the "Indexed
   239                             ;        Stack Mode" bit (LSB) of the PGMODE bit field in the CPU Flag
   240                             ;        register, F. (See also RAM_SETPAGE_IDX2STK, above.)
   241                             ;
   242                             ; INPUT: none
   243                             ;
   244                             ;  COST: 4 instruction cycles (in LMM only)
   245                          
   246                             macro RAM_X_POINTS_TO_STACKPAGE
   247                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   248                                or   F, FLAG_PGMODE_01b
   249                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   250  3C41                       endm
   251                          
   252                             ;-----------------------------------------------
   253                             ;  Force indexed addr mode operands to Index Pg
   254                             ;-----------------------------------------------
   255                             ;
   256                             ;  DESC: Permit instructions that use indexed address mode to reference page
   257                             ;        zero or the page pointed to by the IDX_PP register, depending on the
   258                             ;        setting of the MSb (or "Direct Page Mode" bit) of the PGMODE bits
   259                             ;        in the CPU Flag register, F. (This macro clears the PGMODE LSb.)
   260                             ;
   261                             ; INPUT: none
   262                             ;
   263                             ;  COST: 4 instruction cycles (in LMM only)
   264                          
   265                             macro RAM_X_POINTS_TO_INDEXPAGE
   266                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   267                                and  F, ~FLAG_PGMODE_01b
   268                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   269  3C41                       endm
   270                          
   271                             ;-----------------------------------------------
   272                             ;  Function Prologue
   273                             ;-----------------------------------------------
   274                             ;
   275                             ;  Prologue for functions that run in the LMM and SMM.
   276                             ;
   277                          
   278                             macro RAM_PROLOGUE( ACTUAL_CLASS )
   279                          
   280                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   281                             ; Nothing to do
   282                             ENDIF ; RAM_USE_CLASS_1
   283                          
   284                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   285                                IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   286                                   RAM_X_POINTS_TO_STACKPAGE         ; exit native paging mode!
   287                                ENDIF
   288                             ENDIF ; RAM_USE_CLASS_2
   289                          
   290                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   291                                IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   292                                   RAM_X_POINTS_TO_INDEXPAGE         ; exit native paging mode!
   293                                ENDIF
   294                             ENDIF ; RAM_USE_CLASS_3
   295                          
   296                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   297                             ; Nothing to do
   298                             ENDIF ; RAM_USE_CLASS_4
   299                          
   300  3C41                       endm
   301                          
   302                             ;-----------------------------------------------
   303                             ;  Function Epilogue
   304                             ;-----------------------------------------------
   305                             ;
   306                             ;  Prologue for functions that run in the LMM and SMM.
   307                             ;
   308                          
   309                             macro RAM_EPILOGUE( ACTUAL_CLASS )
   310                          
   311                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   312                             ; Nothing to do
   313                             ENDIF ; RAM_USE_CLASS_1
   314                          
   315                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   316                                RAM_RESTORE_NATIVE_PAGING
   317                             ENDIF ; RAM_USE_CLASS_2
   318                          
   319                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   320                                RAM_RESTORE_NATIVE_PAGING
   321                             ENDIF ; RAM_USE_CLASS_3
   322                          
   323                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   324                             ; Nothing to do
   325                             ENDIF ; RAM_USE_CLASS_4
   326                          
   327  3C41                       endm
   328                          
   329                             ;-----------------------------------------------
   330                             ;  Preserve Register
   331                             ;-----------------------------------------------
   332                             ;
   333                             ;  DESC: Preserve a register value on the stack
   334                             ;
   335                             ; INPUT: Name or address of register in I/O Space
   336                             ;        The I/O bank is an implicit parameter. That is, this function will
   337                             ;        Access the I/O bank currently specified by the CPU Flag register.
   338                             ;
   339                             ;  USES: CPU 'A' register
   340                             ;
   341                             ;  COST: 9 instruction cycles
   342                          
   343                             macro REG_PRESERVE( IOReg )
   344                             mov   A, reg[ @IOReg ]
   345                             push  A
   346  3C41                       endm
   347                          
   348                             ;-----------------------------------------------
   349                             ;  Restore Register
   350                             ;-----------------------------------------------
   351                             ;
   352                             ;  DESC: Restore a register value from the stack
   353                             ;
   354                             ; INPUT: Name or address of register in I/O Space
   355                             ;        The I/O bank is an implicit parameter. That is, this function will
   356                             ;        Access the I/O bank currently specified by the CPU Flag register.
   357                             ;
   358                             ;  USES: CPU 'A' register
   359                             ;
   360                             ;  COST: 10 instruction cycles
   361                          
   362                             macro REG_RESTORE( IOReg )
   363                             pop   A
   364                             mov   reg[ @IOReg ], A
   365  3C41                       endm
   366                          
   367                             ;-----------------------------------------------
   368                             ;  Preserve Volatile Page Pointer Registers
   369                             ;-----------------------------------------------
   370                             ;
   371                             ;  DESC: Invoked by ISRs before switching to the LMM mode and calling
   372                             ;        functions that require on it.
   373                             ;
   374                             ; INPUT: none
   375                             ;
   376                             ;  USES: CPU 'A' register
   377                             ;
   378                             ;  COST: 45 instruction cycles (in LMM only)
   379                          
   380                             macro ISR_PRESERVE_PAGE_POINTERS
   381                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   382                                REG_PRESERVE CUR_PP
   383                                REG_PRESERVE IDX_PP
   384                                REG_PRESERVE MVR_PP
   385                                REG_PRESERVE MVW_PP
   386                             ENDIF
   387  3C41                       endm
   388                          
   389                             ;-----------------------------------------------
   390                             ;  Restore Volatile Page Pointer Registers
   391                             ;-----------------------------------------------
   392                             ;
   393                             ;  DESC: Undo for RAM_PRESERVE_PAGE_POINTERS macro. Invoked by ISRs after
   394                             ;        calling functions that run in the LMM mode and before executing
   395                             ;        the RETI instruction.
   396                             ;
   397                             ; INPUT: none
   398                             ;
   399                             ;  USES: CPU 'A' register
   400                             ;
   401                             ;  COST: 50 instruction cycles (in LMM only)
   402                          
   403                             macro ISR_RESTORE_PAGE_POINTERS
   404                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   405                                REG_RESTORE MVW_PP
   406                                REG_RESTORE MVR_PP
   407                                REG_RESTORE IDX_PP
   408                                REG_RESTORE CUR_PP
   409                             ENDIF
   410                             endm
      + 3C41                    
      + 3C41                    ; end of file Memory.inc
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  FILENAME:   UART_Board.inc
     4                          ;;  Version: 5.3, Updated on 2013/5/19 at 10:44:49
     5                          ;;  Generated by PSoC Designer 5.4.2946
     6                          ;;
     7                          ;;  DESCRIPTION:  Assembler declarations for the UART user module.
     8                          ;;-----------------------------------------------------------------------------
     9                          ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
    10                          ;;*****************************************************************************
    11                          ;;*****************************************************************************
    12                          
    13                          ;--------------------------------------------------
    14                          ; Constants for UART_Board API's
    15                          ;--------------------------------------------------
    16                          
    17                          ;mask value for global int reg bit for TX instance
    18  0040                    UART_Board_TX_INT_MASK:                      equ 0x40
    19  00E1                    UART_Board_TX_INT_REG:                       equ 0x0e1  ;TX interrupt address
    20  0080                    UART_Board_RX_INT_MASK:                      equ 0x80  ;mask value for global int reg bit for RX ins
                                tance
    21  00E1                    UART_Board_RX_INT_REG:                       equ 0x0e1  ;RX interrupt address
    22                          
    23  0000                    UART_Board_RXBUF_ENABLE:                     equ 0
    24                          
    25                          ; Interrupt control masks
    26  0001                    UART_Board_ENABLE_RX_INT:                    equ 0x01
    27  0000                    UART_Board_DISABLE_RX_INT:                   equ 0x00
    28  0002                    UART_Board_ENABLE_TX_INT:                    equ 0x02
    29  0000                    UART_Board_DISABLE_TX_INT:                   equ 0x00
    30                          
    31  0000                    UART_Board_INT_MODE_TX_REG_EMPTY:            equ 0x00
    32  0001                    UART_Board_INT_MODE_TX_COMPLETE:             equ 0x01
    33                          
    34  0020                    UART_Board_RX_IGNORE_BELOW:                  equ 0x20
    35  0010                    UART_Board_RX_BUFFER_SIZE:                   equ 0x10
    36  000D                    UART_Board_CMD_TERM:                         equ 0xd
    37  0020                    UART_Board_DELIMITER:                        equ 0x20
    38  0000                    UART_Board_BACKSPACE_ENABLE:                 equ 0x0
    39                          
    40                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    41                          ;       WARNING WARNING WARNING
    42                          ; The following equates are for backwards
    43                          ; compatibility only and should not be used
    44                          ; for new designs.
    45                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    46                          
    47                          ;------------------------------------
    48                          ;  Parity masks
    49                          ;------------------------------------
    50  0000                    UART_PARITY_NONE:       equ   00h
    51  0002                    UART_PARITY_EVEN:       equ   02h
    52  0006                    UART_PARITY_ODD:        equ   06h
    53                          
    54                          ;------------------------------------
    55                          ;  TX Status Register masks
    56                          ;------------------------------------
    57  0020                    UART_TX_COMPLETE:       equ   20h
    58  0010                    UART_TX_BUFFER_EMPTY:   equ   10h
    59                          
    60                          ;------------------------------------
    61                          ;  RX Status Register masks
    62                          ;------------------------------------
    63  0010                    UART_RX_ACTIVE:         equ   10h
    64  0008                    UART_RX_COMPLETE:       equ   08h
    65  0080                    UART_RX_PARITY_ERROR:   equ   80h
    66  0040                    UART_RX_OVERRUN_ERROR:  equ   40h
    67  0020                    UART_RX_FRAMING_ERROR:  equ   20h
    68  00E0                    UART_RX_NO_ERROR:       equ   E0h
    69                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    70                          ;             END WARNING
    71                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    72                          
    73                          
    74                          
    75                          ;------------------------------------
    76                          ;  Parity masks
    77                          ;------------------------------------
    78  0000                    UART_Board_PARITY_NONE:                 equ   00h
    79  0002                    UART_Board_PARITY_EVEN:                 equ   02h
    80  0006                    UART_Board_PARITY_ODD:                  equ   06h
    81                          
    82                          ;------------------------------------
    83                          ;  TX Status Register masks
    84                          ;------------------------------------
    85  0020                    UART_Board_TX_COMPLETE:                 equ   20h
    86  0010                    UART_Board_TX_BUFFER_EMPTY:             equ   10h
    87                          
    88                          ;------------------------------------
    89                          ;  RX Status Register masks
    90                          ;------------------------------------
    91  0010                    UART_Board_RX_ACTIVE:                   equ   10h
    92  0008                    UART_Board_RX_COMPLETE:                 equ   08h
    93  0008                    UART_Board_RX_REG_FULL:                 equ   08h
    94  0080                    UART_Board_RX_PARITY_ERROR:             equ   80h
    95  0040                    UART_Board_RX_OVERRUN_ERROR:            equ   40h
    96  0020                    UART_Board_RX_FRAMING_ERROR:            equ   20h
    97  00E0                    UART_Board_RX_ERROR:                    equ   E0h
    98  0001                    UART_Board_RX_ENABLE:                   equ   01h
    99                          
   100  00F0                    UART_Board_RX_BUF_ERROR:                equ   F0h  ; Mask for any Rx that may occur.
   101  0010                    UART_Board_RX_BUF_OVERRUN:              equ   10h  ; This indicates the software buffer has
   102                                                                                  ; been over run.
   103  0001                    UART_Board_RX_BUF_CMDTERM:              equ   01h  ; Command terminator has been received.
   104                          
   105  0001                    UART_Board_RX_NO_DATA:                  equ   01h
   106  00E0                    UART_Board_RX_NO_ERROR:                 equ   E0h
   107                          
   108                          
   109                          ;--------------------------------------------------
   110                          ; Registers Address Constants for UART_Board
   111                          ;--------------------------------------------------
   112                          ;---------------------------------
   113                          ;  Registers used by TX
   114                          ;---------------------------------
   115  003B                    UART_Board_TX_CONTROL_REG:  equ 3bh            ; Control register
   116  0038                    UART_Board_TX_SHIFT_REG:    equ 38h               ; TX Shift Register register
   117  0039                    UART_Board_TX_BUFFER_REG:   equ 39h               ; TX Buffer Register
   118  0038                    UART_Board_TX_FUNC_REG: equ 38h         ; Function register
   119  0039                    UART_Board_TX_INPUT_REG:    equ 39h            ; Input register
   120  003A                    UART_Board_TX_OUTPUT_REG:   equ 3ah           ; Output register
   121                          
   122                          ;---------------------------------
   123                          ;  Registers used by RX
   124                          ;---------------------------------
   125  003F                    UART_Board_RX_CONTROL_REG:  equ 3fh            ; Control register
   126  003C                    UART_Board_RX_SHIFT_REG:    equ 3ch               ; RX Shift Register register
   127  003E                    UART_Board_RX_BUFFER_REG:   equ 3eh               ; RX Buffer Register
   128  003C                    UART_Board_RX_FUNC_REG: equ 3ch         ; Function register
   129  003D                    UART_Board_RX_INPUT_REG:    equ 3dh            ; Input register
   130  003E                    UART_Board_RX_OUTPUT_REG:   equ 3eh           ; Output register
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  Filename:   UART_Board.asm
     4                          ;;  Version: 5.3, Updated on 2013/5/19 at 10:44:49
     5                          ;;  Generated by PSoC Designer 5.4.2946
     6                          ;;
     7                          ;;  DESCRIPTION:  UART User Module software implementation file for the
     8                          ;;                22/24/25/26/27xxx families.
     9                          ;;
    10                          ;;
    11                          ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
    12                          ;;        arguments and observe the associated "Registers are volatile" policy.
    13                          ;;        This means it is the caller's responsibility to preserve any values
    14                          ;;        in the X and A registers that are still needed after the API functions
    15                          ;;        returns. For Large Memory Model devices it is also the caller's 
    16                          ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
    17                          ;;        MVW_PP registers. Even though some of these registers may not be modified
    18                          ;;        now, there is no guarantee that will remain the case in future releases.
    19                          ;;-----------------------------------------------------------------------------
    20                          ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
    21                          ;;*****************************************************************************
    22                          ;;*****************************************************************************
    23                          
    24                          
    25                          include "m8c.inc"
    26                          include "memory.inc"
    27                          include "UART_Board.inc"
    28                          
    29                          ;-----------------------------------------------
    30                          ;  Global Symbols
    31                          ;-----------------------------------------------
    32                          ;-------------------------------------------------------------------
    33                          ;  Declare the functions global for both assembler and C compiler.
    34                          ;
    35                          ;  Note that there are two names for each API. First name is
    36                          ;  assembler reference. Name with underscore is name refence for
    37                          ;  C compiler.  Calling function in C source code does not require
    38                          ;  the underscore.
    39                          ;-------------------------------------------------------------------
    40                          export  UART_Board_SetTxIntMode
    41                          export _UART_Board_SetTxIntMode
    42                          export  UART_Board_EnableInt
    43                          export _UART_Board_EnableInt
    44                          export  UART_Board_DisableInt
    45                          export _UART_Board_DisableInt
    46                          
    47                          export  UART_Board_Start
    48                          export _UART_Board_Start
    49                          export  UART_Board_Stop
    50                          export _UART_Board_Stop
    51                          export  UART_Board_SendData
    52                          export _UART_Board_SendData
    53                          export  UART_Board_bReadTxStatus
    54                          export _UART_Board_bReadTxStatus
    55                          export  UART_Board_bReadRxData
    56                          export _UART_Board_bReadRxData
    57                          export  UART_Board_bReadRxStatus
    58                          export _UART_Board_bReadRxStatus
    59                          
    60                          export  UART_Board_IntCntl
    61                          export _UART_Board_IntCntl
    62                          
    63                          export  UART_Board_TxIntMode
    64                          export _UART_Board_TxIntMode
    65                          
    66                          export  UART_Board_PutSHexByte
    67                          export _UART_Board_PutSHexByte
    68                          export  UART_Board_PutSHexInt
    69                          export _UART_Board_PutSHexInt
    70                          
    71                          export  UART_Board_CPutString
    72                          export _UART_Board_CPutString
    73                          export  UART_Board_PutString
    74                          export _UART_Board_PutString
    75                          export  UART_Board_PutChar
    76                          export _UART_Board_PutChar
    77                          export  UART_Board_Write
    78                          export _UART_Board_Write
    79                          export  UART_Board_CWrite
    80                          export _UART_Board_CWrite
    81                          
    82                          export  UART_Board_cGetChar
    83                          export _UART_Board_cGetChar
    84                          export  UART_Board_cReadChar
    85                          export _UART_Board_cReadChar
    86                          export  UART_Board_iReadChar
    87                          export _UART_Board_iReadChar
    88                          export  UART_Board_PutCRLF
    89                          export _UART_Board_PutCRLF
    90                          
    91                          IF (UART_Board_RXBUF_ENABLE)
    92                          export  UART_Board_CmdReset
    93                          export _UART_Board_CmdReset
    94                          export  UART_Board_bCmdCheck
    95                          export _UART_Board_bCmdCheck
    96                          export  UART_Board_bCmdLength
    97                          export _UART_Board_bCmdLength
    98                          export  UART_Board_bErrCheck
    99                          export _UART_Board_bErrCheck
   100                          
   101                          export  UART_Board_szGetParam
   102                          export _UART_Board_szGetParam
   103                          export  UART_Board_szGetRestOfParams
   104                          export _UART_Board_szGetRestOfParams
   105                          ENDIF
   106                          
   107                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   108                          ; WARNING WARNING WARNING
   109                          ; The following exports are for backwards compatibility only and should
   110                          ; not be used for new designs. They may be eliminated in a future release.
   111                          ; Their status is "NO FURTHER MAINTENANCE". 
   112                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   113                          export  bUART_Board_ReadTxStatus
   114                          export _bUART_Board_ReadTxStatus
   115                          export  bUART_Board_ReadRxData
   116                          export _bUART_Board_ReadRxData
   117                          export  bUART_Board_ReadRxStatus
   118                          export _bUART_Board_ReadRxStatus
   119                          	
   120                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   121                          ;             END WARNING
   122                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   123                          
   124                          ;-----------------------------------------------
   125                          ; Variable Allocation
   126                          ;-----------------------------------------------
   127                          IF (UART_Board_RXBUF_ENABLE)
   128                              
   129                          area UART_Board_RAM (RAM, REL, CON)
   130                              
   131                           ptrParam:   BLK  1
   132                          
   133                          ENDIF
   134                          
   135                          area text (ROM,REL)
   136                          
   137                          ;-----------------------------------------------
   138                          ;  EQUATES
   139                          ;-----------------------------------------------
   140  0001                    bfCONTROL_REG_START_BIT:        equ    1    ; Control register start bit
   141  0010                    bfFUNCTION_REG_TX_INT_MODE_BIT: equ 0x10    ; the TX Int Mode bit
   142                          
   143                          area UserModules (ROM, REL, CON)
   144                          
   145                          ;=============================================================================
   146                          ;=============================================================================
   147                          ;
   148                          ;     Low-Level Commands
   149                          ;
   150                          ;=============================================================================
   151                          ;=============================================================================
   152                          
   153                          .SECTION
   154                          ;-----------------------------------------------------------------------------
   155                          ;  FUNCTION NAME: UART_Board_EnableInt
   156                          ;
   157                          ;  DESCRIPTION:
   158                          ;     Enables this UART's interrupt by setting the interrupt enable mask
   159                          ;     bit associated with this User Module. Remember to call the global
   160                          ;     interrupt enable function by using the macro: M8C_EnableGInt.
   161                          ;-----------------------------------------------------------------------------
   162                          ;
   163                          ;  ARGUMENTS:
   164                          ;     none.
   165                          ;
   166                          ;  RETURNS:
   167                          ;     none.
   168                          ;
   169                          ;  SIDE EFFECTS:
   170                          ;    The A and X registers may be modified by this or future implementations
   171                          ;    of this function.  The same is true for all RAM page pointer registers in
   172                          ;    the Large Memory Model.  When necessary, it is the calling function's
   173                          ;    responsibility to perserve their values across calls to fastcall16 
   174                          ;    functions.
   175                          ;
   176  2DB1                     UART_Board_EnableInt:
   177  2DB1                    _UART_Board_EnableInt:
   178                             RAM_PROLOGUE RAM_USE_CLASS_1
   179  2DB1  43 E1 40             M8C_EnableIntMask UART_Board_TX_INT_REG, UART_Board_TX_INT_MASK
   180  2DB4  43 E1 80             M8C_EnableIntMask UART_Board_RX_INT_REG, UART_Board_RX_INT_MASK
   181                             RAM_EPILOGUE RAM_USE_CLASS_1
   182  2DB7  7F                   ret
   183                          .ENDSECTION
   184                          
   185                              
   186                          .SECTION
   187                          ;-----------------------------------------------------------------------------
   188                          ;  FUNCTION NAME: UART_Board_DisableInt
   189                          ;
   190                          ;  DESCRIPTION:
   191                          ;     Disables this UART's interrupt by clearing the interrupt enable mask bit
   192                          ;     associated with this User Module.
   193                          ;-----------------------------------------------------------------------------
   194                          ;
   195                          ;  ARGUMENTS:
   196                          ;     none.
   197                          ;
   198                          ;  RETURNS:
   199                          ;     none.
   200                          ;
   201                          ;  SIDE EFFECTS:
   202                          ;    The A and X registers may be modified by this or future implementations
   203                          ;    of this function.  The same is true for all RAM page pointer registers in
   204                          ;    the Large Memory Model.  When necessary, it is the calling function's
   205                          ;    responsibility to perserve their values across calls to fastcall16 
   206                          ;    functions.
   207                          ;
   208  2DB8                     UART_Board_DisableInt:
   209  2DB8                    _UART_Board_DisableInt:
   210                             RAM_PROLOGUE RAM_USE_CLASS_1
   211  2DB8  41 E1 BF             M8C_DisableIntMask UART_Board_TX_INT_REG, UART_Board_TX_INT_MASK
   212  2DBB  41 E1 7F             M8C_DisableIntMask UART_Board_RX_INT_REG, UART_Board_RX_INT_MASK
   213                             RAM_EPILOGUE RAM_USE_CLASS_1
   214  2DBE  7F                   ret
   215                          .ENDSECTION
   216                          
   217                          
   218                          .SECTION
   219                          ;-----------------------------------------------------------------------------
   220                          ;  FUNCTION NAME: UART_Board_SetTxIntMode(BYTE bTxIntMode)
   221                          ;
   222                          ;  DESCRIPTION:
   223                          ;     Sets the Tx Interrupt Mode bit in the Function Register.
   224                          ;-----------------------------------------------------------------------------
   225                          ;
   226                          ;  ARGUMENTS:
   227                          ;     BYTE bTxIntMode - The TX Interrupt mode setting. Use defined masks.
   228                          ;        Passed in the A register
   229                          ;
   230                          ;  RETURNS:
   231                          ;     none.
   232                          ;
   233                          ;  SIDE EFFECTS:
   234                          ;    The A and X registers may be modified by this or future implementations
   235                          ;    of this function.  The same is true for all RAM page pointer registers in
   236                          ;    the Large Memory Model.  When necessary, it is the calling function's
   237                          ;    responsibility to perserve their values across calls to fastcall16 
   238                          ;    functions.
   239                          ;
   240                          ;  THEORY of OPERATION OR PROCEDURE:
   241                          ;     Sets the TX interrupt mode bit to define whether the interrupt occurs
   242                          ;     on TX register empty or TX transmit complete
   243                          ;
   244  2DBF                     UART_Board_SetTxIntMode:
   245  2DBF                    _UART_Board_SetTxIntMode:
   246                             RAM_PROLOGUE RAM_USE_CLASS_1
   247  2DBF  71 10                M8C_SetBank1
   248  2DC1  21 01                and   A, UART_Board_INT_MODE_TX_COMPLETE
   249  2DC3  A007                 jz    .SetModeRegEmpty
   250  2DC5  43 38 10             or    REG[UART_Board_TX_FUNC_REG], bfFUNCTION_REG_TX_INT_MODE_BIT
   251  2DC8  70 EF                M8C_SetBank0
   252                             RAM_EPILOGUE RAM_USE_CLASS_1
   253  2DCA  7F                   ret
   254                          
   255  2DCB                    .SetModeRegEmpty:
   256  2DCB  41 38 EF             and   REG[UART_Board_TX_FUNC_REG], ~bfFUNCTION_REG_TX_INT_MODE_BIT
   257  2DCE  70 EF                M8C_SetBank0
   258                             RAM_EPILOGUE RAM_USE_CLASS_1
   259  2DD0  7F                   ret
   260                          .ENDSECTION
   261                          
   262                          
   263                          .SECTION
   264                          ;-----------------------------------------------------------------------------
   265                          ;  FUNCTION NAME: UART_Board_Start(BYTE bParity)
   266                          ;
   267                          ;  DESCRIPTION:
   268                          ;     Sets the start bit and parity in the Control register of this user module.
   269                          ;-----------------------------------------------------------------------------
   270                          ;
   271                          ;  ARGUMENTS:
   272                          ;     BYTE bParity - parity setting for the Transmitter and receiver. Use defined masks.
   273                          ;        Passed in the A register.
   274                          ;
   275                          ;  RETURNS:
   276                          ;     none.
   277                          ;
   278                          ;  SIDE EFFECTS:
   279                          ;    The A and X registers may be modified by this or future implementations
   280                          ;    of this function.  The same is true for all RAM page pointer registers in
   281                          ;    the Large Memory Model.  When necessary, it is the calling function's
   282                          ;    responsibility to perserve their values across calls to fastcall16 
   283                          ;    functions.
   284                          ;
   285  2DD1                     UART_Board_Start:
   286  2DD1                    _UART_Board_Start:
   287                             RAM_PROLOGUE RAM_USE_CLASS_1
   288                             ; Note, Proxy Class 4 only if receive buffer used; otherwise Proxy Class 1.
   289                          
   290  2DD1  29 01                or    A, bfCONTROL_REG_START_BIT
   291  2DD3  60 3B                mov   REG[UART_Board_TX_CONTROL_REG], A
   292  2DD5  60 3F                mov   REG[UART_Board_RX_CONTROL_REG], A
   293                          IF ( UART_Board_RXBUF_ENABLE )
   294                             call  _UART_Board_CmdReset
   295                          ENDIF
   296                             RAM_EPILOGUE RAM_USE_CLASS_1
   297  2DD7  7F                   ret
   298                          .ENDSECTION
   299                          
   300                          
   301                          .SECTION
   302                          ;-----------------------------------------------------------------------------
   303                          ;  FUNCTION NAME: UART_Board_Stop
   304                          ;
   305                          ;  DESCRIPTION:
   306                          ;     Disables UART operation.
   307                          ;-----------------------------------------------------------------------------
   308                          ;
   309                          ;  ARGUMENTS:
   310                          ;     none.
   311                          ;
   312                          ;  RETURNS:
   313                          ;     none.
   314                          ;
   315                          ;  SIDE EFFECTS:
   316                          ;    The A and X registers may be modified by this or future implementations
   317                          ;    of this function.  The same is true for all RAM page pointer registers in
   318                          ;    the Large Memory Model.  When necessary, it is the calling function's
   319                          ;    responsibility to perserve their values across calls to fastcall16 
   320                          ;    functions.
   321                          ;
   322  2DD8                     UART_Board_Stop:
   323  2DD8                    _UART_Board_Stop:
   324                             RAM_PROLOGUE RAM_USE_CLASS_1
   325  2DD8  41 3B FE             and   REG[UART_Board_TX_CONTROL_REG], ~bfCONTROL_REG_START_BIT
   326  2DDB  41 3F FE             and   REG[UART_Board_RX_CONTROL_REG], ~bfCONTROL_REG_START_BIT
   327                             RAM_EPILOGUE RAM_USE_CLASS_1
   328  2DDE  7F                   ret
   329                          .ENDSECTION
   330                          
   331                          
   332                          .SECTION
   333                          ;-----------------------------------------------------------------------------
   334                          ;  FUNCTION NAME: UART_Board_SendData
   335                          ;
   336                          ;  DESCRIPTION:
   337                          ;     Initiates a transmission of data.
   338                          ;-----------------------------------------------------------------------------
   339                          ;
   340                          ;  ARGUMENTS:
   341                          ;     BYTE  TxData - data to transmit. PASSED in A register.
   342                          ;
   343                          ;  RETURNS:
   344                          ;     none.
   345                          ;
   346                          ;  SIDE EFFECTS:
   347                          ;    The A and X registers may be modified by this or future implementations
   348                          ;    of this function.  The same is true for all RAM page pointer registers in
   349                          ;    the Large Memory Model.  When necessary, it is the calling function's
   350                          ;    responsibility to perserve their values across calls to fastcall16 
   351                          ;    functions.
   352                          ;
   353  2DDF                     UART_Board_SendData:
   354  2DDF                    _UART_Board_SendData:
   355                             RAM_PROLOGUE RAM_USE_CLASS_1
   356  2DDF  60 39                mov REG[UART_Board_TX_BUFFER_REG], A
   357                             RAM_EPILOGUE RAM_USE_CLASS_1
   358  2DE1  7F                   ret
   359                          .ENDSECTION
   360                          
   361                          
   362                          .SECTION
   363                          ;-----------------------------------------------------------------------------
   364                          ;  FUNCTION NAME: UART_Board_bReadTxStatus
   365                          ;
   366                          ;  DESCRIPTION:
   367                          ;     Reads the Tx Status bits in the Control/Status register.
   368                          ;-----------------------------------------------------------------------------
   369                          ;
   370                          ;  ARGUMENTS:
   371                          ;     none.
   372                          ;
   373                          ;  RETURNS:
   374                          ;     BYTE  bTxStatus - transmit status data.  Use defined masks for detecting
   375                          ;           status bits (returned in A)
   376                          ;
   377                          ;  SIDE EFFECTS:
   378                          ;    The A and X registers may be modified by this or future implementations
   379                          ;    of this function.  The same is true for all RAM page pointer registers in
   380                          ;    the Large Memory Model.  When necessary, it is the calling function's
   381                          ;    responsibility to perserve their values across calls to fastcall16 
   382                          ;    functions.
   383                          ;
   384  2DE2                     UART_Board_bReadTxStatus:
   385  2DE2                    _UART_Board_bReadTxStatus:
   386  2DE2                     bUART_Board_ReadTxStatus:                       ; For backwards compatibility only
   387  2DE2                    _bUART_Board_ReadTxStatus:                       ; For backwards compatibility only
   388                             RAM_PROLOGUE RAM_USE_CLASS_1
   389  2DE2  5D 3B                mov A,  REG[UART_Board_TX_CONTROL_REG]
   390                             RAM_EPILOGUE RAM_USE_CLASS_1
   391  2DE4  7F                   ret
   392                          .ENDSECTION
   393                          
   394                          
   395                          .SECTION
   396                          ;-----------------------------------------------------------------------------
   397                          ;  FUNCTION NAME: UART_Board_bReadRxData
   398                          ;
   399                          ;  DESCRIPTION:
   400                          ;     Reads the RX buffer register.  Should check the status regiser to make
   401                          ;     sure data is valid.
   402                          ;-----------------------------------------------------------------------------
   403                          ;
   404                          ;  ARGUMENTS:
   405                          ;     none.
   406                          ;
   407                          ;  RETURNS:
   408                          ;     bRxData - returned in A.
   409                          ;
   410                          ;  SIDE EFFECTS:
   411                          ;    The A and X registers may be modified by this or future implementations
   412                          ;    of this function.  The same is true for all RAM page pointer registers in
   413                          ;    the Large Memory Model.  When necessary, it is the calling function's
   414                          ;    responsibility to perserve their values across calls to fastcall16 
   415                          ;    functions.
   416                          ;
   417  2DE5                     UART_Board_bReadRxData:
   418  2DE5                    _UART_Board_bReadRxData:
   419  2DE5                     bUART_Board_ReadRxData:                         ; For backwards compatibility only
   420  2DE5                    _bUART_Board_ReadRxData:                         ; For backwards compatibility only
   421                             RAM_PROLOGUE RAM_USE_CLASS_1
   422  2DE5  5D 3E                mov A, REG[UART_Board_RX_BUFFER_REG]
   423                             RAM_EPILOGUE RAM_USE_CLASS_1
   424  2DE7  7F                   ret
   425                          .ENDSECTION
   426                          
   427                          
   428                          .SECTION
   429                          ;-----------------------------------------------------------------------------
   430                          ;  FUNCTION NAME: UART_Board_bReadRxStatus
   431                          ;
   432                          ;  DESCRIPTION:
   433                          ;     Reads the RX Status bits in the Control/Status register.
   434                          ;-----------------------------------------------------------------------------
   435                          ;
   436                          ;  ARGUMENTS:
   437                          ;     none.
   438                          ;
   439                          ;  RETURNS:
   440                          ;     BYTE  bRXStatus - receive status data.  Use the following defined bits
   441                          ;                       masks: RX_COMPLETE and RX_BUFFER_EMPTY
   442                          ;           returned in A.
   443                          ;
   444                          ;  SIDE EFFECTS:
   445                          ;    The A and X registers may be modified by this or future implementations
   446                          ;    of this function.  The same is true for all RAM page pointer registers in
   447                          ;    the Large Memory Model.  When necessary, it is the calling function's
   448                          ;    responsibility to perserve their values across calls to fastcall16 
   449                          ;    functions.
   450                          ;
   451  2DE8                     UART_Board_bReadRxStatus:
   452  2DE8                    _UART_Board_bReadRxStatus:
   453  2DE8                     bUART_Board_ReadRxStatus:                       ; For backwards compatibility only
   454  2DE8                    _bUART_Board_ReadRxStatus:                       ; For backwards compatibility only
   455                             RAM_PROLOGUE RAM_USE_CLASS_1
   456  2DE8  5D 3F                mov A,  REG[UART_Board_RX_CONTROL_REG]
   457                             RAM_EPILOGUE RAM_USE_CLASS_1
   458  2DEA  7F                   ret
   459                          .ENDSECTION
   460                          
   461                          
   462                          .SECTION
   463                          ;-----------------------------------------------------------------------------
   464                          ;  FUNCTION NAME: UART_Board_TxIntMode
   465                          ;
   466                          ;  DESCRIPTION:
   467                          ;     This function is used to change the TX Interrupt mode.
   468                          ;-----------------------------------------------------------------------------
   469                          ;
   470                          ;  ARGUMENTS:
   471                          ;     A => Tx Interrupt mode
   472                          ;             0 => Interrupt on TX_Reg_Empty  (Default)
   473                          ;             1 => Interrupt on TX Complete
   474                          ;
   475                          ;  RETURNS:
   476                          ;     none.
   477                          ;
   478                          ;  SIDE EFFECTS:
   479                          ;    The A and X registers may be modified by this or future implementations
   480                          ;    of this function.  The same is true for all RAM page pointer registers in
   481                          ;    the Large Memory Model.  When necessary, it is the calling function's
   482                          ;    responsibility to perserve their values across calls to fastcall16 
   483                          ;    functions.
   484                          ;
   485  2DEB                     UART_Board_TxIntMode:
   486  2DEB                    _UART_Board_TxIntMode:
   487                             RAM_PROLOGUE RAM_USE_CLASS_1
   488                          
   489  2DEB  21 01                and  A,UART_Board_INT_MODE_TX_COMPLETE
   490  2DED  71 10                M8C_SetBank1
   491  2DEF  39 01                cmp  A,UART_Board_INT_MODE_TX_COMPLETE
   492  2DF1  A006                 jz   .SetTxCmpMode
   493                          
   494  2DF3  41 38 EF             and  reg[UART_Board_TX_FUNC_REG],0xEF         ; Set Interrupt on Tx_Reg_Empty
   495  2DF6  8004                 jmp  .TxIntMode_End
   496                          
   497  2DF8                    .SetTxCmpMode:                                       ; Set Interrupt on TX Complete
   498  2DF8  43 38 10             or   reg[UART_Board_TX_FUNC_REG],0x10
   499                          
   500  2DFB                    .TxIntMode_End:
   501  2DFB  70 EF                M8C_SetBank0
   502                             RAM_EPILOGUE RAM_USE_CLASS_1
   503  2DFD  7F                   ret
   504                          .ENDSECTION
   505                          
   506                              
   507                          .SECTION
   508                          ;-----------------------------------------------------------------------------
   509                          ;  FUNCTION NAME: UART_Board_IntCntl
   510                          ;
   511                          ;  DESCRIPTION:
   512                          ;     This function is used to enable/disable the Rx and Tx interrupt.
   513                          ;-----------------------------------------------------------------------------
   514                          ;
   515                          ;  ARGUMENTS:
   516                          ;     A => Interrupt mask
   517                          ;
   518                          ;  RETURNS:
   519                          ;     none.
   520                          ;
   521                          ;  SIDE EFFECTS:
   522                          ;    The A and X registers may be modified by this or future implementations
   523                          ;    of this function.  The same is true for all RAM page pointer registers in
   524                          ;    the Large Memory Model.  When necessary, it is the calling function's
   525                          ;    responsibility to perserve their values across calls to fastcall16 
   526                          ;    functions.
   527                          ;
   528                          ;  THEORY of OPERATION or PROCEDURE:
   529                          ;     Set or Clears the Tx/Rx user module interrupt enable mask bit in the TX
   530                          ;     and RX block.
   531                          ;
   532  2DFE                     UART_Board_IntCntl:
   533  2DFE                    _UART_Board_IntCntl:
   534                             RAM_PROLOGUE RAM_USE_CLASS_1
   535                          
   536  2DFE  08                   push A
   537  2DFF  21 01                and  A,UART_Board_ENABLE_RX_INT
   538  2E01  A006                 jz   .DisRxInt
   539                               ; Enable Rx Interrupt
   540  2E03  43 E1 80             M8C_EnableIntMask UART_Board_RX_INT_REG, UART_Board_RX_INT_MASK
   541  2E06  8004                 jmp  .CheckTxInt
   542  2E08                    .DisRxInt:
   543                               ; Disable Rx Interrupt
   544  2E08  41 E1 7F             M8C_DisableIntMask UART_Board_RX_INT_REG, UART_Board_RX_INT_MASK
   545                          
   546  2E0B                    .CheckTxInt:
   547  2E0B  18                   pop  A
   548  2E0C  21 02                and  A,UART_Board_ENABLE_TX_INT
   549  2E0E  A006                 jz   .DisTxInt
   550                               ; Enable Tx Interrupt
   551  2E10  43 E1 40             M8C_EnableIntMask UART_Board_TX_INT_REG, UART_Board_TX_INT_MASK
   552  2E13  8004                 jmp  .End_IntCntl
   553  2E15                    .DisTxInt:
   554                               ; Disable Tx Interrupt
   555  2E15  41 E1 BF             M8C_DisableIntMask UART_Board_TX_INT_REG, UART_Board_TX_INT_MASK
   556                          
   557  2E18                    .End_IntCntl:
   558                             RAM_EPILOGUE RAM_USE_CLASS_1
   559  2E18  7F                   ret
   560                          .ENDSECTION
   561                          
   562                          
   563                          ;=============================================================================
   564                          ;=============================================================================
   565                          ;
   566                          ;     High-Level Commands
   567                          ;
   568                          ;=============================================================================
   569                          ;=============================================================================
   570                          
   571                          
   572                          ;-----------------------------------------------------------------------------
   573                          ;  FUNCTION NAME: UART_Board_PutSHexByte
   574                          ;
   575                          ;  DESCRIPTION:
   576                          ;     Print a byte in Hex (two characters) to the UART Tx
   577                          ;-----------------------------------------------------------------------------
   578                          ;
   579                          ;  ARGUMENTS:
   580                          ;     A  => (BYTE) Data/char to be printed
   581                          ;
   582                          ;  RETURNS:
   583                          ;     none.
   584                          ;
   585                          ;  SIDE EFFECTS:
   586                          ;    The A and X registers may be modified by this or future implementations
   587                          ;    of this function.  The same is true for all RAM page pointer registers in
   588                          ;    the Large Memory Model.  When necessary, it is the calling function's
   589                          ;    responsibility to perserve their values across calls to fastcall16 
   590                          ;    functions.
   591                          ;
   592                          .LITERAL
   593  2E19                    UART_Board_HEX_STR:
   594  2E19  30 31 32 33 34 35      DS    "0123456789ABCDEF"
              36 37 38 39 41 42 
              43 44 45 46       
   595                          .ENDLITERAL
   596                          
   597                          .SECTION
   598  2E29                     UART_Board_PutSHexByte:
   599  2E29                    _UART_Board_PutSHexByte:
   600                             RAM_PROLOGUE RAM_USE_CLASS_1
   601  2E29  08                   push  A                             ; Save lower nibble
   602  2E2A  67                   asr   A                             ; Shift high nibble to right
   603  2E2B  67                   asr   A
   604  2E2C  67                   asr   A
   605  2E2D  67                   asr   A
   606  2E2E  21 0F                and   A,0Fh                         ; Mask off nibble
   607  2E30  FFE7                 index UART_Board_HEX_STR            ; Get Hex value
   608  2E32  900F                 call  UART_Board_PutChar            ; Write data to screen
   609  2E34  18                   pop   A                             ; Restore value
   610  2E35  21 0F                and   A,0Fh                         ; Mask off lower nibble
   611  2E37  FFE0                 index UART_Board_HEX_STR            ; Get Hex value
   612  2E39  9008                 call  UART_Board_PutChar            ; Write data to screen
   613                             RAM_EPILOGUE RAM_USE_CLASS_1
   614  2E3B  7F                   ret
   615                          .ENDSECTION
   616                          
   617                          
   618                          .SECTION
   619                          ;-----------------------------------------------------------------------------
   620                          ;  FUNCTION NAME: UART_Board_PutSHexInt
   621                          ;
   622                          ;  DESCRIPTION:
   623                          ;     Print an Int in Hex (four characters) to UART Tx
   624                          ;-----------------------------------------------------------------------------
   625                          ;
   626                          ;  ARGUMENTS:
   627                          ;     Pointer to string
   628                          ;     A  => ASB of Int
   629                          ;     X  => MSB of Int
   630                          ;
   631                          ;  RETURNS:
   632                          ;     none.
   633                          ;
   634                          ;  SIDE EFFECTS:
   635                          ;    The A and X registers may be modified by this or future implementations
   636                          ;    of this function.  The same is true for all RAM page pointer registers in
   637                          ;    the Large Memory Model.  When necessary, it is the calling function's
   638                          ;    responsibility to perserve their values across calls to fastcall16 
   639                          ;    functions.
   640                          ;
   641                          
   642  2E3C                     UART_Board_PutSHexInt:
   643  2E3C                    _UART_Board_PutSHexInt:
   644                             RAM_PROLOGUE RAM_USE_CLASS_1
   645  2E3C  4B                   swap  A,X
   646  2E3D  9FEA                 call  UART_Board_PutSHexByte        ; Print MSB
   647  2E3F  5B                   mov   A,X                           ; Move LSB into position
   648  2E40  9FE7                 call  UART_Board_PutSHexByte        ; Print LSB
   649                             RAM_EPILOGUE RAM_USE_CLASS_1
   650  2E42  7F                   ret
   651                          .ENDSECTION
   652                          
   653                          
   654                          .SECTION
   655                          ;-----------------------------------------------------------------------------
   656                          ;  FUNCTION NAME: UART_Board_PutChar
   657                          ;
   658                          ;  DESCRIPTION:
   659                          ;     Send character out through UART TX port.
   660                          ;-----------------------------------------------------------------------------
   661                          ;
   662                          ;  ARGUMENTS:
   663                          ;     A has Character to send to UART Tx Port
   664                          ;
   665                          ;  RETURNS:
   666                          ;     none
   667                          ;
   668                          ;  SIDE EFFECTS:
   669                          ;    The A and X registers may be modified by this or future implementations
   670                          ;    of this function.  The same is true for all RAM page pointer registers in
   671                          ;    the Large Memory Model.  When necessary, it is the calling function's
   672                          ;    responsibility to perserve their values across calls to fastcall16 
   673                          ;    functions.
   674                          ;
   675                          
   676                             macro InLinePutChar( Source )
   677                          .BufEmptyWaitLoop:
   678                             tst REG[UART_Board_TX_CONTROL_REG], UART_Board_TX_BUFFER_EMPTY     ; Check Tx Status
   679                             jz  .BufEmptyWaitLoop
   680                             mov REG[UART_Board_TX_BUFFER_REG], @Source    ; Write data to Tx Port
   681  2E43                       endm
   682                          
   683  2E43                     UART_Board_PutChar:
   684  2E43                    _UART_Board_PutChar:
   685                             RAM_PROLOGUE RAM_USE_CLASS_1
   686                             InLinePutChar A
      + 2E43                    ; Nothing to do
??0000:
      + 2E43  49 3B 10          	tst	reg[59], 16
      + 2E46  AFFC              	jz	??0000
      + 2E48  60 39             	mov	reg[57], a
   687                             RAM_EPILOGUE RAM_USE_CLASS_1
   688  2E4A  7F                   ret
   689                          .ENDSECTION
   690                          
   691                          
   692                          .SECTION
   693                          ;-----------------------------------------------------------------------------
   694                          ;  FUNCTION NAME: UART_Board_cGetChar
   695                          ;
   696                          ;  DESCRIPTION:
   697                          ;     Read character from UART RX port.
   698                          ;-----------------------------------------------------------------------------
   699                          ;
   700                          ;  ARGUMENTS:
   701                          ;      none
   702                          ;
   703                          ;  RETURNS:
   704                          ;     char that is returned from UART
   705                          ;
   706                          ;  SIDE EFFECTS:
   707                          ;    The A and X registers may be modified by this or future implementations
   708                          ;    of this function.  The same is true for all RAM page pointer registers in
   709                          ;    the Large Memory Model.  When necessary, it is the calling function's
   710                          ;    responsibility to perserve their values across calls to fastcall16 
   711                          ;    functions.
   712                          ;
   713                          ;    Program flow will stay in this function until a character is received.
   714                          ;    If the watchdog timer is used, care must be taken to make sure that
   715                          ;    the delay between characters is less than the watchdog timeout.
   716                          ;
   717  2E4B                     UART_Board_cGetChar:
   718  2E4B                    _UART_Board_cGetChar:
   719                             RAM_PROLOGUE RAM_USE_CLASS_1
   720  2E4B  49 3F 08             tst REG[UART_Board_RX_CONTROL_REG],UART_Board_RX_REG_FULL    ; Check if a character is ready
   721  2E4E  AFFC                 jz  UART_Board_cGetChar                              ; If not loop
   722  2E50  5D 3E                mov A, REG[UART_Board_RX_BUFFER_REG]                 ; Get character
   723                             RAM_EPILOGUE RAM_USE_CLASS_1
   724  2E52  7F                   ret
   725                          .ENDSECTION
   726                          
   727                          
   728                          .SECTION
   729                          ;-----------------------------------------------------------------------------
   730                          ;  FUNCTION NAME: UART_Board_cReadChar
   731                          ;
   732                          ;  DESCRIPTION:
   733                          ;     Read character from UART RX port.
   734                          ;-----------------------------------------------------------------------------
   735                          ;
   736                          ;  ARGUMENTS:
   737                          ;      none
   738                          ;
   739                          ;  RETURNS:
   740                          ;     char that is returned from UART
   741                          ;
   742                          ;  SIDE EFFECTS:
   743                          ;    The A and X registers may be modified by this or future implementations
   744                          ;    of this function.  The same is true for all RAM page pointer registers in
   745                          ;    the Large Memory Model.  When necessary, it is the calling function's
   746                          ;    responsibility to perserve their values across calls to fastcall16 
   747                          ;    functions.
   748                          ;
   749                          ;    A valid 0x00 character will be ignored, since a 0x00 return value
   750                          ;    implies a valid character or an error condition occured.
   751                          ;
   752  2E53                     UART_Board_cReadChar:
   753  2E53                    _UART_Board_cReadChar:
   754                             RAM_PROLOGUE RAM_USE_CLASS_1
   755  2E53  5D 3F                mov  A,REG[UART_Board_RX_CONTROL_REG]                   ; Get Status of RX
   756  2E55  08                   push A
   757  2E56  21 08                and  A,UART_Board_RX_COMPLETE                           ; Check if a character is ready
   758  2E58  B004                 jnz  .RX_DATA_RDY                                       ; Data Ready go read it.
   759  2E5A  18                   pop  A
   760  2E5B  800B                 jmp  .RX_NO_VALID_CHAR
   761                          
   762  2E5D                    .RX_DATA_RDY:
   763  2E5D  5D 3E                mov  A,REG[UART_Board_RX_BUFFER_REG ]          
   764  2E5F  4B                   swap A,X                                                ; determine if data is valid
   765                          
   766  2E60  18                   pop  A                                                  ; Check for errors
   767  2E61  21 A0                and  A,(UART_Board_RX_PARITY_ERROR | UART_Board_RX_FRAMING_ERROR)
   768  2E63  B003                 jnz  .RX_NO_VALID_CHAR                                  ; No character, exit
   769  2E65  4B                   swap A,X                                                ; Put data in A and exit
   770                             RAM_EPILOGUE RAM_USE_CLASS_1
   771  2E66  7F                   ret
   772                          
   773  2E67                    .RX_NO_VALID_CHAR:
   774  2E67  50 00                mov A,0x00                                              ; Zero out character
   775                          
   776  2E69                     End_UART_Board_cReadChar:
   777                             RAM_EPILOGUE RAM_USE_CLASS_1
   778  2E69  7F                   ret
   779                          .ENDSECTION
   780                          
   781                          
   782                          .SECTION
   783                          ;-----------------------------------------------------------------------------
   784                          ;  FUNCTION NAME: UART_Board_iReadChar
   785                          ;
   786                          ;  WARNING WARNING WARNING  Negative return value not correct!!!!  We may want
   787                          ;  to just set a value in the upper byte if error conditions exists.
   788                          ;
   789                          ;  DESCRIPTION:
   790                          ;     Read character from UART RX port.
   791                          ;-----------------------------------------------------------------------------
   792                          ;
   793                          ;  ARGUMENTS:
   794                          ;      none
   795                          ;
   796                          ;  RETURNS:
   797                          ;     An integer value is returned.  A negative value inplies and error
   798                          ;     condition, a positive value between 0 and 255 is the return character.
   799                          ;
   800                          ;     Error Codes:
   801                          ;        0x80CC    Parity Error
   802                          ;        0x40CC    Overrun Error
   803                          ;        0x20CC    Framing Error
   804                          ;        0x01CC    No Data available
   805                          ;
   806                          ;  SIDE EFFECTS:
   807                          ;    The A and X registers may be modified by this or future implementations
   808                          ;    of this function.  The same is true for all RAM page pointer registers in
   809                          ;    the Large Memory Model.  When necessary, it is the calling function's
   810                          ;    responsibility to perserve their values across calls to fastcall16 
   811                          ;    functions.
   812                          ;
   813  2E6A                     UART_Board_iReadChar:
   814  2E6A                    _UART_Board_iReadChar:
   815                             RAM_PROLOGUE RAM_USE_CLASS_1
   816  2E6A  5D 3F                mov  A,REG[UART_Board_RX_CONTROL_REG]                   ; Get Status of RX
   817                                                                                     ; Mask only errors and data ready
   818  2E6C  21 E8                and  A,(UART_Board_RX_ERROR|UART_Board_RX_REG_FULL)
   819  2E6E  08                   push A
   820  2E6F  21 08                and  A,UART_Board_RX_COMPLETE                           ; Check if a character is ready
   821  2E71  B007                 jnz  .RX_GET_DATA                                       ; Data Ready go read it.
   822  2E73  18                   pop  A
   823  2E74  29 01                or   A,UART_Board_RX_NO_DATA                            ; Add no data flag
   824  2E76  4B                   swap A,X
   825  2E77  8007                 jmp  End_UART_Board_iReadChar
   826                          
   827  2E79                    .RX_GET_DATA:
   828  2E79  18                   pop  A
   829  2E7A  21 E0                and  A,UART_Board_RX_ERROR
   830  2E7C  4B                   swap A,X
   831  2E7D  5D 3E                mov  A,REG[UART_Board_RX_BUFFER_REG ]                   ; Read data first, then
   832                                                                                     ; determine if data is valid
   833                          
   834  2E7F                     End_UART_Board_iReadChar:
   835                             RAM_EPILOGUE RAM_USE_CLASS_1
   836  2E7F  7F                   ret
   837                          .ENDSECTION
   838                          
   839                          
   840                          .SECTION
   841                          ;-----------------------------------------------------------------------------
   842                          ;  FUNCTION NAME: UART_Board_PutString
   843                          ;
   844                          ;  DESCRIPTION:
   845                          ;     Send String out through UART TX port.
   846                          ;-----------------------------------------------------------------------------
   847                          ;
   848                          ;  ARGUMENTS:
   849                          ;     Pointer to String
   850                          ;     A has MSB of string address
   851                          ;     X has LSB of string address
   852                          ;
   853                          ;  RETURNS:
   854                          ;     none
   855                          ;
   856                          ;  SIDE EFFECTS:
   857                          ;    The A and X registers may be modified by this or future implementations
   858                          ;    of this function.  The same is true for all RAM page pointer registers in
   859                          ;    the Large Memory Model.  When necessary, it is the calling function's
   860                          ;    responsibility to perserve their values across calls to fastcall16 
   861                          ;    functions.
   862                          ;          
   863                          ;    Currently only the page pointer registers listed below are modified: 
   864                          ;          IDX_PP
   865                          ;
   866  2E80                     UART_Board_PutString:
   867  2E80                    _UART_Board_PutString:
   868                             RAM_PROLOGUE RAM_USE_CLASS_3
   869  2E80  60 D3                RAM_SETPAGE_IDX A
   870  2E82                    .PutStringLoop:
   871  2E82  52 00                mov   A,[X]                                   ; Get value pointed to by X
   872  2E84  A006                 jz    End_PutString                           ; Check for end of string
   873  2E86  9FBB                 call  UART_Board_PutChar                      ; Send character to Tx port
   874  2E88  75                   inc   X                                       ; Advance pointer to next character
   875  2E89  8FF8                 jmp   .PutStringLoop                          ; Get next character
   876                          
   877  2E8B                    End_PutString:
   878                             RAM_EPILOGUE RAM_USE_CLASS_3
      + 2E8B  70 3F             	and	f, 0x3F
      + 2E8D  71 80             	or	f, 0x80
   879  2E8F  7F                   ret
   880                          .ENDSECTION
   881                              
   882                          .SECTION
   883                          ;-----------------------------------------------------------------------------
   884                          ;  FUNCTION NAME: UART_Board_Write
   885                          ;
   886                          ;  DESCRIPTION:
   887                          ;     Send String of length X to serial port
   888                          ;-----------------------------------------------------------------------------
   889                          ;
   890                          ;  ARGUMENTS:
   891                          ;     Pointer to String
   892                          ;     [SP-5] Count of characters to send
   893                          ;     [SP-4] has MSB of string address
   894                          ;     [SP-3] has LSB of string address
   895                          ;
   896                          ;  RETURNS:
   897                          ;     none
   898                          ;
   899                          ;  SIDE EFFECTS:
   900                          ;    The A and X registers may be modified by this or future implementations
   901                          ;    of this function.  The same is true for all RAM page pointer registers in
   902                          ;    the Large Memory Model.  When necessary, it is the calling function's
   903                          ;    responsibility to perserve their values across calls to fastcall16 
   904                          ;    functions.
   905                          ;          
   906                          ;    Currently only the page pointer registers listed below are modified: 
   907                          ;          IDX_PP
   908                          ;
   909  FFFFFFFB                    CNT_LEN:    equ -5                               ; Length of data to send
   910  FFFFFFFC                    STR_MSB:    equ -4                               ; MSB pointer of string 
   911  FFFFFFFD                    STR_LSB:    equ -3                               ; LSB pointer of string 
   912                          
   913  2E90                     UART_Board_Write:
   914  2E90                    _UART_Board_Write:
   915                             RAM_PROLOGUE RAM_USE_CLASS_3
   916  2E90  62 D3 03             RAM_SETPAGE_IDX2STK                           ; Refer indexed addrs to the stack
   917  2E93  4F                   mov   X, SP                                   ; Establish the frame pointer 
   918                          
   919  2E94                    .NextByteLoop:
   920  2E94  52 FB                mov   A, [X+CNT_LEN]                          ; End of the string?
   921  2E96  A01A                 jz    .End_Write                              ;   Yes, prepare to exit
   922  2E98  7B FB                dec   [X+CNT_LEN]                             ; Decrement counter
   923                          
   924                             IF SYSTEM_LARGE_MEMORY_MODEL
   925  2E9A  52 FC                mov   A, [X+STR_MSB]                          ; Load pointer to char to send
   926                             ENDIF
   927                          
   928  2E9C  59 FD                mov   X, [X+STR_LSB]                          ; Load pointer to char to send
   929  2E9E  60 D3                RAM_SETPAGE_IDX A                             ; switch index pages
   930  2EA0  52 00                mov   A, [X]                                  ; Grab the data
   931                             InLinePutChar A                               ; Put data in empty TX buf reg
      + 2EA2                    ??0001:
      + 2EA2  49 3B 10          	tst	reg[59], 16
      + 2EA5  AFFC              	jz	??0001
      + 2EA7  60 39             	mov	reg[57], a
   932  2EA9  4F                   mov   X, SP                                   ; Recover frame pointer
   933  2EAA  62 D3 03             RAM_SETPAGE_IDX2STK                           ; Prepare for stack access
   934  2EAD  77 FD                inc   [X+STR_LSB]                             ; Point to next byte, but do not
   935  2EAF  8FE4                 jmp   .NextByteLoop                           ;    cross RAM page boundary!
   936                          
   937  2EB1                    .End_Write:
   938                             RAM_EPILOGUE RAM_USE_CLASS_3
      + 2EB1  70 3F             	and	f, 0x3F
      + 2EB3  71 80             	or	f, 0x80
   939  2EB5  7F                   ret
   940                          .ENDSECTION
   941                              
   942                          
   943                          .SECTION
   944                          ;-----------------------------------------------------------------------------
   945                          ;  FUNCTION NAME: UART_Board_CWrite
   946                          ;
   947                          ;             WARNING WARNING NOT COMPLETE
   948                          ;
   949                          ;  DESCRIPTION:
   950                          ;     Send String of length X to serial port
   951                          ;-----------------------------------------------------------------------------
   952                          ;
   953                          ;  ARGUMENTS:
   954                          ;     [SP-4] MSB of Count of character to send
   955                          ;     [SP-3] LSB of Count of character to send
   956                          ;     [SP-2] has MSB of string address
   957                          ;     [SP-1] has LSB of string address
   958                          ;
   959                          ;  RETURNS:
   960                          ;     none
   961                          ;
   962                          ;  SIDE EFFECTS:
   963                          ;    The A and X registers may be modified by this or future implementations
   964                          ;    of this function.  The same is true for all RAM page pointer registers in
   965                          ;    the Large Memory Model.  When necessary, it is the calling function's
   966                          ;    responsibility to perserve their values across calls to fastcall16 
   967                          ;    functions.
   968                          ;
   969  FFFFFFFA                    CLEN_MSB:   equ -6           ; MSB Length of data to send
   970  FFFFFFFB                    CLEN_LSB:   equ -5           ; LSB Length of data to send
   971  FFFFFFFC                    CSTR_MSB:   equ -4           ; MSB pointer of string
   972  FFFFFFFD                    CSTR_LSB:   equ -3           ; LSB pointer of string
   973                          
   974  2EB6                     UART_Board_CWrite:
   975  2EB6                    _UART_Board_CWrite:
   976  2EB6  71 40                RAM_PROLOGUE RAM_USE_CLASS_2
   977  2EB8  4F                   mov   X,SP
   978  2EB9                    .CW_Loop:
   979  2EB9  3D FA 00             cmp   [X+CLEN_MSB],0x00                  ; Check for zero counter
   980  2EBC  B006                 jnz   .CW_WRITEIT
   981  2EBE  3D FB 00             cmp   [X+CLEN_LSB],0x00
   982  2EC1  A01D                 jz    .End_CWrite                        ; Leave if done
   983                          
   984  2EC3                    .CW_WRITEIT:                                
   985  2EC3  10                   push  X                                  ; Save frame pointer
   986  2EC4  52 FC                mov   A,[X+CSTR_MSB]
   987  2EC6  59 FD                mov   X,[X+CSTR_LSB]
   988  2EC8  28                   romx                                     ; Get character from ROM
   989                             InLinePutChar A                          ; Put data in empty TX buf reg
      + 2EC9                    ??0002:
      + 2EC9  49 3B 10          	tst	reg[59], 16
      + 2ECC  AFFC              	jz	??0002
      + 2ECE  60 39             	mov	reg[57], a
   990  2ED0  20                   pop   X                                  ; Restore frame pointer
   991  2ED1  07 FD 01             add   [X+CSTR_LSB],1                     ; Increment the string pointer
   992  2ED4  0F FC 00             adc   [X+CSTR_MSB],0
   993  2ED7  17 FB 01             sub   [X+CLEN_LSB],0x01                  ; Dec the counter
   994  2EDA  1F FA 00             sbb   [X+CLEN_MSB],0x00
   995  2EDD  8FDB                 jmp   .CW_Loop
   996                          
   997  2EDF                    .End_CWrite:
   998                             RAM_EPILOGUE RAM_USE_CLASS_2
      + 2EDF  70 3F             	and	f, 0x3F
      + 2EE1  71 80             	or	f, 0x80
   999  2EE3  7F                   ret
  1000                          .ENDSECTION
  1001                          
  1002                          
  1003                          .SECTION
  1004                          ;-----------------------------------------------------------------------------
  1005                          ;  FUNCTION NAME: UART_Board_CPutString
  1006                          ;
  1007                          ;  DESCRIPTION:
  1008                          ;     Send String out through UART TX port.
  1009                          ;-----------------------------------------------------------------------------
  1010                          ;
  1011                          ;  ARGUMENTS:
  1012                          ;     Pointer to String
  1013                          ;     A has MSB of string address
  1014                          ;     X has LSB of string address
  1015                          ;
  1016                          ;  RETURNS:
  1017                          ;     none
  1018                          ;
  1019                          ;  SIDE EFFECTS:
  1020                          ;    The A and X registers may be modified by this or future implementations
  1021                          ;    of this function.  The same is true for all RAM page pointer registers in
  1022                          ;    the Large Memory Model.  When necessary, it is the calling function's
  1023                          ;    responsibility to perserve their values across calls to fastcall16 
  1024                          ;    functions.
  1025                          ;
  1026  2EE4                     UART_Board_CPutString:
  1027  2EE4                    _UART_Board_CPutString:
  1028                             RAM_PROLOGUE RAM_USE_CLASS_1
  1029  2EE4  08                   push  A                                       ; Store ROM pointer
  1030  2EE5  10                   push  X
  1031  2EE6  28                   romx                                          ; Get character from ROM
  1032  2EE7  A00B                 jz    .End_CPutString
  1033  2EE9  9F58                 call  UART_Board_PutChar                      ; Print character
  1034  2EEB  20                   pop   X
  1035  2EEC  18                   pop   A
  1036  2EED  75                   inc   X                                       ; Inc LSB of pointer
  1037  2EEE  DFF5                 jnc   UART_Board_CPutString                   ; Check for carry
  1038  2EF0  74                   inc   A                                       ; Inc MSB of pointer
  1039  2EF1  8FF2                 jmp   UART_Board_CPutString
  1040                          
  1041                          
  1042  2EF3                    .End_CPutString:
  1043  2EF3  38 FE                add   SP, -2
  1044                             RAM_EPILOGUE RAM_USE_CLASS_1
  1045  2EF5  7F                   ret
  1046                          .ENDSECTION
  1047                          
  1048                          
  1049                          .SECTION
  1050                          ;-----------------------------------------------------------------------------
  1051                          ;  FUNCTION NAME: UART_Board_PutCRLF
  1052                          ;
  1053                          ;  DESCRIPTION:
  1054                          ;     Send a CR and LF
  1055                          ;-----------------------------------------------------------------------------
  1056                          ;
  1057                          ;  ARGUMENTS:
  1058                          ;     none.
  1059                          ;
  1060                          ;  RETURNS:
  1061                          ;     none.
  1062                          ;
  1063                          ;  SIDE EFFECTS:
  1064                          ;    The A and X registers may be modified by this or future implementations
  1065                          ;    of this function.  The same is true for all RAM page pointer registers in
  1066                          ;    the Large Memory Model.  When necessary, it is the calling function's
  1067                          ;    responsibility to perserve their values across calls to fastcall16 
  1068                          ;    functions.
  1069                          ;
  1070  2EF6                     UART_Board_PutCRLF:
  1071  2EF6                    _UART_Board_PutCRLF:
  1072                             RAM_PROLOGUE RAM_USE_CLASS_1
  1073  2EF6  50 0D                mov  A,0x0D                        ; Send CR
  1074  2EF8  9F49                 call UART_Board_PutChar
  1075  2EFA  50 0A                mov  A,0x0A                        ; Send LF
  1076  2EFC  9F45                 call UART_Board_PutChar
  1077                             RAM_EPILOGUE RAM_USE_CLASS_1
  1078  2EFE  7F                   ret
HI-TECH Software Macro Assembler (PSoC MCU) V9.61
Symbol Table                                                                                               Fri Jun 12 09:25:11 2015
            _UART_Board_SendData 2DDF         UART_Board_TX_CONTROL_REG 003B              _UART_Board_cGetChar 2E4B  
          UART_Board_RX_INT_MASK 0080        UART_Board_TX_BUFFER_EMPTY 0010            UART_Board_RX_REG_FULL 0008  
              UART_Board_IntCntl 2DFE        UART_Board_RX_PARITY_ERROR 0080             _UART_Board_cReadChar 2E53  
           _UART_Board_TxIntMode 2DEB               UART_Board_RX_ERROR 00E0                UART_Board_PutCRLF 2EF6  
                        CLEN_LSB FFFFFFFB                          CLEN_MSB FFFFFFFA          End_UART_Board_cReadChar 2E69  
              UART_Board_PutChar 2E43            bUART_Board_ReadRxData 2DE5             _UART_Board_PutString 2E80  
           UART_Board_PutSHexInt 2E3C            UART_Board_TX_FUNC_REG 0038         _bUART_Board_ReadRxStatus 2DE8  
          UART_Board_TX_INT_MASK 0040                  _UART_Board_Stop 2DD8         _bUART_Board_ReadTxStatus 2DE2  
                        CSTR_LSB FFFFFFFD                          CSTR_MSB FFFFFFFC           bfCONTROL_REG_START_BIT 0001  
           _UART_Board_iReadChar 2E6A            _UART_Board_PutSHexInt 2E3C                            ??0000 2E43  
                          ??0001 2EA2                            ??0002 2EC9          End_UART_Board_iReadChar 2E7F  
        UART_Board_bReadRxStatus 2DE8                     End_PutString 2E8B               UART_Board_SendData 2DDF  
             UART_Board_cGetChar 2E4B          UART_Board_bReadTxStatus 2DE2   UART_Board_INT_MODE_TX_COMPLETE 0001  
         _bUART_Board_ReadRxData 2DE5                  UART_Board_Start 2DD1                  UART_Board_Write 2E90  
                          HITECH 0002            UART_Board_bReadRxData 2DE5                   FLAG_PGMODE_01b 0040  
                 FLAG_PGMODE_10b 0080                            IDX_PP 00D3           UART_Board_SetTxIntMode 2DBF  
         UART_Board_RXBUF_ENABLE 0000            UART_Board_PutSHexByte 2E29              UART_Board_EnableInt 2DB1  
           UART_Board_CPutString 2EE4          UART_Board_ENABLE_RX_INT 0001          UART_Board_ENABLE_TX_INT 0002  
               _UART_Board_Start 2DD1                 _UART_Board_Write 2E90            _UART_Board_CPutString 2EE4  
         _UART_Board_bReadRxData 2DE5          UART_Board_TX_BUFFER_REG 0039           _UART_Board_PutSHexByte 2E29  
             _UART_Board_IntCntl 2DFE         SYSTEM_LARGE_MEMORY_MODEL 0001               _UART_Board_PutCRLF 2EF6  
               UART_Board_CWrite 2EB6               _UART_Board_PutChar 2E43             UART_Board_RX_INT_REG 00E1  
          SYSTEM_MULTIPAGE_STACK 0000             UART_Board_RX_NO_DATA 0001          _UART_Board_SetTxIntMode 2DBF  
     UART_Board_RX_FRAMING_ERROR 0020                         TOOLCHAIN 0002              UART_Board_cReadChar 2E53  
            UART_Board_TxIntMode 2DEB                           CNT_LEN FFFFFFFB             UART_Board_TX_INT_REG 00E1  
                FLAG_PGMODE_MASK 00C0              UART_Board_PutString 2E80                   RAM_USE_CLASS_1 0001  
                 RAM_USE_CLASS_2 0002                   RAM_USE_CLASS_3 0004                   RAM_USE_CLASS_4 0008  
                 UART_Board_Stop 2DD8                           STR_LSB FFFFFFFD                           STR_MSB FFFFFFFC  
            UART_Board_iReadChar 2E6A             UART_Board_DisableInt 2DB8          bUART_Board_ReadRxStatus 2DE8  
  bfFUNCTION_REG_TX_INT_MODE_BIT 0010          bUART_Board_ReadTxStatus 2DE2                _UART_Board_CWrite 2EB6  
       _UART_Board_bReadRxStatus 2DE8            _UART_Board_DisableInt 2DB8         _UART_Board_bReadTxStatus 2DE2  
           _UART_Board_EnableInt 2DB1                 SYSTEM_STACK_PAGE 0003                     FLAG_XIO_MASK 0010  
        UART_Board_RX_BUFFER_REG 003E        SYSTEM_IDXPG_TRACKS_IDX_PP 0001        SYSTEM_IDXPG_TRACKS_STK_PP 0000  
          UART_Board_RX_COMPLETE 0008                UART_Board_HEX_STR 2E19         UART_Board_RX_CONTROL_REG 003F  
HI-TECH Software Macro Assembler (PSoC MCU) V9.61
                                                                                                           Fri Jun 12 09:25:11 2015
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  FILENAME:   UART_Board.inc
     4                          ;;  Version: 5.3, Updated on 2013/5/19 at 10:44:49
     5                          ;;  Generated by PSoC Designer 5.4.2946
     6                          ;;
     7                          ;;  DESCRIPTION:  Assembler declarations for the UART user module.
     8                          ;;-----------------------------------------------------------------------------
     9                          ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
    10                          ;;*****************************************************************************
    11                          ;;*****************************************************************************
    12                          
    13                          ;--------------------------------------------------
    14                          ; Constants for UART_Board API's
    15                          ;--------------------------------------------------
    16                          
    17                          ;mask value for global int reg bit for TX instance
    18  0040                    UART_Board_TX_INT_MASK:                      equ 0x40
    19  00E1                    UART_Board_TX_INT_REG:                       equ 0x0e1  ;TX interrupt address
    20  0080                    UART_Board_RX_INT_MASK:                      equ 0x80  ;mask value for global int reg bit for RX ins
                                tance
    21  00E1                    UART_Board_RX_INT_REG:                       equ 0x0e1  ;RX interrupt address
    22                          
    23  0000                    UART_Board_RXBUF_ENABLE:                     equ 0
    24                          
    25                          ; Interrupt control masks
    26  0001                    UART_Board_ENABLE_RX_INT:                    equ 0x01
    27  0000                    UART_Board_DISABLE_RX_INT:                   equ 0x00
    28  0002                    UART_Board_ENABLE_TX_INT:                    equ 0x02
    29  0000                    UART_Board_DISABLE_TX_INT:                   equ 0x00
    30                          
    31  0000                    UART_Board_INT_MODE_TX_REG_EMPTY:            equ 0x00
    32  0001                    UART_Board_INT_MODE_TX_COMPLETE:             equ 0x01
    33                          
    34  0020                    UART_Board_RX_IGNORE_BELOW:                  equ 0x20
    35  0010                    UART_Board_RX_BUFFER_SIZE:                   equ 0x10
    36  000D                    UART_Board_CMD_TERM:                         equ 0xd
    37  0020                    UART_Board_DELIMITER:                        equ 0x20
    38  0000                    UART_Board_BACKSPACE_ENABLE:                 equ 0x0
    39                          
    40                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    41                          ;       WARNING WARNING WARNING
    42                          ; The following equates are for backwards
    43                          ; compatibility only and should not be used
    44                          ; for new designs.
    45                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    46                          
    47                          ;------------------------------------
    48                          ;  Parity masks
    49                          ;------------------------------------
    50  0000                    UART_PARITY_NONE:       equ   00h
    51  0002                    UART_PARITY_EVEN:       equ   02h
    52  0006                    UART_PARITY_ODD:        equ   06h
    53                          
    54                          ;------------------------------------
    55                          ;  TX Status Register masks
    56                          ;------------------------------------
    57  0020                    UART_TX_COMPLETE:       equ   20h
    58  0010                    UART_TX_BUFFER_EMPTY:   equ   10h
    59                          
    60                          ;------------------------------------
    61                          ;  RX Status Register masks
    62                          ;------------------------------------
    63  0010                    UART_RX_ACTIVE:         equ   10h
    64  0008                    UART_RX_COMPLETE:       equ   08h
    65  0080                    UART_RX_PARITY_ERROR:   equ   80h
    66  0040                    UART_RX_OVERRUN_ERROR:  equ   40h
    67  0020                    UART_RX_FRAMING_ERROR:  equ   20h
    68  00E0                    UART_RX_NO_ERROR:       equ   E0h
    69                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    70                          ;             END WARNING
    71                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    72                          
    73                          
    74                          
    75                          ;------------------------------------
    76                          ;  Parity masks
    77                          ;------------------------------------
    78  0000                    UART_Board_PARITY_NONE:                 equ   00h
    79  0002                    UART_Board_PARITY_EVEN:                 equ   02h
    80  0006                    UART_Board_PARITY_ODD:                  equ   06h
    81                          
    82                          ;------------------------------------
    83                          ;  TX Status Register masks
    84                          ;------------------------------------
    85  0020                    UART_Board_TX_COMPLETE:                 equ   20h
    86  0010                    UART_Board_TX_BUFFER_EMPTY:             equ   10h
    87                          
    88                          ;------------------------------------
    89                          ;  RX Status Register masks
    90                          ;------------------------------------
    91  0010                    UART_Board_RX_ACTIVE:                   equ   10h
    92  0008                    UART_Board_RX_COMPLETE:                 equ   08h
    93  0008                    UART_Board_RX_REG_FULL:                 equ   08h
    94  0080                    UART_Board_RX_PARITY_ERROR:             equ   80h
    95  0040                    UART_Board_RX_OVERRUN_ERROR:            equ   40h
    96  0020                    UART_Board_RX_FRAMING_ERROR:            equ   20h
    97  00E0                    UART_Board_RX_ERROR:                    equ   E0h
    98  0001                    UART_Board_RX_ENABLE:                   equ   01h
    99                          
   100  00F0                    UART_Board_RX_BUF_ERROR:                equ   F0h  ; Mask for any Rx that may occur.
   101  0010                    UART_Board_RX_BUF_OVERRUN:              equ   10h  ; This indicates the software buffer has
   102                                                                                  ; been over run.
   103  0001                    UART_Board_RX_BUF_CMDTERM:              equ   01h  ; Command terminator has been received.
   104                          
   105  0001                    UART_Board_RX_NO_DATA:                  equ   01h
   106  00E0                    UART_Board_RX_NO_ERROR:                 equ   E0h
   107                          
   108                          
   109                          ;--------------------------------------------------
   110                          ; Registers Address Constants for UART_Board
   111                          ;--------------------------------------------------
   112                          ;---------------------------------
   113                          ;  Registers used by TX
   114                          ;---------------------------------
   115  003B                    UART_Board_TX_CONTROL_REG:  equ 3bh            ; Control register
   116  0038                    UART_Board_TX_SHIFT_REG:    equ 38h               ; TX Shift Register register
   117  0039                    UART_Board_TX_BUFFER_REG:   equ 39h               ; TX Buffer Register
   118  0038                    UART_Board_TX_FUNC_REG: equ 38h         ; Function register
   119  0039                    UART_Board_TX_INPUT_REG:    equ 39h            ; Input register
   120  003A                    UART_Board_TX_OUTPUT_REG:   equ 3ah           ; Output register
   121                          
   122                          ;---------------------------------
   123                          ;  Registers used by RX
   124                          ;---------------------------------
   125  003F                    UART_Board_RX_CONTROL_REG:  equ 3fh            ; Control register
   126  003C                    UART_Board_RX_SHIFT_REG:    equ 3ch               ; RX Shift Register register
   127  003E                    UART_Board_RX_BUFFER_REG:   equ 3eh               ; RX Buffer Register
   128  003C                    UART_Board_RX_FUNC_REG: equ 3ch         ; Function register
   129  003D                    UART_Board_RX_INPUT_REG:    equ 3dh            ; Input register
   130                          UART_Board_RX_OUTPUT_REG:   equ 3eh           ; Output register
      + 003E                    UART_Board_RX_OUTPUT_REG	equ	62
      + 3C41                    ; end of file UART_Board.inc
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;
     4                          ;;       FILENAME: Memory.inc
     5                          ;;
     6                          ;;    DESCRIPTION: Memory Model and Stack Parameter Definitions for 
     7                          ;;                 CY8C22045 PSoC devices.
     8                          ;;
     9                          ;;  LAST MODIFIED: August 17, 2004
    10                          ;;
    11                          ;;-----------------------------------------------------------------------------
    12                          ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
    13                          ;;*****************************************************************************
    14                          ;;*****************************************************************************
    15                          ;
    16                          ;
    17                          ;  ******** Define Memory Model and Stack parameters ********
    18                          ;
    19  0001                    IMAGECRAFT: equ 1   
    20  0002                    HITECH: equ 2   
    21  0002                    TOOLCHAIN: equ HITECH   
    22  0001                    SYSTEM_LARGE_MEMORY_MODEL: equ 1   
    23  0000                    SYSTEM_SMALL_MEMORY_MODEL: equ 0   
    24  0003                    SYSTEM_STACK_PAGE: equ 3   
    25  0000                    SYSTEM_STACK_PAGE_OFFSET: equ 0   
    26  0002                    SYSTEM_TOOLS: equ 2   
    27  0000                    SYSTEM_IDXPG_TRACKS_STK_PP: equ 0   
    28  0001                    SYSTEM_IDXPG_TRACKS_IDX_PP: equ 1   
    29  0000                    SYSTEM_MULTIPAGE_STACK: equ 0 
    30                          
    31                          
    32                          ;  ******* Function Class Definitions *******
    33                          ;
    34                          ;  These definitions are used to describe RAM access patterns. They provide
    35                          ;  documentation and they control prologue and epilogue macros that perform
    36                          ;  the necessary housekeeping functions for large memory model devices like
    37                          ;  the CY8C22045.
    38                          
    39  0001                    RAM_USE_CLASS_1:               equ 1   ; PUSH, POP & I/O access
    40  0002                    RAM_USE_CLASS_2:               equ 2   ; Indexed address mode on stack page
    41  0004                    RAM_USE_CLASS_3:               equ 4   ; Indexed address mode to any page
    42  0008                    RAM_USE_CLASS_4:               equ 8   ; Direct/Indirect address mode access
    43                          
    44                          ; ******* Hi Tech Specific *******
    45                          ; Turn on the expansion of all macros by default
    46                          IF (TOOLCHAIN & HITECH)
    47                          OPT EXPAND
    48                          ENDIF
    49                          ; ******* Page Pointer Manipulation Macros *******
    50                          ;
    51                          ;  ******* Page Pointer Manipulation Macros *******
    52                          ;
    53                          ;  Most of the following macros are conditionally compiled so they only
    54                          ;  produce code if the large memory model is selected.
    55                          
    56                             ;-----------------------------------------------
    57                             ;  Set Stack Page Macro
    58                             ;-----------------------------------------------
    59                             ;
    60                             ;  DESC: Modify STK_PP in the large or small memory Models.
    61                             ;
    62                             ; INPUT: Constant (e.g., SYSTEM_STACK_PAGE) that specifies the RAM page on
    63                             ;        which stack operations like PUSH and POP store and retrieve their
    64                             ;        data
    65                             ;
    66                             ;  COST: 8 instruction cycles (in LMM only)
    67                          
    68                             macro RAM_SETPAGE_STK( PG_NUMBER )
    69                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    70                                mov reg[STK_PP], @PG_NUMBER
    71                             ENDIF
    72  3C41                       endm
    73                          
    74                             ;-----------------------------------------------
    75                             ;  Set Current Page Macro
    76                             ;-----------------------------------------------
    77                             ;
    78                             ;  DESC: Modify CUR_PP in the large or small memory Models.
    79                             ;
    80                             ; INPUT: Constant value (e.g., >bFoo) for the RAM page number used in
    81                             ;        calculation of effective direct-mode address operands.
    82                             ;
    83                             ;  COST: 8 instruction cycles (in LMM only)
    84                          
    85                             macro RAM_SETPAGE_CUR( PG_NUMBER )
    86                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    87                                mov reg[CUR_PP], @PG_NUMBER
    88                             ENDIF
    89  3C41                       endm
    90                          
    91                             ;-----------------------------------------------
    92                             ;  Set Index Page Macro
    93                             ;-----------------------------------------------
    94                             ;
    95                             ;  DESC: Modify IDX_PP in the large or small emory Models.
    96                             ;
    97                             ; INPUT: Constant value (e.g., >caFoo) for the RAM page number used in
    98                             ;         calculation of effective index-mode address operands.
    99                             ;
   100                             ;  COST: 8 instruction cycles (in LMM only)
   101                          
   102                             macro RAM_SETPAGE_IDX( PG_NUMBER )
   103                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   104                                mov reg[IDX_PP], @PG_NUMBER
   105                             ENDIF
   106  3C41                       endm
   107                          
   108                             ;-----------------------------------------------
   109                             ;  Set MVI Read Page Macro
   110                             ;-----------------------------------------------
   111                             ;
   112                             ;  DESC: Modify MVR_PP in the large or small memory Models.
   113                             ;
   114                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   115                             ;        calculation of indirect address operands used in the
   116                             ;        "mvi A, [pFoo]" instructions.
   117                             ;
   118                             ;  COST: 8 instruction cycles (in LMM only)
   119                          
   120                             macro RAM_SETPAGE_MVR( PG_NUMBER )
   121                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   122                                mov reg[MVR_PP], @PG_NUMBER
   123                             ENDIF
   124  3C41                       endm
   125                          
   126                             ;-----------------------------------------------
   127                             ;  Set MVI Write Page Macro
   128                             ;-----------------------------------------------
   129                             ;
   130                             ;  DESC: Modify MVW_PP in the large or small memory Models.
   131                             ;
   132                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   133                             ;        calculation of indirect address operands used in the
   134                             ;        "mvi [pFoo], A" instructions.
   135                             ;
   136                             ;  COST: 8 instruction cycles (in LMM only)
   137                          
   138                             macro RAM_SETPAGE_MVW( PG_NUMBER )
   139                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   140                                mov reg[MVW_PP], @PG_NUMBER
   141                             ENDIF
   142  3C41                       endm
   143                          
   144                             ;-----------------------------------------------
   145                             ;  Force Index Page Pointer to Stack Page
   146                             ;-----------------------------------------------
   147                             ;
   148                             ;  DESC: Map index-mode operands onto the stack page by modifying IDX_PP.
   149                             ;        See also RAM_LOCK_INDEX_TO_STACKPAGE.
   150                             ;
   151                             ; INPUT: None
   152                             ;
   153                             ;  COST: 8 instruction cycles (in LMM only)
   154                          
   155                             macro RAM_SETPAGE_IDX2STK
   156                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   157                                IF ( SYSTEM_MULTIPAGE_STACK )
   158                                   mov   A, reg[STK_PP]
   159                                   mov   reg[IDX_PP], A
   160                                ELSE
   161                                   RAM_SETPAGE_IDX SYSTEM_STACK_PAGE
   162                                ENDIF
   163                             ENDIF
   164  3C41                       endm
   165                          
   166                             ;-----------------------------------------------
   167                             ;  Change Memory Mode
   168                             ;-----------------------------------------------
   169                             ;
   170                             ;  DESC: Modify FLAG_PAGEMODE bits in the large and small memory Models.
   171                             ;
   172                             ; INPUT: Constant value for PGMODE bitfield of CPU Flag register, F.
   173                             ;        See FLAG_PGMODE_{x} constants in M8C.INC.
   174                             ;
   175                             ;  COST: 8 instruction cycles (in LMM only)
   176                          
   177                             macro RAM_CHANGE_PAGE_MODE( MODE )
   178                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   179                                and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
   180                                or    F,  FLAG_PGMODE_MASK & @MODE
   181                             ENDIF
   182  3C41                       endm
   183                          
   184                             ;-----------------------------------------------
   185                             ;  Set Large Memory Model Native Paging Mode
   186                             ;-----------------------------------------------
   187                             ;
   188                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   189                             ;        paging mode *IFF* a simple "OR" is guaranteed to work---for
   190                             ;        example, in an ISR, when the PGMODE bits have been cleared
   191                             ;        to zero. If a simple "OR" is not guaranteed to work, use
   192                             ;        the slower RAM_RESTORE_NATIVE_PAGING instead.
   193                             ;
   194                             ; INPUT: none
   195                             ;
   196                             ;  COST: 4 instruction cycles (in LMM only)
   197                          
   198                             macro RAM_SET_NATIVE_PAGING
   199                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   200                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   201                                or    F,  FLAG_PGMODE_11b            ; LMM w/ IndexPage<==>StackPage
   202                             ENDIF ;  PGMODE LOCKED
   203                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   204                                or    F,  FLAG_PGMODE_10b            ; LMM with independent IndexPage
   205                             ENDIF ; PGMODE FREE
   206                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   207  3C41                       endm
   208                          
   209                             ;-----------------------------------------------
   210                             ; Restore Large Memory Model Native Paging Mode
   211                             ;-----------------------------------------------
   212                             ;
   213                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   214                             ;        paging mode. Always works because it clears the PGMODE bits
   215                             ;        before OR-ing in the new ones. See RAM_RESTORE_NATIVE_PAGING
   216                             ;        for a faster method.
   217                             ;
   218                             ; INPUT: none
   219                             ;
   220                             ;  COST: 8 instruction cycles (in LMM only)
   221                          
   222                             macro RAM_RESTORE_NATIVE_PAGING
   223                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   224                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   225                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_11b ; LMM w/ IndexPage<==>StackPage
   226                             ENDIF ;  PGMODE LOCKED
   227                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   228                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b ; LMM with independent IndexPage
   229                             ENDIF ; PGMODE FREE
   230                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   231  3C41                       endm
   232                          
   233                             ;-----------------------------------------------
   234                             ; Force indexed addr mode operands to Stack Pg
   235                             ;-----------------------------------------------
   236                             ;
   237                             ;  DESC: Force instructions that use indexed address mode to reference the
   238                             ;        stack page (as defined by STK_PP). This macro sets the "Indexed
   239                             ;        Stack Mode" bit (LSB) of the PGMODE bit field in the CPU Flag
   240                             ;        register, F. (See also RAM_SETPAGE_IDX2STK, above.)
   241                             ;
   242                             ; INPUT: none
   243                             ;
   244                             ;  COST: 4 instruction cycles (in LMM only)
   245                          
   246                             macro RAM_X_POINTS_TO_STACKPAGE
   247                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   248                                or   F, FLAG_PGMODE_01b
   249                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   250  3C41                       endm
   251                          
   252                             ;-----------------------------------------------
   253                             ;  Force indexed addr mode operands to Index Pg
   254                             ;-----------------------------------------------
   255                             ;
   256                             ;  DESC: Permit instructions that use indexed address mode to reference page
   257                             ;        zero or the page pointed to by the IDX_PP register, depending on the
   258                             ;        setting of the MSb (or "Direct Page Mode" bit) of the PGMODE bits
   259                             ;        in the CPU Flag register, F. (This macro clears the PGMODE LSb.)
   260                             ;
   261                             ; INPUT: none
   262                             ;
   263                             ;  COST: 4 instruction cycles (in LMM only)
   264                          
   265                             macro RAM_X_POINTS_TO_INDEXPAGE
   266                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   267                                and  F, ~FLAG_PGMODE_01b
   268                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   269  3C41                       endm
   270                          
   271                             ;-----------------------------------------------
   272                             ;  Function Prologue
   273                             ;-----------------------------------------------
   274                             ;
   275                             ;  Prologue for functions that run in the LMM and SMM.
   276                             ;
   277                          
   278                             macro RAM_PROLOGUE( ACTUAL_CLASS )
   279                          
   280                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   281                             ; Nothing to do
   282                             ENDIF ; RAM_USE_CLASS_1
   283                          
   284                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   285                                IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   286                                   RAM_X_POINTS_TO_STACKPAGE         ; exit native paging mode!
   287                                ENDIF
   288                             ENDIF ; RAM_USE_CLASS_2
   289                          
   290                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   291                                IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   292                                   RAM_X_POINTS_TO_INDEXPAGE         ; exit native paging mode!
   293                                ENDIF
   294                             ENDIF ; RAM_USE_CLASS_3
   295                          
   296                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   297                             ; Nothing to do
   298                             ENDIF ; RAM_USE_CLASS_4
   299                          
   300  3C41                       endm
   301                          
   302                             ;-----------------------------------------------
   303                             ;  Function Epilogue
   304                             ;-----------------------------------------------
   305                             ;
   306                             ;  Prologue for functions that run in the LMM and SMM.
   307                             ;
   308                          
   309                             macro RAM_EPILOGUE( ACTUAL_CLASS )
   310                          
   311                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   312                             ; Nothing to do
   313                             ENDIF ; RAM_USE_CLASS_1
   314                          
   315                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   316                                RAM_RESTORE_NATIVE_PAGING
   317                             ENDIF ; RAM_USE_CLASS_2
   318                          
   319                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   320                                RAM_RESTORE_NATIVE_PAGING
   321                             ENDIF ; RAM_USE_CLASS_3
   322                          
   323                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   324                             ; Nothing to do
   325                             ENDIF ; RAM_USE_CLASS_4
   326                          
   327  3C41                       endm
   328                          
   329                             ;-----------------------------------------------
   330                             ;  Preserve Register
   331                             ;-----------------------------------------------
   332                             ;
   333                             ;  DESC: Preserve a register value on the stack
   334                             ;
   335                             ; INPUT: Name or address of register in I/O Space
   336                             ;        The I/O bank is an implicit parameter. That is, this function will
   337                             ;        Access the I/O bank currently specified by the CPU Flag register.
   338                             ;
   339                             ;  USES: CPU 'A' register
   340                             ;
   341                             ;  COST: 9 instruction cycles
   342                          
   343                             macro REG_PRESERVE( IOReg )
   344                             mov   A, reg[ @IOReg ]
   345                             push  A
   346  3C41                       endm
   347                          
   348                             ;-----------------------------------------------
   349                             ;  Restore Register
   350                             ;-----------------------------------------------
   351                             ;
   352                             ;  DESC: Restore a register value from the stack
   353                             ;
   354                             ; INPUT: Name or address of register in I/O Space
   355                             ;        The I/O bank is an implicit parameter. That is, this function will
   356                             ;        Access the I/O bank currently specified by the CPU Flag register.
   357                             ;
   358                             ;  USES: CPU 'A' register
   359                             ;
   360                             ;  COST: 10 instruction cycles
   361                          
   362                             macro REG_RESTORE( IOReg )
   363                             pop   A
   364                             mov   reg[ @IOReg ], A
   365  3C41                       endm
   366                          
   367                             ;-----------------------------------------------
   368                             ;  Preserve Volatile Page Pointer Registers
   369                             ;-----------------------------------------------
   370                             ;
   371                             ;  DESC: Invoked by ISRs before switching to the LMM mode and calling
   372                             ;        functions that require on it.
   373                             ;
   374                             ; INPUT: none
   375                             ;
   376                             ;  USES: CPU 'A' register
   377                             ;
   378                             ;  COST: 45 instruction cycles (in LMM only)
   379                          
   380                             macro ISR_PRESERVE_PAGE_POINTERS
   381                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   382                                REG_PRESERVE CUR_PP
   383                                REG_PRESERVE IDX_PP
   384                                REG_PRESERVE MVR_PP
   385                                REG_PRESERVE MVW_PP
   386                             ENDIF
   387  3C41                       endm
   388                          
   389                             ;-----------------------------------------------
   390                             ;  Restore Volatile Page Pointer Registers
   391                             ;-----------------------------------------------
   392                             ;
   393                             ;  DESC: Undo for RAM_PRESERVE_PAGE_POINTERS macro. Invoked by ISRs after
   394                             ;        calling functions that run in the LMM mode and before executing
   395                             ;        the RETI instruction.
   396                             ;
   397                             ; INPUT: none
   398                             ;
   399                             ;  USES: CPU 'A' register
   400                             ;
   401                             ;  COST: 50 instruction cycles (in LMM only)
   402                          
   403                             macro ISR_RESTORE_PAGE_POINTERS
   404                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   405                                REG_RESTORE MVW_PP
   406                                REG_RESTORE MVR_PP
   407                                REG_RESTORE IDX_PP
   408                                REG_RESTORE CUR_PP
   409                             ENDIF
   410                             endm
      + 3C41                    
      + 3C41                    ; end of file Memory.inc
     1                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     2                          ;;;
     3                          ;;;  M8C.INC -- Microcontroller Device System Declarations
     4                          ;;;
     5                          ;;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
     6                          ;;;
     7                          ;;;  This file provides address constants, bit field masks and a set of macro
     8                          ;;;  facilities for the Cypress Semiconductor CY8C22045 Microcontroller devices.
     9                          ;;;
    10                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    11                          
    12                          ;;=============================================================================
    13                          ;; Definition of abbreviations used in the descriptions below
    14                          ;;  (RW)   The register or bit supports reads and writes
    15                          ;;  (W)    The register or bit is write-only
    16                          ;;  (R)    The register or bit is read-only
    17                          ;;  (#)    Access to the register is bit specific (see the family datasheet)
    18                          ;;  (RC)   The register or bit can be read, but writing a 0 will clear it,
    19                          ;;         writing a 1 will have no effect.
    20                          ;;=============================================================================
    21                          
    22                          ;;=============================================================================
    23                          ;;      System Registers
    24                          ;;=============================================================================
    25                          
    26                          ;----------------------------
    27                          ;  Flag Register Bit Fields
    28                          ;----------------------------
    29  00C0                    FLAG_PGMODE_MASK:  equ 0C0h     ; Paging control for > 256 bytes of RAM
    30  0000                    FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
    31  0040                    FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
    32  0080                    FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
    33  00C0                    FLAG_PGMODE_3:     equ 0C0h       ; Direct to CUR_PP page, indexed to STK_PP page
    34  0000                    FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
    35  0040                    FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
    36  0080                    FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
    37  00C0                    FLAG_PGMODE_11b:   equ 0C0h       ; Same as PGMODE_3
    38  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    39  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    40  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    41  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    42  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    43                          
    44                          
    45                          ;;=============================================================================
    46                          ;;      Register Space, Bank 0
    47                          ;;=============================================================================
    48                          
    49                          ;------------------------------------------------
    50                          ;  Port Registers
    51                          ;  Note: Also see this address range in Bank 1.
    52                          ;------------------------------------------------
    53                          ; Port 0
    54  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    55  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    56  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    57  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    58                          ; Port 1
    59  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    60  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    61  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    62  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    63                          ; Port 2
    64  0008                    PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
    65  0009                    PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
    66  000A                    PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
    67  000B                    PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
    68                          ; Port 3
    69  000C                    PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
    70  000D                    PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
    71  000E                    PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
    72  000F                    PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
    73                          ; Port 4
    74  0010                    PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
    75  0011                    PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
    76  0012                    PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
    77  0013                    PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
    78                          
    79                          ;------------------------------------------------
    80                          ;  Digital PSoC(tm) block Registers
    81                          ;  Note: Also see this address range in Bank 1.
    82                          ;------------------------------------------------
    83                          ; Digital PSoC block 00, Basic Type C
    84  0020                    DBC00DR0:     equ 20h          ; data register 0                          (#)
    85  0021                    DBC00DR1:     equ 21h          ; data register 1                          (W)
    86  0022                    DBC00DR2:     equ 22h          ; data register 2                          (RW)
    87  0023                    DBC00CR0:     equ 23h          ; control & status register 0              (#)
    88                          
    89                          ; Digital PSoC block 01, Basic Type C
    90  0024                    DBC01DR0:     equ 24h          ; data register 0                          (#)
    91  0025                    DBC01DR1:     equ 25h          ; data register 1                          (W)
    92  0026                    DBC01DR2:     equ 26h          ; data register 2                          (RW)
    93  0027                    DBC01CR0:     equ 27h          ; control & status register 0              (#)
    94                          
    95                          ; Digital PSoC block 02, Communications Type C
    96  0028                    DCC02DR0:     equ 28h          ; data register 0                          (#)
    97  0029                    DCC02DR1:     equ 29h          ; data register 1                          (W)
    98  002A                    DCC02DR2:     equ 2Ah          ; data register 2                          (RW)
    99  002B                    DCC02CR0:     equ 2Bh          ; control & status register 0              (#)
   100                          
   101                          ; Digital PSoC block 03, Communications Type C
   102  002C                    DCC03DR0:     equ 2Ch          ; data register 0                          (#)
   103  002D                    DCC03DR1:     equ 2Dh          ; data register 1                          (W)
   104  002E                    DCC03DR2:     equ 2Eh          ; data register 2                          (RW)
   105  002F                    DCC03CR0:     equ 2Fh          ; control & status register 0              (#)
   106                          
   107                          ; Digital PSoC block 10, Basic Type C
   108  0030                    DBC10DR0:     equ 30h          ; data register 0                          (#)
   109  0031                    DBC10DR1:     equ 31h          ; data register 1                          (W)
   110  0032                    DBC10DR2:     equ 32h          ; data register 2                          (RW)
   111  0033                    DBC10CR0:     equ 33h          ; control & status register 0              (#)
   112                          
   113                          ; Digital PSoC block 11, Basic Type C
   114  0034                    DBC11DR0:     equ 34h          ; data register 0                          (#)
   115  0035                    DBC11DR1:     equ 35h          ; data register 1                          (W)
   116  0036                    DBC11DR2:     equ 36h          ; data register 2                          (RW)
   117  0037                    DBC11CR0:     equ 37h          ; control & status register 0              (#)
   118                          
   119                          ; Digital PSoC block 12, Communications Type C
   120  0038                    DCC12DR0:     equ 38h          ; data register 0                          (#)
   121  0039                    DCC12DR1:     equ 39h          ; data register 1                          (W)
   122  003A                    DCC12DR2:     equ 3Ah          ; data register 2                          (RW)
   123  003B                    DCC12CR0:     equ 3Bh          ; control & status register 0              (#)
   124                          
   125                          ; Digital PSoC block 13, Communications Type C
   126  003C                    DCC13DR0:     equ 3Ch          ; data register 0                          (#)
   127  003D                    DCC13DR1:     equ 3Dh          ; data register 1                          (W)
   128  003E                    DCC13DR2:     equ 3Eh          ; data register 2                          (RW)
   129  003F                    DCC13CR0:     equ 3Fh          ; control & status register 0              (#)
   130                          
   131                          ;-------------------------------------
   132                          ;  Analog Control Registers
   133                          ;-------------------------------------
   134  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
   135  00C0                    AMX_IN_ACI3:          equ C0h    ; MASK: column 3 input mux
   136  0030                    AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
   137  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
   138  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
   139                          
   140  0061                    AMUX_CFG:      equ 61h          ; Analog MUX Configuration
   141  0030                    AMUX_CFG_INTCAP:       equ 30h    ;
   142  000E                    AMUX_CFG_MUXCLK:  	  equ 0Eh	 ;
   143  0001                    AMUX_CFG_EN:		  	  equ 01h	 ;
   144                          
   145                          ; old declarations DO NOT USE
   146  0061                    AMUXCFG:      equ 61h          ; Analog MUX Configuration
   147  0030                    AMUXCFG_INTCAP:       equ 30h    ;
   148  000E                    AMUXCFG_MUXCLK:  	  equ 0Eh	 ;
   149  0001                    AMUXCFG_EN:		  	  equ 01h	 ;
   150                          
   151  0062                    PWM_CR:       equ 62h          ; Pulse-Width Modulator Control
   152  0038                    PWM_CR_HIGH:          equ 38h    ; MASK: PWM high time
   153  0006                    PWM_CR_LOW:           equ 06h	 ; MASK: PWM low time
   154  0001                    PWM_CR_EN:            equ 01h	 ; MASK: Enable/Disable PWM function
   155                          
   156  0063                    ARF_CR:       equ 63h          ; Analog Reference Control
   157                          
   158  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus Register           (#)
   159  0080                    CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
   160  0040                    CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
   161  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
   162  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
   163  0008                    CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
   164  0004                    CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
   165  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
   166  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   167                          
   168  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   169+ 0020                    CMP_CR1_CLDIS1:       equ 20h    ; MASK: Column 1 comparator output latch
   170+ 0010                    CMP_CR1_CLDIS0:	      equ 10h    ; MASK: Column 0 comparator output latch
   171                          
   172  0068                    ADC0_CR:      equ 68h          ; Analog Column 0 Configuration
   173  0080                    ADC0_CR_CMPST:        equ 80h    ;
   174  0040                    ADC0_CR_LOREN:        equ 40h    ;
   175  0020                    ADC0_CR_SHEN:         equ 20h    ;
   176  0008                    ADC0_CR_CBSRC:        equ 08h    ;
   177  0004                    ADC0_CR_ADCM:         equ 04h    ;
   178  0001                    ADC0_CR_EN:	          equ 01h    ;
   179                          
   180  0069                    ADC1_CR:      equ 69h          ; Analog Column 1 Configuration
   181  0080                    ADC1_CR_CMPST:        equ 80h    ;
   182  0040                    ADC1_CR_LOREN:        equ 40h    ;
   183  0020                    ADC1_CR_SHEN:         equ 20h    ;
   184  0008                    ADC1_CR_CBSRC:        equ 08h    ;
   185  0004                    ADC1_CR_ADCM:         equ 04h    ;
   186  0001                    ADC1_CR_EN:	          equ 01h    ;
   187                          
   188                          ; Continuous Time PSoC block Type E Row 0 Col 0
   189  0072                    ACE00CR1:     equ 72h          ; Control register 1                       (RW)
   190  0073                    ACE00CR2:     equ 73h          ; Control register 2                       (RW)
   191                          
   192                          ; Continuous Time PSoC block Type E Row 0 Col 1
   193  0076                    ACE01CR1:     equ 76h          ; Control register 1                       (RW)
   194  0077                    ACE01CR2:     equ 77h          ; Control register 2                       (RW)
   195                          
   196                          ; Switched Cap PSoC blockType E Row 1 Col 0
   197  0080                    ASE10CR0:     equ 80h          ; Control register 0                       (RW)
   198                          
   199                          ; Switched Cap PSoC blockType E Row 1 Col 1
   200  0084                    ASE11CR0:     equ 84h          ; Control register 0                       (RW)
   201                          
   202                          ;-----------------------------------------------
   203                          ;  Global General Purpose Data Registers
   204                          ;-----------------------------------------------
   205  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   206  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   207  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   208  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   209                          
   210                          ;------------------------------------------------
   211                          ;  Row Digital Interconnects
   212                          ;
   213                          ;  Note: the following registers are mapped into
   214                          ;  both register bank 0 AND register bank 1.
   215                          ;------------------------------------------------
   216                          
   217  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   218  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   219  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   220  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   221  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   222  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   223  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   224                          
   225  00B8                    RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
   226  00B9                    RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
   227  00BA                    RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
   228  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   229  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   230  00BD                    RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
   231  00BE                    RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
   232                          
   233                          ;-----------------------------------------------
   234                          ;  Ram Page Pointers
   235                          ;-----------------------------------------------
   236  00D0                    CUR_PP:      equ 0D0h           ; Current   Page Pointer
   237  00D1                    STK_PP:      equ 0D1h           ; Stack     Page Pointer
   238  00D3                    IDX_PP:      equ 0D3h           ; Index     Page Pointer
   239  00D4                    MVR_PP:      equ 0D4h           ; MVI Read  Page Pointer
   240  00D5                    MVW_PP:      equ 0D5h           ; MVI Write Page Pointer
   241                          
   242                          ;------------------------------------------------
   243                          ;  I2C Configuration Registers
   244                          ;------------------------------------------------
   245  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   246  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   247  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   248  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   249  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   250  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   251  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   252  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   253  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   254  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   255                          
   256  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   257  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   258  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   259  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   260  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   261  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   262  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   263  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   264  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   265                          
   266  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   267                          
   268  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   269  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   270  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   271  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   272  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   273                          
   274                          ;------------------------------------------------
   275                          ;  System and Global Resource Registers
   276                          ;------------------------------------------------
   277  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   278                                                         ; Use INT_MSK0 bit field masks
   279  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   280                                                         ; Use INT_MSK1 bit field masks
   281  00DC                    INT_CLR2:     equ 0DCh          ; Interrupt Clear Register 2               (RW)
   282                                                         ; Use INT_MSK2 bit field masks
   283  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   284                                                         ; Use INT_MSK3 bit field masks
   285                          
   286  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   287  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   288  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   289                          
   290  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   291  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   292  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   293  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   294  0010                    INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
   295  0008                    INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
   296  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   297  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   298  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   299                          
   300  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   301  0080                    INT_MSK1_DCC13:            equ 80h ; MASK: enable/disable DCC13 block interrupt
   302  0040                    INT_MSK1_DCC12:            equ 40h ; MASK: enable/disable DCC12 block interrupt
   303  0020                    INT_MSK1_DBC11:            equ 20h ; MASK: enable/disable DBC11 block interrupt
   304  0010                    INT_MSK1_DBC10:            equ 10h ; MASK: enable/disable DBC10 block interrupt
   305  0008                    INT_MSK1_DCC03:            equ 08h ; MASK: enable/disable DCC03 block interrupt
   306  0004                    INT_MSK1_DCC02:            equ 04h ; MASK: enable/disable DCC02 block interrupt
   307  0002                    INT_MSK1_DBC01:            equ 02h ; MASK: enable/disable DBC01 block interrupt
   308  0001                    INT_MSK1_DBC00:            equ 01h ; MASK: enable/disable DBC00 block interrupt
   309                          
   310  00DF                    INT_MSK2:     equ DFh			; Custom block Mask Register			   (RW)
   311  0010                    INT_MSK2_SARADC:           equ 10h ; MASK: enable/disable SARADC block interrupt
   312  0020                    INT_MSK2_CSD0:             equ 20h ; MASK: enable/disable CSD0 block interrupt
   313  0040                    INT_MSK2_CSD1:             equ 40h ; MASK: enable/disable CSD1 block interrupt
   314  0080                    INT_MSK2_RTC:              equ 80h ; MASK: enable/disable RTC block interrupt
   315                          
   316  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   317  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   318                          
   319                          ;------------------------------------------------------
   320                          ;  MAC Registers
   321                          ;------------------------------------------------------
   322                          
   323  00E8                    MUL0_X:       equ 0E8h          ; Multiply Input X Register                (W)
   324  00E9                    MUL0_Y:       equ 0E9h          ; Multiply Input Y Register                (W)
   325  00EA                    MUL0_DH:      equ 0EAh          ; Multiply Result High Byte Register       (R)
   326  00EB                    MUL0_DL:      equ 0EBh          ; Multiply Result Low Byte Register        (R)
   327                          
   328  00EC                    ACC0_DR1:     equ 0ECh          ; Accumulator Data Register 1              (RW)
   329  00ED                    ACC0_DR0:     equ 0EDh          ; Accumulator Data Register 0              (RW)
   330  00EE                    ACC0_DR3:     equ 0EEh          ; Accumulator Data Register 3              (RW)
   331  00EF                    ACC0_DR2:     equ 0EFh          ; Accumulator Data Register 2              (RW)
   332                          
   333                          ; DECIMATOR Control Registers
   334  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   335  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   336                          
   337                          ;------------------------------------------------------
   338                          ;  System Status and Control Registers
   339                          ;
   340                          ;  Note: The following registers are mapped into both
   341                          ;        register bank 0 AND register bank 1.
   342                          ;------------------------------------------------------
   343  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   344                                                             ; Use FLAG_ masks defined at top of file
   345                          
   346  00FD                    DAC_D:        equ 0FDh		   ; DAC Data Register                        (RW)
   347                          
   348  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   349  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: flag, Internal Reset Status bit
   350  0010                    CPU_SCR1_SLIMO:         equ 10h	   ; MASK: Slow IMO (internal main osc) enable
   351  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   352  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   353  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   354                          
   355  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   356  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   357  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   358  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   359  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   360  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   361                          
   362                          ;------------------------------------------------------
   363                          ;  Neon Capsense Digital Control Registers
   364                          ;------------------------------------------------------
   365  0050                    CSD0_DR0_L:				equ 50h		; Capsense 0 data low 0				(RW)
   366  0054                    CSD0_DR0_H:				equ 54h		; Capsense 0 data high 0			(RW)
   367  0058                    CSD1_DR0_L:				equ 58h		; Capsense 1 data low 0				(RW)
   368  005C                    CSD1_DR0_H:				equ 5Ch		; Capsense 1 data high 0			(RW)
   369  0051                    CSD0_DR1_L:				equ 51h		; Capsense 0 data low 1				(RW)
   370  0055                    CSD0_DR1_H:				equ 55h		; Capsense 0 data high 1			(RW)
   371  0059                    CSD1_DR1_L:				equ 59h		; Capsense 1 data low 1				(RW)
   372  005D                    CSD1_DR1_H:				equ 5Dh		; Capsense 1 data high 1			(RW)
   373  0052                    CSD0_CNT_L:				equ 52h		; Capsense 0 counter low			(RW)
   374  0056                    CSD0_CNT_H:				equ 56h		; Capsense 0 counter high			(RW)
   375  005A                    CSD1_CNT_L:				equ 5Ah		; Capsense 1 counter low			(RW)
   376  005E                    CSD1_CNT_H:				equ	5Eh		; Capsense 1 counter high			(RW)
   377  0053                    CSD0_CR0:				equ 53h		; Capsense 0 control 0				(RW)
   378  005B                    CSD1_CR0:				equ 5Bh		; Capsense 1 control 0				(RW)
   379  0057                    CSD0_CR1:				equ 57h		; Capsense 0 control 1				(RW)
   380  005F                    CSD1_CR1:				equ 5Fh		; Capsense 1 control 1				(RW)
   381                          
   382                          ;------------------------------------------------------
   383                          ;  Neon Analog Registers
   384                          ;------------------------------------------------------
   385  0065                    ASY_CR:					equ 65h		; Analog Synchronization Control	(RW)
   386  006A                    ADC_DH:					equ 6Ah		; ADC data high						(RW)
   387  006B                    ADC_DL:					equ 6Bh		; ADC data low						(RW)
   388  00C8                    PWMVREF0:				equ C8h		; PWM Voltage Reference 0			(RW)
   389  00C9                    PWMVREF1:				equ C9h		; PWM Voltage Reference 1			(RW)
   390  00CB                    PWMSRC:					equ CBh		; PWM Source						(RW)
   391  00CA                    IDACMODE:				equ CAh		; IDAC Mode							(RW)
   392  00FC                    IDACR_D:				equ FCh		; Analog Mux DAC data 0				(RW)
   393  00FD                    IDACL_D:				equ FDh		; Analog Mux DAC data 1				(RW)
   394                          
   395                          ;------------------------------------------------------
   396                          ;  Neon Digital Registers
   397                          ;------------------------------------------------------
   398  00B7                    RDI0DSM:				equ B7h		; Row Digital Interconnect input select 0	(RW)
   399  00BF                    RDI1DSM:				equ BFh		; Row Digital Interconnect input select 1	(RW)
   400                          
   401                          ;------------------------------------------------------
   402                          ;  Neon Test Registers
   403                          ;------------------------------------------------------
   404  00CC                    TSCR0:					equ CCh		; Tsource 0							(RW)
   405  00CD                    TSCMPH:					equ CDh		; TSCMP high						(RW)
   406  00CE                    TSCMPL:					equ CEh		; TSCMP low							(RW)
   407  00CF                    TSCR1:					equ CFh		; Tsource 1							(RW)
   408                          
   409                          ;;=============================================================================
   410                          ;;      Register Space, Bank 1
   411                          ;;=============================================================================
   412                          
   413                          ;------------------------------------------------
   414                          ;  Port Registers
   415                          ;  Note: Also see this address range in Bank 0.
   416                          ;------------------------------------------------
   417                          ; Port 0
   418  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   419  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   420  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   421  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   422                          
   423                          ; Port 1
   424  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   425  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   426  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   427  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   428                          
   429                          ; Port 2
   430  0008                    PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
   431  0009                    PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
   432  000A                    PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
   433  000B                    PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
   434                          
   435                          ; Port 3
   436  000C                    PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
   437  000D                    PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
   438  000E                    PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
   439  000F                    PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
   440                          
   441                          ; Port 4
   442  0010                    PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
   443  0011                    PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
   444  0012                    PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
   445  0013                    PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
   446                          
   447                          ;------------------------------------------------
   448                          ;  Digital PSoC(tm) block Registers
   449                          ;  Note: Also see this address range in Bank 0.
   450                          ;------------------------------------------------
   451                          
   452                          ; Digital PSoC block 00, Basic Type C
   453  0020                    DBC00FN:      equ 20h          ; Function Register                        (RW)
   454  0021                    DBC00IN:      equ 21h          ;    Input Register                        (RW)
   455  0022                    DBC00OU:      equ 22h          ;   Output Register                        (RW)
   456  0023                    DBC00CR1:     equ 23h          ;   control & status register 1            (RW)
   457                          
   458                          ; Digital PSoC block 01, Basic Type C
   459  0024                    DBC01FN:      equ 24h          ; Function Register                        (RW)
   460  0025                    DBC01IN:      equ 25h          ;    Input Register                        (RW)
   461  0026                    DBC01OU:      equ 26h          ;   Output Register                        (RW)
   462  0027                    DBC01CR1:     equ 27h          ;   control & status register 1            (RW)
   463                          
   464                          ; Digital PSoC block 02, Communications Type C
   465  0028                    DCC02FN:      equ 28h          ; Function Register                        (RW)
   466  0029                    DCC02IN:      equ 29h          ;    Input Register                        (RW)
   467  002A                    DCC02OU:      equ 2Ah          ;   Output Register                        (RW)
   468  002B                    DBC02CR1:     equ 2Bh          ;   control & status register 1            (RW)
   469                          
   470                          ; Digital PSoC block 03, Communications Type C
   471  002C                    DCC03FN:      equ 2Ch          ; Function Register                        (RW)
   472  002D                    DCC03IN:      equ 2Dh          ;    Input Register                        (RW)
   473  002E                    DCC03OU:      equ 2Eh          ;   Output Register                        (RW)
   474  0029                    DBC03CR1:     equ 29h          ;   control & status register 1            (RW)
   475                          
   476                          ; Digital PSoC block 10, Basic Type C
   477  0030                    DBC10FN:      equ 30h          ; Function Register                        (RW)
   478  0031                    DBC10IN:      equ 31h          ;    Input Register                        (RW)
   479  0032                    DBC10OU:      equ 32h          ;   Output Register                        (RW)
   480  0033                    DBC10CR1:     equ 33h          ;   control & status register 1            (RW)
   481                          
   482                          ; Digital PSoC block 11, Basic Type C
   483  0034                    DBC11FN:      equ 34h          ; Function Register                        (RW)
   484  0035                    DBC11IN:      equ 35h          ;    Input Register                        (RW)
   485  0036                    DBC11OU:      equ 36h          ;   Output Register                        (RW)
   486  0037                    DBC11CR1:     equ 37h          ;   control & status register 1            (RW)
   487                          
   488                          ; Digital PSoC block 12, Communications Type C
   489  0038                    DCC12FN:      equ 38h          ; Function Register                        (RW)
   490  0039                    DCC12IN:      equ 39h          ;    Input Register                        (RW)
   491  003A                    DCC12OU:      equ 3Ah          ;   Output Register                        (RW)
   492  003B                    DBC12CR1:     equ 3Bh          ;   control & status register 1            (RW)
   493                          
   494                          ; Digital PSoC block 13, Communications Type C
   495  003C                    DCC13FN:      equ 3Ch          ; Function Register                        (RW)
   496  003D                    DCC13IN:      equ 3Dh          ;    Input Register                        (RW)
   497  003E                    DCC13OU:      equ 3Eh          ;   Output Register                        (RW)
   498  003F                    DBC13CR1:     equ 3Fh          ;   control & status register 1            (RW)
   499                          
   500                          ;------------------------------------------------
   501                          ;  System and Global Resource Registers
   502                          ;  Note: Also see this address range in Bank 0.
   503                          ;------------------------------------------------
   504                          
   505  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   506  00C0                    CLK_CR0_ACOLUMN_3:    equ C0h    ; MASK: Specify clock for analog cloumn
   507  0030                    CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
   508  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   509  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   510                          
   511  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   512  0018                    CLK_CR1_ACLK1:        equ 18h    ; MASK: Digital PSoC block for analog source
   513  0003                    CLK_CR1_ACLK0:        equ 03h    ; MASK: Digital PSoC block for analog source
   514                          
   515  0003                    CLK_CR1_ACLK2:        equ 03h    ; Deprecated do not use
   516                          
   517  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   518  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   519                          
   520  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   521  000F                    AMD_CR0_AMOD0:        equ 0Fh    ; MASK: Modulation source for analog column 0
   522                          
   523  0064                    CMP_GO_EN:    equ 64h          ; Comparator Bus To Global Out Enable      (RW)
   524  0080                    CMP_GO_EN_GOO5:       equ 80h    ; MASK: Selected Col 1 signal to GOO5
   525  0040                    CMP_GO_EN_GOO1:       equ 40h    ; MASK: Selected Col 1 signal to GOO1
   526  0030                    CMP_GO_EN_SEL1:       equ 30h    ; MASK: Column 1 Signal Select
   527  0008                    CMP_GO_EN_GOO4:       equ 08h    ; MASK: Selected Col 0 signal to GOO4
   528  0004                    CMP_GO_EN_GOO0:       equ 04h    ; MASK: Selected Col 0 signal to GOO0
   529  0003                    CMP_GO_EN_SEL0:       equ 03h    ; MASK: Column 0 Signal Select
   530                          
   531  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   532  000F                    AMD_CR1_AMOD1:        equ 0Fh    ; MASK: Modulation ctrl for analog column 1
   533                          
   534  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   535  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   536  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   537                          
   538  006B                    CLK_CR3:      equ 6Bh          ; Analog Clock Source Control Register 3   (RW)
   539  0040                    CLK_CR3_SYS1:         equ 40h    ; MASK: Analog Clock 1 selection
   540  0030                    CLK_CR3_DIVCLK1:      equ 30h    ; MASK: Analog Clock 1 divider
   541  0004                    CLK_CR3_SYS0:         equ 04h    ; MASK: Analog Clock 0 selection
   542  0003                    CLK_CR3_DIVCLK0:      equ 03h    ; MASK: Analog Clock 0 divider
   543                          
   544                          ;------------------------------------------------
   545                          ;  Global Digital Interconnects
   546                          ;------------------------------------------------
   547                          
   548  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   549  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   550  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   551  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   552                          
   553  00A0                    GDI_O_IN_CR:  equ 0A0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   554  00A1                    GDI_E_IN_CR:  equ 0A1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   555  00A2                    GDI_O_OU_CR:  equ 0A2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   556  00A3                    GDI_E_OU_CR:  equ 0A3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   557                          
   558  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   559  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   560                          
   561                          ;------------------------------------------------
   562                          ;  Analog Mux Bus Port Enable Bits
   563                          ;------------------------------------------------
   564  00D8                    MUX_CR0:      equ 0D8h          ; Analog Mux Port 0 Bit Enables Register
   565  00D9                    MUX_CR1:      equ 0D9h          ; Analog Mux Port 1 Bit Enables Register
   566  00DA                    MUX_CR2:      equ 0DAh          ; Analog Mux Port 2 Bit Enables Register
   567  00DB                    MUX_CR3:      equ 0DBh          ; Analog Mux Port 3 Bit Enables Register
   568  00EC                    MUX_CR4:      equ 0ECh          ; Analog Mux Port 4 Bit Enables Register
   569                          
   570                          ;------------------------------------------------
   571                          ;  Clock and System Control Registers
   572                          ;------------------------------------------------
   573                          
   574  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   575  0080                    OSC_GO_EN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   576  0040                    OSC_GO_EN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   577  0020                    OSC_GO_EN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   578  0010                    OSC_GO_EN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   579  0008                    OSC_GO_EN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   580  0004                    OSC_GO_EN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   581  0002                    OSC_GO_EN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   582  0001                    OSC_GO_EN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   583                          
   584  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   585  0003                    OSC_CR4_VC3SEL:       equ 03h    ; MASK: System VC3 Clock source
   586                          
   587  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   588                          
   589  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   590  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   591  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   592  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   593  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   594  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   595  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   596  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   597  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   598  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   599  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   600  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   601  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   602  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   603  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   604  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   605  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   606  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   607                          
   608  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   609  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   610  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   611                          
   612  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   613  0080                    OSC_CR2_PLLGAIN:      equ 80h    ; MASK: High/Low gain
   614  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   615  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   616  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   617                          
   618  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   619  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   620  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   621  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   622  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   623  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   624  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   625  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   626                          
   627  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   628  0008                    VLT_CMP_NOWRITE:      equ 08h    ; MASK: Vcc below Flash Write level
   629  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   630  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   631  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   632                          
   633  00E5                    ADC0_TR:      equ 0E5h          ; ADC Column 0 Trim Register
   634  00E6                    ADC1_TR:      equ 0E6h          ; ADC Column 1 Trim Register
   635                          
   636  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   637  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   638  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   639  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   640                          
   641  00FA                    FLS_PR1:      equ 0FAh          ; Flash Program Register 1                 (RW)
   642  0003                    FLS_PR1_BANK:         equ 03h    ; MASK: Select Active Flash Bank
   643                          
   644  00FD                    DAC_CR0:       equ 0FDh          ; Analog Mux DAC Control Register 0
   645  00DC                    DAC_CR1:       equ 0DCh          ; Analog Mux DAC Control Register 1
   646  0008                    DAC_CR_IRANGE:        equ 08h    ; MASK: Sets the DAC Range low or high
   647  0006                    DAC_CR_OSCMODE:       equ 06h    ; MASK: Defines the reset mode for AMux
   648  0001                    DAC_CR_ENABLE:        equ 01h    ; MASK: Enable/Disable DAC function
   649                          
   650                          ;------------------------------------------------
   651                          ;  I2C Control Registers
   652                          ;------------------------------------------------
   653                          
   654  00AD                    I2C_ADDR:    equ 0ADh          ; I2C Address Register (RW)
   655                          
   656                          ;------------------------------------------------------
   657                          ;  Neon Analog Registers
   658                          ;------------------------------------------------------
   659  0053                    VDAC50CR0:		equ 53h			; V DAC5 control 0				(RW)
   660  0057                    VDAC51CR0:		equ 57h			; V DAC5 control 1				(RW)
   661  00A8                    ADC_CR0:		equ A8h			; ADC control 0					(RW)
   662  00A9                    ADC_CR1:		equ A9h			; ADC control 1					(RW)
   663  00AA                    ADC_CR2:		equ AAh			; ADC control 2					(RW)
   664  00AB                    ADC_CR3TRIM:	equ ABh			; ADC control 3					(RW)
   665  00AC                    ADC_CR4:		equ ACh			; ADC control 4					(RW)
   666  00E7                    VDAC_TRIM:		equ E7h			; V DAC trim					(RW)
   667                          
   668                          ;------------------------------------------------------
   669                          ;  Neon Current Sense CMP Registers
   670                          ;------------------------------------------------------
   671  0050                    CMP0CR1:		equ 50h			; CMP0 control 1				(RW)
   672  0051                    CMP0CR2:		equ 51h			; CMP0 control 2				(RW)
   673  0054                    CMP1CR1:		equ 54h			; CMP1 control 1				(RW)
   674  0055                    CMP1CR2:		equ 55h			; CMP1 control 2				(RW)
   675  0058                    CSCMPCR0:		equ 58h			; CSCMP control 0				(RW)
   676  0059                    CSCMPGOEN:		equ 59h			; CSCMO global out enable		(RW)
   677  005A                    CSLUTCR0:		equ 5Ah			; CSLUT control 0				(RW)
   678  005B                    CMPCOLMUX:		equ 5Bh			; CMP Column Mux				(RW)
   679  005C                    CMPPWMCR:		equ 5Ch			; CMP PWM control				(RW)
   680  005D                    CMPFLTCR:		equ 5Dh			; CMP filter control			(RW)
   681  005E                    CMPCLK1:		equ 5Eh			; CMP clock 1					(RW)
   682  005F                    CMPCLK0:		equ 5Fh			; CMP clock 0					(RW)
   683                          
   684                          ;------------------------------------------------------
   685                          ;  Neon Real Time Clock Registers
   686                          ;------------------------------------------------------
   687  00A4                    RTCH:			equ A4h			; Real time current hour		(RW)
   688  00A5                    RTCM:			equ A5h			; Real time current minute		(RW)
   689  00A6                    RTCS:			equ A6h			; Real time current second		(RW)
   690  00A7                    RTCCR:			equ A7h			; Real time clock control		(RW)
   691                          
   692                          ;------------------------------------------------------
   693                          ;  Analog MUX Config Registers
   694                          ;------------------------------------------------------
   695                          
   696  006A                    AMUX_CFG1:			equ 6Ah  ; Analog MUX Configuration 1
   697  0020                    AMUX_CFG1_GOINVR:	equ 20h  ;
   698  0010                    AMUX_CFG1_GOINVL:  	equ 10h	 ;
   699  000C                    AMUX_CFG1_AMUXMODR:	equ 0Ch	 ;
   700  0003                    AMUX_CFG1_AMUXMODL:	equ 03h	 ;
   701                          
   702                          ;;=============================================================================
   703                          ;;      M8C System Macros
   704                          ;;  These macros should be used when their functions are needed.
   705                          ;;=============================================================================
   706                          
   707                          ;----------------------------------------------------
   708                          ;  Swapping Register Banks
   709                          ;----------------------------------------------------
   710                              macro M8C_SetBank0
   711                              and   F, ~FLAG_XIO_MASK
   712  3C41                        endm
   713                          
   714                              macro M8C_SetBank1
   715                              or    F, FLAG_XIO_MASK
   716  3C41                        endm
   717                          
   718                          ;----------------------------------------------------
   719                          ;  Global Interrupt Enable/Disable
   720                          ;----------------------------------------------------
   721                              macro M8C_EnableGInt
   722                              or    F, FLAG_GLOBAL_IE
   723  3C41                        endm
   724                          
   725                              macro M8C_DisableGInt
   726                              and   F, ~FLAG_GLOBAL_IE
   727  3C41                        endm
   728                          
   729                          ;----------------------------------------------------
   730                          ;  Enable/Disable Interrupt Mask
   731                          ;
   732                          ;  Use the following macros to enable/disable
   733                          ;  bits in the Interrupt mask registers,
   734                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   735                          ;
   736                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   737                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   738                          ;
   739                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   740                          ;        and MASK is the bit set to enable or disable
   741                          ;----------------------------------------------------
   742                          ; Disable Interrupt Bit Mask(s)
   743                              macro M8C_DisableIntMask
   744                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   745  3C41                        endm
   746                          
   747                          ; Enable Interrupt Bit Mask(s)
   748                              macro M8C_EnableIntMask
   749                              or    reg[@0], @1               ; enable specified interrupt enable bit
   750  3C41                        endm
   751                          
   752                          ;----------------------------------------------------
   753                          ;  Clear Posted Interrupt Flag Mask
   754                          ;
   755                          ;  Use the following macros to clear the
   756                          ;  bits in the Interrupt Clear registers,
   757                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   758                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   759                          ;
   760                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   761                          ;        and MASK is the bit set to enable or disable
   762                          ;----------------------------------------------------
   763                              macro M8C_ClearIntFlag
   764                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   765  3C41                        endm
   766                          
   767                          ;----------------------------------------------------
   768                          ;  Power-On Reset & WatchDog Timer Functions
   769                          ;----------------------------------------------------
   770                              macro M8C_EnableWatchDog
   771                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   772  3C41                        endm
   773                          
   774                              macro M8C_ClearWDT
   775                              mov   reg[RES_WDT], 00h
   776  3C41                        endm
   777                          
   778                              macro M8C_ClearWDTAndSleep
   779                              mov   reg[RES_WDT], 38h
   780  3C41                        endm
   781                          
   782                          ;----------------------------------------------------
   783                          ;  Sleep, CPU Stop & Software Reset
   784                          ;----------------------------------------------------
   785                              macro M8C_Sleep
   786                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   787                              ; The next instruction to be executed depends on the state of the
   788                              ; various interrupt enable bits. If some interrupts are enabled
   789                              ; and the global interrupts are disabled, the next instruction will
   790                              ; be the one that follows the invocation of this macro. If global
   791                              ; interrupts are also enabled then the next instruction will be
   792                              ; from the interrupt vector table. If no interrupts are enabled
   793                              ; then the CPU sleeps forever.
   794  3C41                        endm
   795                          
   796                              macro M8C_Stop
   797                              ; In general, you probably don't want to do this, but here's how:
   798                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   799                              ; Next instruction to be executed is located in the interrupt
   800                              ; vector table entry for Power-On Reset.
   801  3C41                        endm
   802                          
   803                              macro M8C_Reset
   804                              ; Restore CPU to the power-on reset state.
   805                              mov A, 0
   806                              SSC
   807                              ; Next non-supervisor instruction will be at interrupt vector 0.
   808  3C41                        endm
   809                          
   810                          ;----------------------------------------------------
   811                          ; ImageCraft Code Compressor Actions
   812                          ;----------------------------------------------------
   813                              ; Suspend Code Compressor
   814                              ; Must not span a RET or RETI instruction
   815                              ; without resuming code compression
   816                              macro Suspend_CodeCompressor
   817                              or   F, 0
   818  3C41                        endm
   819                          
   820                              ; Resume Code Compression
   821                              macro Resume_CodeCompressor
   822                              add  SP, 0
   823  3C41                        endm
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  FILENAME:   UART_BoardINT.asm
     4                          ;;  Version: 5.3, Updated on 2013/5/19 at 10:44:49
     5                          ;;  Generated by PSoC Designer 5.4.2946
     6                          ;;
     7                          ;;  DESCRIPTION:  UART Interrupt Service Routine.
     8                          ;;-----------------------------------------------------------------------------
     9                          ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
    10                          ;;*****************************************************************************
    11                          ;;*****************************************************************************
    12                          
    13                          
    14                          include "UART_Board.inc"
    15                          include "memory.inc"
    16                          include "m8c.inc"
    17                          
    18                          ;-----------------------------------------------
    19                          ;  Global Symbols
    20                          ;-----------------------------------------------
    21                          export  _UART_Board_TX_ISR
    22                          export  _UART_Board_RX_ISR
    23                          
    24                          IF (UART_Board_RXBUF_ENABLE)
    25                          export  UART_Board_aRxBuffer
    26                          export _UART_Board_aRxBuffer
    27                          export  UART_Board_bRxCnt
    28                          export _UART_Board_bRxCnt
    29                          export  UART_Board_fStatus
    30                          export _UART_Board_fStatus
    31                          ENDIF
    32                          
    33                          
    34                          ;-----------------------------------------------
    35                          ; Variable Allocation
    36                          ;-----------------------------------------------
    37                          AREA InterruptRAM (RAM, REL, CON)
    38                          
    39                          IF (UART_Board_RXBUF_ENABLE)
    40                           UART_Board_fStatus:
    41                          _UART_Board_fStatus:      BLK  1
    42                           UART_Board_bRxCnt:
    43                          _UART_Board_bRxCnt:       BLK  1
    44                          AREA UART_Board_RAM (RAM, REL, CON)
    45                           UART_Board_aRxBuffer:
    46                          _UART_Board_aRxBuffer:    BLK UART_Board_RX_BUFFER_SIZE
    47                          ENDIF
    48                          
    49                          AREA InterruptRAM (RAM, REL, CON)
    50                          
    51                          ;@PSoC_UserCode_INIT@ (Do not change this line.)
    52                          ;---------------------------------------------------
    53                          ; Insert your custom declarations below this banner
    54                          ;---------------------------------------------------
    55                          
    56                          ;------------------------
    57                          ;  Includes
    58                          ;------------------------
    59                          
    60                          
    61                          ;------------------------
    62                          ;  Constant Definitions
    63                          ;------------------------
    64                          
    65                          
    66                          ;------------------------
    67                          ; Variable Allocation
    68                          ;------------------------
    69                          
    70                          
    71                          ;---------------------------------------------------
    72                          ; Insert your custom declarations above this banner
    73                          ;---------------------------------------------------
    74                          ;@PSoC_UserCode_END@ (Do not change this line.)
    75                          
    76                          
    77                          AREA UserModules (ROM, REL, CON)
    78                          
    79                          ;-----------------------------------------------------------------------------
    80                          ;  FUNCTION NAME: _UART_Board_TX_ISR
    81                          ;
    82                          ;  DESCRIPTION:
    83                          ;     UART TX interrupt handler for instance UART_Board.
    84                          ;
    85                          ;     This is a place holder function.  If the user requires use of an interrupt
    86                          ;     handler for this function, then place code where specified.
    87                          ;-----------------------------------------------------------------------------
    88                          
    89  2EFF                    _UART_Board_TX_ISR:
    90                             ;@PSoC_UserCode_BODY_1@ (Do not change this line.)
    91                             ;---------------------------------------------------
    92                             ; Insert your custom assembly code below this banner
    93                             ;---------------------------------------------------
    94                             ;   NOTE: interrupt service routines must preserve
    95                             ;   the values of the A and X CPU registers.
    96                             
    97                             ;---------------------------------------------------
    98                             ; Insert your custom assembly code above this banner
    99                             ;---------------------------------------------------
   100                             
   101                             ;---------------------------------------------------
   102                             ; Insert a lcall to a C function below this banner
   103                             ; and un-comment the lines between these banners
   104                             ;---------------------------------------------------
   105                             
   106                             ;PRESERVE_CPU_CONTEXT
   107                             ;lcall _My_C_Function
   108                             ;RESTORE_CPU_CONTEXT
   109                             
   110                             ;---------------------------------------------------
   111                             ; Insert a lcall to a C function above this banner
   112                             ; and un-comment the lines between these banners
   113                             ;---------------------------------------------------
   114                             ;@PSoC_UserCode_END@ (Do not change this line.)
   115  2EFF  7E                   reti
   116                          
   117                          
   118                          ;-----------------------------------------------------------------------------
   119                          ;  FUNCTION NAME: _UART_Board_RX_ISR
   120                          ;
   121                          ;  DESCRIPTION:
   122                          ;     UART RX interrupt handler for instance UART_Board.
   123                          ;     This ISR handles the background processing of received characters if
   124                          ;     the buffer is enabled.
   125                          ;
   126                          ;
   127                          ;  The following assumes that the RX buffer feature has been enabled.
   128                          ;
   129                          ;  SIDE EFFECTS:
   130                          ;     There are 3 posible errors that may occur with the serial port.
   131                          ;      1) Parity Error
   132                          ;      2) Framing Error
   133                          ;      3) OverRun Error
   134                          ;
   135                          ;  This user module check for parity and framing error.  If either of these
   136                          ;  two errors are detected, the data is read and ignored.  When an overRun
   137                          ;  error occurs, the last byte was lost, but the current byte is valid.  For
   138                          ;  this reason this error is ignored at this time.  Code could be added to
   139                          ;  this ISR to set a flag if an error condition occurs.
   140                          ;
   141                          ;  THEORY of OPERATION:
   142                          ;     When using the RX buffer feature, the ISR collects received characters
   143                          ;     in a buffer until the user defined command terminator is detected.  After
   144                          ;     the command terminator is detected, the command bit is set and all other
   145                          ;     characters will be ignored until the command bit is reset.  Up to
   146                          ;     buffer_size - 1 characters will be collected waiting for a command
   147                          ;     terminator.  After that, the characters will be discarded, although
   148                          ;     a command determinator will still cause the command bit to be set.
   149                          ;
   150                          ;-----------------------------------------------------------------------------
   151  2F00                    _UART_Board_RX_ISR:
   152                          
   153                             ;@PSoC_UserCode_BODY_2@ (Do not change this line.)
   154                             ;---------------------------------------------------
   155                             ; Insert your custom assembly code below this banner
   156                             ;---------------------------------------------------
   157                             ;   NOTE: interrupt service routines must preserve
   158                             ;   the values of the A and X CPU registers.
   159                             
   160                             ;---------------------------------------------------
   161                             ; Insert your custom assembly code above this banner
   162                             ;---------------------------------------------------
   163                             
   164                             ;---------------------------------------------------
   165                             ; Insert a lcall to a C function below this banner
   166                             ; and un-comment the lines between these banners
   167                             ;---------------------------------------------------
   168                             
   169                             ;PRESERVE_CPU_CONTEXT
   170                             ;lcall _My_C_Function
   171                             ;RESTORE_CPU_CONTEXT
   172                             
   173                             ;---------------------------------------------------
   174                             ; Insert a lcall to a C function above this banner
   175                             ; and un-comment the lines between these banners
   176                             ;---------------------------------------------------
   177                             ;@PSoC_UserCode_END@ (Do not change this line.)
   178                          
   179                          IF (UART_Board_RXBUF_ENABLE)
   180                             push A
   181                             push X
   182                             
   183                             IF SYSTEM_LARGE_MEMORY_MODEL
   184                                REG_PRESERVE IDX_PP
   185                             ENDIF
   186                             
   187                             mov  X,[UART_Board_bRxCnt]                              ; Load X with byte counter
   188                             mov  A,REG[UART_Board_RX_CONTROL_REG]                   ; Read the control register
   189                             push A                                                  ; Store copy for later test
   190                                                                                     ; IF real RX interrupt
   191                             and  A,UART_Board_RX_REG_FULL                           ; Did really really get an IRQ
   192                             jnz  .UARTRX_ReadRx                                     ; Data ready, go get it
   193                             pop  A                                                  ; Restore stack
   194                             jmp  .RESTORE_IDX_PP
   195                          
   196                          .UARTRX_ReadRx:
   197                             pop  A                                                  ; Restore status flags
   198                                                                                     ; IF there is no error, get data
   199                                                                                     ; Check for parity or framing error
   200                             and  A,UART_Board_RX_ERROR
   201                             jz   .UARTRX_NO_ERROR                                   ; If there is not an Error go read data
   202                          
   203                             or   [UART_Board_fStatus],A                             ; Set error flags (parity,framing,overrun
                                ) bits
   204                             tst  REG[UART_Board_RX_BUFFER_REG], 0x00                ; Read the data buffer to clear it.
   205                             and  A,UART_Board_RX_FRAMING_ERROR                      ; Check for framing error special case
   206                             jz   .RESTORE_IDX_PP                                    ; Not framing error, all done
   207                          
   208                                                                                     ; Disable and re-enable RX to reset after
   209                                                                                     ; framing error.
   210                             and   REG[UART_Board_RX_CONTROL_REG], ~UART_Board_RX_ENABLE   ; Disable RX
   211                             or    REG[UART_Board_RX_CONTROL_REG],  UART_Board_RX_ENABLE   ; Enable RX
   212                             jmp  .RESTORE_IDX_PP                                    ; Done with framing error, leave.
   213                          
   214                          
   215                          .UARTRX_NO_ERROR:
   216                             mov  A,REG[UART_Board_RX_BUFFER_REG ]                   ; Read the data buffer
   217                          
   218                                                                                     ; IF buffer not full
   219                             tst  [UART_Board_fStatus],UART_Board_RX_BUF_CMDTERM     ; Check for buffer full
   220                             jnz  .RESTORE_IDX_PP                                    ; All done
   221                          
   222                             cmp  A,UART_Board_CMD_TERM                              ; Check for End of command
   223                             jnz  .UARTRX_CHK_BACKSPACE
   224                             or   [UART_Board_fStatus],UART_Board_RX_BUF_CMDTERM     ; Set command ready bit
   225                          
   226                          
   227                          
   228                             RAM_SETPAGE_IDX >UART_Board_aRxBuffer
   229                             RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
   230                             mov  [X + UART_Board_aRxBuffer],00h                     ; Zero out last data
   231                             RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
   232                             jmp  .RESTORE_IDX_PP
   233                          
   234                          .UARTRX_CHK_BACKSPACE:                                     ; 
   235                          IF(UART_Board_BACKSPACE_ENABLE)                            ; Enable if backspace/delete mode
   236                             cmp  A,UART_Board_BACKSPACE_ENABLE                      ; Check for backspace character
   237                             jnz  .UARTRX_IGNORE                                     ; If not, skip the backspace stuff
   238                             cmp  [UART_Board_bRxCnt],00h                            ; Check if buffer empty
   239                             jz   .RESTORE_IDX_PP                                    ; 
   240                             dec  [UART_Board_bRxCnt]                                ; Decrement buffer count by one.
   241                             jmp  .RESTORE_IDX_PP
   242                          ENDIF                                                      ; 
   243                          
   244                          .UARTRX_IGNORE:
   245                          IF(UART_Board_RX_IGNORE_BELOW)                             ; Ignore charaters below this value
   246                             cmp  A,UART_Board_RX_IGNORE_BELOW                       ; If ignore char is set to 0x00, do not
   247                             jc   .RESTORE_IDX_PP                                    ; ignore any characters.
   248                          ENDIF
   249                          
   250                          .UARTRX_CHK_OVFL:                                          ; Check for MAX String here
   251                          	
   252                             RAM_SETPAGE_IDX >UART_Board_aRxBuffer                   ;   using idexed address mode
   253                             cmp  [UART_Board_bRxCnt],(UART_Board_RX_BUFFER_SIZE - 1)
   254                             jc   .UARTRX_ISR_GETDATA
   255                             RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
   256                             mov  [X + UART_Board_aRxBuffer],00h                     ; Zero out last data in the buffer
   257                             RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
   258                             or   [UART_Board_fStatus],UART_Board_RX_BUF_OVERRUN     ; Set error flags (parity,framing,overrun
                                ) bits
   259                             jmp  .RESTORE_IDX_PP
   260                          
   261                          .UARTRX_ISR_GETDATA:                                       ; IF input data == "CR", then end of comm
                                and
   262                                                                                     ; X is already loaded with pointer
   263                             RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
   264                             mov  [X+UART_Board_aRxBuffer],A                         ; store data in array
   265                             RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
   266                             inc  X                                                  ; Inc the pointer
   267                             mov  [UART_Board_bRxCnt],X                              ; Restore the pointer
   268                                                                                     ; ENDIF max string size
   269                          .RESTORE_IDX_PP:
   270                             IF SYSTEM_LARGE_MEMORY_MODEL
   271                                REG_RESTORE IDX_PP
   272                             ENDIF
   273                          
   274                          .END_UARTRX_ISR:
   275                             pop  X
   276                             pop  A
   277                          
   278                          ENDIF
   279                          
   280  2F00                    UART_Board_RX_ISR_END:
   281  2F00  7E                   reti
HI-TECH Software Macro Assembler (PSoC MCU) V9.61
Symbol Table                                                                                               Fri Jun 12 09:25:11 2015
                          HITECH 0002           UART_Board_RXBUF_ENABLE 0000             UART_Board_RX_ISR_END 2F00  
                       TOOLCHAIN 0002                _UART_Board_RX_ISR 2F00                _UART_Board_TX_ISR 2EFF  
HI-TECH Software Macro Assembler (PSoC MCU) V9.61
                                                                                                           Fri Jun 12 09:25:11 2015
     1                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     2                          ;;;
     3                          ;;;  M8C.INC -- Microcontroller Device System Declarations
     4                          ;;;
     5                          ;;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
     6                          ;;;
     7                          ;;;  This file provides address constants, bit field masks and a set of macro
     8                          ;;;  facilities for the Cypress Semiconductor CY8C22045 Microcontroller devices.
     9                          ;;;
    10                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    11                          
    12                          ;;=============================================================================
    13                          ;; Definition of abbreviations used in the descriptions below
    14                          ;;  (RW)   The register or bit supports reads and writes
    15                          ;;  (W)    The register or bit is write-only
    16                          ;;  (R)    The register or bit is read-only
    17                          ;;  (#)    Access to the register is bit specific (see the family datasheet)
    18                          ;;  (RC)   The register or bit can be read, but writing a 0 will clear it,
    19                          ;;         writing a 1 will have no effect.
    20                          ;;=============================================================================
    21                          
    22                          ;;=============================================================================
    23                          ;;      System Registers
    24                          ;;=============================================================================
    25                          
    26                          ;----------------------------
    27                          ;  Flag Register Bit Fields
    28                          ;----------------------------
    29  00C0                    FLAG_PGMODE_MASK:  equ 0C0h     ; Paging control for > 256 bytes of RAM
    30  0000                    FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
    31  0040                    FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
    32  0080                    FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
    33  00C0                    FLAG_PGMODE_3:     equ 0C0h       ; Direct to CUR_PP page, indexed to STK_PP page
    34  0000                    FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
    35  0040                    FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
    36  0080                    FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
    37  00C0                    FLAG_PGMODE_11b:   equ 0C0h       ; Same as PGMODE_3
    38  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    39  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    40  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    41  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    42  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    43                          
    44                          
    45                          ;;=============================================================================
    46                          ;;      Register Space, Bank 0
    47                          ;;=============================================================================
    48                          
    49                          ;------------------------------------------------
    50                          ;  Port Registers
    51                          ;  Note: Also see this address range in Bank 1.
    52                          ;------------------------------------------------
    53                          ; Port 0
    54  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    55  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    56  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    57  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    58                          ; Port 1
    59  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    60  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    61  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    62  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    63                          ; Port 2
    64  0008                    PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
    65  0009                    PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
    66  000A                    PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
    67  000B                    PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
    68                          ; Port 3
    69  000C                    PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
    70  000D                    PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
    71  000E                    PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
    72  000F                    PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
    73                          ; Port 4
    74  0010                    PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
    75  0011                    PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
    76  0012                    PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
    77  0013                    PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
    78                          
    79                          ;------------------------------------------------
    80                          ;  Digital PSoC(tm) block Registers
    81                          ;  Note: Also see this address range in Bank 1.
    82                          ;------------------------------------------------
    83                          ; Digital PSoC block 00, Basic Type C
    84  0020                    DBC00DR0:     equ 20h          ; data register 0                          (#)
    85  0021                    DBC00DR1:     equ 21h          ; data register 1                          (W)
    86  0022                    DBC00DR2:     equ 22h          ; data register 2                          (RW)
    87  0023                    DBC00CR0:     equ 23h          ; control & status register 0              (#)
    88                          
    89                          ; Digital PSoC block 01, Basic Type C
    90  0024                    DBC01DR0:     equ 24h          ; data register 0                          (#)
    91  0025                    DBC01DR1:     equ 25h          ; data register 1                          (W)
    92  0026                    DBC01DR2:     equ 26h          ; data register 2                          (RW)
    93  0027                    DBC01CR0:     equ 27h          ; control & status register 0              (#)
    94                          
    95                          ; Digital PSoC block 02, Communications Type C
    96  0028                    DCC02DR0:     equ 28h          ; data register 0                          (#)
    97  0029                    DCC02DR1:     equ 29h          ; data register 1                          (W)
    98  002A                    DCC02DR2:     equ 2Ah          ; data register 2                          (RW)
    99  002B                    DCC02CR0:     equ 2Bh          ; control & status register 0              (#)
   100                          
   101                          ; Digital PSoC block 03, Communications Type C
   102  002C                    DCC03DR0:     equ 2Ch          ; data register 0                          (#)
   103  002D                    DCC03DR1:     equ 2Dh          ; data register 1                          (W)
   104  002E                    DCC03DR2:     equ 2Eh          ; data register 2                          (RW)
   105  002F                    DCC03CR0:     equ 2Fh          ; control & status register 0              (#)
   106                          
   107                          ; Digital PSoC block 10, Basic Type C
   108  0030                    DBC10DR0:     equ 30h          ; data register 0                          (#)
   109  0031                    DBC10DR1:     equ 31h          ; data register 1                          (W)
   110  0032                    DBC10DR2:     equ 32h          ; data register 2                          (RW)
   111  0033                    DBC10CR0:     equ 33h          ; control & status register 0              (#)
   112                          
   113                          ; Digital PSoC block 11, Basic Type C
   114  0034                    DBC11DR0:     equ 34h          ; data register 0                          (#)
   115  0035                    DBC11DR1:     equ 35h          ; data register 1                          (W)
   116  0036                    DBC11DR2:     equ 36h          ; data register 2                          (RW)
   117  0037                    DBC11CR0:     equ 37h          ; control & status register 0              (#)
   118                          
   119                          ; Digital PSoC block 12, Communications Type C
   120  0038                    DCC12DR0:     equ 38h          ; data register 0                          (#)
   121  0039                    DCC12DR1:     equ 39h          ; data register 1                          (W)
   122  003A                    DCC12DR2:     equ 3Ah          ; data register 2                          (RW)
   123  003B                    DCC12CR0:     equ 3Bh          ; control & status register 0              (#)
   124                          
   125                          ; Digital PSoC block 13, Communications Type C
   126  003C                    DCC13DR0:     equ 3Ch          ; data register 0                          (#)
   127  003D                    DCC13DR1:     equ 3Dh          ; data register 1                          (W)
   128  003E                    DCC13DR2:     equ 3Eh          ; data register 2                          (RW)
   129  003F                    DCC13CR0:     equ 3Fh          ; control & status register 0              (#)
   130                          
   131                          ;-------------------------------------
   132                          ;  Analog Control Registers
   133                          ;-------------------------------------
   134  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
   135  00C0                    AMX_IN_ACI3:          equ C0h    ; MASK: column 3 input mux
   136  0030                    AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
   137  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
   138  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
   139                          
   140  0061                    AMUX_CFG:      equ 61h          ; Analog MUX Configuration
   141  0030                    AMUX_CFG_INTCAP:       equ 30h    ;
   142  000E                    AMUX_CFG_MUXCLK:  	  equ 0Eh	 ;
   143  0001                    AMUX_CFG_EN:		  	  equ 01h	 ;
   144                          
   145                          ; old declarations DO NOT USE
   146  0061                    AMUXCFG:      equ 61h          ; Analog MUX Configuration
   147  0030                    AMUXCFG_INTCAP:       equ 30h    ;
   148  000E                    AMUXCFG_MUXCLK:  	  equ 0Eh	 ;
   149  0001                    AMUXCFG_EN:		  	  equ 01h	 ;
   150                          
   151  0062                    PWM_CR:       equ 62h          ; Pulse-Width Modulator Control
   152  0038                    PWM_CR_HIGH:          equ 38h    ; MASK: PWM high time
   153  0006                    PWM_CR_LOW:           equ 06h	 ; MASK: PWM low time
   154  0001                    PWM_CR_EN:            equ 01h	 ; MASK: Enable/Disable PWM function
   155                          
   156  0063                    ARF_CR:       equ 63h          ; Analog Reference Control
   157                          
   158  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus Register           (#)
   159  0080                    CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
   160  0040                    CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
   161  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
   162  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
   163  0008                    CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
   164  0004                    CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
   165  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
   166  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   167                          
   168  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   169  0020                    CMP_CR1_CLDIS1:       equ 20h    ; MASK: Column 1 comparator output latch
   170  0010                    CMP_CR1_CLDIS0:	      equ 10h    ; MASK: Column 0 comparator output latch
   171                          
   172  0068                    ADC0_CR:      equ 68h          ; Analog Column 0 Configuration
   173  0080                    ADC0_CR_CMPST:        equ 80h    ;
   174  0040                    ADC0_CR_LOREN:        equ 40h    ;
   175  0020                    ADC0_CR_SHEN:         equ 20h    ;
   176  0008                    ADC0_CR_CBSRC:        equ 08h    ;
   177  0004                    ADC0_CR_ADCM:         equ 04h    ;
   178  0001                    ADC0_CR_EN:	          equ 01h    ;
   179                          
   180  0069                    ADC1_CR:      equ 69h          ; Analog Column 1 Configuration
   181  0080                    ADC1_CR_CMPST:        equ 80h    ;
   182  0040                    ADC1_CR_LOREN:        equ 40h    ;
   183  0020                    ADC1_CR_SHEN:         equ 20h    ;
   184  0008                    ADC1_CR_CBSRC:        equ 08h    ;
   185  0004                    ADC1_CR_ADCM:         equ 04h    ;
   186  0001                    ADC1_CR_EN:	          equ 01h    ;
   187                          
   188                          ; Continuous Time PSoC block Type E Row 0 Col 0
   189  0072                    ACE00CR1:     equ 72h          ; Control register 1                       (RW)
   190  0073                    ACE00CR2:     equ 73h          ; Control register 2                       (RW)
   191                          
   192                          ; Continuous Time PSoC block Type E Row 0 Col 1
   193  0076                    ACE01CR1:     equ 76h          ; Control register 1                       (RW)
   194  0077                    ACE01CR2:     equ 77h          ; Control register 2                       (RW)
   195                          
   196                          ; Switched Cap PSoC blockType E Row 1 Col 0
   197  0080                    ASE10CR0:     equ 80h          ; Control register 0                       (RW)
   198                          
   199                          ; Switched Cap PSoC blockType E Row 1 Col 1
   200  0084                    ASE11CR0:     equ 84h          ; Control register 0                       (RW)
   201                          
   202                          ;-----------------------------------------------
   203                          ;  Global General Purpose Data Registers
   204                          ;-----------------------------------------------
   205  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   206  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   207  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   208  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   209                          
   210                          ;------------------------------------------------
   211                          ;  Row Digital Interconnects
   212                          ;
   213                          ;  Note: the following registers are mapped into
   214                          ;  both register bank 0 AND register bank 1.
   215                          ;------------------------------------------------
   216                          
   217  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   218  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   219  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   220  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   221  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   222  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   223  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   224                          
   225  00B8                    RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
   226  00B9                    RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
   227  00BA                    RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
   228  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   229  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   230  00BD                    RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
   231  00BE                    RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
   232                          
   233                          ;-----------------------------------------------
   234                          ;  Ram Page Pointers
   235                          ;-----------------------------------------------
   236  00D0                    CUR_PP:      equ 0D0h           ; Current   Page Pointer
   237  00D1                    STK_PP:      equ 0D1h           ; Stack     Page Pointer
   238  00D3                    IDX_PP:      equ 0D3h           ; Index     Page Pointer
   239  00D4                    MVR_PP:      equ 0D4h           ; MVI Read  Page Pointer
   240  00D5                    MVW_PP:      equ 0D5h           ; MVI Write Page Pointer
   241                          
   242                          ;------------------------------------------------
   243                          ;  I2C Configuration Registers
   244                          ;------------------------------------------------
   245  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   246  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   247  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   248  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   249  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   250  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   251  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   252  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   253  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   254  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   255                          
   256  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   257  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   258  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   259  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   260  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   261  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   262  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   263  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   264  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   265                          
   266  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   267                          
   268  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   269  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   270  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   271  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   272  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   273                          
   274                          ;------------------------------------------------
   275                          ;  System and Global Resource Registers
   276                          ;------------------------------------------------
   277  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   278                                                         ; Use INT_MSK0 bit field masks
   279  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   280                                                         ; Use INT_MSK1 bit field masks
   281  00DC                    INT_CLR2:     equ 0DCh          ; Interrupt Clear Register 2               (RW)
   282                                                         ; Use INT_MSK2 bit field masks
   283  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   284                                                         ; Use INT_MSK3 bit field masks
   285                          
   286  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   287  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   288  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   289                          
   290  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   291  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   292  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   293  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   294  0010                    INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
   295  0008                    INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
   296  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   297  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   298  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   299                          
   300  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   301  0080                    INT_MSK1_DCC13:            equ 80h ; MASK: enable/disable DCC13 block interrupt
   302  0040                    INT_MSK1_DCC12:            equ 40h ; MASK: enable/disable DCC12 block interrupt
   303  0020                    INT_MSK1_DBC11:            equ 20h ; MASK: enable/disable DBC11 block interrupt
   304  0010                    INT_MSK1_DBC10:            equ 10h ; MASK: enable/disable DBC10 block interrupt
   305  0008                    INT_MSK1_DCC03:            equ 08h ; MASK: enable/disable DCC03 block interrupt
   306  0004                    INT_MSK1_DCC02:            equ 04h ; MASK: enable/disable DCC02 block interrupt
   307  0002                    INT_MSK1_DBC01:            equ 02h ; MASK: enable/disable DBC01 block interrupt
   308  0001                    INT_MSK1_DBC00:            equ 01h ; MASK: enable/disable DBC00 block interrupt
   309                          
   310  00DF                    INT_MSK2:     equ DFh			; Custom block Mask Register			   (RW)
   311  0010                    INT_MSK2_SARADC:           equ 10h ; MASK: enable/disable SARADC block interrupt
   312  0020                    INT_MSK2_CSD0:             equ 20h ; MASK: enable/disable CSD0 block interrupt
   313  0040                    INT_MSK2_CSD1:             equ 40h ; MASK: enable/disable CSD1 block interrupt
   314  0080                    INT_MSK2_RTC:              equ 80h ; MASK: enable/disable RTC block interrupt
   315                          
   316  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   317  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   318                          
   319                          ;------------------------------------------------------
   320                          ;  MAC Registers
   321                          ;------------------------------------------------------
   322                          
   323  00E8                    MUL0_X:       equ 0E8h          ; Multiply Input X Register                (W)
   324  00E9                    MUL0_Y:       equ 0E9h          ; Multiply Input Y Register                (W)
   325  00EA                    MUL0_DH:      equ 0EAh          ; Multiply Result High Byte Register       (R)
   326  00EB                    MUL0_DL:      equ 0EBh          ; Multiply Result Low Byte Register        (R)
   327                          
   328  00EC                    ACC0_DR1:     equ 0ECh          ; Accumulator Data Register 1              (RW)
   329  00ED                    ACC0_DR0:     equ 0EDh          ; Accumulator Data Register 0              (RW)
   330  00EE                    ACC0_DR3:     equ 0EEh          ; Accumulator Data Register 3              (RW)
   331  00EF                    ACC0_DR2:     equ 0EFh          ; Accumulator Data Register 2              (RW)
   332                          
   333                          ; DECIMATOR Control Registers
   334  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   335  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   336                          
   337                          ;------------------------------------------------------
   338                          ;  System Status and Control Registers
   339                          ;
   340                          ;  Note: The following registers are mapped into both
   341                          ;        register bank 0 AND register bank 1.
   342                          ;------------------------------------------------------
   343  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   344                                                             ; Use FLAG_ masks defined at top of file
   345                          
   346  00FD                    DAC_D:        equ 0FDh		   ; DAC Data Register                        (RW)
   347                          
   348  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   349  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: flag, Internal Reset Status bit
   350  0010                    CPU_SCR1_SLIMO:         equ 10h	   ; MASK: Slow IMO (internal main osc) enable
   351  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   352  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   353  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   354                          
   355  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   356  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   357  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   358  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   359  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   360  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   361                          
   362                          ;------------------------------------------------------
   363                          ;  Neon Capsense Digital Control Registers
   364                          ;------------------------------------------------------
   365  0050                    CSD0_DR0_L:				equ 50h		; Capsense 0 data low 0				(RW)
   366  0054                    CSD0_DR0_H:				equ 54h		; Capsense 0 data high 0			(RW)
   367  0058                    CSD1_DR0_L:				equ 58h		; Capsense 1 data low 0				(RW)
   368  005C                    CSD1_DR0_H:				equ 5Ch		; Capsense 1 data high 0			(RW)
   369  0051                    CSD0_DR1_L:				equ 51h		; Capsense 0 data low 1				(RW)
   370  0055                    CSD0_DR1_H:				equ 55h		; Capsense 0 data high 1			(RW)
   371  0059                    CSD1_DR1_L:				equ 59h		; Capsense 1 data low 1				(RW)
   372  005D                    CSD1_DR1_H:				equ 5Dh		; Capsense 1 data high 1			(RW)
   373  0052                    CSD0_CNT_L:				equ 52h		; Capsense 0 counter low			(RW)
   374  0056                    CSD0_CNT_H:				equ 56h		; Capsense 0 counter high			(RW)
   375  005A                    CSD1_CNT_L:				equ 5Ah		; Capsense 1 counter low			(RW)
   376  005E                    CSD1_CNT_H:				equ	5Eh		; Capsense 1 counter high			(RW)
   377  0053                    CSD0_CR0:				equ 53h		; Capsense 0 control 0				(RW)
   378  005B                    CSD1_CR0:				equ 5Bh		; Capsense 1 control 0				(RW)
   379  0057                    CSD0_CR1:				equ 57h		; Capsense 0 control 1				(RW)
   380  005F                    CSD1_CR1:				equ 5Fh		; Capsense 1 control 1				(RW)
   381                          
   382                          ;------------------------------------------------------
   383                          ;  Neon Analog Registers
   384                          ;------------------------------------------------------
   385  0065                    ASY_CR:					equ 65h		; Analog Synchronization Control	(RW)
   386  006A                    ADC_DH:					equ 6Ah		; ADC data high						(RW)
   387  006B                    ADC_DL:					equ 6Bh		; ADC data low						(RW)
   388  00C8                    PWMVREF0:				equ C8h		; PWM Voltage Reference 0			(RW)
   389  00C9                    PWMVREF1:				equ C9h		; PWM Voltage Reference 1			(RW)
   390  00CB                    PWMSRC:					equ CBh		; PWM Source						(RW)
   391  00CA                    IDACMODE:				equ CAh		; IDAC Mode							(RW)
   392  00FC                    IDACR_D:				equ FCh		; Analog Mux DAC data 0				(RW)
   393  00FD                    IDACL_D:				equ FDh		; Analog Mux DAC data 1				(RW)
   394                          
   395                          ;------------------------------------------------------
   396                          ;  Neon Digital Registers
   397                          ;------------------------------------------------------
   398  00B7                    RDI0DSM:				equ B7h		; Row Digital Interconnect input select 0	(RW)
   399  00BF                    RDI1DSM:				equ BFh		; Row Digital Interconnect input select 1	(RW)
   400                          
   401                          ;------------------------------------------------------
   402                          ;  Neon Test Registers
   403                          ;------------------------------------------------------
   404  00CC                    TSCR0:					equ CCh		; Tsource 0							(RW)
   405  00CD                    TSCMPH:					equ CDh		; TSCMP high						(RW)
   406  00CE                    TSCMPL:					equ CEh		; TSCMP low							(RW)
   407  00CF                    TSCR1:					equ CFh		; Tsource 1							(RW)
   408                          
   409                          ;;=============================================================================
   410                          ;;      Register Space, Bank 1
   411                          ;;=============================================================================
   412                          
   413                          ;------------------------------------------------
   414                          ;  Port Registers
   415                          ;  Note: Also see this address range in Bank 0.
   416                          ;------------------------------------------------
   417                          ; Port 0
   418  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   419  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   420  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   421  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   422                          
   423                          ; Port 1
   424  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   425  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   426  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   427  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   428                          
   429                          ; Port 2
   430  0008                    PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
   431  0009                    PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
   432  000A                    PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
   433  000B                    PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
   434                          
   435                          ; Port 3
   436  000C                    PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
   437  000D                    PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
   438  000E                    PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
   439  000F                    PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
   440                          
   441                          ; Port 4
   442  0010                    PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
   443  0011                    PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
   444  0012                    PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
   445  0013                    PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
   446                          
   447                          ;------------------------------------------------
   448                          ;  Digital PSoC(tm) block Registers
   449                          ;  Note: Also see this address range in Bank 0.
   450                          ;------------------------------------------------
   451                          
   452                          ; Digital PSoC block 00, Basic Type C
   453  0020                    DBC00FN:      equ 20h          ; Function Register                        (RW)
   454  0021                    DBC00IN:      equ 21h          ;    Input Register                        (RW)
   455  0022                    DBC00OU:      equ 22h          ;   Output Register                        (RW)
   456  0023                    DBC00CR1:     equ 23h          ;   control & status register 1            (RW)
   457                          
   458                          ; Digital PSoC block 01, Basic Type C
   459  0024                    DBC01FN:      equ 24h          ; Function Register                        (RW)
   460  0025                    DBC01IN:      equ 25h          ;    Input Register                        (RW)
   461  0026                    DBC01OU:      equ 26h          ;   Output Register                        (RW)
   462  0027                    DBC01CR1:     equ 27h          ;   control & status register 1            (RW)
   463                          
   464                          ; Digital PSoC block 02, Communications Type C
   465  0028                    DCC02FN:      equ 28h          ; Function Register                        (RW)
   466  0029                    DCC02IN:      equ 29h          ;    Input Register                        (RW)
   467  002A                    DCC02OU:      equ 2Ah          ;   Output Register                        (RW)
   468  002B                    DBC02CR1:     equ 2Bh          ;   control & status register 1            (RW)
   469                          
   470                          ; Digital PSoC block 03, Communications Type C
   471  002C                    DCC03FN:      equ 2Ch          ; Function Register                        (RW)
   472  002D                    DCC03IN:      equ 2Dh          ;    Input Register                        (RW)
   473  002E                    DCC03OU:      equ 2Eh          ;   Output Register                        (RW)
   474  0029                    DBC03CR1:     equ 29h          ;   control & status register 1            (RW)
   475                          
   476                          ; Digital PSoC block 10, Basic Type C
   477  0030                    DBC10FN:      equ 30h          ; Function Register                        (RW)
   478  0031                    DBC10IN:      equ 31h          ;    Input Register                        (RW)
   479  0032                    DBC10OU:      equ 32h          ;   Output Register                        (RW)
   480  0033                    DBC10CR1:     equ 33h          ;   control & status register 1            (RW)
   481                          
   482                          ; Digital PSoC block 11, Basic Type C
   483  0034                    DBC11FN:      equ 34h          ; Function Register                        (RW)
   484  0035                    DBC11IN:      equ 35h          ;    Input Register                        (RW)
   485  0036                    DBC11OU:      equ 36h          ;   Output Register                        (RW)
   486  0037                    DBC11CR1:     equ 37h          ;   control & status register 1            (RW)
   487                          
   488                          ; Digital PSoC block 12, Communications Type C
   489  0038                    DCC12FN:      equ 38h          ; Function Register                        (RW)
   490  0039                    DCC12IN:      equ 39h          ;    Input Register                        (RW)
   491  003A                    DCC12OU:      equ 3Ah          ;   Output Register                        (RW)
   492  003B                    DBC12CR1:     equ 3Bh          ;   control & status register 1            (RW)
   493                          
   494                          ; Digital PSoC block 13, Communications Type C
   495  003C                    DCC13FN:      equ 3Ch          ; Function Register                        (RW)
   496  003D                    DCC13IN:      equ 3Dh          ;    Input Register                        (RW)
   497  003E                    DCC13OU:      equ 3Eh          ;   Output Register                        (RW)
   498  003F                    DBC13CR1:     equ 3Fh          ;   control & status register 1            (RW)
   499                          
   500                          ;------------------------------------------------
   501                          ;  System and Global Resource Registers
   502                          ;  Note: Also see this address range in Bank 0.
   503                          ;------------------------------------------------
   504                          
   505  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   506  00C0                    CLK_CR0_ACOLUMN_3:    equ C0h    ; MASK: Specify clock for analog cloumn
   507  0030                    CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
   508  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   509  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   510                          
   511  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   512  0018                    CLK_CR1_ACLK1:        equ 18h    ; MASK: Digital PSoC block for analog source
   513  0003                    CLK_CR1_ACLK0:        equ 03h    ; MASK: Digital PSoC block for analog source
   514                          
   515  0003                    CLK_CR1_ACLK2:        equ 03h    ; Deprecated do not use
   516                          
   517  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   518  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   519                          
   520  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   521  000F                    AMD_CR0_AMOD0:        equ 0Fh    ; MASK: Modulation source for analog column 0
   522                          
   523  0064                    CMP_GO_EN:    equ 64h          ; Comparator Bus To Global Out Enable      (RW)
   524  0080                    CMP_GO_EN_GOO5:       equ 80h    ; MASK: Selected Col 1 signal to GOO5
   525  0040                    CMP_GO_EN_GOO1:       equ 40h    ; MASK: Selected Col 1 signal to GOO1
   526  0030                    CMP_GO_EN_SEL1:       equ 30h    ; MASK: Column 1 Signal Select
   527  0008                    CMP_GO_EN_GOO4:       equ 08h    ; MASK: Selected Col 0 signal to GOO4
   528  0004                    CMP_GO_EN_GOO0:       equ 04h    ; MASK: Selected Col 0 signal to GOO0
   529  0003                    CMP_GO_EN_SEL0:       equ 03h    ; MASK: Column 0 Signal Select
   530                          
   531  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   532  000F                    AMD_CR1_AMOD1:        equ 0Fh    ; MASK: Modulation ctrl for analog column 1
   533                          
   534  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   535  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   536  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   537                          
   538  006B                    CLK_CR3:      equ 6Bh          ; Analog Clock Source Control Register 3   (RW)
   539  0040                    CLK_CR3_SYS1:         equ 40h    ; MASK: Analog Clock 1 selection
   540  0030                    CLK_CR3_DIVCLK1:      equ 30h    ; MASK: Analog Clock 1 divider
   541  0004                    CLK_CR3_SYS0:         equ 04h    ; MASK: Analog Clock 0 selection
   542  0003                    CLK_CR3_DIVCLK0:      equ 03h    ; MASK: Analog Clock 0 divider
   543                          
   544                          ;------------------------------------------------
   545                          ;  Global Digital Interconnects
   546                          ;------------------------------------------------
   547                          
   548  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   549  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   550  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   551  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   552                          
   553  00A0                    GDI_O_IN_CR:  equ 0A0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   554  00A1                    GDI_E_IN_CR:  equ 0A1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   555  00A2                    GDI_O_OU_CR:  equ 0A2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   556  00A3                    GDI_E_OU_CR:  equ 0A3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   557                          
   558  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   559  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   560                          
   561                          ;------------------------------------------------
   562                          ;  Analog Mux Bus Port Enable Bits
   563                          ;------------------------------------------------
   564  00D8                    MUX_CR0:      equ 0D8h          ; Analog Mux Port 0 Bit Enables Register
   565  00D9                    MUX_CR1:      equ 0D9h          ; Analog Mux Port 1 Bit Enables Register
   566  00DA                    MUX_CR2:      equ 0DAh          ; Analog Mux Port 2 Bit Enables Register
   567  00DB                    MUX_CR3:      equ 0DBh          ; Analog Mux Port 3 Bit Enables Register
   568  00EC                    MUX_CR4:      equ 0ECh          ; Analog Mux Port 4 Bit Enables Register
   569                          
   570                          ;------------------------------------------------
   571                          ;  Clock and System Control Registers
   572                          ;------------------------------------------------
   573                          
   574  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   575  0080                    OSC_GO_EN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   576  0040                    OSC_GO_EN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   577  0020                    OSC_GO_EN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   578  0010                    OSC_GO_EN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   579  0008                    OSC_GO_EN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   580  0004                    OSC_GO_EN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   581  0002                    OSC_GO_EN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   582  0001                    OSC_GO_EN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   583                          
   584  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   585  0003                    OSC_CR4_VC3SEL:       equ 03h    ; MASK: System VC3 Clock source
   586                          
   587  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   588                          
   589  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   590  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   591  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   592  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   593  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   594  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   595  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   596  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   597  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   598  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   599  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   600  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   601  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   602  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   603  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   604  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   605  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   606  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   607                          
   608  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   609  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   610  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   611                          
   612  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   613  0080                    OSC_CR2_PLLGAIN:      equ 80h    ; MASK: High/Low gain
   614  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   615  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   616  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   617                          
   618  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   619  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   620  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   621  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   622  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   623  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   624  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   625  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   626                          
   627  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   628  0008                    VLT_CMP_NOWRITE:      equ 08h    ; MASK: Vcc below Flash Write level
   629  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   630  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   631  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   632                          
   633  00E5                    ADC0_TR:      equ 0E5h          ; ADC Column 0 Trim Register
   634  00E6                    ADC1_TR:      equ 0E6h          ; ADC Column 1 Trim Register
   635                          
   636  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   637  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   638  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   639  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   640                          
   641  00FA                    FLS_PR1:      equ 0FAh          ; Flash Program Register 1                 (RW)
   642  0003                    FLS_PR1_BANK:         equ 03h    ; MASK: Select Active Flash Bank
   643                          
   644  00FD                    DAC_CR0:       equ 0FDh          ; Analog Mux DAC Control Register 0
   645  00DC                    DAC_CR1:       equ 0DCh          ; Analog Mux DAC Control Register 1
   646  0008                    DAC_CR_IRANGE:        equ 08h    ; MASK: Sets the DAC Range low or high
   647  0006                    DAC_CR_OSCMODE:       equ 06h    ; MASK: Defines the reset mode for AMux
   648  0001                    DAC_CR_ENABLE:        equ 01h    ; MASK: Enable/Disable DAC function
   649                          
   650                          ;------------------------------------------------
   651                          ;  I2C Control Registers
   652                          ;------------------------------------------------
   653                          
   654  00AD                    I2C_ADDR:    equ 0ADh          ; I2C Address Register (RW)
   655                          
   656                          ;------------------------------------------------------
   657                          ;  Neon Analog Registers
   658                          ;------------------------------------------------------
   659  0053                    VDAC50CR0:		equ 53h			; V DAC5 control 0				(RW)
   660  0057                    VDAC51CR0:		equ 57h			; V DAC5 control 1				(RW)
   661  00A8                    ADC_CR0:		equ A8h			; ADC control 0					(RW)
   662  00A9                    ADC_CR1:		equ A9h			; ADC control 1					(RW)
   663  00AA                    ADC_CR2:		equ AAh			; ADC control 2					(RW)
   664  00AB                    ADC_CR3TRIM:	equ ABh			; ADC control 3					(RW)
   665  00AC                    ADC_CR4:		equ ACh			; ADC control 4					(RW)
   666  00E7                    VDAC_TRIM:		equ E7h			; V DAC trim					(RW)
   667                          
   668                          ;------------------------------------------------------
   669                          ;  Neon Current Sense CMP Registers
   670                          ;------------------------------------------------------
   671  0050                    CMP0CR1:		equ 50h			; CMP0 control 1				(RW)
   672  0051                    CMP0CR2:		equ 51h			; CMP0 control 2				(RW)
   673  0054                    CMP1CR1:		equ 54h			; CMP1 control 1				(RW)
   674  0055                    CMP1CR2:		equ 55h			; CMP1 control 2				(RW)
   675  0058                    CSCMPCR0:		equ 58h			; CSCMP control 0				(RW)
   676  0059                    CSCMPGOEN:		equ 59h			; CSCMO global out enable		(RW)
   677  005A                    CSLUTCR0:		equ 5Ah			; CSLUT control 0				(RW)
   678  005B                    CMPCOLMUX:		equ 5Bh			; CMP Column Mux				(RW)
   679  005C                    CMPPWMCR:		equ 5Ch			; CMP PWM control				(RW)
   680  005D                    CMPFLTCR:		equ 5Dh			; CMP filter control			(RW)
   681  005E                    CMPCLK1:		equ 5Eh			; CMP clock 1					(RW)
   682  005F                    CMPCLK0:		equ 5Fh			; CMP clock 0					(RW)
   683                          
   684                          ;------------------------------------------------------
   685                          ;  Neon Real Time Clock Registers
   686                          ;------------------------------------------------------
   687  00A4                    RTCH:			equ A4h			; Real time current hour		(RW)
   688  00A5                    RTCM:			equ A5h			; Real time current minute		(RW)
   689  00A6                    RTCS:			equ A6h			; Real time current second		(RW)
   690  00A7                    RTCCR:			equ A7h			; Real time clock control		(RW)
   691                          
   692                          ;------------------------------------------------------
   693                          ;  Analog MUX Config Registers
   694                          ;------------------------------------------------------
   695                          
   696  006A                    AMUX_CFG1:			equ 6Ah  ; Analog MUX Configuration 1
   697  0020                    AMUX_CFG1_GOINVR:	equ 20h  ;
   698  0010                    AMUX_CFG1_GOINVL:  	equ 10h	 ;
   699  000C                    AMUX_CFG1_AMUXMODR:	equ 0Ch	 ;
   700  0003                    AMUX_CFG1_AMUXMODL:	equ 03h	 ;
   701                          
   702                          ;;=============================================================================
   703                          ;;      M8C System Macros
   704                          ;;  These macros should be used when their functions are needed.
   705                          ;;=============================================================================
   706                          
   707                          ;----------------------------------------------------
   708                          ;  Swapping Register Banks
   709                          ;----------------------------------------------------
   710                              macro M8C_SetBank0
   711                              and   F, ~FLAG_XIO_MASK
   712  3C41                        endm
   713                          
   714                              macro M8C_SetBank1
   715                              or    F, FLAG_XIO_MASK
   716  3C41                        endm
   717                          
   718                          ;----------------------------------------------------
   719                          ;  Global Interrupt Enable/Disable
   720                          ;----------------------------------------------------
   721                              macro M8C_EnableGInt
   722                              or    F, FLAG_GLOBAL_IE
   723  3C41                        endm
   724                          
   725                              macro M8C_DisableGInt
   726                              and   F, ~FLAG_GLOBAL_IE
   727  3C41                        endm
   728                          
   729                          ;----------------------------------------------------
   730                          ;  Enable/Disable Interrupt Mask
   731                          ;
   732                          ;  Use the following macros to enable/disable
   733                          ;  bits in the Interrupt mask registers,
   734                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   735                          ;
   736                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   737                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   738                          ;
   739                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   740                          ;        and MASK is the bit set to enable or disable
   741                          ;----------------------------------------------------
   742                          ; Disable Interrupt Bit Mask(s)
   743                              macro M8C_DisableIntMask
   744                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   745  3C41                        endm
   746                          
   747                          ; Enable Interrupt Bit Mask(s)
   748                              macro M8C_EnableIntMask
   749                              or    reg[@0], @1               ; enable specified interrupt enable bit
   750  3C41                        endm
   751                          
   752                          ;----------------------------------------------------
   753                          ;  Clear Posted Interrupt Flag Mask
   754                          ;
   755                          ;  Use the following macros to clear the
   756                          ;  bits in the Interrupt Clear registers,
   757                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   758                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   759                          ;
   760                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   761                          ;        and MASK is the bit set to enable or disable
   762                          ;----------------------------------------------------
   763                              macro M8C_ClearIntFlag
   764                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   765  3C41                        endm
   766                          
   767                          ;----------------------------------------------------
   768                          ;  Power-On Reset & WatchDog Timer Functions
   769                          ;----------------------------------------------------
   770                              macro M8C_EnableWatchDog
   771                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   772  3C41                        endm
   773                          
   774                              macro M8C_ClearWDT
   775                              mov   reg[RES_WDT], 00h
   776  3C41                        endm
   777                          
   778                              macro M8C_ClearWDTAndSleep
   779                              mov   reg[RES_WDT], 38h
   780  3C41                        endm
   781                          
   782                          ;----------------------------------------------------
   783                          ;  Sleep, CPU Stop & Software Reset
   784                          ;----------------------------------------------------
   785                              macro M8C_Sleep
   786                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   787                              ; The next instruction to be executed depends on the state of the
   788                              ; various interrupt enable bits. If some interrupts are enabled
   789                              ; and the global interrupts are disabled, the next instruction will
   790                              ; be the one that follows the invocation of this macro. If global
   791                              ; interrupts are also enabled then the next instruction will be
   792                              ; from the interrupt vector table. If no interrupts are enabled
   793                              ; then the CPU sleeps forever.
   794  3C41                        endm
   795                          
   796                              macro M8C_Stop
   797                              ; In general, you probably don't want to do this, but here's how:
   798                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   799                              ; Next instruction to be executed is located in the interrupt
   800                              ; vector table entry for Power-On Reset.
   801  3C41                        endm
   802                          
   803                              macro M8C_Reset
   804                              ; Restore CPU to the power-on reset state.
   805                              mov A, 0
   806                              SSC
   807                              ; Next non-supervisor instruction will be at interrupt vector 0.
   808  3C41                        endm
   809                          
   810                          ;----------------------------------------------------
   811                          ; ImageCraft Code Compressor Actions
   812                          ;----------------------------------------------------
   813                              ; Suspend Code Compressor
   814                              ; Must not span a RET or RETI instruction
   815                              ; without resuming code compression
   816                              macro Suspend_CodeCompressor
   817                              or   F, 0
   818  3C41                        endm
   819                          
   820                              ; Resume Code Compression
   821                              macro Resume_CodeCompressor
   822                              add  SP, 0
   823                              endm
      + 3C41                    
      + 3C41                    ; end of file m8c.inc
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;
     4                          ;;       FILENAME: Memory.inc
     5                          ;;
     6                          ;;    DESCRIPTION: Memory Model and Stack Parameter Definitions for 
     7                          ;;                 CY8C22045 PSoC devices.
     8                          ;;
     9                          ;;  LAST MODIFIED: August 17, 2004
    10                          ;;
    11                          ;;-----------------------------------------------------------------------------
    12                          ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
    13                          ;;*****************************************************************************
    14                          ;;*****************************************************************************
    15                          ;
    16                          ;
    17                          ;  ******** Define Memory Model and Stack parameters ********
    18                          ;
    19  0001                    IMAGECRAFT: equ 1   
    20  0002                    HITECH: equ 2   
    21  0002                    TOOLCHAIN: equ HITECH   
    22  0001                    SYSTEM_LARGE_MEMORY_MODEL: equ 1   
    23  0000                    SYSTEM_SMALL_MEMORY_MODEL: equ 0   
    24  0003                    SYSTEM_STACK_PAGE: equ 3   
    25  0000                    SYSTEM_STACK_PAGE_OFFSET: equ 0   
    26  0002                    SYSTEM_TOOLS: equ 2   
    27  0000                    SYSTEM_IDXPG_TRACKS_STK_PP: equ 0   
    28  0001                    SYSTEM_IDXPG_TRACKS_IDX_PP: equ 1   
    29  0000                    SYSTEM_MULTIPAGE_STACK: equ 0 
    30                          
    31                          
    32                          ;  ******* Function Class Definitions *******
    33                          ;
    34                          ;  These definitions are used to describe RAM access patterns. They provide
    35                          ;  documentation and they control prologue and epilogue macros that perform
    36                          ;  the necessary housekeeping functions for large memory model devices like
    37                          ;  the CY8C22045.
    38                          
    39  0001                    RAM_USE_CLASS_1:               equ 1   ; PUSH, POP & I/O access
    40  0002                    RAM_USE_CLASS_2:               equ 2   ; Indexed address mode on stack page
    41  0004                    RAM_USE_CLASS_3:               equ 4   ; Indexed address mode to any page
    42  0008                    RAM_USE_CLASS_4:               equ 8   ; Direct/Indirect address mode access
    43                          
    44                          ; ******* Hi Tech Specific *******
    45                          ; Turn on the expansion of all macros by default
    46                          IF (TOOLCHAIN & HITECH)
    47                          OPT EXPAND
    48                          ENDIF
    49                          ; ******* Page Pointer Manipulation Macros *******
    50                          ;
    51                          ;  ******* Page Pointer Manipulation Macros *******
    52                          ;
    53                          ;  Most of the following macros are conditionally compiled so they only
    54                          ;  produce code if the large memory model is selected.
    55                          
    56                             ;-----------------------------------------------
    57                             ;  Set Stack Page Macro
    58                             ;-----------------------------------------------
    59                             ;
    60                             ;  DESC: Modify STK_PP in the large or small memory Models.
    61                             ;
    62                             ; INPUT: Constant (e.g., SYSTEM_STACK_PAGE) that specifies the RAM page on
    63                             ;        which stack operations like PUSH and POP store and retrieve their
    64                             ;        data
    65                             ;
    66                             ;  COST: 8 instruction cycles (in LMM only)
    67                          
    68                             macro RAM_SETPAGE_STK( PG_NUMBER )
    69                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    70                                mov reg[STK_PP], @PG_NUMBER
    71                             ENDIF
    72  3C41                       endm
    73                          
    74                             ;-----------------------------------------------
    75                             ;  Set Current Page Macro
    76                             ;-----------------------------------------------
    77                             ;
    78                             ;  DESC: Modify CUR_PP in the large or small memory Models.
    79                             ;
    80                             ; INPUT: Constant value (e.g., >bFoo) for the RAM page number used in
    81                             ;        calculation of effective direct-mode address operands.
    82                             ;
    83                             ;  COST: 8 instruction cycles (in LMM only)
    84                          
    85                             macro RAM_SETPAGE_CUR( PG_NUMBER )
    86                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    87                                mov reg[CUR_PP], @PG_NUMBER
    88                             ENDIF
    89  3C41                       endm
    90                          
    91                             ;-----------------------------------------------
    92                             ;  Set Index Page Macro
    93                             ;-----------------------------------------------
    94                             ;
    95                             ;  DESC: Modify IDX_PP in the large or small emory Models.
    96                             ;
    97                             ; INPUT: Constant value (e.g., >caFoo) for the RAM page number used in
    98                             ;         calculation of effective index-mode address operands.
    99                             ;
   100                             ;  COST: 8 instruction cycles (in LMM only)
   101                          
   102                             macro RAM_SETPAGE_IDX( PG_NUMBER )
   103                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   104                                mov reg[IDX_PP], @PG_NUMBER
   105                             ENDIF
   106  3C41                       endm
   107                          
   108                             ;-----------------------------------------------
   109                             ;  Set MVI Read Page Macro
   110                             ;-----------------------------------------------
   111                             ;
   112                             ;  DESC: Modify MVR_PP in the large or small memory Models.
   113                             ;
   114                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   115                             ;        calculation of indirect address operands used in the
   116                             ;        "mvi A, [pFoo]" instructions.
   117                             ;
   118                             ;  COST: 8 instruction cycles (in LMM only)
   119                          
   120                             macro RAM_SETPAGE_MVR( PG_NUMBER )
   121                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   122                                mov reg[MVR_PP], @PG_NUMBER
   123                             ENDIF
   124  3C41                       endm
   125                          
   126                             ;-----------------------------------------------
   127                             ;  Set MVI Write Page Macro
   128                             ;-----------------------------------------------
   129                             ;
   130                             ;  DESC: Modify MVW_PP in the large or small memory Models.
   131                             ;
   132                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   133                             ;        calculation of indirect address operands used in the
   134                             ;        "mvi [pFoo], A" instructions.
   135                             ;
   136                             ;  COST: 8 instruction cycles (in LMM only)
   137                          
   138                             macro RAM_SETPAGE_MVW( PG_NUMBER )
   139                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   140                                mov reg[MVW_PP], @PG_NUMBER
   141                             ENDIF
   142  3C41                       endm
   143                          
   144                             ;-----------------------------------------------
   145                             ;  Force Index Page Pointer to Stack Page
   146                             ;-----------------------------------------------
   147                             ;
   148                             ;  DESC: Map index-mode operands onto the stack page by modifying IDX_PP.
   149                             ;        See also RAM_LOCK_INDEX_TO_STACKPAGE.
   150                             ;
   151                             ; INPUT: None
   152                             ;
   153                             ;  COST: 8 instruction cycles (in LMM only)
   154                          
   155                             macro RAM_SETPAGE_IDX2STK
   156                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   157                                IF ( SYSTEM_MULTIPAGE_STACK )
   158                                   mov   A, reg[STK_PP]
   159                                   mov   reg[IDX_PP], A
   160                                ELSE
   161                                   RAM_SETPAGE_IDX SYSTEM_STACK_PAGE
   162                                ENDIF
   163                             ENDIF
   164  3C41                       endm
   165                          
   166                             ;-----------------------------------------------
   167                             ;  Change Memory Mode
   168                             ;-----------------------------------------------
   169                             ;
   170                             ;  DESC: Modify FLAG_PAGEMODE bits in the large and small memory Models.
   171                             ;
   172                             ; INPUT: Constant value for PGMODE bitfield of CPU Flag register, F.
   173                             ;        See FLAG_PGMODE_{x} constants in M8C.INC.
   174                             ;
   175                             ;  COST: 8 instruction cycles (in LMM only)
   176                          
   177                             macro RAM_CHANGE_PAGE_MODE( MODE )
   178                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   179                                and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
   180                                or    F,  FLAG_PGMODE_MASK & @MODE
   181                             ENDIF
   182  3C41                       endm
   183                          
   184                             ;-----------------------------------------------
   185                             ;  Set Large Memory Model Native Paging Mode
   186                             ;-----------------------------------------------
   187                             ;
   188                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   189                             ;        paging mode *IFF* a simple "OR" is guaranteed to work---for
   190                             ;        example, in an ISR, when the PGMODE bits have been cleared
   191                             ;        to zero. If a simple "OR" is not guaranteed to work, use
   192                             ;        the slower RAM_RESTORE_NATIVE_PAGING instead.
   193                             ;
   194                             ; INPUT: none
   195                             ;
   196                             ;  COST: 4 instruction cycles (in LMM only)
   197                          
   198                             macro RAM_SET_NATIVE_PAGING
   199                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   200                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   201                                or    F,  FLAG_PGMODE_11b            ; LMM w/ IndexPage<==>StackPage
   202                             ENDIF ;  PGMODE LOCKED
   203                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   204                                or    F,  FLAG_PGMODE_10b            ; LMM with independent IndexPage
   205                             ENDIF ; PGMODE FREE
   206                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   207  3C41                       endm
   208                          
   209                             ;-----------------------------------------------
   210                             ; Restore Large Memory Model Native Paging Mode
   211                             ;-----------------------------------------------
   212                             ;
   213                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   214                             ;        paging mode. Always works because it clears the PGMODE bits
   215                             ;        before OR-ing in the new ones. See RAM_RESTORE_NATIVE_PAGING
   216                             ;        for a faster method.
   217                             ;
   218                             ; INPUT: none
   219                             ;
   220                             ;  COST: 8 instruction cycles (in LMM only)
   221                          
   222                             macro RAM_RESTORE_NATIVE_PAGING
   223                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   224                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   225                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_11b ; LMM w/ IndexPage<==>StackPage
   226                             ENDIF ;  PGMODE LOCKED
   227                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   228                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b ; LMM with independent IndexPage
   229                             ENDIF ; PGMODE FREE
   230                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   231  3C41                       endm
   232                          
   233                             ;-----------------------------------------------
   234                             ; Force indexed addr mode operands to Stack Pg
   235                             ;-----------------------------------------------
   236                             ;
   237                             ;  DESC: Force instructions that use indexed address mode to reference the
   238                             ;        stack page (as defined by STK_PP). This macro sets the "Indexed
   239                             ;        Stack Mode" bit (LSB) of the PGMODE bit field in the CPU Flag
   240                             ;        register, F. (See also RAM_SETPAGE_IDX2STK, above.)
   241                             ;
   242                             ; INPUT: none
   243                             ;
   244                             ;  COST: 4 instruction cycles (in LMM only)
   245                          
   246                             macro RAM_X_POINTS_TO_STACKPAGE
   247                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   248                                or   F, FLAG_PGMODE_01b
   249                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   250  3C41                       endm
   251                          
   252                             ;-----------------------------------------------
   253                             ;  Force indexed addr mode operands to Index Pg
   254                             ;-----------------------------------------------
   255                             ;
   256                             ;  DESC: Permit instructions that use indexed address mode to reference page
   257                             ;        zero or the page pointed to by the IDX_PP register, depending on the
   258                             ;        setting of the MSb (or "Direct Page Mode" bit) of the PGMODE bits
   259                             ;        in the CPU Flag register, F. (This macro clears the PGMODE LSb.)
   260                             ;
   261                             ; INPUT: none
   262                             ;
   263                             ;  COST: 4 instruction cycles (in LMM only)
   264                          
   265                             macro RAM_X_POINTS_TO_INDEXPAGE
   266                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   267                                and  F, ~FLAG_PGMODE_01b
   268                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   269  3C41                       endm
   270                          
   271                             ;-----------------------------------------------
   272                             ;  Function Prologue
   273                             ;-----------------------------------------------
   274                             ;
   275                             ;  Prologue for functions that run in the LMM and SMM.
   276                             ;
   277                          
   278                             macro RAM_PROLOGUE( ACTUAL_CLASS )
   279                          
   280                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   281                             ; Nothing to do
   282                             ENDIF ; RAM_USE_CLASS_1
   283                          
   284                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   285                                IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   286                                   RAM_X_POINTS_TO_STACKPAGE         ; exit native paging mode!
   287                                ENDIF
   288                             ENDIF ; RAM_USE_CLASS_2
   289                          
   290                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   291                                IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   292                                   RAM_X_POINTS_TO_INDEXPAGE         ; exit native paging mode!
   293                                ENDIF
   294                             ENDIF ; RAM_USE_CLASS_3
   295                          
   296                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   297                             ; Nothing to do
   298                             ENDIF ; RAM_USE_CLASS_4
   299                          
   300  3C41                       endm
   301                          
   302                             ;-----------------------------------------------
   303                             ;  Function Epilogue
   304                             ;-----------------------------------------------
   305                             ;
   306                             ;  Prologue for functions that run in the LMM and SMM.
   307                             ;
   308                          
   309                             macro RAM_EPILOGUE( ACTUAL_CLASS )
   310                          
   311                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   312                             ; Nothing to do
   313                             ENDIF ; RAM_USE_CLASS_1
   314                          
   315                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   316                                RAM_RESTORE_NATIVE_PAGING
   317                             ENDIF ; RAM_USE_CLASS_2
   318                          
   319                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   320                                RAM_RESTORE_NATIVE_PAGING
   321                             ENDIF ; RAM_USE_CLASS_3
   322                          
   323                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   324                             ; Nothing to do
   325                             ENDIF ; RAM_USE_CLASS_4
   326                          
   327  3C41                       endm
   328                          
   329                             ;-----------------------------------------------
   330                             ;  Preserve Register
   331                             ;-----------------------------------------------
   332                             ;
   333                             ;  DESC: Preserve a register value on the stack
   334                             ;
   335                             ; INPUT: Name or address of register in I/O Space
   336                             ;        The I/O bank is an implicit parameter. That is, this function will
   337                             ;        Access the I/O bank currently specified by the CPU Flag register.
   338                             ;
   339                             ;  USES: CPU 'A' register
   340                             ;
   341                             ;  COST: 9 instruction cycles
   342                          
   343                             macro REG_PRESERVE( IOReg )
   344                             mov   A, reg[ @IOReg ]
   345                             push  A
   346  3C41                       endm
   347                          
   348                             ;-----------------------------------------------
   349                             ;  Restore Register
   350                             ;-----------------------------------------------
   351                             ;
   352                             ;  DESC: Restore a register value from the stack
   353                             ;
   354                             ; INPUT: Name or address of register in I/O Space
   355                             ;        The I/O bank is an implicit parameter. That is, this function will
   356                             ;        Access the I/O bank currently specified by the CPU Flag register.
   357                             ;
   358                             ;  USES: CPU 'A' register
   359                             ;
   360                             ;  COST: 10 instruction cycles
   361                          
   362                             macro REG_RESTORE( IOReg )
   363                             pop   A
   364                             mov   reg[ @IOReg ], A
   365  3C41                       endm
   366                          
   367                             ;-----------------------------------------------
   368                             ;  Preserve Volatile Page Pointer Registers
   369                             ;-----------------------------------------------
   370                             ;
   371                             ;  DESC: Invoked by ISRs before switching to the LMM mode and calling
   372                             ;        functions that require on it.
   373                             ;
   374                             ; INPUT: none
   375                             ;
   376                             ;  USES: CPU 'A' register
   377                             ;
   378                             ;  COST: 45 instruction cycles (in LMM only)
   379                          
   380                             macro ISR_PRESERVE_PAGE_POINTERS
   381                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   382                                REG_PRESERVE CUR_PP
   383                                REG_PRESERVE IDX_PP
   384                                REG_PRESERVE MVR_PP
   385                                REG_PRESERVE MVW_PP
   386                             ENDIF
   387  3C41                       endm
   388                          
   389                             ;-----------------------------------------------
   390                             ;  Restore Volatile Page Pointer Registers
   391                             ;-----------------------------------------------
   392                             ;
   393                             ;  DESC: Undo for RAM_PRESERVE_PAGE_POINTERS macro. Invoked by ISRs after
   394                             ;        calling functions that run in the LMM mode and before executing
   395                             ;        the RETI instruction.
   396                             ;
   397                             ; INPUT: none
   398                             ;
   399                             ;  USES: CPU 'A' register
   400                             ;
   401                             ;  COST: 50 instruction cycles (in LMM only)
   402                          
   403                             macro ISR_RESTORE_PAGE_POINTERS
   404                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   405                                REG_RESTORE MVW_PP
   406                                REG_RESTORE MVR_PP
   407                                REG_RESTORE IDX_PP
   408                                REG_RESTORE CUR_PP
   409                             ENDIF
   410                             endm
      + 3C41                    
      + 3C41                    ; end of file Memory.inc
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  FILENAME:   UART_Sensor.inc
     4                          ;;  Version: 5.3, Updated on 2013/5/19 at 10:44:49
     5                          ;;  Generated by PSoC Designer 5.4.2946
     6                          ;;
     7                          ;;  DESCRIPTION:  Assembler declarations for the UART user module.
     8                          ;;-----------------------------------------------------------------------------
     9                          ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
    10                          ;;*****************************************************************************
    11                          ;;*****************************************************************************
    12                          
    13                          ;--------------------------------------------------
    14                          ; Constants for UART_Sensor API's
    15                          ;--------------------------------------------------
    16                          
    17                          ;mask value for global int reg bit for TX instance
    18  0004                    UART_Sensor_TX_INT_MASK:                     equ 0x04
    19  00E1                    UART_Sensor_TX_INT_REG:                      equ 0x0e1  ;TX interrupt address
    20  0008                    UART_Sensor_RX_INT_MASK:                     equ 0x08  ;mask value for global int reg bit for RX ins
                                tance
    21  00E1                    UART_Sensor_RX_INT_REG:                      equ 0x0e1  ;RX interrupt address
    22                          
    23  0000                    UART_Sensor_RXBUF_ENABLE:                    equ 0
    24                          
    25                          ; Interrupt control masks
    26  0001                    UART_Sensor_ENABLE_RX_INT:                   equ 0x01
    27  0000                    UART_Sensor_DISABLE_RX_INT:                  equ 0x00
    28  0002                    UART_Sensor_ENABLE_TX_INT:                   equ 0x02
    29  0000                    UART_Sensor_DISABLE_TX_INT:                  equ 0x00
    30                          
    31  0000                    UART_Sensor_INT_MODE_TX_REG_EMPTY:           equ 0x00
    32  0001                    UART_Sensor_INT_MODE_TX_COMPLETE:            equ 0x01
    33                          
    34  0020                    UART_Sensor_RX_IGNORE_BELOW:                 equ 0x20
    35  0010                    UART_Sensor_RX_BUFFER_SIZE:                  equ 0x10
    36  000D                    UART_Sensor_CMD_TERM:                        equ 0xd
    37  0020                    UART_Sensor_DELIMITER:                       equ 0x20
    38  0000                    UART_Sensor_BACKSPACE_ENABLE:                equ 0x0
    39                          
    40                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    41                          ;       WARNING WARNING WARNING
    42                          ; The following equates are for backwards
    43                          ; compatibility only and should not be used
    44                          ; for new designs.
    45                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    46                          
    47                          ;------------------------------------
    48                          ;  Parity masks
    49                          ;------------------------------------
    50  0000                    UART_PARITY_NONE:       equ   00h
    51  0002                    UART_PARITY_EVEN:       equ   02h
    52  0006                    UART_PARITY_ODD:        equ   06h
    53                          
    54                          ;------------------------------------
    55                          ;  TX Status Register masks
    56                          ;------------------------------------
    57  0020                    UART_TX_COMPLETE:       equ   20h
    58  0010                    UART_TX_BUFFER_EMPTY:   equ   10h
    59                          
    60                          ;------------------------------------
    61                          ;  RX Status Register masks
    62                          ;------------------------------------
    63  0010                    UART_RX_ACTIVE:         equ   10h
    64  0008                    UART_RX_COMPLETE:       equ   08h
    65  0080                    UART_RX_PARITY_ERROR:   equ   80h
    66  0040                    UART_RX_OVERRUN_ERROR:  equ   40h
    67  0020                    UART_RX_FRAMING_ERROR:  equ   20h
    68  00E0                    UART_RX_NO_ERROR:       equ   E0h
    69                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    70                          ;             END WARNING
    71                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    72                          
    73                          
    74                          
    75                          ;------------------------------------
    76                          ;  Parity masks
    77                          ;------------------------------------
    78  0000                    UART_Sensor_PARITY_NONE:                equ   00h
    79  0002                    UART_Sensor_PARITY_EVEN:                equ   02h
    80  0006                    UART_Sensor_PARITY_ODD:                 equ   06h
    81                          
    82                          ;------------------------------------
    83                          ;  TX Status Register masks
    84                          ;------------------------------------
    85  0020                    UART_Sensor_TX_COMPLETE:                equ   20h
    86  0010                    UART_Sensor_TX_BUFFER_EMPTY:            equ   10h
    87                          
    88                          ;------------------------------------
    89                          ;  RX Status Register masks
    90                          ;------------------------------------
    91  0010                    UART_Sensor_RX_ACTIVE:                  equ   10h
    92  0008                    UART_Sensor_RX_COMPLETE:                equ   08h
    93  0008                    UART_Sensor_RX_REG_FULL:                equ   08h
    94  0080                    UART_Sensor_RX_PARITY_ERROR:            equ   80h
    95  0040                    UART_Sensor_RX_OVERRUN_ERROR:           equ   40h
    96  0020                    UART_Sensor_RX_FRAMING_ERROR:           equ   20h
    97  00E0                    UART_Sensor_RX_ERROR:                   equ   E0h
    98  0001                    UART_Sensor_RX_ENABLE:                  equ   01h
    99                          
   100  00F0                    UART_Sensor_RX_BUF_ERROR:               equ   F0h  ; Mask for any Rx that may occur.
   101  0010                    UART_Sensor_RX_BUF_OVERRUN:             equ   10h  ; This indicates the software buffer has
   102                                                                                  ; been over run.
   103  0001                    UART_Sensor_RX_BUF_CMDTERM:             equ   01h  ; Command terminator has been received.
   104                          
   105  0001                    UART_Sensor_RX_NO_DATA:                 equ   01h
   106  00E0                    UART_Sensor_RX_NO_ERROR:                equ   E0h
   107                          
   108                          
   109                          ;--------------------------------------------------
   110                          ; Registers Address Constants for UART_Sensor
   111                          ;--------------------------------------------------
   112                          ;---------------------------------
   113                          ;  Registers used by TX
   114                          ;---------------------------------
   115  002B                    UART_Sensor_TX_CONTROL_REG: equ 2bh            ; Control register
   116  0028                    UART_Sensor_TX_SHIFT_REG:   equ 28h               ; TX Shift Register register
   117  0029                    UART_Sensor_TX_BUFFER_REG:  equ 29h               ; TX Buffer Register
   118  0028                    UART_Sensor_TX_FUNC_REG:    equ 28h     ; Function register
   119  0029                    UART_Sensor_TX_INPUT_REG:   equ 29h            ; Input register
   120  002A                    UART_Sensor_TX_OUTPUT_REG:  equ 2ah           ; Output register
   121                          
   122                          ;---------------------------------
   123                          ;  Registers used by RX
   124                          ;---------------------------------
   125  002F                    UART_Sensor_RX_CONTROL_REG: equ 2fh            ; Control register
   126  002C                    UART_Sensor_RX_SHIFT_REG:   equ 2ch               ; RX Shift Register register
   127  002E                    UART_Sensor_RX_BUFFER_REG:  equ 2eh               ; RX Buffer Register
   128  002C                    UART_Sensor_RX_FUNC_REG:    equ 2ch     ; Function register
   129  002D                    UART_Sensor_RX_INPUT_REG:   equ 2dh            ; Input register
   130  002E                    UART_Sensor_RX_OUTPUT_REG:  equ 2eh           ; Output register
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  Filename:   UART_Sensor.asm
     4                          ;;  Version: 5.3, Updated on 2013/5/19 at 10:44:49
     5                          ;;  Generated by PSoC Designer 5.4.2946
     6                          ;;
     7                          ;;  DESCRIPTION:  UART User Module software implementation file for the
     8                          ;;                22/24/25/26/27xxx families.
     9                          ;;
    10                          ;;
    11                          ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
    12                          ;;        arguments and observe the associated "Registers are volatile" policy.
    13                          ;;        This means it is the caller's responsibility to preserve any values
    14                          ;;        in the X and A registers that are still needed after the API functions
    15                          ;;        returns. For Large Memory Model devices it is also the caller's 
    16                          ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
    17                          ;;        MVW_PP registers. Even though some of these registers may not be modified
    18                          ;;        now, there is no guarantee that will remain the case in future releases.
    19                          ;;-----------------------------------------------------------------------------
    20                          ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
    21                          ;;*****************************************************************************
    22                          ;;*****************************************************************************
    23                          
    24                          
    25                          include "m8c.inc"
    26                          include "memory.inc"
    27                          include "UART_Sensor.inc"
    28                          
    29                          ;-----------------------------------------------
    30                          ;  Global Symbols
    31                          ;-----------------------------------------------
    32                          ;-------------------------------------------------------------------
    33                          ;  Declare the functions global for both assembler and C compiler.
    34                          ;
    35                          ;  Note that there are two names for each API. First name is
    36                          ;  assembler reference. Name with underscore is name refence for
    37                          ;  C compiler.  Calling function in C source code does not require
    38                          ;  the underscore.
    39                          ;-------------------------------------------------------------------
    40                          export  UART_Sensor_SetTxIntMode
    41                          export _UART_Sensor_SetTxIntMode
    42                          export  UART_Sensor_EnableInt
    43                          export _UART_Sensor_EnableInt
    44                          export  UART_Sensor_DisableInt
    45                          export _UART_Sensor_DisableInt
    46                          
    47                          export  UART_Sensor_Start
    48                          export _UART_Sensor_Start
    49                          export  UART_Sensor_Stop
    50                          export _UART_Sensor_Stop
    51                          export  UART_Sensor_SendData
    52                          export _UART_Sensor_SendData
    53                          export  UART_Sensor_bReadTxStatus
    54                          export _UART_Sensor_bReadTxStatus
    55                          export  UART_Sensor_bReadRxData
    56                          export _UART_Sensor_bReadRxData
    57                          export  UART_Sensor_bReadRxStatus
    58                          export _UART_Sensor_bReadRxStatus
    59                          
    60                          export  UART_Sensor_IntCntl
    61                          export _UART_Sensor_IntCntl
    62                          
    63                          export  UART_Sensor_TxIntMode
    64                          export _UART_Sensor_TxIntMode
    65                          
    66                          export  UART_Sensor_PutSHexByte
    67                          export _UART_Sensor_PutSHexByte
    68                          export  UART_Sensor_PutSHexInt
    69                          export _UART_Sensor_PutSHexInt
    70                          
    71                          export  UART_Sensor_CPutString
    72                          export _UART_Sensor_CPutString
    73                          export  UART_Sensor_PutString
    74                          export _UART_Sensor_PutString
    75                          export  UART_Sensor_PutChar
    76                          export _UART_Sensor_PutChar
    77                          export  UART_Sensor_Write
    78                          export _UART_Sensor_Write
    79                          export  UART_Sensor_CWrite
    80                          export _UART_Sensor_CWrite
    81                          
    82                          export  UART_Sensor_cGetChar
    83                          export _UART_Sensor_cGetChar
    84                          export  UART_Sensor_cReadChar
    85                          export _UART_Sensor_cReadChar
    86                          export  UART_Sensor_iReadChar
    87                          export _UART_Sensor_iReadChar
    88                          export  UART_Sensor_PutCRLF
    89                          export _UART_Sensor_PutCRLF
    90                          
    91                          IF (UART_Sensor_RXBUF_ENABLE)
    92                          export  UART_Sensor_CmdReset
    93                          export _UART_Sensor_CmdReset
    94                          export  UART_Sensor_bCmdCheck
    95                          export _UART_Sensor_bCmdCheck
    96                          export  UART_Sensor_bCmdLength
    97                          export _UART_Sensor_bCmdLength
    98                          export  UART_Sensor_bErrCheck
    99                          export _UART_Sensor_bErrCheck
   100                          
   101                          export  UART_Sensor_szGetParam
   102                          export _UART_Sensor_szGetParam
   103                          export  UART_Sensor_szGetRestOfParams
   104                          export _UART_Sensor_szGetRestOfParams
   105                          ENDIF
   106                          
   107                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   108                          ; WARNING WARNING WARNING
   109                          ; The following exports are for backwards compatibility only and should
   110                          ; not be used for new designs. They may be eliminated in a future release.
   111                          ; Their status is "NO FURTHER MAINTENANCE". 
   112                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   113                          export  bUART_Sensor_ReadTxStatus
   114                          export _bUART_Sensor_ReadTxStatus
   115                          export  bUART_Sensor_ReadRxData
   116                          export _bUART_Sensor_ReadRxData
   117                          export  bUART_Sensor_ReadRxStatus
   118                          export _bUART_Sensor_ReadRxStatus
   119                          	
   120                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   121                          ;             END WARNING
   122                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   123                          
   124                          ;-----------------------------------------------
   125                          ; Variable Allocation
   126                          ;-----------------------------------------------
   127                          IF (UART_Sensor_RXBUF_ENABLE)
   128                              
   129                          area UART_Sensor_RAM (RAM, REL, CON)
   130                              
   131                           ptrParam:   BLK  1
   132                          
   133                          ENDIF
   134                          
   135                          area text (ROM,REL)
   136                          
   137                          ;-----------------------------------------------
   138                          ;  EQUATES
   139                          ;-----------------------------------------------
   140  0001                    bfCONTROL_REG_START_BIT:        equ    1    ; Control register start bit
   141  0010                    bfFUNCTION_REG_TX_INT_MODE_BIT: equ 0x10    ; the TX Int Mode bit
   142                          
   143                          area UserModules (ROM, REL, CON)
   144                          
   145                          ;=============================================================================
   146                          ;=============================================================================
   147                          ;
   148                          ;     Low-Level Commands
   149                          ;
   150                          ;=============================================================================
   151                          ;=============================================================================
   152                          
   153                          .SECTION
   154                          ;-----------------------------------------------------------------------------
   155                          ;  FUNCTION NAME: UART_Sensor_EnableInt
   156                          ;
   157                          ;  DESCRIPTION:
   158                          ;     Enables this UART's interrupt by setting the interrupt enable mask
   159                          ;     bit associated with this User Module. Remember to call the global
   160                          ;     interrupt enable function by using the macro: M8C_EnableGInt.
   161                          ;-----------------------------------------------------------------------------
   162                          ;
   163                          ;  ARGUMENTS:
   164                          ;     none.
   165                          ;
   166                          ;  RETURNS:
   167                          ;     none.
   168                          ;
   169                          ;  SIDE EFFECTS:
   170                          ;    The A and X registers may be modified by this or future implementations
   171                          ;    of this function.  The same is true for all RAM page pointer registers in
   172                          ;    the Large Memory Model.  When necessary, it is the calling function's
   173                          ;    responsibility to perserve their values across calls to fastcall16 
   174                          ;    functions.
   175                          ;
   176  2F01                     UART_Sensor_EnableInt:
   177  2F01                    _UART_Sensor_EnableInt:
   178                             RAM_PROLOGUE RAM_USE_CLASS_1
   179  2F01  43 E1 04             M8C_EnableIntMask UART_Sensor_TX_INT_REG, UART_Sensor_TX_INT_MASK
   180  2F04  43 E1 08             M8C_EnableIntMask UART_Sensor_RX_INT_REG, UART_Sensor_RX_INT_MASK
   181                             RAM_EPILOGUE RAM_USE_CLASS_1
   182  2F07  7F                   ret
   183                          .ENDSECTION
   184                          
   185                              
   186                          .SECTION
   187                          ;-----------------------------------------------------------------------------
   188                          ;  FUNCTION NAME: UART_Sensor_DisableInt
   189                          ;
   190                          ;  DESCRIPTION:
   191                          ;     Disables this UART's interrupt by clearing the interrupt enable mask bit
   192                          ;     associated with this User Module.
   193                          ;-----------------------------------------------------------------------------
   194                          ;
   195                          ;  ARGUMENTS:
   196                          ;     none.
   197                          ;
   198                          ;  RETURNS:
   199                          ;     none.
   200                          ;
   201                          ;  SIDE EFFECTS:
   202                          ;    The A and X registers may be modified by this or future implementations
   203                          ;    of this function.  The same is true for all RAM page pointer registers in
   204                          ;    the Large Memory Model.  When necessary, it is the calling function's
   205                          ;    responsibility to perserve their values across calls to fastcall16 
   206                          ;    functions.
   207                          ;
   208  2F08                     UART_Sensor_DisableInt:
   209  2F08                    _UART_Sensor_DisableInt:
   210                             RAM_PROLOGUE RAM_USE_CLASS_1
   211  2F08  41 E1 FB             M8C_DisableIntMask UART_Sensor_TX_INT_REG, UART_Sensor_TX_INT_MASK
   212  2F0B  41 E1 F7             M8C_DisableIntMask UART_Sensor_RX_INT_REG, UART_Sensor_RX_INT_MASK
   213                             RAM_EPILOGUE RAM_USE_CLASS_1
   214  2F0E  7F                   ret
   215                          .ENDSECTION
   216                          
   217                          
   218                          .SECTION
   219                          ;-----------------------------------------------------------------------------
   220                          ;  FUNCTION NAME: UART_Sensor_SetTxIntMode(BYTE bTxIntMode)
   221                          ;
   222                          ;  DESCRIPTION:
   223                          ;     Sets the Tx Interrupt Mode bit in the Function Register.
   224                          ;-----------------------------------------------------------------------------
   225                          ;
   226                          ;  ARGUMENTS:
   227                          ;     BYTE bTxIntMode - The TX Interrupt mode setting. Use defined masks.
   228                          ;        Passed in the A register
   229                          ;
   230                          ;  RETURNS:
   231                          ;     none.
   232                          ;
   233                          ;  SIDE EFFECTS:
   234                          ;    The A and X registers may be modified by this or future implementations
   235                          ;    of this function.  The same is true for all RAM page pointer registers in
   236                          ;    the Large Memory Model.  When necessary, it is the calling function's
   237                          ;    responsibility to perserve their values across calls to fastcall16 
   238                          ;    functions.
   239                          ;
   240                          ;  THEORY of OPERATION OR PROCEDURE:
   241                          ;     Sets the TX interrupt mode bit to define whether the interrupt occurs
   242                          ;     on TX register empty or TX transmit complete
   243                          ;
   244  2F0F                     UART_Sensor_SetTxIntMode:
   245  2F0F                    _UART_Sensor_SetTxIntMode:
   246                             RAM_PROLOGUE RAM_USE_CLASS_1
   247  2F0F  71 10                M8C_SetBank1
   248  2F11  21 01                and   A, UART_Sensor_INT_MODE_TX_COMPLETE
   249  2F13  A007                 jz    .SetModeRegEmpty
   250  2F15  43 28 10             or    REG[UART_Sensor_TX_FUNC_REG], bfFUNCTION_REG_TX_INT_MODE_BIT
   251  2F18  70 EF                M8C_SetBank0
   252                             RAM_EPILOGUE RAM_USE_CLASS_1
   253  2F1A  7F                   ret
   254                          
   255  2F1B                    .SetModeRegEmpty:
   256  2F1B  41 28 EF             and   REG[UART_Sensor_TX_FUNC_REG], ~bfFUNCTION_REG_TX_INT_MODE_BIT
   257  2F1E  70 EF                M8C_SetBank0
   258                             RAM_EPILOGUE RAM_USE_CLASS_1
   259  2F20  7F                   ret
   260                          .ENDSECTION
   261                          
   262                          
   263                          .SECTION
   264                          ;-----------------------------------------------------------------------------
   265                          ;  FUNCTION NAME: UART_Sensor_Start(BYTE bParity)
   266                          ;
   267                          ;  DESCRIPTION:
   268                          ;     Sets the start bit and parity in the Control register of this user module.
   269                          ;-----------------------------------------------------------------------------
   270                          ;
   271                          ;  ARGUMENTS:
   272                          ;     BYTE bParity - parity setting for the Transmitter and receiver. Use defined masks.
   273                          ;        Passed in the A register.
   274                          ;
   275                          ;  RETURNS:
   276                          ;     none.
   277                          ;
   278                          ;  SIDE EFFECTS:
   279                          ;    The A and X registers may be modified by this or future implementations
   280                          ;    of this function.  The same is true for all RAM page pointer registers in
   281                          ;    the Large Memory Model.  When necessary, it is the calling function's
   282                          ;    responsibility to perserve their values across calls to fastcall16 
   283                          ;    functions.
   284                          ;
   285  2F21                     UART_Sensor_Start:
   286  2F21                    _UART_Sensor_Start:
   287                             RAM_PROLOGUE RAM_USE_CLASS_1
   288                             ; Note, Proxy Class 4 only if receive buffer used; otherwise Proxy Class 1.
   289                          
   290  2F21  29 01                or    A, bfCONTROL_REG_START_BIT
   291  2F23  60 2B                mov   REG[UART_Sensor_TX_CONTROL_REG], A
   292  2F25  60 2F                mov   REG[UART_Sensor_RX_CONTROL_REG], A
   293                          IF ( UART_Sensor_RXBUF_ENABLE )
   294                             call  _UART_Sensor_CmdReset
   295                          ENDIF
   296                             RAM_EPILOGUE RAM_USE_CLASS_1
   297  2F27  7F                   ret
   298                          .ENDSECTION
   299                          
   300                          
   301                          .SECTION
   302                          ;-----------------------------------------------------------------------------
   303                          ;  FUNCTION NAME: UART_Sensor_Stop
   304                          ;
   305                          ;  DESCRIPTION:
   306                          ;     Disables UART operation.
   307                          ;-----------------------------------------------------------------------------
   308                          ;
   309                          ;  ARGUMENTS:
   310                          ;     none.
   311                          ;
   312                          ;  RETURNS:
   313                          ;     none.
   314                          ;
   315                          ;  SIDE EFFECTS:
   316                          ;    The A and X registers may be modified by this or future implementations
   317                          ;    of this function.  The same is true for all RAM page pointer registers in
   318                          ;    the Large Memory Model.  When necessary, it is the calling function's
   319                          ;    responsibility to perserve their values across calls to fastcall16 
   320                          ;    functions.
   321                          ;
   322  2F28                     UART_Sensor_Stop:
   323  2F28                    _UART_Sensor_Stop:
   324                             RAM_PROLOGUE RAM_USE_CLASS_1
   325  2F28  41 2B FE             and   REG[UART_Sensor_TX_CONTROL_REG], ~bfCONTROL_REG_START_BIT
   326  2F2B  41 2F FE             and   REG[UART_Sensor_RX_CONTROL_REG], ~bfCONTROL_REG_START_BIT
   327                             RAM_EPILOGUE RAM_USE_CLASS_1
   328  2F2E  7F                   ret
   329                          .ENDSECTION
   330                          
   331                          
   332                          .SECTION
   333                          ;-----------------------------------------------------------------------------
   334                          ;  FUNCTION NAME: UART_Sensor_SendData
   335                          ;
   336                          ;  DESCRIPTION:
   337                          ;     Initiates a transmission of data.
   338                          ;-----------------------------------------------------------------------------
   339                          ;
   340                          ;  ARGUMENTS:
   341                          ;     BYTE  TxData - data to transmit. PASSED in A register.
   342                          ;
   343                          ;  RETURNS:
   344                          ;     none.
   345                          ;
   346                          ;  SIDE EFFECTS:
   347                          ;    The A and X registers may be modified by this or future implementations
   348                          ;    of this function.  The same is true for all RAM page pointer registers in
   349                          ;    the Large Memory Model.  When necessary, it is the calling function's
   350                          ;    responsibility to perserve their values across calls to fastcall16 
   351                          ;    functions.
   352                          ;
   353  2F2F                     UART_Sensor_SendData:
   354  2F2F                    _UART_Sensor_SendData:
   355                             RAM_PROLOGUE RAM_USE_CLASS_1
   356  2F2F  60 29                mov REG[UART_Sensor_TX_BUFFER_REG], A
   357                             RAM_EPILOGUE RAM_USE_CLASS_1
   358  2F31  7F                   ret
   359                          .ENDSECTION
   360                          
   361                          
   362                          .SECTION
   363                          ;-----------------------------------------------------------------------------
   364                          ;  FUNCTION NAME: UART_Sensor_bReadTxStatus
   365                          ;
   366                          ;  DESCRIPTION:
   367                          ;     Reads the Tx Status bits in the Control/Status register.
   368                          ;-----------------------------------------------------------------------------
   369                          ;
   370                          ;  ARGUMENTS:
   371                          ;     none.
   372                          ;
   373                          ;  RETURNS:
   374                          ;     BYTE  bTxStatus - transmit status data.  Use defined masks for detecting
   375                          ;           status bits (returned in A)
   376                          ;
   377                          ;  SIDE EFFECTS:
   378                          ;    The A and X registers may be modified by this or future implementations
   379                          ;    of this function.  The same is true for all RAM page pointer registers in
   380                          ;    the Large Memory Model.  When necessary, it is the calling function's
   381                          ;    responsibility to perserve their values across calls to fastcall16 
   382                          ;    functions.
   383                          ;
   384  2F32                     UART_Sensor_bReadTxStatus:
   385  2F32                    _UART_Sensor_bReadTxStatus:
   386  2F32                     bUART_Sensor_ReadTxStatus:                      ; For backwards compatibility only
   387  2F32                    _bUART_Sensor_ReadTxStatus:                      ; For backwards compatibility only
   388                             RAM_PROLOGUE RAM_USE_CLASS_1
   389  2F32  5D 2B                mov A,  REG[UART_Sensor_TX_CONTROL_REG]
   390                             RAM_EPILOGUE RAM_USE_CLASS_1
   391  2F34  7F                   ret
   392                          .ENDSECTION
   393                          
   394                          
   395                          .SECTION
   396                          ;-----------------------------------------------------------------------------
   397                          ;  FUNCTION NAME: UART_Sensor_bReadRxData
   398                          ;
   399                          ;  DESCRIPTION:
   400                          ;     Reads the RX buffer register.  Should check the status regiser to make
   401                          ;     sure data is valid.
   402                          ;-----------------------------------------------------------------------------
   403                          ;
   404                          ;  ARGUMENTS:
   405                          ;     none.
   406                          ;
   407                          ;  RETURNS:
   408                          ;     bRxData - returned in A.
   409                          ;
   410                          ;  SIDE EFFECTS:
   411                          ;    The A and X registers may be modified by this or future implementations
   412                          ;    of this function.  The same is true for all RAM page pointer registers in
   413                          ;    the Large Memory Model.  When necessary, it is the calling function's
   414                          ;    responsibility to perserve their values across calls to fastcall16 
   415                          ;    functions.
   416                          ;
   417  2F35                     UART_Sensor_bReadRxData:
   418  2F35                    _UART_Sensor_bReadRxData:
   419  2F35                     bUART_Sensor_ReadRxData:                        ; For backwards compatibility only
   420  2F35                    _bUART_Sensor_ReadRxData:                        ; For backwards compatibility only
   421                             RAM_PROLOGUE RAM_USE_CLASS_1
   422  2F35  5D 2E                mov A, REG[UART_Sensor_RX_BUFFER_REG]
   423                             RAM_EPILOGUE RAM_USE_CLASS_1
   424  2F37  7F                   ret
   425                          .ENDSECTION
   426                          
   427                          
   428                          .SECTION
   429                          ;-----------------------------------------------------------------------------
   430                          ;  FUNCTION NAME: UART_Sensor_bReadRxStatus
   431                          ;
   432                          ;  DESCRIPTION:
   433                          ;     Reads the RX Status bits in the Control/Status register.
   434                          ;-----------------------------------------------------------------------------
   435                          ;
   436                          ;  ARGUMENTS:
   437                          ;     none.
   438                          ;
   439                          ;  RETURNS:
   440                          ;     BYTE  bRXStatus - receive status data.  Use the following defined bits
   441                          ;                       masks: RX_COMPLETE and RX_BUFFER_EMPTY
   442                          ;           returned in A.
   443                          ;
   444                          ;  SIDE EFFECTS:
   445                          ;    The A and X registers may be modified by this or future implementations
   446                          ;    of this function.  The same is true for all RAM page pointer registers in
   447                          ;    the Large Memory Model.  When necessary, it is the calling function's
   448                          ;    responsibility to perserve their values across calls to fastcall16 
   449                          ;    functions.
   450                          ;
   451  2F38                     UART_Sensor_bReadRxStatus:
   452  2F38                    _UART_Sensor_bReadRxStatus:
   453  2F38                     bUART_Sensor_ReadRxStatus:                      ; For backwards compatibility only
   454  2F38                    _bUART_Sensor_ReadRxStatus:                      ; For backwards compatibility only
   455                             RAM_PROLOGUE RAM_USE_CLASS_1
   456  2F38  5D 2F                mov A,  REG[UART_Sensor_RX_CONTROL_REG]
   457                             RAM_EPILOGUE RAM_USE_CLASS_1
   458  2F3A  7F                   ret
   459                          .ENDSECTION
   460                          
   461                          
   462                          .SECTION
   463                          ;-----------------------------------------------------------------------------
   464                          ;  FUNCTION NAME: UART_Sensor_TxIntMode
   465                          ;
   466                          ;  DESCRIPTION:
   467                          ;     This function is used to change the TX Interrupt mode.
   468                          ;-----------------------------------------------------------------------------
   469                          ;
   470                          ;  ARGUMENTS:
   471                          ;     A => Tx Interrupt mode
   472                          ;             0 => Interrupt on TX_Reg_Empty  (Default)
   473                          ;             1 => Interrupt on TX Complete
   474                          ;
   475                          ;  RETURNS:
   476                          ;     none.
   477                          ;
   478                          ;  SIDE EFFECTS:
   479                          ;    The A and X registers may be modified by this or future implementations
   480                          ;    of this function.  The same is true for all RAM page pointer registers in
   481                          ;    the Large Memory Model.  When necessary, it is the calling function's
   482                          ;    responsibility to perserve their values across calls to fastcall16 
   483                          ;    functions.
   484                          ;
   485  2F3B                     UART_Sensor_TxIntMode:
   486  2F3B                    _UART_Sensor_TxIntMode:
   487                             RAM_PROLOGUE RAM_USE_CLASS_1
   488                          
   489  2F3B  21 01                and  A,UART_Sensor_INT_MODE_TX_COMPLETE
   490  2F3D  71 10                M8C_SetBank1
   491  2F3F  39 01                cmp  A,UART_Sensor_INT_MODE_TX_COMPLETE
   492  2F41  A006                 jz   .SetTxCmpMode
   493                          
   494  2F43  41 28 EF             and  reg[UART_Sensor_TX_FUNC_REG],0xEF        ; Set Interrupt on Tx_Reg_Empty
   495  2F46  8004                 jmp  .TxIntMode_End
   496                          
   497  2F48                    .SetTxCmpMode:                                       ; Set Interrupt on TX Complete
   498  2F48  43 28 10             or   reg[UART_Sensor_TX_FUNC_REG],0x10
   499                          
   500  2F4B                    .TxIntMode_End:
   501  2F4B  70 EF                M8C_SetBank0
   502                             RAM_EPILOGUE RAM_USE_CLASS_1
   503  2F4D  7F                   ret
   504                          .ENDSECTION
   505                          
   506                              
   507                          .SECTION
   508                          ;-----------------------------------------------------------------------------
   509                          ;  FUNCTION NAME: UART_Sensor_IntCntl
   510                          ;
   511                          ;  DESCRIPTION:
   512                          ;     This function is used to enable/disable the Rx and Tx interrupt.
   513                          ;-----------------------------------------------------------------------------
   514                          ;
   515                          ;  ARGUMENTS:
   516                          ;     A => Interrupt mask
   517                          ;
   518                          ;  RETURNS:
   519                          ;     none.
   520                          ;
   521                          ;  SIDE EFFECTS:
   522                          ;    The A and X registers may be modified by this or future implementations
   523                          ;    of this function.  The same is true for all RAM page pointer registers in
   524                          ;    the Large Memory Model.  When necessary, it is the calling function's
   525                          ;    responsibility to perserve their values across calls to fastcall16 
   526                          ;    functions.
   527                          ;
   528                          ;  THEORY of OPERATION or PROCEDURE:
   529                          ;     Set or Clears the Tx/Rx user module interrupt enable mask bit in the TX
   530                          ;     and RX block.
   531                          ;
   532  2F4E                     UART_Sensor_IntCntl:
   533  2F4E                    _UART_Sensor_IntCntl:
   534                             RAM_PROLOGUE RAM_USE_CLASS_1
   535                          
   536  2F4E  08                   push A
   537  2F4F  21 01                and  A,UART_Sensor_ENABLE_RX_INT
   538  2F51  A006                 jz   .DisRxInt
   539                               ; Enable Rx Interrupt
   540  2F53  43 E1 08             M8C_EnableIntMask UART_Sensor_RX_INT_REG, UART_Sensor_RX_INT_MASK
   541  2F56  8004                 jmp  .CheckTxInt
   542  2F58                    .DisRxInt:
   543                               ; Disable Rx Interrupt
   544  2F58  41 E1 F7             M8C_DisableIntMask UART_Sensor_RX_INT_REG, UART_Sensor_RX_INT_MASK
   545                          
   546  2F5B                    .CheckTxInt:
   547  2F5B  18                   pop  A
   548  2F5C  21 02                and  A,UART_Sensor_ENABLE_TX_INT
   549  2F5E  A006                 jz   .DisTxInt
   550                               ; Enable Tx Interrupt
   551  2F60  43 E1 04             M8C_EnableIntMask UART_Sensor_TX_INT_REG, UART_Sensor_TX_INT_MASK
   552  2F63  8004                 jmp  .End_IntCntl
   553  2F65                    .DisTxInt:
   554                               ; Disable Tx Interrupt
   555  2F65  41 E1 FB             M8C_DisableIntMask UART_Sensor_TX_INT_REG, UART_Sensor_TX_INT_MASK
   556                          
   557  2F68                    .End_IntCntl:
   558                             RAM_EPILOGUE RAM_USE_CLASS_1
   559  2F68  7F                   ret
   560                          .ENDSECTION
   561                          
   562                          
   563                          ;=============================================================================
   564                          ;=============================================================================
   565                          ;
   566                          ;     High-Level Commands
   567                          ;
   568                          ;=============================================================================
   569                          ;=============================================================================
   570                          
   571                          
   572                          ;-----------------------------------------------------------------------------
   573                          ;  FUNCTION NAME: UART_Sensor_PutSHexByte
   574                          ;
   575                          ;  DESCRIPTION:
   576                          ;     Print a byte in Hex (two characters) to the UART Tx
   577                          ;-----------------------------------------------------------------------------
   578                          ;
   579                          ;  ARGUMENTS:
   580                          ;     A  => (BYTE) Data/char to be printed
   581                          ;
   582                          ;  RETURNS:
   583                          ;     none.
   584                          ;
   585                          ;  SIDE EFFECTS:
   586                          ;    The A and X registers may be modified by this or future implementations
   587                          ;    of this function.  The same is true for all RAM page pointer registers in
   588                          ;    the Large Memory Model.  When necessary, it is the calling function's
   589                          ;    responsibility to perserve their values across calls to fastcall16 
   590                          ;    functions.
   591                          ;
   592                          .LITERAL
   593  2F69                    UART_Sensor_HEX_STR:
   594  2F69  30 31 32 33 34 35      DS    "0123456789ABCDEF"
              36 37 38 39 41 42 
              43 44 45 46       
   595                          .ENDLITERAL
   596                          
   597                          .SECTION
   598  2F79                     UART_Sensor_PutSHexByte:
   599  2F79                    _UART_Sensor_PutSHexByte:
   600                             RAM_PROLOGUE RAM_USE_CLASS_1
   601  2F79  08                   push  A                             ; Save lower nibble
   602  2F7A  67                   asr   A                             ; Shift high nibble to right
   603  2F7B  67                   asr   A
   604  2F7C  67                   asr   A
   605  2F7D  67                   asr   A
   606  2F7E  21 0F                and   A,0Fh                         ; Mask off nibble
   607  2F80  FFE7                 index UART_Sensor_HEX_STR           ; Get Hex value
   608  2F82  900F                 call  UART_Sensor_PutChar           ; Write data to screen
   609  2F84  18                   pop   A                             ; Restore value
   610  2F85  21 0F                and   A,0Fh                         ; Mask off lower nibble
   611  2F87  FFE0                 index UART_Sensor_HEX_STR           ; Get Hex value
   612  2F89  9008                 call  UART_Sensor_PutChar           ; Write data to screen
   613                             RAM_EPILOGUE RAM_USE_CLASS_1
   614  2F8B  7F                   ret
   615                          .ENDSECTION
   616                          
   617                          
   618                          .SECTION
   619                          ;-----------------------------------------------------------------------------
   620                          ;  FUNCTION NAME: UART_Sensor_PutSHexInt
   621                          ;
   622                          ;  DESCRIPTION:
   623                          ;     Print an Int in Hex (four characters) to UART Tx
   624                          ;-----------------------------------------------------------------------------
   625                          ;
   626                          ;  ARGUMENTS:
   627                          ;     Pointer to string
   628                          ;     A  => ASB of Int
   629                          ;     X  => MSB of Int
   630                          ;
   631                          ;  RETURNS:
   632                          ;     none.
   633                          ;
   634                          ;  SIDE EFFECTS:
   635                          ;    The A and X registers may be modified by this or future implementations
   636                          ;    of this function.  The same is true for all RAM page pointer registers in
   637                          ;    the Large Memory Model.  When necessary, it is the calling function's
   638                          ;    responsibility to perserve their values across calls to fastcall16 
   639                          ;    functions.
   640                          ;
   641                          
   642  2F8C                     UART_Sensor_PutSHexInt:
   643  2F8C                    _UART_Sensor_PutSHexInt:
   644                             RAM_PROLOGUE RAM_USE_CLASS_1
   645  2F8C  4B                   swap  A,X
   646  2F8D  9FEA                 call  UART_Sensor_PutSHexByte       ; Print MSB
   647  2F8F  5B                   mov   A,X                           ; Move LSB into position
   648  2F90  9FE7                 call  UART_Sensor_PutSHexByte       ; Print LSB
   649                             RAM_EPILOGUE RAM_USE_CLASS_1
   650  2F92  7F                   ret
   651                          .ENDSECTION
   652                          
   653                          
   654                          .SECTION
   655                          ;-----------------------------------------------------------------------------
   656                          ;  FUNCTION NAME: UART_Sensor_PutChar
   657                          ;
   658                          ;  DESCRIPTION:
   659                          ;     Send character out through UART TX port.
   660                          ;-----------------------------------------------------------------------------
   661                          ;
   662                          ;  ARGUMENTS:
   663                          ;     A has Character to send to UART Tx Port
   664                          ;
   665                          ;  RETURNS:
   666                          ;     none
   667                          ;
   668                          ;  SIDE EFFECTS:
   669                          ;    The A and X registers may be modified by this or future implementations
   670                          ;    of this function.  The same is true for all RAM page pointer registers in
   671                          ;    the Large Memory Model.  When necessary, it is the calling function's
   672                          ;    responsibility to perserve their values across calls to fastcall16 
   673                          ;    functions.
   674                          ;
   675                          
   676                             macro InLinePutChar( Source )
   677                          .BufEmptyWaitLoop:
   678                             tst REG[UART_Sensor_TX_CONTROL_REG], UART_Sensor_TX_BUFFER_EMPTY     ; Check Tx Status
   679                             jz  .BufEmptyWaitLoop
   680                             mov REG[UART_Sensor_TX_BUFFER_REG], @Source     ; Write data to Tx Port
   681  2F93                       endm
   682                          
   683  2F93                     UART_Sensor_PutChar:
   684  2F93                    _UART_Sensor_PutChar:
   685                             RAM_PROLOGUE RAM_USE_CLASS_1
   686                             InLinePutChar A
      + 2F93                    ; Nothing to do
??0000:
      + 2F93  49 2B 10          	tst	reg[43], 16
      + 2F96  AFFC              	jz	??0000
      + 2F98  60 29             	mov	reg[41], a
   687                             RAM_EPILOGUE RAM_USE_CLASS_1
   688  2F9A  7F                   ret
   689                          .ENDSECTION
   690                          
   691                          
   692                          .SECTION
   693                          ;-----------------------------------------------------------------------------
   694                          ;  FUNCTION NAME: UART_Sensor_cGetChar
   695                          ;
   696                          ;  DESCRIPTION:
   697                          ;     Read character from UART RX port.
   698                          ;-----------------------------------------------------------------------------
   699                          ;
   700                          ;  ARGUMENTS:
   701                          ;      none
   702                          ;
   703                          ;  RETURNS:
   704                          ;     char that is returned from UART
   705                          ;
   706                          ;  SIDE EFFECTS:
   707                          ;    The A and X registers may be modified by this or future implementations
   708                          ;    of this function.  The same is true for all RAM page pointer registers in
   709                          ;    the Large Memory Model.  When necessary, it is the calling function's
   710                          ;    responsibility to perserve their values across calls to fastcall16 
   711                          ;    functions.
   712                          ;
   713                          ;    Program flow will stay in this function until a character is received.
   714                          ;    If the watchdog timer is used, care must be taken to make sure that
   715                          ;    the delay between characters is less than the watchdog timeout.
   716                          ;
   717  2F9B                     UART_Sensor_cGetChar:
   718  2F9B                    _UART_Sensor_cGetChar:
   719                             RAM_PROLOGUE RAM_USE_CLASS_1
   720  2F9B  49 2F 08             tst REG[UART_Sensor_RX_CONTROL_REG],UART_Sensor_RX_REG_FULL    ; Check if a character is ready
   721  2F9E  AFFC                 jz  UART_Sensor_cGetChar                              ; If not loop
   722  2FA0  5D 2E                mov A, REG[UART_Sensor_RX_BUFFER_REG]                 ; Get character
   723                             RAM_EPILOGUE RAM_USE_CLASS_1
   724  2FA2  7F                   ret
   725                          .ENDSECTION
   726                          
   727                          
   728                          .SECTION
   729                          ;-----------------------------------------------------------------------------
   730                          ;  FUNCTION NAME: UART_Sensor_cReadChar
   731                          ;
   732                          ;  DESCRIPTION:
   733                          ;     Read character from UART RX port.
   734                          ;-----------------------------------------------------------------------------
   735                          ;
   736                          ;  ARGUMENTS:
   737                          ;      none
   738                          ;
   739                          ;  RETURNS:
   740                          ;     char that is returned from UART
   741                          ;
   742                          ;  SIDE EFFECTS:
   743                          ;    The A and X registers may be modified by this or future implementations
   744                          ;    of this function.  The same is true for all RAM page pointer registers in
   745                          ;    the Large Memory Model.  When necessary, it is the calling function's
   746                          ;    responsibility to perserve their values across calls to fastcall16 
   747                          ;    functions.
   748                          ;
   749                          ;    A valid 0x00 character will be ignored, since a 0x00 return value
   750                          ;    implies a valid character or an error condition occured.
   751                          ;
   752  2FA3                     UART_Sensor_cReadChar:
   753  2FA3                    _UART_Sensor_cReadChar:
   754                             RAM_PROLOGUE RAM_USE_CLASS_1
   755  2FA3  5D 2F                mov  A,REG[UART_Sensor_RX_CONTROL_REG]                  ; Get Status of RX
   756  2FA5  08                   push A
   757  2FA6  21 08                and  A,UART_Sensor_RX_COMPLETE                          ; Check if a character is ready
   758  2FA8  B004                 jnz  .RX_DATA_RDY                                       ; Data Ready go read it.
   759  2FAA  18                   pop  A
   760  2FAB  800B                 jmp  .RX_NO_VALID_CHAR
   761                          
   762  2FAD                    .RX_DATA_RDY:
   763  2FAD  5D 2E                mov  A,REG[UART_Sensor_RX_BUFFER_REG ]          
   764  2FAF  4B                   swap A,X                                                ; determine if data is valid
   765                          
   766  2FB0  18                   pop  A                                                  ; Check for errors
   767  2FB1  21 A0                and  A,(UART_Sensor_RX_PARITY_ERROR | UART_Sensor_RX_FRAMING_ERROR)
   768  2FB3  B003                 jnz  .RX_NO_VALID_CHAR                                  ; No character, exit
   769  2FB5  4B                   swap A,X                                                ; Put data in A and exit
   770                             RAM_EPILOGUE RAM_USE_CLASS_1
   771  2FB6  7F                   ret
   772                          
   773  2FB7                    .RX_NO_VALID_CHAR:
   774  2FB7  50 00                mov A,0x00                                              ; Zero out character
   775                          
   776  2FB9                     End_UART_Sensor_cReadChar:
   777                             RAM_EPILOGUE RAM_USE_CLASS_1
   778  2FB9  7F                   ret
   779                          .ENDSECTION
   780                          
   781                          
   782                          .SECTION
   783                          ;-----------------------------------------------------------------------------
   784                          ;  FUNCTION NAME: UART_Sensor_iReadChar
   785                          ;
   786                          ;  WARNING WARNING WARNING  Negative return value not correct!!!!  We may want
   787                          ;  to just set a value in the upper byte if error conditions exists.
   788                          ;
   789                          ;  DESCRIPTION:
   790                          ;     Read character from UART RX port.
   791                          ;-----------------------------------------------------------------------------
   792                          ;
   793                          ;  ARGUMENTS:
   794                          ;      none
   795                          ;
   796                          ;  RETURNS:
   797                          ;     An integer value is returned.  A negative value inplies and error
   798                          ;     condition, a positive value between 0 and 255 is the return character.
   799                          ;
   800                          ;     Error Codes:
   801                          ;        0x80CC    Parity Error
   802                          ;        0x40CC    Overrun Error
   803                          ;        0x20CC    Framing Error
   804                          ;        0x01CC    No Data available
   805                          ;
   806                          ;  SIDE EFFECTS:
   807                          ;    The A and X registers may be modified by this or future implementations
   808                          ;    of this function.  The same is true for all RAM page pointer registers in
   809                          ;    the Large Memory Model.  When necessary, it is the calling function's
   810                          ;    responsibility to perserve their values across calls to fastcall16 
   811                          ;    functions.
   812                          ;
   813  2FBA                     UART_Sensor_iReadChar:
   814  2FBA                    _UART_Sensor_iReadChar:
   815                             RAM_PROLOGUE RAM_USE_CLASS_1
   816  2FBA  5D 2F                mov  A,REG[UART_Sensor_RX_CONTROL_REG]                  ; Get Status of RX
   817                                                                                     ; Mask only errors and data ready
   818  2FBC  21 E8                and  A,(UART_Sensor_RX_ERROR|UART_Sensor_RX_REG_FULL)
   819  2FBE  08                   push A
   820  2FBF  21 08                and  A,UART_Sensor_RX_COMPLETE                          ; Check if a character is ready
   821  2FC1  B007                 jnz  .RX_GET_DATA                                       ; Data Ready go read it.
   822  2FC3  18                   pop  A
   823  2FC4  29 01                or   A,UART_Sensor_RX_NO_DATA                           ; Add no data flag
   824  2FC6  4B                   swap A,X
   825  2FC7  8007                 jmp  End_UART_Sensor_iReadChar
   826                          
   827  2FC9                    .RX_GET_DATA:
   828  2FC9  18                   pop  A
   829  2FCA  21 E0                and  A,UART_Sensor_RX_ERROR
   830  2FCC  4B                   swap A,X
   831  2FCD  5D 2E                mov  A,REG[UART_Sensor_RX_BUFFER_REG ]                  ; Read data first, then
   832                                                                                     ; determine if data is valid
   833                          
   834  2FCF                     End_UART_Sensor_iReadChar:
   835                             RAM_EPILOGUE RAM_USE_CLASS_1
   836  2FCF  7F                   ret
   837                          .ENDSECTION
   838                          
   839                          
   840                          .SECTION
   841                          ;-----------------------------------------------------------------------------
   842                          ;  FUNCTION NAME: UART_Sensor_PutString
   843                          ;
   844                          ;  DESCRIPTION:
   845                          ;     Send String out through UART TX port.
   846                          ;-----------------------------------------------------------------------------
   847                          ;
   848                          ;  ARGUMENTS:
   849                          ;     Pointer to String
   850                          ;     A has MSB of string address
   851                          ;     X has LSB of string address
   852                          ;
   853                          ;  RETURNS:
   854                          ;     none
   855                          ;
   856                          ;  SIDE EFFECTS:
   857                          ;    The A and X registers may be modified by this or future implementations
   858                          ;    of this function.  The same is true for all RAM page pointer registers in
   859                          ;    the Large Memory Model.  When necessary, it is the calling function's
   860                          ;    responsibility to perserve their values across calls to fastcall16 
   861                          ;    functions.
   862                          ;          
   863                          ;    Currently only the page pointer registers listed below are modified: 
   864                          ;          IDX_PP
   865                          ;
   866  2FD0                     UART_Sensor_PutString:
   867  2FD0                    _UART_Sensor_PutString:
   868                             RAM_PROLOGUE RAM_USE_CLASS_3
   869  2FD0  60 D3                RAM_SETPAGE_IDX A
   870  2FD2                    .PutStringLoop:
   871  2FD2  52 00                mov   A,[X]                                   ; Get value pointed to by X
   872  2FD4  A006                 jz    End_PutString                           ; Check for end of string
   873  2FD6  9FBB                 call  UART_Sensor_PutChar                     ; Send character to Tx port
   874  2FD8  75                   inc   X                                       ; Advance pointer to next character
   875  2FD9  8FF8                 jmp   .PutStringLoop                          ; Get next character
   876                          
   877  2FDB                    End_PutString:
   878                             RAM_EPILOGUE RAM_USE_CLASS_3
      + 2FDB  70 3F             	and	f, 0x3F
      + 2FDD  71 80             	or	f, 0x80
   879  2FDF  7F                   ret
   880                          .ENDSECTION
   881                              
   882                          .SECTION
   883                          ;-----------------------------------------------------------------------------
   884                          ;  FUNCTION NAME: UART_Sensor_Write
   885                          ;
   886                          ;  DESCRIPTION:
   887                          ;     Send String of length X to serial port
   888                          ;-----------------------------------------------------------------------------
   889                          ;
   890                          ;  ARGUMENTS:
   891                          ;     Pointer to String
   892                          ;     [SP-5] Count of characters to send
   893                          ;     [SP-4] has MSB of string address
   894                          ;     [SP-3] has LSB of string address
   895                          ;
   896                          ;  RETURNS:
   897                          ;     none
   898                          ;
   899                          ;  SIDE EFFECTS:
   900                          ;    The A and X registers may be modified by this or future implementations
   901                          ;    of this function.  The same is true for all RAM page pointer registers in
   902                          ;    the Large Memory Model.  When necessary, it is the calling function's
   903                          ;    responsibility to perserve their values across calls to fastcall16 
   904                          ;    functions.
   905                          ;          
   906                          ;    Currently only the page pointer registers listed below are modified: 
   907                          ;          IDX_PP
   908                          ;
   909  FFFFFFFB                    CNT_LEN:    equ -5                               ; Length of data to send
   910  FFFFFFFC                    STR_MSB:    equ -4                               ; MSB pointer of string 
   911  FFFFFFFD                    STR_LSB:    equ -3                               ; LSB pointer of string 
   912                          
   913  2FE0                     UART_Sensor_Write:
   914  2FE0                    _UART_Sensor_Write:
   915                             RAM_PROLOGUE RAM_USE_CLASS_3
   916  2FE0  62 D3 03             RAM_SETPAGE_IDX2STK                           ; Refer indexed addrs to the stack
   917  2FE3  4F                   mov   X, SP                                   ; Establish the frame pointer 
   918                          
   919  2FE4                    .NextByteLoop:
   920  2FE4  52 FB                mov   A, [X+CNT_LEN]                          ; End of the string?
   921  2FE6  A01A                 jz    .End_Write                              ;   Yes, prepare to exit
   922  2FE8  7B FB                dec   [X+CNT_LEN]                             ; Decrement counter
   923                          
   924                             IF SYSTEM_LARGE_MEMORY_MODEL
   925  2FEA  52 FC                mov   A, [X+STR_MSB]                          ; Load pointer to char to send
   926                             ENDIF
   927                          
   928  2FEC  59 FD                mov   X, [X+STR_LSB]                          ; Load pointer to char to send
   929  2FEE  60 D3                RAM_SETPAGE_IDX A                             ; switch index pages
   930  2FF0  52 00                mov   A, [X]                                  ; Grab the data
   931                             InLinePutChar A                               ; Put data in empty TX buf reg
      + 2FF2                    ??0001:
      + 2FF2  49 2B 10          	tst	reg[43], 16
      + 2FF5  AFFC              	jz	??0001
      + 2FF7  60 29             	mov	reg[41], a
   932  2FF9  4F                   mov   X, SP                                   ; Recover frame pointer
   933  2FFA  62 D3 03             RAM_SETPAGE_IDX2STK                           ; Prepare for stack access
   934  2FFD  77 FD                inc   [X+STR_LSB]                             ; Point to next byte, but do not
   935  2FFF  8FE4                 jmp   .NextByteLoop                           ;    cross RAM page boundary!
   936                          
   937  3001                    .End_Write:
   938                             RAM_EPILOGUE RAM_USE_CLASS_3
      + 3001  70 3F             	and	f, 0x3F
      + 3003  71 80             	or	f, 0x80
   939  3005  7F                   ret
   940                          .ENDSECTION
   941                              
   942                          
   943                          .SECTION
   944                          ;-----------------------------------------------------------------------------
   945                          ;  FUNCTION NAME: UART_Sensor_CWrite
   946                          ;
   947                          ;             WARNING WARNING NOT COMPLETE
   948                          ;
   949                          ;  DESCRIPTION:
   950                          ;     Send String of length X to serial port
   951                          ;-----------------------------------------------------------------------------
   952                          ;
   953                          ;  ARGUMENTS:
   954                          ;     [SP-4] MSB of Count of character to send
   955                          ;     [SP-3] LSB of Count of character to send
   956                          ;     [SP-2] has MSB of string address
   957                          ;     [SP-1] has LSB of string address
   958                          ;
   959                          ;  RETURNS:
   960                          ;     none
   961                          ;
   962                          ;  SIDE EFFECTS:
   963                          ;    The A and X registers may be modified by this or future implementations
   964                          ;    of this function.  The same is true for all RAM page pointer registers in
   965                          ;    the Large Memory Model.  When necessary, it is the calling function's
   966                          ;    responsibility to perserve their values across calls to fastcall16 
   967                          ;    functions.
   968                          ;
   969  FFFFFFFA                    CLEN_MSB:   equ -6           ; MSB Length of data to send
   970  FFFFFFFB                    CLEN_LSB:   equ -5           ; LSB Length of data to send
   971  FFFFFFFC                    CSTR_MSB:   equ -4           ; MSB pointer of string
   972  FFFFFFFD                    CSTR_LSB:   equ -3           ; LSB pointer of string
   973                          
   974  3006                     UART_Sensor_CWrite:
   975  3006                    _UART_Sensor_CWrite:
   976  3006  71 40                RAM_PROLOGUE RAM_USE_CLASS_2
   977  3008  4F                   mov   X,SP
   978  3009                    .CW_Loop:
   979  3009  3D FA 00             cmp   [X+CLEN_MSB],0x00                  ; Check for zero counter
   980  300C  B006                 jnz   .CW_WRITEIT
   981  300E  3D FB 00             cmp   [X+CLEN_LSB],0x00
   982  3011  A01D                 jz    .End_CWrite                        ; Leave if done
   983                          
   984  3013                    .CW_WRITEIT:                                
   985  3013  10                   push  X                                  ; Save frame pointer
   986  3014  52 FC                mov   A,[X+CSTR_MSB]
   987  3016  59 FD                mov   X,[X+CSTR_LSB]
   988  3018  28                   romx                                     ; Get character from ROM
   989                             InLinePutChar A                          ; Put data in empty TX buf reg
      + 3019                    ??0002:
      + 3019  49 2B 10          	tst	reg[43], 16
      + 301C  AFFC              	jz	??0002
      + 301E  60 29             	mov	reg[41], a
   990  3020  20                   pop   X                                  ; Restore frame pointer
   991  3021  07 FD 01             add   [X+CSTR_LSB],1                     ; Increment the string pointer
   992  3024  0F FC 00             adc   [X+CSTR_MSB],0
   993  3027  17 FB 01             sub   [X+CLEN_LSB],0x01                  ; Dec the counter
   994  302A  1F FA 00             sbb   [X+CLEN_MSB],0x00
   995  302D  8FDB                 jmp   .CW_Loop
   996                          
   997  302F                    .End_CWrite:
   998                             RAM_EPILOGUE RAM_USE_CLASS_2
      + 302F  70 3F             	and	f, 0x3F
      + 3031  71 80             	or	f, 0x80
   999  3033  7F                   ret
  1000                          .ENDSECTION
  1001                          
  1002                          
  1003                          .SECTION
  1004                          ;-----------------------------------------------------------------------------
  1005                          ;  FUNCTION NAME: UART_Sensor_CPutString
  1006                          ;
  1007                          ;  DESCRIPTION:
  1008                          ;     Send String out through UART TX port.
  1009                          ;-----------------------------------------------------------------------------
  1010                          ;
  1011                          ;  ARGUMENTS:
  1012                          ;     Pointer to String
  1013                          ;     A has MSB of string address
  1014                          ;     X has LSB of string address
  1015                          ;
  1016                          ;  RETURNS:
  1017                          ;     none
  1018                          ;
  1019                          ;  SIDE EFFECTS:
  1020                          ;    The A and X registers may be modified by this or future implementations
  1021                          ;    of this function.  The same is true for all RAM page pointer registers in
  1022                          ;    the Large Memory Model.  When necessary, it is the calling function's
  1023                          ;    responsibility to perserve their values across calls to fastcall16 
  1024                          ;    functions.
  1025                          ;
  1026  3034                     UART_Sensor_CPutString:
  1027  3034                    _UART_Sensor_CPutString:
  1028                             RAM_PROLOGUE RAM_USE_CLASS_1
  1029  3034  08                   push  A                                       ; Store ROM pointer
  1030  3035  10                   push  X
  1031  3036  28                   romx                                          ; Get character from ROM
  1032  3037  A00B                 jz    .End_CPutString
  1033  3039  9F58                 call  UART_Sensor_PutChar                     ; Print character
  1034  303B  20                   pop   X
  1035  303C  18                   pop   A
  1036  303D  75                   inc   X                                       ; Inc LSB of pointer
  1037  303E  DFF5                 jnc   UART_Sensor_CPutString                  ; Check for carry
  1038  3040  74                   inc   A                                       ; Inc MSB of pointer
  1039  3041  8FF2                 jmp   UART_Sensor_CPutString
  1040                          
  1041                          
  1042  3043                    .End_CPutString:
  1043  3043  38 FE                add   SP, -2
  1044                             RAM_EPILOGUE RAM_USE_CLASS_1
  1045  3045  7F                   ret
  1046                          .ENDSECTION
  1047                          
  1048                          
  1049                          .SECTION
  1050                          ;-----------------------------------------------------------------------------
  1051                          ;  FUNCTION NAME: UART_Sensor_PutCRLF
  1052                          ;
  1053                          ;  DESCRIPTION:
  1054                          ;     Send a CR and LF
  1055                          ;-----------------------------------------------------------------------------
  1056                          ;
  1057                          ;  ARGUMENTS:
  1058                          ;     none.
  1059                          ;
  1060                          ;  RETURNS:
  1061                          ;     none.
  1062                          ;
  1063                          ;  SIDE EFFECTS:
  1064                          ;    The A and X registers may be modified by this or future implementations
  1065                          ;    of this function.  The same is true for all RAM page pointer registers in
  1066                          ;    the Large Memory Model.  When necessary, it is the calling function's
  1067                          ;    responsibility to perserve their values across calls to fastcall16 
  1068                          ;    functions.
  1069                          ;
  1070  3046                     UART_Sensor_PutCRLF:
  1071  3046                    _UART_Sensor_PutCRLF:
  1072                             RAM_PROLOGUE RAM_USE_CLASS_1
  1073  3046  50 0D                mov  A,0x0D                        ; Send CR
  1074  3048  9F49                 call UART_Sensor_PutChar
  1075  304A  50 0A                mov  A,0x0A                        ; Send LF
  1076  304C  9F45                 call UART_Sensor_PutChar
  1077                             RAM_EPILOGUE RAM_USE_CLASS_1
  1078  304E  7F                   ret
HI-TECH Software Macro Assembler (PSoC MCU) V9.61
Symbol Table                                                                                               Fri Jun 12 09:25:11 2015
          UART_Sensor_TX_FUNC_REG 0028             UART_Sensor_TX_INT_REG 00E1            UART_Sensor_TX_INT_MASK 0004  
            UART_Sensor_EnableInt 2F01         UART_Sensor_RX_CONTROL_REG 002F           _bUART_Sensor_ReadRxData 2F35  
       UART_Sensor_TX_CONTROL_REG 002B             _UART_Sensor_EnableInt 2F01             UART_Sensor_DisableInt 2F08  
            _UART_Sensor_SendData 2F2F            UART_Sensor_bReadRxData 2F35                           CLEN_LSB FFFFFFFB  
                         CLEN_MSB FFFFFFFA              _UART_Sensor_cGetChar 2F9B            UART_Sensor_PutSHexByte 2F79  
                         CSTR_LSB FFFFFFFD                           CSTR_MSB FFFFFFFC            bfCONTROL_REG_START_BIT 0001  
          _UART_Sensor_DisableInt 2F08                             ??0000 2F93                             ??0001 2FF2  
                           ??0002 3019                      End_PutString 2FDB              UART_Sensor_cReadChar 2FA3  
            UART_Sensor_TxIntMode 2F3B                             HITECH 0002          UART_Sensor_RX_BUFFER_REG 002E  
                  FLAG_PGMODE_01b 0040                    FLAG_PGMODE_10b 0080                             IDX_PP 00D3  
            UART_Sensor_PutString 2FD0             _UART_Sensor_cReadChar 2FA3                   UART_Sensor_Stop 2F28  
           _UART_Sensor_TxIntMode 2F3B                 UART_Sensor_CWrite 3006          bUART_Sensor_ReadRxStatus 2F38  
         _UART_Sensor_bReadRxData 2F35              UART_Sensor_iReadChar 2FBA          bUART_Sensor_ReadTxStatus 2F32  
           _UART_Sensor_PutString 2FD0          End_UART_Sensor_cReadChar 2FB9           _UART_Sensor_PutSHexByte 2F79  
                _UART_Sensor_Stop 2F28             _UART_Sensor_iReadChar 2FBA       UART_Sensor_RX_FRAMING_ERROR 0020  
             UART_Sensor_RX_ERROR 00E0          _UART_Sensor_SetTxIntMode 2F0F          SYSTEM_LARGE_MEMORY_MODEL 0001  
        End_UART_Sensor_iReadChar 2FCF             SYSTEM_MULTIPAGE_STACK 0000               _UART_Sensor_IntCntl 2F4E  
             _UART_Sensor_PutCRLF 3046                          TOOLCHAIN 0002             UART_Sensor_PutSHexInt 2F8C  
             _UART_Sensor_PutChar 2F93                            CNT_LEN FFFFFFFB               UART_Sensor_SendData 2F2F  
             UART_Sensor_cGetChar 2F9B          UART_Sensor_bReadRxStatus 2F38                   FLAG_PGMODE_MASK 00C0  
        UART_Sensor_bReadTxStatus 2F32                    RAM_USE_CLASS_1 0001                    RAM_USE_CLASS_2 0002  
                  RAM_USE_CLASS_3 0004                    RAM_USE_CLASS_4 0008   UART_Sensor_INT_MODE_TX_COMPLETE 0001  
                          STR_LSB FFFFFFFD                            STR_MSB FFFFFFFC                UART_Sensor_HEX_STR 2F69  
   bfFUNCTION_REG_TX_INT_MODE_BIT 0010         _bUART_Sensor_ReadRxStatus 2F38            _UART_Sensor_PutSHexInt 2F8C  
       _bUART_Sensor_ReadTxStatus 2F32                  UART_Sensor_Start 2F21                  UART_Sensor_Write 2FE0  
              _UART_Sensor_CWrite 3006          UART_Sensor_ENABLE_RX_INT 0001          UART_Sensor_ENABLE_TX_INT 0002  
           UART_Sensor_CPutString 3034                UART_Sensor_IntCntl 2F4E          UART_Sensor_TX_BUFFER_REG 0029  
              UART_Sensor_PutCRLF 3046                UART_Sensor_PutChar 2F93            UART_Sensor_RX_COMPLETE 0008  
          bUART_Sensor_ReadRxData 2F35        UART_Sensor_TX_BUFFER_EMPTY 0010            _UART_Sensor_CPutString 3034  
               _UART_Sensor_Start 2F21            UART_Sensor_RX_INT_MASK 0008                 _UART_Sensor_Write 2FE0  
                SYSTEM_STACK_PAGE 0003        UART_Sensor_RX_PARITY_ERROR 0080            UART_Sensor_RX_REG_FULL 0008  
                    FLAG_XIO_MASK 0010         _UART_Sensor_bReadRxStatus 2F38         SYSTEM_IDXPG_TRACKS_IDX_PP 0001  
       _UART_Sensor_bReadTxStatus 2F32             UART_Sensor_RX_INT_REG 00E1         SYSTEM_IDXPG_TRACKS_STK_PP 0000  
           UART_Sensor_RX_NO_DATA 0001           UART_Sensor_SetTxIntMode 2F0F           UART_Sensor_RXBUF_ENABLE 0000  
HI-TECH Software Macro Assembler (PSoC MCU) V9.61
                                                                                                           Fri Jun 12 09:25:11 2015
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  FILENAME:   UART_Sensor.inc
     4                          ;;  Version: 5.3, Updated on 2013/5/19 at 10:44:49
     5                          ;;  Generated by PSoC Designer 5.4.2946
     6                          ;;
     7                          ;;  DESCRIPTION:  Assembler declarations for the UART user module.
     8                          ;;-----------------------------------------------------------------------------
     9                          ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
    10                          ;;*****************************************************************************
    11                          ;;*****************************************************************************
    12                          
    13                          ;--------------------------------------------------
    14                          ; Constants for UART_Sensor API's
    15                          ;--------------------------------------------------
    16                          
    17                          ;mask value for global int reg bit for TX instance
    18  0004                    UART_Sensor_TX_INT_MASK:                     equ 0x04
    19  00E1                    UART_Sensor_TX_INT_REG:                      equ 0x0e1  ;TX interrupt address
    20  0008                    UART_Sensor_RX_INT_MASK:                     equ 0x08  ;mask value for global int reg bit for RX ins
                                tance
    21  00E1                    UART_Sensor_RX_INT_REG:                      equ 0x0e1  ;RX interrupt address
    22                          
    23  0000                    UART_Sensor_RXBUF_ENABLE:                    equ 0
    24                          
    25                          ; Interrupt control masks
    26  0001                    UART_Sensor_ENABLE_RX_INT:                   equ 0x01
    27  0000                    UART_Sensor_DISABLE_RX_INT:                  equ 0x00
    28  0002                    UART_Sensor_ENABLE_TX_INT:                   equ 0x02
    29  0000                    UART_Sensor_DISABLE_TX_INT:                  equ 0x00
    30                          
    31  0000                    UART_Sensor_INT_MODE_TX_REG_EMPTY:           equ 0x00
    32  0001                    UART_Sensor_INT_MODE_TX_COMPLETE:            equ 0x01
    33                          
    34  0020                    UART_Sensor_RX_IGNORE_BELOW:                 equ 0x20
    35  0010                    UART_Sensor_RX_BUFFER_SIZE:                  equ 0x10
    36  000D                    UART_Sensor_CMD_TERM:                        equ 0xd
    37  0020                    UART_Sensor_DELIMITER:                       equ 0x20
    38  0000                    UART_Sensor_BACKSPACE_ENABLE:                equ 0x0
    39                          
    40                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    41                          ;       WARNING WARNING WARNING
    42                          ; The following equates are for backwards
    43                          ; compatibility only and should not be used
    44                          ; for new designs.
    45                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    46                          
    47                          ;------------------------------------
    48                          ;  Parity masks
    49                          ;------------------------------------
    50  0000                    UART_PARITY_NONE:       equ   00h
    51  0002                    UART_PARITY_EVEN:       equ   02h
    52  0006                    UART_PARITY_ODD:        equ   06h
    53                          
    54                          ;------------------------------------
    55                          ;  TX Status Register masks
    56                          ;------------------------------------
    57  0020                    UART_TX_COMPLETE:       equ   20h
    58  0010                    UART_TX_BUFFER_EMPTY:   equ   10h
    59                          
    60                          ;------------------------------------
    61                          ;  RX Status Register masks
    62                          ;------------------------------------
    63  0010                    UART_RX_ACTIVE:         equ   10h
    64  0008                    UART_RX_COMPLETE:       equ   08h
    65  0080                    UART_RX_PARITY_ERROR:   equ   80h
    66  0040                    UART_RX_OVERRUN_ERROR:  equ   40h
    67  0020                    UART_RX_FRAMING_ERROR:  equ   20h
    68  00E0                    UART_RX_NO_ERROR:       equ   E0h
    69                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    70                          ;             END WARNING
    71                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    72                          
    73                          
    74                          
    75                          ;------------------------------------
    76                          ;  Parity masks
    77                          ;------------------------------------
    78  0000                    UART_Sensor_PARITY_NONE:                equ   00h
    79  0002                    UART_Sensor_PARITY_EVEN:                equ   02h
    80  0006                    UART_Sensor_PARITY_ODD:                 equ   06h
    81                          
    82                          ;------------------------------------
    83                          ;  TX Status Register masks
    84                          ;------------------------------------
    85  0020                    UART_Sensor_TX_COMPLETE:                equ   20h
    86  0010                    UART_Sensor_TX_BUFFER_EMPTY:            equ   10h
    87                          
    88                          ;------------------------------------
    89                          ;  RX Status Register masks
    90                          ;------------------------------------
    91  0010                    UART_Sensor_RX_ACTIVE:                  equ   10h
    92  0008                    UART_Sensor_RX_COMPLETE:                equ   08h
    93  0008                    UART_Sensor_RX_REG_FULL:                equ   08h
    94  0080                    UART_Sensor_RX_PARITY_ERROR:            equ   80h
    95  0040                    UART_Sensor_RX_OVERRUN_ERROR:           equ   40h
    96  0020                    UART_Sensor_RX_FRAMING_ERROR:           equ   20h
    97  00E0                    UART_Sensor_RX_ERROR:                   equ   E0h
    98  0001                    UART_Sensor_RX_ENABLE:                  equ   01h
    99                          
   100  00F0                    UART_Sensor_RX_BUF_ERROR:               equ   F0h  ; Mask for any Rx that may occur.
   101  0010                    UART_Sensor_RX_BUF_OVERRUN:             equ   10h  ; This indicates the software buffer has
   102                                                                                  ; been over run.
   103  0001                    UART_Sensor_RX_BUF_CMDTERM:             equ   01h  ; Command terminator has been received.
   104                          
   105  0001                    UART_Sensor_RX_NO_DATA:                 equ   01h
   106  00E0                    UART_Sensor_RX_NO_ERROR:                equ   E0h
   107                          
   108                          
   109                          ;--------------------------------------------------
   110                          ; Registers Address Constants for UART_Sensor
   111                          ;--------------------------------------------------
   112                          ;---------------------------------
   113                          ;  Registers used by TX
   114                          ;---------------------------------
   115  002B                    UART_Sensor_TX_CONTROL_REG: equ 2bh            ; Control register
   116  0028                    UART_Sensor_TX_SHIFT_REG:   equ 28h               ; TX Shift Register register
   117  0029                    UART_Sensor_TX_BUFFER_REG:  equ 29h               ; TX Buffer Register
   118  0028                    UART_Sensor_TX_FUNC_REG:    equ 28h     ; Function register
   119  0029                    UART_Sensor_TX_INPUT_REG:   equ 29h            ; Input register
   120  002A                    UART_Sensor_TX_OUTPUT_REG:  equ 2ah           ; Output register
   121                          
   122                          ;---------------------------------
   123                          ;  Registers used by RX
   124                          ;---------------------------------
   125  002F                    UART_Sensor_RX_CONTROL_REG: equ 2fh            ; Control register
   126  002C                    UART_Sensor_RX_SHIFT_REG:   equ 2ch               ; RX Shift Register register
   127  002E                    UART_Sensor_RX_BUFFER_REG:  equ 2eh               ; RX Buffer Register
   128  002C                    UART_Sensor_RX_FUNC_REG:    equ 2ch     ; Function register
   129  002D                    UART_Sensor_RX_INPUT_REG:   equ 2dh            ; Input register
   130                          UART_Sensor_RX_OUTPUT_REG:  equ 2eh           ; Output register
      + 002E                    UART_Sensor_RX_OUTPUT_REG	equ	46
      + 3C41                    ; end of file UART_Sensor.inc
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;
     4                          ;;       FILENAME: Memory.inc
     5                          ;;
     6                          ;;    DESCRIPTION: Memory Model and Stack Parameter Definitions for 
     7                          ;;                 CY8C22045 PSoC devices.
     8                          ;;
     9                          ;;  LAST MODIFIED: August 17, 2004
    10                          ;;
    11                          ;;-----------------------------------------------------------------------------
    12                          ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
    13                          ;;*****************************************************************************
    14                          ;;*****************************************************************************
    15                          ;
    16                          ;
    17                          ;  ******** Define Memory Model and Stack parameters ********
    18                          ;
    19  0001                    IMAGECRAFT: equ 1   
    20  0002                    HITECH: equ 2   
    21  0002                    TOOLCHAIN: equ HITECH   
    22  0001                    SYSTEM_LARGE_MEMORY_MODEL: equ 1   
    23  0000                    SYSTEM_SMALL_MEMORY_MODEL: equ 0   
    24  0003                    SYSTEM_STACK_PAGE: equ 3   
    25  0000                    SYSTEM_STACK_PAGE_OFFSET: equ 0   
    26  0002                    SYSTEM_TOOLS: equ 2   
    27  0000                    SYSTEM_IDXPG_TRACKS_STK_PP: equ 0   
    28  0001                    SYSTEM_IDXPG_TRACKS_IDX_PP: equ 1   
    29  0000                    SYSTEM_MULTIPAGE_STACK: equ 0 
    30                          
    31                          
    32                          ;  ******* Function Class Definitions *******
    33                          ;
    34                          ;  These definitions are used to describe RAM access patterns. They provide
    35                          ;  documentation and they control prologue and epilogue macros that perform
    36                          ;  the necessary housekeeping functions for large memory model devices like
    37                          ;  the CY8C22045.
    38                          
    39  0001                    RAM_USE_CLASS_1:               equ 1   ; PUSH, POP & I/O access
    40  0002                    RAM_USE_CLASS_2:               equ 2   ; Indexed address mode on stack page
    41  0004                    RAM_USE_CLASS_3:               equ 4   ; Indexed address mode to any page
    42  0008                    RAM_USE_CLASS_4:               equ 8   ; Direct/Indirect address mode access
    43                          
    44                          ; ******* Hi Tech Specific *******
    45                          ; Turn on the expansion of all macros by default
    46                          IF (TOOLCHAIN & HITECH)
    47                          OPT EXPAND
    48                          ENDIF
    49                          ; ******* Page Pointer Manipulation Macros *******
    50                          ;
    51                          ;  ******* Page Pointer Manipulation Macros *******
    52                          ;
    53                          ;  Most of the following macros are conditionally compiled so they only
    54                          ;  produce code if the large memory model is selected.
    55                          
    56                             ;-----------------------------------------------
    57                             ;  Set Stack Page Macro
    58                             ;-----------------------------------------------
    59                             ;
    60                             ;  DESC: Modify STK_PP in the large or small memory Models.
    61                             ;
    62                             ; INPUT: Constant (e.g., SYSTEM_STACK_PAGE) that specifies the RAM page on
    63                             ;        which stack operations like PUSH and POP store and retrieve their
    64                             ;        data
    65                             ;
    66                             ;  COST: 8 instruction cycles (in LMM only)
    67                          
    68                             macro RAM_SETPAGE_STK( PG_NUMBER )
    69                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    70                                mov reg[STK_PP], @PG_NUMBER
    71                             ENDIF
    72  3C41                       endm
    73                          
    74                             ;-----------------------------------------------
    75                             ;  Set Current Page Macro
    76                             ;-----------------------------------------------
    77                             ;
    78                             ;  DESC: Modify CUR_PP in the large or small memory Models.
    79                             ;
    80                             ; INPUT: Constant value (e.g., >bFoo) for the RAM page number used in
    81                             ;        calculation of effective direct-mode address operands.
    82                             ;
    83                             ;  COST: 8 instruction cycles (in LMM only)
    84                          
    85                             macro RAM_SETPAGE_CUR( PG_NUMBER )
    86                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    87                                mov reg[CUR_PP], @PG_NUMBER
    88                             ENDIF
    89  3C41                       endm
    90                          
    91                             ;-----------------------------------------------
    92                             ;  Set Index Page Macro
    93                             ;-----------------------------------------------
    94                             ;
    95                             ;  DESC: Modify IDX_PP in the large or small emory Models.
    96                             ;
    97                             ; INPUT: Constant value (e.g., >caFoo) for the RAM page number used in
    98                             ;         calculation of effective index-mode address operands.
    99                             ;
   100                             ;  COST: 8 instruction cycles (in LMM only)
   101                          
   102                             macro RAM_SETPAGE_IDX( PG_NUMBER )
   103                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   104                                mov reg[IDX_PP], @PG_NUMBER
   105                             ENDIF
   106  3C41                       endm
   107                          
   108                             ;-----------------------------------------------
   109                             ;  Set MVI Read Page Macro
   110                             ;-----------------------------------------------
   111                             ;
   112                             ;  DESC: Modify MVR_PP in the large or small memory Models.
   113                             ;
   114                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   115                             ;        calculation of indirect address operands used in the
   116                             ;        "mvi A, [pFoo]" instructions.
   117                             ;
   118                             ;  COST: 8 instruction cycles (in LMM only)
   119                          
   120                             macro RAM_SETPAGE_MVR( PG_NUMBER )
   121                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   122                                mov reg[MVR_PP], @PG_NUMBER
   123                             ENDIF
   124  3C41                       endm
   125                          
   126                             ;-----------------------------------------------
   127                             ;  Set MVI Write Page Macro
   128                             ;-----------------------------------------------
   129                             ;
   130                             ;  DESC: Modify MVW_PP in the large or small memory Models.
   131                             ;
   132                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   133                             ;        calculation of indirect address operands used in the
   134                             ;        "mvi [pFoo], A" instructions.
   135                             ;
   136                             ;  COST: 8 instruction cycles (in LMM only)
   137                          
   138                             macro RAM_SETPAGE_MVW( PG_NUMBER )
   139                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   140                                mov reg[MVW_PP], @PG_NUMBER
   141                             ENDIF
   142  3C41                       endm
   143                          
   144                             ;-----------------------------------------------
   145                             ;  Force Index Page Pointer to Stack Page
   146                             ;-----------------------------------------------
   147                             ;
   148                             ;  DESC: Map index-mode operands onto the stack page by modifying IDX_PP.
   149                             ;        See also RAM_LOCK_INDEX_TO_STACKPAGE.
   150                             ;
   151                             ; INPUT: None
   152                             ;
   153                             ;  COST: 8 instruction cycles (in LMM only)
   154                          
   155                             macro RAM_SETPAGE_IDX2STK
   156                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   157                                IF ( SYSTEM_MULTIPAGE_STACK )
   158                                   mov   A, reg[STK_PP]
   159                                   mov   reg[IDX_PP], A
   160                                ELSE
   161                                   RAM_SETPAGE_IDX SYSTEM_STACK_PAGE
   162                                ENDIF
   163                             ENDIF
   164  3C41                       endm
   165                          
   166                             ;-----------------------------------------------
   167                             ;  Change Memory Mode
   168                             ;-----------------------------------------------
   169                             ;
   170                             ;  DESC: Modify FLAG_PAGEMODE bits in the large and small memory Models.
   171                             ;
   172                             ; INPUT: Constant value for PGMODE bitfield of CPU Flag register, F.
   173                             ;        See FLAG_PGMODE_{x} constants in M8C.INC.
   174                             ;
   175                             ;  COST: 8 instruction cycles (in LMM only)
   176                          
   177                             macro RAM_CHANGE_PAGE_MODE( MODE )
   178                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   179                                and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
   180                                or    F,  FLAG_PGMODE_MASK & @MODE
   181                             ENDIF
   182  3C41                       endm
   183                          
   184                             ;-----------------------------------------------
   185                             ;  Set Large Memory Model Native Paging Mode
   186                             ;-----------------------------------------------
   187                             ;
   188                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   189                             ;        paging mode *IFF* a simple "OR" is guaranteed to work---for
   190                             ;        example, in an ISR, when the PGMODE bits have been cleared
   191                             ;        to zero. If a simple "OR" is not guaranteed to work, use
   192                             ;        the slower RAM_RESTORE_NATIVE_PAGING instead.
   193                             ;
   194                             ; INPUT: none
   195                             ;
   196                             ;  COST: 4 instruction cycles (in LMM only)
   197                          
   198                             macro RAM_SET_NATIVE_PAGING
   199                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   200                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   201                                or    F,  FLAG_PGMODE_11b            ; LMM w/ IndexPage<==>StackPage
   202                             ENDIF ;  PGMODE LOCKED
   203                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   204                                or    F,  FLAG_PGMODE_10b            ; LMM with independent IndexPage
   205                             ENDIF ; PGMODE FREE
   206                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   207  3C41                       endm
   208                          
   209                             ;-----------------------------------------------
   210                             ; Restore Large Memory Model Native Paging Mode
   211                             ;-----------------------------------------------
   212                             ;
   213                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   214                             ;        paging mode. Always works because it clears the PGMODE bits
   215                             ;        before OR-ing in the new ones. See RAM_RESTORE_NATIVE_PAGING
   216                             ;        for a faster method.
   217                             ;
   218                             ; INPUT: none
   219                             ;
   220                             ;  COST: 8 instruction cycles (in LMM only)
   221                          
   222                             macro RAM_RESTORE_NATIVE_PAGING
   223                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   224                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   225                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_11b ; LMM w/ IndexPage<==>StackPage
   226                             ENDIF ;  PGMODE LOCKED
   227                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   228                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b ; LMM with independent IndexPage
   229                             ENDIF ; PGMODE FREE
   230                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   231  3C41                       endm
   232                          
   233                             ;-----------------------------------------------
   234                             ; Force indexed addr mode operands to Stack Pg
   235                             ;-----------------------------------------------
   236                             ;
   237                             ;  DESC: Force instructions that use indexed address mode to reference the
   238                             ;        stack page (as defined by STK_PP). This macro sets the "Indexed
   239                             ;        Stack Mode" bit (LSB) of the PGMODE bit field in the CPU Flag
   240                             ;        register, F. (See also RAM_SETPAGE_IDX2STK, above.)
   241                             ;
   242                             ; INPUT: none
   243                             ;
   244                             ;  COST: 4 instruction cycles (in LMM only)
   245                          
   246                             macro RAM_X_POINTS_TO_STACKPAGE
   247                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   248                                or   F, FLAG_PGMODE_01b
   249                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   250  3C41                       endm
   251                          
   252                             ;-----------------------------------------------
   253                             ;  Force indexed addr mode operands to Index Pg
   254                             ;-----------------------------------------------
   255                             ;
   256                             ;  DESC: Permit instructions that use indexed address mode to reference page
   257                             ;        zero or the page pointed to by the IDX_PP register, depending on the
   258                             ;        setting of the MSb (or "Direct Page Mode" bit) of the PGMODE bits
   259                             ;        in the CPU Flag register, F. (This macro clears the PGMODE LSb.)
   260                             ;
   261                             ; INPUT: none
   262                             ;
   263                             ;  COST: 4 instruction cycles (in LMM only)
   264                          
   265                             macro RAM_X_POINTS_TO_INDEXPAGE
   266                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   267                                and  F, ~FLAG_PGMODE_01b
   268                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   269  3C41                       endm
   270                          
   271                             ;-----------------------------------------------
   272                             ;  Function Prologue
   273                             ;-----------------------------------------------
   274                             ;
   275                             ;  Prologue for functions that run in the LMM and SMM.
   276                             ;
   277                          
   278                             macro RAM_PROLOGUE( ACTUAL_CLASS )
   279                          
   280                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   281                             ; Nothing to do
   282                             ENDIF ; RAM_USE_CLASS_1
   283                          
   284                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   285                                IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   286                                   RAM_X_POINTS_TO_STACKPAGE         ; exit native paging mode!
   287                                ENDIF
   288                             ENDIF ; RAM_USE_CLASS_2
   289                          
   290                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   291                                IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   292                                   RAM_X_POINTS_TO_INDEXPAGE         ; exit native paging mode!
   293                                ENDIF
   294                             ENDIF ; RAM_USE_CLASS_3
   295                          
   296                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   297                             ; Nothing to do
   298                             ENDIF ; RAM_USE_CLASS_4
   299                          
   300  3C41                       endm
   301                          
   302                             ;-----------------------------------------------
   303                             ;  Function Epilogue
   304                             ;-----------------------------------------------
   305                             ;
   306                             ;  Prologue for functions that run in the LMM and SMM.
   307                             ;
   308                          
   309                             macro RAM_EPILOGUE( ACTUAL_CLASS )
   310                          
   311                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   312                             ; Nothing to do
   313                             ENDIF ; RAM_USE_CLASS_1
   314                          
   315                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   316                                RAM_RESTORE_NATIVE_PAGING
   317                             ENDIF ; RAM_USE_CLASS_2
   318                          
   319                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   320                                RAM_RESTORE_NATIVE_PAGING
   321                             ENDIF ; RAM_USE_CLASS_3
   322                          
   323                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   324                             ; Nothing to do
   325                             ENDIF ; RAM_USE_CLASS_4
   326                          
   327  3C41                       endm
   328                          
   329                             ;-----------------------------------------------
   330                             ;  Preserve Register
   331                             ;-----------------------------------------------
   332                             ;
   333                             ;  DESC: Preserve a register value on the stack
   334                             ;
   335                             ; INPUT: Name or address of register in I/O Space
   336                             ;        The I/O bank is an implicit parameter. That is, this function will
   337                             ;        Access the I/O bank currently specified by the CPU Flag register.
   338                             ;
   339                             ;  USES: CPU 'A' register
   340                             ;
   341                             ;  COST: 9 instruction cycles
   342                          
   343                             macro REG_PRESERVE( IOReg )
   344                             mov   A, reg[ @IOReg ]
   345                             push  A
   346  3C41                       endm
   347                          
   348                             ;-----------------------------------------------
   349                             ;  Restore Register
   350                             ;-----------------------------------------------
   351                             ;
   352                             ;  DESC: Restore a register value from the stack
   353                             ;
   354                             ; INPUT: Name or address of register in I/O Space
   355                             ;        The I/O bank is an implicit parameter. That is, this function will
   356                             ;        Access the I/O bank currently specified by the CPU Flag register.
   357                             ;
   358                             ;  USES: CPU 'A' register
   359                             ;
   360                             ;  COST: 10 instruction cycles
   361                          
   362                             macro REG_RESTORE( IOReg )
   363                             pop   A
   364                             mov   reg[ @IOReg ], A
   365  3C41                       endm
   366                          
   367                             ;-----------------------------------------------
   368                             ;  Preserve Volatile Page Pointer Registers
   369                             ;-----------------------------------------------
   370                             ;
   371                             ;  DESC: Invoked by ISRs before switching to the LMM mode and calling
   372                             ;        functions that require on it.
   373                             ;
   374                             ; INPUT: none
   375                             ;
   376                             ;  USES: CPU 'A' register
   377                             ;
   378                             ;  COST: 45 instruction cycles (in LMM only)
   379                          
   380                             macro ISR_PRESERVE_PAGE_POINTERS
   381                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   382                                REG_PRESERVE CUR_PP
   383                                REG_PRESERVE IDX_PP
   384                                REG_PRESERVE MVR_PP
   385                                REG_PRESERVE MVW_PP
   386                             ENDIF
   387  3C41                       endm
   388                          
   389                             ;-----------------------------------------------
   390                             ;  Restore Volatile Page Pointer Registers
   391                             ;-----------------------------------------------
   392                             ;
   393                             ;  DESC: Undo for RAM_PRESERVE_PAGE_POINTERS macro. Invoked by ISRs after
   394                             ;        calling functions that run in the LMM mode and before executing
   395                             ;        the RETI instruction.
   396                             ;
   397                             ; INPUT: none
   398                             ;
   399                             ;  USES: CPU 'A' register
   400                             ;
   401                             ;  COST: 50 instruction cycles (in LMM only)
   402                          
   403                             macro ISR_RESTORE_PAGE_POINTERS
   404                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   405                                REG_RESTORE MVW_PP
   406                                REG_RESTORE MVR_PP
   407                                REG_RESTORE IDX_PP
   408                                REG_RESTORE CUR_PP
   409                             ENDIF
   410                             endm
      + 3C41                    
      + 3C41                    ; end of file Memory.inc
     1                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     2                          ;;;
     3                          ;;;  M8C.INC -- Microcontroller Device System Declarations
     4                          ;;;
     5                          ;;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
     6                          ;;;
     7                          ;;;  This file provides address constants, bit field masks and a set of macro
     8                          ;;;  facilities for the Cypress Semiconductor CY8C22045 Microcontroller devices.
     9                          ;;;
    10                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    11                          
    12                          ;;=============================================================================
    13                          ;; Definition of abbreviations used in the descriptions below
    14                          ;;  (RW)   The register or bit supports reads and writes
    15                          ;;  (W)    The register or bit is write-only
    16                          ;;  (R)    The register or bit is read-only
    17                          ;;  (#)    Access to the register is bit specific (see the family datasheet)
    18                          ;;  (RC)   The register or bit can be read, but writing a 0 will clear it,
    19                          ;;         writing a 1 will have no effect.
    20                          ;;=============================================================================
    21                          
    22                          ;;=============================================================================
    23                          ;;      System Registers
    24                          ;;=============================================================================
    25                          
    26                          ;----------------------------
    27                          ;  Flag Register Bit Fields
    28                          ;----------------------------
    29  00C0                    FLAG_PGMODE_MASK:  equ 0C0h     ; Paging control for > 256 bytes of RAM
    30  0000                    FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
    31  0040                    FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
    32  0080                    FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
    33  00C0                    FLAG_PGMODE_3:     equ 0C0h       ; Direct to CUR_PP page, indexed to STK_PP page
    34  0000                    FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
    35  0040                    FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
    36  0080                    FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
    37  00C0                    FLAG_PGMODE_11b:   equ 0C0h       ; Same as PGMODE_3
    38  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    39  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    40  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    41  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    42  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    43                          
    44                          
    45                          ;;=============================================================================
    46                          ;;      Register Space, Bank 0
    47                          ;;=============================================================================
    48                          
    49                          ;------------------------------------------------
    50                          ;  Port Registers
    51                          ;  Note: Also see this address range in Bank 1.
    52                          ;------------------------------------------------
    53                          ; Port 0
    54  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    55  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    56  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    57  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    58                          ; Port 1
    59  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    60  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    61  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    62  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    63                          ; Port 2
    64  0008                    PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
    65  0009                    PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
    66  000A                    PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
    67  000B                    PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
    68                          ; Port 3
    69  000C                    PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
    70  000D                    PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
    71  000E                    PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
    72  000F                    PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
    73                          ; Port 4
    74  0010                    PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
    75  0011                    PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
    76  0012                    PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
    77  0013                    PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
    78                          
    79                          ;------------------------------------------------
    80                          ;  Digital PSoC(tm) block Registers
    81                          ;  Note: Also see this address range in Bank 1.
    82                          ;------------------------------------------------
    83                          ; Digital PSoC block 00, Basic Type C
    84  0020                    DBC00DR0:     equ 20h          ; data register 0                          (#)
    85  0021                    DBC00DR1:     equ 21h          ; data register 1                          (W)
    86  0022                    DBC00DR2:     equ 22h          ; data register 2                          (RW)
    87  0023                    DBC00CR0:     equ 23h          ; control & status register 0              (#)
    88                          
    89                          ; Digital PSoC block 01, Basic Type C
    90  0024                    DBC01DR0:     equ 24h          ; data register 0                          (#)
    91  0025                    DBC01DR1:     equ 25h          ; data register 1                          (W)
    92  0026                    DBC01DR2:     equ 26h          ; data register 2                          (RW)
    93  0027                    DBC01CR0:     equ 27h          ; control & status register 0              (#)
    94                          
    95                          ; Digital PSoC block 02, Communications Type C
    96  0028                    DCC02DR0:     equ 28h          ; data register 0                          (#)
    97  0029                    DCC02DR1:     equ 29h          ; data register 1                          (W)
    98  002A                    DCC02DR2:     equ 2Ah          ; data register 2                          (RW)
    99  002B                    DCC02CR0:     equ 2Bh          ; control & status register 0              (#)
   100                          
   101                          ; Digital PSoC block 03, Communications Type C
   102  002C                    DCC03DR0:     equ 2Ch          ; data register 0                          (#)
   103  002D                    DCC03DR1:     equ 2Dh          ; data register 1                          (W)
   104  002E                    DCC03DR2:     equ 2Eh          ; data register 2                          (RW)
   105  002F                    DCC03CR0:     equ 2Fh          ; control & status register 0              (#)
   106                          
   107                          ; Digital PSoC block 10, Basic Type C
   108  0030                    DBC10DR0:     equ 30h          ; data register 0                          (#)
   109  0031                    DBC10DR1:     equ 31h          ; data register 1                          (W)
   110  0032                    DBC10DR2:     equ 32h          ; data register 2                          (RW)
   111  0033                    DBC10CR0:     equ 33h          ; control & status register 0              (#)
   112                          
   113                          ; Digital PSoC block 11, Basic Type C
   114  0034                    DBC11DR0:     equ 34h          ; data register 0                          (#)
   115  0035                    DBC11DR1:     equ 35h          ; data register 1                          (W)
   116  0036                    DBC11DR2:     equ 36h          ; data register 2                          (RW)
   117  0037                    DBC11CR0:     equ 37h          ; control & status register 0              (#)
   118                          
   119                          ; Digital PSoC block 12, Communications Type C
   120  0038                    DCC12DR0:     equ 38h          ; data register 0                          (#)
   121  0039                    DCC12DR1:     equ 39h          ; data register 1                          (W)
   122  003A                    DCC12DR2:     equ 3Ah          ; data register 2                          (RW)
   123  003B                    DCC12CR0:     equ 3Bh          ; control & status register 0              (#)
   124                          
   125                          ; Digital PSoC block 13, Communications Type C
   126  003C                    DCC13DR0:     equ 3Ch          ; data register 0                          (#)
   127  003D                    DCC13DR1:     equ 3Dh          ; data register 1                          (W)
   128  003E                    DCC13DR2:     equ 3Eh          ; data register 2                          (RW)
   129  003F                    DCC13CR0:     equ 3Fh          ; control & status register 0              (#)
   130                          
   131                          ;-------------------------------------
   132                          ;  Analog Control Registers
   133                          ;-------------------------------------
   134  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
   135  00C0                    AMX_IN_ACI3:          equ C0h    ; MASK: column 3 input mux
   136  0030                    AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
   137  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
   138  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
   139                          
   140  0061                    AMUX_CFG:      equ 61h          ; Analog MUX Configuration
   141  0030                    AMUX_CFG_INTCAP:       equ 30h    ;
   142  000E                    AMUX_CFG_MUXCLK:  	  equ 0Eh	 ;
   143  0001                    AMUX_CFG_EN:		  	  equ 01h	 ;
   144+                         
   145+                         ; old declarations DO NOT USE
   146+ 0061                    AMUXCFG:      equ 61h          ; Analog MUX Configuration
   147+ 0030                    AMUXCFG_INTCAP:       equ 30h    ;
   148  000E                    AMUXCFG_MUXCLK:  	  equ 0Eh	 ;
   149  0001                    AMUXCFG_EN:		  	  equ 01h	 ;
   150                          
   151  0062                    PWM_CR:       equ 62h          ; Pulse-Width Modulator Control
   152  0038                    PWM_CR_HIGH:          equ 38h    ; MASK: PWM high time
   153  0006                    PWM_CR_LOW:           equ 06h	 ; MASK: PWM low time
   154  0001                    PWM_CR_EN:            equ 01h	 ; MASK: Enable/Disable PWM function
   155                          
   156  0063                    ARF_CR:       equ 63h          ; Analog Reference Control
   157                          
   158  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus Register           (#)
   159  0080                    CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
   160  0040                    CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
   161  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
   162  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
   163  0008                    CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
   164  0004                    CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
   165  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
   166  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   167                          
   168  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   169  0020                    CMP_CR1_CLDIS1:       equ 20h    ; MASK: Column 1 comparator output latch
   170  0010                    CMP_CR1_CLDIS0:	      equ 10h    ; MASK: Column 0 comparator output latch
   171                          
   172  0068                    ADC0_CR:      equ 68h          ; Analog Column 0 Configuration
   173  0080                    ADC0_CR_CMPST:        equ 80h    ;
   174  0040                    ADC0_CR_LOREN:        equ 40h    ;
   175  0020                    ADC0_CR_SHEN:         equ 20h    ;
   176  0008                    ADC0_CR_CBSRC:        equ 08h    ;
   177  0004                    ADC0_CR_ADCM:         equ 04h    ;
   178  0001                    ADC0_CR_EN:	          equ 01h    ;
   179                          
   180  0069                    ADC1_CR:      equ 69h          ; Analog Column 1 Configuration
   181  0080                    ADC1_CR_CMPST:        equ 80h    ;
   182  0040                    ADC1_CR_LOREN:        equ 40h    ;
   183  0020                    ADC1_CR_SHEN:         equ 20h    ;
   184  0008                    ADC1_CR_CBSRC:        equ 08h    ;
   185  0004                    ADC1_CR_ADCM:         equ 04h    ;
   186  0001                    ADC1_CR_EN:	          equ 01h    ;
   187                          
   188                          ; Continuous Time PSoC block Type E Row 0 Col 0
   189  0072                    ACE00CR1:     equ 72h          ; Control register 1                       (RW)
   190  0073                    ACE00CR2:     equ 73h          ; Control register 2                       (RW)
   191                          
   192                          ; Continuous Time PSoC block Type E Row 0 Col 1
   193  0076                    ACE01CR1:     equ 76h          ; Control register 1                       (RW)
   194  0077                    ACE01CR2:     equ 77h          ; Control register 2                       (RW)
   195                          
   196                          ; Switched Cap PSoC blockType E Row 1 Col 0
   197  0080                    ASE10CR0:     equ 80h          ; Control register 0                       (RW)
   198                          
   199                          ; Switched Cap PSoC blockType E Row 1 Col 1
   200  0084                    ASE11CR0:     equ 84h          ; Control register 0                       (RW)
   201                          
   202                          ;-----------------------------------------------
   203                          ;  Global General Purpose Data Registers
   204                          ;-----------------------------------------------
   205  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   206  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   207  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   208  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   209                          
   210                          ;------------------------------------------------
   211                          ;  Row Digital Interconnects
   212                          ;
   213                          ;  Note: the following registers are mapped into
   214                          ;  both register bank 0 AND register bank 1.
   215                          ;------------------------------------------------
   216                          
   217  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   218  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   219  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   220  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   221  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   222  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   223  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   224                          
   225  00B8                    RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
   226  00B9                    RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
   227  00BA                    RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
   228+ 00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   229+ 00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   230  00BD                    RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
   231  00BE                    RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
   232                          
   233                          ;-----------------------------------------------
   234                          ;  Ram Page Pointers
   235                          ;-----------------------------------------------
   236  00D0                    CUR_PP:      equ 0D0h           ; Current   Page Pointer
   237  00D1                    STK_PP:      equ 0D1h           ; Stack     Page Pointer
   238  00D3                    IDX_PP:      equ 0D3h           ; Index     Page Pointer
   239  00D4                    MVR_PP:      equ 0D4h           ; MVI Read  Page Pointer
   240  00D5                    MVW_PP:      equ 0D5h           ; MVI Write Page Pointer
   241                          
   242                          ;------------------------------------------------
   243                          ;  I2C Configuration Registers
   244                          ;------------------------------------------------
   245  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   246  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   247  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   248  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   249  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   250  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   251  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   252  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   253  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   254  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   255                          
   256  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   257  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   258  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   259  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   260  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   261  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   262  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   263  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   264  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   265                          
   266  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   267                          
   268  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   269  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   270  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   271  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   272  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   273                          
   274                          ;------------------------------------------------
   275                          ;  System and Global Resource Registers
   276                          ;------------------------------------------------
   277  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   278                                                         ; Use INT_MSK0 bit field masks
   279  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   280                                                         ; Use INT_MSK1 bit field masks
   281  00DC                    INT_CLR2:     equ 0DCh          ; Interrupt Clear Register 2               (RW)
   282                                                         ; Use INT_MSK2 bit field masks
   283  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   284                                                         ; Use INT_MSK3 bit field masks
   285                          
   286  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   287  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   288  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   289                          
   290  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   291  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   292  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   293  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   294  0010                    INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
   295  0008                    INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
   296  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   297  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   298  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   299                          
   300  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   301  0080                    INT_MSK1_DCC13:            equ 80h ; MASK: enable/disable DCC13 block interrupt
   302  0040                    INT_MSK1_DCC12:            equ 40h ; MASK: enable/disable DCC12 block interrupt
   303  0020                    INT_MSK1_DBC11:            equ 20h ; MASK: enable/disable DBC11 block interrupt
   304  0010                    INT_MSK1_DBC10:            equ 10h ; MASK: enable/disable DBC10 block interrupt
   305  0008                    INT_MSK1_DCC03:            equ 08h ; MASK: enable/disable DCC03 block interrupt
   306  0004                    INT_MSK1_DCC02:            equ 04h ; MASK: enable/disable DCC02 block interrupt
   307  0002                    INT_MSK1_DBC01:            equ 02h ; MASK: enable/disable DBC01 block interrupt
   308  0001                    INT_MSK1_DBC00:            equ 01h ; MASK: enable/disable DBC00 block interrupt
   309                          
   310  00DF                    INT_MSK2:     equ DFh			; Custom block Mask Register			   (RW)
   311  0010                    INT_MSK2_SARADC:           equ 10h ; MASK: enable/disable SARADC block interrupt
   312  0020                    INT_MSK2_CSD0:             equ 20h ; MASK: enable/disable CSD0 block interrupt
   313  0040                    INT_MSK2_CSD1:             equ 40h ; MASK: enable/disable CSD1 block interrupt
   314  0080                    INT_MSK2_RTC:              equ 80h ; MASK: enable/disable RTC block interrupt
   315                          
   316  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   317  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   318                          
   319                          ;------------------------------------------------------
   320                          ;  MAC Registers
   321                          ;------------------------------------------------------
   322                          
   323  00E8                    MUL0_X:       equ 0E8h          ; Multiply Input X Register                (W)
   324  00E9                    MUL0_Y:       equ 0E9h          ; Multiply Input Y Register                (W)
   325  00EA                    MUL0_DH:      equ 0EAh          ; Multiply Result High Byte Register       (R)
   326  00EB                    MUL0_DL:      equ 0EBh          ; Multiply Result Low Byte Register        (R)
   327                          
   328  00EC                    ACC0_DR1:     equ 0ECh          ; Accumulator Data Register 1              (RW)
   329  00ED                    ACC0_DR0:     equ 0EDh          ; Accumulator Data Register 0              (RW)
   330  00EE                    ACC0_DR3:     equ 0EEh          ; Accumulator Data Register 3              (RW)
   331  00EF                    ACC0_DR2:     equ 0EFh          ; Accumulator Data Register 2              (RW)
   332                          
   333                          ; DECIMATOR Control Registers
   334  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   335  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   336                          
   337                          ;------------------------------------------------------
   338                          ;  System Status and Control Registers
   339                          ;
   340                          ;  Note: The following registers are mapped into both
   341                          ;        register bank 0 AND register bank 1.
   342                          ;------------------------------------------------------
   343  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   344                                                             ; Use FLAG_ masks defined at top of file
   345                          
   346  00FD                    DAC_D:        equ 0FDh		   ; DAC Data Register                        (RW)
   347                          
   348  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   349  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: flag, Internal Reset Status bit
   350  0010                    CPU_SCR1_SLIMO:         equ 10h	   ; MASK: Slow IMO (internal main osc) enable
   351  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   352  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   353  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   354                          
   355  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   356  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   357  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   358  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   359  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   360  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   361                          
   362                          ;------------------------------------------------------
   363                          ;  Neon Capsense Digital Control Registers
   364                          ;------------------------------------------------------
   365  0050                    CSD0_DR0_L:				equ 50h		; Capsense 0 data low 0				(RW)
   366  0054                    CSD0_DR0_H:				equ 54h		; Capsense 0 data high 0			(RW)
   367  0058                    CSD1_DR0_L:				equ 58h		; Capsense 1 data low 0				(RW)
   368  005C                    CSD1_DR0_H:				equ 5Ch		; Capsense 1 data high 0			(RW)
   369  0051                    CSD0_DR1_L:				equ 51h		; Capsense 0 data low 1				(RW)
   370  0055                    CSD0_DR1_H:				equ 55h		; Capsense 0 data high 1			(RW)
   371  0059                    CSD1_DR1_L:				equ 59h		; Capsense 1 data low 1				(RW)
   372  005D                    CSD1_DR1_H:				equ 5Dh		; Capsense 1 data high 1			(RW)
   373  0052                    CSD0_CNT_L:				equ 52h		; Capsense 0 counter low			(RW)
   374  0056                    CSD0_CNT_H:				equ 56h		; Capsense 0 counter high			(RW)
   375  005A                    CSD1_CNT_L:				equ 5Ah		; Capsense 1 counter low			(RW)
   376  005E                    CSD1_CNT_H:				equ	5Eh		; Capsense 1 counter high			(RW)
   377  0053                    CSD0_CR0:				equ 53h		; Capsense 0 control 0				(RW)
   378  005B                    CSD1_CR0:				equ 5Bh		; Capsense 1 control 0				(RW)
   379  0057                    CSD0_CR1:				equ 57h		; Capsense 0 control 1				(RW)
   380  005F                    CSD1_CR1:				equ 5Fh		; Capsense 1 control 1				(RW)
   381                          
   382                          ;------------------------------------------------------
   383                          ;  Neon Analog Registers
   384                          ;------------------------------------------------------
   385  0065                    ASY_CR:					equ 65h		; Analog Synchronization Control	(RW)
   386  006A                    ADC_DH:					equ 6Ah		; ADC data high						(RW)
   387  006B                    ADC_DL:					equ 6Bh		; ADC data low						(RW)
   388  00C8                    PWMVREF0:				equ C8h		; PWM Voltage Reference 0			(RW)
   389  00C9                    PWMVREF1:				equ C9h		; PWM Voltage Reference 1			(RW)
   390  00CB                    PWMSRC:					equ CBh		; PWM Source						(RW)
   391  00CA                    IDACMODE:				equ CAh		; IDAC Mode							(RW)
   392  00FC                    IDACR_D:				equ FCh		; Analog Mux DAC data 0				(RW)
   393  00FD                    IDACL_D:				equ FDh		; Analog Mux DAC data 1				(RW)
   394                          
   395                          ;------------------------------------------------------
   396                          ;  Neon Digital Registers
   397                          ;------------------------------------------------------
   398  00B7                    RDI0DSM:				equ B7h		; Row Digital Interconnect input select 0	(RW)
   399  00BF                    RDI1DSM:				equ BFh		; Row Digital Interconnect input select 1	(RW)
   400                          
   401                          ;------------------------------------------------------
   402                          ;  Neon Test Registers
   403                          ;------------------------------------------------------
   404  00CC                    TSCR0:					equ CCh		; Tsource 0							(RW)
   405  00CD                    TSCMPH:					equ CDh		; TSCMP high						(RW)
   406  00CE                    TSCMPL:					equ CEh		; TSCMP low							(RW)
   407  00CF                    TSCR1:					equ CFh		; Tsource 1							(RW)
   408                          
   409                          ;;=============================================================================
   410                          ;;      Register Space, Bank 1
   411                          ;;=============================================================================
   412                          
   413                          ;------------------------------------------------
   414                          ;  Port Registers
   415                          ;  Note: Also see this address range in Bank 0.
   416                          ;------------------------------------------------
   417                          ; Port 0
   418  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   419  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   420  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   421  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   422                          
   423                          ; Port 1
   424  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   425  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   426  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   427  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   428                          
   429                          ; Port 2
   430  0008                    PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
   431  0009                    PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
   432  000A                    PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
   433  000B                    PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
   434                          
   435                          ; Port 3
   436  000C                    PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
   437  000D                    PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
   438  000E                    PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
   439  000F                    PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
   440                          
   441                          ; Port 4
   442  0010                    PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
   443  0011                    PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
   444  0012                    PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
   445  0013                    PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
   446                          
   447                          ;------------------------------------------------
   448                          ;  Digital PSoC(tm) block Registers
   449                          ;  Note: Also see this address range in Bank 0.
   450                          ;------------------------------------------------
   451                          
   452                          ; Digital PSoC block 00, Basic Type C
   453  0020                    DBC00FN:      equ 20h          ; Function Register                        (RW)
   454  0021                    DBC00IN:      equ 21h          ;    Input Register                        (RW)
   455  0022                    DBC00OU:      equ 22h          ;   Output Register                        (RW)
   456  0023                    DBC00CR1:     equ 23h          ;   control & status register 1            (RW)
   457                          
   458                          ; Digital PSoC block 01, Basic Type C
   459  0024                    DBC01FN:      equ 24h          ; Function Register                        (RW)
   460  0025                    DBC01IN:      equ 25h          ;    Input Register                        (RW)
   461  0026                    DBC01OU:      equ 26h          ;   Output Register                        (RW)
   462  0027                    DBC01CR1:     equ 27h          ;   control & status register 1            (RW)
   463                          
   464                          ; Digital PSoC block 02, Communications Type C
   465  0028                    DCC02FN:      equ 28h          ; Function Register                        (RW)
   466  0029                    DCC02IN:      equ 29h          ;    Input Register                        (RW)
   467  002A                    DCC02OU:      equ 2Ah          ;   Output Register                        (RW)
   468  002B                    DBC02CR1:     equ 2Bh          ;   control & status register 1            (RW)
   469                          
   470                          ; Digital PSoC block 03, Communications Type C
   471  002C                    DCC03FN:      equ 2Ch          ; Function Register                        (RW)
   472  002D                    DCC03IN:      equ 2Dh          ;    Input Register                        (RW)
   473  002E                    DCC03OU:      equ 2Eh          ;   Output Register                        (RW)
   474  0029                    DBC03CR1:     equ 29h          ;   control & status register 1            (RW)
   475                          
   476                          ; Digital PSoC block 10, Basic Type C
   477  0030                    DBC10FN:      equ 30h          ; Function Register                        (RW)
   478  0031                    DBC10IN:      equ 31h          ;    Input Register                        (RW)
   479  0032                    DBC10OU:      equ 32h          ;   Output Register                        (RW)
   480  0033                    DBC10CR1:     equ 33h          ;   control & status register 1            (RW)
   481                          
   482                          ; Digital PSoC block 11, Basic Type C
   483  0034                    DBC11FN:      equ 34h          ; Function Register                        (RW)
   484  0035                    DBC11IN:      equ 35h          ;    Input Register                        (RW)
   485  0036                    DBC11OU:      equ 36h          ;   Output Register                        (RW)
   486  0037                    DBC11CR1:     equ 37h          ;   control & status register 1            (RW)
   487                          
   488                          ; Digital PSoC block 12, Communications Type C
   489  0038                    DCC12FN:      equ 38h          ; Function Register                        (RW)
   490  0039                    DCC12IN:      equ 39h          ;    Input Register                        (RW)
   491  003A                    DCC12OU:      equ 3Ah          ;   Output Register                        (RW)
   492  003B                    DBC12CR1:     equ 3Bh          ;   control & status register 1            (RW)
   493                          
   494                          ; Digital PSoC block 13, Communications Type C
   495  003C                    DCC13FN:      equ 3Ch          ; Function Register                        (RW)
   496  003D                    DCC13IN:      equ 3Dh          ;    Input Register                        (RW)
   497  003E                    DCC13OU:      equ 3Eh          ;   Output Register                        (RW)
   498  003F                    DBC13CR1:     equ 3Fh          ;   control & status register 1            (RW)
   499                          
   500                          ;------------------------------------------------
   501                          ;  System and Global Resource Registers
   502                          ;  Note: Also see this address range in Bank 0.
   503                          ;------------------------------------------------
   504                          
   505  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   506  00C0                    CLK_CR0_ACOLUMN_3:    equ C0h    ; MASK: Specify clock for analog cloumn
   507  0030                    CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
   508  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   509  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   510                          
   511  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   512  0018                    CLK_CR1_ACLK1:        equ 18h    ; MASK: Digital PSoC block for analog source
   513  0003                    CLK_CR1_ACLK0:        equ 03h    ; MASK: Digital PSoC block for analog source
   514                          
   515  0003                    CLK_CR1_ACLK2:        equ 03h    ; Deprecated do not use
   516                          
   517  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   518  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   519                          
   520  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   521  000F                    AMD_CR0_AMOD0:        equ 0Fh    ; MASK: Modulation source for analog column 0
   522                          
   523  0064                    CMP_GO_EN:    equ 64h          ; Comparator Bus To Global Out Enable      (RW)
   524  0080                    CMP_GO_EN_GOO5:       equ 80h    ; MASK: Selected Col 1 signal to GOO5
   525  0040                    CMP_GO_EN_GOO1:       equ 40h    ; MASK: Selected Col 1 signal to GOO1
   526  0030                    CMP_GO_EN_SEL1:       equ 30h    ; MASK: Column 1 Signal Select
   527  0008                    CMP_GO_EN_GOO4:       equ 08h    ; MASK: Selected Col 0 signal to GOO4
   528  0004                    CMP_GO_EN_GOO0:       equ 04h    ; MASK: Selected Col 0 signal to GOO0
   529  0003                    CMP_GO_EN_SEL0:       equ 03h    ; MASK: Column 0 Signal Select
   530                          
   531  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   532  000F                    AMD_CR1_AMOD1:        equ 0Fh    ; MASK: Modulation ctrl for analog column 1
   533                          
   534  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   535  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   536  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   537                          
   538  006B                    CLK_CR3:      equ 6Bh          ; Analog Clock Source Control Register 3   (RW)
   539  0040                    CLK_CR3_SYS1:         equ 40h    ; MASK: Analog Clock 1 selection
   540  0030                    CLK_CR3_DIVCLK1:      equ 30h    ; MASK: Analog Clock 1 divider
   541  0004                    CLK_CR3_SYS0:         equ 04h    ; MASK: Analog Clock 0 selection
   542  0003                    CLK_CR3_DIVCLK0:      equ 03h    ; MASK: Analog Clock 0 divider
   543                          
   544                          ;------------------------------------------------
   545                          ;  Global Digital Interconnects
   546                          ;------------------------------------------------
   547                          
   548  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   549  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   550  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   551  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   552                          
   553  00A0                    GDI_O_IN_CR:  equ 0A0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   554  00A1                    GDI_E_IN_CR:  equ 0A1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   555  00A2                    GDI_O_OU_CR:  equ 0A2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   556  00A3                    GDI_E_OU_CR:  equ 0A3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   557                          
   558  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   559  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   560                          
   561                          ;------------------------------------------------
   562                          ;  Analog Mux Bus Port Enable Bits
   563                          ;------------------------------------------------
   564  00D8                    MUX_CR0:      equ 0D8h          ; Analog Mux Port 0 Bit Enables Register
   565  00D9                    MUX_CR1:      equ 0D9h          ; Analog Mux Port 1 Bit Enables Register
   566  00DA                    MUX_CR2:      equ 0DAh          ; Analog Mux Port 2 Bit Enables Register
   567  00DB                    MUX_CR3:      equ 0DBh          ; Analog Mux Port 3 Bit Enables Register
   568  00EC                    MUX_CR4:      equ 0ECh          ; Analog Mux Port 4 Bit Enables Register
   569                          
   570                          ;------------------------------------------------
   571                          ;  Clock and System Control Registers
   572                          ;------------------------------------------------
   573                          
   574  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   575  0080                    OSC_GO_EN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   576  0040                    OSC_GO_EN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   577  0020                    OSC_GO_EN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   578  0010                    OSC_GO_EN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   579  0008                    OSC_GO_EN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   580  0004                    OSC_GO_EN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   581  0002                    OSC_GO_EN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   582  0001                    OSC_GO_EN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   583                          
   584  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   585  0003                    OSC_CR4_VC3SEL:       equ 03h    ; MASK: System VC3 Clock source
   586                          
   587  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   588                          
   589  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   590  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   591  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   592  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   593  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   594  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   595  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   596  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   597  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   598  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   599  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   600  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   601  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   602  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   603  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   604  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   605  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   606  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   607                          
   608  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   609  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   610  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   611                          
   612  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   613  0080                    OSC_CR2_PLLGAIN:      equ 80h    ; MASK: High/Low gain
   614  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   615  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   616  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   617                          
   618  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   619  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   620  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   621  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   622  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   623  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   624  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   625  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   626                          
   627  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   628  0008                    VLT_CMP_NOWRITE:      equ 08h    ; MASK: Vcc below Flash Write level
   629  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   630  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   631  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   632                          
   633  00E5                    ADC0_TR:      equ 0E5h          ; ADC Column 0 Trim Register
   634  00E6                    ADC1_TR:      equ 0E6h          ; ADC Column 1 Trim Register
   635                          
   636  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   637  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   638  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   639  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   640                          
   641  00FA                    FLS_PR1:      equ 0FAh          ; Flash Program Register 1                 (RW)
   642  0003                    FLS_PR1_BANK:         equ 03h    ; MASK: Select Active Flash Bank
   643                          
   644  00FD                    DAC_CR0:       equ 0FDh          ; Analog Mux DAC Control Register 0
   645  00DC                    DAC_CR1:       equ 0DCh          ; Analog Mux DAC Control Register 1
   646  0008                    DAC_CR_IRANGE:        equ 08h    ; MASK: Sets the DAC Range low or high
   647  0006                    DAC_CR_OSCMODE:       equ 06h    ; MASK: Defines the reset mode for AMux
   648  0001                    DAC_CR_ENABLE:        equ 01h    ; MASK: Enable/Disable DAC function
   649                          
   650                          ;------------------------------------------------
   651                          ;  I2C Control Registers
   652                          ;------------------------------------------------
   653                          
   654  00AD                    I2C_ADDR:    equ 0ADh          ; I2C Address Register (RW)
   655                          
   656                          ;------------------------------------------------------
   657                          ;  Neon Analog Registers
   658                          ;------------------------------------------------------
   659  0053                    VDAC50CR0:		equ 53h			; V DAC5 control 0				(RW)
   660  0057                    VDAC51CR0:		equ 57h			; V DAC5 control 1				(RW)
   661  00A8                    ADC_CR0:		equ A8h			; ADC control 0					(RW)
   662  00A9                    ADC_CR1:		equ A9h			; ADC control 1					(RW)
   663  00AA                    ADC_CR2:		equ AAh			; ADC control 2					(RW)
   664  00AB                    ADC_CR3TRIM:	equ ABh			; ADC control 3					(RW)
   665  00AC                    ADC_CR4:		equ ACh			; ADC control 4					(RW)
   666  00E7                    VDAC_TRIM:		equ E7h			; V DAC trim					(RW)
   667                          
   668                          ;------------------------------------------------------
   669                          ;  Neon Current Sense CMP Registers
   670                          ;------------------------------------------------------
   671  0050                    CMP0CR1:		equ 50h			; CMP0 control 1				(RW)
   672  0051                    CMP0CR2:		equ 51h			; CMP0 control 2				(RW)
   673  0054                    CMP1CR1:		equ 54h			; CMP1 control 1				(RW)
   674  0055                    CMP1CR2:		equ 55h			; CMP1 control 2				(RW)
   675  0058                    CSCMPCR0:		equ 58h			; CSCMP control 0				(RW)
   676  0059                    CSCMPGOEN:		equ 59h			; CSCMO global out enable		(RW)
   677  005A                    CSLUTCR0:		equ 5Ah			; CSLUT control 0				(RW)
   678  005B                    CMPCOLMUX:		equ 5Bh			; CMP Column Mux				(RW)
   679  005C                    CMPPWMCR:		equ 5Ch			; CMP PWM control				(RW)
   680  005D                    CMPFLTCR:		equ 5Dh			; CMP filter control			(RW)
   681  005E                    CMPCLK1:		equ 5Eh			; CMP clock 1					(RW)
   682  005F                    CMPCLK0:		equ 5Fh			; CMP clock 0					(RW)
   683                          
   684                          ;------------------------------------------------------
   685                          ;  Neon Real Time Clock Registers
   686                          ;------------------------------------------------------
   687  00A4                    RTCH:			equ A4h			; Real time current hour		(RW)
   688  00A5                    RTCM:			equ A5h			; Real time current minute		(RW)
   689  00A6                    RTCS:			equ A6h			; Real time current second		(RW)
   690  00A7                    RTCCR:			equ A7h			; Real time clock control		(RW)
   691                          
   692                          ;------------------------------------------------------
   693                          ;  Analog MUX Config Registers
   694                          ;------------------------------------------------------
   695                          
   696  006A                    AMUX_CFG1:			equ 6Ah  ; Analog MUX Configuration 1
   697  0020                    AMUX_CFG1_GOINVR:	equ 20h  ;
   698  0010                    AMUX_CFG1_GOINVL:  	equ 10h	 ;
   699  000C                    AMUX_CFG1_AMUXMODR:	equ 0Ch	 ;
   700  0003                    AMUX_CFG1_AMUXMODL:	equ 03h	 ;
   701                          
   702                          ;;=============================================================================
   703                          ;;      M8C System Macros
   704                          ;;  These macros should be used when their functions are needed.
   705                          ;;=============================================================================
   706                          
   707                          ;----------------------------------------------------
   708                          ;  Swapping Register Banks
   709                          ;----------------------------------------------------
   710                              macro M8C_SetBank0
   711                              and   F, ~FLAG_XIO_MASK
   712  3C41                        endm
   713                          
   714                              macro M8C_SetBank1
   715                              or    F, FLAG_XIO_MASK
   716  3C41                        endm
   717                          
   718                          ;----------------------------------------------------
   719                          ;  Global Interrupt Enable/Disable
   720                          ;----------------------------------------------------
   721                              macro M8C_EnableGInt
   722                              or    F, FLAG_GLOBAL_IE
   723  3C41                        endm
   724                          
   725                              macro M8C_DisableGInt
   726                              and   F, ~FLAG_GLOBAL_IE
   727  3C41                        endm
   728                          
   729                          ;----------------------------------------------------
   730                          ;  Enable/Disable Interrupt Mask
   731                          ;
   732                          ;  Use the following macros to enable/disable
   733                          ;  bits in the Interrupt mask registers,
   734                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   735                          ;
   736                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   737                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   738                          ;
   739                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   740                          ;        and MASK is the bit set to enable or disable
   741                          ;----------------------------------------------------
   742                          ; Disable Interrupt Bit Mask(s)
   743                              macro M8C_DisableIntMask
   744                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   745  3C41                        endm
   746                          
   747                          ; Enable Interrupt Bit Mask(s)
   748                              macro M8C_EnableIntMask
   749                              or    reg[@0], @1               ; enable specified interrupt enable bit
   750  3C41                        endm
   751                          
   752                          ;----------------------------------------------------
   753                          ;  Clear Posted Interrupt Flag Mask
   754                          ;
   755                          ;  Use the following macros to clear the
   756                          ;  bits in the Interrupt Clear registers,
   757                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   758                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   759                          ;
   760                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   761                          ;        and MASK is the bit set to enable or disable
   762                          ;----------------------------------------------------
   763                              macro M8C_ClearIntFlag
   764                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   765  3C41                        endm
   766                          
   767                          ;----------------------------------------------------
   768                          ;  Power-On Reset & WatchDog Timer Functions
   769                          ;----------------------------------------------------
   770                              macro M8C_EnableWatchDog
   771                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   772  3C41                        endm
   773                          
   774                              macro M8C_ClearWDT
   775                              mov   reg[RES_WDT], 00h
   776  3C41                        endm
   777                          
   778                              macro M8C_ClearWDTAndSleep
   779                              mov   reg[RES_WDT], 38h
   780  3C41                        endm
   781                          
   782                          ;----------------------------------------------------
   783                          ;  Sleep, CPU Stop & Software Reset
   784                          ;----------------------------------------------------
   785                              macro M8C_Sleep
   786                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   787                              ; The next instruction to be executed depends on the state of the
   788                              ; various interrupt enable bits. If some interrupts are enabled
   789                              ; and the global interrupts are disabled, the next instruction will
   790                              ; be the one that follows the invocation of this macro. If global
   791                              ; interrupts are also enabled then the next instruction will be
   792                              ; from the interrupt vector table. If no interrupts are enabled
   793                              ; then the CPU sleeps forever.
   794  3C41                        endm
   795                          
   796                              macro M8C_Stop
   797                              ; In general, you probably don't want to do this, but here's how:
   798                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   799                              ; Next instruction to be executed is located in the interrupt
   800                              ; vector table entry for Power-On Reset.
   801  3C41                        endm
   802                          
   803                              macro M8C_Reset
   804                              ; Restore CPU to the power-on reset state.
   805                              mov A, 0
   806                              SSC
   807                              ; Next non-supervisor instruction will be at interrupt vector 0.
   808  3C41                        endm
   809                          
   810                          ;----------------------------------------------------
   811                          ; ImageCraft Code Compressor Actions
   812                          ;----------------------------------------------------
   813                              ; Suspend Code Compressor
   814                              ; Must not span a RET or RETI instruction
   815                              ; without resuming code compression
   816                              macro Suspend_CodeCompressor
   817                              or   F, 0
   818  3C41                        endm
   819                          
   820                              ; Resume Code Compression
   821                              macro Resume_CodeCompressor
   822                              add  SP, 0
   823  3C41                        endm
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  FILENAME:   UART_SensorINT.asm
     4                          ;;  Version: 5.3, Updated on 2013/5/19 at 10:44:49
     5                          ;;  Generated by PSoC Designer 5.4.2946
     6                          ;;
     7                          ;;  DESCRIPTION:  UART Interrupt Service Routine.
     8                          ;;-----------------------------------------------------------------------------
     9                          ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
    10                          ;;*****************************************************************************
    11                          ;;*****************************************************************************
    12                          
    13                          
    14                          include "UART_Sensor.inc"
    15                          include "memory.inc"
    16                          include "m8c.inc"
    17                          
    18                          ;-----------------------------------------------
    19                          ;  Global Symbols
    20                          ;-----------------------------------------------
    21                          export  _UART_Sensor_TX_ISR
    22                          export  _UART_Sensor_RX_ISR
    23                          
    24                          IF (UART_Sensor_RXBUF_ENABLE)
    25                          export  UART_Sensor_aRxBuffer
    26                          export _UART_Sensor_aRxBuffer
    27                          export  UART_Sensor_bRxCnt
    28                          export _UART_Sensor_bRxCnt
    29                          export  UART_Sensor_fStatus
    30                          export _UART_Sensor_fStatus
    31                          ENDIF
    32                          
    33                          
    34                          ;-----------------------------------------------
    35                          ; Variable Allocation
    36                          ;-----------------------------------------------
    37                          AREA InterruptRAM (RAM, REL, CON)
    38                          
    39                          IF (UART_Sensor_RXBUF_ENABLE)
    40                           UART_Sensor_fStatus:
    41                          _UART_Sensor_fStatus:      BLK  1
    42                           UART_Sensor_bRxCnt:
    43                          _UART_Sensor_bRxCnt:       BLK  1
    44                          AREA UART_Sensor_RAM (RAM, REL, CON)
    45                           UART_Sensor_aRxBuffer:
    46                          _UART_Sensor_aRxBuffer:    BLK UART_Sensor_RX_BUFFER_SIZE
    47                          ENDIF
    48                          
    49                          AREA InterruptRAM (RAM, REL, CON)
    50                          
    51                          ;@PSoC_UserCode_INIT@ (Do not change this line.)
    52                          ;---------------------------------------------------
    53                          ; Insert your custom declarations below this banner
    54                          ;---------------------------------------------------
    55                          
    56                          ;------------------------
    57                          ;  Includes
    58                          ;------------------------
    59                          
    60                          
    61                          ;------------------------
    62                          ;  Constant Definitions
    63                          ;------------------------
    64                          
    65                          
    66                          ;------------------------
    67                          ; Variable Allocation
    68                          ;------------------------
    69                          
    70                          
    71                          ;---------------------------------------------------
    72                          ; Insert your custom declarations above this banner
    73                          ;---------------------------------------------------
    74                          ;@PSoC_UserCode_END@ (Do not change this line.)
    75                          
    76                          
    77                          AREA UserModules (ROM, REL, CON)
    78                          
    79                          ;-----------------------------------------------------------------------------
    80                          ;  FUNCTION NAME: _UART_Sensor_TX_ISR
    81                          ;
    82                          ;  DESCRIPTION:
    83                          ;     UART TX interrupt handler for instance UART_Sensor.
    84                          ;
    85                          ;     This is a place holder function.  If the user requires use of an interrupt
    86                          ;     handler for this function, then place code where specified.
    87                          ;-----------------------------------------------------------------------------
    88                          
    89  304F                    _UART_Sensor_TX_ISR:
    90                             ;@PSoC_UserCode_BODY_1@ (Do not change this line.)
    91                             ;---------------------------------------------------
    92                             ; Insert your custom assembly code below this banner
    93                             ;---------------------------------------------------
    94                             ;   NOTE: interrupt service routines must preserve
    95                             ;   the values of the A and X CPU registers.
    96                             
    97                             ;---------------------------------------------------
    98                             ; Insert your custom assembly code above this banner
    99                             ;---------------------------------------------------
   100                             
   101                             ;---------------------------------------------------
   102                             ; Insert a lcall to a C function below this banner
   103                             ; and un-comment the lines between these banners
   104                             ;---------------------------------------------------
   105                             
   106                             ;PRESERVE_CPU_CONTEXT
   107                             ;lcall _My_C_Function
   108                             ;RESTORE_CPU_CONTEXT
   109                             
   110                             ;---------------------------------------------------
   111                             ; Insert a lcall to a C function above this banner
   112                             ; and un-comment the lines between these banners
   113                             ;---------------------------------------------------
   114                             ;@PSoC_UserCode_END@ (Do not change this line.)
   115  304F  7E                   reti
   116                          
   117                          
   118                          ;-----------------------------------------------------------------------------
   119                          ;  FUNCTION NAME: _UART_Sensor_RX_ISR
   120                          ;
   121                          ;  DESCRIPTION:
   122                          ;     UART RX interrupt handler for instance UART_Sensor.
   123                          ;     This ISR handles the background processing of received characters if
   124                          ;     the buffer is enabled.
   125                          ;
   126                          ;
   127                          ;  The following assumes that the RX buffer feature has been enabled.
   128                          ;
   129                          ;  SIDE EFFECTS:
   130                          ;     There are 3 posible errors that may occur with the serial port.
   131                          ;      1) Parity Error
   132                          ;      2) Framing Error
   133                          ;      3) OverRun Error
   134                          ;
   135                          ;  This user module check for parity and framing error.  If either of these
   136                          ;  two errors are detected, the data is read and ignored.  When an overRun
   137                          ;  error occurs, the last byte was lost, but the current byte is valid.  For
   138                          ;  this reason this error is ignored at this time.  Code could be added to
   139                          ;  this ISR to set a flag if an error condition occurs.
   140                          ;
   141                          ;  THEORY of OPERATION:
   142                          ;     When using the RX buffer feature, the ISR collects received characters
   143                          ;     in a buffer until the user defined command terminator is detected.  After
   144                          ;     the command terminator is detected, the command bit is set and all other
   145                          ;     characters will be ignored until the command bit is reset.  Up to
   146                          ;     buffer_size - 1 characters will be collected waiting for a command
   147                          ;     terminator.  After that, the characters will be discarded, although
   148                          ;     a command determinator will still cause the command bit to be set.
   149                          ;
   150                          ;-----------------------------------------------------------------------------
   151  3050                    _UART_Sensor_RX_ISR:
   152                          
   153                             ;@PSoC_UserCode_BODY_2@ (Do not change this line.)
   154                             ;---------------------------------------------------
   155                             ; Insert your custom assembly code below this banner
   156                             ;---------------------------------------------------
   157                             ;   NOTE: interrupt service routines must preserve
   158                             ;   the values of the A and X CPU registers.
   159                             
   160                             ;---------------------------------------------------
   161                             ; Insert your custom assembly code above this banner
   162                             ;---------------------------------------------------
   163                             
   164                             ;---------------------------------------------------
   165                             ; Insert a lcall to a C function below this banner
   166                             ; and un-comment the lines between these banners
   167                             ;---------------------------------------------------
   168                             
   169                             ;PRESERVE_CPU_CONTEXT
   170                             ;lcall _My_C_Function
   171                             ;RESTORE_CPU_CONTEXT
   172                             
   173                             ;---------------------------------------------------
   174                             ; Insert a lcall to a C function above this banner
   175                             ; and un-comment the lines between these banners
   176                             ;---------------------------------------------------
   177                             ;@PSoC_UserCode_END@ (Do not change this line.)
   178                          
   179                          IF (UART_Sensor_RXBUF_ENABLE)
   180                             push A
   181                             push X
   182                             
   183                             IF SYSTEM_LARGE_MEMORY_MODEL
   184                                REG_PRESERVE IDX_PP
   185                             ENDIF
   186                             
   187                             mov  X,[UART_Sensor_bRxCnt]                             ; Load X with byte counter
   188                             mov  A,REG[UART_Sensor_RX_CONTROL_REG]                  ; Read the control register
   189                             push A                                                  ; Store copy for later test
   190                                                                                     ; IF real RX interrupt
   191                             and  A,UART_Sensor_RX_REG_FULL                          ; Did really really get an IRQ
   192                             jnz  .UARTRX_ReadRx                                     ; Data ready, go get it
   193                             pop  A                                                  ; Restore stack
   194                             jmp  .RESTORE_IDX_PP
   195                          
   196                          .UARTRX_ReadRx:
   197                             pop  A                                                  ; Restore status flags
   198                                                                                     ; IF there is no error, get data
   199                                                                                     ; Check for parity or framing error
   200                             and  A,UART_Sensor_RX_ERROR
   201                             jz   .UARTRX_NO_ERROR                                   ; If there is not an Error go read data
   202                          
   203                             or   [UART_Sensor_fStatus],A                            ; Set error flags (parity,framing,overrun
                                ) bits
   204                             tst  REG[UART_Sensor_RX_BUFFER_REG], 0x00               ; Read the data buffer to clear it.
   205                             and  A,UART_Sensor_RX_FRAMING_ERROR                     ; Check for framing error special case
   206                             jz   .RESTORE_IDX_PP                                    ; Not framing error, all done
   207                          
   208                                                                                     ; Disable and re-enable RX to reset after
   209                                                                                     ; framing error.
   210                             and   REG[UART_Sensor_RX_CONTROL_REG], ~UART_Sensor_RX_ENABLE   ; Disable RX
   211                             or    REG[UART_Sensor_RX_CONTROL_REG],  UART_Sensor_RX_ENABLE   ; Enable RX
   212                             jmp  .RESTORE_IDX_PP                                    ; Done with framing error, leave.
   213                          
   214                          
   215                          .UARTRX_NO_ERROR:
   216                             mov  A,REG[UART_Sensor_RX_BUFFER_REG ]                  ; Read the data buffer
   217                          
   218                                                                                     ; IF buffer not full
   219                             tst  [UART_Sensor_fStatus],UART_Sensor_RX_BUF_CMDTERM     ; Check for buffer full
   220                             jnz  .RESTORE_IDX_PP                                    ; All done
   221                          
   222                             cmp  A,UART_Sensor_CMD_TERM                             ; Check for End of command
   223                             jnz  .UARTRX_CHK_BACKSPACE
   224                             or   [UART_Sensor_fStatus],UART_Sensor_RX_BUF_CMDTERM   ; Set command ready bit
   225                          
   226                          
   227                          
   228                             RAM_SETPAGE_IDX >UART_Sensor_aRxBuffer
   229                             RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
   230                             mov  [X + UART_Sensor_aRxBuffer],00h                    ; Zero out last data
   231                             RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
   232                             jmp  .RESTORE_IDX_PP
   233                          
   234                          .UARTRX_CHK_BACKSPACE:                                     ; 
   235                          IF(UART_Sensor_BACKSPACE_ENABLE)                           ; Enable if backspace/delete mode
   236                             cmp  A,UART_Sensor_BACKSPACE_ENABLE                     ; Check for backspace character
   237                             jnz  .UARTRX_IGNORE                                     ; If not, skip the backspace stuff
   238                             cmp  [UART_Sensor_bRxCnt],00h                           ; Check if buffer empty
   239                             jz   .RESTORE_IDX_PP                                    ; 
   240                             dec  [UART_Sensor_bRxCnt]                               ; Decrement buffer count by one.
   241                             jmp  .RESTORE_IDX_PP
   242                          ENDIF                                                      ; 
   243                          
   244                          .UARTRX_IGNORE:
   245                          IF(UART_Sensor_RX_IGNORE_BELOW)                            ; Ignore charaters below this value
   246                             cmp  A,UART_Sensor_RX_IGNORE_BELOW                      ; If ignore char is set to 0x00, do not
   247                             jc   .RESTORE_IDX_PP                                    ; ignore any characters.
   248                          ENDIF
   249                          
   250                          .UARTRX_CHK_OVFL:                                          ; Check for MAX String here
   251                          	
   252                             RAM_SETPAGE_IDX >UART_Sensor_aRxBuffer                  ;   using idexed address mode
   253                             cmp  [UART_Sensor_bRxCnt],(UART_Sensor_RX_BUFFER_SIZE - 1)
   254                             jc   .UARTRX_ISR_GETDATA
   255                             RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
   256                             mov  [X + UART_Sensor_aRxBuffer],00h                    ; Zero out last data in the buffer
   257                             RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
   258                             or   [UART_Sensor_fStatus],UART_Sensor_RX_BUF_OVERRUN   ; Set error flags (parity,framing,overrun
                                ) bits
   259                             jmp  .RESTORE_IDX_PP
   260                          
   261                          .UARTRX_ISR_GETDATA:                                       ; IF input data == "CR", then end of comm
                                and
   262                                                                                     ; X is already loaded with pointer
   263                             RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
   264                             mov  [X+UART_Sensor_aRxBuffer],A                        ; store data in array
   265                             RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
   266                             inc  X                                                  ; Inc the pointer
   267                             mov  [UART_Sensor_bRxCnt],X                             ; Restore the pointer
   268                                                                                     ; ENDIF max string size
   269                          .RESTORE_IDX_PP:
   270                             IF SYSTEM_LARGE_MEMORY_MODEL
   271                                REG_RESTORE IDX_PP
   272                             ENDIF
   273                          
   274                          .END_UARTRX_ISR:
   275                             pop  X
   276                             pop  A
   277                          
   278                          ENDIF
   279                          
   280  3050                    UART_Sensor_RX_ISR_END:
   281  3050  7E                   reti
HI-TECH Software Macro Assembler (PSoC MCU) V9.61
Symbol Table                                                                                               Fri Jun 12 09:25:11 2015
                           HITECH 0002                          TOOLCHAIN 0002                _UART_Sensor_RX_ISR 3050  
              _UART_Sensor_TX_ISR 304F             UART_Sensor_RX_ISR_END 3050           UART_Sensor_RXBUF_ENABLE 0000  
HI-TECH Software Macro Assembler (PSoC MCU) V9.61
                                                                                                           Fri Jun 12 09:25:12 2015
     1                          ;  Generated by PSoC Designer 5.4.2946
     2                          ;
     3                          ;=============================================================================
     4                          ;  FILENAME:   GlobalParams.inc
     5                          ;  DATE:       27 September 2004
     6                          ;
     7                          ;  DESCRIPTION:
     8                          ;  Constants describing many of the global parameter settings.
     9                          ;  This file contains equates to support oscillator register initialization
    10                          ;  for the CY8C22345
    11                          ;
    12                          ;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
    13                          ;
    14                          ; NOTES:
    15                          ; Do not modify this file. It is generated by PSoC Designer each time the
    16                          ; generate application function is run. The values of the parameters in this
    17                          ; file can be modified by changing the values of the global parameters in the
    18                          ; device editor.
    19                          ;=============================================================================
    20                          ;
    21                          
    22  0003                    CPU_CLOCK:				equ	3h	;CPU clock value
    23  0007                    CPU_CLOCK_MASK:			equ	7h	;CPU clock mask
    24  0003                    CPU_CLOCK_JUST:			equ	3h	;CPU clock value justified
    25  0000                    SELECT_32K:				equ	0h		;32K select value
    26  0080                    SELECT_32K_MASK:		equ	80h		;32K select mask
    27  0000                    SELECT_32K_JUST:		equ	0h		;32K select value justified
    28  0000                    PLL_MODE:				equ	0h		;PLL mode value
    29  0040                    PLL_MODE_MASK:			equ	40h		;PLL mode mask
    30  0000                    PLL_MODE_JUST:			equ	0h		;PLL mode value justified
    31                          
    32  0002                    SLEEP_TIMER:			equ	2h		;Sleep Timer value
    33  0018                    SLEEP_TIMER_MASK:		equ	18h		;Sleep Timer mask
    34  0010                    SLEEP_TIMER_JUST:		equ	10h		;Sleep Timer value justified
    35                          
    36  0000                    SLEEP_TIMER2:			equ	0h		;Sleep Extend value
    37  0010                    SLEEP_TIMER_MASK2:		equ	10h		;Sleep Extend mask
    38  0000                    SLEEP_TIMER_JUST2:		equ	0h		;Sleep Extend value justified
    39                          
    40  0001                    SWITCH_MODE_PUMP:		equ	1h	;Switch Mode Pump setting
    41  0080                    SWITCH_MODE_PUMP_MASK:	equ	80h	;Switch Mode Pump mask
    42  0080                    SWITCH_MODE_PUMP_JUST:	equ	80h	;Switch Mode Pump justified
    43  0000                    LVD_TBEN:               equ 0   ; Low Voltage Throttle-back enable value
    44  0008                    LVD_TBEN_MASK:          equ 8  ; Low Voltage Throttle-back enable mask
    45  0000                    LVD_TBEN_JUST:          equ 0  ; Low Voltage Throttle-back enable justified
    46  0007                    TRIP_VOLTAGE:			equ	7h   ;Trip Voltage value
    47  0007                    TRIP_VOLTAGE_MASK:      equ 7h  ;Trip Voltage mask
    48  0007                    TRIP_VOLTAGE_JUST:      equ 7h  ;Trip Voltage justified
    49                                                        
    50  0010                    POWER_SETTING:			equ	10h
    51  0010                    POWER_SET_5V0:          equ 10h  ; MASK for 5.0V operation, fast and slow 
    52  0010                    POWER_SET_5V0_24MHZ:    equ 10h  ; Power Setting value for 5.0V fast      
    53  0011                    POWER_SET_5V0_6MHZ:     equ 11h  ; Power Setting value for 5.0V slow      
    54  0008                    POWER_SET_3V3:          equ 08h  ; MASK for 3.3V operation, fast and slow 
    55  0008                    POWER_SET_3V3_24MHZ:    equ 08h	 ; Power Setting value for 3.3V fast      
    56  0009                    POWER_SET_3V3_6MHZ:     equ 09h	 ; Power Setting value for 3.3V slow      
    57  0006                    POWER_SET_2V7:          equ 06h  ; MASK for 2.7V operation, fast and slow
    58  0004                    POWER_SET_2V7_12MHZ:    equ 04h	 ; MASK for 2.7V, 12MHZ operation
    59  0002                    POWER_SET_2V7_6MHZ:     equ 02h	 ; MASK for 2.7V,  6MHZ operation
    60  0001                    POWER_SET_SLOW_IMO:     equ 01h  ; MASK for slow Internal Main Oscillator (IMO) 
    61                          
    62  0001                    COMM_RX_PRESENT:		equ	1	;1 = TRUE
    63  0001                    WATCHDOG_ENABLE:		equ 1	;Watchdog Enable 1 = Enable
    64                          
    65  0007                    CLOCK_DIV_VC1:			equ	7h	;VC1 clock divider
    66  00F0                    CLOCK_DIV_VC1_MASK:		equ	f0h	;VC1 clock divider mask
    67  0070                    CLOCK_DIV_VC1_JUST:		equ	70h	;VC1 clock divider justified
    68  000F                    CLOCK_DIV_VC2:			equ	fh	;VC2 clock divider
    69  000F                    CLOCK_DIV_VC2_MASK:		equ	fh	;VC2 clock divider mask
    70  000F                    CLOCK_DIV_VC2_JUST:		equ	fh	;VC2 clock divider justified
    71  0001                    CLOCK_INPUT_VC3:		equ	1h	;VC3 clock source
    72  0003                    CLOCK_INPUT_VC3_MASK:	equ	3h	;VC3 clock source mask
    73  0001                    CLOCK_INPUT_VC3_JUST:	equ	1h	;VC3 clock source justified
    74  0026                    CLOCK_DIV_VC3:			equ	26h	;VC3 clock divider
    75  00FF                    CLOCK_DIV_VC3_MASK:		equ	ffh	;VC3 clock divider mask
    76  0026                    CLOCK_DIV_VC3_JUST:		equ	26h	;VC3 clock divider justified
    77  0000                    SYSCLK_SOURCE:				equ	(0h | 0h)	;SysClk Source setting
    78  0006                    SYSCLK_SOURCE_MASK:			equ	(4h | 2h)	;SysClk Source setting mask
    79  0000                    SYSCLK_SOURCE_JUST:			equ	(0h | 0h)	;SysClk Source setting justified
    80  0000                    SYSCLK_2_DISABLE:				equ	0h	;SysClk*2 Disable setting
    81  0001                    SYSCLK_2_DISABLE_MASK:			equ	1h	;SysClk*2 Disable setting mask
    82  0000                    SYSCLK_2_DISABLE_JUST:			equ	0h	;SysClk*2 Disable setting justified
    83                          ;
    84                          ; register initial values
    85                          ;
    86  0000                    ANALOG_IO_CONTROL:		equ 0h	;Analog IO Control register (ABF_CR)
    87  0011                    PORT_0_GLOBAL_SELECT:	equ 11h	;Port 0 global select register (PRT0GS)
    88  00FE                    PORT_0_DRIVE_0:			equ feh	;Port 0 drive mode 0 register (PRT0DM0)
    89  0001                    PORT_0_DRIVE_1:			equ 1h	;Port 0 drive mode 1 register (PRT0DM1)
    90  0000                    PORT_0_DRIVE_2:			equ 0h	;Port 0 drive mode 2 register (PRT0DM2)
    91  0000                    PORT_0_INTENABLE:		equ 0h	;Port 0 interrupt enable register (PRT0IE)
    92  0000                    PORT_0_INTCTRL_0:		equ 0h	;Port 0 interrupt control 0 register (PRT0IC0)
    93  0000                    PORT_0_INTCTRL_1:		equ 0h	;Port 0 interrupt control 1 register (PRT0IC1)
    94  0000                    PORT_1_GLOBAL_SELECT:	equ 0h	;Port 1 global select register (PRT1GS)
    95  00A0                    PORT_1_DRIVE_0:			equ a0h	;Port 1 drive mode 0 register (PRT1DM0)
    96  00FF                    PORT_1_DRIVE_1:			equ ffh	;Port 1 drive mode 1 register (PRT1DM1)
    97  00FF                    PORT_1_DRIVE_2:			equ ffh	;Port 1 drive mode 2 register (PRT1DM2)
    98  0000                    PORT_1_INTENABLE:		equ 0h	;Port 1 interrupt enable register (PRT1IE)
    99  0000                    PORT_1_INTCTRL_0:		equ 0h	;Port 1 interrupt control 0 register (PRT1IC0)
   100  0000                    PORT_1_INTCTRL_1:		equ 0h	;Port 1 interrupt control 1 register (PRT1IC1)
   101  0019                    PORT_2_GLOBAL_SELECT:	equ 19h	;Port 2 global select register (PRT2GS)
   102  0009                    PORT_2_DRIVE_0:			equ 9h	;Port 2 drive mode 0 register (PRT2DM0)
   103  00F6                    PORT_2_DRIVE_1:			equ f6h	;Port 2 drive mode 1 register (PRT2DM1)
   104  00E6                    PORT_2_DRIVE_2:			equ e6h	;Port 2 drive mode 2 register (PRT2DM2)
   105  0000                    PORT_2_INTENABLE:		equ 0h	;Port 2 interrupt enable register (PRT2IE)
   106  0000                    PORT_2_INTCTRL_0:		equ 0h	;Port 2 interrupt control 0 register (PRT2IC0)
   107  0000                    PORT_2_INTCTRL_1:		equ 0h	;Port 2 interrupt control 1 register (PRT2IC1)
   108  0000                    PORT_3_GLOBAL_SELECT:	equ 0h	;Port 3 global select register (PRT3GS)
   109  0000                    PORT_3_DRIVE_0:			equ 0h	;Port 3 drive mode 0 register (PRT3DM0)
   110  0000                    PORT_3_DRIVE_1:			equ 0h	;Port 3 drive mode 1 register (PRT3DM1)
   111  0000                    PORT_3_DRIVE_2:			equ 0h	;Port 3 drive mode 2 register (PRT3DM2)
   112  0000                    PORT_3_INTENABLE:		equ 0h	;Port 3 interrupt enable register (PRT3IE)
   113  0000                    PORT_3_INTCTRL_0:		equ 0h	;Port 3 interrupt control 0 register (PRT3IC0)
   114                          PORT_3_INTCTRL_1:		equ 0h	;Port 3 interrupt control 1 register (PRT3IC1)
      + 0000                    PORT_3_INTCTRL_1	equ	0
      + 3C41                    ; end of file GlobalParams.inc
     1                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     2                          ;;;
     3                          ;;;  M8C.INC -- Microcontroller Device System Declarations
     4                          ;;;
     5                          ;;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
     6                          ;;;
     7                          ;;;  This file provides address constants, bit field masks and a set of macro
     8                          ;;;  facilities for the Cypress Semiconductor CY8C22045 Microcontroller devices.
     9                          ;;;
    10                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    11                          
    12                          ;;=============================================================================
    13                          ;; Definition of abbreviations used in the descriptions below
    14                          ;;  (RW)   The register or bit supports reads and writes
    15                          ;;  (W)    The register or bit is write-only
    16                          ;;  (R)    The register or bit is read-only
    17                          ;;  (#)    Access to the register is bit specific (see the family datasheet)
    18                          ;;  (RC)   The register or bit can be read, but writing a 0 will clear it,
    19                          ;;         writing a 1 will have no effect.
    20                          ;;=============================================================================
    21                          
    22                          ;;=============================================================================
    23                          ;;      System Registers
    24                          ;;=============================================================================
    25                          
    26                          ;----------------------------
    27                          ;  Flag Register Bit Fields
    28                          ;----------------------------
    29  00C0                    FLAG_PGMODE_MASK:  equ 0C0h     ; Paging control for > 256 bytes of RAM
    30  0000                    FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
    31  0040                    FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
    32  0080                    FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
    33  00C0                    FLAG_PGMODE_3:     equ 0C0h       ; Direct to CUR_PP page, indexed to STK_PP page
    34  0000                    FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
    35  0040                    FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
    36  0080                    FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
    37  00C0                    FLAG_PGMODE_11b:   equ 0C0h       ; Same as PGMODE_3
    38  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    39  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    40  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    41  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    42  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    43                          
    44                          
    45                          ;;=============================================================================
    46                          ;;      Register Space, Bank 0
    47                          ;;=============================================================================
    48                          
    49                          ;------------------------------------------------
    50                          ;  Port Registers
    51                          ;  Note: Also see this address range in Bank 1.
    52                          ;------------------------------------------------
    53                          ; Port 0
    54  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    55  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    56  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    57  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    58                          ; Port 1
    59  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    60  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    61  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    62  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    63                          ; Port 2
    64  0008                    PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
    65  0009                    PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
    66  000A                    PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
    67  000B                    PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
    68                          ; Port 3
    69  000C                    PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
    70  000D                    PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
    71  000E                    PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
    72  000F                    PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
    73                          ; Port 4
    74  0010                    PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
    75  0011                    PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
    76  0012                    PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
    77  0013                    PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
    78                          
    79                          ;------------------------------------------------
    80                          ;  Digital PSoC(tm) block Registers
    81                          ;  Note: Also see this address range in Bank 1.
    82                          ;------------------------------------------------
    83                          ; Digital PSoC block 00, Basic Type C
    84  0020                    DBC00DR0:     equ 20h          ; data register 0                          (#)
    85  0021                    DBC00DR1:     equ 21h          ; data register 1                          (W)
    86  0022                    DBC00DR2:     equ 22h          ; data register 2                          (RW)
    87  0023                    DBC00CR0:     equ 23h          ; control & status register 0              (#)
    88                          
    89                          ; Digital PSoC block 01, Basic Type C
    90  0024                    DBC01DR0:     equ 24h          ; data register 0                          (#)
    91  0025                    DBC01DR1:     equ 25h          ; data register 1                          (W)
    92  0026                    DBC01DR2:     equ 26h          ; data register 2                          (RW)
    93  0027                    DBC01CR0:     equ 27h          ; control & status register 0              (#)
    94                          
    95                          ; Digital PSoC block 02, Communications Type C
    96  0028                    DCC02DR0:     equ 28h          ; data register 0                          (#)
    97  0029                    DCC02DR1:     equ 29h          ; data register 1                          (W)
    98  002A                    DCC02DR2:     equ 2Ah          ; data register 2                          (RW)
    99  002B                    DCC02CR0:     equ 2Bh          ; control & status register 0              (#)
   100                          
   101                          ; Digital PSoC block 03, Communications Type C
   102  002C                    DCC03DR0:     equ 2Ch          ; data register 0                          (#)
   103  002D                    DCC03DR1:     equ 2Dh          ; data register 1                          (W)
   104  002E                    DCC03DR2:     equ 2Eh          ; data register 2                          (RW)
   105  002F                    DCC03CR0:     equ 2Fh          ; control & status register 0              (#)
   106                          
   107                          ; Digital PSoC block 10, Basic Type C
   108  0030                    DBC10DR0:     equ 30h          ; data register 0                          (#)
   109  0031                    DBC10DR1:     equ 31h          ; data register 1                          (W)
   110  0032                    DBC10DR2:     equ 32h          ; data register 2                          (RW)
   111  0033                    DBC10CR0:     equ 33h          ; control & status register 0              (#)
   112                          
   113                          ; Digital PSoC block 11, Basic Type C
   114  0034                    DBC11DR0:     equ 34h          ; data register 0                          (#)
   115  0035                    DBC11DR1:     equ 35h          ; data register 1                          (W)
   116  0036                    DBC11DR2:     equ 36h          ; data register 2                          (RW)
   117  0037                    DBC11CR0:     equ 37h          ; control & status register 0              (#)
   118                          
   119                          ; Digital PSoC block 12, Communications Type C
   120  0038                    DCC12DR0:     equ 38h          ; data register 0                          (#)
   121  0039                    DCC12DR1:     equ 39h          ; data register 1                          (W)
   122  003A                    DCC12DR2:     equ 3Ah          ; data register 2                          (RW)
   123  003B                    DCC12CR0:     equ 3Bh          ; control & status register 0              (#)
   124                          
   125                          ; Digital PSoC block 13, Communications Type C
   126  003C                    DCC13DR0:     equ 3Ch          ; data register 0                          (#)
   127  003D                    DCC13DR1:     equ 3Dh          ; data register 1                          (W)
   128  003E                    DCC13DR2:     equ 3Eh          ; data register 2                          (RW)
   129  003F                    DCC13CR0:     equ 3Fh          ; control & status register 0              (#)
   130                          
   131                          ;-------------------------------------
   132                          ;  Analog Control Registers
   133                          ;-------------------------------------
   134  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
   135  00C0                    AMX_IN_ACI3:          equ C0h    ; MASK: column 3 input mux
   136  0030                    AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
   137  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
   138  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
   139                          
   140  0061                    AMUX_CFG:      equ 61h          ; Analog MUX Configuration
   141  0030                    AMUX_CFG_INTCAP:       equ 30h    ;
   142  000E                    AMUX_CFG_MUXCLK:  	  equ 0Eh	 ;
   143  0001                    AMUX_CFG_EN:		  	  equ 01h	 ;
   144                          
   145                          ; old declarations DO NOT USE
   146  0061                    AMUXCFG:      equ 61h          ; Analog MUX Configuration
   147  0030                    AMUXCFG_INTCAP:       equ 30h    ;
   148  000E                    AMUXCFG_MUXCLK:  	  equ 0Eh	 ;
   149  0001                    AMUXCFG_EN:		  	  equ 01h	 ;
   150                          
   151  0062                    PWM_CR:       equ 62h          ; Pulse-Width Modulator Control
   152  0038                    PWM_CR_HIGH:          equ 38h    ; MASK: PWM high time
   153  0006                    PWM_CR_LOW:           equ 06h	 ; MASK: PWM low time
   154  0001                    PWM_CR_EN:            equ 01h	 ; MASK: Enable/Disable PWM function
   155                          
   156  0063                    ARF_CR:       equ 63h          ; Analog Reference Control
   157                          
   158  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus Register           (#)
   159  0080                    CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
   160  0040                    CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
   161  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
   162  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
   163  0008                    CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
   164  0004                    CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
   165  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
   166  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   167                          
   168  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   169  0020                    CMP_CR1_CLDIS1:       equ 20h    ; MASK: Column 1 comparator output latch
   170  0010                    CMP_CR1_CLDIS0:	      equ 10h    ; MASK: Column 0 comparator output latch
   171                          
   172  0068                    ADC0_CR:      equ 68h          ; Analog Column 0 Configuration
   173  0080                    ADC0_CR_CMPST:        equ 80h    ;
   174  0040                    ADC0_CR_LOREN:        equ 40h    ;
   175  0020                    ADC0_CR_SHEN:         equ 20h    ;
   176  0008                    ADC0_CR_CBSRC:        equ 08h    ;
   177  0004                    ADC0_CR_ADCM:         equ 04h    ;
   178  0001                    ADC0_CR_EN:	          equ 01h    ;
   179                          
   180  0069                    ADC1_CR:      equ 69h          ; Analog Column 1 Configuration
   181  0080                    ADC1_CR_CMPST:        equ 80h    ;
   182  0040                    ADC1_CR_LOREN:        equ 40h    ;
   183  0020                    ADC1_CR_SHEN:         equ 20h    ;
   184  0008                    ADC1_CR_CBSRC:        equ 08h    ;
   185  0004                    ADC1_CR_ADCM:         equ 04h    ;
   186  0001                    ADC1_CR_EN:	          equ 01h    ;
   187                          
   188                          ; Continuous Time PSoC block Type E Row 0 Col 0
   189  0072                    ACE00CR1:     equ 72h          ; Control register 1                       (RW)
   190  0073                    ACE00CR2:     equ 73h          ; Control register 2                       (RW)
   191                          
   192                          ; Continuous Time PSoC block Type E Row 0 Col 1
   193  0076                    ACE01CR1:     equ 76h          ; Control register 1                       (RW)
   194  0077                    ACE01CR2:     equ 77h          ; Control register 2                       (RW)
   195                          
   196                          ; Switched Cap PSoC blockType E Row 1 Col 0
   197  0080                    ASE10CR0:     equ 80h          ; Control register 0                       (RW)
   198                          
   199                          ; Switched Cap PSoC blockType E Row 1 Col 1
   200  0084                    ASE11CR0:     equ 84h          ; Control register 0                       (RW)
   201                          
   202                          ;-----------------------------------------------
   203                          ;  Global General Purpose Data Registers
   204                          ;-----------------------------------------------
   205  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   206  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   207  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   208  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   209                          
   210                          ;------------------------------------------------
   211                          ;  Row Digital Interconnects
   212                          ;
   213                          ;  Note: the following registers are mapped into
   214                          ;  both register bank 0 AND register bank 1.
   215                          ;------------------------------------------------
   216                          
   217  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   218  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   219  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   220  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   221  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   222  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   223  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   224                          
   225  00B8                    RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
   226  00B9                    RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
   227  00BA                    RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
   228  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   229  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   230  00BD                    RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
   231  00BE                    RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
   232                          
   233                          ;-----------------------------------------------
   234                          ;  Ram Page Pointers
   235                          ;-----------------------------------------------
   236  00D0                    CUR_PP:      equ 0D0h           ; Current   Page Pointer
   237  00D1                    STK_PP:      equ 0D1h           ; Stack     Page Pointer
   238  00D3                    IDX_PP:      equ 0D3h           ; Index     Page Pointer
   239  00D4                    MVR_PP:      equ 0D4h           ; MVI Read  Page Pointer
   240  00D5                    MVW_PP:      equ 0D5h           ; MVI Write Page Pointer
   241                          
   242                          ;------------------------------------------------
   243                          ;  I2C Configuration Registers
   244                          ;------------------------------------------------
   245  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   246  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   247  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   248  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   249  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   250  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   251  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   252  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   253  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   254  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   255                          
   256  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   257  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   258  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   259  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   260  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   261  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   262  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   263  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   264  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   265                          
   266  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   267                          
   268  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   269  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   270  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   271  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   272  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   273                          
   274                          ;------------------------------------------------
   275                          ;  System and Global Resource Registers
   276                          ;------------------------------------------------
   277  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   278                                                         ; Use INT_MSK0 bit field masks
   279  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   280                                                         ; Use INT_MSK1 bit field masks
   281  00DC                    INT_CLR2:     equ 0DCh          ; Interrupt Clear Register 2               (RW)
   282                                                         ; Use INT_MSK2 bit field masks
   283  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   284                                                         ; Use INT_MSK3 bit field masks
   285                          
   286  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   287  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   288  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   289                          
   290  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   291  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   292  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   293  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   294  0010                    INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
   295  0008                    INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
   296  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   297  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   298  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   299                          
   300  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   301  0080                    INT_MSK1_DCC13:            equ 80h ; MASK: enable/disable DCC13 block interrupt
   302  0040                    INT_MSK1_DCC12:            equ 40h ; MASK: enable/disable DCC12 block interrupt
   303  0020                    INT_MSK1_DBC11:            equ 20h ; MASK: enable/disable DBC11 block interrupt
   304  0010                    INT_MSK1_DBC10:            equ 10h ; MASK: enable/disable DBC10 block interrupt
   305  0008                    INT_MSK1_DCC03:            equ 08h ; MASK: enable/disable DCC03 block interrupt
   306  0004                    INT_MSK1_DCC02:            equ 04h ; MASK: enable/disable DCC02 block interrupt
   307  0002                    INT_MSK1_DBC01:            equ 02h ; MASK: enable/disable DBC01 block interrupt
   308  0001                    INT_MSK1_DBC00:            equ 01h ; MASK: enable/disable DBC00 block interrupt
   309                          
   310  00DF                    INT_MSK2:     equ DFh			; Custom block Mask Register			   (RW)
   311  0010                    INT_MSK2_SARADC:           equ 10h ; MASK: enable/disable SARADC block interrupt
   312  0020                    INT_MSK2_CSD0:             equ 20h ; MASK: enable/disable CSD0 block interrupt
   313  0040                    INT_MSK2_CSD1:             equ 40h ; MASK: enable/disable CSD1 block interrupt
   314  0080                    INT_MSK2_RTC:              equ 80h ; MASK: enable/disable RTC block interrupt
   315                          
   316  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   317  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   318                          
   319                          ;------------------------------------------------------
   320                          ;  MAC Registers
   321                          ;------------------------------------------------------
   322                          
   323  00E8                    MUL0_X:       equ 0E8h          ; Multiply Input X Register                (W)
   324  00E9                    MUL0_Y:       equ 0E9h          ; Multiply Input Y Register                (W)
   325  00EA                    MUL0_DH:      equ 0EAh          ; Multiply Result High Byte Register       (R)
   326  00EB                    MUL0_DL:      equ 0EBh          ; Multiply Result Low Byte Register        (R)
   327                          
   328  00EC                    ACC0_DR1:     equ 0ECh          ; Accumulator Data Register 1              (RW)
   329  00ED                    ACC0_DR0:     equ 0EDh          ; Accumulator Data Register 0              (RW)
   330  00EE                    ACC0_DR3:     equ 0EEh          ; Accumulator Data Register 3              (RW)
   331  00EF                    ACC0_DR2:     equ 0EFh          ; Accumulator Data Register 2              (RW)
   332                          
   333                          ; DECIMATOR Control Registers
   334  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   335  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   336                          
   337                          ;------------------------------------------------------
   338                          ;  System Status and Control Registers
   339                          ;
   340                          ;  Note: The following registers are mapped into both
   341                          ;        register bank 0 AND register bank 1.
   342                          ;------------------------------------------------------
   343  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   344                                                             ; Use FLAG_ masks defined at top of file
   345                          
   346  00FD                    DAC_D:        equ 0FDh		   ; DAC Data Register                        (RW)
   347                          
   348  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   349  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: flag, Internal Reset Status bit
   350  0010                    CPU_SCR1_SLIMO:         equ 10h	   ; MASK: Slow IMO (internal main osc) enable
   351  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   352  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   353  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   354                          
   355  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   356  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   357  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   358  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   359  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   360  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   361                          
   362                          ;------------------------------------------------------
   363                          ;  Neon Capsense Digital Control Registers
   364                          ;------------------------------------------------------
   365  0050                    CSD0_DR0_L:				equ 50h		; Capsense 0 data low 0				(RW)
   366  0054                    CSD0_DR0_H:				equ 54h		; Capsense 0 data high 0			(RW)
   367  0058                    CSD1_DR0_L:				equ 58h		; Capsense 1 data low 0				(RW)
   368  005C                    CSD1_DR0_H:				equ 5Ch		; Capsense 1 data high 0			(RW)
   369  0051                    CSD0_DR1_L:				equ 51h		; Capsense 0 data low 1				(RW)
   370  0055                    CSD0_DR1_H:				equ 55h		; Capsense 0 data high 1			(RW)
   371  0059                    CSD1_DR1_L:				equ 59h		; Capsense 1 data low 1				(RW)
   372  005D                    CSD1_DR1_H:				equ 5Dh		; Capsense 1 data high 1			(RW)
   373  0052                    CSD0_CNT_L:				equ 52h		; Capsense 0 counter low			(RW)
   374  0056                    CSD0_CNT_H:				equ 56h		; Capsense 0 counter high			(RW)
   375  005A                    CSD1_CNT_L:				equ 5Ah		; Capsense 1 counter low			(RW)
   376  005E                    CSD1_CNT_H:				equ	5Eh		; Capsense 1 counter high			(RW)
   377  0053                    CSD0_CR0:				equ 53h		; Capsense 0 control 0				(RW)
   378  005B                    CSD1_CR0:				equ 5Bh		; Capsense 1 control 0				(RW)
   379  0057                    CSD0_CR1:				equ 57h		; Capsense 0 control 1				(RW)
   380  005F                    CSD1_CR1:				equ 5Fh		; Capsense 1 control 1				(RW)
   381                          
   382                          ;------------------------------------------------------
   383                          ;  Neon Analog Registers
   384                          ;------------------------------------------------------
   385  0065                    ASY_CR:					equ 65h		; Analog Synchronization Control	(RW)
   386  006A                    ADC_DH:					equ 6Ah		; ADC data high						(RW)
   387  006B                    ADC_DL:					equ 6Bh		; ADC data low						(RW)
   388  00C8                    PWMVREF0:				equ C8h		; PWM Voltage Reference 0			(RW)
   389  00C9                    PWMVREF1:				equ C9h		; PWM Voltage Reference 1			(RW)
   390  00CB                    PWMSRC:					equ CBh		; PWM Source						(RW)
   391  00CA                    IDACMODE:				equ CAh		; IDAC Mode							(RW)
   392  00FC                    IDACR_D:				equ FCh		; Analog Mux DAC data 0				(RW)
   393  00FD                    IDACL_D:				equ FDh		; Analog Mux DAC data 1				(RW)
   394                          
   395                          ;------------------------------------------------------
   396                          ;  Neon Digital Registers
   397                          ;------------------------------------------------------
   398  00B7                    RDI0DSM:				equ B7h		; Row Digital Interconnect input select 0	(RW)
   399  00BF                    RDI1DSM:				equ BFh		; Row Digital Interconnect input select 1	(RW)
   400                          
   401                          ;------------------------------------------------------
   402                          ;  Neon Test Registers
   403                          ;------------------------------------------------------
   404  00CC                    TSCR0:					equ CCh		; Tsource 0							(RW)
   405  00CD                    TSCMPH:					equ CDh		; TSCMP high						(RW)
   406  00CE                    TSCMPL:					equ CEh		; TSCMP low							(RW)
   407  00CF                    TSCR1:					equ CFh		; Tsource 1							(RW)
   408                          
   409                          ;;=============================================================================
   410                          ;;      Register Space, Bank 1
   411                          ;;=============================================================================
   412                          
   413                          ;------------------------------------------------
   414                          ;  Port Registers
   415                          ;  Note: Also see this address range in Bank 0.
   416                          ;------------------------------------------------
   417                          ; Port 0
   418  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   419  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   420  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   421  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   422                          
   423                          ; Port 1
   424  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   425  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   426  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   427  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   428                          
   429                          ; Port 2
   430  0008                    PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
   431  0009                    PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
   432  000A                    PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
   433  000B                    PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
   434                          
   435                          ; Port 3
   436  000C                    PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
   437  000D                    PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
   438  000E                    PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
   439  000F                    PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
   440                          
   441                          ; Port 4
   442  0010                    PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
   443  0011                    PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
   444  0012                    PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
   445  0013                    PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
   446                          
   447                          ;------------------------------------------------
   448                          ;  Digital PSoC(tm) block Registers
   449                          ;  Note: Also see this address range in Bank 0.
   450                          ;------------------------------------------------
   451                          
   452                          ; Digital PSoC block 00, Basic Type C
   453  0020                    DBC00FN:      equ 20h          ; Function Register                        (RW)
   454  0021                    DBC00IN:      equ 21h          ;    Input Register                        (RW)
   455  0022                    DBC00OU:      equ 22h          ;   Output Register                        (RW)
   456  0023                    DBC00CR1:     equ 23h          ;   control & status register 1            (RW)
   457                          
   458                          ; Digital PSoC block 01, Basic Type C
   459  0024                    DBC01FN:      equ 24h          ; Function Register                        (RW)
   460  0025                    DBC01IN:      equ 25h          ;    Input Register                        (RW)
   461  0026                    DBC01OU:      equ 26h          ;   Output Register                        (RW)
   462  0027                    DBC01CR1:     equ 27h          ;   control & status register 1            (RW)
   463                          
   464                          ; Digital PSoC block 02, Communications Type C
   465  0028                    DCC02FN:      equ 28h          ; Function Register                        (RW)
   466  0029                    DCC02IN:      equ 29h          ;    Input Register                        (RW)
   467  002A                    DCC02OU:      equ 2Ah          ;   Output Register                        (RW)
   468  002B                    DBC02CR1:     equ 2Bh          ;   control & status register 1            (RW)
   469                          
   470                          ; Digital PSoC block 03, Communications Type C
   471  002C                    DCC03FN:      equ 2Ch          ; Function Register                        (RW)
   472  002D                    DCC03IN:      equ 2Dh          ;    Input Register                        (RW)
   473  002E                    DCC03OU:      equ 2Eh          ;   Output Register                        (RW)
   474  0029                    DBC03CR1:     equ 29h          ;   control & status register 1            (RW)
   475                          
   476                          ; Digital PSoC block 10, Basic Type C
   477  0030                    DBC10FN:      equ 30h          ; Function Register                        (RW)
   478  0031                    DBC10IN:      equ 31h          ;    Input Register                        (RW)
   479  0032                    DBC10OU:      equ 32h          ;   Output Register                        (RW)
   480  0033                    DBC10CR1:     equ 33h          ;   control & status register 1            (RW)
   481                          
   482                          ; Digital PSoC block 11, Basic Type C
   483  0034                    DBC11FN:      equ 34h          ; Function Register                        (RW)
   484  0035                    DBC11IN:      equ 35h          ;    Input Register                        (RW)
   485  0036                    DBC11OU:      equ 36h          ;   Output Register                        (RW)
   486  0037                    DBC11CR1:     equ 37h          ;   control & status register 1            (RW)
   487                          
   488                          ; Digital PSoC block 12, Communications Type C
   489  0038                    DCC12FN:      equ 38h          ; Function Register                        (RW)
   490  0039                    DCC12IN:      equ 39h          ;    Input Register                        (RW)
   491  003A                    DCC12OU:      equ 3Ah          ;   Output Register                        (RW)
   492  003B                    DBC12CR1:     equ 3Bh          ;   control & status register 1            (RW)
   493                          
   494                          ; Digital PSoC block 13, Communications Type C
   495  003C                    DCC13FN:      equ 3Ch          ; Function Register                        (RW)
   496  003D                    DCC13IN:      equ 3Dh          ;    Input Register                        (RW)
   497  003E                    DCC13OU:      equ 3Eh          ;   Output Register                        (RW)
   498  003F                    DBC13CR1:     equ 3Fh          ;   control & status register 1            (RW)
   499                          
   500                          ;------------------------------------------------
   501                          ;  System and Global Resource Registers
   502                          ;  Note: Also see this address range in Bank 0.
   503                          ;------------------------------------------------
   504                          
   505  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   506  00C0                    CLK_CR0_ACOLUMN_3:    equ C0h    ; MASK: Specify clock for analog cloumn
   507  0030                    CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
   508  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   509  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   510                          
   511  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   512  0018                    CLK_CR1_ACLK1:        equ 18h    ; MASK: Digital PSoC block for analog source
   513  0003                    CLK_CR1_ACLK0:        equ 03h    ; MASK: Digital PSoC block for analog source
   514                          
   515  0003                    CLK_CR1_ACLK2:        equ 03h    ; Deprecated do not use
   516                          
   517  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   518  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   519                          
   520  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   521  000F                    AMD_CR0_AMOD0:        equ 0Fh    ; MASK: Modulation source for analog column 0
   522                          
   523  0064                    CMP_GO_EN:    equ 64h          ; Comparator Bus To Global Out Enable      (RW)
   524  0080                    CMP_GO_EN_GOO5:       equ 80h    ; MASK: Selected Col 1 signal to GOO5
   525  0040                    CMP_GO_EN_GOO1:       equ 40h    ; MASK: Selected Col 1 signal to GOO1
   526  0030                    CMP_GO_EN_SEL1:       equ 30h    ; MASK: Column 1 Signal Select
   527  0008                    CMP_GO_EN_GOO4:       equ 08h    ; MASK: Selected Col 0 signal to GOO4
   528  0004                    CMP_GO_EN_GOO0:       equ 04h    ; MASK: Selected Col 0 signal to GOO0
   529  0003                    CMP_GO_EN_SEL0:       equ 03h    ; MASK: Column 0 Signal Select
   530                          
   531  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   532  000F                    AMD_CR1_AMOD1:        equ 0Fh    ; MASK: Modulation ctrl for analog column 1
   533                          
   534  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   535  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   536  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   537                          
   538  006B                    CLK_CR3:      equ 6Bh          ; Analog Clock Source Control Register 3   (RW)
   539  0040                    CLK_CR3_SYS1:         equ 40h    ; MASK: Analog Clock 1 selection
   540  0030                    CLK_CR3_DIVCLK1:      equ 30h    ; MASK: Analog Clock 1 divider
   541  0004                    CLK_CR3_SYS0:         equ 04h    ; MASK: Analog Clock 0 selection
   542  0003                    CLK_CR3_DIVCLK0:      equ 03h    ; MASK: Analog Clock 0 divider
   543                          
   544                          ;------------------------------------------------
   545                          ;  Global Digital Interconnects
   546                          ;------------------------------------------------
   547                          
   548  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   549  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   550  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   551  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   552                          
   553  00A0                    GDI_O_IN_CR:  equ 0A0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   554  00A1                    GDI_E_IN_CR:  equ 0A1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   555  00A2                    GDI_O_OU_CR:  equ 0A2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   556  00A3                    GDI_E_OU_CR:  equ 0A3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   557                          
   558  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   559  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   560                          
   561                          ;------------------------------------------------
   562                          ;  Analog Mux Bus Port Enable Bits
   563                          ;------------------------------------------------
   564  00D8                    MUX_CR0:      equ 0D8h          ; Analog Mux Port 0 Bit Enables Register
   565  00D9                    MUX_CR1:      equ 0D9h          ; Analog Mux Port 1 Bit Enables Register
   566  00DA                    MUX_CR2:      equ 0DAh          ; Analog Mux Port 2 Bit Enables Register
   567  00DB                    MUX_CR3:      equ 0DBh          ; Analog Mux Port 3 Bit Enables Register
   568  00EC                    MUX_CR4:      equ 0ECh          ; Analog Mux Port 4 Bit Enables Register
   569                          
   570                          ;------------------------------------------------
   571                          ;  Clock and System Control Registers
   572                          ;------------------------------------------------
   573                          
   574  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   575  0080                    OSC_GO_EN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   576  0040                    OSC_GO_EN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   577  0020                    OSC_GO_EN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   578  0010                    OSC_GO_EN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   579  0008                    OSC_GO_EN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   580  0004                    OSC_GO_EN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   581  0002                    OSC_GO_EN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   582  0001                    OSC_GO_EN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   583                          
   584  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   585  0003                    OSC_CR4_VC3SEL:       equ 03h    ; MASK: System VC3 Clock source
   586                          
   587  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   588                          
   589  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   590  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   591  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   592  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   593  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   594  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   595  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   596  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   597  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   598  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   599  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   600  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   601  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   602  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   603  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   604  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   605  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   606  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   607                          
   608  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   609  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   610  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   611                          
   612  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   613  0080                    OSC_CR2_PLLGAIN:      equ 80h    ; MASK: High/Low gain
   614  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   615  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   616  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   617                          
   618  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   619  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   620  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   621  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   622  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   623  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   624  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   625  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   626                          
   627  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   628  0008                    VLT_CMP_NOWRITE:      equ 08h    ; MASK: Vcc below Flash Write level
   629  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   630  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   631  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   632                          
   633  00E5                    ADC0_TR:      equ 0E5h          ; ADC Column 0 Trim Register
   634  00E6                    ADC1_TR:      equ 0E6h          ; ADC Column 1 Trim Register
   635                          
   636  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   637  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   638  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   639  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   640                          
   641  00FA                    FLS_PR1:      equ 0FAh          ; Flash Program Register 1                 (RW)
   642  0003                    FLS_PR1_BANK:         equ 03h    ; MASK: Select Active Flash Bank
   643                          
   644  00FD                    DAC_CR0:       equ 0FDh          ; Analog Mux DAC Control Register 0
   645  00DC                    DAC_CR1:       equ 0DCh          ; Analog Mux DAC Control Register 1
   646  0008                    DAC_CR_IRANGE:        equ 08h    ; MASK: Sets the DAC Range low or high
   647  0006                    DAC_CR_OSCMODE:       equ 06h    ; MASK: Defines the reset mode for AMux
   648  0001                    DAC_CR_ENABLE:        equ 01h    ; MASK: Enable/Disable DAC function
   649                          
   650                          ;------------------------------------------------
   651                          ;  I2C Control Registers
   652                          ;------------------------------------------------
   653                          
   654  00AD                    I2C_ADDR:    equ 0ADh          ; I2C Address Register (RW)
   655                          
   656                          ;------------------------------------------------------
   657                          ;  Neon Analog Registers
   658                          ;------------------------------------------------------
   659  0053                    VDAC50CR0:		equ 53h			; V DAC5 control 0				(RW)
   660  0057                    VDAC51CR0:		equ 57h			; V DAC5 control 1				(RW)
   661  00A8                    ADC_CR0:		equ A8h			; ADC control 0					(RW)
   662  00A9                    ADC_CR1:		equ A9h			; ADC control 1					(RW)
   663  00AA                    ADC_CR2:		equ AAh			; ADC control 2					(RW)
   664  00AB                    ADC_CR3TRIM:	equ ABh			; ADC control 3					(RW)
   665  00AC                    ADC_CR4:		equ ACh			; ADC control 4					(RW)
   666  00E7                    VDAC_TRIM:		equ E7h			; V DAC trim					(RW)
   667                          
   668                          ;------------------------------------------------------
   669                          ;  Neon Current Sense CMP Registers
   670                          ;------------------------------------------------------
   671  0050                    CMP0CR1:		equ 50h			; CMP0 control 1				(RW)
   672  0051                    CMP0CR2:		equ 51h			; CMP0 control 2				(RW)
   673  0054                    CMP1CR1:		equ 54h			; CMP1 control 1				(RW)
   674  0055                    CMP1CR2:		equ 55h			; CMP1 control 2				(RW)
   675  0058                    CSCMPCR0:		equ 58h			; CSCMP control 0				(RW)
   676  0059                    CSCMPGOEN:		equ 59h			; CSCMO global out enable		(RW)
   677  005A                    CSLUTCR0:		equ 5Ah			; CSLUT control 0				(RW)
   678  005B                    CMPCOLMUX:		equ 5Bh			; CMP Column Mux				(RW)
   679  005C                    CMPPWMCR:		equ 5Ch			; CMP PWM control				(RW)
   680  005D                    CMPFLTCR:		equ 5Dh			; CMP filter control			(RW)
   681  005E                    CMPCLK1:		equ 5Eh			; CMP clock 1					(RW)
   682  005F                    CMPCLK0:		equ 5Fh			; CMP clock 0					(RW)
   683                          
   684                          ;------------------------------------------------------
   685                          ;  Neon Real Time Clock Registers
   686                          ;------------------------------------------------------
   687  00A4                    RTCH:			equ A4h			; Real time current hour		(RW)
   688  00A5                    RTCM:			equ A5h			; Real time current minute		(RW)
   689  00A6                    RTCS:			equ A6h			; Real time current second		(RW)
   690  00A7                    RTCCR:			equ A7h			; Real time clock control		(RW)
   691                          
   692                          ;------------------------------------------------------
   693                          ;  Analog MUX Config Registers
   694                          ;------------------------------------------------------
   695                          
   696  006A                    AMUX_CFG1:			equ 6Ah  ; Analog MUX Configuration 1
   697  0020                    AMUX_CFG1_GOINVR:	equ 20h  ;
   698  0010                    AMUX_CFG1_GOINVL:  	equ 10h	 ;
   699  000C                    AMUX_CFG1_AMUXMODR:	equ 0Ch	 ;
   700  0003                    AMUX_CFG1_AMUXMODL:	equ 03h	 ;
   701                          
   702                          ;;=============================================================================
   703                          ;;      M8C System Macros
   704                          ;;  These macros should be used when their functions are needed.
   705                          ;;=============================================================================
   706                          
   707                          ;----------------------------------------------------
   708                          ;  Swapping Register Banks
   709                          ;----------------------------------------------------
   710                              macro M8C_SetBank0
   711                              and   F, ~FLAG_XIO_MASK
   712  3C41                        endm
   713                          
   714                              macro M8C_SetBank1
   715                              or    F, FLAG_XIO_MASK
   716  3C41                        endm
   717                          
   718                          ;----------------------------------------------------
   719                          ;  Global Interrupt Enable/Disable
   720                          ;----------------------------------------------------
   721                              macro M8C_EnableGInt
   722                              or    F, FLAG_GLOBAL_IE
   723  3C41                        endm
   724                          
   725                              macro M8C_DisableGInt
   726                              and   F, ~FLAG_GLOBAL_IE
   727  3C41                        endm
   728                          
   729                          ;----------------------------------------------------
   730                          ;  Enable/Disable Interrupt Mask
   731                          ;
   732                          ;  Use the following macros to enable/disable
   733                          ;  bits in the Interrupt mask registers,
   734                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   735                          ;
   736                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   737                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   738                          ;
   739                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   740                          ;        and MASK is the bit set to enable or disable
   741                          ;----------------------------------------------------
   742                          ; Disable Interrupt Bit Mask(s)
   743                              macro M8C_DisableIntMask
   744                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   745  3C41                        endm
   746                          
   747                          ; Enable Interrupt Bit Mask(s)
   748                              macro M8C_EnableIntMask
   749                              or    reg[@0], @1               ; enable specified interrupt enable bit
   750  3C41                        endm
   751                          
   752                          ;----------------------------------------------------
   753                          ;  Clear Posted Interrupt Flag Mask
   754                          ;
   755                          ;  Use the following macros to clear the
   756                          ;  bits in the Interrupt Clear registers,
   757                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   758                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   759                          ;
   760                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   761                          ;        and MASK is the bit set to enable or disable
   762                          ;----------------------------------------------------
   763                              macro M8C_ClearIntFlag
   764                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   765  3C41                        endm
   766                          
   767                          ;----------------------------------------------------
   768                          ;  Power-On Reset & WatchDog Timer Functions
   769                          ;----------------------------------------------------
   770                              macro M8C_EnableWatchDog
   771                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   772  3C41                        endm
   773                          
   774                              macro M8C_ClearWDT
   775                              mov   reg[RES_WDT], 00h
   776  3C41                        endm
   777                          
   778                              macro M8C_ClearWDTAndSleep
   779                              mov   reg[RES_WDT], 38h
   780  3C41                        endm
   781                          
   782                          ;----------------------------------------------------
   783                          ;  Sleep, CPU Stop & Software Reset
   784                          ;----------------------------------------------------
   785                              macro M8C_Sleep
   786                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   787                              ; The next instruction to be executed depends on the state of the
   788                              ; various interrupt enable bits. If some interrupts are enabled
   789                              ; and the global interrupts are disabled, the next instruction will
   790                              ; be the one that follows the invocation of this macro. If global
   791                              ; interrupts are also enabled then the next instruction will be
   792                              ; from the interrupt vector table. If no interrupts are enabled
   793                              ; then the CPU sleeps forever.
   794  3C41                        endm
   795                          
   796                              macro M8C_Stop
   797                              ; In general, you probably don't want to do this, but here's how:
   798                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   799                              ; Next instruction to be executed is located in the interrupt
   800                              ; vector table entry for Power-On Reset.
   801  3C41                        endm
   802                          
   803                              macro M8C_Reset
   804                              ; Restore CPU to the power-on reset state.
   805                              mov A, 0
   806                              SSC
   807                              ; Next non-supervisor instruction will be at interrupt vector 0.
   808  3C41                        endm
   809                          
   810                          ;----------------------------------------------------
   811                          ; ImageCraft Code Compressor Actions
   812                          ;----------------------------------------------------
   813                              ; Suspend Code Compressor
   814                              ; Must not span a RET or RETI instruction
   815                              ; without resuming code compression
   816                              macro Suspend_CodeCompressor
   817                              or   F, 0
   818  3C41                        endm
   819                          
   820                              ; Resume Code Compression
   821                              macro Resume_CodeCompressor
   822                              add  SP, 0
   823                              endm
      + 3C41                    
      + 3C41                    ; end of file m8c.inc
     1                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     2                          ;;;
     3                          ;;;  M8SSC.INC -- CY8C22045 Microcontroller Device SSC Declarations
     4                          ;;;
     5                          ;;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
     6                          ;;;
     7                          ;;;
     8                          ;;;  This file provides address constants, bit field masks and a set of macro
     9                          ;;;  facilities for the Cypress MicroSystems CY8C22045 Microcontroller family.
    10                          ;;;
    11                          ;;;  Last Modified: August 17, 2004
    12                          ;;;
    13                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    14                          
    15                          ;----------------------------------
    16                          ; Common Supervisory Code Variables
    17                          ;----------------------------------
    18  00F8                    bSSC_KEY1:                          equ      0F8h   ; supervisory key
    19  00F9                    bSSC_KEYSP:                         equ      0F9h   ; supervisory stack ptr key
    20  00FA                    bSSC_TABLE_TableId:                 equ      0FAh   ; table ID
    21                          
    22  003A                    OPER_KEY:                           equ      3Ah   ; operation key
    23                          
    24                          ;----------------------------------
    25                          ; SSC_Action macro command codes
    26                          ;----------------------------------
    27  0001                    FLASH_READ:                         equ      1     ; flash read command
    28  0002                    FLASH_WRITE:                        equ      2     ; flash write command
    29  0003                    FLASH_ERASE:                        equ      3     ; flash erase command
    30  0004                    PROTECT_BLOCK:                      equ      4     ; flash protect block command
    31  0006                    TABLE_READ:                         equ      6     ; table read command
    32  0007                    FLASH_CHECKSUM:                     equ      7     ; flash checksum calculation command
    33  0008                    CALIBRATE0:                         equ      8     ; Calibrate without checksum
    34  0009                    CALIBRATE1:                         equ      9     ; Calibrate with checksum
    35                          
    36                          ;----------------------------------
    37                          ; SSC_Action Flash table addresses
    38                          ;----------------------------------
    39                          ; Table 0 Values
    40  00F8                    SILICON_ID_1:                       equ      0F8h   ; Table 0 first byte of silicon ID
    41  00F9                    SILICON_ID_0:                       equ      0F9h   ; Table 0 second byte of silicon ID
    42                          
    43                          ; Table 1 Values
    44  00F8                    SSCTBL1_TRIM_BGR_3V:                equ      0F8h   ; 3.3V bandgap ref voltage trim
    45  00F9                    SSCTBL1_TRIM_IMO_3V_24MHZ:          equ      0F9h   ; 3.3V internal main oscillator trim (24MHz)
    46  00FA                    SSCTBL1_CAL_ROOM_3V:                equ      0FAh   ; 3.3V Room Temp Calibration
    47  00FB                    SSCTBL1_CAL_HOT_3V:                 equ      0FBh   ; 3.3V Hot  Temp Calibration
    48  00FC                    SSCTBL1_TRIM_BGR_5V:                equ      0FCh   ; 5.0V bandgap ref voltage trim
    49  00FD                    SSCTBL1_TRIM_IMO_5V_24MHZ:          equ      0FDh   ; 5.0V internal main oscillator trim (24MHz)
    50  00FE                    SSCTBL1_CAL_ROOM_5V:                equ      0FEh   ; 5.0V Room Temp Calibration
    51  00FF                    SSCTBL1_CAL_HOT_5V:                 equ      0FFh   ; 5.0V Hot  Temp Calibration
    52                              ; legacy names:
    53  00F8                        VOLTAGE_TRIM_3V:                equ      0F8h   ; Table 1 3.3V bandgap ref voltage trim value
    54  00F9                        OSCILLATOR_TRIM_3V:             equ      0F9h   ; Table 1 3.3V internal main oscillator trim val
                                ue
    55  00FC                        VOLTAGE_TRIM_5V:                equ      0FCh   ; Table 1 5.0V bandgap ref voltage trim value
    56  00FD                        OSCILLATOR_TRIM_5V:             equ      0FDh   ; Table 1 5.0V internal main oscillator trim val
                                ue
    57                          
    58                          ; Table 2 Values
    59  00F8                    SSCTBL2_TRIM_BGR_2V:                equ      0F8h   ; 2.7V bandgap ref voltage trim
    60  00F9                    SSCTBL2_TRIM_IMO_2V_12MHZ:          equ      0F9h   ; 2.7V internal main oscillator trim (12MHz)
    61  00FA                    SSCTBL2_CAL_ROOM_2V:                equ      0FAh   ; 2.7V Room Temp Calibration
    62  00FB                    SSCTBL2_CAL_HOT_2V:                 equ      0FBh   ; 2.7V Hot  Temp Calibration
    63  00FC                    SSCTBL2_TRIM_IMO_3V_6MHZ:           equ      0FCh   ; 3.3V IMO Trim for SLOWIMO 6MHz operation
    64  00FD                    SSCTBL2_TRIM_IMO_2V_6MHZ:           equ      0FDh   ; 2.7V IMO Trim for SLOWIMO 6MHz operation
    65  00FE                    SSCTBL2_TRIM_IMO_5V_6MHZ:           equ      0FEh   ; 5.0V IMO Trim for SLOWIMO 6MHz operation
    66                          
    67                          
    68                          ;-----------------------------------------------------------------------------
    69                          ;  MACRO SSC_Action( OpCode )
    70                          ;
    71                          ;  DESCRIPTION:
    72                          ;     Performs supervisory operations defined in Supervisory ROM (SROM)
    73                          ;     section of Technical Reference Manual and/or Datasheet.
    74                          ;-----------------------------------------------------------------------------
    75                          ;
    76                          ;  ARGUMENTS:
    77                          ;     BYTE  OpCode   - specified supervisory operation - defined operations
    78                          ;                      are:  FLASH_WRITE, FLASH_ERASE, FLASH_READ, TABLE_READ,
    79                          ;                            FLASH_CHECKSUM, PROTECT_BLOCK
    80                          ;  RETURNS:
    81                          ;     Nothing
    82                          ;
    83                          ;  SIDE EFFECTS:
    84                          ;     The values of the A and X registers are modified
    85                          ;
    86                          ;  PROCEDURE:
    87                          ;     1) specify a 3 byte stack frame.  Save in [KEYSP]
    88                          ;     2) insert the flash Supervisory key in [KEY1]
    89                          ;     3) store function code in A
    90                          ;     4) call the supervisory code
    91                          ;
    92                              macro SSC_Action( OpCode )
    93                          ;   !!! DO NOT CHANGE THIS CODE !!!
    94                          ;       This sequence of opcodes provides a
    95                          ;       signature for the debugger and ICE.
    96                              mov   X, SP                            ; copy SP into X
    97                              mov   A, X                             ; mov to A
    98                              add   A, 3                             ; create 3 byte stack frame
    99                              mov   [bSSC_KEYSP], A                  ; save stack frame for supervisory code
   100                              mov   [bSSC_KEY1], OPER_KEY            ; load the code for supervisory operations
   101                              mov   A, @OpCode                       ; load A with specific Flash operation
   102                              SSC                                    ; SSC call the supervisory code
   103                          ;   !!! DO NOT CHANGE THIS CODE !!!
   104  3C41                        endm
   105                          
   106                          
   107                          ;-----------------------------------------------------------------------------
   108                          ;  MACRO M8SSC_SetTableTrims( Table, IMO_Trim, Volt_Trim )
   109                          ;
   110                          ;  DESCRIPTION:
   111                          ;     Loads Bandgap Voltage and Internal Main Oscillator (IMO) Trim
   112                          ;     registers with values from from the specified flash System Parameter
   113                          ;     table entries. Note that both trim values must come from the same table.
   114                          ;     Also, see M8SSC_Set2TableTrims below.
   115                          ;-----------------------------------------------------------------------------
   116                          ;
   117                          ;  ARGUMENTS:
   118                          ;     BYTE Table     - 0..3 for the desired system parameter table
   119                          ;     BYTE Volt_Trim - Address (F8 - FF) of the voltage trim value desired
   120                          ;     BYTE IMP_Trim  - Address (F8 - FF) of the IMO trim value desired
   121                          ;
   122                          ;  RETURNS:
   123                          ;     Nothing
   124                          ;
   125                          ;  SIDE EFFECTS:
   126                          ;     The values of the A and X registers are modified
   127                          ;
   128                              macro M8SSC_SetTableTrims( Table, IMO_Trim, Volt_Trim )
   129                              mov A, reg[0xD0]  ; CUR_PP
   130                          	push A
   131                          	mov reg[0xD0], 0
   132                              mov   [bSSC_TABLE_TableId], @Table     ; Point to requested Flash Table
   133                              SSC_Action TABLE_READ                  ; Perform a table read supervisor call
   134                              M8C_SetBank1
   135                              mov   A, [@IMO_Trim]
   136                              mov   reg[IMO_TR], A                   ; Load the 3V trim oscillator setting
   137                              mov   A, [@Volt_Trim]
   138                              mov   reg[BDG_TR], A                   ; Load the bandgap trim setting for 3V
   139                              M8C_SetBank0
   140                          	pop A
   141                          	mov reg[0xD0], A
   142  3C41                        endm
   143                          
   144                          
   145                          ;-----------------------------------------------------------------------------
   146                          ;  MACRO M8SSC_Set2TableTrims( TableA, IMO_Trim, TableB, Volt_Trim )
   147                          ;
   148                          ;  DESCRIPTION:
   149                          ;     Loads Bandgap Voltage and Internal Main Oscillator (IMO) Trim
   150                          ;     registers with values from from the specified flash System Parameter
   151                          ;     table entries. Each trim value comes from a different table.
   152                          ;     Also, see M8SSC_SetTableTrims above.
   153                          ;-----------------------------------------------------------------------------
   154                          ;
   155                          ;  ARGUMENTS:
   156                          ;     BYTE TableA    - 0..3 for the parameter table holding the Volt Trim
   157                          ;     BYTE Volt_Trim - Address (F8 - FF) of the voltage trim value desired
   158                          ;     BYTE TableB    - 0..3 for the parameter table holding the IMO Trim
   159                          ;     BYTE IMP_Trim  - Address (F8 - FF) of the IMO trim value desired
   160                          ;
   161                          ;  RETURNS:
   162                          ;     Nothing
   163                          ;
   164                          ;  SIDE EFFECTS:
   165                          ;     The values of the A and X registers are modified
   166                          ;
   167                              macro M8SSC_Set2TableTrims( TableA, IMO_Trim, TableB, Volt_Trim )
   168                              mov A, reg[0xD0]  ; CUR_PP
   169                          	push A
   170                          	mov reg[0xD0], 0
   171                              mov   [bSSC_TABLE_TableId], @TableA    ; Point to Flash Table for IMO Trim
   172                              SSC_Action TABLE_READ                  ; Copy table data to RAM F8-FF
   173                              M8C_SetBank1                           ; (Note, preserved across next SSC!)
   174                              mov   A, [@IMO_Trim]                   ; Set the main oscillator trim
   175                              mov   reg[IMO_TR], A
   176                              mov   [bSSC_TABLE_TableId], @TableB    ; Point to Flash Table for Volt Trim
   177                              SSC_Action TABLE_READ                  ; Copy table data to RAM F8-FF
   178                              mov   A, [@Volt_Trim]                  ; Set the bandgap voltage trim
   179                              mov   reg[BDG_TR], A                   ; Load the bandgap trim setting for 3V
   180                              M8C_SetBank0
   181                          	pop A
   182                          	mov reg[0xD0], A
   183  3C41                        endm
   184                          
   185                          
   186                          ;-----------------------------------------------------------------------------
   187                          ;  MACRO M8SSC_SetTableVoltageTrim( Table, Volt_Trim )
   188                          ;
   189                          ;  DESCRIPTION:
   190                          ;     Loads Bandgap Voltage Trim register with values from from the
   191                          ;     specified flash System Parameter table entry.
   192                          ;-----------------------------------------------------------------------------
   193                          ;
   194                          ;  ARGUMENTS:
   195                          ;     BYTE Table     - 0..3 for the parameter table holding the Volt Trim
   196                          ;     BYTE Volt_Trim - Address (F8 - FF) of the voltage trim value desired
   197                          ;
   198                          ;  RETURNS:
   199                          ;     Nothing
   200                          ;
   201                          ;  SIDE EFFECTS:
   202                          ;     The values of the A and X registers are modified
   203                          ;
   204                              macro M8SSC_SetTableVoltageTrim( Table, Volt_Trim )
   205                              mov A, reg[0xD0]  ; CUR_PP
   206                          	push A
   207                          	mov reg[0xD0], 0
   208                              mov   [bSSC_TABLE_TableId], @Table     ; Point to Flash Table
   209                              SSC_Action TABLE_READ                  ; Perform a table read supervisor call
   210                              M8C_SetBank1
   211                              mov   A, [@Volt_Trim]                  ; Get the bandgap trim seting
   212                              mov   reg[BDG_TR], A                   ; Update the register value
   213                              M8C_SetBank0
   214                          	pop A
   215                          	mov reg[0xD0], A
   216  3C41                        endm
   217                          
   218                          
   219                          ;-----------------------------------------------------------------------------
   220                          ;  MACRO M8SSC_SetTableIMOTrim( Table, IMO_Trim )
   221                          ;
   222                          ;  DESCRIPTION:
   223                          ;     Loads Internal Main Oscillator (IMO) Trim register with values from
   224                          ;     from the specified flash System Parameter table entry.
   225                          ;-----------------------------------------------------------------------------
   226                          ;
   227                          ;  ARGUMENTS:
   228                          ;     BYTE Table     - 0..3 for the parameter table holding the IMO Trim
   229                          ;     BYTE IMO_Trim  - Address (F8 - FF) of the voltage trim value desired
   230                          ;
   231                          ;  RETURNS:
   232                          ;     Nothing
   233                          ;
   234                          ;  SIDE EFFECTS:
   235                          ;     The values of the A and X registers are modified
   236                          ;
   237                              macro M8SSC_SetTableIMOTrim( Table, IMO_Trim )
   238                              mov A, reg[0xD0]  ; CUR_PP
   239                          	push A
   240                          	mov reg[0xD0], 0
   241                              mov   [bSSC_TABLE_TableId], @Table ; Point to Flash Table 1
   242                              SSC_Action TABLE_READ              ; Perform a table read supervisor call
   243                              M8C_SetBank1
   244                              mov   A, [@IMO_Trim]               ; Get the IMO trim seting
   245                              mov   reg[IMO_TR], A               ; Update the register value
   246                              M8C_SetBank0
   247                          	pop A
   248                          	mov reg[0xD0], A
   249                              endm
      + 3C41                    
      + 3C41                    ; end of file m8ssc.inc
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;
     4                          ;;       FILENAME: Memory.inc
     5                          ;;
     6                          ;;    DESCRIPTION: Memory Model and Stack Parameter Definitions for 
     7                          ;;                 CY8C22045 PSoC devices.
     8                          ;;
     9                          ;;  LAST MODIFIED: August 17, 2004
    10                          ;;
    11                          ;;-----------------------------------------------------------------------------
    12                          ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
    13                          ;;*****************************************************************************
    14                          ;;*****************************************************************************
    15                          ;
    16                          ;
    17                          ;  ******** Define Memory Model and Stack parameters ********
    18                          ;
    19  0001                    IMAGECRAFT: equ 1   
    20  0002                    HITECH: equ 2   
    21  0002                    TOOLCHAIN: equ HITECH   
    22  0001                    SYSTEM_LARGE_MEMORY_MODEL: equ 1   
    23  0000                    SYSTEM_SMALL_MEMORY_MODEL: equ 0   
    24  0003                    SYSTEM_STACK_PAGE: equ 3   
    25  0000                    SYSTEM_STACK_PAGE_OFFSET: equ 0   
    26  0002                    SYSTEM_TOOLS: equ 2   
    27  0000                    SYSTEM_IDXPG_TRACKS_STK_PP: equ 0   
    28  0001                    SYSTEM_IDXPG_TRACKS_IDX_PP: equ 1   
    29  0000                    SYSTEM_MULTIPAGE_STACK: equ 0 
    30                          
    31                          
    32                          ;  ******* Function Class Definitions *******
    33                          ;
    34                          ;  These definitions are used to describe RAM access patterns. They provide
    35                          ;  documentation and they control prologue and epilogue macros that perform
    36                          ;  the necessary housekeeping functions for large memory model devices like
    37                          ;  the CY8C22045.
    38                          
    39  0001                    RAM_USE_CLASS_1:               equ 1   ; PUSH, POP & I/O access
    40  0002                    RAM_USE_CLASS_2:               equ 2   ; Indexed address mode on stack page
    41  0004                    RAM_USE_CLASS_3:               equ 4   ; Indexed address mode to any page
    42  0008                    RAM_USE_CLASS_4:               equ 8   ; Direct/Indirect address mode access
    43                          
    44                          ; ******* Hi Tech Specific *******
    45                          ; Turn on the expansion of all macros by default
    46                          IF (TOOLCHAIN & HITECH)
    47                          OPT EXPAND
    48                          ENDIF
    49                          ; ******* Page Pointer Manipulation Macros *******
    50                          ;
    51                          ;  ******* Page Pointer Manipulation Macros *******
    52                          ;
    53                          ;  Most of the following macros are conditionally compiled so they only
    54                          ;  produce code if the large memory model is selected.
    55                          
    56                             ;-----------------------------------------------
    57                             ;  Set Stack Page Macro
    58                             ;-----------------------------------------------
    59                             ;
    60                             ;  DESC: Modify STK_PP in the large or small memory Models.
    61                             ;
    62                             ; INPUT: Constant (e.g., SYSTEM_STACK_PAGE) that specifies the RAM page on
    63                             ;        which stack operations like PUSH and POP store and retrieve their
    64                             ;        data
    65                             ;
    66                             ;  COST: 8 instruction cycles (in LMM only)
    67                          
    68                             macro RAM_SETPAGE_STK( PG_NUMBER )
    69                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    70                                mov reg[STK_PP], @PG_NUMBER
    71                             ENDIF
    72  3C41                       endm
    73                          
    74                             ;-----------------------------------------------
    75                             ;  Set Current Page Macro
    76                             ;-----------------------------------------------
    77                             ;
    78                             ;  DESC: Modify CUR_PP in the large or small memory Models.
    79                             ;
    80                             ; INPUT: Constant value (e.g., >bFoo) for the RAM page number used in
    81                             ;        calculation of effective direct-mode address operands.
    82                             ;
    83                             ;  COST: 8 instruction cycles (in LMM only)
    84                          
    85                             macro RAM_SETPAGE_CUR( PG_NUMBER )
    86                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    87                                mov reg[CUR_PP], @PG_NUMBER
    88                             ENDIF
    89  3C41                       endm
    90                          
    91                             ;-----------------------------------------------
    92                             ;  Set Index Page Macro
    93                             ;-----------------------------------------------
    94                             ;
    95                             ;  DESC: Modify IDX_PP in the large or small emory Models.
    96                             ;
    97                             ; INPUT: Constant value (e.g., >caFoo) for the RAM page number used in
    98                             ;         calculation of effective index-mode address operands.
    99                             ;
   100                             ;  COST: 8 instruction cycles (in LMM only)
   101                          
   102                             macro RAM_SETPAGE_IDX( PG_NUMBER )
   103                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   104                                mov reg[IDX_PP], @PG_NUMBER
   105                             ENDIF
   106  3C41                       endm
   107                          
   108                             ;-----------------------------------------------
   109                             ;  Set MVI Read Page Macro
   110                             ;-----------------------------------------------
   111                             ;
   112                             ;  DESC: Modify MVR_PP in the large or small memory Models.
   113                             ;
   114                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   115                             ;        calculation of indirect address operands used in the
   116                             ;        "mvi A, [pFoo]" instructions.
   117                             ;
   118                             ;  COST: 8 instruction cycles (in LMM only)
   119                          
   120                             macro RAM_SETPAGE_MVR( PG_NUMBER )
   121                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   122                                mov reg[MVR_PP], @PG_NUMBER
   123                             ENDIF
   124  3C41                       endm
   125                          
   126                             ;-----------------------------------------------
   127                             ;  Set MVI Write Page Macro
   128                             ;-----------------------------------------------
   129                             ;
   130                             ;  DESC: Modify MVW_PP in the large or small memory Models.
   131                             ;
   132                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   133                             ;        calculation of indirect address operands used in the
   134                             ;        "mvi [pFoo], A" instructions.
   135                             ;
   136                             ;  COST: 8 instruction cycles (in LMM only)
   137                          
   138                             macro RAM_SETPAGE_MVW( PG_NUMBER )
   139                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   140                                mov reg[MVW_PP], @PG_NUMBER
   141                             ENDIF
   142  3C41                       endm
   143                          
   144                             ;-----------------------------------------------
   145                             ;  Force Index Page Pointer to Stack Page
   146                             ;-----------------------------------------------
   147                             ;
   148                             ;  DESC: Map index-mode operands onto the stack page by modifying IDX_PP.
   149                             ;        See also RAM_LOCK_INDEX_TO_STACKPAGE.
   150                             ;
   151                             ; INPUT: None
   152                             ;
   153                             ;  COST: 8 instruction cycles (in LMM only)
   154                          
   155                             macro RAM_SETPAGE_IDX2STK
   156                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   157                                IF ( SYSTEM_MULTIPAGE_STACK )
   158                                   mov   A, reg[STK_PP]
   159                                   mov   reg[IDX_PP], A
   160                                ELSE
   161                                   RAM_SETPAGE_IDX SYSTEM_STACK_PAGE
   162                                ENDIF
   163                             ENDIF
   164  3C41                       endm
   165                          
   166                             ;-----------------------------------------------
   167                             ;  Change Memory Mode
   168                             ;-----------------------------------------------
   169                             ;
   170                             ;  DESC: Modify FLAG_PAGEMODE bits in the large and small memory Models.
   171                             ;
   172                             ; INPUT: Constant value for PGMODE bitfield of CPU Flag register, F.
   173                             ;        See FLAG_PGMODE_{x} constants in M8C.INC.
   174                             ;
   175                             ;  COST: 8 instruction cycles (in LMM only)
   176                          
   177                             macro RAM_CHANGE_PAGE_MODE( MODE )
   178                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   179                                and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
   180                                or    F,  FLAG_PGMODE_MASK & @MODE
   181                             ENDIF
   182  3C41                       endm
   183                          
   184                             ;-----------------------------------------------
   185                             ;  Set Large Memory Model Native Paging Mode
   186                             ;-----------------------------------------------
   187                             ;
   188                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   189                             ;        paging mode *IFF* a simple "OR" is guaranteed to work---for
   190                             ;        example, in an ISR, when the PGMODE bits have been cleared
   191                             ;        to zero. If a simple "OR" is not guaranteed to work, use
   192                             ;        the slower RAM_RESTORE_NATIVE_PAGING instead.
   193                             ;
   194                             ; INPUT: none
   195                             ;
   196                             ;  COST: 4 instruction cycles (in LMM only)
   197                          
   198                             macro RAM_SET_NATIVE_PAGING
   199                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   200                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   201                                or    F,  FLAG_PGMODE_11b            ; LMM w/ IndexPage<==>StackPage
   202                             ENDIF ;  PGMODE LOCKED
   203                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   204                                or    F,  FLAG_PGMODE_10b            ; LMM with independent IndexPage
   205                             ENDIF ; PGMODE FREE
   206                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   207  3C41                       endm
   208                          
   209                             ;-----------------------------------------------
   210                             ; Restore Large Memory Model Native Paging Mode
   211                             ;-----------------------------------------------
   212                             ;
   213                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   214                             ;        paging mode. Always works because it clears the PGMODE bits
   215                             ;        before OR-ing in the new ones. See RAM_RESTORE_NATIVE_PAGING
   216                             ;        for a faster method.
   217                             ;
   218                             ; INPUT: none
   219                             ;
   220                             ;  COST: 8 instruction cycles (in LMM only)
   221                          
   222                             macro RAM_RESTORE_NATIVE_PAGING
   223                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   224                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   225                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_11b ; LMM w/ IndexPage<==>StackPage
   226                             ENDIF ;  PGMODE LOCKED
   227                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   228                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b ; LMM with independent IndexPage
   229                             ENDIF ; PGMODE FREE
   230                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   231  3C41                       endm
   232                          
   233                             ;-----------------------------------------------
   234                             ; Force indexed addr mode operands to Stack Pg
   235                             ;-----------------------------------------------
   236                             ;
   237                             ;  DESC: Force instructions that use indexed address mode to reference the
   238                             ;        stack page (as defined by STK_PP). This macro sets the "Indexed
   239                             ;        Stack Mode" bit (LSB) of the PGMODE bit field in the CPU Flag
   240                             ;        register, F. (See also RAM_SETPAGE_IDX2STK, above.)
   241                             ;
   242                             ; INPUT: none
   243                             ;
   244                             ;  COST: 4 instruction cycles (in LMM only)
   245                          
   246                             macro RAM_X_POINTS_TO_STACKPAGE
   247                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   248                                or   F, FLAG_PGMODE_01b
   249                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   250  3C41                       endm
   251                          
   252                             ;-----------------------------------------------
   253                             ;  Force indexed addr mode operands to Index Pg
   254                             ;-----------------------------------------------
   255                             ;
   256                             ;  DESC: Permit instructions that use indexed address mode to reference page
   257                             ;        zero or the page pointed to by the IDX_PP register, depending on the
   258                             ;        setting of the MSb (or "Direct Page Mode" bit) of the PGMODE bits
   259                             ;        in the CPU Flag register, F. (This macro clears the PGMODE LSb.)
   260                             ;
   261                             ; INPUT: none
   262                             ;
   263                             ;  COST: 4 instruction cycles (in LMM only)
   264                          
   265                             macro RAM_X_POINTS_TO_INDEXPAGE
   266                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   267                                and  F, ~FLAG_PGMODE_01b
   268                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   269  3C41                       endm
   270                          
   271                             ;-----------------------------------------------
   272                             ;  Function Prologue
   273                             ;-----------------------------------------------
   274                             ;
   275                             ;  Prologue for functions that run in the LMM and SMM.
   276                             ;
   277                          
   278                             macro RAM_PROLOGUE( ACTUAL_CLASS )
   279                          
   280                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   281                             ; Nothing to do
   282                             ENDIF ; RAM_USE_CLASS_1
   283                          
   284                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   285                                IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   286                                   RAM_X_POINTS_TO_STACKPAGE         ; exit native paging mode!
   287                                ENDIF
   288                             ENDIF ; RAM_USE_CLASS_2
   289                          
   290                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   291                                IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   292                                   RAM_X_POINTS_TO_INDEXPAGE         ; exit native paging mode!
   293                                ENDIF
   294                             ENDIF ; RAM_USE_CLASS_3
   295                          
   296                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   297                             ; Nothing to do
   298                             ENDIF ; RAM_USE_CLASS_4
   299                          
   300  3C41                       endm
   301                          
   302                             ;-----------------------------------------------
   303                             ;  Function Epilogue
   304                             ;-----------------------------------------------
   305                             ;
   306                             ;  Prologue for functions that run in the LMM and SMM.
   307                             ;
   308                          
   309                             macro RAM_EPILOGUE( ACTUAL_CLASS )
   310                          
   311                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   312                             ; Nothing to do
   313                             ENDIF ; RAM_USE_CLASS_1
   314                          
   315                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   316                                RAM_RESTORE_NATIVE_PAGING
   317                             ENDIF ; RAM_USE_CLASS_2
   318                          
   319                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   320                                RAM_RESTORE_NATIVE_PAGING
   321                             ENDIF ; RAM_USE_CLASS_3
   322                          
   323                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   324                             ; Nothing to do
   325                             ENDIF ; RAM_USE_CLASS_4
   326                          
   327  3C41                       endm
   328                          
   329                             ;-----------------------------------------------
   330                             ;  Preserve Register
   331                             ;-----------------------------------------------
   332                             ;
   333                             ;  DESC: Preserve a register value on the stack
   334                             ;
   335                             ; INPUT: Name or address of register in I/O Space
   336                             ;        The I/O bank is an implicit parameter. That is, this function will
   337                             ;        Access the I/O bank currently specified by the CPU Flag register.
   338                             ;
   339                             ;  USES: CPU 'A' register
   340                             ;
   341                             ;  COST: 9 instruction cycles
   342                          
   343                             macro REG_PRESERVE( IOReg )
   344                             mov   A, reg[ @IOReg ]
   345                             push  A
   346  3C41                       endm
   347                          
   348                             ;-----------------------------------------------
   349                             ;  Restore Register
   350                             ;-----------------------------------------------
   351                             ;
   352                             ;  DESC: Restore a register value from the stack
   353                             ;
   354                             ; INPUT: Name or address of register in I/O Space
   355                             ;        The I/O bank is an implicit parameter. That is, this function will
   356                             ;        Access the I/O bank currently specified by the CPU Flag register.
   357                             ;
   358                             ;  USES: CPU 'A' register
   359                             ;
   360                             ;  COST: 10 instruction cycles
   361                          
   362                             macro REG_RESTORE( IOReg )
   363                             pop   A
   364                             mov   reg[ @IOReg ], A
   365  3C41                       endm
   366                          
   367                             ;-----------------------------------------------
   368                             ;  Preserve Volatile Page Pointer Registers
   369                             ;-----------------------------------------------
   370                             ;
   371                             ;  DESC: Invoked by ISRs before switching to the LMM mode and calling
   372                             ;        functions that require on it.
   373                             ;
   374                             ; INPUT: none
   375                             ;
   376                             ;  USES: CPU 'A' register
   377                             ;
   378                             ;  COST: 45 instruction cycles (in LMM only)
   379                          
   380                             macro ISR_PRESERVE_PAGE_POINTERS
   381                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   382                                REG_PRESERVE CUR_PP
   383                                REG_PRESERVE IDX_PP
   384                                REG_PRESERVE MVR_PP
   385                                REG_PRESERVE MVW_PP
   386                             ENDIF
   387  3C41                       endm
   388                          
   389                             ;-----------------------------------------------
   390                             ;  Restore Volatile Page Pointer Registers
   391                             ;-----------------------------------------------
   392                             ;
   393                             ;  DESC: Undo for RAM_PRESERVE_PAGE_POINTERS macro. Invoked by ISRs after
   394                             ;        calling functions that run in the LMM mode and before executing
   395                             ;        the RETI instruction.
   396                             ;
   397                             ; INPUT: none
   398                             ;
   399                             ;  USES: CPU 'A' register
   400                             ;
   401                             ;  COST: 50 instruction cycles (in LMM only)
   402                          
   403                             macro ISR_RESTORE_PAGE_POINTERS
   404                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   405                                REG_RESTORE MVW_PP
   406                                REG_RESTORE MVR_PP
   407                                REG_RESTORE IDX_PP
   408                                REG_RESTORE CUR_PP
   409                             ENDIF
   410  3C41                       endm
     1                          ;  Generated by PSoC Designer 5.4.2946
     2                          ;
     3                          ;@Id: boot.tpl#904 @
     4                          ;=============================================================================
     5                          ;  FILENAME:   boot.asm
     6                          ;  Version:    1.50
     7                          ;
     8                          ;  DESCRIPTION:
     9                          ;  M8C Boot Code for CY8C22x45 microcontroller devices.
    10                          ;
    11                          ;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
    12                          ;
    13                          ; NOTES:
    14                          ; PSoC Designer's Device Editor uses a template file, BOOT.TPL, located in
    15                          ; the project's root directory to create BOOT.ASM. Any changes made to
    16                          ; BOOT.ASM will be  overwritten every time the project is generated; therefore
    17                          ; changes should be made to BOOT.TPL not BOOT.ASM. Care must be taken when
    18                          ; modifying BOOT.TPL so that replacement strings (such as @PROJECT_NAME)
    19                          ; are not accidentally modified.
    20                          ;
    21                          ;=============================================================================
    22                          
    23                          include ".\lib\GlobalParams.inc"	;File generated by PSoC Designer (Project dependent)
    24                          include "m8c.inc"			;Part specific file
    25                          include "m8ssc.inc"			;Part specific file
    26                          include "memory.inc"			;File generated by PSoC Designer (Project dependent)
    27                          
    28                          ;--------------------------------------
    29                          ; Export Declarations
    30                          ;--------------------------------------
    31                          
    32                          export __Start
    33                          IF	(TOOLCHAIN & HITECH)
    34                          ELSE
    35                          export __bss_start
    36                          export __data_start
    37                          export __idata_start
    38                          export __func_lit_start
    39                          export __text_start
    40                          ENDIF
    41                          export  _bGetPowerSetting
    42                          export   bGetPowerSetting
    43                          
    44                          
    45                          ;--------------------------------------
    46                          ; Optimization flags
    47                          ;--------------------------------------
    48                          ;
    49                          ; To change the value of these flags, modify the file boot.tpl, not
    50                          ; boot.asm. See the notes in the banner comment at the beginning of
    51                          ; this file.
    52                          
    53                          ; Optimization for Assembly language (only) projects and C-language projects
    54                          ; that do not depend on the C compiler to initialize the values of RAM variables.
    55                          ;   Set to 1: Support for C Run-time Environment initialization
    56                          ;   Set to 0: Support for C not included. Faster start up, smaller code space.
    57                          ;
    58                          IF	(TOOLCHAIN & HITECH)
    59                          ; The C compiler will customize the startup code - it's not required here
    60                          
    61  0000                    C_LANGUAGE_SUPPORT:              equ 0
    62                          ELSE
    63                          C_LANGUAGE_SUPPORT:              equ 1
    64                          ENDIF
    65                          
    66                          
    67                          ; For historical reasons, by default the boot code uses an lcall instruction
    68                          ; to invoke the user's _main code. If _main executes a return instruction,
    69                          ; boot provides an infinite loop. By changing the following equate from zero
    70                          ; to 1, boot's lcall will be replaced by a ljmp instruction, saving two
    71                          ; bytes on the stack which are otherwise required for the return address. If
    72                          ; this option is enabled, _main must not return. (Beginning with the 4.2
    73                          ; release, the C compiler automatically places an infinite loop at the end
    74                          ; of main, rather than a return instruction.)
    75                          ;
    76  0000                    ENABLE_LJMP_TO_MAIN:             equ 0
    77                          
    78                          ; The following equate is required for proper operation. Reseting its value
    79                          ; is discouraged.  WAIT_FOR_32K is effective only if the crystal oscillator is
    80                          ; selected.  If the designer chooses to not wait then stabilization of the ECO
    81                          ; and PLL_Lock must take place within user code. See the family data sheet for
    82                          ; the requirements of starting the ECO and PLL lock mode.
    83                          ;
    84                          ;   Set to 1: Wait for XTAL (& PLL if selected) to stabilize before
    85                          ;                invoking main
    86                          ;   Set to 0: Boot code does not wait; clock may not have stabilized by
    87                          ;               the time code in main starts executing.
    88                          ;
    89  0001                    WAIT_FOR_32K:                    equ 1
    90                          
    91                          ;-----------------------------------------------------------------------------
    92                          ; Interrupt Vector Table
    93                          ;-----------------------------------------------------------------------------
    94                          ;
    95                          ; Interrupt vector table entries are 4 bytes long.  Each one contains
    96                          ; a jump instruction to an ISR (Interrupt Service Routine), although
    97                          ; very short ISRs could be encoded within the table itself. Normally,
    98                          ; vector jump targets are modified automatically according to the user
    99                          ; modules selected. This occurs when the 'Generate Application' opera-
   100                          ; tion is run causing PSoC Designer to create boot.asm and the other
   101                          ; configuration files. If you need to hard code a vector, update the
   102                          ; file boot.tpl, not boot.asm. See the banner comment at the beginning
   103                          ; of this file.
   104                          ;-----------------------------------------------------------------------------
   105                          
   106                              AREA TOP (ROM, ABS, CON)
   107                          
   108  0000                        org   0                        ;Reset Interrupt Vector
   109                          IF	(TOOLCHAIN & HITECH)
   110                          ;   jmp   __Start                  ;C compiler fills in this vector
   111                          ELSE
   112                              jmp   __Start                  ;First instruction executed following a Reset
   113                          ENDIF
   114                              ;@PSoC_BOOT_ISR_UserCode_START@
   115                              ;---------------------------------------------------
   116                              ; Insert your custom code below this banner
   117                              ;---------------------------------------------------
   118                          
   119  0004                        org   04h                      ;Low Voltage Detect (LVD) Interrupt Vector
   120  0004  30                    halt                           ;Stop execution if power falls too low
   121                          
   122  0008                        org   08h                      ;Analog Column 0 Interrupt Vector
   123                              // call	void_handler
   124  0008  7E                    reti
   125                          
   126  000C                        org   0Ch                      ;Analog Column 1 Interrupt Vector
   127                              // call	void_handler
   128  000C  7E                    reti
   129                          
   130  0010                        org   10h                      ;Analog Column 2 Interrupt Vector
   131                              // call	void_handler
   132  0010  7E                    reti
   133                          
   134  0014                        org   14h                      ;Analog Column 3 Interrupt Vector
   135                              // call	void_handler
   136  0014  7E                    reti
   137                              
   138  0018                        org   18h                      ;VC3 Interrupt Vector
   139                              // call	void_handler
   140  0018  7E                    reti
   141                          
   142  001C                        org   1Ch                      ;GPIO Interrupt Vector
   143                              // call	void_handler
   144  001C  7E                    reti
   145                          
   146  0020                        org   20h                      ;PSoC Block DBC00 Interrupt Vector
   147                              // call	void_handler
   148  0020  7E                    reti
   149                          
   150  0024                        org   24h                      ;PSoC Block DBC01 Interrupt Vector
   151  0024  7C 3B93               lcall _Timer16ISR
   152  0027  7E                    reti
   153                          
   154  0028                        org   28h                      ;PSoC Block DCC02 Interrupt Vector
   155  0028  7D 304F               ljmp	_UART_Sensor_TX_ISR
   156  002B  7E                    reti
   157                          
   158  002C                        org   2Ch                      ;PSoC Block DCC03 Interrupt Vector
   159  002C  7C 3BC3               lcall _SensorUART
   160  002F  7E                    reti
   161                              
   162  0030                        org   30h                      ;PSoC Block DBC10 Interrupt Vector
   163  0030  7D 2C8F               ljmp	_PWM8_BL_ISR
   164  0033  7E                    reti
   165                          
   166  0034                        org   34h                      ;PSoC Block DBC11 Interrupt Vector
   167                              // call	void_handler
   168  0034  7E                    reti
   169                          
   170  0038                        org   38h                      ;PSoC Block DCC12 Interrupt Vector
   171  0038  7D 2EFF               ljmp	_UART_Board_TX_ISR
   172  003B  7E                    reti
   173                          
   174  003C                        org   3Ch                      ;PSoC Block DCC13 Interrupt Vector
   175  003C  7C 3B7A               lcall _BoardUART
   176  003F  7E                    reti
   177                          
   178  0050                        org   50h                      ;SARADC Interrupt Vector
   179  0050  7D 2D4E               ljmp	_SAR10_ISR
   180  0053  7E                    reti
   181                          
   182  0054                        org   54h                      ;CSD0 Interrupt Vector
   183                              // call	void_handler
   184  0054  7E                    reti
   185                          
   186  0058                        org   58h                      ;CSD1 Interrupt Vector
   187                              // call	void_handler
   188  0058  7E                    reti
   189                          
   190  005C                        org   5Ch                      ;RTC Interrupt Vector
   191                              // call	void_handler
   192  005C  7E                    reti
   193                              
   194  0050                        org 50h                        ;SAR10 Interrupt Vector
   195  0050  7D 2D4E               ljmp	_SAR10_ISR
   196  0053  7E                    reti
   197                          
   198  0060                        org   60h                      ;PSoC I2C Interrupt Vector
   199                              // call	void_handler
   200  0060  7E                    reti
   201                          
   202  0064                        org   64h                      ;Sleep Timer Interrupt Vector
   203                              // call	void_handler
   204  0064  7E                    reti
   205                              ;---------------------------------------------------
   206                              ; Insert your custom code above this banner
   207                              ;---------------------------------------------------
   208                              ;@PSoC_BOOT_ISR_UserCode_END@
   209                          
   210                          ;-----------------------------------------------------------------------------
   211                          ;  Start of Execution.
   212                          ;-----------------------------------------------------------------------------
   213                          ;  The Supervisory ROM SWBootReset function has already completed the
   214                          ;  calibrate1 process, loading trim values for 5 volt operation.
   215                          ;
   216                          
   217                          IF	(TOOLCHAIN & HITECH)
   218                           	AREA PD_startup(CODE, REL, CON)
   219                          ELSE
   220                              org 68h
   221                          ENDIF
   222  3F43                    __Start:
   223                          
   224                              ; initialize SMP values for voltage stabilization, if required,
   225                              ; leaving power-on reset (POR) level at the default (low) level, at
   226                              ; least for now. 
   227                              ;
   228  3F43  71 10                 M8C_SetBank1
   229  3F45  62 E3 87              mov   reg[VLT_CR], SWITCH_MODE_PUMP_JUST | LVD_TBEN_JUST | TRIP_VOLTAGE_JUST
   230  3F48  70 EF                 M8C_SetBank0
   231                          
   232  3F4A  62 E3 38          M8C_ClearWDTAndSleep			   ; Clear WDT before enabling it.
   233                          IF ( WATCHDOG_ENABLE )             ; WDT selected in Global Params
   234  3F4D  41 FF EF              M8C_EnableWatchDog
   235                          ENDIF
   236                          
   237  3F50  43 FE 04              or reg[CPU_SCR1], CPU_SCR1_ECO_ALLOWED ; Allow ECO being enabled
   238                          
   239                              ;---------------------------
   240                              ; Set up the Temporary stack
   241                              ;---------------------------
   242                              ; A temporary stack is set up for the SSC instructions.
   243                              ; The real stack start will be assigned later.
   244                              ;
   245  0080                    _stack_start:          equ 80h
   246  3F53  50 80                 mov   A, _stack_start          ; Set top of stack to end of used RAM
   247  3F55  4E                    swap  SP, A                    ; This is only temporary if going to LMM
   248                          
   249                              ;------------------------
   250                              ; Set Power-related Trim 
   251                              ;------------------------
   252  3F56  62 E3 38          M8C_ClearWDTAndSleep ; Clear WDT before enabling it.
   253                          IF ( POWER_SETTING & POWER_SET_5V0)            ; *** 5.0 Volt operation   ***
   254                           IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
   255                              or  reg[CPU_SCR1], CPU_SCR1_SLIMO
   256                              M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_5V_6MHZ, 1, SSCTBL1_TRIM_BGR_5V
   257                           ENDIF
   258                          ENDIF ; 5.0 V Operation
   259                          
   260                          IF ( POWER_SETTING & POWER_SET_3V3)            ; *** 3.3 Volt operation   ***
   261                           IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
   262                              or  reg[CPU_SCR1], CPU_SCR1_SLIMO
   263                              M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_3V_6MHZ, 1, SSCTBL1_TRIM_BGR_3V
   264                           ELSE                                          ; *** 12MHZ Main Oscillator ***
   265                              M8SSC_SetTableTrims  1, SSCTBL1_TRIM_IMO_3V_24MHZ, SSCTBL1_TRIM_BGR_3V
   266                           ENDIF
   267                          ENDIF ; 3.3 Volt Operation
   268                          
   269                          IF ( POWER_SETTING & POWER_SET_2V7_12MHZ)      ; *** 2.7 Volts / 12MHZ operation ***
   270                              or  reg[CPU_SCR1], CPU_SCR1_SLIMO
   271                              M8SSC_SetTableTrims  2, SSCTBL2_TRIM_IMO_2V_12MHZ, SSCTBL2_TRIM_BGR_2V
   272                          ENDIF ; *** 2.7 Volts / 12MHZ operation ***
   273                          
   274                          IF ( POWER_SETTING & POWER_SET_2V7_6MHZ)       ; *** 2.7 Volts /  6MHZ operation ***
   275                              or  reg[CPU_SCR1], CPU_SCR1_SLIMO
   276                              M8SSC_SetTableTrims  2, SSCTBL2_TRIM_IMO_2V_6MHZ,  SSCTBL2_TRIM_BGR_2V
   277                          ENDIF ; *** 2.7 Volts /  6MHZ operation ***
   278                          
   279  3F59  55 F8 00              mov  [bSSC_KEY1],  0           ; Lock out Flash and Supervisiory operations
   280  3F5C  55 F9 00              mov  [bSSC_KEYSP], 0
   281                          
   282                              ;---------------------------------------
   283                              ; Initialize Crystal Oscillator and PLL
   284                              ;---------------------------------------
   285                          IF ( SELECT_32K & WAIT_FOR_32K )
   286                              ; If the user has requested the External Crystal Oscillator (ECO) then turn it
   287                              ; on and wait for it to stabilize and the system to switch over to it. The PLL
   288                              ; is left off.  The SleepTimer period is set to 1 sec to time the wait for
   289                              ; the ECO to stabilize.
   290                              ;
   291                              M8C_SetBank1
   292                              mov   reg[OSC_CR0], (SELECT_32K_JUST | OSC_CR0_SLEEP_1Hz | OSC_CR0_CPU_12MHz)
   293                              M8C_SetBank0
   294                              M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get a full second
   295                              or    reg[INT_MSK0], INT_MSK0_SLEEP   ; Enable latching of SleepTimer interrupt
   296                              mov   reg[INT_VC],   0                ; Clear all pending interrupts
   297                          .WaitFor1s:
   298                              tst   reg[INT_CLR0], INT_MSK0_SLEEP   ; Test the SleepTimer Interrupt Status
   299                              jz   .WaitFor1s                       ; Interrupt will latch but will not dispatch
   300                                                                    ;  since interrupts are not globally enabled
   301                          ELSE ; !( SELECT_32K & WAIT_FOR_32K )
   302                              ; Either no ECO, or waiting for stable clock is to be done in main
   303  3F5F  71 10                 M8C_SetBank1
   304  3F61  62 E0 12              mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | OSC_CR0_CPU_12MHz)
   305  3F64  70 EF                 M8C_SetBank0
   306  3F66  62 E3 38              M8C_ClearWDTAndSleep           ; Reset the watch dog
   307                          
   308                          ENDIF ;( SELECT_32K & WAIT_FOR_32K )
   309                          
   310                          IF ( PLL_MODE )
   311                              ; Crystal is now fully operational (assuming WAIT_FOR_32K was enabled).
   312                              ; Now start up PLL if selected, and wait 16 msec for it to stabilize.
   313                              ;
   314                              M8C_SetBank1
   315                              mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_3MHz)
   316                              M8C_SetBank0
   317                              M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get full period
   318                              mov   reg[INT_VC], 0                  ; Clear all pending interrupts
   319                          
   320                          .WaitFor16ms:
   321                              tst   reg[INT_CLR0],INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
   322                              jz   .WaitFor16ms
   323                              M8C_SetBank1                          ; continue boot at CPU Speed of SYSCLK/2
   324                              mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_12MHz)
   325                              M8C_SetBank0
   326                          
   327                          IF      ( WAIT_FOR_32K )
   328                          ELSE ; !( WAIT_FOR_32K )
   329                              ; Option settings (PLL-Yes, ECO-No) are incompatible - force a syntax error
   330                              ERROR_PSoC Disabling WAIT_FOR_32K requires that the PLL_Lock must be enabled in user code.
   331                          ENDIF ;(WAIT_FOR_32K)
   332                          ENDIF ;(PLL_MODE)
   333                          
   334                          	;-------------------------------------------------------
   335                              ; Initialize Proper Drive Mode for External Clock Pin
   336                              ;-------------------------------------------------------
   337                          
   338                              ; Change EXTCLK pin from Hi-Z Analog (110b) drive mode to Hi-Z (010b) drive mode
   339                          
   340                          IF (SYSCLK_SOURCE)
   341                              and reg[PRT1DM2],  ~0x10        ; Clear bit 4 of EXTCLK pin's DM2 register 
   342                          ENDIF
   343                              ; EXTCLK pin is now in proper drive mode to input the external clock signal
   344                          
   345                          IF	(TOOLCHAIN & HITECH)
   346                              ;---------------------------------------------
   347                              ; HI-TECH initialization: Enter the Large Memory Model, if applicable
   348                              ;---------------------------------------------
   349                          	global		__Lstackps
   350  3F69  50 00             	mov     a,low __Lstackps
   351  3F6B  4E                	swap    a,sp
   352                          
   353                          IF ( SYSTEM_LARGE_MEMORY_MODEL )
   354  3F6C  62 D1 03              RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
   355  3F6F  62 D3 03              RAM_SETPAGE_IDX2STK            ; initialize other page pointers
   356  3F72  62 D0 00              RAM_SETPAGE_CUR 0
   357  3F75  62 D5 00              RAM_SETPAGE_MVW 0
   358  3F78  62 D4 00              RAM_SETPAGE_MVR 0
   359                              IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
   360                                or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
   361                              ELSE
   362  3F7B  71 80                   or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
   363                              ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
   364                          ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   365                          ELSE
   366                              ;---------------------------------------------
   367                              ; ImageCraft Enter the Large Memory Model, if applicable
   368                              ;---------------------------------------------
   369                          IF ( SYSTEM_LARGE_MEMORY_MODEL )
   370                              RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
   371                              mov   A, SYSTEM_STACK_BASE_ADDR        ;   and offset, if any
   372                              swap  A, SP
   373                              RAM_SETPAGE_IDX2STK            ; initialize other page pointers
   374                              RAM_SETPAGE_CUR 0
   375                              RAM_SETPAGE_MVW 0
   376                              RAM_SETPAGE_MVR 0
   377                          
   378                            IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
   379                              or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
   380                            ELSE
   381                              or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
   382                            ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
   383                          ELSE
   384                              mov   A, __ramareas_end        ; Set top of stack to end of used RAM
   385                              swap  SP, A
   386                          ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   387                          ENDIF ;	TOOLCHAIN
   388                          
   389                              ;@PSoC_BOOT_LOADCFG_UserCode_START@
   390                              ;---------------------------------------------------
   391                              ; Insert your custom code below this banner
   392                              ;---------------------------------------------------
   393                          
   394                              ;---------------------------------------------------
   395                              ; Insert your custom code above this banner
   396                              ;---------------------------------------------------
   397                              ;@PSoC_BOOT_LOADCFG_UserCode_END@ 
   398                          
   399                              ;-------------------------
   400                              ; Load Base Configuration
   401                              ;-------------------------
   402                              ; Load global parameter settings and load the user modules in the
   403                              ; base configuration. Exceptions: (1) Leave CPU Speed fast as possible
   404                              ; to minimize start up time; (2) We may still need to play with the
   405                              ; Sleep Timer.
   406                              ;
   407  3F7D  7C 2AB1               lcall LoadConfigInit
   408                          
   409                              ;-----------------------------------
   410                              ; Initialize C Run-Time Environment
   411                              ;-----------------------------------
   412                          IF ( C_LANGUAGE_SUPPORT )
   413                          IF ( SYSTEM_SMALL_MEMORY_MODEL )
   414                              mov  A,0                           ; clear the 'bss' segment to zero
   415                              mov  [__r0],<__bss_start
   416                          BssLoop:
   417                              cmp  [__r0],<__bss_end
   418                              jz   BssDone
   419                              mvi  [__r0],A
   420                              jmp  BssLoop
   421                          BssDone:
   422                              mov  A,>__idata_start              ; copy idata to data segment
   423                              mov  X,<__idata_start
   424                              mov  [__r0],<__data_start
   425                          IDataLoop:
   426                              cmp  [__r0],<__data_end
   427                              jz   C_RTE_Done
   428                              push A
   429                              romx
   430                              mvi  [__r0],A
   431                              pop  A
   432                              inc  X
   433                              adc  A,0
   434                              jmp  IDataLoop
   435                          
   436                          ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
   437                          
   438                          IF ( SYSTEM_LARGE_MEMORY_MODEL )
   439                              mov   reg[CUR_PP], >__r0           ; force direct addr mode instructions
   440                                                                 ; to use the Virtual Register page.
   441                          
   442                              ; Dereference the constant (flash) pointer pXIData to access the start
   443                              ; of the extended idata area, "xidata." Xidata follows the end of the
   444                              ; text segment and may have been relocated by the Code Compressor.
   445                              ;
   446                              mov   A, >__pXIData                ; Get the address of the flash
   447                              mov   X, <__pXIData                ;   pointer to the xidata area.
   448                              push  A
   449                              romx                               ; get the MSB of xidata's address
   450                              mov   [__r0], A
   451                              pop   A
   452                              inc   X
   453                              adc   A, 0
   454                              romx                               ; get the LSB of xidata's address
   455                              swap  A, X
   456                              mov   A, [__r0]                    ; pXIData (in [A,X]) points to the
   457                                                                 ;   XIData structure list in flash
   458                              jmp   .AccessStruct
   459                          
   460                              ; Unpack one element in the xidata "structure list" that specifies the
   461                              ; values of C variables. Each structure contains 3 member elements.
   462                              ; The first is a pointer to a contiguous block of RAM to be initial-
   463                              ; ized. Blocks are always 255 bytes or less in length and never cross
   464                              ; RAM page boundaries. The list terminates when the MSB of the pointer
   465                              ; contains 0xFF. There are two formats for the struct depending on the
   466                              ; value in the second member element, an unsigned byte:
   467                              ; (1) If the value of the second element is non-zero, it represents
   468                              ; the 'size' of the block of RAM to be initialized. In this case, the
   469                              ; third member of the struct is an array of bytes of length 'size' and
   470                              ; the bytes are copied to the block of RAM.
   471                              ; (2) If the value of the second element is zero, the block of RAM is
   472                              ; to be cleared to zero. In this case, the third member of the struct
   473                              ; is an unsigned byte containing the number of bytes to clear.
   474                          
   475                          .AccessNextStructLoop:
   476                              inc   X                            ; pXIData++
   477                              adc   A, 0
   478                          .AccessStruct:                         ; Entry point for first block
   479                              ;
   480                              ; Assert: pXIData in [A,X] points to the beginning of an XIData struct.
   481                              ;
   482                              M8C_ClearWDT                       ; Clear the watchdog for long inits
   483                              push  A
   484                              romx                               ; MSB of RAM addr (CPU.A <- *pXIData)
   485                              mov   reg[MVW_PP], A               ;   for use with MVI write operations
   486                              inc   A                            ; End of Struct List? (MSB==0xFF?)
   487                              jz    .C_RTE_WrapUp                ;   Yes, C runtime environment complete
   488                              pop   A                            ; restore pXIData to [A,X]
   489                              inc   X                            ; pXIData++
   490                              adc   A, 0
   491                              push  A
   492                              romx                               ; LSB of RAM addr (CPU.A <- *pXIData)
   493                              mov   [__r0], A                    ; RAM Addr now in [reg[MVW_PP],[__r0]]
   494                              pop   A                            ; restore pXIData to [A,X]
   495                              inc   X                            ; pXIData++ (point to size)
   496                              adc   A, 0
   497                              push  A
   498                              romx                               ; Get the size (CPU.A <- *pXIData)
   499                              jz    .ClearRAMBlockToZero         ; If Size==0, then go clear RAM
   500                              mov   [__r1], A                    ;             else downcount in __r1
   501                              pop   A                            ; restore pXIData to [A,X]
   502                          
   503                          .CopyNextByteLoop:
   504                              ; For each byte in the structure's array member, copy from flash to RAM.
   505                              ; Assert: pXIData in [A,X] points to previous byte of flash source;
   506                              ;         [reg[MVW_PP],[__r0]] points to next RAM destination;
   507                              ;         __r1 holds a non-zero count of the number of bytes remaining.
   508                              ;
   509                              inc   X                            ; pXIData++ (point to next data byte)
   510                              adc   A, 0
   511                              push  A
   512                              romx                               ; Get the data value (CPU.A <- *pXIData)
   513                              mvi   [__r0], A                    ; Transfer the data to RAM
   514                              tst   [__r0], 0xff                 ; Check for page crossing
   515                              jnz   .CopyLoopTail                ;   No crossing, keep going
   516                              mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
   517                              inc   A
   518                              mov   reg[ MVW_PP], A
   519                          .CopyLoopTail:
   520                              pop   A                            ; restore pXIData to [A,X]
   521                              dec   [__r1]                       ; End of this array in flash?
   522                              jnz   .CopyNextByteLoop            ;   No,  more bytes to copy
   523                              jmp   .AccessNextStructLoop        ;   Yes, initialize another RAM block
   524                          
   525                          .ClearRAMBlockToZero:
   526                              pop   A                            ; restore pXIData to [A,X]
   527                              inc   X                            ; pXIData++ (point to next data byte)
   528                              adc   A, 0
   529                              push  A
   530                              romx                               ; Get the run length (CPU.A <- *pXIData)
   531                              mov   [__r1], A                    ; Initialize downcounter
   532                              mov   A, 0                         ; Initialize source data
   533                          
   534                          .ClearRAMBlockLoop:
   535                              ; Assert: [reg[MVW_PP],[__r0]] points to next RAM destination and
   536                              ;         __r1 holds a non-zero count of the number of bytes remaining.
   537                              ;
   538                              mvi   [__r0], A                    ; Clear a byte
   539                              tst   [__r0], 0xff                 ; Check for page crossing
   540                              jnz   .ClearLoopTail               ;   No crossing, keep going
   541                              mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
   542                              inc   A
   543                              mov   reg[ MVW_PP], A
   544                              mov   A, 0                         ; Restore the zero used for clearing
   545                          .ClearLoopTail:
   546                              dec   [__r1]                       ; Was this the last byte?
   547                              jnz   .ClearRAMBlockLoop           ;   No,  continue
   548                              pop   A                            ;   Yes, restore pXIData to [A,X] and
   549                              jmp   .AccessNextStructLoop        ;        initialize another RAM block
   550                          
   551                          .C_RTE_WrapUp:
   552                              pop   A                            ; balance stack
   553                          
   554                          ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   555                          
   556                          C_RTE_Done:
   557                          
   558                          ENDIF ; C_LANGUAGE_SUPPORT
   559                          
   560                              ;-------------------------------
   561                              ; Voltage Stabilization for SMP
   562                              ;-------------------------------
   563                          
   564                          IF ( POWER_SETTING & POWER_SET_5V0)    ; 5.0V Operation
   565                          IF ( SWITCH_MODE_PUMP ^ 1 )            ; SMP is operational
   566                              ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   567                              ; When using the SMP at 5V, we must wait for Vdd to slew from 3.1V to
   568                              ; 5V before enabling the Precision Power-On Reset (PPOR).
   569                              ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   570                              or   reg[INT_MSK0],INT_MSK0_SLEEP
   571                              M8C_SetBank1
   572                              and   reg[OSC_CR0], ~OSC_CR0_SLEEP
   573                              or    reg[OSC_CR0],  OSC_CR0_SLEEP_512Hz
   574                              M8C_SetBank0
   575                              M8C_ClearWDTAndSleep                   ; Restart the sleep timer
   576                              mov   reg[INT_VC], 0                   ; Clear all pending interrupts
   577                          .WaitFor2ms:
   578                              tst   reg[INT_CLR0], INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
   579                              jz   .WaitFor2ms                       ; Branch fails when 2 msec has passed
   580                          ENDIF ; SMP is operational
   581                          ENDIF ; 5.0V Operation
   582                          
   583                              ;-------------------------------
   584                              ; Set Power-On Reset (POR) Level
   585                              ;-------------------------------
   586                          
   587                              ; This checks for improper selection of CPU voltage and processer speed ratings. If an improper 
                                selection 
   588                              ; is made (in the global resources section of the device editor), a compilation error is created
                                , disallowing
   589                              ; this selection. If the selection is valid, the POR level is then set.
   590                              ; Invalid cases checked: 
   591                              ;   -At 3.3 volt operation, the cpu rate must be at or below 12 MHz
   592                              ;   -At 2.7 volt operation, the cpu rate must be at or below 3 MHz
   593                          
   594                          
   595                          IF (POWER_SETTING & POWER_SET_3V3)		; 3.3V Operation?
   596                           IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** SLIMO = 6MHZ, Do Nothing ***
   597                           ELSE
   598                             IF (CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz)	; Not 24 MHz, Do Nothing...
   599                             ELSE						; Otherwise, 24 MHz is selected... raise error
   600                          	ERROR_PSoC SEE COMMENTS			; Error - cannot use 24 MHz w/ 3.3V operation (Clock <= 12 MHz)
   601                             ENDIF
   602                           ENDIF
   603                          ELSE
   604                          IF (POWER_SETTING & POWER_SET_2V7_12MHZ)	; 2.7V Operation with 12 MHz SLIMO?
   605                             IF(CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz)	; Not 12 MHz, do nothing. ("OSC_CR0_CPU_24MHz" setting is 
                                actually IMO/1)
   606                             ELSE						; Otherwise, 12 MHz is selected... raise error
   607                                ERROR_PSoC SEE COMMENTS			; Error - cannot use 12 MHz w/ 2.7V operation (Clock <= 3 MHz)
   608                             ENDIF;
   609                             IF(CPU_CLOCK_JUST ^ OSC_CR0_CPU_12MHz)	; Not 6 MHz, do nothing. ("OSC_CR0_CPU_12MHz" setting is a
                                ctually IMO/2)
   610                             ELSE						; Otherwise, 6 MHz is selected... raise error
   611                                ERROR_PSoC SEE COMMENTS			; Error - Cannot use 6 MHz w/ 2.7V operation (Clock <= 3 MHz)
   612                             ENDIF;CPU_12MHz
   613                          ELSE
   614                          IF (POWER_SETTING & POWER_SET_2V7_6MHZ)		; 2.7V Operation with 6 MHz SLIMO?
   615                             IF(CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz)	; Not 6 MHz, do nothing. ("OSC_CR0_CPU_24MHz" setting is a
                                ctually IMO/1)
   616                             ELSE						; Otherwise, 6 MHz is selected... raise error
   617                          	ERROR_PSoC SEE COMMENTS			; Error - cannot use 6 MHz w/ 2.7V operation (Clock <= 3 MHz)
   618                             ENDIF
   619                          ENDIF ; 2.7v w/ 6 MHz
   620                          ENDIF ; 2.7v w/ 12 MHz
   621                          ENDIF ; 3.3V w/ 24 MHz
   622                              ;  The writes to the VLT_CR register below include setting the POR to VLT_CR_POR_HIGH, 
   623                              ;  VLT_CR_POR_MID or VLT_CR_POR_LOW. Correctly setting this value is critical to the proper 
   624                              ;  operation of the PSoC. The POR protects the M8C from mis-executing when Vdd falls low. 
   625                              ;  These values should not be changed from the settings here. See Section "POR and LVD" of 
   626                              ;  Technical Reference Manual #001-48461 for more information.
   627                          
   628  3F80  71 10                 M8C_SetBank1
   629                          
   630                          IF (POWER_SETTING & POWER_SET_2V7)             ; 2.7V Operation?
   631                                                                         ;  Yes, lowest trip already set
   632                          ELSE                                           ;   No, must adjust POR...
   633                          IF (POWER_SETTING & POWER_SET_3V3)             ; 3.3V Operation?
   634                              or   reg[VLT_CR], VLT_CR_POR_MID           ;   Yes, change to midpoint trip
   635                          ELSE
   636                          IF (POWER_SETTING & POWER_SET_5V0)             ; 5.0V Operation?
   637                           IF (POWER_SETTING & POWER_SET_SLOW_IMO)       ; and Slow Mode?
   638                              or   reg[VLT_CR], VLT_CR_POR_MID           ;   Yes, set to midpoint trip
   639                           ELSE                                          ;    No, fast mode
   640                            IF ( CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz )    ;      As fast as 24MHz?
   641                              or   reg[VLT_CR], VLT_CR_POR_MID           ;         No, change to midpoint trip
   642                            ELSE ; 24HMz                                 ;
   643  3F82  43 E3 20              or    reg[VLT_CR], VLT_CR_POR_HIGH         ;        Yes, switch to	highest setting
   644                            ENDIF ; 24MHz
   645                           ENDIF ; Slow Mode
   646                          ENDIF ; 5.0V Operation
   647                          ENDIF ; 3.3V Operation
   648                          ENDIF ; 2.7V Operation
   649                          
   650  3F85  70 EF                 M8C_SetBank0
   651                          
   652                              ;----------------------------
   653                              ; Wrap up and invoke "main"
   654                              ;----------------------------
   655                          
   656                              ; Disable the Sleep interrupt that was used for timing above.  In fact,
   657                              ; no interrupts should be enabled now, so may as well clear the register.
   658                              ;
   659  3F87  62 E0 00              mov  reg[INT_MSK0],0
   660                          
   661                              ; Everything has started OK. Now select requested CPU & sleep frequency.
   662                              ;
   663  3F8A  71 10                 M8C_SetBank1
   664  3F8C  62 E0 13              mov reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | CPU_CLOCK_JUST)
   665  3F8F  43 E2 00              or  reg[OSC_CR2], (SLEEP_TIMER_JUST2)
   666  3F92  70 EF                 M8C_SetBank0
   667                          
   668                              ; Global Interrupt are NOT enabled, this should be done in main().
   669                              ; LVD is set but will not occur unless Global Interrupts are enabled.
   670                              ; Global Interrupts should be enabled as soon as possible in main().
   671                              ;
   672  3F94  62 E2 00              mov  reg[INT_VC],0             ; Clear any pending interrupts which may
   673                                                             ; have been set during the boot process.
   674                          IF	(TOOLCHAIN & HITECH)
   675  3F97  7D 3F9D           	ljmp  startup                  ; Jump to C compiler startup code
   676                          ELSE
   677                          IF ENABLE_LJMP_TO_MAIN
   678                              ljmp  _main                    ; goto main (no return)
   679                          ELSE
   680                              lcall _main                    ; call main
   681                          .Exit:
   682                              jmp  .Exit                     ; Wait here after return till power-off or reset
   683                          ENDIF
   684                          ENDIF ; TOOLCHAIN
   685                          
   686                              ;---------------------------------
   687                              ; Library Access to Global Parms
   688                              ;---------------------------------
   689                              ;
   690  3F9A                     bGetPowerSetting:
   691  3F9A                    _bGetPowerSetting:
   692                              ; Returns value of POWER_SETTING in the A register.
   693                              ; No inputs. No Side Effects.
   694                              ;
   695                          IF (POWER_SETTING & POWER_SET_2V7)
   696                              mov   A, POWER_SETTING | POWER_SET_SLOW_IMO
   697                          ELSE
   698  3F9A  50 10                 mov   A, POWER_SETTING          ; Supply voltage and internal main osc
   699                          ENDIF
   700  3F9C  7F                    ret
HI-TECH Software Macro Assembler (PSoC MCU) V9.61
Symbol Table                                                                                               Fri Jun 12 09:25:12 2015
           SELECT_32K_JUST 0000                  __Lstackps 0300          C_LANGUAGE_SUPPORT 0000                 _Timer16ISR 3B93  
             POWER_SET_2V7 0006               POWER_SET_3V3 0008               POWER_SETTING 0010               POWER_SET_5V0 0010  
               _SensorUART 3BC3            SLEEP_TIMER_JUST 0010                    CPU_SCR0 00FF                    CPU_SCR1 00FE  
          bGetPowerSetting 3F9A                    INT_MSK0 00E0          POWER_SET_2V7_6MHZ 0002                    PLL_MODE 0000  
                    HITECH 0002             FLAG_PGMODE_10b 0080                      IDX_PP 00D3                      CUR_PP 00D0  
                    INT_VC 00E2              CPU_CLOCK_JUST 0003                      MVR_PP 00D4                      MVW_PP 00D5  
         _bGetPowerSetting 3F9A                WAIT_FOR_32K 0001                      STK_PP 00D1               LVD_TBEN_JUST 0000  
                    VLT_CR 00E3             VLT_CR_POR_HIGH 0020       SWITCH_MODE_PUMP_JUST 0080           SLEEP_TIMER_JUST2 0000  
              _stack_start 0080                _PWM8_BL_ISR 2C8F                  _SAR10_ISR 2D4E   SYSTEM_LARGE_MEMORY_MODEL 0001  
       POWER_SET_2V7_12MHZ 0004      SYSTEM_MULTIPAGE_STACK 0000          POWER_SET_SLOW_IMO 0001               PLL_MODE_JUST 0000  
                 TOOLCHAIN 0002            SWITCH_MODE_PUMP 0001               SYSCLK_SOURCE 0000                     OSC_CR0 00E0  
                   OSC_CR2 00E2                     RES_WDT 00E3          CPU_SCR0_PORS_MASK 0010             WATCHDOG_ENABLE 0001  
        _UART_Board_TX_ISR 2EFF                  bSSC_KEYSP 00F9        CPU_SCR1_ECO_ALLOWED 0004              LoadConfigInit 2AB1  
       _UART_Sensor_TX_ISR 304F                     __Start 3F43                  _BoardUART 3B7A                   bSSC_KEY1 00F8  
         OSC_CR0_CPU_12MHz 0002           OSC_CR0_CPU_24MHz 0003                     startup 3F9D           SYSTEM_STACK_PAGE 0003  
             FLAG_XIO_MASK 0010                  SELECT_32K 0000           TRIP_VOLTAGE_JUST 0007  SYSTEM_IDXPG_TRACKS_STK_PP 0000  
HI-TECH Software Macro Assembler (PSoC MCU) V9.61
                                                                                                           Fri Jun 12 15:43:22 2015
     1                          
     2                          	; HI-TECH C COMPILER (Cypress PSOC) V9.61
     3                          	; Copyright (C) 1984-2008 HI-TECH Software
     4                          	;Serial no. HCPSOC-679591
     5                          
     6                          	; Auto-generated runtime startup code for final link stage.
     7                          
     8                          	;
     9                          	; Compiler options:
    10                          	;
    11                          	; --asmlist --errformat --chip=CY8C22345 --WARN=0 --OPT=asm,9 \
    12                          	; -OLCD_display -Moutput/LCD_display.mp --OUTDIR=./output \
    13                          	; ./obj/boot.obj ./obj/boardcommunication.p1 ./obj/ht1621b.p1 \
    14                          	; ./obj/lcd.p1 ./obj/main.p1 ./obj/particlesensor.p1 ./obj/si7020.p1 \
    15                          	; ./obj/software_iic.p1 lib/libpsoc.lib lib/libpsoc.lpp \
    16                          	; D:/Cypress/PSOCDE~1/5.4/Common/CY110F~1/tools/lib/CY8C22045/cms.lib
    17                          	;
    18                          
    19                          
    20                          	processor	CY8C22345
    21                          	macro	M8C_ClearWDT
    22                          	mov reg[0xE3],0x38
    23  3051                    	endm
    24                          
    25                          	psect	PD_startup,class=CODE
    26                          	psect	init,class=CODE
    27                          	psect	end_init,class=CODE
    28                          	psect	powerup,class=CODE
    29                          	psect	vectors,ovrld,class=CODE
    30                          	psect	text,class=CODE
    31                          	psect	maintext,class=CODE
    32                          	psect	intrtext,class=CODE
    33                          	psect	fnauto,class=RAM,space=1
    34                          	psect	bss,class=RAM,space=1
    35                          	psect	InterruptRAM,class=RAM,space=1
    36                          	psect	cdata,class=ROM,space=0,reloc=256
    37                          	psect	psoc_config,class=ROM
    38                          	psect	UserModules,class=ROM
    39                          	psect	strings,class=ROM
    40                          	psect	SSCParmBlk,abs,ovrld,class=RAM,space=1
    41  00F8                    	org	0xF8
    42  00F8                    	blk	8
    43                          
    44                          	psect	stackps,class=RAM
    45                          	global	__Lstackps, __stack_start__
    46  0300                    __stack_start__:
    47                          	psect	bss0,class=RAM,space=1
    48                          	psect	nvram0,class=RAM,space=1
    49                          	psect	rbit0,bit,class=RAM,space=1
    50                          	psect	nvbit0,bit,class=RAM,space=1
    51                          	psect	ramdata0,class=RAM,space=1
    52                          	psect	romdata0,class=BANKROM,space=0
    53                          	psect	bss1,class=RAM,space=1
    54                          	psect	nvram1,class=RAM,space=1
    55                          	psect	rbit1,bit,class=RAM,space=1
    56                          	psect	nvbit1,bit,class=RAM,space=1
    57                          	psect	ramdata1,class=RAM,space=1
    58                          	psect	romdata1,class=BANKROM,space=0
    59                          	psect	bss2,class=RAM,space=1
    60                          	psect	nvram2,class=RAM,space=1
    61                          	psect	rbit2,bit,class=RAM,space=1
    62                          	psect	nvbit2,bit,class=RAM,space=1
    63                          	psect	ramdata2,class=RAM,space=1
    64                          	psect	romdata2,class=BANKROM,space=0
    65                          	psect	bss3,class=RAM,space=1
    66                          	psect	nvram3,class=RAM,space=1
    67                          	psect	rbit3,bit,class=RAM,space=1
    68                          	psect	nvbit3,bit,class=RAM,space=1
    69                          	psect	ramdata3,class=RAM,space=1
    70                          	psect	romdata3,class=BANKROM,space=0
    71                          
    72                          	global	start,startup,_main
    73                          	global	reset_vec,intlevel0,intlevel1,intlevel2
    74  0003                    intlevel0:
    75  0003                    intlevel1:
    76  0003                    intlevel2:		; for C funcs called from assembler
    77                          
    78                          	fnconf	fnauto,??,?
    79                          	fnroot	_main
    80  006C                    TMP_DR0	equ	108
    81  006D                    TMP_DR1	equ	109
    82  006E                    TMP_DR2	equ	110
    83  006F                    TMP_DR3	equ	111
    84  00D0                    CUR_PP	equ	208
    85  00D1                    STK_PP	equ	209
    86  00D3                    IDX_PP	equ	211
    87  00D4                    MVR_PP	equ	212
    88  00D5                    MVW_PP	equ	213
    89  00F7                    CPU_F	equ	247
    90                          	psect	vectors
    91  0000                    reset_vec:
    92  0000                    start:
    93                          	global	__Start
    94  0000  7D 3F43           	ljmp	__Start
    95                          
    96                          	psect	init
    97  3F9D                    startup:
    98  3F9D  62 E3 38          	M8C_ClearWDT
    99  3FA0  71 80             	or	f, 0x80	;select multiple RAM page mode
   100  3FA2  70 BF             	and	f, 0xBF
   101                          
   102                          ;	Clear uninitialized variables in bank 0
   103                          	global	__Lbss0
   104  3FA4  62 D1 00          	mov	reg[STK_PP],0
   105  3FA7  50 00             	mov	a,low __Lbss0
   106  3FA9  4E                	swap	a,sp
   107  3FAA  50 00             	mov	a,0
   108  3FAC  57 5C             	mov	x,92
   109  3FAE                    bssloop0:
   110  3FAE  08                	push	a
   111  3FAF  79                	dec	x
   112  3FB0  BFFD              	jnz	bssloop0
   113                          
   114                          ;	Copy initialized data into bank 0
   115                          	global	__Lromdata0,__Lramdata0
   116  3FB2  57 65             	mov	x,low __Lromdata0
   117  3FB4  50 5C             	mov	a,low __Lramdata0
   118  3FB6  4E                	swap	a,sp
   119  3FB7                    dataloop0:
   120  3FB7  50 00             	mov	a,high __Lromdata0
   121  3FB9  28                	romx
   122  3FBA  08                	push	a
   123  3FBB  75                	inc	x
   124  3FBC  5B                		mov	a,x
   125  3FBD  39 6C             cmp	a,low (__Lromdata0+7)
   126  3FBF  BFF7              	jnz	dataloop0
   127  3FC1  62 D0 00          	mov	reg[CUR_PP],0
   128  3FC4  62 D1 03          	mov	reg[STK_PP],3
   129  3FC7  50 00             	mov	a,low __Lstackps
   130  3FC9  4E                	swap	a,sp
   131                          
   132  3FCA  7D 3C41           	ljmp	_main
HI-TECH Software Macro Assembler (PSoC MCU) V9.61
Symbol Table                                                                                               Fri Jun 12 15:43:22 2015
    __Lramdata0 005C       __Lstackps 0300      __Lromdata0 0065            _main 3C41            start 0000        dataloop0 3FB7  
         CUR_PP 00D0           STK_PP 00D1        intlevel0 0003        intlevel1 0003        intlevel2 0003        reset_vec 0000  
       bssloop0 3FAE          __Lbss0 0000          __Start 3F43          startup 3F9D  __stack_start__ 0300  
