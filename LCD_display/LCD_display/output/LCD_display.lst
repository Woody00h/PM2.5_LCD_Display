

HI-TECH Software Macro Assembler (PSoC MCU) V9.61
                                                                                                           Thu Jul 09 16:18:16 2015


     1                          	opt	pw 132
     2                          	psect	text,global,class=CODE,delta=1
     3                          	psect	maintext,global,class=CODE,delta=1
     4                          	psect	ramdata0,global,class=RAM,space=1,delta=1
     5                          	psect	romdata0,global,class=BANKROM,delta=1
     6                          	psect	cdata,global,reloc=256,class=ROM,delta=1
     7                          	psect	bss0,global,class=RAM,space=1,delta=1
     8                          
     9                          	psect	text
    10  006C                    TMP_DR0	equ	108
    11  006D                    TMP_DR1	equ	109
    12  006E                    TMP_DR2	equ	110
    13  006F                    TMP_DR3	equ	111
    14  00D0                    CUR_PP	equ	208
    15  00D1                    STK_PP	equ	209
    16  00D3                    IDX_PP	equ	211
    17  00D4                    MVR_PP	equ	212
    18  00D5                    MVW_PP	equ	213
    19  00E8                    MUL0_X	equ	232
    20  00E9                    MUL0_Y	equ	233
    21  00EA                    MUL0_DH	equ	234
    22  00EB                    MUL0_DL	equ	235
    23  00A8                    MUL1_X	equ	168
    24  00A9                    MUL1_Y	equ	169
    25  00AA                    MUL1_DH	equ	170
    26  00AB                    MUL1_DL	equ	171
    27                          ;stack_size is 28 bss 131
    28                          ; Stacksize: 28; Bank 0 TOTAL: 167 (0xA7); Other banks TOTAL: 0 (0x0)
    29  008B                    main@ret	equ	??_main
    30  008D                    FrameCheck@checksum	equ	??_FrameCheck
    31  008F                    FrameCheck@i	equ	??_FrameCheck+2
    32  008D                    Si7020Init@my_data	equ	??_Si7020Init
    33  008D                    Si7020Read_Temp_after_RHM@buffer	equ	??_Si7020Read_Temp_after_RHM
    34  008E                    Si7020Read_Temp_after_RHM@ret	equ	??_Si7020Read_Temp_after_RHM+1
    35  008D                    Si7020CalcRH@data	equ	??_Si7020CalcRH
    36  008F                    Si7020CalcRH@temp	equ	??_Si7020CalcRH+2
    37  0093                    Si7020CalcRH@result	equ	??_Si7020CalcRH+6
    38  008D                    LCDOuputAll@k	equ	??_LCDOuputAll
    39  008D                    Si7020CalcTemp@data	equ	??_Si7020CalcTemp
    40  008F                    Si7020CalcTemp@temp	equ	??_Si7020CalcTemp+2
    41  0093                    Si7020CalcTemp@result	equ	??_Si7020CalcTemp+6
    42  008D                    B2BSendData@i	equ	??_B2BSendData
    43  008E                    B2BSendData@sum	equ	??_B2BSendData+1
    44  008D                    LightRank@light	equ	??_LightRank
    45  008F                    LightRank@i	equ	??_LightRank+2
    46  0090                    LightRank@duty	equ	??_LightRank+3
    47  008D                    Si7020Read_RH_NHM@buffer	equ	??_Si7020Read_RH_NHM
    48  008E                    Si7020Read_RH_NHM@ret	equ	??_Si7020Read_RH_NHM+1
    49  008D                    B2BFrameCheck@i	equ	??_B2BFrameCheck
    50  008E                    B2BFrameCheck@checksum	equ	??_B2BFrameCheck+1
    51  008D                    LeftRotate@k	equ	??_LeftRotate
    52  008E                    _LeftRotate$5259	equ	??_LeftRotate+1
    53  008D                    SendCmd@command	equ	??_SendCmd
    54  00A0                    ___lmul@product	equ	??___lmul
    55  0098                    ___lmul@multiplier	equ	?___lmul
    56  009C                    ___lmul@multiplicand	equ	?___lmul+4
    57  008E                    ShowLife@life	equ	??_ShowLife
    58  008F                    ShowLife@index	equ	??_ShowLife+1
    59  0090                    ShowLife@temp	equ	??_ShowLife+2
    60  008E                    ShowHumiTemp@value	equ	??_ShowHumiTemp
    61  008F                    ShowHumiTemp@temp	equ	??_ShowHumiTemp+1
    62  0090                    ShowHumiTemp@index	equ	??_ShowHumiTemp+2
    63  009A                    ___wmul@multiplier	equ	??___wmul
    64  009C                    ___wmul@product	equ	??___wmul+2
    65  0098                    ___wmul@multiplicand	equ	?___wmul
    66  008E                    DisplayPMxx@pm	equ	??_DisplayPMxx
    67  0090                    DisplayPMxx@temp	equ	??_DisplayPMxx+2
    68  0092                    DisplayPMxx@index	equ	??_DisplayPMxx+4
    69  0094                    DisplayPMxx@k	equ	??_DisplayPMxx+6
    70  008F                    WriteAll_1621@p	equ	??_WriteAll_1621
    71  0090                    WriteAll_1621@addr	equ	??_WriteAll_1621+1
    72  0091                    WriteAll_1621@i	equ	??_WriteAll_1621+2
    73  008E                    WriteAll_1621@cnt	equ	?_WriteAll_1621
    74  008F                    Si7020SendCommand@cmd	equ	??_Si7020SendCommand
    75  0090                    IRcvBytes@s	equ	??_IRcvBytes
    76  0091                    IRcvBytes@sla	equ	??_IRcvBytes+1
    77  0092                    IRcvBytes@i	equ	??_IRcvBytes+2
    78  008F                    IRcvBytes@no	equ	?_IRcvBytes
    79  0091                    ___lbmod@divisor	equ	??___lbmod
    80  0092                    ___lbmod@dividend	equ	??___lbmod+1
    81  0093                    ___lbmod@rem	equ	??___lbmod+2
    82  0094                    ___lbmod@counter	equ	??___lbmod+3
    83  0091                    ___lbdiv@divisor	equ	??___lbdiv
    84  0092                    ___lbdiv@dividend	equ	??___lbdiv+1
    85  0093                    ___lbdiv@quotient	equ	??___lbdiv+2
    86  0094                    ___lbdiv@counter	equ	??___lbdiv+3
    87  0090                    ISendByte@c	equ	??_ISendByte
    88  0091                    ISendByte@sla	equ	??_ISendByte+1
    89  0095                    ___awdiv@dividend	equ	??___awdiv
    90  0097                    ___awdiv@quotient	equ	??___awdiv+2
    91  0099                    ___awdiv@sign	equ	??___awdiv+4
    92  009A                    ___awdiv@counter	equ	??___awdiv+5
    93  0093                    ___awdiv@divisor	equ	?___awdiv
    94  0093                    abs@a	equ	??_abs
    95  0092                    SendBit_1621@cnt	equ	??_SendBit_1621
    96  0093                    SendBit_1621@data	equ	??_SendBit_1621+1
    97  0094                    SendBit_1621@i	equ	??_SendBit_1621+2
    98  0092                    SendDataBit_1621@cnt	equ	??_SendDataBit_1621
    99  0093                    SendDataBit_1621@data	equ	??_SendDataBit_1621+1
   100  0094                    SendDataBit_1621@i	equ	??_SendDataBit_1621+2
   101  0095                    RcvByte@retc	equ	??_RcvByte
   102  0096                    RcvByte@BitCnt	equ	??_RcvByte+1
   103  0095                    ___awmod@dividend	equ	??___awmod
   104  0097                    ___awmod@sign	equ	??___awmod+2
   105  0098                    ___awmod@counter	equ	??___awmod+3
   106  0093                    ___awmod@divisor	equ	?___awmod
   107  0097                    ___lwmod@dividend	equ	??___lwmod
   108  0099                    ___lwmod@counter	equ	??___lwmod+2
   109  0095                    ___lwmod@divisor	equ	?___lwmod
   110  0097                    ___lwdiv@dividend	equ	??___lwdiv
   111  0099                    ___lwdiv@quotient	equ	??___lwdiv+2
   112  009B                    ___lwdiv@counter	equ	??___lwdiv+4
   113  0095                    ___lwdiv@divisor	equ	?___lwdiv
   114  0095                    Ack_I2c@a	equ	??_Ack_I2c
   115  0095                    SendByte@c	equ	??_SendByte
   116  0096                    SendByte@BitCnt	equ	??_SendByte+1
   117  0098                    delay_us@us	equ	??_delay_us
   118  00A4                    BoardUART@rxdata	equ	??_BoardUART
   119  00A4                    SensorUART@rxdata	equ	??_SensorUART
   120                          ; =============== function _main ends ============
   121  300A                    ___start_of_c_program_code:
   122                          ; *************** function _FrameCheck *****************
   123                          ; Defined at:
   124                          ;		line 85 in file "./particlesensor.c"
   125                          ; Parameters:
   126                          ;		None
   127                          ; Auto variables:
   128                          ;		checksum    	       	type: unsigned int 
   129                          ;		i           	       	type: unsigned char 
   130                          ; Return value:
   131                          ;		type: unsigned char 
   132                          ;		size: 1
   133                          ; Registers used:
   134                          ;		a, x, CUR_PP
   135                          ; Tracked objects:
   136                          ;		On entry : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
   137                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
   138                          ;		Unchanged: MVR_PP MVW_PP 
   139                          ; Data sizes:
   140                          ;		Autos:    3
   141                          ;		Params:   0
   142                          ;		Temp:     3
   143                          ;		Total:    6
   144                          ; This function calls:
   145                          ;		Nothing
   146                          ; This function is called by:
   147                          ;		_main
   148                          ; This function uses a non-reentrant model
   149                          ; 
   150  004D                    __size_of_FrameCheck	equ	__end_of_FrameCheck-_FrameCheck
   151                          ;particlesensor.c: 84: unsigned char FrameCheck(void)
   152                          ;particlesensor.c: 85: {
   153                          ;			CUR_PP=0 XIO=0 PG=2 
   154  300A                    _FrameCheck:
   155                          ;particlesensor.c: 86: unsigned int checksum = 0;
   156  300A  55 8D  00         	mov	[??_FrameCheck^0], 0
   157  300D  55 8E  00         	mov	[(??_FrameCheck^0+1)], 0
   158                          ;particlesensor.c: 87: unsigned char i = 0;
   159                          ;particlesensor.c: 89: for (i = 0; i < (MyPMSUnion.MyPMFrame.Length+2); i++)
   160  3010  57 00             	mov	x, 0
   161  3012  7D 3020           	jmp	l207
   162                          ;			CUR_PP=0 XIO=0 
   163  3015                    l204:
   164                          ;particlesensor.c: 90: {
   165                          ;particlesensor.c: 91: checksum += MyPMSUnion.PMRxBuf[i];
   166  3015  62 D3 00          	mov	reg[211], 0
   167  3018  52 00             	mov	a, [x+_MyPMSUnion]
   168  301A  04 8E             	add	[(??_FrameCheck^0+1)], a
   169  301C  0E 8D  00         	adc	[??_FrameCheck^0], 0
   170  301F  75                	inc	x
   171                          ;			CUR_PP=0 XIO=0 
   172  3020                    l207:
   173  3020  5F 90  02         	mov	[(??_FrameCheck^0+3)], [(_MyPMSUnion+2)^0]
   174  3023  5F 91  03         	mov	[(??_FrameCheck^0+4)], [(_MyPMSUnion+3)^0]
   175  3026  06 91  02         	add	[(??_FrameCheck^0+4)], 2
   176  3029  0E 90  00         	adc	[(??_FrameCheck^0+3)], 0
   177  302C  5B                	mov	a, x
   178  302D  53 92             	mov	[(??_FrameCheck^0+5)], a
   179  302F  51 92             	mov	a, [(??_FrameCheck^0+5)]
   180  3031  3A 91             	cmp	a, [(??_FrameCheck^0+4)]
   181  3033  50 00             	mov	a, 0
   182  3035  1A 90             	sbb	a, [(??_FrameCheck^0+3)]
   183  3037  CFDD              	jc	l204
   184                          ;			CUR_PP=0 XIO=0 
   185                          ;particlesensor.c: 92: }
   186                          ;particlesensor.c: 94: MyPMSUnion.MyPMFrame.Length = 0;
   187  3039  55 02  00         	mov	[(_MyPMSUnion+2)^0], 0
   188  303C  55 03  00         	mov	[((_MyPMSUnion+2)^0+1)], 0
   189                          ;particlesensor.c: 95: MyPMSUnion.MyPMFrame.Head = 0;
   190  303F  55 00  00         	mov	[_MyPMSUnion^0], 0
   191  3042  55 01  00         	mov	[(_MyPMSUnion^0+1)], 0
   192                          ;particlesensor.c: 97: if (checksum == MyPMSUnion.MyPMFrame.checksum)
   193  3045  51 16             	mov	a, [(_MyPMSUnion+22)^0]
   194  3047  3A 8D             	cmp	a, [??_FrameCheck^0]
   195  3049  B00A              	jnz	l208
   196  304B  51 17             	mov	a, [((_MyPMSUnion+22)^0+1)]
   197  304D  3A 8E             	cmp	a, [(??_FrameCheck^0+1)]
   198  304F  B004              	jnz	l208
   199                          ;particlesensor.c: 98: {
   200                          ;particlesensor.c: 99: return 1;
   201  3051  50 01             	mov	a, 1
   202  3053  7F                	ret
   203                          ;			CUR_PP=0 XIO=0 
   204  3054                    l208:
   205                          ;particlesensor.c: 101: else
   206                          ;particlesensor.c: 102: {
   207                          ;particlesensor.c: 114: return 0;
   208  3054  50 00             	mov	a, 0
   209                          ;particlesensor.c: 115: }
   210                          ;particlesensor.c: 116: }
   211                          ;			CUR_PP=0 XIO=0 
   212  3056  7F                	ret
   213  3057                    __end_of_FrameCheck:
   214                          ; =============== function _FrameCheck ends ============
   215                          ; *************** function _LCD_Init *****************
   216                          ; Defined at:
   217                          ;		line 382 in file "./lcd.c"
   218                          ; Parameters:
   219                          ;		None
   220                          ; Auto variables:
   221                          ;		None
   222                          ; Return value:
   223                          ;		type: void 
   224                          ;		size: 0
   225                          ; Registers used:
   226                          ;		CUR_PP
   227                          ; Tracked objects:
   228                          ;		On entry : CUR_PP=0 IDX_PP? XIO=0 PG=2 MVR_PP? MVW_PP? 
   229                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG=2 MVR_PP? MVW_PP? 
   230                          ;		Unchanged: IDX_PP MVR_PP MVW_PP 
   231                          ; Data sizes:
   232                          ;		Autos:    0
   233                          ;		Params:   0
   234                          ;		Temp:     0
   235                          ;		Total:    0
   236                          ; This function calls:
   237                          ;		Nothing
   238                          ; This function is called by:
   239                          ;		_main
   240                          ; This function uses a non-reentrant model
   241                          ; 
   242  0022                    __size_of_LCD_Init	equ	__end_of_LCD_Init-_LCD_Init
   243                          ;lcd.c: 381: void LCD_Init()
   244                          ;lcd.c: 382: {
   245                          ;			CUR_PP=0 XIO=0 PG=2 
   246  3057                    _LCD_Init:
   247                          ;lcd.c: 383: LifeFlag = 0;
   248  3057  55 60  00         	mov	[_LifeFlag^0], 0
   249                          ;lcd.c: 384: RH_T_Flag = 1;
   250  305A  55 6A  01         	mov	[_RH_T_Flag^0], 1
   251                          ;lcd.c: 385: mode = 'A';
   252  305D  55 71  41         	mov	[_mode^0], 65
   253                          ;lcd.c: 386: LockStatus = 1;
   254  3060  55 63  01         	mov	[_LockStatus^0], 1
   255                          ;lcd.c: 387: Plasma = 1;
   256  3063  55 67  01         	mov	[_Plasma^0], 1
   257                          ;lcd.c: 388: Odor = 3;
   258  3066  55 64  03         	mov	[_Odor^0], 3
   259                          ;lcd.c: 389: SpeedLvl = 1;
   260  3069  55 6C  01         	mov	[_SpeedLvl^0], 1
   261                          ;lcd.c: 390: PM_Flag = 0;
   262  306C  55 66  00         	mov	[_PM_Flag^0], 0
   263                          ;lcd.c: 391: HeapLife = 85;
   264  306F  55 5D  55         	mov	[_HeapLife^0], 85
   265                          ;lcd.c: 392: CarbonLife = 73;
   266  3072  55 58  49         	mov	[_CarbonLife^0], 73
   267                          ;lcd.c: 393: FanUpdateTimeReload = 24;
   268  3075  55 5B  18         	mov	[_FanUpdateTimeReload^0], 24
   269                          ;lcd.c: 394: }
   270                          ;			CUR_PP=0 XIO=0 PG=2 
   271  3078  7F                	ret
   272  3079                    __end_of_LCD_Init:
   273                          ; =============== function _LCD_Init ends ============
   274                          ; *************** function _Si7020Init *****************
   275                          ; Defined at:
   276                          ;		line 123 in file "./si7020.c"
   277                          ; Parameters:
   278                          ;		None
   279                          ; Auto variables:
   280                          ;		my_data     	       	type: unsigned char [2]
   281                          ; Return value:
   282                          ;		type: void 
   283                          ;		size: 0
   284                          ; Registers used:
   285                          ;		CUR_PP
   286                          ; Tracked objects:
   287                          ;		On entry : CUR_PP? IDX_PP? XIO=0 PG=2 MVR_PP? MVW_PP? 
   288                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG=2 MVR_PP? MVW_PP? 
   289                          ;		Unchanged: IDX_PP MVR_PP MVW_PP 
   290                          ; Data sizes:
   291                          ;		Autos:    2
   292                          ;		Params:   0
   293                          ;		Temp:     0
   294                          ;		Total:    2
   295                          ; This function calls:
   296                          ;		Nothing
   297                          ; This function is called by:
   298                          ;		_main
   299                          ; This function uses a non-reentrant model
   300                          ; 
   301  000D                    __size_of_Si7020Init	equ	__end_of_Si7020Init-_Si7020Init
   302                          ;si7020.c: 122: void Si7020Init()
   303                          ;si7020.c: 123: {
   304                          ;			XIO=0 PG=2 
   305  3079                    _Si7020Init:
   306                          ;si7020.c: 124: unsigned char my_data[2];
   307                          ;si7020.c: 125: my_data[0] = 0xE6;
   308  3079  62 D0 00          	mov	reg[208], 0
   309  307C  55 8D  E6         	mov	[??_Si7020Init^0], 230
   310                          ;si7020.c: 127: ISendStr[0x80,my_data,2];
   311  307F  55 8E  00         	mov	[(??_Si7020Init+1)^0], 0
   312                          ;si7020.c: 128: data_length = 24;
   313  3082  55 70  18         	mov	[_data_length^0], 24
   314                          ;si7020.c: 129: }
   315                          ;			CUR_PP=0 XIO=0 PG=2 
   316  3085  7F                	ret
   317  3086                    __end_of_Si7020Init:
   318                          ; =============== function _Si7020Init ends ============
   319                          ; *************** function _Si7020Read_Temp_after_RHM *****************
   320                          ; Defined at:
   321                          ;		line 38 in file "./si7020.c"
   322                          ; Parameters:
   323                          ;		buffer      	reg:    a	type: PTR unsigned char ; Largest target is 5
   324                          ;		 -> RecBuf(5), 
   325                          ; Auto variables:
   326                          ;		buffer      	       	type: PTR unsigned char ; Largest target is 5
   327                          ;		 -> RecBuf(5), 
   328                          ;		ret         	       	type: unsigned char 
   329                          ; Return value:
   330                          ;		type: unsigned char 
   331                          ;		size: 1
   332                          ; Registers used:
   333                          ;		a, x, CUR_PP
   334                          ; Tracked objects:
   335                          ;		On entry : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
   336                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
   337                          ;		Unchanged: MVR_PP MVW_PP 
   338                          ; Data sizes:
   339                          ;		Autos:    2
   340                          ;		Params:   0
   341                          ;		Temp:     0
   342                          ;		Total:    2
   343                          ; This function calls:
   344                          ;		_Si7020SendCommand
   345                          ;		_IRcvBytes
   346                          ; This function is called by:
   347                          ;		_main
   348                          ; This function uses a non-reentrant model
   349                          ; 
   350  001E                    __size_of_Si7020Read_Temp_after_RHM	equ	__end_of_Si7020Read_Temp_after_RHM-_Si7020Read_Temp_after_RH
      +                         M
   351                          ;si7020.c: 37: unsigned char Si7020Read_Temp_after_RHM(unsigned char * buffer)
   352                          ;si7020.c: 38: {
   353                          ;			CUR_PP=0 XIO=0 PG=2 
   354  3086                    _Si7020Read_Temp_after_RHM:
   355                          ;Si7020Read_Temp_after_RHM@buffer stored from a
   356  3086  53 8D             	mov	[??_Si7020Read_Temp_after_RHM^0], a
   357                          ;si7020.c: 39: char ret;
   358                          ;si7020.c: 40: ret = Si7020SendCommand(0xE0);
   359  3088  50 E0             	mov	a, 224
   360  308A  7C 3764           	call	_Si7020SendCommand
   361  308D  53 8E             	mov	[(??_Si7020Read_Temp_after_RHM+1)^0], a
   362                          ;si7020.c: 42: if (!ret)
   363  308F  51 8E             	mov	a, [(??_Si7020Read_Temp_after_RHM+1)^0]
   364                          ;si7020.c: 43: {
   365                          ;si7020.c: 44: return 0;
   366                          ;	Return value of _Si7020Read_Temp_after_RHM is never used
   367  3091  A011              	jz	l220
   368                          ;			CUR_PP=0 XIO=0 
   369                          ;si7020.c: 45: }
   370                          ;si7020.c: 47: ret = IRcvBytes(0x80,buffer,2);
   371  3093  55 8F  02         	mov	[?_IRcvBytes^0], 2
   372  3096  50 80             	mov	a, 128
   373  3098  58 8D             	mov	x, [??_Si7020Read_Temp_after_RHM^0]
   374  309A  71 80             	or	f, 0x80	;select multiple RAM page mode
   375  309C  7C 376D           	call	_IRcvBytes
   376  309F  53 8E             	mov	[(??_Si7020Read_Temp_after_RHM+1)^0], a
   377                          ;si7020.c: 49: if (!ret)
   378  30A1  51 8E             	mov	a, [(??_Si7020Read_Temp_after_RHM+1)^0]
   379                          ;si7020.c: 50: {
   380                          ;si7020.c: 51: return 0;
   381                          ;	Return value of _Si7020Read_Temp_after_RHM is never used
   382                          ;			CUR_PP=0 XIO=0 
   383                          ;si7020.c: 52: }
   384                          ;si7020.c: 54: return 1;
   385                          ;	Return value of _Si7020Read_Temp_after_RHM is never used
   386                          ;si7020.c: 55: }
   387  30A3                    l220:
   388                          ;			CUR_PP=0 XIO=0 
   389  30A3  7F                	ret
   390  30A4                    __end_of_Si7020Read_Temp_after_RHM:
   391                          ; =============== function _Si7020Read_Temp_after_RHM ends ============
   392                          ; *************** function _Si7020CalcRH *****************
   393                          ; Defined at:
   394                          ;		line 89 in file "./si7020.c"
   395                          ; Parameters:
   396                          ;		data        	reg:   xa	type: unsigned int 
   397                          ; Auto variables:
   398                          ;		data        	       	type: unsigned int 
   399                          ;		temp        	       	type: unsigned long 
   400                          ;		result      	       	type: unsigned char 
   401                          ; Return value:
   402                          ;		type: unsigned char 
   403                          ;		size: 1
   404                          ; Registers used:
   405                          ;		a, x, CUR_PP, mret
   406                          ; Tracked objects:
   407                          ;		On entry : CUR_PP=0 IDX_PP=0 XIO=0 PG? MVR_PP? MVW_PP? 
   408                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
   409                          ;		Unchanged: MVR_PP MVW_PP 
   410                          ; Data sizes:
   411                          ;		Autos:    7
   412                          ;		Params:   0
   413                          ;		Temp:     0
   414                          ;		Total:    7
   415                          ; This function calls:
   416                          ;		___lmul
   417                          ; This function is called by:
   418                          ;		_main
   419                          ; This function uses a non-reentrant model
   420                          ; 
   421  009D                    __size_of_Si7020CalcRH	equ	__end_of_Si7020CalcRH-_Si7020CalcRH
   422                          ;si7020.c: 88: unsigned char Si7020CalcRH(unsigned int data)
   423                          ;si7020.c: 89: {
   424                          ;			CUR_PP=0 IDX_PP=0 XIO=0 PG=2 
   425  30A4                    _Si7020CalcRH:
   426                          ;Si7020CalcRH@data stored from xa
   427  30A4  53 8E             	mov	[(??_Si7020CalcRH^0+1)], a
   428  30A6  5A 8D             	mov	[??_Si7020CalcRH^0], x
   429                          ;si7020.c: 90: unsigned long temp;
   430                          ;si7020.c: 91: unsigned char result;
   431                          ;si7020.c: 93: (PRT2DR |= 0x20);
   432  30A8  43 08 20          	or	reg[8], 0x20
   433  30AB  70 FE             	and	f, 0xFE	;#
   434                          ;si7020.c: 94: asm("and F, FEh");
   435                          ;si7020.c: 96: temp = data;
   436  30AD  5F 92  8E         	mov	[(??_Si7020CalcRH+5)^0], [(??_Si7020CalcRH+1)^0]
   437  30B0  5F 91  8D         	mov	[(??_Si7020CalcRH+4)^0], [??_Si7020CalcRH^0]
   438  30B3  55 90  00         	mov	[(??_Si7020CalcRH+3)^0], 0
   439  30B6  55 8F  00         	mov	[(??_Si7020CalcRH+2)^0], 0
   440                          ;si7020.c: 97: temp = 125*temp;
   441  30B9  5F 98  8F         	mov	[?___lmul^0], [(??_Si7020CalcRH+2)^0]
   442  30BC  5F 99  90         	mov	[(?___lmul+1)^0], [(??_Si7020CalcRH+3)^0]
   443  30BF  5F 9A  91         	mov	[(?___lmul+2)^0], [(??_Si7020CalcRH+4)^0]
   444  30C2  5F 9B  92         	mov	[(?___lmul+3)^0], [(??_Si7020CalcRH+5)^0]
   445  30C5  55 9C  00         	mov	[(?___lmul+4)^0], 0
   446  30C8  55 9D  00         	mov	[((?___lmul+4)^0+1)], 0
   447  30CB  55 9E  00         	mov	[((?___lmul+4)^0+2)], 0
   448  30CE  55 9F  7D         	mov	[((?___lmul+4)^0+3)], 125
   449  30D1  7C 351E           	call	___lmul
   450  30D4  5F 8F  98         	mov	[(??_Si7020CalcRH+2)^0], [?___lmul^0]
   451  30D7  5F 90  99         	mov	[(??_Si7020CalcRH+3)^0], [(?___lmul+1)^0]
   452  30DA  5F 91  9A         	mov	[(??_Si7020CalcRH+4)^0], [(?___lmul+2)^0]
   453  30DD  5F 92  9B         	mov	[(??_Si7020CalcRH+5)^0], [(?___lmul+3)^0]
   454                          ;si7020.c: 98: temp >>= 16;
   455  30E0  50 10             	mov	a, 16
   456  30E2  70 FB             	and	f, 0xFB
   457  30E4                    u444:
   458  30E4  6E 8F             	rrc	[(??_Si7020CalcRH+2)^0]
   459  30E6  6E 90             	rrc	[((??_Si7020CalcRH+2)^0+1)]
   460  30E8  6E 91             	rrc	[((??_Si7020CalcRH+2)^0+2)]
   461  30EA  6E 92             	rrc	[((??_Si7020CalcRH+2)^0+3)]
   462  30EC  78                	dec	a
   463  30ED  BFF6              	jnz	u444
   464                          ;si7020.c: 99: if (temp >= 6)
   465  30EF  3C 92  06         	cmp	[((??_Si7020CalcRH+2)^0+3)], 6
   466  30F2  51 91             	mov	a, [((??_Si7020CalcRH+2)^0+2)]
   467  30F4  19 00             	sbb	a, 0
   468  30F6  51 90             	mov	a, [((??_Si7020CalcRH+2)^0+1)]
   469  30F8  19 00             	sbb	a, 0
   470  30FA  51 8F             	mov	a, [(??_Si7020CalcRH+2)^0]
   471  30FC  19 00             	sbb	a, 0
   472  30FE  C030              	jc	l226
   473                          ;si7020.c: 100: {
   474                          ;si7020.c: 101: if (temp >= 106)
   475  3100  3C 92  6A         	cmp	[((??_Si7020CalcRH+2)^0+3)], 106
   476  3103  51 91             	mov	a, [((??_Si7020CalcRH+2)^0+2)]
   477  3105  19 00             	sbb	a, 0
   478  3107  51 90             	mov	a, [((??_Si7020CalcRH+2)^0+1)]
   479  3109  19 00             	sbb	a, 0
   480  310B  51 8F             	mov	a, [(??_Si7020CalcRH+2)^0]
   481  310D  19 00             	sbb	a, 0
   482  310F  C010              	jc	l227
   483                          ;si7020.c: 102: {
   484                          ;si7020.c: 103: temp = 100;
   485  3111  55 8F  00         	mov	[(??_Si7020CalcRH+2)^0], 0
   486  3114  55 90  00         	mov	[((??_Si7020CalcRH+2)^0+1)], 0
   487  3117  55 91  00         	mov	[((??_Si7020CalcRH+2)^0+2)], 0
   488  311A  55 92  64         	mov	[((??_Si7020CalcRH+2)^0+3)], 100
   489                          ;si7020.c: 104: }
   490  311D  7D 3139           	jmp	l229
   491                          ;			CUR_PP=0 XIO=0 
   492  3120                    l227:
   493                          ;si7020.c: 105: else
   494                          ;si7020.c: 106: {
   495                          ;si7020.c: 107: temp -= 6;
   496  3120  16 92  06         	sub	[((??_Si7020CalcRH+2)^0+3)], 6
   497  3123  1E 91  00         	sbb	[((??_Si7020CalcRH+2)^0+2)], 0
   498  3126  1E 90  00         	sbb	[((??_Si7020CalcRH+2)^0+1)], 0
   499  3129  1E 8F  00         	sbb	[(??_Si7020CalcRH+2)^0], 0
   500                          ;			CUR_PP=0 XIO=0 
   501                          ;si7020.c: 108: }
   502                          ;si7020.c: 109: }
   503  312C  7D 3139           	jmp	l229
   504                          ;			CUR_PP=0 XIO=0 
   505  312F                    l226:
   506                          ;si7020.c: 110: else
   507                          ;si7020.c: 111: {
   508                          ;si7020.c: 112: temp = 0;
   509  312F  50 00             	mov	a, 0
   510  3131  53 8F             	mov	[(??_Si7020CalcRH+2)^0], a
   511  3133  53 90             	mov	[((??_Si7020CalcRH+2)^0+1)], a
   512  3135  53 91             	mov	[((??_Si7020CalcRH+2)^0+2)], a
   513  3137  53 92             	mov	[((??_Si7020CalcRH+2)^0+3)], a
   514                          ;			CUR_PP=0 XIO=0 
   515  3139                    l229:
   516                          ;si7020.c: 113: }
   517                          ;si7020.c: 115: result = temp;
   518  3139  51 92             	mov	a, [(??_Si7020CalcRH+5)^0]
   519  313B  71 01             	or	f, 1	;#
   520                          ;si7020.c: 116: asm("or  F, 01h");
   521                          ;si7020.c: 117: (PRT2DR &= ~0x20);
   522  313D  41 08 DF          	and	reg[8], 0xDF
   523                          ;si7020.c: 118: return result;
   524                          ;si7020.c: 119: }
   525                          ;			CUR_PP=0 XIO=0 
   526  3140  7F                	ret
   527  3141                    __end_of_Si7020CalcRH:
   528                          ; =============== function _Si7020CalcRH ends ============
   529                          ; *************** function _LCDOuputAll *****************
   530                          ; Defined at:
   531                          ;		line 132 in file "./lcd.c"
   532                          ; Parameters:
   533                          ;		None
   534                          ; Auto variables:
   535                          ;		k           	       	type: unsigned char 
   536                          ; Return value:
   537                          ;		type: void 
   538                          ;		size: 0
   539                          ; Registers used:
   540                          ;		a, x, CUR_PP
   541                          ; Tracked objects:
   542                          ;		On entry : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
   543                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
   544                          ;		Unchanged: MVR_PP MVW_PP 
   545                          ; Data sizes:
   546                          ;		Autos:    1
   547                          ;		Params:   0
   548                          ;		Temp:     0
   549                          ;		Total:    1
   550                          ; This function calls:
   551                          ;		_DisplayPMxx
   552                          ;		_ShowLife
   553                          ;		_ShowHumiTemp
   554                          ;		_WriteAll_1621
   555                          ; This function is called by:
   556                          ;		_main
   557                          ; This function uses a non-reentrant model
   558                          ; 
   559  01C3                    __size_of_LCDOuputAll	equ	__end_of_LCDOuputAll-_LCDOuputAll
   560                          ;lcd.c: 131: void LCDOuputAll(void)
   561                          ;lcd.c: 132: {
   562                          ;			CUR_PP=0 XIO=0 PG=2 
   563  3141                    _LCDOuputAll:
   564                          ;lcd.c: 133: char k = 0;
   565                          ;lcd.c: 136: for (k=0;k<12;k++)
   566  3141  57 00             	mov	x, 0
   567                          ;			XIO=0 
   568  3143                    l97:
   569                          ;lcd.c: 137: {
   570                          ;lcd.c: 138: DisplayBuf[k] = 0;
   571  3143  62 D3 00          	mov	reg[211], 0
   572  3146  56 72  00         	mov	[x+_DisplayBuf], 0
   573  3149  75                	inc	x
   574  314A  5B                	mov	a, x
   575  314B  39 0C             	cmp	a, 12
   576  314D  CFF5              	jc	l97
   577                          ;			IDX_PP=0 XIO=0 
   578                          ;lcd.c: 139: }
   579                          ;lcd.c: 144: if (PM_Flag == 0)
   580  314F  62 D0 00          	mov	reg[208], 0
   581  3152  51 66             	mov	a, [_PM_Flag^0]
   582  3154  B010              	jnz	l100
   583                          ;lcd.c: 145: {
   584                          ;lcd.c: 146: DisplayPMxx(data_pm2_5);
   585  3156  51 54             	mov	a, [(_data_pm2_5^0+1)]
   586  3158  58 53             	mov	x, [_data_pm2_5^0]
   587  315A  71 80             	or	f, 0x80	;select multiple RAM page mode
   588  315C  7C 366A           	call	_DisplayPMxx
   589                          ;lcd.c: 147: DisplayBuf[0] |= 0x8;
   590  315F  2E 72  08         	or	[_DisplayBuf^0], 8
   591                          ;lcd.c: 148: }
   592  3162  7D 3171           	jmp	l101
   593                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
   594  3165                    l100:
   595                          ;lcd.c: 149: else
   596                          ;lcd.c: 150: {
   597                          ;lcd.c: 151: DisplayPMxx(data_pm1_0);
   598  3165  51 52             	mov	a, [(_data_pm1_0^0+1)]
   599  3167  58 51             	mov	x, [_data_pm1_0^0]
   600  3169  71 80             	or	f, 0x80	;select multiple RAM page mode
   601  316B  7C 366A           	call	_DisplayPMxx
   602                          ;lcd.c: 152: DisplayBuf[1] |= 0x8;
   603  316E  2E 73  08         	or	[(_DisplayBuf+1)^0], 8
   604                          ;			CUR_PP=0 XIO=0 
   605  3171                    l101:
   606                          ;lcd.c: 153: }
   607                          ;lcd.c: 154: DisplayBuf[2] |= 0x8;
   608  3171  2E 74  08         	or	[(_DisplayBuf+2)^0], 8
   609                          ;lcd.c: 159: if (LifeFlag == 0)
   610  3174  51 60             	mov	a, [_LifeFlag^0]
   611  3176  B00E              	jnz	l102
   612                          ;lcd.c: 160: {
   613                          ;lcd.c: 161: ShowLife(HeapLife);
   614  3178  51 5D             	mov	a, [_HeapLife^0]
   615  317A  71 80             	or	f, 0x80	;select multiple RAM page mode
   616  317C  7C 3566           	call	_ShowLife
   617                          ;lcd.c: 162: DisplayBuf[3] |= 0x8;
   618  317F  2E 75  08         	or	[(_DisplayBuf+3)^0], 8
   619                          ;lcd.c: 164: }
   620  3182  7D 318F           	jmp	l103
   621                          ;			CUR_PP=0 XIO=0 
   622  3185                    l102:
   623                          ;lcd.c: 165: else
   624                          ;lcd.c: 166: {
   625                          ;lcd.c: 167: ShowLife(CarbonLife);
   626  3185  51 58             	mov	a, [_CarbonLife^0]
   627  3187  71 80             	or	f, 0x80	;select multiple RAM page mode
   628  3189  7C 3566           	call	_ShowLife
   629                          ;lcd.c: 168: DisplayBuf[4] |= 0x8;
   630  318C  2E 76  08         	or	[(_DisplayBuf+4)^0], 8
   631                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
   632  318F                    l103:
   633                          ;lcd.c: 170: }
   634                          ;lcd.c: 175: if (SpeedLvl > 8)
   635  318F  3C 6C  09         	cmp	[_SpeedLvl^0], 9
   636  3192  C004              	jc	l104
   637                          ;lcd.c: 176: {
   638                          ;lcd.c: 177: SpeedLvl = 8;
   639  3194  55 6C  08         	mov	[_SpeedLvl^0], 8
   640                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
   641  3197                    l104:
   642                          ;lcd.c: 178: }
   643                          ;lcd.c: 179: DisplayBuf[5] = DigitSeg[SpeedLvl];
   644  3197  51 6C             	mov	a, [_SpeedLvl^0]
   645  3199  01 00             	add	a, <_DigitSeg
   646  319B  5C                	mov	x, a
   647  319C  50 3F             	mov	a, >_DigitSeg
   648  319E  28                	romx
   649  319F  53 77             	mov	[(_DisplayBuf+5)^0], a
   650                          ; _RH_T_Flag loaded to a
   651  31A1  51 6A             	mov	a, [_RH_T_Flag^0]
   652                          ;lcd.c: 181: if(!FanUpdateTimer)
   653  31A3  3C 84  00         	cmp	[_FanUpdateTimer^0], 0
   654  31A6  B007              	jnz	l105
   655                          ;lcd.c: 182: {
   656                          ;lcd.c: 183: FanUpdateTimer = FanUpdateTimeReload;
   657  31A8  5F 84  5B         	mov	[_FanUpdateTimer^0], [_FanUpdateTimeReload^0]
   658                          ;lcd.c: 184: FanFlag ^= 1;
   659  31AB  36 5A  01         	xor	[_FanFlag^0], 1
   660                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
   661  31AE                    l105:
   662                          ;lcd.c: 185: }
   663                          ;lcd.c: 186: if (FanFlag)
   664  31AE  3C 5A  00         	cmp	[_FanFlag^0], 0
   665  31B1  A007              	jz	l106
   666                          ;lcd.c: 187: {
   667                          ;lcd.c: 188: DisplayBuf[6] |= 0x1;
   668  31B3  2E 78  01         	or	[(_DisplayBuf+6)^0], 1
   669                          ;lcd.c: 190: }
   670  31B6  7D 31BC           	jmp	l107
   671                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
   672  31B9                    l106:
   673                          ;lcd.c: 191: else
   674                          ;lcd.c: 192: {
   675                          ;lcd.c: 193: DisplayBuf[6] |= 0x2;
   676  31B9  2E 78  02         	or	[(_DisplayBuf+6)^0], 2
   677                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
   678  31BC                    l107:
   679                          ;lcd.c: 195: }
   680                          ;lcd.c: 200: if (RH_T_Flag == 0)
   681  31BC  39 00             	cmp	a, 0
   682  31BE  B00B              	jnz	l108
   683                          ;lcd.c: 201: {
   684                          ;lcd.c: 202: ShowHumiTemp(Humidity);
   685  31C0  51 5E             	mov	a, [_Humidity^0]
   686  31C2  71 80             	or	f, 0x80	;select multiple RAM page mode
   687  31C4  7C 35A6           	call	_ShowHumiTemp
   688                          ;lcd.c: 206: }
   689  31C7  7D 31E8           	jmp	l109
   690                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
   691  31CA                    l108:
   692                          ;lcd.c: 207: else
   693                          ;lcd.c: 208: {
   694                          ;lcd.c: 209: if (RH_T_Flag == 1)
   695  31CA  39 01             	cmp	a, 1
   696  31CC  B00E              	jnz	l110
   697                          ;lcd.c: 210: {
   698                          ;lcd.c: 211: ShowHumiTemp(Temperature);
   699  31CE  51 6D             	mov	a, [_Temperature^0]
   700  31D0  71 80             	or	f, 0x80	;select multiple RAM page mode
   701  31D2  7C 35A6           	call	_ShowHumiTemp
   702                          ;lcd.c: 214: DisplayBuf[7] |= 0x20;
   703  31D5  2E 79  20         	or	[(_DisplayBuf+7)^0], 0x20
   704                          ;lcd.c: 215: }
   705  31D8  7D 31E8           	jmp	l109
   706                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
   707  31DB                    l110:
   708                          ;lcd.c: 216: else
   709                          ;lcd.c: 217: {
   710                          ;lcd.c: 218: ShowHumiTemp(Timer);
   711  31DB  51 6E             	mov	a, [_Timer^0]
   712  31DD  71 80             	or	f, 0x80	;select multiple RAM page mode
   713  31DF  7C 35A6           	call	_ShowHumiTemp
   714                          ;lcd.c: 219: DisplayBuf[9] |= 0x80;
   715  31E2  2E 7B  80         	or	[(_DisplayBuf+9)^0], 0x80
   716                          ;lcd.c: 220: DisplayBuf[7] |= 0x10;
   717  31E5  2E 79  10         	or	[(_DisplayBuf+7)^0], 0x10
   718                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
   719                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
   720  31E8                    l109:
   721                          ; _PlasmaFlag loaded to a
   722  31E8  51 68             	mov	a, [_PlasmaFlag^0]
   723                          ;lcd.c: 222: }
   724                          ;lcd.c: 223: }
   725                          ;lcd.c: 228: if (mode == 'A')
   726  31EA  3C 71  41         	cmp	[_mode^0], 65
   727  31ED  B007              	jnz	l112
   728                          ;lcd.c: 229: {
   729                          ;lcd.c: 230: DisplayBuf[7] |= 0x2;
   730  31EF  2E 79  02         	or	[(_DisplayBuf+7)^0], 2
   731                          ;lcd.c: 232: }
   732  31F2  7D 31F8           	jmp	l113
   733                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
   734  31F5                    l112:
   735                          ;lcd.c: 233: else
   736                          ;lcd.c: 234: {
   737                          ;lcd.c: 235: DisplayBuf[7] |= 0x4;
   738  31F5  2E 79  04         	or	[(_DisplayBuf+7)^0], 4
   739                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
   740  31F8                    l113:
   741                          ;lcd.c: 237: }
   742                          ;lcd.c: 242: if (LockStatus)
   743  31F8  3C 63  00         	cmp	[_LockStatus^0], 0
   744  31FB  A004              	jz	l114
   745                          ;lcd.c: 243: {
   746                          ;lcd.c: 244: DisplayBuf[7] |= 0x1;
   747  31FD  2E 79  01         	or	[(_DisplayBuf+7)^0], 1
   748                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
   749  3200                    l114:
   750                          ;lcd.c: 245: }
   751                          ;lcd.c: 254: if (Plasma)
   752  3200  3C 67  00         	cmp	[_Plasma^0], 0
   753  3203  A023              	jz	l115
   754                          ;lcd.c: 255: {
   755                          ;lcd.c: 256: DisplayBuf[6] |= 0x10;
   756  3205  2E 78  10         	or	[(_DisplayBuf+6)^0], 0x10
   757                          ;lcd.c: 257: if (!PlasmaTimer)
   758  3208  3C 86  00         	cmp	[_PlasmaTimer^0], 0
   759  320B  B01D              	jnz	l121
   760                          ;lcd.c: 258: {
   761                          ;lcd.c: 259: PlasmaTimer = 24;
   762  320D  55 86  18         	mov	[_PlasmaTimer^0], 24
   763                          ;lcd.c: 260: if (PlasmaFlag == 0)
   764  3210  39 00             	cmp	a, 0
   765  3212  B006              	jnz	l117
   766                          ;lcd.c: 261: {
   767                          ;lcd.c: 262: PlasmaFlag = 1;
   768  3214  50 01             	mov	a, 1
   769                          ;lcd.c: 263: }
   770  3216  7D 3229           	jmp	l121
   771                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
   772  3219                    l117:
   773                          ;lcd.c: 264: else
   774                          ;lcd.c: 265: {
   775                          ;lcd.c: 266: if (PlasmaFlag == 1)
   776  3219  39 01             	cmp	a, 1
   777  321B  B006              	jnz	l119
   778                          ;lcd.c: 267: {
   779                          ;lcd.c: 268: PlasmaFlag = 2;
   780  321D  50 02             	mov	a, 2
   781                          ;lcd.c: 269: }
   782  321F  7D 3229           	jmp	l121
   783                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
   784  3222                    l119:
   785                          ;lcd.c: 270: else
   786                          ;lcd.c: 271: {
   787                          ;lcd.c: 272: PlasmaFlag = 0;
   788  3222  50 00             	mov	a, 0
   789                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
   790                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
   791                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
   792                          ;lcd.c: 273: }
   793                          ;lcd.c: 274: }
   794                          ;lcd.c: 275: }
   795                          ;lcd.c: 276: }
   796  3224  7D 3229           	jmp	l121
   797                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
   798  3227                    l115:
   799                          ;lcd.c: 277: else
   800                          ;lcd.c: 278: {
   801                          ;lcd.c: 279: PlasmaFlag = 0;
   802  3227  50 00             	mov	a, 0
   803                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
   804  3229                    l121:
   805                          ;lcd.c: 280: }
   806                          ;lcd.c: 282: if (PlasmaFlag == 1)
   807  3229  39 01             	cmp	a, 1
   808  322B  B007              	jnz	l122
   809                          ;lcd.c: 283: {
   810                          ;lcd.c: 284: DisplayBuf[6] |= 0x40;
   811  322D  2E 78  40         	or	[(_DisplayBuf+6)^0], 0x40
   812                          ;lcd.c: 285: }
   813  3230  7D 323A           	jmp	l123
   814                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
   815  3233                    l122:
   816                          ;lcd.c: 286: else if (PlasmaFlag == 2)
   817  3233  39 02             	cmp	a, 2
   818  3235  B004              	jnz	l123
   819                          ;lcd.c: 287: {
   820                          ;lcd.c: 288: DisplayBuf[6] |= 0x20 + 0x40;
   821  3237  2E 78  60         	or	[(_DisplayBuf+6)^0], 0x60
   822                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
   823                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
   824  323A                    l123:
   825                          ;lcd.c: 289: }
   826                          ;lcd.c: 295: if (MyPMSUnion.MyPMFrame.PM2_5_US > 150)
   827  323A  3C 06  00         	cmp	[(_MyPMSUnion+6)^0], 0
   828  323D  B004              	jnz	u303
   829  323F  3C 07  97         	cmp	[((_MyPMSUnion+6)^0+1)], 151
   830  3242                    u303:
   831  3242  C00A              	jc	l125
   832                          ;lcd.c: 296: {
   833                          ;lcd.c: 297: DisplayBuf[11] |= 0x20 + 0x10;
   834  3244  2E 7D  30         	or	[(_DisplayBuf+0xB)^0], 0x30
   835                          ;lcd.c: 298: DisplayBuf[10] |= 0x1 + 0x2 + 0x4 + 0x8;
   836  3247  2E 7C  0F         	or	[(_DisplayBuf+0xA)^0], 0xF
   837                          ;lcd.c: 299: }
   838  324A  7D 3299           	jmp	l126
   839                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
   840  324D                    l125:
   841                          ;lcd.c: 300: else
   842                          ;lcd.c: 301: {
   843                          ;lcd.c: 302: if (MyPMSUnion.MyPMFrame.PM2_5_US > 100)
   844  324D  3C 06  00         	cmp	[(_MyPMSUnion+6)^0], 0
   845  3250  B004              	jnz	u313
   846  3252  3C 07  65         	cmp	[((_MyPMSUnion+6)^0+1)], 101
   847  3255                    u313:
   848  3255  C00A              	jc	l127
   849                          ;lcd.c: 303: {
   850                          ;lcd.c: 304: DisplayBuf[11] |= 0x20 + 0x10;
   851  3257  2E 7D  30         	or	[(_DisplayBuf+0xB)^0], 0x30
   852                          ;lcd.c: 305: DisplayBuf[10] |= 0x1 + 0x2 + 0x4;
   853  325A  2E 7C  07         	or	[(_DisplayBuf+0xA)^0], 7
   854                          ;lcd.c: 306: }
   855  325D  7D 3299           	jmp	l126
   856                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
   857  3260                    l127:
   858                          ;lcd.c: 307: else
   859                          ;lcd.c: 308: {
   860                          ;lcd.c: 309: if (MyPMSUnion.MyPMFrame.PM2_5_US > 75)
   861  3260  3C 06  00         	cmp	[(_MyPMSUnion+6)^0], 0
   862  3263  B004              	jnz	u323
   863  3265  3C 07  4C         	cmp	[((_MyPMSUnion+6)^0+1)], 76
   864  3268                    u323:
   865  3268  C00A              	jc	l129
   866                          ;lcd.c: 310: {
   867                          ;lcd.c: 311: DisplayBuf[11] |= 0x20 + 0x10;
   868  326A  2E 7D  30         	or	[(_DisplayBuf+0xB)^0], 0x30
   869                          ;lcd.c: 312: DisplayBuf[10] |= 0x1 + 0x2;
   870  326D  2E 7C  03         	or	[(_DisplayBuf+0xA)^0], 3
   871                          ;lcd.c: 313: }
   872  3270  7D 3299           	jmp	l126
   873                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
   874  3273                    l129:
   875                          ;lcd.c: 314: else
   876                          ;lcd.c: 315: {
   877                          ;lcd.c: 316: if (MyPMSUnion.MyPMFrame.PM2_5_US > 50)
   878  3273  3C 06  00         	cmp	[(_MyPMSUnion+6)^0], 0
   879  3276  B004              	jnz	u333
   880  3278  3C 07  33         	cmp	[((_MyPMSUnion+6)^0+1)], 51
   881  327B                    u333:
   882  327B  C00A              	jc	l131
   883                          ;lcd.c: 317: {
   884                          ;lcd.c: 318: DisplayBuf[11] |= 0x20 + 0x10;
   885  327D  2E 7D  30         	or	[(_DisplayBuf+0xB)^0], 0x30
   886                          ;lcd.c: 319: DisplayBuf[10] |= 0x1;
   887  3280  2E 7C  01         	or	[(_DisplayBuf+0xA)^0], 1
   888                          ;lcd.c: 320: }
   889  3283  7D 3299           	jmp	l126
   890                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
   891  3286                    l131:
   892                          ;lcd.c: 321: else
   893                          ;lcd.c: 322: {
   894                          ;lcd.c: 323: if (MyPMSUnion.MyPMFrame.PM2_5_US > 25)
   895  3286  3C 06  00         	cmp	[(_MyPMSUnion+6)^0], 0
   896  3289  B004              	jnz	u343
   897  328B  3C 07  1A         	cmp	[((_MyPMSUnion+6)^0+1)], 26
   898  328E                    u343:
   899  328E  C007              	jc	l133
   900                          ;lcd.c: 324: DisplayBuf[11] |= 0x20 + 0x10;
   901  3290  2E 7D  30         	or	[(_DisplayBuf+0xB)^0], 0x30
   902  3293  7D 3299           	jmp	l126
   903                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
   904  3296                    l133:
   905                          ;lcd.c: 325: else
   906                          ;lcd.c: 326: DisplayBuf[11] |= 0x20;
   907  3296  2E 7D  20         	or	[(_DisplayBuf+0xB)^0], 0x20
   908                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
   909                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
   910                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
   911                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
   912                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
   913  3299                    l126:
   914                          ;lcd.c: 327: }
   915                          ;lcd.c: 328: }
   916                          ;lcd.c: 329: }
   917                          ;lcd.c: 330: }
   918                          ;lcd.c: 332: if (Odor > 4)
   919  3299  3C 64  05         	cmp	[_Odor^0], 5
   920  329C  C00A              	jc	l135
   921                          ;lcd.c: 333: {
   922                          ;lcd.c: 334: DisplayBuf[11] |= 0x1 + 0x2;
   923  329E  2E 7D  03         	or	[(_DisplayBuf+0xB)^0], 3
   924                          ;lcd.c: 335: DisplayBuf[10] |= 0x10 + 0x20 + 0x40 + 0x80;
   925  32A1  2E 7C  F0         	or	[(_DisplayBuf+0xA)^0], 0xF0
   926                          ;lcd.c: 336: }
   927  32A4  7D 32DF           	jmp	l136
   928                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
   929  32A7                    l135:
   930                          ;lcd.c: 337: else
   931                          ;lcd.c: 338: {
   932                          ;lcd.c: 339: if (Odor > 3)
   933  32A7  3C 64  04         	cmp	[_Odor^0], 4
   934  32AA  C00A              	jc	l137
   935                          ;lcd.c: 340: {
   936                          ;lcd.c: 341: DisplayBuf[11] |= 0x1 + 0x2;
   937  32AC  2E 7D  03         	or	[(_DisplayBuf+0xB)^0], 3
   938                          ;lcd.c: 342: DisplayBuf[10] |= 0x10 + 0x20 + 0x40;
   939  32AF  2E 7C  70         	or	[(_DisplayBuf+0xA)^0], 0x70
   940                          ;lcd.c: 343: }
   941  32B2  7D 32DF           	jmp	l136
   942                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
   943  32B5                    l137:
   944                          ;lcd.c: 344: else
   945                          ;lcd.c: 345: {
   946                          ;lcd.c: 346: if (Odor > 2)
   947  32B5  3C 64  03         	cmp	[_Odor^0], 3
   948  32B8  C00A              	jc	l139
   949                          ;lcd.c: 347: {
   950                          ;lcd.c: 348: DisplayBuf[11] |= 0x1 + 0x2;
   951  32BA  2E 7D  03         	or	[(_DisplayBuf+0xB)^0], 3
   952                          ;lcd.c: 349: DisplayBuf[10] |= 0x10 + 0x20;
   953  32BD  2E 7C  30         	or	[(_DisplayBuf+0xA)^0], 0x30
   954                          ;lcd.c: 350: }
   955  32C0  7D 32DF           	jmp	l136
   956                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
   957  32C3                    l139:
   958                          ;lcd.c: 351: else
   959                          ;lcd.c: 352: {
   960                          ;lcd.c: 353: if (Odor > 1)
   961  32C3  3C 64  02         	cmp	[_Odor^0], 2
   962  32C6  C00A              	jc	l141
   963                          ;lcd.c: 354: {
   964                          ;lcd.c: 355: DisplayBuf[11] |= 0x1 + 0x2;
   965  32C8  2E 7D  03         	or	[(_DisplayBuf+0xB)^0], 3
   966                          ;lcd.c: 356: DisplayBuf[10] |= 0x10;
   967  32CB  2E 7C  10         	or	[(_DisplayBuf+0xA)^0], 0x10
   968                          ;lcd.c: 357: }
   969  32CE  7D 32DF           	jmp	l136
   970                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
   971  32D1                    l141:
   972                          ;lcd.c: 358: else
   973                          ;lcd.c: 359: {
   974                          ;lcd.c: 360: if (Odor > 0)
   975  32D1  3C 64  00         	cmp	[_Odor^0], 0
   976  32D4  A007              	jz	l143
   977                          ;lcd.c: 361: DisplayBuf[11] |= 0x1 + 0x2;
   978  32D6  2E 7D  03         	or	[(_DisplayBuf+0xB)^0], 3
   979  32D9  7D 32DF           	jmp	l136
   980                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
   981  32DC                    l143:
   982                          ;lcd.c: 362: else
   983                          ;lcd.c: 363: DisplayBuf[11] |= 0x2;
   984  32DC  2E 7D  02         	or	[(_DisplayBuf+0xB)^0], 2
   985                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
   986                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
   987                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
   988                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
   989                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
   990  32DF                    l136:
   991                          ;lcd.c: 364: }
   992                          ;lcd.c: 365: }
   993                          ;lcd.c: 366: }
   994                          ;lcd.c: 367: }
   995                          ;lcd.c: 369: DisplayBuf[5] |= 0x8;
   996  32DF  2E 77  08         	or	[(_DisplayBuf+5)^0], 8
   997                          ;lcd.c: 370: DisplayBuf[6] |= 0x4 + 0x8;
   998  32E2  2E 78  0C         	or	[(_DisplayBuf+6)^0], 0xC
   999                          ;lcd.c: 371: DisplayBuf[7] |= 0x40 + 0x80;
  1000  32E5  2E 79  C0         	or	[(_DisplayBuf+7)^0], 0xC0
  1001                          ;lcd.c: 372: DisplayBuf[11] |= 0x4 + 0x40;
  1002  32E8  2E 7D  44         	or	[(_DisplayBuf+0xB)^0], 0x44
  1003                          ;_PlasmaFlag stored from a
  1004  32EB  53 68             	mov	[_PlasmaFlag^0], a
  1005                          ;lcd.c: 374: (PRT2DR |= 0x20);
  1006  32ED  43 08 20          	or	reg[8], 0x20
  1007  32F0  70 FE             	and	f, 0xFE	;#
  1008                          ;lcd.c: 375: asm("and F, FEh");
  1009                          ;lcd.c: 376: WriteAll_1621(0,DisplayBuf,12);
  1010  32F2  55 8E  0C         	mov	[?_WriteAll_1621^0], 12
  1011  32F5  50 00             	mov	a, 0
  1012  32F7  57 72             	mov	x, <(<_DisplayBuf)
  1013  32F9  71 80             	or	f, 0x80	;select multiple RAM page mode
  1014  32FB  7C 3721           	call	_WriteAll_1621
  1015  32FE  71 01             	or	f, 1	;#
  1016                          ;lcd.c: 377: asm("or  F, 01h");
  1017                          ;lcd.c: 378: (PRT2DR &= ~0x20);
  1018  3300  41 08 DF          	and	reg[8], 0xDF
  1019                          ;lcd.c: 379: }
  1020                          ;			CUR_PP=0 XIO=0 
  1021  3303  7F                	ret
  1022  3304                    __end_of_LCDOuputAll:
  1023                          ; =============== function _LCDOuputAll ends ============
  1024                          ; *************** function _Si7020CalcTemp *****************
  1025                          ; Defined at:
  1026                          ;		line 62 in file "./si7020.c"
  1027                          ; Parameters:
  1028                          ;		data        	reg:   xa	type: unsigned int 
  1029                          ; Auto variables:
  1030                          ;		data        	       	type: unsigned int 
  1031                          ;		temp        	       	type: long 
  1032                          ;		result      	       	type: char 
  1033                          ; Return value:
  1034                          ;		type: char 
  1035                          ;		size: 1
  1036                          ; Registers used:
  1037                          ;		a, x, CUR_PP, mret
  1038                          ; Tracked objects:
  1039                          ;		On entry : CUR_PP=0 IDX_PP=0 XIO=0 PG? MVR_PP? MVW_PP? 
  1040                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  1041                          ;		Unchanged: MVR_PP MVW_PP 
  1042                          ; Data sizes:
  1043                          ;		Autos:    7
  1044                          ;		Params:   0
  1045                          ;		Temp:     4
  1046                          ;		Total:   11
  1047                          ; This function calls:
  1048                          ;		___lmul
  1049                          ;		___wmul
  1050                          ; This function is called by:
  1051                          ;		_main
  1052                          ; This function uses a non-reentrant model
  1053                          ; 
  1054  00AE                    __size_of_Si7020CalcTemp	equ	__end_of_Si7020CalcTemp-_Si7020CalcTemp
  1055                          ;si7020.c: 61: signed char Si7020CalcTemp(unsigned int data)
  1056                          ;si7020.c: 62: {
  1057                          ;			CUR_PP=0 IDX_PP=0 XIO=0 PG=2 
  1058  3304                    _Si7020CalcTemp:
  1059                          ;Si7020CalcTemp@data stored from xa
  1060  3304  53 8E             	mov	[(??_Si7020CalcTemp^0+1)], a
  1061  3306  5A 8D             	mov	[??_Si7020CalcTemp^0], x
  1062                          ;si7020.c: 63: signed long temp;
  1063                          ;si7020.c: 64: signed char result;
  1064                          ;si7020.c: 66: (PRT2DR |= 0x20);
  1065  3308  43 08 20          	or	reg[8], 0x20
  1066  330B  70 FE             	and	f, 0xFE	;#
  1067                          ;si7020.c: 67: asm("and F, FEh");
  1068                          ;si7020.c: 69: temp = data;
  1069  330D  5F 92  8E         	mov	[(??_Si7020CalcTemp+5)^0], [(??_Si7020CalcTemp+1)^0]
  1070  3310  5F 91  8D         	mov	[(??_Si7020CalcTemp+4)^0], [??_Si7020CalcTemp^0]
  1071  3313  55 90  00         	mov	[(??_Si7020CalcTemp+3)^0], 0
  1072  3316  55 8F  00         	mov	[(??_Si7020CalcTemp+2)^0], 0
  1073                          ;si7020.c: 70: temp = temp*175;
  1074  3319  5F 98  8F         	mov	[?___lmul^0], [(??_Si7020CalcTemp+2)^0]
  1075  331C  5F 99  90         	mov	[(?___lmul+1)^0], [(??_Si7020CalcTemp+3)^0]
  1076  331F  5F 9A  91         	mov	[(?___lmul+2)^0], [(??_Si7020CalcTemp+4)^0]
  1077  3322  5F 9B  92         	mov	[(?___lmul+3)^0], [(??_Si7020CalcTemp+5)^0]
  1078  3325  55 9C  00         	mov	[(?___lmul+4)^0], 0
  1079  3328  55 9D  00         	mov	[((?___lmul+4)^0+1)], 0
  1080  332B  55 9E  00         	mov	[((?___lmul+4)^0+2)], 0
  1081  332E  55 9F  AF         	mov	[((?___lmul+4)^0+3)], 175
  1082  3331  7C 351E           	call	___lmul
  1083  3334  5F 8F  98         	mov	[(??_Si7020CalcTemp+2)^0], [?___lmul^0]
  1084  3337  5F 90  99         	mov	[(??_Si7020CalcTemp+3)^0], [(?___lmul+1)^0]
  1085  333A  5F 91  9A         	mov	[(??_Si7020CalcTemp+4)^0], [(?___lmul+2)^0]
  1086  333D  5F 92  9B         	mov	[(??_Si7020CalcTemp+5)^0], [(?___lmul+3)^0]
  1087                          ;si7020.c: 71: temp += (data>>2)*3;
  1088  3340  55 98  00         	mov	[?___wmul^0], 0
  1089  3343  55 99  03         	mov	[(?___wmul^0+1)], 3
  1090  3346  50 02             	mov	a, 2
  1091  3348  5F 94  8D         	mov	[(??_Si7020CalcTemp^0+7)], [??_Si7020CalcTemp^0]
  1092  334B  5F 95  8E         	mov	[(??_Si7020CalcTemp^0+8)], [(??_Si7020CalcTemp+1)^0]
  1093  334E  70 FB             	and	f, 0xFB
  1094  3350                    u424:
  1095  3350  6E 94             	rrc	[(??_Si7020CalcTemp^0+7)]
  1096  3352  6E 95             	rrc	[(??_Si7020CalcTemp^0+8)]
  1097  3354  78                	dec	a
  1098  3355  BFFA              	jnz	u424
  1099  3357  51 95             	mov	a, [(??_Si7020CalcTemp^0+8)]
  1100  3359  58 94             	mov	x, [(??_Si7020CalcTemp^0+7)]
  1101  335B  71 80             	or	f, 0x80	;select multiple RAM page mode
  1102  335D  7C 363E           	call	___wmul
  1103  3360  5A 96             	mov	[(??_Si7020CalcTemp^0+9)], x
  1104  3362  53 97             	mov	[(??_Si7020CalcTemp^0+10)], a
  1105  3364  51 97             	mov	a, [(??_Si7020CalcTemp^0+10)]
  1106  3366  04 92             	add	[((??_Si7020CalcTemp+2)^0+3)], a
  1107  3368  51 96             	mov	a, [(??_Si7020CalcTemp^0+9)]
  1108  336A  0C 91             	adc	[((??_Si7020CalcTemp+2)^0+2)], a
  1109  336C  50 00             	mov	a, 0
  1110  336E  0C 90             	adc	[((??_Si7020CalcTemp+2)^0+1)], a
  1111  3370  0C 8F             	adc	[(??_Si7020CalcTemp+2)^0], a
  1112                          ;si7020.c: 72: temp >>= 16;
  1113  3372  50 10             	mov	a, 16
  1114  3374                    u434:
  1115  3374  68 8F             	asr	[(??_Si7020CalcTemp+2)^0]
  1116  3376  6E 90             	rrc	[((??_Si7020CalcTemp+2)^0+1)]
  1117  3378  6E 91             	rrc	[((??_Si7020CalcTemp+2)^0+2)]
  1118  337A  6E 92             	rrc	[((??_Si7020CalcTemp+2)^0+3)]
  1119  337C  78                	dec	a
  1120  337D  BFF6              	jnz	u434
  1121                          ;si7020.c: 73: temp -= 47;
  1122  337F  06 92  D1         	add	[((??_Si7020CalcTemp+2)^0+3)], 209
  1123  3382  0E 91  FF         	adc	[((??_Si7020CalcTemp+2)^0+2)], 255
  1124  3385  0E 90  FF         	adc	[((??_Si7020CalcTemp+2)^0+1)], 255
  1125  3388  0E 8F  FF         	adc	[(??_Si7020CalcTemp+2)^0], 255
  1126                          ;si7020.c: 74: if (temp < -9)
  1127  338B  3C 92  F7         	cmp	[((??_Si7020CalcTemp+2)^0+3)], 247
  1128  338E  51 91             	mov	a, [((??_Si7020CalcTemp+2)^0+2)]
  1129  3390  19 FF             	sbb	a, 255
  1130  3392  51 90             	mov	a, [((??_Si7020CalcTemp+2)^0+1)]
  1131  3394  19 FF             	sbb	a, 255
  1132  3396  51 8F             	mov	a, [(??_Si7020CalcTemp+2)^0]
  1133  3398  31 80             	xor	a, 0x80
  1134  339A  19 7F             	sbb	a, 127
  1135  339C  D00D              	jnc	l224
  1136                          ;si7020.c: 75: temp = -9;
  1137  339E  55 8F  FF         	mov	[(??_Si7020CalcTemp+2)^0], 255
  1138  33A1  55 90  FF         	mov	[((??_Si7020CalcTemp+2)^0+1)], 255
  1139  33A4  55 91  FF         	mov	[((??_Si7020CalcTemp+2)^0+2)], 255
  1140  33A7  55 92  F7         	mov	[((??_Si7020CalcTemp+2)^0+3)], 247
  1141                          ;			CUR_PP=0 XIO=0 
  1142  33AA                    l224:
  1143                          ;si7020.c: 77: result = temp;
  1144  33AA  51 92             	mov	a, [(??_Si7020CalcTemp+5)^0]
  1145  33AC  71 01             	or	f, 1	;#
  1146                          ;si7020.c: 79: asm("or  F, 01h");
  1147                          ;si7020.c: 80: (PRT2DR &= ~0x20);
  1148  33AE  41 08 DF          	and	reg[8], 0xDF
  1149                          ;si7020.c: 81: return result;
  1150                          ;si7020.c: 82: }
  1151                          ;			CUR_PP=0 XIO=0 
  1152  33B1  7F                	ret
  1153  33B2                    __end_of_Si7020CalcTemp:
  1154                          ; =============== function _Si7020CalcTemp ends ============
  1155                          ; *************** function _B2BSendData *****************
  1156                          ; Defined at:
  1157                          ;		line 96 in file "./boardcommunication.c"
  1158                          ; Parameters:
  1159                          ;		None
  1160                          ; Auto variables:
  1161                          ;		i           	       	type: unsigned char 
  1162                          ;		sum         	       	type: unsigned char 
  1163                          ; Return value:
  1164                          ;		type: void 
  1165                          ;		size: 0
  1166                          ; Registers used:
  1167                          ;		a, x, TMP_DR0, TMP_DR1, TMP_DR2, TMP_DR3, CUR_PP, IDX_PP, MVR_PP, MVW_PP, mret
  1168                          ; Tracked objects:
  1169                          ;		On entry : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  1170                          ;		On exit  : CUR_PP? IDX_PP? XIO=0 PG=2 MVR_PP? MVW_PP? 
  1171                          ;		Unchanged: 
  1172                          ; Data sizes:
  1173                          ;		Autos:    2
  1174                          ;		Params:   0
  1175                          ;		Temp:     3
  1176                          ;		Total:    5
  1177                          ; This function calls:
  1178                          ;		_UART_Board_Write
  1179                          ; This function is called by:
  1180                          ;		_main
  1181                          ; This function uses a non-reentrant model
  1182                          ; 
  1183  0041                    __size_of_B2BSendData	equ	__end_of_B2BSendData-_B2BSendData
  1184                          ;boardcommunication.c: 95: void B2BSendData()
  1185                          ;boardcommunication.c: 96: {
  1186                          ;			CUR_PP=0 XIO=0 PG=2 
  1187  33B2                    _B2BSendData:
  1188                          ;boardcommunication.c: 97: u8 i;
  1189                          ;boardcommunication.c: 98: u8 sum = 0;
  1190  33B2  55 8E  00         	mov	[(??_B2BSendData+1)^0], 0
  1191                          ;boardcommunication.c: 99: myTxUnion.myTxFrame.Head = 0x444D;
  1192  33B5  55 37  44         	mov	[_myTxUnion^0], 68
  1193  33B8  55 38  4D         	mov	[(_myTxUnion^0+1)], 77
  1194                          ;boardcommunication.c: 100: myTxUnion.myTxFrame.Length = 6;
  1195  33BB  55 39  00         	mov	[(_myTxUnion+2)^0], 0
  1196  33BE  55 3A  06         	mov	[((_myTxUnion+2)^0+1)], 6
  1197                          ;boardcommunication.c: 101: myTxUnion.myTxFrame.PMdata = data_pm2_5;
  1198  33C1  5F 3B  53         	mov	[(_myTxUnion+4)^0], [_data_pm2_5^0]
  1199  33C4  5F 3C  54         	mov	[(_myTxUnion+5)^0], [(_data_pm2_5+1)^0]
  1200                          ;boardcommunication.c: 102: myTxUnion.myTxFrame.Light = LightLevel;
  1201  33C7  5F 3D  62         	mov	[(_myTxUnion+6)^0], [_LightLevel^0]
  1202                          ;boardcommunication.c: 103: myTxUnion.myTxFrame.Temperature = Temperature;
  1203  33CA  5F 3E  6D         	mov	[(_myTxUnion+7)^0], [_Temperature^0]
  1204                          ;boardcommunication.c: 104: myTxUnion.myTxFrame.Humidity = Humidity;
  1205  33CD  5F 3F  5E         	mov	[(_myTxUnion+8)^0], [_Humidity^0]
  1206                          ;boardcommunication.c: 106: for (i=0; i<9; i++)
  1207  33D0  57 00             	mov	x, 0
  1208                          ;			CUR_PP=0 XIO=0 
  1209  33D2                    l24:
  1210                          ;boardcommunication.c: 107: {
  1211                          ;boardcommunication.c: 108: sum += myTxUnion.TxBuf[i];
  1212  33D2  62 D3 00          	mov	reg[211], 0
  1213  33D5  52 37             	mov	a, [x+_myTxUnion]
  1214  33D7  04 8E             	add	[(??_B2BSendData+1)^0], a
  1215  33D9  75                	inc	x
  1216  33DA  5B                	mov	a, x
  1217  33DB  39 09             	cmp	a, 9
  1218  33DD  CFF4              	jc	l24
  1219                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
  1220                          ;boardcommunication.c: 109: }
  1221                          ;boardcommunication.c: 110: myTxUnion.myTxFrame.CheckSum = sum;
  1222  33DF  5F 40  8E         	mov	[(_myTxUnion+9)^0], [(??_B2BSendData+1)^0]
  1223                          ;boardcommunication.c: 117: UART_Board_Write(myTxUnion.TxBuf,10);
  1224  33E2  50 0A             	mov	a, 10
  1225  33E4  08                	push	a
  1226  33E5  50 80             	mov	a, 128
  1227  33E7  08                	push	a
  1228  33E8  50 37             	mov	a, <(<_myTxUnion)
  1229  33EA  08                	push	a
  1230  33EB  71 80             	or	f, 0x80	;select multiple RAM page mode
  1231  33ED  7C 2E49           	call	_UART_Board_Write
  1232  33F0  38 FD             	add	sp, -3
  1233                          ;boardcommunication.c: 118: }
  1234                          ;			XIO=0 PG=2 
  1235  33F2  7F                	ret
  1236  33F3                    __end_of_B2BSendData:
  1237                          ; =============== function _B2BSendData ends ============
  1238                          ; *************** function _LightRank *****************
  1239                          ; Defined at:
  1240                          ;		line 72 in file "./main.c"
  1241                          ; Parameters:
  1242                          ;		light       	reg:   xa	type: unsigned int 
  1243                          ; Auto variables:
  1244                          ;		light       	       	type: unsigned int 
  1245                          ;		i           	       	type: unsigned char 
  1246                          ;		duty        	       	type: unsigned char 
  1247                          ; Return value:
  1248                          ;		type: unsigned char 
  1249                          ;		size: 1
  1250                          ; Registers used:
  1251                          ;		a, x, CUR_PP
  1252                          ; Tracked objects:
  1253                          ;		On entry : CUR_PP=0 IDX_PP? XIO=1 PG=2 MVR_PP? MVW_PP? 
  1254                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  1255                          ;		Unchanged: IDX_PP MVR_PP MVW_PP 
  1256                          ; Data sizes:
  1257                          ;		Autos:    4
  1258                          ;		Params:   0
  1259                          ;		Temp:     1
  1260                          ;		Total:    5
  1261                          ; This function calls:
  1262                          ;		Nothing
  1263                          ; This function is called by:
  1264                          ;		_main
  1265                          ; This function uses a non-reentrant model
  1266                          ; 
  1267  0032                    __size_of_LightRank	equ	__end_of_LightRank-_LightRank
  1268                          ;main.c: 71: unsigned char LightRank(unsigned int light)
  1269                          ;main.c: 72: {
  1270                          ;			CUR_PP=0 XIO=1 PG=2 
  1271  33F3                    _LightRank:
  1272                          ;LightRank@light stored from xa
  1273  33F3  53 8E             	mov	[(??_LightRank^0+1)], a
  1274  33F5  5A 8D             	mov	[??_LightRank^0], x
  1275                          ;main.c: 73: unsigned char duty,i;
  1276                          ;main.c: 74: duty = 255;
  1277  33F7  55 90  FF         	mov	[(??_LightRank+3)^0], 255
  1278                          ;main.c: 75: LightLevel = 0;
  1279  33FA  55 62  00         	mov	[_LightLevel^0], 0
  1280                          ;main.c: 76: for(i=0;i<4;i++)
  1281  33FD  55 8F  00         	mov	[(??_LightRank+2)^0], 0
  1282                          ;			CUR_PP=0 
  1283  3400                    l165:
  1284                          ;main.c: 77: {
  1285                          ;main.c: 78: if (light < RankLevel[i])
  1286  3400  51 8F             	mov	a, [(??_LightRank+2)^0]
  1287  3402  01 14             	add	a, <_RankLevel
  1288  3404  5C                	mov	x, a
  1289  3405  50 3F             	mov	a, >_RankLevel
  1290  3407  28                	romx
  1291  3408  53 91             	mov	[(??_LightRank^0+4)], a
  1292  340A  51 8E             	mov	a, [(??_LightRank^0+1)]
  1293  340C  3A 91             	cmp	a, [(??_LightRank^0+4)]
  1294  340E  51 8D             	mov	a, [??_LightRank^0]
  1295  3410  19 00             	sbb	a, 0
  1296                          ;main.c: 79: {
  1297                          ;main.c: 80: break;
  1298  3412  C00D              	jc	l166
  1299                          ;			CUR_PP=0 
  1300                          ;main.c: 82: else
  1301                          ;main.c: 83: {
  1302                          ;main.c: 84: duty -= 63;
  1303  3414  16 90  3F         	sub	[(??_LightRank+3)^0], 63
  1304                          ;main.c: 85: LightLevel ++;
  1305  3417  76 62             	inc	[_LightLevel^0]
  1306                          ;			CUR_PP=0 
  1307  3419  76 8F             	inc	[(??_LightRank+2)^0]
  1308  341B  3C 8F  04         	cmp	[(??_LightRank+2)^0], 4
  1309  341E  CFE1              	jc	l165
  1310                          ;			CUR_PP=0 
  1311  3420                    l166:
  1312                          ;main.c: 86: }
  1313                          ;main.c: 87: }
  1314                          ;main.c: 88: return duty;
  1315  3420  51 90             	mov	a, [(??_LightRank+3)^0]
  1316                          ;main.c: 89: }
  1317                          ;			CUR_PP=0 
  1318  3422  70 CF             	and	f, 0xCF	;select user reg space
  1319  3424  7F                	ret
  1320  3425                    __end_of_LightRank:
  1321                          ; =============== function _LightRank ends ============
  1322                          ; *************** function _CRC8Check *****************
  1323                          ; Defined at:
  1324                          ;		line 146 in file "./si7020.c"
  1325                          ; Parameters:
  1326                          ;		None
  1327                          ; Auto variables:
  1328                          ;		None
  1329                          ; Return value:
  1330                          ;		type: unsigned char 
  1331                          ;		size: 1
  1332                          ; Registers used:
  1333                          ;		a, x, CUR_PP
  1334                          ; Tracked objects:
  1335                          ;		On entry : CUR_PP=0 IDX_PP=0 XIO=0 PG? MVR_PP? MVW_PP? 
  1336                          ;		On exit  : CUR_PP=0 IDX_PP=0 XIO=0 PG? MVR_PP? MVW_PP? 
  1337                          ;		Unchanged: MVR_PP MVW_PP 
  1338                          ; Data sizes:
  1339                          ;		Autos:    0
  1340                          ;		Params:   0
  1341                          ;		Temp:     0
  1342                          ;		Total:    0
  1343                          ; This function calls:
  1344                          ;		_LeftRotate
  1345                          ; This function is called by:
  1346                          ;		_main
  1347                          ; This function uses a non-reentrant model
  1348                          ; 
  1349  002A                    __size_of_CRC8Check	equ	__end_of_CRC8Check-_CRC8Check
  1350                          ;si7020.c: 145: unsigned char CRC8Check()
  1351                          ;si7020.c: 146: {
  1352                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
  1353  3425                    _CRC8Check:
  1354                          ;si7020.c: 147: while(1)
  1355                          ;			CUR_PP=0 IDX_PP=0 XIO=0 PG=2 
  1356  3425                    l238:
  1357                          ;si7020.c: 148: {
  1358                          ;si7020.c: 149: if(RecBuf[0]&0x80)
  1359  3425  3C 7E  80         	cmp	[_RecBuf^0], 128
  1360  3428  C00F              	jc	l240
  1361                          ;si7020.c: 150: {
  1362                          ;si7020.c: 151: RecBuf[0] ^= poly_h;
  1363  342A  36 7E  98         	xor	[_RecBuf^0], 0x98
  1364                          ;si7020.c: 152: RecBuf[1] ^= poly_l;
  1365  342D  36 7F  80         	xor	[(_RecBuf+1)^0], 0x80
  1366                          ;si7020.c: 153: LeftRotate();
  1367  3430  71 80             	or	f, 0x80	;select multiple RAM page mode
  1368  3432  7C 34D3           	call	_LeftRotate
  1369                          ;si7020.c: 154: }
  1370  3435  7D 343D           	jmp	l241
  1371                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
  1372  3438                    l240:
  1373                          ;si7020.c: 155: else
  1374                          ;si7020.c: 156: {
  1375                          ;si7020.c: 157: LeftRotate();
  1376  3438  71 80             	or	f, 0x80	;select multiple RAM page mode
  1377  343A  7C 34D3           	call	_LeftRotate
  1378                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
  1379  343D                    l241:
  1380                          ;si7020.c: 158: }
  1381                          ;si7020.c: 160: if(data_length <= 8)
  1382  343D  3C 70  09         	cmp	[_data_length^0], 9
  1383  3440  DFE4              	jnc	l238
  1384                          ;si7020.c: 161: break;
  1385                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
  1386                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
  1387                          ;si7020.c: 162: }
  1388                          ;si7020.c: 164: data_length = 24;
  1389  3442  55 70  18         	mov	[_data_length^0], 24
  1390                          ;si7020.c: 166: if(!RecBuf[0])
  1391  3445  51 7E             	mov	a, [_RecBuf^0]
  1392  3447  B004              	jnz	l243
  1393                          ;si7020.c: 167: {
  1394                          ;si7020.c: 168: return 1;
  1395  3449  50 01             	mov	a, 1
  1396  344B  7F                	ret
  1397                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
  1398  344C                    l243:
  1399                          ;si7020.c: 170: else
  1400                          ;si7020.c: 171: {
  1401                          ;si7020.c: 172: return 0;
  1402  344C  50 00             	mov	a, 0
  1403                          ;si7020.c: 173: }
  1404                          ;si7020.c: 174: }
  1405                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
  1406  344E  7F                	ret
  1407  344F                    __end_of_CRC8Check:
  1408                          ; =============== function _CRC8Check ends ============
  1409                          ; *************** function _Si7020Read_RH_NHM *****************
  1410                          ; Defined at:
  1411                          ;		line 23 in file "./si7020.c"
  1412                          ; Parameters:
  1413                          ;		buffer      	reg:    a	type: PTR unsigned char ; Largest target is 5
  1414                          ;		 -> RecBuf(5), 
  1415                          ; Auto variables:
  1416                          ;		buffer      	       	type: PTR unsigned char ; Largest target is 5
  1417                          ;		 -> RecBuf(5), 
  1418                          ;		ret         	       	type: unsigned char 
  1419                          ; Return value:
  1420                          ;		type: void 
  1421                          ;		size: 0
  1422                          ; Registers used:
  1423                          ;		a, x, CUR_PP
  1424                          ; Tracked objects:
  1425                          ;		On entry : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  1426                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  1427                          ;		Unchanged: MVR_PP MVW_PP 
  1428                          ; Data sizes:
  1429                          ;		Autos:    2
  1430                          ;		Params:   0
  1431                          ;		Temp:     0
  1432                          ;		Total:    2
  1433                          ; This function calls:
  1434                          ;		_IRcvBytes
  1435                          ; This function is called by:
  1436                          ;		_main
  1437                          ; This function uses a non-reentrant model
  1438                          ; 
  1439  001C                    __size_of_Si7020Read_RH_NHM	equ	__end_of_Si7020Read_RH_NHM-_Si7020Read_RH_NHM
  1440                          ;si7020.c: 22: void Si7020Read_RH_NHM(unsigned char * buffer)
  1441                          ;si7020.c: 23: {
  1442                          ;			CUR_PP=0 XIO=0 PG=2 
  1443  344F                    _Si7020Read_RH_NHM:
  1444                          ;Si7020Read_RH_NHM@buffer stored from a
  1445  344F  53 8D             	mov	[??_Si7020Read_RH_NHM^0], a
  1446                          ;si7020.c: 24: char ret;
  1447                          ;si7020.c: 25: IICTimeOutTimer = 6;
  1448  3451  55 5F  06         	mov	[_IICTimeOutTimer^0], 6
  1449                          ;si7020.c: 26: while (1)
  1450                          ;			CUR_PP=0 XIO=0 
  1451  3454                    l217:
  1452                          ;si7020.c: 27: {
  1453                          ;si7020.c: 28: ret = IRcvBytes(0x80,buffer,3);
  1454  3454  55 8F  03         	mov	[?_IRcvBytes^0], 3
  1455  3457  50 80             	mov	a, 128
  1456  3459  58 8D             	mov	x, [??_Si7020Read_RH_NHM^0]
  1457  345B  71 80             	or	f, 0x80	;select multiple RAM page mode
  1458  345D  7C 376D           	call	_IRcvBytes
  1459  3460  53 8E             	mov	[(??_Si7020Read_RH_NHM+1)^0], a
  1460                          ;si7020.c: 29: if (ret || !IICTimeOutTimer)
  1461  3462  51 8E             	mov	a, [(??_Si7020Read_RH_NHM+1)^0]
  1462  3464  B005              	jnz	l218
  1463  3466  51 5F             	mov	a, [_IICTimeOutTimer^0]
  1464  3468  BFEB              	jnz	l217
  1465                          ;			CUR_PP=0 XIO=0 
  1466                          ;si7020.c: 30: break;
  1467                          ;			CUR_PP=0 XIO=0 
  1468                          ;			CUR_PP=0 XIO=0 
  1469  346A                    l218:
  1470                          ;si7020.c: 31: }
  1471                          ;si7020.c: 32: }
  1472                          ;			CUR_PP=0 XIO=0 
  1473  346A  7F                	ret
  1474  346B                    __end_of_Si7020Read_RH_NHM:
  1475                          ; =============== function _Si7020Read_RH_NHM ends ============
  1476                          ; *************** function _Init_IIC *****************
  1477                          ; Defined at:
  1478                          ;		line 8 in file "./software_iic.c"
  1479                          ; Parameters:
  1480                          ;		None
  1481                          ; Auto variables:
  1482                          ;		None
  1483                          ; Return value:
  1484                          ;		type: void 
  1485                          ;		size: 0
  1486                          ; Registers used:
  1487                          ;		None
  1488                          ; Tracked objects:
  1489                          ;		On entry : CUR_PP=0 IDX_PP? XIO=0 PG=2 MVR_PP? MVW_PP? 
  1490                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG=2 MVR_PP? MVW_PP? 
  1491                          ;		Unchanged: IDX_PP MVR_PP MVW_PP 
  1492                          ; Data sizes:
  1493                          ;		Autos:    0
  1494                          ;		Params:   0
  1495                          ;		Temp:     0
  1496                          ;		Total:    0
  1497                          ; This function calls:
  1498                          ;		Nothing
  1499                          ; This function is called by:
  1500                          ;		_main
  1501                          ; This function uses a non-reentrant model
  1502                          ; 
  1503  0011                    __size_of_Init_IIC	equ	__end_of_Init_IIC-_Init_IIC
  1504                          ;software_iic.c: 7: void Init_IIC(void)
  1505                          ;software_iic.c: 8: {
  1506                          ;			CUR_PP=0 XIO=0 PG=2 
  1507  346B                    _Init_IIC:
  1508                          ;software_iic.c: 10: PRT1DM2 |= (0x20 + 0x80);
  1509  346B  43 07 A0          	or	reg[7], 0xA0
  1510                          ;software_iic.c: 11: PRT1DM1 |= (0x20 + 0x80);
  1511  346E  71 10             	or	f, 0x10	; select config register space
  1512  3470  43 05 A0          	or	reg[5], 0xA0
  1513                          ;software_iic.c: 12: PRT1DM0 |= (0x20 + 0x80);
  1514  3473  43 04 A0          	or	reg[4], 0xA0
  1515                          ;software_iic.c: 13: PRT1DR |= (0x20 + 0x80);
  1516  3476  70 CF             	and	f, 0xCF	;select user reg space
  1517  3478  43 04 A0          	or	reg[4], 0xA0
  1518                          ;software_iic.c: 14: }
  1519                          ;			CUR_PP=0 XIO=0 PG=2 
  1520  347B  7F                	ret
  1521  347C                    __end_of_Init_IIC:
  1522                          ; =============== function _Init_IIC ends ============
  1523                          ; *************** function _B2BFrameCheck *****************
  1524                          ; Defined at:
  1525                          ;		line 73 in file "./boardcommunication.c"
  1526                          ; Parameters:
  1527                          ;		None
  1528                          ; Auto variables:
  1529                          ;		i           	       	type: unsigned char 
  1530                          ;		checksum    	       	type: unsigned char 
  1531                          ; Return value:
  1532                          ;		type: unsigned char 
  1533                          ;		size: 1
  1534                          ; Registers used:
  1535                          ;		a, x, CUR_PP
  1536                          ; Tracked objects:
  1537                          ;		On entry : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  1538                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  1539                          ;		Unchanged: MVR_PP MVW_PP 
  1540                          ; Data sizes:
  1541                          ;		Autos:    2
  1542                          ;		Params:   0
  1543                          ;		Temp:     3
  1544                          ;		Total:    5
  1545                          ; This function calls:
  1546                          ;		Nothing
  1547                          ; This function is called by:
  1548                          ;		_main
  1549                          ; This function uses a non-reentrant model
  1550                          ; 
  1551  0044                    __size_of_B2BFrameCheck	equ	__end_of_B2BFrameCheck-_B2BFrameCheck
  1552                          ;boardcommunication.c: 72: u8 B2BFrameCheck(void)
  1553                          ;boardcommunication.c: 73: {
  1554                          ;			CUR_PP=0 XIO=0 PG=2 
  1555  347C                    _B2BFrameCheck:
  1556                          ;boardcommunication.c: 74: u8 checksum = 0;
  1557  347C  55 8E  00         	mov	[(??_B2BFrameCheck+1)^0], 0
  1558                          ;boardcommunication.c: 75: u8 i = 0;
  1559                          ;boardcommunication.c: 77: for (i = 0; i < (myRxUnion.myRxFrame.Length+2); i++)
  1560  347F  57 00             	mov	x, 0
  1561  3481  7D 348C           	jmp	l20
  1562                          ;			CUR_PP=0 XIO=0 
  1563  3484                    l17:
  1564                          ;boardcommunication.c: 78: {
  1565                          ;boardcommunication.c: 79: checksum += myRxUnion.RxBuf[i];
  1566  3484  62 D3 00          	mov	reg[211], 0
  1567  3487  52 28             	mov	a, [x+_myRxUnion]
  1568  3489  04 8E             	add	[(??_B2BFrameCheck+1)^0], a
  1569  348B  75                	inc	x
  1570                          ;			CUR_PP=0 XIO=0 
  1571  348C                    l20:
  1572  348C  5F 90  2A         	mov	[(??_B2BFrameCheck^0+3)], [(_myRxUnion+2)^0]
  1573  348F  55 8F  00         	mov	[(??_B2BFrameCheck^0+2)], 0
  1574  3492  06 90  02         	add	[(??_B2BFrameCheck^0+3)], 2
  1575  3495  0E 8F  00         	adc	[(??_B2BFrameCheck^0+2)], 0
  1576  3498  5B                	mov	a, x
  1577  3499  53 91             	mov	[(??_B2BFrameCheck^0+4)], a
  1578  349B  51 8F             	mov	a, [(??_B2BFrameCheck^0+2)]
  1579  349D  31 80             	xor	a, 0x80
  1580  349F  39 80             	cmp	a, 128
  1581  34A1  72 04             	xor	f, 4
  1582  34A3  B005              	jnz	u283
  1583  34A5  51 91             	mov	a, [(??_B2BFrameCheck^0+4)]
  1584  34A7  3A 90             	cmp	a, [(??_B2BFrameCheck^0+3)]
  1585  34A9                    u283:
  1586  34A9  CFDA              	jc	l17
  1587                          ;			CUR_PP=0 XIO=0 
  1588                          ;boardcommunication.c: 80: }
  1589                          ;boardcommunication.c: 82: myRxUnion.myRxFrame.Length = 0;
  1590  34AB  55 2A  00         	mov	[(_myRxUnion+2)^0], 0
  1591                          ;boardcommunication.c: 83: myRxUnion.myRxFrame.Head = 0;
  1592  34AE  55 28  00         	mov	[_myRxUnion^0], 0
  1593  34B1  55 29  00         	mov	[(_myRxUnion^0+1)], 0
  1594                          ;boardcommunication.c: 85: if (checksum == myRxUnion.myRxFrame.checksum)
  1595  34B4  51 33             	mov	a, [(_myRxUnion+11)^0]
  1596  34B6  3A 8E             	cmp	a, [(??_B2BFrameCheck+1)^0]
  1597  34B8  B004              	jnz	l21
  1598                          ;boardcommunication.c: 86: {
  1599                          ;boardcommunication.c: 87: return 1;
  1600  34BA  50 01             	mov	a, 1
  1601  34BC  7F                	ret
  1602                          ;			CUR_PP=0 XIO=0 
  1603  34BD                    l21:
  1604                          ;boardcommunication.c: 89: else
  1605                          ;boardcommunication.c: 90: {
  1606                          ;boardcommunication.c: 91: return 0;
  1607  34BD  50 00             	mov	a, 0
  1608                          ;boardcommunication.c: 92: }
  1609                          ;boardcommunication.c: 93: }
  1610                          ;			CUR_PP=0 XIO=0 
  1611  34BF  7F                	ret
  1612  34C0                    __end_of_B2BFrameCheck:
  1613                          ; =============== function _B2BFrameCheck ends ============
  1614                          ; *************** function _HT1621B_Init *****************
  1615                          ; Defined at:
  1616                          ;		line 99 in file "./ht1621b.c"
  1617                          ; Parameters:
  1618                          ;		None
  1619                          ; Auto variables:
  1620                          ;		None
  1621                          ; Return value:
  1622                          ;		type: void 
  1623                          ;		size: 0
  1624                          ; Registers used:
  1625                          ;		a, x, CUR_PP
  1626                          ; Tracked objects:
  1627                          ;		On entry : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  1628                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  1629                          ;		Unchanged: IDX_PP MVR_PP MVW_PP 
  1630                          ; Data sizes:
  1631                          ;		Autos:    0
  1632                          ;		Params:   0
  1633                          ;		Temp:     0
  1634                          ;		Total:    0
  1635                          ; This function calls:
  1636                          ;		_SendCmd
  1637                          ; This function is called by:
  1638                          ;		_main
  1639                          ; This function uses a non-reentrant model
  1640                          ; 
  1641  0013                    __size_of_HT1621B_Init	equ	__end_of_HT1621B_Init-_HT1621B_Init
  1642                          ;ht1621b.c: 98: void HT1621B_Init(void)
  1643                          ;ht1621b.c: 99: {
  1644                          ;			CUR_PP=0 XIO=0 PG=2 
  1645  34C0                    _HT1621B_Init:
  1646                          ;ht1621b.c: 100: SendCmd(0x29);
  1647  34C0  50 29             	mov	a, 41
  1648  34C2  7C 34FD           	call	_SendCmd
  1649                          ;ht1621b.c: 101: SendCmd(0x01);
  1650  34C5  50 01             	mov	a, 1
  1651  34C7  71 80             	or	f, 0x80	;select multiple RAM page mode
  1652  34C9  7C 34FD           	call	_SendCmd
  1653                          ;ht1621b.c: 102: SendCmd(0x03);
  1654  34CC  50 03             	mov	a, 3
  1655  34CE  71 80             	or	f, 0x80	;select multiple RAM page mode
  1656  34D0  7D 34FD           	jmp	_SendCmd
  1657                          ;ht1621b.c: 104: }
  1658                          ;			CUR_PP=0 XIO=0 
  1659  34D3                    __end_of_HT1621B_Init:
  1660                          ; =============== function _HT1621B_Init ends ============
  1661                          ; *************** function _LeftRotate *****************
  1662                          ; Defined at:
  1663                          ;		line 132 in file "./si7020.c"
  1664                          ; Parameters:
  1665                          ;		None
  1666                          ; Auto variables:
  1667                          ;		k           	       	type: unsigned char 
  1668                          ; Return value:
  1669                          ;		type: void 
  1670                          ;		size: 0
  1671                          ; Registers used:
  1672                          ;		a, x, CUR_PP
  1673                          ; Tracked objects:
  1674                          ;		On entry : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  1675                          ;		On exit  : CUR_PP=0 IDX_PP=0 XIO=0 PG? MVR_PP? MVW_PP? 
  1676                          ;		Unchanged: MVR_PP MVW_PP 
  1677                          ; Data sizes:
  1678                          ;		Autos:    2
  1679                          ;		Params:   0
  1680                          ;		Temp:     0
  1681                          ;		Total:    2
  1682                          ; This function calls:
  1683                          ;		Nothing
  1684                          ; This function is called by:
  1685                          ;		_CRC8Check
  1686                          ; This function uses a non-reentrant model
  1687                          ; 
  1688  002A                    __size_of_LeftRotate	equ	__end_of_LeftRotate-_LeftRotate
  1689                          ;si7020.c: 131: void LeftRotate()
  1690                          ;si7020.c: 132: {
  1691                          ;			CUR_PP=0 XIO=0 PG=2 
  1692  34D3                    _LeftRotate:
  1693                          ;si7020.c: 133: unsigned char k;
  1694                          ;si7020.c: 134: for(k=0;k<3;k++)
  1695  34D3  57 00             	mov	x, 0
  1696                          ;			XIO=0 
  1697  34D5                    l232:
  1698                          ;si7020.c: 135: {
  1699                          ;si7020.c: 136: RecBuf[k] <<= 1;
  1700  34D5  62 D3 00          	mov	reg[211], 0
  1701  34D8  66 7E             	asl	[x+_RecBuf]
  1702                          ;si7020.c: 137: if(k < 2)
  1703  34DA  5B                	mov	a, x
  1704  34DB  39 02             	cmp	a, 2
  1705  34DD  D013              	jnc	l235
  1706                          ;si7020.c: 138: {
  1707                          ;si7020.c: 139: RecBuf[k] |= (RecBuf[k+1]&0x80)?1:0;
  1708  34DF  62 D0 00          	mov	reg[208], 0
  1709  34E2  55 8E  00         	mov	[(??_LeftRotate+1)^0], 0
  1710  34E5  3D 7F  80         	cmp	[x+_RecBuf+1], 128
  1711  34E8  C004              	jc	l500003709
  1712  34EA  55 8E  01         	mov	[(??_LeftRotate+1)^0], 1
  1713                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
  1714  34ED                    l500003709:
  1715  34ED  51 8E             	mov	a, [(??_LeftRotate+1)^0]
  1716  34EF  2D 7E             	or	[x+_RecBuf], a
  1717                          ;			IDX_PP=0 XIO=0 
  1718  34F1                    l235:
  1719  34F1  75                	inc	x
  1720  34F2  5B                	mov	a, x
  1721  34F3  39 03             	cmp	a, 3
  1722  34F5  CFDF              	jc	l232
  1723                          ;			IDX_PP=0 XIO=0 
  1724                          ;si7020.c: 140: }
  1725                          ;si7020.c: 141: }
  1726                          ;si7020.c: 142: data_length --;
  1727  34F7  62 D0 00          	mov	reg[208], 0
  1728  34FA  7A 70             	dec	[_data_length^0]
  1729                          ;si7020.c: 143: }
  1730                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
  1731  34FC  7F                	ret
  1732  34FD                    __end_of_LeftRotate:
  1733                          ; =============== function _LeftRotate ends ============
  1734                          ; *************** function _SendCmd *****************
  1735                          ; Defined at:
  1736                          ;		line 68 in file "./ht1621b.c"
  1737                          ; Parameters:
  1738                          ;		command     	reg:    a	type: unsigned char 
  1739                          ; Auto variables:
  1740                          ;		command     	       	type: unsigned char 
  1741                          ; Return value:
  1742                          ;		type: void 
  1743                          ;		size: 0
  1744                          ; Registers used:
  1745                          ;		a, x, CUR_PP
  1746                          ; Tracked objects:
  1747                          ;		On entry : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  1748                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  1749                          ;		Unchanged: IDX_PP MVR_PP MVW_PP 
  1750                          ; Data sizes:
  1751                          ;		Autos:    1
  1752                          ;		Params:   0
  1753                          ;		Temp:     0
  1754                          ;		Total:    1
  1755                          ; This function calls:
  1756                          ;		_SendBit_1621
  1757                          ;		_delay_us
  1758                          ; This function is called by:
  1759                          ;		_HT1621B_Init
  1760                          ; This function uses a non-reentrant model
  1761                          ; 
  1762  0021                    __size_of_SendCmd	equ	__end_of_SendCmd-_SendCmd
  1763                          ;ht1621b.c: 67: void SendCmd(unsigned char command)
  1764                          ;ht1621b.c: 68: {
  1765                          ;			CUR_PP=0 XIO=0 PG=2 
  1766  34FD                    _SendCmd:
  1767                          ;SendCmd@command stored from a
  1768  34FD  53 8D             	mov	[??_SendCmd^0], a
  1769                          ;ht1621b.c: 69: (PRT0DR &= ~0x80);
  1770  34FF  41 00 7F          	and	reg[0], 0x7F
  1771                          ;ht1621b.c: 70: SendBit_1621(0x80,3);
  1772  3502  50 80             	mov	a, 128
  1773  3504  57 03             	mov	x, 3
  1774  3506  7C 38FD           	call	_SendBit_1621
  1775                          ;ht1621b.c: 71: SendBit_1621(command,9);
  1776  3509  51 8D             	mov	a, [??_SendCmd^0]
  1777  350B  57 09             	mov	x, 9
  1778  350D  71 80             	or	f, 0x80	;select multiple RAM page mode
  1779  350F  7C 38FD           	call	_SendBit_1621
  1780                          ;ht1621b.c: 72: (PRT0DR |= 0x80);
  1781  3512  43 00 80          	or	reg[0], 0x80
  1782                          ;ht1621b.c: 73: delay_us(4);
  1783  3515  50 04             	mov	a, 4
  1784  3517  57 00             	mov	x, 0
  1785  3519  71 80             	or	f, 0x80	;select multiple RAM page mode
  1786  351B  7D 3BC3           	jmp	_delay_us
  1787                          ;ht1621b.c: 74: }
  1788                          ;			CUR_PP=0 XIO=0 
  1789  351E                    __end_of_SendCmd:
  1790                          ; =============== function _SendCmd ends ============
  1791                          ; *************** function ___lmul *****************
  1792                          ; Defined at:
  1793                          ;		line 3 in file "C:\Program Files (x86)\HI-TECH Software\HCPSOC\PRO\9.61\sources\lmul.c"
  1794                          ; Parameters:
  1795                          ;		multiplier  	offs:   0	type: unsigned long 
  1796                          ;		multiplicand	offs:   4	type: unsigned long 
  1797                          ; Auto variables:
  1798                          ;		product     	       	type: unsigned long 
  1799                          ; Return value:
  1800                          ;		type: unsigned long 
  1801                          ;		size: 4
  1802                          ; Registers used:
  1803                          ;		a, CUR_PP
  1804                          ; Tracked objects:
  1805                          ;		On entry : CUR_PP=0 IDX_PP=0 XIO=0 PG=2 MVR_PP? MVW_PP? 
  1806                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  1807                          ;		Unchanged: MVR_PP MVW_PP 
  1808                          ; Data sizes:
  1809                          ;		Autos:    4
  1810                          ;		Params:   8
  1811                          ;		Temp:     0
  1812                          ;		Total:   12
  1813                          ; This function calls:
  1814                          ;		Nothing
  1815                          ; This function is called by:
  1816                          ;		_Si7020CalcTemp
  1817                          ;		_Si7020CalcRH
  1818                          ; This function uses a non-reentrant model
  1819                          ; 
  1820  0048                    __size_of___lmul	equ	__end_of___lmul-___lmul
  1821                          ;lmul.c: 1: unsigned long
  1822                          ;lmul.c: 2: __lmul(unsigned long multiplier, unsigned long multiplicand)
  1823                          ;lmul.c: 3: {
  1824                          ;			CUR_PP=0 IDX_PP=0 XIO=0 PG=2 
  1825  351E                    ___lmul:
  1826                          ;lmul.c: 4: unsigned long product = 0;
  1827  351E  50 00             	mov	a, 0
  1828  3520  53 A0             	mov	[??___lmul^0], a
  1829  3522  53 A1             	mov	[(??___lmul^0+1)], a
  1830  3524  53 A2             	mov	[(??___lmul^0+2)], a
  1831  3526  53 A3             	mov	[(??___lmul^0+3)], a
  1832                          ;lmul.c: 6: do {
  1833                          ;			CUR_PP=0 XIO=0 
  1834  3528                    l393:
  1835                          ;lmul.c: 7: if(multiplier & 1)
  1836  3528  47 9B  01         	tst	[(?___lmul+3)^0], 1
  1837  352B  A011              	jz	l394
  1838                          ;lmul.c: 8: product += multiplicand;
  1839  352D  51 9F             	mov	a, [((?___lmul+4)^0+3)]
  1840  352F  04 A3             	add	[(??___lmul^0+3)], a
  1841  3531  51 9E             	mov	a, [((?___lmul+4)^0+2)]
  1842  3533  0C A2             	adc	[(??___lmul^0+2)], a
  1843  3535  51 9D             	mov	a, [((?___lmul+4)^0+1)]
  1844  3537  0C A1             	adc	[(??___lmul^0+1)], a
  1845  3539  51 9C             	mov	a, [(?___lmul+4)^0]
  1846  353B  0C A0             	adc	[??___lmul^0], a
  1847                          ;			CUR_PP=0 XIO=0 
  1848  353D                    l394:
  1849                          ;lmul.c: 9: multiplicand <<= 1;
  1850  353D  65 9F             	asl	[((?___lmul+4)^0+3)]
  1851  353F  6B 9E             	rlc	[((?___lmul+4)^0+2)]
  1852  3541  6B 9D             	rlc	[((?___lmul+4)^0+1)]
  1853  3543  6B 9C             	rlc	[(?___lmul+4)^0]
  1854                          ;lmul.c: 10: multiplier >>= 1;
  1855  3545  70 FB             	and	f, 0xFB
  1856  3547  6E 98             	rrc	[?___lmul^0]
  1857  3549  6E 99             	rrc	[(?___lmul^0+1)]
  1858  354B  6E 9A             	rrc	[(?___lmul^0+2)]
  1859  354D  6E 9B             	rrc	[(?___lmul^0+3)]
  1860                          ;lmul.c: 11: } while(multiplier != 0);
  1861  354F  51 98             	mov	a, [?___lmul^0]
  1862  3551  2A 99             	or	a, [(?___lmul^0+1)]
  1863  3553  2A 9A             	or	a, [(?___lmul^0+2)]
  1864  3555  2A 9B             	or	a, [(?___lmul^0+3)]
  1865  3557  BFD0              	jnz	l393
  1866                          ;			CUR_PP=0 XIO=0 
  1867  3559  5F 98  A0         	mov	[?___lmul^0], [??___lmul^0]
  1868  355C  5F 99  A1         	mov	[(?___lmul+1)^0], [(??___lmul+1)^0]
  1869  355F  5F 9A  A2         	mov	[(?___lmul+2)^0], [(??___lmul+2)^0]
  1870  3562  5F 9B  A3         	mov	[(?___lmul+3)^0], [(??___lmul+3)^0]
  1871                          ;lmul.c: 13: }
  1872                          ;			CUR_PP=0 XIO=0 
  1873  3565  7F                	ret
  1874  3566                    __end_of___lmul:
  1875                          ; =============== function ___lmul ends ============
  1876                          ; *************** function _ShowLife *****************
  1877                          ; Defined at:
  1878                          ;		line 64 in file "./lcd.c"
  1879                          ; Parameters:
  1880                          ;		life        	reg:    a	type: unsigned char 
  1881                          ; Auto variables:
  1882                          ;		life        	       	type: unsigned char 
  1883                          ;		temp        	       	type: unsigned char 
  1884                          ;		index       	       	type: unsigned char 
  1885                          ; Return value:
  1886                          ;		type: void 
  1887                          ;		size: 0
  1888                          ; Registers used:
  1889                          ;		a, x, CUR_PP
  1890                          ; Tracked objects:
  1891                          ;		On entry : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  1892                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  1893                          ;		Unchanged: MVR_PP MVW_PP 
  1894                          ; Data sizes:
  1895                          ;		Autos:    3
  1896                          ;		Params:   0
  1897                          ;		Temp:     0
  1898                          ;		Total:    3
  1899                          ; This function calls:
  1900                          ;		___lbdiv
  1901                          ;		___lbmod
  1902                          ; This function is called by:
  1903                          ;		_LCDOuputAll
  1904                          ; This function uses a non-reentrant model
  1905                          ; 
  1906  0040                    __size_of_ShowLife	equ	__end_of_ShowLife-_ShowLife
  1907                          ;lcd.c: 63: void ShowLife(unsigned char life)
  1908                          ;lcd.c: 64: {
  1909                          ;			CUR_PP=0 XIO=0 PG=2 
  1910  3566                    _ShowLife:
  1911                          ;ShowLife@life stored from a
  1912  3566  53 8E             	mov	[??_ShowLife^0], a
  1913                          ;lcd.c: 65: unsigned char temp = life;
  1914  3568  51 8E             	mov	a, [??_ShowLife^0]
  1915                          ;ShowLife@temp stored from a
  1916  356A  53 90             	mov	[(??_ShowLife+2)^0], a
  1917                          ;lcd.c: 66: unsigned char index;
  1918                          ;lcd.c: 70: if (temp > 99)
  1919  356C  39 64             	cmp	a, 100
  1920  356E  C004              	jc	l86
  1921                          ;lcd.c: 71: {
  1922                          ;lcd.c: 72: temp = 99;
  1923  3570  55 90  63         	mov	[(??_ShowLife+2)^0], 99
  1924                          ;			CUR_PP=0 XIO=0 PG=2 
  1925  3573                    l86:
  1926                          ;lcd.c: 73: }
  1927                          ;lcd.c: 75: index = temp/10;
  1928  3573  51 90             	mov	a, [(??_ShowLife+2)^0]
  1929  3575  57 0A             	mov	x, 10
  1930  3577  7C 3801           	call	___lbdiv
  1931  357A  53 8F             	mov	[(??_ShowLife+1)^0], a
  1932                          ;lcd.c: 76: if(index)
  1933  357C  51 8F             	mov	a, [(??_ShowLife+1)^0]
  1934  357E  A00E              	jz	l87
  1935                          ;lcd.c: 77: {
  1936                          ;lcd.c: 78: DisplayBuf[3] = DigitSeg[index];
  1937  3580  51 8F             	mov	a, [(??_ShowLife+1)^0]
  1938  3582  01 00             	add	a, <_DigitSeg
  1939  3584  5C                	mov	x, a
  1940  3585  50 3F             	mov	a, >_DigitSeg
  1941  3587  28                	romx
  1942  3588  53 75             	mov	[(_DisplayBuf+3)^0], a
  1943                          ;lcd.c: 79: }
  1944  358A  7D 3590           	jmp	l88
  1945                          ;			CUR_PP=0 XIO=0 
  1946  358D                    l87:
  1947                          ;lcd.c: 80: else
  1948                          ;lcd.c: 81: {
  1949                          ;lcd.c: 82: DisplayBuf[3] = 0;
  1950  358D  55 75  00         	mov	[(_DisplayBuf+3)^0], 0
  1951                          ;			CUR_PP=0 XIO=0 
  1952  3590                    l88:
  1953                          ;lcd.c: 83: }
  1954                          ;lcd.c: 85: index = temp%10;
  1955  3590  51 90             	mov	a, [(??_ShowLife+2)^0]
  1956  3592  57 0A             	mov	x, 10
  1957  3594  71 80             	or	f, 0x80	;select multiple RAM page mode
  1958  3596  7C 37DD           	call	___lbmod
  1959  3599  53 8F             	mov	[(??_ShowLife+1)^0], a
  1960                          ;lcd.c: 86: DisplayBuf[4] = DigitSeg[index];
  1961  359B  51 8F             	mov	a, [(??_ShowLife+1)^0]
  1962  359D  01 00             	add	a, <_DigitSeg
  1963  359F  5C                	mov	x, a
  1964  35A0  50 3F             	mov	a, >_DigitSeg
  1965  35A2  28                	romx
  1966  35A3  53 76             	mov	[(_DisplayBuf+4)^0], a
  1967                          ;lcd.c: 89: }
  1968                          ;			CUR_PP=0 XIO=0 
  1969  35A5  7F                	ret
  1970  35A6                    __end_of_ShowLife:
  1971                          ; =============== function _ShowLife ends ============
  1972                          ; *************** function _ShowHumiTemp *****************
  1973                          ; Defined at:
  1974                          ;		line 91 in file "./lcd.c"
  1975                          ; Parameters:
  1976                          ;		value       	reg:    a	type: char 
  1977                          ; Auto variables:
  1978                          ;		value       	       	type: char 
  1979                          ;		temp        	       	type: char 
  1980                          ;		index       	       	type: unsigned char 
  1981                          ; Return value:
  1982                          ;		type: void 
  1983                          ;		size: 0
  1984                          ; Registers used:
  1985                          ;		a, x, CUR_PP
  1986                          ; Tracked objects:
  1987                          ;		On entry : CUR_PP=0 IDX_PP=0 XIO=0 PG? MVR_PP? MVW_PP? 
  1988                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  1989                          ;		Unchanged: MVR_PP MVW_PP 
  1990                          ; Data sizes:
  1991                          ;		Autos:    3
  1992                          ;		Params:   0
  1993                          ;		Temp:     2
  1994                          ;		Total:    5
  1995                          ; This function calls:
  1996                          ;		_abs
  1997                          ;		___awdiv
  1998                          ;		___awmod
  1999                          ; This function is called by:
  2000                          ;		_LCDOuputAll
  2001                          ; This function uses a non-reentrant model
  2002                          ; 
  2003  0098                    __size_of_ShowHumiTemp	equ	__end_of_ShowHumiTemp-_ShowHumiTemp
  2004                          ;lcd.c: 90: void ShowHumiTemp(signed char value)
  2005                          ;lcd.c: 91: {
  2006                          ;			CUR_PP=0 IDX_PP=0 XIO=0 PG=2 
  2007  35A6                    _ShowHumiTemp:
  2008                          ;ShowHumiTemp@value stored from a
  2009  35A6  53 8E             	mov	[??_ShowHumiTemp^0], a
  2010                          ;lcd.c: 92: signed char temp = value;
  2011  35A8  58 8E             	mov	x, [??_ShowHumiTemp^0]
  2012                          ;lcd.c: 93: unsigned char index;
  2013                          ;lcd.c: 97: if (temp > 99)
  2014  35AA  5B                	mov	a, x
  2015  35AB  31 80             	xor	a, 0x80
  2016  35AD  39 E4             	cmp	a, 228
  2017  35AF  C003              	jc	l90
  2018                          ;lcd.c: 98: {
  2019                          ;lcd.c: 99: temp = 99;
  2020  35B1  57 63             	mov	x, 99
  2021                          ;			CUR_PP=0 IDX_PP=0 XIO=0 PG=2 
  2022  35B3                    l90:
  2023                          ;ShowHumiTemp@temp stored from x
  2024  35B3  5A 8F             	mov	[(??_ShowHumiTemp+1)^0], x
  2025                          ;lcd.c: 100: }
  2026                          ;lcd.c: 102: if (temp < 0)
  2027  35B5  5B                	mov	a, x
  2028  35B6  31 80             	xor	a, 0x80
  2029  35B8  39 80             	cmp	a, 128
  2030  35BA  D02E              	jnc	l91
  2031                          ;lcd.c: 103: {
  2032                          ;lcd.c: 104: DisplayBuf[9] = 0x20;
  2033  35BC  55 7B  20         	mov	[(_DisplayBuf+9)^0], 32
  2034                          ;lcd.c: 105: temp = abs(temp);
  2035  35BF  51 8F             	mov	a, [(??_ShowHumiTemp+1)^0]
  2036  35C1  53 92             	mov	[(??_ShowHumiTemp^0+4)], a
  2037  35C3  55 91  00         	mov	[(??_ShowHumiTemp^0+3)], 0
  2038  35C6  6A                	rlc	a
  2039  35C7  1E 91  00         	sbb	[(??_ShowHumiTemp^0+3)], 0
  2040  35CA  51 92             	mov	a, [(??_ShowHumiTemp^0+4)]
  2041  35CC  58 91             	mov	x, [(??_ShowHumiTemp^0+3)]
  2042  35CE  7C 38E4           	call	_abs
  2043  35D1  53 8F             	mov	[(??_ShowHumiTemp+1)^0], a
  2044                          ;lcd.c: 106: if (temp > 9)
  2045  35D3  51 8F             	mov	a, [(??_ShowHumiTemp+1)^0]
  2046  35D5  31 80             	xor	a, 0x80
  2047  35D7  39 8A             	cmp	a, 138
  2048  35D9  C004              	jc	l92
  2049                          ;lcd.c: 107: {
  2050                          ;lcd.c: 108: temp = 9;
  2051  35DB  55 8F  09         	mov	[(??_ShowHumiTemp+1)^0], 9
  2052                          ;			CUR_PP=0 IDX_PP=0 XIO=0 PG=2 
  2053  35DE                    l92:
  2054                          ;lcd.c: 109: }
  2055                          ;lcd.c: 110: DisplayBuf[8] = DigitSegSwap[temp];
  2056  35DE  51 8F             	mov	a, [(??_ShowHumiTemp+1)^0]
  2057  35E0  01 0A             	add	a, <_DigitSegSwap
  2058  35E2  5C                	mov	x, a
  2059  35E3  50 3F             	mov	a, >_DigitSegSwap
  2060  35E5  28                	romx
  2061  35E6  53 7A             	mov	[(_DisplayBuf+8)^0], a
  2062                          ;lcd.c: 111: }
  2063  35E8  7F                	ret
  2064                          ;			CUR_PP=0 IDX_PP=0 XIO=0 PG=2 
  2065  35E9                    l91:
  2066                          ;lcd.c: 112: else
  2067                          ;lcd.c: 113: {
  2068                          ;lcd.c: 114: index = temp/10;
  2069  35E9  55 93  00         	mov	[?___awdiv^0], 0
  2070  35EC  55 94  0A         	mov	[(?___awdiv^0+1)], 10
  2071  35EF  51 8F             	mov	a, [(??_ShowHumiTemp+1)^0]
  2072  35F1  53 92             	mov	[(??_ShowHumiTemp^0+4)], a
  2073  35F3  55 91  00         	mov	[(??_ShowHumiTemp^0+3)], 0
  2074  35F6  6A                	rlc	a
  2075  35F7  1E 91  00         	sbb	[(??_ShowHumiTemp^0+3)], 0
  2076  35FA  51 92             	mov	a, [(??_ShowHumiTemp^0+4)]
  2077  35FC  58 91             	mov	x, [(??_ShowHumiTemp^0+3)]
  2078  35FE  7C 3866           	call	___awdiv
  2079  3601  53 90             	mov	[(??_ShowHumiTemp+2)^0], a
  2080                          ;lcd.c: 115: if(index)
  2081  3603  51 90             	mov	a, [(??_ShowHumiTemp+2)^0]
  2082  3605  A00E              	jz	l94
  2083                          ;lcd.c: 116: {
  2084                          ;lcd.c: 117: DisplayBuf[9] = DigitSegSwap[index];
  2085  3607  51 90             	mov	a, [(??_ShowHumiTemp+2)^0]
  2086  3609  01 0A             	add	a, <_DigitSegSwap
  2087  360B  5C                	mov	x, a
  2088  360C  50 3F             	mov	a, >_DigitSegSwap
  2089  360E  28                	romx
  2090  360F  53 7B             	mov	[(_DisplayBuf+9)^0], a
  2091                          ;lcd.c: 118: }
  2092  3611  7D 3617           	jmp	l95
  2093                          ;			CUR_PP=0 XIO=0 
  2094  3614                    l94:
  2095                          ;lcd.c: 119: else
  2096                          ;lcd.c: 120: {
  2097                          ;lcd.c: 121: DisplayBuf[9] = 0;
  2098  3614  55 7B  00         	mov	[(_DisplayBuf+9)^0], 0
  2099                          ;			CUR_PP=0 XIO=0 
  2100  3617                    l95:
  2101                          ;lcd.c: 122: }
  2102                          ;lcd.c: 124: index = temp%10;
  2103  3617  55 93  00         	mov	[?___awmod^0], 0
  2104  361A  55 94  0A         	mov	[(?___awmod^0+1)], 10
  2105  361D  51 8F             	mov	a, [(??_ShowHumiTemp+1)^0]
  2106  361F  53 92             	mov	[(??_ShowHumiTemp^0+4)], a
  2107  3621  55 91  00         	mov	[(??_ShowHumiTemp^0+3)], 0
  2108  3624  6A                	rlc	a
  2109  3625  1E 91  00         	sbb	[(??_ShowHumiTemp^0+3)], 0
  2110  3628  51 92             	mov	a, [(??_ShowHumiTemp^0+4)]
  2111  362A  58 91             	mov	x, [(??_ShowHumiTemp^0+3)]
  2112  362C  71 80             	or	f, 0x80	;select multiple RAM page mode
  2113  362E  7C 39BD           	call	___awmod
  2114  3631  53 90             	mov	[(??_ShowHumiTemp+2)^0], a
  2115                          ;lcd.c: 125: DisplayBuf[8] = DigitSegSwap[index];
  2116  3633  51 90             	mov	a, [(??_ShowHumiTemp+2)^0]
  2117  3635  01 0A             	add	a, <_DigitSegSwap
  2118  3637  5C                	mov	x, a
  2119  3638  50 3F             	mov	a, >_DigitSegSwap
  2120  363A  28                	romx
  2121  363B  53 7A             	mov	[(_DisplayBuf+8)^0], a
  2122                          ;			CUR_PP=0 XIO=0 
  2123                          ;lcd.c: 126: }
  2124                          ;lcd.c: 129: }
  2125                          ;			CUR_PP=0 XIO=0 
  2126  363D  7F                	ret
  2127  363E                    __end_of_ShowHumiTemp:
  2128                          ; =============== function _ShowHumiTemp ends ============
  2129                          ; *************** function ___wmul *****************
  2130                          ; Defined at:
  2131                          ;		line 3 in file "C:\Program Files (x86)\HI-TECH Software\HCPSOC\PRO\9.61\sources\wmul.c"
  2132                          ; Parameters:
  2133                          ;		multiplier  	reg:   xa	type: unsigned int 
  2134                          ;		multiplicand	offs:   0	type: unsigned int 
  2135                          ; Auto variables:
  2136                          ;		multiplier  	       	type: unsigned int 
  2137                          ;		product     	       	type: unsigned int 
  2138                          ; Return value:
  2139                          ;		type: unsigned int 
  2140                          ;		size: 2
  2141                          ; Registers used:
  2142                          ;		a, x, CUR_PP
  2143                          ; Tracked objects:
  2144                          ;		On entry : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  2145                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  2146                          ;		Unchanged: IDX_PP MVR_PP MVW_PP 
  2147                          ; Data sizes:
  2148                          ;		Autos:    4
  2149                          ;		Params:   2
  2150                          ;		Temp:     0
  2151                          ;		Total:    6
  2152                          ; This function calls:
  2153                          ;		Nothing
  2154                          ; This function is called by:
  2155                          ;		_Si7020CalcTemp
  2156                          ; This function uses a non-reentrant model
  2157                          ; 
  2158  002C                    __size_of___wmul	equ	__end_of___wmul-___wmul
  2159                          ;wmul.c: 1: unsigned int
  2160                          ;wmul.c: 2: __wmul(unsigned int multiplier, unsigned int multiplicand)
  2161                          ;wmul.c: 3: {
  2162                          ;			CUR_PP=0 XIO=0 PG=2 
  2163  363E                    ___wmul:
  2164                          ;___wmul@multiplier stored from xa
  2165  363E  53 9B             	mov	[(??___wmul^0+1)], a
  2166  3640  5A 9A             	mov	[??___wmul^0], x
  2167                          ;wmul.c: 4: unsigned int product = 0;
  2168  3642  55 9C  00         	mov	[(??___wmul+2)^0], 0
  2169  3645  55 9D  00         	mov	[((??___wmul+2)^0+1)], 0
  2170                          ;wmul.c: 6: do {
  2171                          ;			CUR_PP=0 XIO=0 
  2172  3648                    l314:
  2173                          ;wmul.c: 7: if(multiplier & 1)
  2174  3648  47 9B  01         	tst	[(??___wmul+1)^0], 1
  2175  364B  A009              	jz	l315
  2176                          ;wmul.c: 8: product += multiplicand;
  2177  364D  51 99             	mov	a, [(?___wmul^0+1)]
  2178  364F  04 9D             	add	[((??___wmul+2)^0+1)], a
  2179  3651  51 98             	mov	a, [?___wmul^0]
  2180  3653  0C 9C             	adc	[(??___wmul+2)^0], a
  2181                          ;			CUR_PP=0 XIO=0 
  2182  3655                    l315:
  2183                          ;wmul.c: 9: multiplicand <<= 1;
  2184  3655  65 99             	asl	[(?___wmul^0+1)]
  2185  3657  6B 98             	rlc	[?___wmul^0]
  2186                          ;wmul.c: 10: multiplier >>= 1;
  2187  3659  70 FB             	and	f, 0xFB
  2188  365B  6E 9A             	rrc	[??___wmul^0]
  2189  365D  6E 9B             	rrc	[(??___wmul^0+1)]
  2190                          ;wmul.c: 11: } while(multiplier != 0);
  2191  365F  51 9A             	mov	a, [??___wmul^0]
  2192  3661  2A 9B             	or	a, [(??___wmul^0+1)]
  2193  3663  BFE4              	jnz	l314
  2194                          ;			CUR_PP=0 XIO=0 
  2195                          ;wmul.c: 12: return product;
  2196  3665  51 9D             	mov	a, [((??___wmul+2)^0+1)]
  2197  3667  58 9C             	mov	x, [(??___wmul+2)^0]
  2198                          ;wmul.c: 13: }
  2199                          ;			CUR_PP=0 XIO=0 
  2200  3669  7F                	ret
  2201  366A                    __end_of___wmul:
  2202                          ; =============== function ___wmul ends ============
  2203                          ; *************** function _DisplayPMxx *****************
  2204                          ; Defined at:
  2205                          ;		line 16 in file "./lcd.c"
  2206                          ; Parameters:
  2207                          ;		pm          	reg:   xa	type: unsigned int 
  2208                          ; Auto variables:
  2209                          ;		pm          	       	type: unsigned int 
  2210                          ;		temp        	       	type: unsigned int 
  2211                          ;		index       	       	type: unsigned int 
  2212                          ;		k           	       	type: unsigned char 
  2213                          ; Return value:
  2214                          ;		type: void 
  2215                          ;		size: 0
  2216                          ; Registers used:
  2217                          ;		a, x, CUR_PP
  2218                          ; Tracked objects:
  2219                          ;		On entry : CUR_PP=0 IDX_PP=0 XIO=0 PG? MVR_PP? MVW_PP? 
  2220                          ;		On exit  : CUR_PP=0 IDX_PP=0 XIO=0 PG? MVR_PP? MVW_PP? 
  2221                          ;		Unchanged: MVR_PP MVW_PP 
  2222                          ; Data sizes:
  2223                          ;		Autos:    7
  2224                          ;		Params:   0
  2225                          ;		Temp:     0
  2226                          ;		Total:    7
  2227                          ; This function calls:
  2228                          ;		___lwdiv
  2229                          ;		___lwmod
  2230                          ; This function is called by:
  2231                          ;		_LCDOuputAll
  2232                          ; This function uses a non-reentrant model
  2233                          ; 
  2234  00B7                    __size_of_DisplayPMxx	equ	__end_of_DisplayPMxx-_DisplayPMxx
  2235                          ;lcd.c: 15: void DisplayPMxx(unsigned int pm)
  2236                          ;lcd.c: 16: {
  2237                          ;			CUR_PP=0 IDX_PP=0 XIO=0 PG=2 
  2238  366A                    _DisplayPMxx:
  2239                          ;lcd.c: 17: char k = 0;
  2240  366A  55 94  00         	mov	[(??_DisplayPMxx+6)^0], 0
  2241                          ;lcd.c: 18: unsigned int index;
  2242                          ;lcd.c: 19: unsigned int temp;
  2243                          ;lcd.c: 23: temp = pm;
  2244  366D  53 91             	mov	[((??_DisplayPMxx+2)^0+1)], a
  2245  366F  5A 90             	mov	[(??_DisplayPMxx+2)^0], x
  2246                          ;lcd.c: 24: if(temp > 999)
  2247  3671  3C 90  03         	cmp	[(??_DisplayPMxx+2)^0], 3
  2248  3674  B004              	jnz	u293
  2249  3676  3C 91  E8         	cmp	[((??_DisplayPMxx+2)^0+1)], 232
  2250  3679                    u293:
  2251  3679  C007              	jc	l76
  2252                          ;lcd.c: 25: {
  2253                          ;lcd.c: 26: temp = 999;
  2254  367B  55 90  03         	mov	[(??_DisplayPMxx+2)^0], 3
  2255  367E  55 91  E7         	mov	[((??_DisplayPMxx+2)^0+1)], 231
  2256                          ;			CUR_PP=0 IDX_PP=0 XIO=0 PG=2 
  2257  3681                    l76:
  2258                          ;lcd.c: 27: }
  2259                          ;lcd.c: 29: index = temp/100;
  2260  3681  55 95  00         	mov	[?___lwdiv^0], 0
  2261  3684  55 96  64         	mov	[(?___lwdiv^0+1)], 100
  2262  3687  51 91             	mov	a, [((??_DisplayPMxx+2)^0+1)]
  2263  3689  58 90             	mov	x, [(??_DisplayPMxx+2)^0]
  2264  368B  7C 3A6C           	call	___lwdiv
  2265  368E  5A 92             	mov	[(??_DisplayPMxx+4)^0], x
  2266  3690  53 93             	mov	[(??_DisplayPMxx+5)^0], a
  2267                          ;lcd.c: 30: DisplayNum[0] = index;
  2268  3692  5F 46  93         	mov	[_DisplayNum^0], [(??_DisplayPMxx+5)^0]
  2269                          ;lcd.c: 32: temp = temp%100;
  2270  3695  55 95  00         	mov	[?___lwmod^0], 0
  2271  3698  55 96  64         	mov	[(?___lwmod^0+1)], 100
  2272  369B  51 91             	mov	a, [((??_DisplayPMxx+2)^0+1)]
  2273  369D  58 90             	mov	x, [(??_DisplayPMxx+2)^0]
  2274  369F  71 80             	or	f, 0x80	;select multiple RAM page mode
  2275  36A1  7C 3A30           	call	___lwmod
  2276  36A4  5A 90             	mov	[(??_DisplayPMxx+2)^0], x
  2277  36A6  53 91             	mov	[(??_DisplayPMxx+3)^0], a
  2278                          ;lcd.c: 33: index = temp/10;
  2279  36A8  55 95  00         	mov	[?___lwdiv^0], 0
  2280  36AB  55 96  0A         	mov	[(?___lwdiv^0+1)], 10
  2281  36AE  51 91             	mov	a, [((??_DisplayPMxx+2)^0+1)]
  2282  36B0  58 90             	mov	x, [(??_DisplayPMxx+2)^0]
  2283  36B2  71 80             	or	f, 0x80	;select multiple RAM page mode
  2284  36B4  7C 3A6C           	call	___lwdiv
  2285  36B7  5A 92             	mov	[(??_DisplayPMxx+4)^0], x
  2286  36B9  53 93             	mov	[(??_DisplayPMxx+5)^0], a
  2287                          ;lcd.c: 34: DisplayNum[1] = index;
  2288  36BB  5F 47  93         	mov	[(_DisplayNum+1)^0], [(??_DisplayPMxx+5)^0]
  2289                          ;lcd.c: 36: index = temp%10;
  2290  36BE  55 95  00         	mov	[?___lwmod^0], 0
  2291  36C1  55 96  0A         	mov	[(?___lwmod^0+1)], 10
  2292  36C4  51 91             	mov	a, [((??_DisplayPMxx+2)^0+1)]
  2293  36C6  58 90             	mov	x, [(??_DisplayPMxx+2)^0]
  2294  36C8  71 80             	or	f, 0x80	;select multiple RAM page mode
  2295  36CA  7C 3A30           	call	___lwmod
  2296  36CD  5A 92             	mov	[(??_DisplayPMxx+4)^0], x
  2297  36CF  53 93             	mov	[(??_DisplayPMxx+5)^0], a
  2298                          ;lcd.c: 37: DisplayNum[2] = index;
  2299  36D1  5F 48  93         	mov	[(_DisplayNum+2)^0], [(??_DisplayPMxx+5)^0]
  2300                          ;lcd.c: 39: k = 0;
  2301  36D4  57 00             	mov	x, 0
  2302                          ;lcd.c: 40: while (k<2)
  2303  36D6  7D 36FC           	jmp	l77
  2304                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
  2305  36D9                    l78:
  2306                          ;DisplayPMxx@k stored from x
  2307  36D9  5A 94             	mov	[(??_DisplayPMxx+6)^0], x
  2308                          ;lcd.c: 41: {
  2309                          ;lcd.c: 42: if (DisplayNum[k])
  2310  36DB  52 46             	mov	a, [x+_DisplayNum]
  2311  36DD  A018              	jz	l80
  2312                          ;lcd.c: 43: {
  2313                          ;lcd.c: 44: DisplayBuf[k] = DigitSeg[DisplayNum[k]];
  2314  36DF  51 94             	mov	a, [(??_DisplayPMxx+6)^0]
  2315  36E1  01 46             	add	a, <(<_DisplayNum)
  2316  36E3  5C                	mov	x, a
  2317  36E4  52 00             	mov	a, [x+0]
  2318  36E6  01 00             	add	a, <_DigitSeg
  2319  36E8  5C                	mov	x, a
  2320  36E9  50 3F             	mov	a, >_DigitSeg
  2321  36EB  28                	romx
  2322  36EC  58 94             	mov	x, [(??_DisplayPMxx+6)^0]
  2323  36EE  54 72             	mov	[x+_DisplayBuf], a
  2324                          ; DisplayPMxx@k loaded to x
  2325  36F0  58 94             	mov	x, [(??_DisplayPMxx+6)^0]
  2326                          ;lcd.c: 45: k++;
  2327  36F2  75                	inc	x
  2328                          ;lcd.c: 46: break;
  2329  36F3  7D 3701           	jmp	l79
  2330                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
  2331  36F6                    l80:
  2332                          ; DisplayPMxx@k loaded to x
  2333  36F6  58 94             	mov	x, [(??_DisplayPMxx+6)^0]
  2334                          ;lcd.c: 48: else
  2335                          ;lcd.c: 49: {
  2336                          ;lcd.c: 50: DisplayBuf[k] = 0;
  2337  36F8  56 72  00         	mov	[x+_DisplayBuf], 0
  2338                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
  2339                          ;lcd.c: 51: }
  2340                          ;lcd.c: 52: k++;
  2341  36FB  75                	inc	x
  2342                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
  2343  36FC                    l77:
  2344  36FC  5B                	mov	a, x
  2345  36FD  39 02             	cmp	a, 2
  2346  36FF  CFD9              	jc	l78
  2347                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
  2348  3701                    l79:
  2349                          ;DisplayPMxx@k stored from x
  2350  3701  5A 94             	mov	[(??_DisplayPMxx+6)^0], x
  2351                          ;lcd.c: 53: }
  2352                          ;lcd.c: 55: for (;k<3;k++)
  2353  3703  5B                	mov	a, x
  2354  3704  39 03             	cmp	a, 3
  2355  3706  D019              	jnc	l83
  2356                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
  2357  3708                    l82:
  2358                          ;lcd.c: 56: {
  2359                          ;lcd.c: 57: DisplayBuf[k] = DigitSeg[DisplayNum[k]];
  2360  3708  51 94             	mov	a, [(??_DisplayPMxx+6)^0]
  2361  370A  01 46             	add	a, <(<_DisplayNum)
  2362  370C  5C                	mov	x, a
  2363  370D  52 00             	mov	a, [x+0]
  2364  370F  01 00             	add	a, <_DigitSeg
  2365  3711  5C                	mov	x, a
  2366  3712  50 3F             	mov	a, >_DigitSeg
  2367  3714  28                	romx
  2368  3715  58 94             	mov	x, [(??_DisplayPMxx+6)^0]
  2369  3717  54 72             	mov	[x+_DisplayBuf], a
  2370  3719  76 94             	inc	[(??_DisplayPMxx+6)^0]
  2371  371B  3C 94  03         	cmp	[(??_DisplayPMxx+6)^0], 3
  2372  371E  CFE9              	jc	l82
  2373                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
  2374  3720                    l83:
  2375                          ;lcd.c: 58: }
  2376                          ;lcd.c: 61: }
  2377                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
  2378  3720  7F                	ret
  2379  3721                    __end_of_DisplayPMxx:
  2380                          ; =============== function _DisplayPMxx ends ============
  2381                          ; *************** function _WriteAll_1621 *****************
  2382                          ; Defined at:
  2383                          ;		line 85 in file "./ht1621b.c"
  2384                          ; Parameters:
  2385                          ;		addr        	reg:    a	type: unsigned char 
  2386                          ;		p           	reg:    x	type: PTR unsigned char ; Largest target is 12
  2387                          ;		 -> DisplayBuf(12), 
  2388                          ;		cnt         	offs:   0	type: unsigned char 
  2389                          ; Auto variables:
  2390                          ;		p           	       	type: PTR unsigned char ; Largest target is 12
  2391                          ;		 -> DisplayBuf(12), 
  2392                          ;		addr        	       	type: unsigned char 
  2393                          ;		i           	       	type: unsigned char 
  2394                          ; Return value:
  2395                          ;		type: void 
  2396                          ;		size: 0
  2397                          ; Registers used:
  2398                          ;		a, x, CUR_PP
  2399                          ; Tracked objects:
  2400                          ;		On entry : CUR_PP=0 IDX_PP=0 XIO=0 PG? MVR_PP? MVW_PP? 
  2401                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  2402                          ;		Unchanged: MVR_PP MVW_PP 
  2403                          ; Data sizes:
  2404                          ;		Autos:    3
  2405                          ;		Params:   1
  2406                          ;		Temp:     0
  2407                          ;		Total:    4
  2408                          ; This function calls:
  2409                          ;		_SendBit_1621
  2410                          ;		_SendDataBit_1621
  2411                          ;		_delay_us
  2412                          ; This function is called by:
  2413                          ;		_LCDOuputAll
  2414                          ; This function uses a non-reentrant model
  2415                          ; 
  2416  0043                    __size_of_WriteAll_1621	equ	__end_of_WriteAll_1621-_WriteAll_1621
  2417                          ;ht1621b.c: 84: void WriteAll_1621(unsigned char addr,unsigned char *p,unsigned char cnt)
  2418                          ;ht1621b.c: 85: {
  2419                          ;			CUR_PP=0 IDX_PP=0 XIO=0 PG=2 
  2420  3721                    _WriteAll_1621:
  2421                          ;WriteAll_1621@addr stored from a
  2422  3721  53 90             	mov	[(??_WriteAll_1621+1)^0], a
  2423                          ;WriteAll_1621@p stored from x
  2424  3723  5A 8F             	mov	[??_WriteAll_1621^0], x
  2425                          ;ht1621b.c: 86: unsigned char i;
  2426                          ;ht1621b.c: 87: (PRT0DR &= ~0x80);
  2427  3725  41 00 7F          	and	reg[0], 0x7F
  2428                          ;ht1621b.c: 88: SendBit_1621(0xa0,3);
  2429  3728  50 A0             	mov	a, 160
  2430  372A  57 03             	mov	x, 3
  2431  372C  7C 38FD           	call	_SendBit_1621
  2432                          ;ht1621b.c: 89: SendBit_1621(addr<<2,6);
  2433  372F  51 90             	mov	a, [(??_WriteAll_1621+1)^0]
  2434  3731  64                	asl	a
  2435  3732  64                	asl	a
  2436  3733  57 06             	mov	x, 6
  2437  3735  71 80             	or	f, 0x80	;select multiple RAM page mode
  2438  3737  7C 38FD           	call	_SendBit_1621
  2439                          ;ht1621b.c: 90: for(i =0; i <cnt; i ++,p++)
  2440  373A  50 00             	mov	a, 0
  2441  373C  7D 3752           	jmp	l54
  2442                          ;			CUR_PP=0 XIO=0 
  2443  373F                    l51:
  2444                          ;ht1621b.c: 91: {
  2445                          ;ht1621b.c: 92: SendDataBit_1621(*p,8);
  2446  373F  58 8F             	mov	x, [??_WriteAll_1621^0]
  2447  3741  62 D3 00          	mov	reg[211], 0
  2448  3744  52 00             	mov	a, [x+0]
  2449  3746  57 08             	mov	x, 8
  2450  3748  71 80             	or	f, 0x80	;select multiple RAM page mode
  2451  374A  7C 3938           	call	_SendDataBit_1621
  2452                          ; WriteAll_1621@i loaded to a
  2453  374D  51 91             	mov	a, [(??_WriteAll_1621+2)^0]
  2454  374F  74                	inc	a
  2455  3750  76 8F             	inc	[??_WriteAll_1621^0]
  2456                          ;			CUR_PP=0 XIO=0 
  2457  3752                    l54:
  2458                          ;WriteAll_1621@i stored from a
  2459  3752  53 91             	mov	[(??_WriteAll_1621+2)^0], a
  2460  3754  3A 8E             	cmp	a, [?_WriteAll_1621^0]
  2461  3756  CFE8              	jc	l51
  2462                          ;			CUR_PP=0 XIO=0 
  2463                          ;ht1621b.c: 93: }
  2464                          ;ht1621b.c: 94: (PRT0DR |= 0x80);
  2465  3758  43 00 80          	or	reg[0], 0x80
  2466                          ;ht1621b.c: 95: delay_us(4);
  2467  375B  50 04             	mov	a, 4
  2468  375D  57 00             	mov	x, 0
  2469  375F  71 80             	or	f, 0x80	;select multiple RAM page mode
  2470  3761  7D 3BC3           	jmp	_delay_us
  2471                          ;ht1621b.c: 96: }
  2472                          ;			CUR_PP=0 XIO=0 
  2473  3764                    __end_of_WriteAll_1621:
  2474                          ; =============== function _WriteAll_1621 ends ============
  2475                          ; *************** function _Si7020SendCommand *****************
  2476                          ; Defined at:
  2477                          ;		line 15 in file "./si7020.c"
  2478                          ; Parameters:
  2479                          ;		cmd         	reg:    a	type: unsigned char 
  2480                          ; Auto variables:
  2481                          ;		cmd         	       	type: unsigned char 
  2482                          ; Return value:
  2483                          ;		type: unsigned char 
  2484                          ;		size: 1
  2485                          ; Registers used:
  2486                          ;		a, x, CUR_PP
  2487                          ; Tracked objects:
  2488                          ;		On entry : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  2489                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  2490                          ;		Unchanged: IDX_PP MVR_PP MVW_PP 
  2491                          ; Data sizes:
  2492                          ;		Autos:    1
  2493                          ;		Params:   0
  2494                          ;		Temp:     0
  2495                          ;		Total:    1
  2496                          ; This function calls:
  2497                          ;		_ISendByte
  2498                          ; This function is called by:
  2499                          ;		_main
  2500                          ;		_Si7020Read_Temp_after_RHM
  2501                          ; This function uses a non-reentrant model
  2502                          ; 
  2503  0009                    __size_of_Si7020SendCommand	equ	__end_of_Si7020SendCommand-_Si7020SendCommand
  2504                          ;si7020.c: 14: unsigned char Si7020SendCommand(char cmd)
  2505                          ;si7020.c: 15: {
  2506                          ;			CUR_PP=0 XIO=0 PG=2 
  2507  3764                    _Si7020SendCommand:
  2508                          ;Si7020SendCommand@cmd stored from a
  2509  3764  53 8F             	mov	[??_Si7020SendCommand^0], a
  2510                          ;si7020.c: 16: return(ISendByte(0x80,cmd));
  2511  3766  50 80             	mov	a, 128
  2512  3768  58 8F             	mov	x, [??_Si7020SendCommand^0]
  2513  376A  7D 3831           	jmp	_ISendByte
  2514                          ;si7020.c: 17: }
  2515                          ;			CUR_PP=0 XIO=0 
  2516  376D                    __end_of_Si7020SendCommand:
  2517                          ; =============== function _Si7020SendCommand ends ============
  2518                          ; *************** function _IRcvBytes *****************
  2519                          ; Defined at:
  2520                          ;		line 327 in file "./software_iic.c"
  2521                          ; Parameters:
  2522                          ;		sla         	reg:    a	type: unsigned char 
  2523                          ;		s           	reg:    x	type: PTR unsigned char ; Largest target is 6
  2524                          ;		 -> HumiChipData(6), RecBuf(5), 
  2525                          ;		no          	offs:   0	type: unsigned char 
  2526                          ; Auto variables:
  2527                          ;		s           	       	type: PTR unsigned char ; Largest target is 6
  2528                          ;		 -> HumiChipData(6), RecBuf(5), 
  2529                          ;		sla         	       	type: unsigned char 
  2530                          ;		i           	       	type: unsigned char 
  2531                          ; Return value:
  2532                          ;		type: unsigned char 
  2533                          ;		size: 1
  2534                          ; Registers used:
  2535                          ;		a, x, CUR_PP
  2536                          ; Tracked objects:
  2537                          ;		On entry : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  2538                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  2539                          ;		Unchanged: MVR_PP MVW_PP 
  2540                          ; Data sizes:
  2541                          ;		Autos:    3
  2542                          ;		Params:   1
  2543                          ;		Temp:     2
  2544                          ;		Total:    6
  2545                          ; This function calls:
  2546                          ;		_Start_I2c
  2547                          ;		_SendByte
  2548                          ;		_Stop_I2c
  2549                          ;		_RcvByte
  2550                          ;		_Ack_I2c
  2551                          ; This function is called by:
  2552                          ;		_Si7020Read_RH_NHM
  2553                          ;		_Si7020Read_Temp_after_RHM
  2554                          ; This function uses a non-reentrant model
  2555                          ; 
  2556  0070                    __size_of_IRcvBytes	equ	__end_of_IRcvBytes-_IRcvBytes
  2557                          ;software_iic.c: 326: unsigned char IRcvBytes(unsigned char sla,unsigned char *s,unsigned char no)
  2558                          ;software_iic.c: 327: {
  2559                          ;			CUR_PP=0 XIO=0 PG=2 
  2560  376D                    _IRcvBytes:
  2561                          ;IRcvBytes@sla stored from a
  2562  376D  53 91             	mov	[(??_IRcvBytes+1)^0], a
  2563                          ;IRcvBytes@s stored from x
  2564  376F  5A 90             	mov	[??_IRcvBytes^0], x
  2565                          ;software_iic.c: 328: unsigned char i;
  2566                          ;software_iic.c: 330: Start_I2c();
  2567  3771  7C 3B5C           	call	_Start_I2c
  2568                          ;software_iic.c: 331: SendByte(sla+1);
  2569  3774  50 01             	mov	a, 1
  2570  3776  02 91             	add	a, [(??_IRcvBytes+1)^0]
  2571  3778  71 80             	or	f, 0x80	;select multiple RAM page mode
  2572  377A  7C 3AE2           	call	_SendByte
  2573                          ;software_iic.c: 332: if(ack==0)
  2574  377D  51 6F             	mov	a, [_ack^0]
  2575  377F  B009              	jnz	l295
  2576                          ;software_iic.c: 333: {
  2577                          ;software_iic.c: 334: Stop_I2c();
  2578  3781  71 80             	or	f, 0x80	;select multiple RAM page mode
  2579  3783  7C 3B81           	call	_Stop_I2c
  2580                          ;software_iic.c: 335: return(0);
  2581  3786  50 00             	mov	a, 0
  2582  3788  7F                	ret
  2583                          ;			CUR_PP=0 XIO=0 
  2584  3789                    l295:
  2585                          ;software_iic.c: 336: }
  2586                          ;software_iic.c: 337: for(i=0;i<no-1;i++)
  2587  3789  55 92  00         	mov	[(??_IRcvBytes+2)^0], 0
  2588  378C  7D 37A6           	jmp	l299
  2589                          ;			CUR_PP=0 XIO=0 
  2590  378F                    l296:
  2591                          ;software_iic.c: 338: {
  2592                          ;software_iic.c: 339: *s=RcvByte();
  2593  378F  71 80             	or	f, 0x80	;select multiple RAM page mode
  2594  3791  7C 3975           	call	_RcvByte
  2595  3794  58 90             	mov	x, [??_IRcvBytes^0]
  2596  3796  62 D3 00          	mov	reg[211], 0
  2597  3799  54 00             	mov	[x+0], a
  2598                          ;software_iic.c: 340: Ack_I2c(0);
  2599  379B  50 00             	mov	a, 0
  2600  379D  71 80             	or	f, 0x80	;select multiple RAM page mode
  2601  379F  7C 3AB6           	call	_Ack_I2c
  2602                          ;software_iic.c: 341: s++;
  2603  37A2  76 90             	inc	[??_IRcvBytes^0]
  2604  37A4  76 92             	inc	[(??_IRcvBytes+2)^0]
  2605                          ;			CUR_PP=0 XIO=0 
  2606  37A6                    l299:
  2607  37A6  5F 94  8F         	mov	[(??_IRcvBytes^0+4)], [?_IRcvBytes^0]
  2608  37A9  55 93  00         	mov	[(??_IRcvBytes^0+3)], 0
  2609  37AC  06 94  FF         	add	[(??_IRcvBytes^0+4)], 255
  2610  37AF  0E 93  FF         	adc	[(??_IRcvBytes^0+3)], 255
  2611  37B2  51 93             	mov	a, [(??_IRcvBytes^0+3)]
  2612  37B4  31 80             	xor	a, 0x80
  2613  37B6  39 80             	cmp	a, 128
  2614  37B8  72 04             	xor	f, 4
  2615  37BA  B005              	jnz	u463
  2616  37BC  51 92             	mov	a, [(??_IRcvBytes+2)^0]
  2617  37BE  3A 94             	cmp	a, [(??_IRcvBytes^0+4)]
  2618  37C0                    u463:
  2619  37C0  CFCE              	jc	l296
  2620                          ;			CUR_PP=0 XIO=0 
  2621                          ;software_iic.c: 342: }
  2622                          ;software_iic.c: 343: *s=RcvByte();
  2623  37C2  71 80             	or	f, 0x80	;select multiple RAM page mode
  2624  37C4  7C 3975           	call	_RcvByte
  2625  37C7  58 90             	mov	x, [??_IRcvBytes^0]
  2626  37C9  62 D3 00          	mov	reg[211], 0
  2627  37CC  54 00             	mov	[x+0], a
  2628                          ;software_iic.c: 344: Ack_I2c(1);
  2629  37CE  50 01             	mov	a, 1
  2630  37D0  71 80             	or	f, 0x80	;select multiple RAM page mode
  2631  37D2  7C 3AB6           	call	_Ack_I2c
  2632                          ;software_iic.c: 345: Stop_I2c();
  2633  37D5  71 80             	or	f, 0x80	;select multiple RAM page mode
  2634  37D7  7C 3B81           	call	_Stop_I2c
  2635                          ;software_iic.c: 346: return(1);
  2636  37DA  50 01             	mov	a, 1
  2637                          ;software_iic.c: 347: }
  2638                          ;			CUR_PP=0 XIO=0 
  2639  37DC  7F                	ret
  2640  37DD                    __end_of_IRcvBytes:
  2641                          ; =============== function _IRcvBytes ends ============
  2642                          ; *************** function ___lbmod *****************
  2643                          ; Defined at:
  2644                          ;		line 5 in file "C:\Program Files (x86)\HI-TECH Software\HCPSOC\PRO\9.61\sources\lbmod.c"
  2645                          ; Parameters:
  2646                          ;		dividend    	reg:    a	type: unsigned char 
  2647                          ;		divisor     	reg:    x	type: unsigned char 
  2648                          ; Auto variables:
  2649                          ;		divisor     	       	type: unsigned char 
  2650                          ;		dividend    	       	type: unsigned char 
  2651                          ;		rem         	       	type: unsigned char 
  2652                          ;		counter     	       	type: unsigned char 
  2653                          ; Return value:
  2654                          ;		type: unsigned char 
  2655                          ;		size: 1
  2656                          ; Registers used:
  2657                          ;		a, x, CUR_PP
  2658                          ; Tracked objects:
  2659                          ;		On entry : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  2660                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  2661                          ;		Unchanged: MVR_PP MVW_PP 
  2662                          ; Data sizes:
  2663                          ;		Autos:    4
  2664                          ;		Params:   0
  2665                          ;		Temp:     0
  2666                          ;		Total:    4
  2667                          ; This function calls:
  2668                          ;		Nothing
  2669                          ; This function is called by:
  2670                          ;		_ShowLife
  2671                          ; This function uses a non-reentrant model
  2672                          ; 
  2673  0024                    __size_of___lbmod	equ	__end_of___lbmod-___lbmod
  2674                          ;lbmod.c: 3: unsigned char
  2675                          ;lbmod.c: 4: __lbmod(unsigned char dividend, unsigned char divisor)
  2676                          ;lbmod.c: 5: {
  2677                          ;			CUR_PP=0 IDX_PP=0 XIO=0 PG=2 
  2678  37DD                    ___lbmod:
  2679                          ;___lbmod@dividend stored from a
  2680  37DD  53 92             	mov	[(??___lbmod+1)^0], a
  2681                          ;___lbmod@divisor stored from x
  2682  37DF  5A 91             	mov	[??___lbmod^0], x
  2683                          ;lbmod.c: 6: unsigned char rem;
  2684                          ;lbmod.c: 7: unsigned char counter;
  2685                          ;lbmod.c: 9: counter = 8;
  2686  37E1  55 94  08         	mov	[(??___lbmod+3)^0], 8
  2687                          ;lbmod.c: 10: rem = 0;
  2688  37E4  55 93  00         	mov	[(??___lbmod+2)^0], 0
  2689                          ;lbmod.c: 11: do {
  2690                          ;			CUR_PP=0 XIO=0 
  2691  37E7                    l346:
  2692                          ;lbmod.c: 12: rem = (rem << 1) | (dividend >> 7);
  2693  37E7  51 92             	mov	a, [(??___lbmod+1)^0]
  2694  37E9  6A                	rlc	a
  2695  37EA  6B 93             	rlc	[(??___lbmod+2)^0]
  2696                          ;lbmod.c: 13: dividend <<= 1;
  2697  37EC  65 92             	asl	[(??___lbmod+1)^0]
  2698                          ; ___lbmod@divisor loaded to a
  2699  37EE  51 91             	mov	a, [??___lbmod^0]
  2700                          ;lbmod.c: 14: if(divisor <= rem)
  2701  37F0  3A 93             	cmp	a, [(??___lbmod+2)^0]
  2702  37F2  A003              	jz	u513
  2703  37F4  72 04             	xor	f, 4
  2704  37F6                    u513:
  2705  37F6  C003              	jc	l347
  2706                          ;lbmod.c: 15: rem -= divisor;
  2707  37F8  14 93             	sub	[(??___lbmod+2)^0], a
  2708                          ;			CUR_PP=0 XIO=0 
  2709  37FA                    l347:
  2710                          ;lbmod.c: 16: } while(--counter != 0);
  2711  37FA  7A 94             	dec	[(??___lbmod+3)^0]
  2712  37FC  BFEA              	jnz	l346
  2713                          ;			CUR_PP=0 XIO=0 
  2714                          ;lbmod.c: 17: return rem;
  2715  37FE  51 93             	mov	a, [(??___lbmod+2)^0]
  2716                          ;lbmod.c: 18: }
  2717                          ;			CUR_PP=0 XIO=0 
  2718  3800  7F                	ret
  2719  3801                    __end_of___lbmod:
  2720                          ; =============== function ___lbmod ends ============
  2721                          ; *************** function ___lbdiv *****************
  2722                          ; Defined at:
  2723                          ;		line 5 in file "C:\Program Files (x86)\HI-TECH Software\HCPSOC\PRO\9.61\sources\lbdiv.c"
  2724                          ; Parameters:
  2725                          ;		dividend    	reg:    a	type: unsigned char 
  2726                          ;		divisor     	reg:    x	type: unsigned char 
  2727                          ; Auto variables:
  2728                          ;		divisor     	       	type: unsigned char 
  2729                          ;		dividend    	       	type: unsigned char 
  2730                          ;		quotient    	       	type: unsigned char 
  2731                          ;		counter     	       	type: unsigned char 
  2732                          ; Return value:
  2733                          ;		type: unsigned char 
  2734                          ;		size: 1
  2735                          ; Registers used:
  2736                          ;		a, x, CUR_PP
  2737                          ; Tracked objects:
  2738                          ;		On entry : CUR_PP=0 IDX_PP? XIO=0 PG=2 MVR_PP? MVW_PP? 
  2739                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  2740                          ;		Unchanged: MVR_PP MVW_PP 
  2741                          ; Data sizes:
  2742                          ;		Autos:    4
  2743                          ;		Params:   0
  2744                          ;		Temp:     0
  2745                          ;		Total:    4
  2746                          ; This function calls:
  2747                          ;		Nothing
  2748                          ; This function is called by:
  2749                          ;		_ShowLife
  2750                          ; This function uses a non-reentrant model
  2751                          ; 
  2752  0030                    __size_of___lbdiv	equ	__end_of___lbdiv-___lbdiv
  2753                          ;lbdiv.c: 3: unsigned char
  2754                          ;lbdiv.c: 4: __lbdiv(unsigned char dividend, unsigned char divisor)
  2755                          ;lbdiv.c: 5: {
  2756                          ;			CUR_PP=0 IDX_PP=0 XIO=0 PG=2 
  2757  3801                    ___lbdiv:
  2758                          ;___lbdiv@dividend stored from a
  2759  3801  53 92             	mov	[(??___lbdiv+1)^0], a
  2760                          ; ___lbdiv@divisor loaded to a
  2761  3803  5B                	mov	a, x
  2762                          ;lbdiv.c: 6: unsigned char quotient;
  2763                          ;lbdiv.c: 7: unsigned char counter;
  2764                          ;lbdiv.c: 9: quotient = 0;
  2765  3804  55 93  00         	mov	[(??___lbdiv+2)^0], 0
  2766                          ;lbdiv.c: 10: if(divisor != 0) {
  2767  3807  39 00             	cmp	a, 0
  2768  3809  A024              	jz	l335
  2769                          ;lbdiv.c: 11: counter = 1;
  2770  380B  55 94  01         	mov	[(??___lbdiv+3)^0], 1
  2771                          ;lbdiv.c: 12: while((divisor & 0x80) == 0) {
  2772  380E  7D 3814           	jmp	l336
  2773                          ;			CUR_PP=0 XIO=0 
  2774  3811                    l337:
  2775                          ;lbdiv.c: 13: divisor <<= 1;
  2776  3811  64                	asl	a
  2777                          ;lbdiv.c: 14: counter++;
  2778  3812  76 94             	inc	[(??___lbdiv+3)^0]
  2779                          ;			CUR_PP=0 XIO=0 
  2780  3814                    l336:
  2781  3814  39 80             	cmp	a, 128
  2782  3816  CFFA              	jc	l337
  2783                          ;			CUR_PP=0 XIO=0 
  2784                          ;lbdiv.c: 15: }
  2785                          ;lbdiv.c: 16: do {
  2786                          ;			CUR_PP=0 XIO=0 
  2787  3818                    l341:
  2788                          ;lbdiv.c: 17: quotient <<= 1;
  2789  3818  65 93             	asl	[(??___lbdiv+2)^0]
  2790                          ;lbdiv.c: 18: if(divisor <= dividend) {
  2791  381A  3A 92             	cmp	a, [(??___lbdiv+1)^0]
  2792  381C  A003              	jz	u523
  2793  381E  72 04             	xor	f, 4
  2794  3820                    u523:
  2795  3820  C006              	jc	l342
  2796                          ;lbdiv.c: 19: dividend -= divisor;
  2797  3822  14 92             	sub	[(??___lbdiv+1)^0], a
  2798                          ;lbdiv.c: 20: quotient |= 1;
  2799  3824  2E 93  01         	or	[(??___lbdiv+2)^0], 1
  2800                          ;			CUR_PP=0 XIO=0 
  2801  3827                    l342:
  2802                          ;lbdiv.c: 21: }
  2803                          ;lbdiv.c: 22: divisor >>= 1;
  2804  3827  70 FB             	and	f, 0xFB
  2805  3829  6D                	rrc	a
  2806                          ;lbdiv.c: 23: } while(--counter != 0);
  2807  382A  7A 94             	dec	[(??___lbdiv+3)^0]
  2808  382C  BFEB              	jnz	l341
  2809                          ;			CUR_PP=0 XIO=0 
  2810                          ;			CUR_PP=0 XIO=0 
  2811  382E                    l335:
  2812                          ;lbdiv.c: 24: }
  2813                          ;lbdiv.c: 25: return quotient;
  2814  382E  51 93             	mov	a, [(??___lbdiv+2)^0]
  2815                          ;lbdiv.c: 26: }
  2816                          ;			CUR_PP=0 XIO=0 
  2817  3830  7F                	ret
  2818  3831                    __end_of___lbdiv:
  2819                          ; =============== function ___lbdiv ends ============
  2820                          ; *************** function _ISendByte *****************
  2821                          ; Defined at:
  2822                          ;		line 172 in file "./software_iic.c"
  2823                          ; Parameters:
  2824                          ;		sla         	reg:    a	type: unsigned char 
  2825                          ;		c           	reg:    x	type: unsigned char 
  2826                          ; Auto variables:
  2827                          ;		c           	       	type: unsigned char 
  2828                          ;		sla         	       	type: unsigned char 
  2829                          ; Return value:
  2830                          ;		type: unsigned char 
  2831                          ;		size: 1
  2832                          ; Registers used:
  2833                          ;		a, x, CUR_PP
  2834                          ; Tracked objects:
  2835                          ;		On entry : CUR_PP=0 IDX_PP? XIO=0 PG=2 MVR_PP? MVW_PP? 
  2836                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  2837                          ;		Unchanged: IDX_PP MVR_PP MVW_PP 
  2838                          ; Data sizes:
  2839                          ;		Autos:    2
  2840                          ;		Params:   0
  2841                          ;		Temp:     0
  2842                          ;		Total:    2
  2843                          ; This function calls:
  2844                          ;		_Start_I2c
  2845                          ;		_SendByte
  2846                          ;		_Stop_I2c
  2847                          ; This function is called by:
  2848                          ;		_Si7020SendCommand
  2849                          ; This function uses a non-reentrant model
  2850                          ; 
  2851  0035                    __size_of_ISendByte	equ	__end_of_ISendByte-_ISendByte
  2852                          ;software_iic.c: 171: unsigned char ISendByte(unsigned char sla,unsigned char c)
  2853                          ;software_iic.c: 172: {
  2854                          ;			CUR_PP=0 XIO=0 PG=2 
  2855  3831                    _ISendByte:
  2856                          ;ISendByte@sla stored from a
  2857  3831  53 91             	mov	[(??_ISendByte+1)^0], a
  2858                          ;ISendByte@c stored from x
  2859  3833  5A 90             	mov	[??_ISendByte^0], x
  2860                          ;software_iic.c: 173: Start_I2c();
  2861  3835  7C 3B5C           	call	_Start_I2c
  2862                          ;software_iic.c: 174: SendByte(sla);
  2863  3838  51 91             	mov	a, [(??_ISendByte+1)^0]
  2864  383A  71 80             	or	f, 0x80	;select multiple RAM page mode
  2865  383C  7C 3AE2           	call	_SendByte
  2866                          ;software_iic.c: 175: if(ack==0)
  2867  383F  51 6F             	mov	a, [_ack^0]
  2868  3841  B009              	jnz	l267
  2869                          ;software_iic.c: 176: {
  2870                          ;software_iic.c: 177: Stop_I2c();
  2871  3843  71 80             	or	f, 0x80	;select multiple RAM page mode
  2872  3845  7C 3B81           	call	_Stop_I2c
  2873                          ;software_iic.c: 178: return(0);
  2874  3848  50 00             	mov	a, 0
  2875  384A  7F                	ret
  2876                          ;			CUR_PP=0 XIO=0 
  2877  384B                    l267:
  2878                          ;software_iic.c: 179: }
  2879                          ;software_iic.c: 180: SendByte(c);
  2880  384B  51 90             	mov	a, [??_ISendByte^0]
  2881  384D  71 80             	or	f, 0x80	;select multiple RAM page mode
  2882  384F  7C 3AE2           	call	_SendByte
  2883                          ;software_iic.c: 181: if(ack==0)
  2884  3852  51 6F             	mov	a, [_ack^0]
  2885  3854  B009              	jnz	l268
  2886                          ;software_iic.c: 182: {
  2887                          ;software_iic.c: 183: Stop_I2c();
  2888  3856  71 80             	or	f, 0x80	;select multiple RAM page mode
  2889  3858  7C 3B81           	call	_Stop_I2c
  2890                          ;software_iic.c: 184: return(0);
  2891  385B  50 00             	mov	a, 0
  2892  385D  7F                	ret
  2893                          ;			CUR_PP=0 XIO=0 
  2894  385E                    l268:
  2895                          ;software_iic.c: 185: }
  2896                          ;software_iic.c: 186: Stop_I2c();
  2897  385E  71 80             	or	f, 0x80	;select multiple RAM page mode
  2898  3860  7C 3B81           	call	_Stop_I2c
  2899                          ;software_iic.c: 187: return(1);
  2900  3863  50 01             	mov	a, 1
  2901                          ;software_iic.c: 188: }
  2902                          ;			CUR_PP=0 XIO=0 
  2903  3865  7F                	ret
  2904  3866                    __end_of_ISendByte:
  2905                          ; =============== function _ISendByte ends ============
  2906                          ; *************** function ___awdiv *****************
  2907                          ; Defined at:
  2908                          ;		line 5 in file "C:\Program Files (x86)\HI-TECH Software\HCPSOC\PRO\9.61\sources\awdiv.c"
  2909                          ; Parameters:
  2910                          ;		dividend    	reg:   xa	type: int 
  2911                          ;		divisor     	offs:   0	type: int 
  2912                          ; Auto variables:
  2913                          ;		dividend    	       	type: int 
  2914                          ;		quotient    	       	type: int 
  2915                          ;		sign        	       	type: unsigned char 
  2916                          ;		counter     	       	type: unsigned char 
  2917                          ; Return value:
  2918                          ;		type: int 
  2919                          ;		size: 2
  2920                          ; Registers used:
  2921                          ;		a, x, CUR_PP
  2922                          ; Tracked objects:
  2923                          ;		On entry : CUR_PP=0 IDX_PP=0 XIO=0 PG=2 MVR_PP? MVW_PP? 
  2924                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  2925                          ;		Unchanged: MVR_PP MVW_PP 
  2926                          ; Data sizes:
  2927                          ;		Autos:    6
  2928                          ;		Params:   2
  2929                          ;		Temp:     0
  2930                          ;		Total:    8
  2931                          ; This function calls:
  2932                          ;		Nothing
  2933                          ; This function is called by:
  2934                          ;		_ShowHumiTemp
  2935                          ; This function uses a non-reentrant model
  2936                          ; 
  2937  007E                    __size_of___awdiv	equ	__end_of___awdiv-___awdiv
  2938                          ;awdiv.c: 3: signed int
  2939                          ;awdiv.c: 4: __awdiv(signed int dividend, signed int divisor)
  2940                          ;awdiv.c: 5: {
  2941                          ;			CUR_PP=0 IDX_PP=0 XIO=0 PG=2 
  2942  3866                    ___awdiv:
  2943                          ;___awdiv@dividend stored from xa
  2944  3866  53 96             	mov	[(??___awdiv^0+1)], a
  2945  3868  5A 95             	mov	[??___awdiv^0], x
  2946                          ;awdiv.c: 6: signed int quotient;
  2947                          ;awdiv.c: 7: unsigned char counter, sign;
  2948                          ;awdiv.c: 9: sign = 0;
  2949  386A  50 00             	mov	a, 0
  2950                          ;awdiv.c: 10: if(divisor < 0) {
  2951  386C  47 93  80         	tst	[?___awdiv^0], 128
  2952  386F  A00E              	jz	l507
  2953                          ;awdiv.c: 11: divisor = -divisor;
  2954  3871  36 93  FF         	xor	[?___awdiv^0], 0xFF
  2955  3874  36 94  FF         	xor	[(?___awdiv^0+1)], 0xFF
  2956  3877  76 94             	inc	[(?___awdiv^0+1)]
  2957  3879  0E 93  00         	adc	[?___awdiv^0], 0
  2958                          ;awdiv.c: 12: sign = 1;
  2959  387C  50 01             	mov	a, 1
  2960                          ;			CUR_PP=0 IDX_PP=0 XIO=0 PG=2 
  2961  387E                    l507:
  2962                          ;awdiv.c: 13: }
  2963                          ;awdiv.c: 14: if(dividend < 0) {
  2964  387E  47 95  80         	tst	[??___awdiv^0], 128
  2965  3881  A00E              	jz	l508
  2966                          ;awdiv.c: 15: dividend = -dividend;
  2967  3883  36 95  FF         	xor	[??___awdiv^0], 0xFF
  2968  3886  36 96  FF         	xor	[(??___awdiv^0+1)], 0xFF
  2969  3889  76 96             	inc	[(??___awdiv^0+1)]
  2970  388B  0E 95  00         	adc	[??___awdiv^0], 0
  2971                          ;awdiv.c: 16: sign ^= 1;
  2972  388E  31 01             	xor	a, 1
  2973                          ;			CUR_PP=0 IDX_PP=0 XIO=0 PG=2 
  2974  3890                    l508:
  2975                          ;awdiv.c: 17: }
  2976                          ;awdiv.c: 18: quotient = 0;
  2977  3890  55 97  00         	mov	[(??___awdiv+2)^0], 0
  2978  3893  55 98  00         	mov	[((??___awdiv+2)^0+1)], 0
  2979                          ;___awdiv@sign stored from a
  2980  3896  53 99             	mov	[(??___awdiv+4)^0], a
  2981                          ;awdiv.c: 19: if(divisor != 0) {
  2982  3898  51 93             	mov	a, [?___awdiv^0]
  2983  389A  2A 94             	or	a, [(?___awdiv^0+1)]
  2984  389C  A036              	jz	l509
  2985                          ;awdiv.c: 20: counter = 1;
  2986  389E  50 01             	mov	a, 1
  2987                          ;awdiv.c: 21: while((divisor & 0x8000U) == 0) {
  2988  38A0  7D 38A8           	jmp	l510
  2989                          ;			CUR_PP=0 XIO=0 
  2990  38A3                    l511:
  2991                          ;awdiv.c: 22: divisor <<= 1;
  2992  38A3  65 94             	asl	[(?___awdiv^0+1)]
  2993  38A5  6B 93             	rlc	[?___awdiv^0]
  2994                          ;awdiv.c: 23: counter++;
  2995  38A7  74                	inc	a
  2996                          ;			CUR_PP=0 XIO=0 
  2997  38A8                    l510:
  2998  38A8  47 93  80         	tst	[?___awdiv^0], 128
  2999  38AB  AFF7              	jz	l511
  3000                          ;			CUR_PP=0 XIO=0 
  3001                          ;awdiv.c: 24: }
  3002                          ;awdiv.c: 25: do {
  3003                          ;			CUR_PP=0 XIO=0 
  3004  38AD                    l515:
  3005                          ;awdiv.c: 26: quotient <<= 1;
  3006  38AD  65 98             	asl	[((??___awdiv+2)^0+1)]
  3007  38AF  6B 97             	rlc	[(??___awdiv+2)^0]
  3008                          ;___awdiv@counter stored from a
  3009  38B1  53 9A             	mov	[(??___awdiv+5)^0], a
  3010                          ;awdiv.c: 27: if((unsigned int)divisor <= (unsigned int)dividend) {
  3011  38B3  51 96             	mov	a, [(??___awdiv^0+1)]
  3012  38B5  3A 94             	cmp	a, [(?___awdiv^0+1)]
  3013  38B7  51 95             	mov	a, [??___awdiv^0]
  3014  38B9  1A 93             	sbb	a, [?___awdiv^0]
  3015  38BB  C00C              	jc	l516
  3016                          ;awdiv.c: 28: dividend -= divisor;
  3017  38BD  51 94             	mov	a, [(?___awdiv^0+1)]
  3018  38BF  14 96             	sub	[(??___awdiv^0+1)], a
  3019  38C1  51 93             	mov	a, [?___awdiv^0]
  3020  38C3  1C 95             	sbb	[??___awdiv^0], a
  3021                          ;awdiv.c: 29: quotient |= 1;
  3022  38C5  2E 98  01         	or	[((??___awdiv+2)^0+1)], 1
  3023                          ;			CUR_PP=0 XIO=0 
  3024  38C8                    l516:
  3025                          ;awdiv.c: 30: }
  3026                          ;awdiv.c: 31: *(unsigned int *)&divisor >>= 1;
  3027  38C8  70 FB             	and	f, 0xFB
  3028  38CA  6E 93             	rrc	[?___awdiv^0]
  3029  38CC  6E 94             	rrc	[(?___awdiv^0+1)]
  3030                          ; ___awdiv@counter loaded to a
  3031  38CE  51 9A             	mov	a, [(??___awdiv+5)^0]
  3032                          ;awdiv.c: 32: } while(--counter != 0);
  3033  38D0  78                	dec	a
  3034  38D1  BFDB              	jnz	l515
  3035                          ;			CUR_PP=0 XIO=0 
  3036                          ;			CUR_PP=0 XIO=0 
  3037  38D3                    l509:
  3038                          ; ___awdiv@quotient loaded to xa
  3039  38D3  51 98             	mov	a, [((??___awdiv+2)^0+1)]
  3040  38D5  58 97             	mov	x, [(??___awdiv+2)^0]
  3041                          ;awdiv.c: 33: }
  3042                          ;awdiv.c: 34: if(sign)
  3043  38D7  3C 99  00         	cmp	[(??___awdiv+4)^0], 0
  3044  38DA  A008              	jz	l506
  3045                          ;awdiv.c: 35: quotient = -quotient;
  3046  38DC  73                	cpl	a
  3047  38DD  74                	inc	a
  3048  38DE  4B                	swap	a, x
  3049  38DF  73                	cpl	a
  3050  38E0  09 00             	adc	a, 0
  3051  38E2  4B                	swap	a, x
  3052                          ;			CUR_PP=0 XIO=0 
  3053                          ;awdiv.c: 36: return quotient;
  3054                          ;awdiv.c: 37: }
  3055  38E3                    l506:
  3056                          ;			CUR_PP=0 XIO=0 
  3057  38E3  7F                	ret
  3058  38E4                    __end_of___awdiv:
  3059                          ; =============== function ___awdiv ends ============
  3060                          ; *************** function _abs *****************
  3061                          ; Defined at:
  3062                          ;		line 5 in file "../common/abs.c"
  3063                          ; Parameters:
  3064                          ;		a           	reg:   xa	type: int 
  3065                          ; Auto variables:
  3066                          ;		a           	       	type: int 
  3067                          ; Return value:
  3068                          ;		type: int 
  3069                          ;		size: 2
  3070                          ; Registers used:
  3071                          ;		a, x, CUR_PP
  3072                          ; Tracked objects:
  3073                          ;		On entry : CUR_PP=0 IDX_PP=0 XIO=0 PG=2 MVR_PP? MVW_PP? 
  3074                          ;		On exit  : CUR_PP=0 IDX_PP=0 XIO=0 PG=2 MVR_PP? MVW_PP? 
  3075                          ;		Unchanged: MVR_PP MVW_PP 
  3076                          ; Data sizes:
  3077                          ;		Autos:    2
  3078                          ;		Params:   0
  3079                          ;		Temp:     0
  3080                          ;		Total:    2
  3081                          ; This function calls:
  3082                          ;		Nothing
  3083                          ; This function is called by:
  3084                          ;		_ShowHumiTemp
  3085                          ; This function uses a non-reentrant model
  3086                          ; 
  3087  0019                    __size_of_abs	equ	__end_of_abs-_abs
  3088                          ;abs.c: 3: int
  3089                          ;abs.c: 4: abs(int a)
  3090                          ;abs.c: 5: {
  3091                          ;			CUR_PP=0 IDX_PP=0 XIO=0 PG=2 
  3092  38E4                    _abs:
  3093                          ;abs@a stored from xa
  3094  38E4  53 94             	mov	[(??_abs^0+1)], a
  3095  38E6  5A 93             	mov	[??_abs^0], x
  3096                          ;abs.c: 6: if(a < 0)
  3097  38E8  47 93  80         	tst	[??_abs^0], 128
  3098  38EB  A00C              	jz	l305
  3099                          ;abs.c: 7: return -a;
  3100  38ED  50 00             	mov	a, 0
  3101  38EF  12 94             	sub	a, [(??_abs^0+1)]
  3102  38F1  5C                	mov	x, a
  3103  38F2  50 00             	mov	a, 0
  3104  38F4  1A 93             	sbb	a, [??_abs^0]
  3105  38F6  4B                	swap	a, x
  3106  38F7  7F                	ret
  3107                          ;			CUR_PP=0 IDX_PP=0 XIO=0 PG=2 
  3108  38F8                    l305:
  3109                          ;abs.c: 8: return a;
  3110  38F8  51 94             	mov	a, [(??_abs^0+1)]
  3111  38FA  58 93             	mov	x, [??_abs^0]
  3112                          ;abs.c: 9: }
  3113                          ;			CUR_PP=0 IDX_PP=0 XIO=0 PG=2 
  3114  38FC  7F                	ret
  3115  38FD                    __end_of_abs:
  3116                          ; =============== function _abs ends ============
  3117                          ; *************** function _SendBit_1621 *****************
  3118                          ; Defined at:
  3119                          ;		line 28 in file "./ht1621b.c"
  3120                          ; Parameters:
  3121                          ;		data        	reg:    a	type: unsigned char 
  3122                          ;		cnt         	reg:    x	type: unsigned char 
  3123                          ; Auto variables:
  3124                          ;		cnt         	       	type: unsigned char 
  3125                          ;		data        	       	type: unsigned char 
  3126                          ;		i           	       	type: unsigned char 
  3127                          ; Return value:
  3128                          ;		type: void 
  3129                          ;		size: 0
  3130                          ; Registers used:
  3131                          ;		a, x, CUR_PP
  3132                          ; Tracked objects:
  3133                          ;		On entry : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  3134                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  3135                          ;		Unchanged: IDX_PP MVR_PP MVW_PP 
  3136                          ; Data sizes:
  3137                          ;		Autos:    3
  3138                          ;		Params:   0
  3139                          ;		Temp:     0
  3140                          ;		Total:    3
  3141                          ; This function calls:
  3142                          ;		_delay_us
  3143                          ; This function is called by:
  3144                          ;		_SendCmd
  3145                          ;		_WriteAll_1621
  3146                          ; This function uses a non-reentrant model
  3147                          ; 
  3148  003B                    __size_of_SendBit_1621	equ	__end_of_SendBit_1621-_SendBit_1621
  3149                          ;ht1621b.c: 27: void SendBit_1621(unsigned char data,unsigned char cnt)
  3150                          ;ht1621b.c: 28: {
  3151                          ;			CUR_PP=0 XIO=0 PG=2 
  3152  38FD                    _SendBit_1621:
  3153                          ;SendBit_1621@data stored from a
  3154  38FD  53 93             	mov	[(??_SendBit_1621+1)^0], a
  3155                          ;SendBit_1621@cnt stored from x
  3156  38FF  5A 92             	mov	[??_SendBit_1621^0], x
  3157                          ;ht1621b.c: 29: unsigned char i;
  3158                          ;ht1621b.c: 30: for(i =0; i <cnt; i ++)
  3159  3901  50 00             	mov	a, 0
  3160  3903  7D 3931           	jmp	l38
  3161                          ;			CUR_PP=0 XIO=0 
  3162  3906                    l35:
  3163                          ;ht1621b.c: 31: {
  3164                          ;ht1621b.c: 32: if((data&0x80)==0)
  3165  3906  3C 93  80         	cmp	[(??_SendBit_1621+1)^0], 128
  3166  3909  D007              	jnc	l39
  3167                          ;ht1621b.c: 33: {
  3168                          ;ht1621b.c: 34: (PRT0DR &= ~0x02);
  3169  390B  41 00 FD          	and	reg[0], 0xFD
  3170                          ;ht1621b.c: 35: }
  3171  390E  7D 3914           	jmp	l40
  3172                          ;			CUR_PP=0 XIO=0 
  3173  3911                    l39:
  3174                          ;ht1621b.c: 36: else
  3175                          ;ht1621b.c: 37: {
  3176                          ;ht1621b.c: 38: (PRT0DR |= 0x02);
  3177  3911  43 00 02          	or	reg[0], 2
  3178                          ;			CUR_PP=0 XIO=0 
  3179  3914                    l40:
  3180                          ;ht1621b.c: 39: }
  3181                          ;ht1621b.c: 40: delay_us(4);
  3182  3914  50 04             	mov	a, 4
  3183  3916  57 00             	mov	x, 0
  3184  3918  71 80             	or	f, 0x80	;select multiple RAM page mode
  3185  391A  7C 3BC3           	call	_delay_us
  3186                          ;ht1621b.c: 41: (PRT0DR &= ~0x08);
  3187  391D  41 00 F7          	and	reg[0], 0xF7
  3188                          ;ht1621b.c: 42: delay_us(4);
  3189  3920  50 04             	mov	a, 4
  3190  3922  57 00             	mov	x, 0
  3191  3924  71 80             	or	f, 0x80	;select multiple RAM page mode
  3192  3926  7C 3BC3           	call	_delay_us
  3193                          ;ht1621b.c: 43: (PRT0DR |= 0x08);
  3194  3929  43 00 08          	or	reg[0], 8
  3195                          ;ht1621b.c: 44: data<<=1;
  3196  392C  65 93             	asl	[(??_SendBit_1621+1)^0]
  3197                          ; SendBit_1621@i loaded to a
  3198  392E  51 94             	mov	a, [(??_SendBit_1621+2)^0]
  3199  3930  74                	inc	a
  3200                          ;			CUR_PP=0 XIO=0 
  3201  3931                    l38:
  3202                          ;SendBit_1621@i stored from a
  3203  3931  53 94             	mov	[(??_SendBit_1621+2)^0], a
  3204  3933  3A 92             	cmp	a, [??_SendBit_1621^0]
  3205  3935  CFD0              	jc	l35
  3206                          ;			CUR_PP=0 XIO=0 
  3207                          ;ht1621b.c: 45: }
  3208                          ;ht1621b.c: 46: }
  3209                          ;			CUR_PP=0 XIO=0 
  3210  3937  7F                	ret
  3211  3938                    __end_of_SendBit_1621:
  3212                          ; =============== function _SendBit_1621 ends ============
  3213                          ; *************** function _SendDataBit_1621 *****************
  3214                          ; Defined at:
  3215                          ;		line 48 in file "./ht1621b.c"
  3216                          ; Parameters:
  3217                          ;		data        	reg:    a	type: unsigned char 
  3218                          ;		cnt         	reg:    x	type: unsigned char 
  3219                          ; Auto variables:
  3220                          ;		cnt         	       	type: unsigned char 
  3221                          ;		data        	       	type: unsigned char 
  3222                          ;		i           	       	type: unsigned char 
  3223                          ; Return value:
  3224                          ;		type: void 
  3225                          ;		size: 0
  3226                          ; Registers used:
  3227                          ;		a, x, CUR_PP
  3228                          ; Tracked objects:
  3229                          ;		On entry : CUR_PP=0 IDX_PP=0 XIO=0 PG? MVR_PP? MVW_PP? 
  3230                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  3231                          ;		Unchanged: MVR_PP MVW_PP 
  3232                          ; Data sizes:
  3233                          ;		Autos:    3
  3234                          ;		Params:   0
  3235                          ;		Temp:     0
  3236                          ;		Total:    3
  3237                          ; This function calls:
  3238                          ;		_delay_us
  3239                          ; This function is called by:
  3240                          ;		_WriteAll_1621
  3241                          ; This function uses a non-reentrant model
  3242                          ; 
  3243  003D                    __size_of_SendDataBit_1621	equ	__end_of_SendDataBit_1621-_SendDataBit_1621
  3244                          ;ht1621b.c: 47: void SendDataBit_1621(unsigned char data,unsigned char cnt)
  3245                          ;ht1621b.c: 48: {
  3246                          ;			CUR_PP=0 IDX_PP=0 XIO=0 PG=2 
  3247  3938                    _SendDataBit_1621:
  3248                          ;SendDataBit_1621@data stored from a
  3249  3938  53 93             	mov	[(??_SendDataBit_1621+1)^0], a
  3250                          ;SendDataBit_1621@cnt stored from x
  3251  393A  5A 92             	mov	[??_SendDataBit_1621^0], x
  3252                          ;ht1621b.c: 49: unsigned char i;
  3253                          ;ht1621b.c: 50: for(i =0; i <cnt; i ++)
  3254  393C  50 00             	mov	a, 0
  3255  393E  7D 396E           	jmp	l45
  3256                          ;			CUR_PP=0 XIO=0 
  3257  3941                    l42:
  3258                          ;ht1621b.c: 51: {
  3259                          ;ht1621b.c: 52: if((data&0x01)==0)
  3260  3941  47 93  01         	tst	[(??_SendDataBit_1621+1)^0], 1
  3261  3944  B007              	jnz	l46
  3262                          ;ht1621b.c: 53: {
  3263                          ;ht1621b.c: 54: (PRT0DR &= ~0x02);
  3264  3946  41 00 FD          	and	reg[0], 0xFD
  3265                          ;ht1621b.c: 55: }
  3266  3949  7D 394F           	jmp	l47
  3267                          ;			CUR_PP=0 XIO=0 
  3268  394C                    l46:
  3269                          ;ht1621b.c: 56: else
  3270                          ;ht1621b.c: 57: {
  3271                          ;ht1621b.c: 58: (PRT0DR |= 0x02);
  3272  394C  43 00 02          	or	reg[0], 2
  3273                          ;			CUR_PP=0 XIO=0 
  3274  394F                    l47:
  3275                          ;ht1621b.c: 59: }
  3276                          ;ht1621b.c: 60: delay_us(4);
  3277  394F  50 04             	mov	a, 4
  3278  3951  57 00             	mov	x, 0
  3279  3953  71 80             	or	f, 0x80	;select multiple RAM page mode
  3280  3955  7C 3BC3           	call	_delay_us
  3281                          ;ht1621b.c: 61: (PRT0DR &= ~0x08);
  3282  3958  41 00 F7          	and	reg[0], 0xF7
  3283                          ;ht1621b.c: 62: delay_us(4);
  3284  395B  50 04             	mov	a, 4
  3285  395D  57 00             	mov	x, 0
  3286  395F  71 80             	or	f, 0x80	;select multiple RAM page mode
  3287  3961  7C 3BC3           	call	_delay_us
  3288                          ;ht1621b.c: 63: (PRT0DR |= 0x08);
  3289  3964  43 00 08          	or	reg[0], 8
  3290                          ;ht1621b.c: 64: data>>=1;
  3291  3967  70 FB             	and	f, 0xFB
  3292  3969  6E 93             	rrc	[(??_SendDataBit_1621+1)^0]
  3293                          ; SendDataBit_1621@i loaded to a
  3294  396B  51 94             	mov	a, [(??_SendDataBit_1621+2)^0]
  3295  396D  74                	inc	a
  3296                          ;			CUR_PP=0 XIO=0 
  3297  396E                    l45:
  3298                          ;SendDataBit_1621@i stored from a
  3299  396E  53 94             	mov	[(??_SendDataBit_1621+2)^0], a
  3300  3970  3A 92             	cmp	a, [??_SendDataBit_1621^0]
  3301  3972  CFCE              	jc	l42
  3302                          ;			CUR_PP=0 XIO=0 
  3303                          ;ht1621b.c: 65: }
  3304                          ;ht1621b.c: 66: }
  3305                          ;			CUR_PP=0 XIO=0 
  3306  3974  7F                	ret
  3307  3975                    __end_of_SendDataBit_1621:
  3308                          ; =============== function _SendDataBit_1621 ends ============
  3309                          ; *************** function _RcvByte *****************
  3310                          ; Defined at:
  3311                          ;		line 117 in file "./software_iic.c"
  3312                          ; Parameters:
  3313                          ;		None
  3314                          ; Auto variables:
  3315                          ;		retc        	       	type: unsigned char 
  3316                          ;		BitCnt      	       	type: unsigned char 
  3317                          ; Return value:
  3318                          ;		type: unsigned char 
  3319                          ;		size: 1
  3320                          ; Registers used:
  3321                          ;		a, x, CUR_PP
  3322                          ; Tracked objects:
  3323                          ;		On entry : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  3324                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  3325                          ;		Unchanged: IDX_PP MVR_PP MVW_PP 
  3326                          ; Data sizes:
  3327                          ;		Autos:    2
  3328                          ;		Params:   0
  3329                          ;		Temp:     0
  3330                          ;		Total:    2
  3331                          ; This function calls:
  3332                          ;		_ChangeToRead
  3333                          ;		_delay_us
  3334                          ;		_ChangeToOD
  3335                          ; This function is called by:
  3336                          ;		_IRcvBytes
  3337                          ; This function uses a non-reentrant model
  3338                          ; 
  3339  0048                    __size_of_RcvByte	equ	__end_of_RcvByte-_RcvByte
  3340                          ;software_iic.c: 116: unsigned char RcvByte(void)
  3341                          ;software_iic.c: 117: {
  3342                          ;			CUR_PP=0 XIO=0 PG=2 
  3343  3975                    _RcvByte:
  3344                          ;software_iic.c: 118: unsigned char retc;
  3345                          ;software_iic.c: 119: unsigned char BitCnt;
  3346                          ;software_iic.c: 121: retc=0;
  3347  3975  55 95  00         	mov	[??_RcvByte^0], 0
  3348                          ;software_iic.c: 122: ChangeToRead();
  3349  3978  7C 3BB2           	call	_ChangeToRead
  3350                          ;software_iic.c: 123: for(BitCnt=0;BitCnt<8;BitCnt++)
  3351  397B  55 96  00         	mov	[(??_RcvByte+1)^0], 0
  3352                          ;			CUR_PP=0 XIO=0 
  3353  397E                    l259:
  3354                          ;software_iic.c: 124: {
  3355                          ;software_iic.c: 125: delay_us(1);
  3356  397E  50 01             	mov	a, 1
  3357  3980  57 00             	mov	x, 0
  3358  3982  71 80             	or	f, 0x80	;select multiple RAM page mode
  3359  3984  7C 3BC3           	call	_delay_us
  3360                          ;software_iic.c: 126: PRT1DR &= ~0x80;
  3361  3987  41 04 7F          	and	reg[4], 0x7F
  3362                          ;software_iic.c: 127: delay_us(1);
  3363  398A  50 01             	mov	a, 1
  3364  398C  57 00             	mov	x, 0
  3365  398E  71 80             	or	f, 0x80	;select multiple RAM page mode
  3366  3990  7C 3BC3           	call	_delay_us
  3367                          ;software_iic.c: 128: PRT1DR |= 0x80;
  3368  3993  43 04 80          	or	reg[4], 0x80
  3369                          ;software_iic.c: 129: delay_us(1);
  3370  3996  50 01             	mov	a, 1
  3371  3998  57 00             	mov	x, 0
  3372  399A  71 80             	or	f, 0x80	;select multiple RAM page mode
  3373  399C  7C 3BC3           	call	_delay_us
  3374                          ;software_iic.c: 130: retc=retc<<1;
  3375  399F  65 95             	asl	[??_RcvByte^0]
  3376                          ;software_iic.c: 131: if(PRT1DR&0x20)
  3377  39A1  49 04 20          	tst	reg[4], 32
  3378  39A4  A004              	jz	l262
  3379                          ;software_iic.c: 132: {
  3380                          ;software_iic.c: 133: retc |= 1;
  3381  39A6  2E 95  01         	or	[??_RcvByte^0], 1
  3382                          ;			CUR_PP=0 XIO=0 
  3383  39A9                    l262:
  3384  39A9  76 96             	inc	[(??_RcvByte+1)^0]
  3385  39AB  3C 96  08         	cmp	[(??_RcvByte+1)^0], 8
  3386  39AE  CFCF              	jc	l259
  3387                          ;			CUR_PP=0 XIO=0 
  3388                          ;software_iic.c: 134: }
  3389                          ;software_iic.c: 135: }
  3390                          ;software_iic.c: 136: PRT1DR &= ~0x80;
  3391  39B0  41 04 7F          	and	reg[4], 0x7F
  3392  39B3  40                	nop	;#
  3393  39B4  40                	nop	;#
  3394                          ;software_iic.c: 137: asm("nop");
  3395                          ;software_iic.c: 138: asm("nop");
  3396                          ;software_iic.c: 139: ChangeToOD();
  3397  39B5  71 80             	or	f, 0x80	;select multiple RAM page mode
  3398  39B7  7C 3BA3           	call	_ChangeToOD
  3399                          ;software_iic.c: 140: return(retc);
  3400  39BA  51 95             	mov	a, [??_RcvByte^0]
  3401                          ;software_iic.c: 141: }
  3402                          ;			CUR_PP=0 XIO=0 
  3403  39BC  7F                	ret
  3404  39BD                    __end_of_RcvByte:
  3405                          ; =============== function _RcvByte ends ============
  3406                          ; *************** function ___awmod *****************
  3407                          ; Defined at:
  3408                          ;		line 5 in file "C:\Program Files (x86)\HI-TECH Software\HCPSOC\PRO\9.61\sources\awmod.c"
  3409                          ; Parameters:
  3410                          ;		dividend    	reg:   xa	type: int 
  3411                          ;		divisor     	offs:   0	type: int 
  3412                          ; Auto variables:
  3413                          ;		dividend    	       	type: int 
  3414                          ;		counter     	       	type: unsigned char 
  3415                          ;		sign        	       	type: unsigned char 
  3416                          ; Return value:
  3417                          ;		type: int 
  3418                          ;		size: 2
  3419                          ; Registers used:
  3420                          ;		a, x, CUR_PP
  3421                          ; Tracked objects:
  3422                          ;		On entry : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  3423                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  3424                          ;		Unchanged: MVR_PP MVW_PP 
  3425                          ; Data sizes:
  3426                          ;		Autos:    4
  3427                          ;		Params:   2
  3428                          ;		Temp:     0
  3429                          ;		Total:    6
  3430                          ; This function calls:
  3431                          ;		Nothing
  3432                          ; This function is called by:
  3433                          ;		_ShowHumiTemp
  3434                          ; This function uses a non-reentrant model
  3435                          ; 
  3436  0073                    __size_of___awmod	equ	__end_of___awmod-___awmod
  3437                          ;awmod.c: 3: signed int
  3438                          ;awmod.c: 4: __awmod(signed int dividend, signed int divisor)
  3439                          ;awmod.c: 5: {
  3440                          ;			CUR_PP=0 IDX_PP=0 XIO=0 PG=2 
  3441  39BD                    ___awmod:
  3442                          ;awmod.c: 6: unsigned char counter, sign;
  3443                          ;awmod.c: 8: sign = 0;
  3444  39BD  55 97  00         	mov	[(??___awmod+2)^0], 0
  3445                          ;awmod.c: 9: if(dividend < 0) {
  3446  39C0  4B                	swap	a, x
  3447  39C1  39 80             	cmp	a, 128
  3448  39C3  4B                	swap	a, x
  3449  39C4  C00B              	jc	l587
  3450                          ;awmod.c: 10: dividend = -dividend;
  3451  39C6  73                	cpl	a
  3452  39C7  74                	inc	a
  3453  39C8  4B                	swap	a, x
  3454  39C9  73                	cpl	a
  3455  39CA  09 00             	adc	a, 0
  3456  39CC  4B                	swap	a, x
  3457                          ;awmod.c: 11: sign = 1;
  3458  39CD  55 97  01         	mov	[(??___awmod+2)^0], 1
  3459                          ;			CUR_PP=0 IDX_PP=0 XIO=0 PG=2 
  3460  39D0                    l587:
  3461                          ;awmod.c: 12: }
  3462                          ;awmod.c: 13: if(divisor < 0)
  3463  39D0  47 93  80         	tst	[?___awmod^0], 128
  3464  39D3  A00C              	jz	l588
  3465                          ;awmod.c: 14: divisor = -divisor;
  3466  39D5  36 93  FF         	xor	[?___awmod^0], 0xFF
  3467  39D8  36 94  FF         	xor	[(?___awmod^0+1)], 0xFF
  3468  39DB  76 94             	inc	[(?___awmod^0+1)]
  3469  39DD  0E 93  00         	adc	[?___awmod^0], 0
  3470                          ;			CUR_PP=0 IDX_PP=0 XIO=0 PG=2 
  3471  39E0                    l588:
  3472                          ;awmod.c: 15: if(divisor != 0) {
  3473  39E0  3C 93  00         	cmp	[?___awmod^0], 0
  3474  39E3  B006              	jnz	L1
  3475  39E5  3C 94  00         	cmp	[(?___awmod^0+1)], 0
  3476  39E8  A03A              	jz	l589
  3477  39EA                    L1:
  3478                          ;awmod.c: 16: counter = 1;
  3479  39EA  55 98  01         	mov	[(??___awmod+3)^0], 1
  3480                          ;awmod.c: 17: while(((unsigned int)divisor & 0x8000U) == 0) {
  3481  39ED  7D 39FA           	jmp	l590
  3482                          ;			CUR_PP=0 XIO=0 
  3483  39F0                    l591:
  3484                          ; ___awmod@dividend loaded to xa
  3485  39F0  51 96             	mov	a, [(??___awmod^0+1)]
  3486  39F2  58 95             	mov	x, [??___awmod^0]
  3487                          ;awmod.c: 18: divisor <<= 1;
  3488  39F4  65 94             	asl	[(?___awmod^0+1)]
  3489  39F6  6B 93             	rlc	[?___awmod^0]
  3490                          ;awmod.c: 19: counter++;
  3491  39F8  76 98             	inc	[(??___awmod+3)^0]
  3492                          ;			CUR_PP=0 XIO=0 
  3493  39FA                    l590:
  3494                          ;___awmod@dividend stored from xa
  3495  39FA  53 96             	mov	[(??___awmod^0+1)], a
  3496  39FC  5A 95             	mov	[??___awmod^0], x
  3497  39FE  47 93  80         	tst	[?___awmod^0], 128
  3498  3A01  AFEE              	jz	l591
  3499                          ;			CUR_PP=0 XIO=0 
  3500                          ;awmod.c: 20: }
  3501                          ;awmod.c: 21: do {
  3502                          ;			CUR_PP=0 XIO=0 
  3503  3A03                    l595:
  3504                          ;awmod.c: 22: if((unsigned int)divisor <= (unsigned int)dividend)
  3505  3A03  51 96             	mov	a, [(??___awmod^0+1)]
  3506  3A05  3A 94             	cmp	a, [(?___awmod^0+1)]
  3507  3A07  51 95             	mov	a, [??___awmod^0]
  3508  3A09  1A 93             	sbb	a, [?___awmod^0]
  3509  3A0B  C009              	jc	l596
  3510                          ;awmod.c: 23: dividend -= divisor;
  3511  3A0D  51 94             	mov	a, [(?___awmod^0+1)]
  3512  3A0F  14 96             	sub	[(??___awmod^0+1)], a
  3513  3A11  51 93             	mov	a, [?___awmod^0]
  3514  3A13  1C 95             	sbb	[??___awmod^0], a
  3515                          ;			CUR_PP=0 XIO=0 
  3516  3A15                    l596:
  3517                          ;awmod.c: 24: *(unsigned int *)&divisor >>= 1;
  3518  3A15  70 FB             	and	f, 0xFB
  3519  3A17  6E 93             	rrc	[?___awmod^0]
  3520  3A19  6E 94             	rrc	[(?___awmod^0+1)]
  3521                          ;awmod.c: 25: } while(--counter != 0);
  3522  3A1B  7A 98             	dec	[(??___awmod+3)^0]
  3523  3A1D  BFE5              	jnz	l595
  3524                          ;			CUR_PP=0 XIO=0 
  3525                          ; ___awmod@dividend loaded to xa
  3526  3A1F  51 96             	mov	a, [(??___awmod^0+1)]
  3527  3A21  58 95             	mov	x, [??___awmod^0]
  3528                          ;			CUR_PP=0 XIO=0 
  3529  3A23                    l589:
  3530                          ;awmod.c: 26: }
  3531                          ;awmod.c: 27: if(sign)
  3532  3A23  3C 97  00         	cmp	[(??___awmod+2)^0], 0
  3533  3A26  A008              	jz	l586
  3534                          ;awmod.c: 28: dividend = -dividend;
  3535  3A28  73                	cpl	a
  3536  3A29  74                	inc	a
  3537  3A2A  4B                	swap	a, x
  3538  3A2B  73                	cpl	a
  3539  3A2C  09 00             	adc	a, 0
  3540  3A2E  4B                	swap	a, x
  3541                          ;			CUR_PP=0 XIO=0 
  3542                          ;awmod.c: 29: return dividend;
  3543                          ;awmod.c: 30: }
  3544  3A2F                    l586:
  3545                          ;			CUR_PP=0 XIO=0 
  3546  3A2F  7F                	ret
  3547  3A30                    __end_of___awmod:
  3548                          ; =============== function ___awmod ends ============
  3549                          ; *************** function ___lwmod *****************
  3550                          ; Defined at:
  3551                          ;		line 5 in file "C:\Program Files (x86)\HI-TECH Software\HCPSOC\PRO\9.61\sources\lwmod.c"
  3552                          ; Parameters:
  3553                          ;		dividend    	reg:   xa	type: unsigned int 
  3554                          ;		divisor     	offs:   0	type: unsigned int 
  3555                          ; Auto variables:
  3556                          ;		dividend    	       	type: unsigned int 
  3557                          ;		counter     	       	type: unsigned char 
  3558                          ; Return value:
  3559                          ;		type: unsigned int 
  3560                          ;		size: 2
  3561                          ; Registers used:
  3562                          ;		a, x, CUR_PP
  3563                          ; Tracked objects:
  3564                          ;		On entry : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  3565                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  3566                          ;		Unchanged: IDX_PP MVR_PP MVW_PP 
  3567                          ; Data sizes:
  3568                          ;		Autos:    3
  3569                          ;		Params:   2
  3570                          ;		Temp:     0
  3571                          ;		Total:    5
  3572                          ; This function calls:
  3573                          ;		Nothing
  3574                          ; This function is called by:
  3575                          ;		_DisplayPMxx
  3576                          ; This function uses a non-reentrant model
  3577                          ; 
  3578  003C                    __size_of___lwmod	equ	__end_of___lwmod-___lwmod
  3579                          ;lwmod.c: 3: unsigned int
  3580                          ;lwmod.c: 4: __lwmod(unsigned int dividend, unsigned int divisor)
  3581                          ;lwmod.c: 5: {
  3582                          ;			CUR_PP=0 XIO=0 PG=2 
  3583  3A30                    ___lwmod:
  3584                          ;___lwmod@dividend stored from xa
  3585  3A30  53 98             	mov	[(??___lwmod^0+1)], a
  3586  3A32  5A 97             	mov	[??___lwmod^0], x
  3587                          ;lwmod.c: 6: unsigned char counter;
  3588                          ;lwmod.c: 8: if(divisor != 0) {
  3589  3A34  51 95             	mov	a, [?___lwmod^0]
  3590  3A36  2A 96             	or	a, [(?___lwmod^0+1)]
  3591  3A38  A02E              	jz	l326
  3592                          ;lwmod.c: 9: counter = 1;
  3593  3A3A  55 99  01         	mov	[(??___lwmod+2)^0], 1
  3594                          ;lwmod.c: 10: while((divisor & 0x8000) == 0) {
  3595  3A3D  7D 3A46           	jmp	l327
  3596                          ;			CUR_PP=0 XIO=0 
  3597  3A40                    l328:
  3598                          ;lwmod.c: 11: divisor <<= 1;
  3599  3A40  65 96             	asl	[(?___lwmod^0+1)]
  3600  3A42  6B 95             	rlc	[?___lwmod^0]
  3601                          ;lwmod.c: 12: counter++;
  3602  3A44  76 99             	inc	[(??___lwmod+2)^0]
  3603                          ;			CUR_PP=0 XIO=0 
  3604  3A46                    l327:
  3605  3A46  47 95  80         	tst	[?___lwmod^0], 128
  3606  3A49  AFF6              	jz	l328
  3607                          ;			CUR_PP=0 XIO=0 
  3608                          ;lwmod.c: 13: }
  3609                          ;lwmod.c: 14: do {
  3610                          ;			CUR_PP=0 XIO=0 
  3611  3A4B                    l332:
  3612                          ;lwmod.c: 15: if(divisor <= dividend)
  3613  3A4B  51 98             	mov	a, [(??___lwmod^0+1)]
  3614  3A4D  3A 96             	cmp	a, [(?___lwmod^0+1)]
  3615  3A4F  51 97             	mov	a, [??___lwmod^0]
  3616  3A51  1A 95             	sbb	a, [?___lwmod^0]
  3617  3A53  C009              	jc	l333
  3618                          ;lwmod.c: 16: dividend -= divisor;
  3619  3A55  51 96             	mov	a, [(?___lwmod^0+1)]
  3620  3A57  14 98             	sub	[(??___lwmod^0+1)], a
  3621  3A59  51 95             	mov	a, [?___lwmod^0]
  3622  3A5B  1C 97             	sbb	[??___lwmod^0], a
  3623                          ;			CUR_PP=0 XIO=0 
  3624  3A5D                    l333:
  3625                          ;lwmod.c: 17: divisor >>= 1;
  3626  3A5D  70 FB             	and	f, 0xFB
  3627  3A5F  6E 95             	rrc	[?___lwmod^0]
  3628  3A61  6E 96             	rrc	[(?___lwmod^0+1)]
  3629                          ;lwmod.c: 18: } while(--counter != 0);
  3630  3A63  7A 99             	dec	[(??___lwmod+2)^0]
  3631  3A65  BFE5              	jnz	l332
  3632                          ;			CUR_PP=0 XIO=0 
  3633                          ;			CUR_PP=0 XIO=0 
  3634  3A67                    l326:
  3635                          ;lwmod.c: 19: }
  3636                          ;lwmod.c: 20: return dividend;
  3637  3A67  51 98             	mov	a, [(??___lwmod^0+1)]
  3638  3A69  58 97             	mov	x, [??___lwmod^0]
  3639                          ;lwmod.c: 21: }
  3640                          ;			CUR_PP=0 XIO=0 
  3641  3A6B  7F                	ret
  3642  3A6C                    __end_of___lwmod:
  3643                          ; =============== function ___lwmod ends ============
  3644                          ; *************** function ___lwdiv *****************
  3645                          ; Defined at:
  3646                          ;		line 5 in file "C:\Program Files (x86)\HI-TECH Software\HCPSOC\PRO\9.61\sources\lwdiv.c"
  3647                          ; Parameters:
  3648                          ;		dividend    	reg:   xa	type: unsigned int 
  3649                          ;		divisor     	offs:   0	type: unsigned int 
  3650                          ; Auto variables:
  3651                          ;		dividend    	       	type: unsigned int 
  3652                          ;		quotient    	       	type: unsigned int 
  3653                          ;		counter     	       	type: unsigned char 
  3654                          ; Return value:
  3655                          ;		type: unsigned int 
  3656                          ;		size: 2
  3657                          ; Registers used:
  3658                          ;		a, x, CUR_PP
  3659                          ; Tracked objects:
  3660                          ;		On entry : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  3661                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  3662                          ;		Unchanged: IDX_PP MVR_PP MVW_PP 
  3663                          ; Data sizes:
  3664                          ;		Autos:    5
  3665                          ;		Params:   2
  3666                          ;		Temp:     0
  3667                          ;		Total:    7
  3668                          ; This function calls:
  3669                          ;		Nothing
  3670                          ; This function is called by:
  3671                          ;		_DisplayPMxx
  3672                          ; This function uses a non-reentrant model
  3673                          ; 
  3674  004A                    __size_of___lwdiv	equ	__end_of___lwdiv-___lwdiv
  3675                          ;lwdiv.c: 3: unsigned int
  3676                          ;lwdiv.c: 4: __lwdiv(unsigned int dividend, unsigned int divisor)
  3677                          ;lwdiv.c: 5: {
  3678                          ;			CUR_PP=0 XIO=0 PG=2 
  3679  3A6C                    ___lwdiv:
  3680                          ;___lwdiv@dividend stored from xa
  3681  3A6C  53 98             	mov	[(??___lwdiv^0+1)], a
  3682  3A6E  5A 97             	mov	[??___lwdiv^0], x
  3683                          ;lwdiv.c: 6: unsigned int quotient;
  3684                          ;lwdiv.c: 7: unsigned char counter;
  3685                          ;lwdiv.c: 9: quotient = 0;
  3686  3A70  55 99  00         	mov	[(??___lwdiv+2)^0], 0
  3687  3A73  55 9A  00         	mov	[((??___lwdiv+2)^0+1)], 0
  3688                          ;lwdiv.c: 10: if(divisor != 0) {
  3689  3A76  51 95             	mov	a, [?___lwdiv^0]
  3690  3A78  2A 96             	or	a, [(?___lwdiv^0+1)]
  3691  3A7A  A036              	jz	l317
  3692                          ;lwdiv.c: 11: counter = 1;
  3693  3A7C  50 01             	mov	a, 1
  3694                          ;lwdiv.c: 12: while((divisor & 0x8000) == 0) {
  3695  3A7E  7D 3A86           	jmp	l318
  3696                          ;			CUR_PP=0 XIO=0 
  3697  3A81                    l319:
  3698                          ;lwdiv.c: 13: divisor <<= 1;
  3699  3A81  65 96             	asl	[(?___lwdiv^0+1)]
  3700  3A83  6B 95             	rlc	[?___lwdiv^0]
  3701                          ;lwdiv.c: 14: counter++;
  3702  3A85  74                	inc	a
  3703                          ;			CUR_PP=0 XIO=0 
  3704  3A86                    l318:
  3705  3A86  47 95  80         	tst	[?___lwdiv^0], 128
  3706  3A89  AFF7              	jz	l319
  3707                          ;			CUR_PP=0 XIO=0 
  3708                          ;lwdiv.c: 15: }
  3709                          ;lwdiv.c: 16: do {
  3710                          ;			CUR_PP=0 XIO=0 
  3711  3A8B                    l323:
  3712                          ;lwdiv.c: 17: quotient <<= 1;
  3713  3A8B  65 9A             	asl	[((??___lwdiv+2)^0+1)]
  3714  3A8D  6B 99             	rlc	[(??___lwdiv+2)^0]
  3715                          ;___lwdiv@counter stored from a
  3716  3A8F  53 9B             	mov	[(??___lwdiv+4)^0], a
  3717                          ;lwdiv.c: 18: if(divisor <= dividend) {
  3718  3A91  51 98             	mov	a, [(??___lwdiv^0+1)]
  3719  3A93  3A 96             	cmp	a, [(?___lwdiv^0+1)]
  3720  3A95  51 97             	mov	a, [??___lwdiv^0]
  3721  3A97  1A 95             	sbb	a, [?___lwdiv^0]
  3722  3A99  C00C              	jc	l324
  3723                          ;lwdiv.c: 19: dividend -= divisor;
  3724  3A9B  51 96             	mov	a, [(?___lwdiv^0+1)]
  3725  3A9D  14 98             	sub	[(??___lwdiv^0+1)], a
  3726  3A9F  51 95             	mov	a, [?___lwdiv^0]
  3727  3AA1  1C 97             	sbb	[??___lwdiv^0], a
  3728                          ;lwdiv.c: 20: quotient |= 1;
  3729  3AA3  2E 9A  01         	or	[((??___lwdiv+2)^0+1)], 1
  3730                          ;			CUR_PP=0 XIO=0 
  3731  3AA6                    l324:
  3732                          ;lwdiv.c: 21: }
  3733                          ;lwdiv.c: 22: divisor >>= 1;
  3734  3AA6  70 FB             	and	f, 0xFB
  3735  3AA8  6E 95             	rrc	[?___lwdiv^0]
  3736  3AAA  6E 96             	rrc	[(?___lwdiv^0+1)]
  3737                          ; ___lwdiv@counter loaded to a
  3738  3AAC  51 9B             	mov	a, [(??___lwdiv+4)^0]
  3739                          ;lwdiv.c: 23: } while(--counter != 0);
  3740  3AAE  78                	dec	a
  3741  3AAF  BFDB              	jnz	l323
  3742                          ;			CUR_PP=0 XIO=0 
  3743                          ;			CUR_PP=0 XIO=0 
  3744  3AB1                    l317:
  3745                          ;lwdiv.c: 24: }
  3746                          ;lwdiv.c: 25: return quotient;
  3747  3AB1  51 9A             	mov	a, [((??___lwdiv+2)^0+1)]
  3748  3AB3  58 99             	mov	x, [(??___lwdiv+2)^0]
  3749                          ;lwdiv.c: 26: }
  3750                          ;			CUR_PP=0 XIO=0 
  3751  3AB5  7F                	ret
  3752  3AB6                    __end_of___lwdiv:
  3753                          ; =============== function ___lwdiv ends ============
  3754                          ; *************** function _Ack_I2c *****************
  3755                          ; Defined at:
  3756                          ;		line 149 in file "./software_iic.c"
  3757                          ; Parameters:
  3758                          ;		a           	reg:    a	type: unsigned char 
  3759                          ; Auto variables:
  3760                          ;		a           	       	type: unsigned char 
  3761                          ; Return value:
  3762                          ;		type: void 
  3763                          ;		size: 0
  3764                          ; Registers used:
  3765                          ;		a, x, CUR_PP
  3766                          ; Tracked objects:
  3767                          ;		On entry : CUR_PP=0 IDX_PP=0 XIO=0 PG? MVR_PP? MVW_PP? 
  3768                          ;		On exit  : CUR_PP=0 IDX_PP=0 XIO=0 PG? MVR_PP? MVW_PP? 
  3769                          ;		Unchanged: MVR_PP MVW_PP 
  3770                          ; Data sizes:
  3771                          ;		Autos:    1
  3772                          ;		Params:   0
  3773                          ;		Temp:     0
  3774                          ;		Total:    1
  3775                          ; This function calls:
  3776                          ;		_delay_us
  3777                          ; This function is called by:
  3778                          ;		_IRcvBytes
  3779                          ; This function uses a non-reentrant model
  3780                          ; 
  3781  002C                    __size_of_Ack_I2c	equ	__end_of_Ack_I2c-_Ack_I2c
  3782                          ;software_iic.c: 148: void Ack_I2c(unsigned char a)
  3783                          ;software_iic.c: 149: {
  3784                          ;			CUR_PP=0 IDX_PP=0 XIO=0 PG=2 
  3785  3AB6                    _Ack_I2c:
  3786                          ;software_iic.c: 150: if(a==0)
  3787  3AB6  39 00             	cmp	a, 0
  3788  3AB8  B007              	jnz	l264
  3789                          ;software_iic.c: 151: {
  3790                          ;software_iic.c: 152: PRT1DR &= ~0x20;
  3791  3ABA  41 04 DF          	and	reg[4], 0xDF
  3792                          ;software_iic.c: 153: }
  3793  3ABD  7D 3AC3           	jmp	l265
  3794                          ;			CUR_PP=0 IDX_PP=0 XIO=0 PG=2 
  3795  3AC0                    l264:
  3796                          ;software_iic.c: 154: else
  3797                          ;software_iic.c: 155: {
  3798                          ;software_iic.c: 156: PRT1DR |= 0x20;
  3799  3AC0  43 04 20          	or	reg[4], 0x20
  3800                          ;			CUR_PP=0 IDX_PP=0 XIO=0 PG=2 
  3801  3AC3                    l265:
  3802                          ;software_iic.c: 157: }
  3803                          ;software_iic.c: 158: delay_us(1);
  3804  3AC3  50 01             	mov	a, 1
  3805  3AC5  57 00             	mov	x, 0
  3806  3AC7  7C 3BC3           	call	_delay_us
  3807                          ;software_iic.c: 159: PRT1DR |= 0x80;
  3808  3ACA  43 04 80          	or	reg[4], 0x80
  3809                          ;software_iic.c: 160: delay_us(1);
  3810  3ACD  50 01             	mov	a, 1
  3811  3ACF  57 00             	mov	x, 0
  3812  3AD1  71 80             	or	f, 0x80	;select multiple RAM page mode
  3813  3AD3  7C 3BC3           	call	_delay_us
  3814                          ;software_iic.c: 161: PRT1DR &= ~0x80;
  3815  3AD6  41 04 7F          	and	reg[4], 0x7F
  3816                          ;software_iic.c: 162: delay_us(1);
  3817  3AD9  50 01             	mov	a, 1
  3818  3ADB  57 00             	mov	x, 0
  3819  3ADD  71 80             	or	f, 0x80	;select multiple RAM page mode
  3820  3ADF  7D 3BC3           	jmp	_delay_us
  3821                          ;software_iic.c: 163: }
  3822                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
  3823  3AE2                    __end_of_Ack_I2c:
  3824                          ; =============== function _Ack_I2c ends ============
  3825                          ; *************** function _SendByte *****************
  3826                          ; Defined at:
  3827                          ;		line 74 in file "./software_iic.c"
  3828                          ; Parameters:
  3829                          ;		c           	reg:    a	type: unsigned char 
  3830                          ; Auto variables:
  3831                          ;		c           	       	type: unsigned char 
  3832                          ;		BitCnt      	       	type: unsigned char 
  3833                          ; Return value:
  3834                          ;		type: void 
  3835                          ;		size: 0
  3836                          ; Registers used:
  3837                          ;		a, x, CUR_PP
  3838                          ; Tracked objects:
  3839                          ;		On entry : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  3840                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  3841                          ;		Unchanged: IDX_PP MVR_PP MVW_PP 
  3842                          ; Data sizes:
  3843                          ;		Autos:    2
  3844                          ;		Params:   0
  3845                          ;		Temp:     1
  3846                          ;		Total:    3
  3847                          ; This function calls:
  3848                          ;		_delay_us
  3849                          ;		_ChangeToRead
  3850                          ;		_ChangeToOD
  3851                          ; This function is called by:
  3852                          ;		_ISendByte
  3853                          ;		_IRcvBytes
  3854                          ; This function uses a non-reentrant model
  3855                          ; 
  3856  007A                    __size_of_SendByte	equ	__end_of_SendByte-_SendByte
  3857                          ;software_iic.c: 73: void SendByte(unsigned char c)
  3858                          ;software_iic.c: 74: {
  3859                          ;			CUR_PP=0 XIO=0 PG=2 
  3860  3AE2                    _SendByte:
  3861                          ;SendByte@c stored from a
  3862  3AE2  53 95             	mov	[??_SendByte^0], a
  3863                          ;software_iic.c: 75: unsigned char BitCnt;
  3864                          ;software_iic.c: 77: for(BitCnt=0;BitCnt<8;BitCnt++)
  3865  3AE4  55 96  00         	mov	[(??_SendByte+1)^0], 0
  3866                          ;			CUR_PP=0 XIO=0 
  3867  3AE7                    l251:
  3868                          ;software_iic.c: 78: {
  3869                          ;software_iic.c: 79: if((c<<BitCnt)&0x80)
  3870  3AE7  5F 97  96         	mov	[(??_SendByte^0+2)], [(??_SendByte+1)^0]
  3871  3AEA  51 95             	mov	a, [??_SendByte^0]
  3872  3AEC  7D 3AF0           	jmp	u453
  3873  3AEF                    u454:
  3874  3AEF  64                	asl	a
  3875  3AF0                    u453:
  3876  3AF0  7A 97             	dec	[(??_SendByte^0+2)]
  3877  3AF2  DFFC              	jnc	u454
  3878  3AF4  21 80             	and	a, 0x80
  3879  3AF6  A007              	jz	l254
  3880                          ;software_iic.c: 80: {
  3881                          ;software_iic.c: 81: PRT1DR |= 0x20;
  3882  3AF8  43 04 20          	or	reg[4], 0x20
  3883                          ;software_iic.c: 82: }
  3884  3AFB  7D 3B01           	jmp	l255
  3885                          ;			CUR_PP=0 XIO=0 
  3886  3AFE                    l254:
  3887                          ;software_iic.c: 83: else
  3888                          ;software_iic.c: 84: {
  3889                          ;software_iic.c: 85: PRT1DR &= ~0x20;
  3890  3AFE  41 04 DF          	and	reg[4], 0xDF
  3891                          ;			CUR_PP=0 XIO=0 
  3892  3B01                    l255:
  3893                          ;software_iic.c: 86: }
  3894                          ;software_iic.c: 87: delay_us(1);
  3895  3B01  50 01             	mov	a, 1
  3896  3B03  57 00             	mov	x, 0
  3897  3B05  71 80             	or	f, 0x80	;select multiple RAM page mode
  3898  3B07  7C 3BC3           	call	_delay_us
  3899                          ;software_iic.c: 88: PRT1DR |= 0x80;
  3900  3B0A  43 04 80          	or	reg[4], 0x80
  3901                          ;software_iic.c: 89: delay_us(1);
  3902  3B0D  50 01             	mov	a, 1
  3903  3B0F  57 00             	mov	x, 0
  3904  3B11  71 80             	or	f, 0x80	;select multiple RAM page mode
  3905  3B13  7C 3BC3           	call	_delay_us
  3906                          ;software_iic.c: 90: PRT1DR &= ~0x80;
  3907  3B16  41 04 7F          	and	reg[4], 0x7F
  3908                          ;software_iic.c: 91: delay_us(1);
  3909  3B19  50 01             	mov	a, 1
  3910  3B1B  57 00             	mov	x, 0
  3911  3B1D  71 80             	or	f, 0x80	;select multiple RAM page mode
  3912  3B1F  7C 3BC3           	call	_delay_us
  3913  3B22  76 96             	inc	[(??_SendByte+1)^0]
  3914  3B24  3C 96  08         	cmp	[(??_SendByte+1)^0], 8
  3915  3B27  CFBF              	jc	l251
  3916                          ;			CUR_PP=0 XIO=0 
  3917                          ;software_iic.c: 92: }
  3918                          ;software_iic.c: 93: ChangeToRead();
  3919  3B29  71 80             	or	f, 0x80	;select multiple RAM page mode
  3920  3B2B  7C 3BB2           	call	_ChangeToRead
  3921                          ;software_iic.c: 94: delay_us(2);
  3922  3B2E  50 02             	mov	a, 2
  3923  3B30  57 00             	mov	x, 0
  3924  3B32  71 80             	or	f, 0x80	;select multiple RAM page mode
  3925  3B34  7C 3BC3           	call	_delay_us
  3926                          ;software_iic.c: 95: PRT1DR |= 0x80;
  3927  3B37  43 04 80          	or	reg[4], 0x80
  3928                          ;software_iic.c: 96: delay_us(1);
  3929  3B3A  50 01             	mov	a, 1
  3930  3B3C  57 00             	mov	x, 0
  3931  3B3E  71 80             	or	f, 0x80	;select multiple RAM page mode
  3932  3B40  7C 3BC3           	call	_delay_us
  3933                          ;software_iic.c: 97: if(PRT1DR&0x20)
  3934  3B43  49 04 20          	tst	reg[4], 32
  3935  3B46  A007              	jz	l256
  3936                          ;software_iic.c: 98: {
  3937                          ;software_iic.c: 99: ack=0;
  3938  3B48  55 6F  00         	mov	[_ack^0], 0
  3939                          ;software_iic.c: 100: }
  3940  3B4B  7D 3B51           	jmp	l257
  3941                          ;			CUR_PP=0 XIO=0 
  3942  3B4E                    l256:
  3943                          ;software_iic.c: 101: else
  3944                          ;software_iic.c: 102: {
  3945                          ;software_iic.c: 103: ack=1;
  3946  3B4E  55 6F  01         	mov	[_ack^0], 1
  3947                          ;			CUR_PP=0 XIO=0 
  3948  3B51                    l257:
  3949                          ;software_iic.c: 104: }
  3950                          ;software_iic.c: 105: ChangeToOD();
  3951  3B51  71 80             	or	f, 0x80	;select multiple RAM page mode
  3952  3B53  7C 3BA3           	call	_ChangeToOD
  3953                          ;software_iic.c: 106: PRT1DR &= ~0x80;
  3954  3B56  41 04 7F          	and	reg[4], 0x7F
  3955  3B59  40                	nop	;#
  3956  3B5A  40                	nop	;#
  3957                          ;software_iic.c: 107: asm("nop");
  3958                          ;software_iic.c: 108: asm("nop");
  3959                          ;software_iic.c: 109: }
  3960                          ;			CUR_PP=0 XIO=0 
  3961  3B5B  7F                	ret
  3962  3B5C                    __end_of_SendByte:
  3963                          ; =============== function _SendByte ends ============
  3964                          ; *************** function _Start_I2c *****************
  3965                          ; Defined at:
  3966                          ;		line 42 in file "./software_iic.c"
  3967                          ; Parameters:
  3968                          ;		None
  3969                          ; Auto variables:
  3970                          ;		None
  3971                          ; Return value:
  3972                          ;		type: void 
  3973                          ;		size: 0
  3974                          ; Registers used:
  3975                          ;		a, x, CUR_PP
  3976                          ; Tracked objects:
  3977                          ;		On entry : CUR_PP=0 IDX_PP? XIO=0 PG=2 MVR_PP? MVW_PP? 
  3978                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  3979                          ;		Unchanged: IDX_PP MVR_PP MVW_PP 
  3980                          ; Data sizes:
  3981                          ;		Autos:    0
  3982                          ;		Params:   0
  3983                          ;		Temp:     0
  3984                          ;		Total:    0
  3985                          ; This function calls:
  3986                          ;		_delay_us
  3987                          ; This function is called by:
  3988                          ;		_ISendByte
  3989                          ;		_IRcvBytes
  3990                          ; This function uses a non-reentrant model
  3991                          ; 
  3992  0025                    __size_of_Start_I2c	equ	__end_of_Start_I2c-_Start_I2c
  3993                          ;software_iic.c: 41: void Start_I2c(void)
  3994                          ;software_iic.c: 42: {
  3995                          ;			CUR_PP=0 XIO=0 PG=2 
  3996  3B5C                    _Start_I2c:
  3997                          ;software_iic.c: 43: PRT1DR |= 0x20;
  3998  3B5C  43 04 20          	or	reg[4], 0x20
  3999                          ;software_iic.c: 44: PRT1DR |= 0x80;
  4000  3B5F  43 04 80          	or	reg[4], 0x80
  4001                          ;software_iic.c: 45: delay_us(2);
  4002  3B62  50 02             	mov	a, 2
  4003  3B64  57 00             	mov	x, 0
  4004  3B66  7C 3BC3           	call	_delay_us
  4005                          ;software_iic.c: 46: PRT1DR &= ~0x20;
  4006  3B69  41 04 DF          	and	reg[4], 0xDF
  4007                          ;software_iic.c: 47: delay_us(1);
  4008  3B6C  50 01             	mov	a, 1
  4009  3B6E  57 00             	mov	x, 0
  4010  3B70  71 80             	or	f, 0x80	;select multiple RAM page mode
  4011  3B72  7C 3BC3           	call	_delay_us
  4012                          ;software_iic.c: 48: PRT1DR &= ~0x80;
  4013  3B75  41 04 7F          	and	reg[4], 0x7F
  4014                          ;software_iic.c: 49: delay_us(1);
  4015  3B78  50 01             	mov	a, 1
  4016  3B7A  57 00             	mov	x, 0
  4017  3B7C  71 80             	or	f, 0x80	;select multiple RAM page mode
  4018  3B7E  7D 3BC3           	jmp	_delay_us
  4019                          ;software_iic.c: 50: }
  4020                          ;			CUR_PP=0 XIO=0 
  4021  3B81                    __end_of_Start_I2c:
  4022                          ; =============== function _Start_I2c ends ============
  4023                          ; *************** function _Stop_I2c *****************
  4024                          ; Defined at:
  4025                          ;		line 58 in file "./software_iic.c"
  4026                          ; Parameters:
  4027                          ;		None
  4028                          ; Auto variables:
  4029                          ;		None
  4030                          ; Return value:
  4031                          ;		type: void 
  4032                          ;		size: 0
  4033                          ; Registers used:
  4034                          ;		a, x, CUR_PP
  4035                          ; Tracked objects:
  4036                          ;		On entry : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  4037                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  4038                          ;		Unchanged: IDX_PP MVR_PP MVW_PP 
  4039                          ; Data sizes:
  4040                          ;		Autos:    0
  4041                          ;		Params:   0
  4042                          ;		Temp:     0
  4043                          ;		Total:    0
  4044                          ; This function calls:
  4045                          ;		_delay_us
  4046                          ; This function is called by:
  4047                          ;		_ISendByte
  4048                          ;		_IRcvBytes
  4049                          ; This function uses a non-reentrant model
  4050                          ; 
  4051  0022                    __size_of_Stop_I2c	equ	__end_of_Stop_I2c-_Stop_I2c
  4052                          ;software_iic.c: 57: void Stop_I2c(void)
  4053                          ;software_iic.c: 58: {
  4054                          ;			CUR_PP=0 XIO=0 PG=2 
  4055  3B81                    _Stop_I2c:
  4056                          ;software_iic.c: 59: PRT1DR &= ~0x20;
  4057  3B81  41 04 DF          	and	reg[4], 0xDF
  4058                          ;software_iic.c: 60: delay_us(1);
  4059  3B84  50 01             	mov	a, 1
  4060  3B86  57 00             	mov	x, 0
  4061  3B88  7C 3BC3           	call	_delay_us
  4062                          ;software_iic.c: 61: PRT1DR |= 0x80;
  4063  3B8B  43 04 80          	or	reg[4], 0x80
  4064                          ;software_iic.c: 62: delay_us(1);
  4065  3B8E  50 01             	mov	a, 1
  4066  3B90  57 00             	mov	x, 0
  4067  3B92  71 80             	or	f, 0x80	;select multiple RAM page mode
  4068  3B94  7C 3BC3           	call	_delay_us
  4069                          ;software_iic.c: 63: PRT1DR |= 0x20;
  4070  3B97  43 04 20          	or	reg[4], 0x20
  4071                          ;software_iic.c: 64: delay_us(1);
  4072  3B9A  50 01             	mov	a, 1
  4073  3B9C  57 00             	mov	x, 0
  4074  3B9E  71 80             	or	f, 0x80	;select multiple RAM page mode
  4075  3BA0  7D 3BC3           	jmp	_delay_us
  4076                          ;software_iic.c: 65: }
  4077                          ;			CUR_PP=0 XIO=0 
  4078  3BA3                    __end_of_Stop_I2c:
  4079                          ; =============== function _Stop_I2c ends ============
  4080                          ; *************** function _ChangeToOD *****************
  4081                          ; Defined at:
  4082                          ;		line 23 in file "./software_iic.c"
  4083                          ; Parameters:
  4084                          ;		None
  4085                          ; Auto variables:
  4086                          ;		None
  4087                          ; Return value:
  4088                          ;		type: void 
  4089                          ;		size: 0
  4090                          ; Registers used:
  4091                          ;		a, x, CUR_PP
  4092                          ; Tracked objects:
  4093                          ;		On entry : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  4094                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  4095                          ;		Unchanged: IDX_PP MVR_PP MVW_PP 
  4096                          ; Data sizes:
  4097                          ;		Autos:    0
  4098                          ;		Params:   0
  4099                          ;		Temp:     0
  4100                          ;		Total:    0
  4101                          ; This function calls:
  4102                          ;		_delay_us
  4103                          ; This function is called by:
  4104                          ;		_SendByte
  4105                          ;		_RcvByte
  4106                          ; This function uses a non-reentrant model
  4107                          ; 
  4108  000F                    __size_of_ChangeToOD	equ	__end_of_ChangeToOD-_ChangeToOD
  4109                          ;software_iic.c: 22: void ChangeToOD(void)
  4110                          ;software_iic.c: 23: {
  4111                          ;			CUR_PP=0 XIO=0 PG=2 
  4112  3BA3                    _ChangeToOD:
  4113                          ;software_iic.c: 24: PRT1DM2 |= (0x20);
  4114  3BA3  43 07 20          	or	reg[7], 0x20
  4115                          ;software_iic.c: 26: PRT1DM0 |= (0x20);
  4116  3BA6  71 10             	or	f, 0x10	; select config register space
  4117  3BA8  43 04 20          	or	reg[4], 0x20
  4118                          ;software_iic.c: 27: delay_us(1);
  4119  3BAB  50 01             	mov	a, 1
  4120  3BAD  57 00             	mov	x, 0
  4121  3BAF  7D 3BC3           	jmp	_delay_us
  4122                          ;software_iic.c: 28: }
  4123                          ;			CUR_PP=0 XIO=0 
  4124  3BB2                    __end_of_ChangeToOD:
  4125                          ; =============== function _ChangeToOD ends ============
  4126                          ; *************** function _ChangeToRead *****************
  4127                          ; Defined at:
  4128                          ;		line 16 in file "./software_iic.c"
  4129                          ; Parameters:
  4130                          ;		None
  4131                          ; Auto variables:
  4132                          ;		None
  4133                          ; Return value:
  4134                          ;		type: void 
  4135                          ;		size: 0
  4136                          ; Registers used:
  4137                          ;		a, x, CUR_PP
  4138                          ; Tracked objects:
  4139                          ;		On entry : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  4140                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  4141                          ;		Unchanged: IDX_PP MVR_PP MVW_PP 
  4142                          ; Data sizes:
  4143                          ;		Autos:    0
  4144                          ;		Params:   0
  4145                          ;		Temp:     0
  4146                          ;		Total:    0
  4147                          ; This function calls:
  4148                          ;		_delay_us
  4149                          ; This function is called by:
  4150                          ;		_SendByte
  4151                          ;		_RcvByte
  4152                          ; This function uses a non-reentrant model
  4153                          ; 
  4154  0011                    __size_of_ChangeToRead	equ	__end_of_ChangeToRead-_ChangeToRead
  4155                          ;software_iic.c: 15: void ChangeToRead(void)
  4156                          ;software_iic.c: 16: {
  4157                          ;			CUR_PP=0 XIO=0 PG=2 
  4158  3BB2                    _ChangeToRead:
  4159                          ;software_iic.c: 17: PRT1DM0 &= ~(0x20);
  4160  3BB2  71 10             	or	f, 0x10	; select config register space
  4161  3BB4  41 04 DF          	and	reg[4], 0xDF
  4162                          ;software_iic.c: 18: PRT1DM2 &= ~(0x20);
  4163  3BB7  70 CF             	and	f, 0xCF	;select user reg space
  4164  3BB9  41 07 DF          	and	reg[7], 0xDF
  4165                          ;software_iic.c: 19: delay_us(1);
  4166  3BBC  50 01             	mov	a, 1
  4167  3BBE  57 00             	mov	x, 0
  4168  3BC0  7D 3BC3           	jmp	_delay_us
  4169                          ;software_iic.c: 20: }
  4170                          ;			CUR_PP=0 XIO=0 
  4171  3BC3                    __end_of_ChangeToRead:
  4172                          ; =============== function _ChangeToRead ends ============
  4173                          ; *************** function _delay_us *****************
  4174                          ; Defined at:
  4175                          ;		line 8 in file "./ht1621b.c"
  4176                          ; Parameters:
  4177                          ;		us          	reg:   xa	type: unsigned int 
  4178                          ; Auto variables:
  4179                          ;		us          	       	type: unsigned int 
  4180                          ; Return value:
  4181                          ;		type: void 
  4182                          ;		size: 0
  4183                          ; Registers used:
  4184                          ;		a, x, CUR_PP
  4185                          ; Tracked objects:
  4186                          ;		On entry : CUR_PP=0 IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  4187                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  4188                          ;		Unchanged: IDX_PP MVR_PP MVW_PP 
  4189                          ; Data sizes:
  4190                          ;		Autos:    2
  4191                          ;		Params:   0
  4192                          ;		Temp:     0
  4193                          ;		Total:    2
  4194                          ; This function calls:
  4195                          ;		Nothing
  4196                          ; This function is called by:
  4197                          ;		_SendBit_1621
  4198                          ;		_SendDataBit_1621
  4199                          ;		_SendCmd
  4200                          ;		_WriteAll_1621
  4201                          ;		_main
  4202                          ;		_ChangeToRead
  4203                          ;		_ChangeToOD
  4204                          ;		_Start_I2c
  4205                          ;		_Stop_I2c
  4206                          ;		_SendByte
  4207                          ;		_RcvByte
  4208                          ;		_Ack_I2c
  4209                          ; This function uses a non-reentrant model
  4210                          ; 
  4211  001E                    __size_of_delay_us	equ	__end_of_delay_us-_delay_us
  4212                          ;ht1621b.c: 7: void delay_us(unsigned int us)
  4213                          ;ht1621b.c: 8: {
  4214                          ;			CUR_PP=0 PG=2 
  4215  3BC3                    _delay_us:
  4216                          ;delay_us@us stored from xa
  4217  3BC3  53 99             	mov	[(??_delay_us^0+1)], a
  4218  3BC5  5A 98             	mov	[??_delay_us^0], x
  4219                          ;ht1621b.c: 9: for (;us>0;us--)
  4220  3BC7  51 98             	mov	a, [??_delay_us^0]
  4221  3BC9  2A 99             	or	a, [(??_delay_us^0+1)]
  4222  3BCB  A012              	jz	l28
  4223                          ;			CUR_PP=0 
  4224  3BCD                    l27:
  4225  3BCD  40                	nop	;#
  4226  3BCE  40                	nop	;#
  4227  3BCF  40                	nop	;#
  4228  3BD0  40                	nop	;#
  4229  3BD1  40                	nop	;#
  4230  3BD2  40                	nop	;#
  4231                          ;ht1621b.c: 10: {
  4232                          ;ht1621b.c: 11: asm ("NOP");
  4233                          ;ht1621b.c: 12: asm ("NOP");
  4234                          ;ht1621b.c: 13: asm ("NOP");
  4235                          ;ht1621b.c: 14: asm ("NOP");
  4236                          ;ht1621b.c: 15: asm ("NOP");
  4237                          ;ht1621b.c: 16: asm ("NOP");
  4238  3BD3  7A 99             	dec	[(??_delay_us^0+1)]
  4239  3BD5  1E 98  00         	sbb	[??_delay_us^0], 0
  4240  3BD8  51 98             	mov	a, [??_delay_us^0]
  4241  3BDA  2A 99             	or	a, [(??_delay_us^0+1)]
  4242  3BDC  BFF0              	jnz	l27
  4243                          ;			CUR_PP=0 
  4244  3BDE                    l28:
  4245                          ;ht1621b.c: 17: }
  4246                          ;ht1621b.c: 18: }
  4247                          ;			CUR_PP=0 
  4248  3BDE  70 CF             	and	f, 0xCF	;select user reg space
  4249  3BE0  7F                	ret
  4250  3BE1                    __end_of_delay_us:
  4251                          ; =============== function _delay_us ends ============
  4252                          ; *************** function _BoardUART *****************
  4253                          ; Defined at:
  4254                          ;		line 12 in file "./boardcommunication.c"
  4255                          ; Parameters:
  4256                          ;		None
  4257                          ; Auto variables:
  4258                          ;		rxdata      	       	type: unsigned char 
  4259                          ; Return value:
  4260                          ;		type: void 
  4261                          ;		size: 0
  4262                          ; Registers used:
  4263                          ;		a, x, TMP_DR0, TMP_DR1, TMP_DR2, TMP_DR3, CUR_PP, IDX_PP, MVR_PP, MVW_PP, mret
  4264                          ; Tracked objects:
  4265                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  4266                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG=2 MVR_PP? MVW_PP? 
  4267                          ;		Unchanged: 
  4268                          ; Data sizes:
  4269                          ;		Autos:    1
  4270                          ;		Params:   0
  4271                          ;		Temp:     2
  4272                          ;		Total:    3
  4273                          ; This function calls:
  4274                          ;		_UART_Board_bReadRxData
  4275                          ; This function is called by:
  4276                          ;		Interrupt level 2
  4277                          ; This function uses a non-reentrant model
  4278                          ; 
  4279  0087                    __size_of_BoardUART	equ	__end_of_BoardUART-_BoardUART
  4280                          ;boardcommunication.c: 11: void BoardUART(void )
  4281                          ;boardcommunication.c: 12: {
  4282                          ;			PG=2 
  4283  3BE1                    _BoardUART:
  4284                          ;boardcommunication.c: 13: unsigned char rxdata;
  4285                          ;boardcommunication.c: 15: rxdata = UART_Board_bReadRxData();
  4286  3BE1  70 CF             	and	f, 0xCF	;select user reg space
  4287  3BE3  7C 2D9E           	call	_UART_Board_bReadRxData
  4288  3BE6  62 D0 00          	mov	reg[208], 0
  4289  3BE9  53 A4             	mov	[??_BoardUART^0], a
  4290                          ; BoardUART@rxdata loaded to a
  4291  3BEB  51 A4             	mov	a, [??_BoardUART^0]
  4292                          ;boardcommunication.c: 20: if(B2BHeadFlag == 0)
  4293  3BED  3C 57  00         	cmp	[_B2BHeadFlag^0], 0
  4294  3BF0  B030              	jnz	l8
  4295                          ;boardcommunication.c: 21: {
  4296                          ;boardcommunication.c: 23: if(B2BDataPtr < 2)
  4297  3BF2  3C 55  02         	cmp	[_B2BDataPtr^0], 2
  4298  3BF5  D00D              	jnc	l9
  4299                          ;boardcommunication.c: 24: {
  4300                          ;boardcommunication.c: 25: myRxUnion.RxBuf[B2BDataPtr] = rxdata;
  4301  3BF7  58 55             	mov	x, [_B2BDataPtr^0]
  4302  3BF9  62 D3 00          	mov	reg[211], 0
  4303  3BFC  54 28             	mov	[x+_myRxUnion], a
  4304                          ;boardcommunication.c: 26: B2BDataPtr ++;
  4305  3BFE  76 55             	inc	[_B2BDataPtr^0]
  4306                          ;boardcommunication.c: 27: }
  4307  3C00  7D 3C0E           	jmp	l10
  4308                          ;			CUR_PP=0 XIO=0 PG=2 
  4309  3C03                    l9:
  4310                          ;boardcommunication.c: 28: else
  4311                          ;boardcommunication.c: 29: {
  4312                          ;boardcommunication.c: 30: myRxUnion.myRxFrame.Head <<= 8;
  4313  3C03  5F 28  29         	mov	[_myRxUnion^0], [(_myRxUnion+1)^0]
  4314  3C06  55 29  00         	mov	[(_myRxUnion+1)^0], 0
  4315                          ;boardcommunication.c: 31: myRxUnion.RxBuf[1] = rxdata;
  4316  3C09  53 29             	mov	[(_myRxUnion+1)^0], a
  4317                          ;boardcommunication.c: 32: B2BDataPtr = 2;
  4318  3C0B  55 55  02         	mov	[_B2BDataPtr^0], 2
  4319                          ;			CUR_PP=0 XIO=0 PG=2 
  4320  3C0E                    l10:
  4321                          ;boardcommunication.c: 33: }
  4322                          ;boardcommunication.c: 36: if(B2BDataPtr == 2 && myRxUnion.myRxFrame.Head == 0x4D44)
  4323  3C0E  3C 55  02         	cmp	[_B2BDataPtr^0], 2
  4324  3C11  B055              	jnz	l12
  4325  3C13  3C 28  4D         	cmp	[_myRxUnion^0], 77
  4326  3C16  B009              	jnz	l11
  4327  3C18  3C 29  44         	cmp	[(_myRxUnion^0+1)], 68
  4328  3C1B  B04B              	jnz	l12
  4329                          ;boardcommunication.c: 37: {
  4330                          ;boardcommunication.c: 38: B2BHeadFlag = 1;
  4331  3C1D  55 57  01         	mov	[_B2BHeadFlag^0], 1
  4332                          ;			CUR_PP=0 XIO=0 PG=2 
  4333  3C20                    l11:
  4334                          ;boardcommunication.c: 39: }
  4335                          ;boardcommunication.c: 40: }
  4336  3C20  7F                	ret
  4337                          ;			CUR_PP=0 XIO=0 PG=2 
  4338  3C21                    l8:
  4339                          ;boardcommunication.c: 41: else
  4340                          ;boardcommunication.c: 42: {
  4341                          ;boardcommunication.c: 43: myRxUnion.RxBuf[B2BDataPtr] = rxdata;
  4342  3C21  58 55             	mov	x, [_B2BDataPtr^0]
  4343  3C23  62 D3 00          	mov	reg[211], 0
  4344  3C26  54 28             	mov	[x+_myRxUnion], a
  4345                          ;boardcommunication.c: 44: if(B2BDataPtr >= (15-1))
  4346  3C28  3C 55  0E         	cmp	[_B2BDataPtr^0], 14
  4347  3C2B  C013              	jc	l13
  4348                          ;boardcommunication.c: 45: {
  4349                          ;boardcommunication.c: 46: B2BHeadFlag = 0;
  4350  3C2D  55 57  00         	mov	[_B2BHeadFlag^0], 0
  4351                          ;boardcommunication.c: 47: B2BDataPtr = 0;
  4352  3C30  55 55  00         	mov	[_B2BDataPtr^0], 0
  4353                          ;boardcommunication.c: 48: myRxUnion.myRxFrame.Length = 0;
  4354  3C33  55 2A  00         	mov	[(_myRxUnion+2)^0], 0
  4355                          ;boardcommunication.c: 49: myRxUnion.myRxFrame.Head = 0;
  4356  3C36  55 28  00         	mov	[_myRxUnion^0], 0
  4357  3C39  55 29  00         	mov	[(_myRxUnion^0+1)], 0
  4358                          ;boardcommunication.c: 50: }
  4359  3C3C  7D 3C41           	jmp	l14
  4360                          ;			CUR_PP=0 IDX_PP=0 XIO=0 PG=2 
  4361  3C3F                    l13:
  4362                          ;boardcommunication.c: 51: else
  4363                          ;boardcommunication.c: 52: {
  4364                          ;boardcommunication.c: 53: B2BDataPtr++;
  4365  3C3F  76 55             	inc	[_B2BDataPtr^0]
  4366                          ;			CUR_PP=0 IDX_PP=0 XIO=0 PG=2 
  4367  3C41                    l14:
  4368                          ;boardcommunication.c: 54: }
  4369                          ;boardcommunication.c: 56: if(B2BDataPtr == (myRxUnion.myRxFrame.Length + 3) && B2BDataPtr >= 4)
  4370  3C41  5F A6  2A         	mov	[(??_BoardUART^0+2)], [(_myRxUnion+2)^0]
  4371  3C44  55 A5  00         	mov	[(??_BoardUART^0+1)], 0
  4372  3C47  06 A6  03         	add	[(??_BoardUART^0+2)], 3
  4373  3C4A  0E A5  00         	adc	[(??_BoardUART^0+1)], 0
  4374  3C4D  51 A5             	mov	a, [(??_BoardUART^0+1)]
  4375  3C4F  39 00             	cmp	a, 0
  4376  3C51  B015              	jnz	l12
  4377  3C53  51 A6             	mov	a, [(??_BoardUART^0+2)]
  4378  3C55  3A 55             	cmp	a, [_B2BDataPtr^0]
  4379  3C57  B00F              	jnz	l12
  4380  3C59  3C 55  04         	cmp	[_B2BDataPtr^0], 4
  4381  3C5C  C00A              	jc	l12
  4382                          ;boardcommunication.c: 57: {
  4383                          ;boardcommunication.c: 58: B2BFrameFlag = 1;
  4384  3C5E  55 56  01         	mov	[_B2BFrameFlag^0], 1
  4385                          ;boardcommunication.c: 59: B2BHeadFlag = 0;
  4386  3C61  55 57  00         	mov	[_B2BHeadFlag^0], 0
  4387                          ;boardcommunication.c: 60: B2BDataPtr = 0;
  4388  3C64  55 55  00         	mov	[_B2BDataPtr^0], 0
  4389                          ;			CUR_PP=0 IDX_PP=0 XIO=0 PG=2 
  4390                          ;			CUR_PP=0 XIO=0 PG=2 
  4391  3C67                    l12:
  4392                          ;boardcommunication.c: 61: }
  4393                          ;boardcommunication.c: 62: }
  4394                          ;boardcommunication.c: 64: }
  4395                          ;			CUR_PP=0 XIO=0 PG=2 
  4396  3C67  7F                	ret
  4397  3C68                    __end_of_BoardUART:
  4398                          ; =============== function _BoardUART ends ============
  4399                          ; *************** function _Timer16ISR *****************
  4400                          ; Defined at:
  4401                          ;		line 40 in file "./main.c"
  4402                          ; Parameters:
  4403                          ;		None
  4404                          ; Auto variables:
  4405                          ;		None
  4406                          ; Return value:
  4407                          ;		type: void 
  4408                          ;		size: 0
  4409                          ; Registers used:
  4410                          ;		a, x, TMP_DR0, TMP_DR1, TMP_DR2, TMP_DR3, CUR_PP, IDX_PP, MVR_PP, MVW_PP, mret
  4411                          ; Tracked objects:
  4412                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  4413                          ;		On exit  : CUR_PP? IDX_PP? XIO=0 PG=2 MVR_PP? MVW_PP? 
  4414                          ;		Unchanged: 
  4415                          ; Data sizes:
  4416                          ;		Autos:    0
  4417                          ;		Params:   0
  4418                          ;		Temp:     2
  4419                          ;		Total:    2
  4420                          ; This function calls:
  4421                          ;		_PWM8_BL_WritePulseWidth
  4422                          ; This function is called by:
  4423                          ;		Interrupt level 2
  4424                          ; This function uses a non-reentrant model
  4425                          ; 
  4426  007E                    __size_of_Timer16ISR	equ	__end_of_Timer16ISR-_Timer16ISR
  4427                          ;main.c: 23: unsigned int LightADCValue;
  4428                          ;main.c: 24: unsigned int DstBackLight;
  4429                          ;main.c: 25: unsigned int CurrentBackLight;
  4430                          ;main.c: 26: unsigned char LightDuty;
  4431                          ;main.c: 28: unsigned char FanUpdateTimer = 24;
  4432                          ;main.c: 29: unsigned char one_sec_timer = 24;
  4433                          ;main.c: 30: unsigned char rh_sample_timer = 24;
  4434                          ;main.c: 31: unsigned char PlasmaTimer = 24;
  4435                          ;main.c: 32: unsigned char LcdUpdateTimer = 12;
  4436                          ;main.c: 33: unsigned char IICTimeOutTimer;
  4437                          ;main.c: 34: unsigned char DataUploadTimer = 48;
  4438                          ;main.c: 35: unsigned char RHSampleStep = 0;
  4439                          ;			PG=2 
  4440  3C68                    _Timer16ISR:
  4441                          ;main.c: 41: if (one_sec_timer) one_sec_timer--;
  4442  3C68  70 CF             	and	f, 0xCF	;select user reg space
  4443  3C6A  62 D0 00          	mov	reg[208], 0
  4444  3C6D  51 87             	mov	a, [_one_sec_timer^0]
  4445  3C6F  A003              	jz	l153
  4446  3C71  7A 87             	dec	[_one_sec_timer^0]
  4447                          ;			CUR_PP=0 XIO=0 PG=2 
  4448  3C73                    l153:
  4449                          ;main.c: 42: if (rh_sample_timer) rh_sample_timer--;
  4450  3C73  51 8A             	mov	a, [_rh_sample_timer^0]
  4451  3C75  A003              	jz	l154
  4452  3C77  7A 8A             	dec	[_rh_sample_timer^0]
  4453                          ;			CUR_PP=0 XIO=0 PG=2 
  4454  3C79                    l154:
  4455                          ;main.c: 43: if (FanUpdateTimer) FanUpdateTimer--;
  4456  3C79  51 84             	mov	a, [_FanUpdateTimer^0]
  4457  3C7B  A003              	jz	l155
  4458  3C7D  7A 84             	dec	[_FanUpdateTimer^0]
  4459                          ;			CUR_PP=0 XIO=0 PG=2 
  4460  3C7F                    l155:
  4461                          ;main.c: 44: if (PlasmaTimer) PlasmaTimer--;
  4462  3C7F  51 86             	mov	a, [_PlasmaTimer^0]
  4463  3C81  A003              	jz	l156
  4464  3C83  7A 86             	dec	[_PlasmaTimer^0]
  4465                          ;			CUR_PP=0 XIO=0 PG=2 
  4466  3C85                    l156:
  4467                          ;main.c: 45: if (LcdUpdateTimer) LcdUpdateTimer--;
  4468  3C85  51 85             	mov	a, [_LcdUpdateTimer^0]
  4469  3C87  A003              	jz	l157
  4470  3C89  7A 85             	dec	[_LcdUpdateTimer^0]
  4471                          ;			CUR_PP=0 XIO=0 PG=2 
  4472  3C8B                    l157:
  4473                          ;main.c: 46: if (IICTimeOutTimer) IICTimeOutTimer--;
  4474  3C8B  51 5F             	mov	a, [_IICTimeOutTimer^0]
  4475  3C8D  A003              	jz	l158
  4476  3C8F  7A 5F             	dec	[_IICTimeOutTimer^0]
  4477                          ;			CUR_PP=0 XIO=0 PG=2 
  4478  3C91                    l158:
  4479                          ;main.c: 47: if (RecTimeoutTimer) RecTimeoutTimer--;
  4480  3C91  51 6B             	mov	a, [_RecTimeoutTimer^0]
  4481  3C93  A003              	jz	l159
  4482  3C95  7A 6B             	dec	[_RecTimeoutTimer^0]
  4483                          ;			CUR_PP=0 XIO=0 PG=2 
  4484  3C97                    l159:
  4485                          ;main.c: 48: if (DataUploadTimer) DataUploadTimer--;
  4486  3C97  51 83             	mov	a, [_DataUploadTimer^0]
  4487  3C99  A003              	jz	l160
  4488  3C9B  7A 83             	dec	[_DataUploadTimer^0]
  4489                          ;			CUR_PP=0 XIO=0 PG=2 
  4490  3C9D                    l160:
  4491                          ;main.c: 50: if (DstBackLight >= (CurrentBackLight + 3))
  4492  3C9D  5F A4  49         	mov	[??_Timer16ISR^0], [_CurrentBackLight^0]
  4493  3CA0  5F A5  4A         	mov	[(??_Timer16ISR^0+1)], [(_CurrentBackLight+1)^0]
  4494  3CA3  06 A5  03         	add	[(??_Timer16ISR^0+1)], 3
  4495  3CA6  0E A4  00         	adc	[??_Timer16ISR^0], 0
  4496  3CA9  51 4C             	mov	a, [(_DstBackLight^0+1)]
  4497  3CAB  3A A5             	cmp	a, [(??_Timer16ISR^0+1)]
  4498  3CAD  51 4B             	mov	a, [_DstBackLight^0]
  4499  3CAF  1A A4             	sbb	a, [??_Timer16ISR^0]
  4500  3CB1  C00F              	jc	l161
  4501                          ;main.c: 51: {
  4502                          ;main.c: 52: CurrentBackLight += 3;
  4503  3CB3  06 4A  03         	add	[(_CurrentBackLight^0+1)], 3
  4504  3CB6  0E 49  00         	adc	[_CurrentBackLight^0], 0
  4505                          ;main.c: 53: LightDuty = CurrentBackLight;
  4506  3CB9  5F 61  4A         	mov	[_LightDuty^0], [(_CurrentBackLight+1)^0]
  4507                          ;main.c: 54: PWM8_BL_WritePulseWidth(LightDuty);
  4508  3CBC  51 61             	mov	a, [_LightDuty^0]
  4509  3CBE  7D 2C13           	jmp	_PWM8_BL_WritePulseWidth
  4510                          ;main.c: 55: }
  4511                          ;			CUR_PP=0 XIO=0 PG=2 
  4512  3CC1                    l161:
  4513                          ;main.c: 56: else
  4514                          ;main.c: 57: {
  4515                          ;main.c: 58: if ((DstBackLight + 3) <= CurrentBackLight)
  4516  3CC1  5F A4  4B         	mov	[??_Timer16ISR^0], [_DstBackLight^0]
  4517  3CC4  5F A5  4C         	mov	[(??_Timer16ISR^0+1)], [(_DstBackLight+1)^0]
  4518  3CC7  06 A5  03         	add	[(??_Timer16ISR^0+1)], 3
  4519  3CCA  0E A4  00         	adc	[??_Timer16ISR^0], 0
  4520  3CCD  51 4A             	mov	a, [(_CurrentBackLight^0+1)]
  4521  3CCF  3A A5             	cmp	a, [(??_Timer16ISR^0+1)]
  4522  3CD1  51 49             	mov	a, [_CurrentBackLight^0]
  4523  3CD3  1A A4             	sbb	a, [??_Timer16ISR^0]
  4524  3CD5  C00F              	jc	l162
  4525                          ;main.c: 59: {
  4526                          ;main.c: 60: CurrentBackLight -= 3;
  4527  3CD7  16 4A  03         	sub	[(_CurrentBackLight^0+1)], 3
  4528  3CDA  1E 49  00         	sbb	[_CurrentBackLight^0], 0
  4529                          ;main.c: 61: LightDuty = CurrentBackLight;
  4530  3CDD  5F 61  4A         	mov	[_LightDuty^0], [(_CurrentBackLight+1)^0]
  4531                          ;main.c: 62: PWM8_BL_WritePulseWidth(LightDuty);
  4532  3CE0  51 61             	mov	a, [_LightDuty^0]
  4533  3CE2  7D 2C13           	jmp	_PWM8_BL_WritePulseWidth
  4534                          ;			XIO=0 PG=2 
  4535                          ;			XIO=0 PG=2 
  4536  3CE5                    l162:
  4537                          ;main.c: 63: }
  4538                          ;main.c: 64: }
  4539                          ;main.c: 65: }
  4540                          ;			XIO=0 PG=2 
  4541  3CE5  7F                	ret
  4542  3CE6                    __end_of_Timer16ISR:
  4543                          ; =============== function _Timer16ISR ends ============
  4544                          ; *************** function _SensorUART *****************
  4545                          ; Defined at:
  4546                          ;		line 14 in file "./particlesensor.c"
  4547                          ; Parameters:
  4548                          ;		None
  4549                          ; Auto variables:
  4550                          ;		rxdata      	       	type: unsigned char 
  4551                          ; Return value:
  4552                          ;		type: void 
  4553                          ;		size: 0
  4554                          ; Registers used:
  4555                          ;		a, x, TMP_DR0, TMP_DR1, TMP_DR2, TMP_DR3, CUR_PP, IDX_PP, MVR_PP, MVW_PP, mret
  4556                          ; Tracked objects:
  4557                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  4558                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG=2 MVR_PP? MVW_PP? 
  4559                          ;		Unchanged: 
  4560                          ; Data sizes:
  4561                          ;		Autos:    1
  4562                          ;		Params:   0
  4563                          ;		Temp:     2
  4564                          ;		Total:    3
  4565                          ; This function calls:
  4566                          ;		_UART_Sensor_bReadRxData
  4567                          ; This function is called by:
  4568                          ;		Interrupt level 2
  4569                          ; This function uses a non-reentrant model
  4570                          ; 
  4571  008D                    __size_of_SensorUART	equ	__end_of_SensorUART-_SensorUART
  4572                          ;particlesensor.c: 13: void SensorUART(void )
  4573                          ;particlesensor.c: 14: {
  4574                          ;			PG=2 
  4575  3CE6                    _SensorUART:
  4576                          ;particlesensor.c: 15: unsigned char rxdata;
  4577                          ;particlesensor.c: 16: unsigned char i;
  4578                          ;particlesensor.c: 17: rxdata = UART_Sensor_bReadRxData();
  4579  3CE6  70 CF             	and	f, 0xCF	;select user reg space
  4580  3CE8  7C 2EEE           	call	_UART_Sensor_bReadRxData
  4581  3CEB  62 D0 00          	mov	reg[208], 0
  4582  3CEE  53 A4             	mov	[??_SensorUART^0], a
  4583                          ;particlesensor.c: 26: RecTimeoutTimer = 9;
  4584  3CF0  55 6B  09         	mov	[_RecTimeoutTimer^0], 9
  4585                          ; SensorUART@rxdata loaded to a
  4586  3CF3  51 A4             	mov	a, [??_SensorUART^0]
  4587                          ;particlesensor.c: 28: if(HeadFlag == 0)
  4588  3CF5  3C 5C  00         	cmp	[_HeadFlag^0], 0
  4589  3CF8  B030              	jnz	l195
  4590                          ;particlesensor.c: 29: {
  4591                          ;particlesensor.c: 31: if(DataPtr < 2)
  4592  3CFA  3C 59  02         	cmp	[_DataPtr^0], 2
  4593  3CFD  D00D              	jnc	l196
  4594                          ;particlesensor.c: 32: {
  4595                          ;particlesensor.c: 33: MyPMSUnion.PMRxBuf[DataPtr] = rxdata;
  4596  3CFF  58 59             	mov	x, [_DataPtr^0]
  4597  3D01  62 D3 00          	mov	reg[211], 0
  4598  3D04  54 00             	mov	[x+_MyPMSUnion], a
  4599                          ;particlesensor.c: 34: DataPtr ++;
  4600  3D06  76 59             	inc	[_DataPtr^0]
  4601                          ;particlesensor.c: 35: }
  4602  3D08  7D 3D16           	jmp	l197
  4603                          ;			CUR_PP=0 XIO=0 PG=2 
  4604  3D0B                    l196:
  4605                          ;particlesensor.c: 36: else
  4606                          ;particlesensor.c: 37: {
  4607                          ;particlesensor.c: 38: MyPMSUnion.MyPMFrame.Head <<= 8;
  4608  3D0B  5F 00  01         	mov	[_MyPMSUnion^0], [(_MyPMSUnion+1)^0]
  4609  3D0E  55 01  00         	mov	[(_MyPMSUnion+1)^0], 0
  4610                          ;particlesensor.c: 39: MyPMSUnion.PMRxBuf[1] = rxdata;
  4611  3D11  53 01             	mov	[(_MyPMSUnion+1)^0], a
  4612                          ;particlesensor.c: 40: DataPtr = 2;
  4613  3D13  55 59  02         	mov	[_DataPtr^0], 2
  4614                          ;			CUR_PP=0 XIO=0 PG=2 
  4615  3D16                    l197:
  4616                          ;particlesensor.c: 41: }
  4617                          ;particlesensor.c: 44: if(DataPtr == 2 && MyPMSUnion.MyPMFrame.Head == 0x424d)
  4618  3D16  3C 59  02         	cmp	[_DataPtr^0], 2
  4619  3D19  B058              	jnz	l199
  4620  3D1B  3C 00  42         	cmp	[_MyPMSUnion^0], 66
  4621  3D1E  B009              	jnz	l198
  4622  3D20  3C 01  4D         	cmp	[(_MyPMSUnion^0+1)], 77
  4623  3D23  B04E              	jnz	l199
  4624                          ;particlesensor.c: 45: {
  4625                          ;particlesensor.c: 46: HeadFlag = 1;
  4626  3D25  55 5C  01         	mov	[_HeadFlag^0], 1
  4627                          ;			CUR_PP=0 XIO=0 PG=2 
  4628  3D28                    l198:
  4629                          ;particlesensor.c: 47: }
  4630                          ;particlesensor.c: 48: }
  4631  3D28  7F                	ret
  4632                          ;			CUR_PP=0 XIO=0 PG=2 
  4633  3D29                    l195:
  4634                          ;particlesensor.c: 49: else
  4635                          ;particlesensor.c: 50: {
  4636                          ;particlesensor.c: 51: MyPMSUnion.PMRxBuf[DataPtr] = rxdata;
  4637  3D29  58 59             	mov	x, [_DataPtr^0]
  4638  3D2B  62 D3 00          	mov	reg[211], 0
  4639  3D2E  54 00             	mov	[x+_MyPMSUnion], a
  4640                          ;particlesensor.c: 52: if(DataPtr >= (40-1))
  4641  3D30  3C 59  27         	cmp	[_DataPtr^0], 39
  4642  3D33  C016              	jc	l200
  4643                          ;particlesensor.c: 53: {
  4644                          ;particlesensor.c: 54: HeadFlag = 0;
  4645  3D35  55 5C  00         	mov	[_HeadFlag^0], 0
  4646                          ;particlesensor.c: 55: DataPtr = 0;
  4647  3D38  55 59  00         	mov	[_DataPtr^0], 0
  4648                          ;particlesensor.c: 56: MyPMSUnion.MyPMFrame.Length = 0;
  4649  3D3B  55 02  00         	mov	[(_MyPMSUnion+2)^0], 0
  4650  3D3E  55 03  00         	mov	[((_MyPMSUnion+2)^0+1)], 0
  4651                          ;particlesensor.c: 57: MyPMSUnion.MyPMFrame.Head = 0;
  4652  3D41  55 00  00         	mov	[_MyPMSUnion^0], 0
  4653  3D44  55 01  00         	mov	[(_MyPMSUnion^0+1)], 0
  4654                          ;particlesensor.c: 58: }
  4655  3D47  7D 3D4C           	jmp	l201
  4656                          ;			CUR_PP=0 IDX_PP=0 XIO=0 PG=2 
  4657  3D4A                    l200:
  4658                          ;particlesensor.c: 59: else
  4659                          ;particlesensor.c: 60: {
  4660                          ;particlesensor.c: 61: DataPtr++;
  4661  3D4A  76 59             	inc	[_DataPtr^0]
  4662                          ;			CUR_PP=0 IDX_PP=0 XIO=0 PG=2 
  4663  3D4C                    l201:
  4664                          ;particlesensor.c: 62: }
  4665                          ;particlesensor.c: 64: if(DataPtr == (MyPMSUnion.MyPMFrame.Length + 4) && DataPtr >= 6)
  4666  3D4C  5F A5  02         	mov	[(??_SensorUART^0+1)], [(_MyPMSUnion+2)^0]
  4667  3D4F  5F A6  03         	mov	[(??_SensorUART^0+2)], [(_MyPMSUnion+3)^0]
  4668  3D52  06 A6  04         	add	[(??_SensorUART^0+2)], 4
  4669  3D55  0E A5  00         	adc	[(??_SensorUART^0+1)], 0
  4670  3D58  51 A5             	mov	a, [(??_SensorUART^0+1)]
  4671  3D5A  39 00             	cmp	a, 0
  4672  3D5C  B015              	jnz	l199
  4673  3D5E  51 A6             	mov	a, [(??_SensorUART^0+2)]
  4674  3D60  3A 59             	cmp	a, [_DataPtr^0]
  4675  3D62  B00F              	jnz	l199
  4676  3D64  3C 59  06         	cmp	[_DataPtr^0], 6
  4677  3D67  C00A              	jc	l199
  4678                          ;particlesensor.c: 65: {
  4679                          ;particlesensor.c: 66: PMSFrameFlag = 1;
  4680  3D69  55 65  01         	mov	[_PMSFrameFlag^0], 1
  4681                          ;particlesensor.c: 67: HeadFlag = 0;
  4682  3D6C  55 5C  00         	mov	[_HeadFlag^0], 0
  4683                          ;particlesensor.c: 68: DataPtr = 0;
  4684  3D6F  55 59  00         	mov	[_DataPtr^0], 0
  4685                          ;			CUR_PP=0 IDX_PP=0 XIO=0 PG=2 
  4686                          ;			CUR_PP=0 XIO=0 PG=2 
  4687  3D72                    l199:
  4688                          ;particlesensor.c: 75: }
  4689                          ;particlesensor.c: 76: }
  4690                          ;particlesensor.c: 77: }
  4691                          ;			CUR_PP=0 XIO=0 PG=2 
  4692  3D72  7F                	ret
  4693  3D73                    __end_of_SensorUART:
  4694  3D73                    ___end_of_c_program_code:
  4695                          
  4696                          	psect	maintext
  4697                          ;Data sizes: Strings 0, constant 28, data 8, bss 131, persistent 0 stack 28
  4698                          ; *************** function _main *****************
  4699                          ; Defined at:
  4700                          ;		line 91 in file "./main.c"
  4701                          ; Parameters:
  4702                          ;		None
  4703                          ; Auto variables:
  4704                          ;		ret         	       	type: unsigned char 
  4705                          ; Return value:
  4706                          ;		type: void 
  4707                          ;		size: 0
  4708                          ; Registers used:
  4709                          ;		a, x, TMP_DR0, TMP_DR1, TMP_DR2, TMP_DR3, CUR_PP, IDX_PP, MVR_PP, MVW_PP, mret
  4710                          ; Tracked objects:
  4711                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  4712                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG=2 MVR_PP? MVW_PP? 
  4713                          ;		Unchanged: 
  4714                          ; Data sizes:
  4715                          ;		Autos:    1
  4716                          ;		Params:   0
  4717                          ;		Temp:     1
  4718                          ;		Total:    2
  4719                          ; This function calls:
  4720                          ;		_Init_IIC
  4721                          ;		_delay_us
  4722                          ;		_HT1621B_Init
  4723                          ;		_PWM8_BL_WritePeriod
  4724                          ;		_PWM8_BL_WritePulseWidth
  4725                          ;		_PWM8_BL_Start
  4726                          ;		_UART_Board_Start
  4727                          ;		_UART_Board_IntCntl
  4728                          ;		_UART_Sensor_Start
  4729                          ;		_UART_Sensor_IntCntl
  4730                          ;		_Timer16_WritePeriod
  4731                          ;		_Timer16_WriteCompareValue
  4732                          ;		_Timer16_EnableInt
  4733                          ;		_Timer16_Start
  4734                          ;		_SAR10_SetClk
  4735                          ;		_SAR10_SetRunMode
  4736                          ;		_SAR10_SetADCChannel
  4737                          ;		_SAR10_DisableInt
  4738                          ;		_SAR10_Start
  4739                          ;		_Si7020Init
  4740                          ;		_LCD_Init
  4741                          ;		_FrameCheck
  4742                          ;		_SAR10_Trigger
  4743                          ;		_SAR10_fIsDataAvailable
  4744                          ;		_SAR10_iGetData
  4745                          ;		_LightRank
  4746                          ;		_Si7020SendCommand
  4747                          ;		_Si7020Read_RH_NHM
  4748                          ;		_CRC8Check
  4749                          ;		_Si7020CalcRH
  4750                          ;		_Si7020Read_Temp_after_RHM
  4751                          ;		_Si7020CalcTemp
  4752                          ;		_LCDOuputAll
  4753                          ;		_B2BSendData
  4754                          ;		_B2BFrameCheck
  4755                          ; This function is called by:
  4756                          ;		Startup code after reset
  4757                          ; This function uses a non-reentrant model
  4758                          ; 
  4759  018D                    __size_of_main	equ	__end_of_main-_main
  4760                          ;main.c: 90: void main(void)
  4761                          ;main.c: 91: {
  4762                          ;			CUR_PP=0 XIO=0 PG=2 
  4763  3D73                    _main:
  4764  3D73  71 01             	or	f, 1	;#
  4765                          ;main.c: 92: unsigned char k;
  4766                          ;main.c: 93: unsigned char ret;
  4767                          ;main.c: 94: unsigned int *p;
  4768                          ;main.c: 95: asm("or  F, 01h") ;
  4769                          ;main.c: 97: RES_WDT = 0;
  4770  3D75  62 E3 00          	mov	reg[227], 0
  4771                          ;main.c: 98: Init_IIC();
  4772  3D78  7C 346B           	call	_Init_IIC
  4773                          ;main.c: 100: delay_us(200);
  4774  3D7B  50 C8             	mov	a, 200
  4775  3D7D  57 00             	mov	x, 0
  4776  3D7F  7C 3BC3           	call	_delay_us
  4777                          ;main.c: 101: HT1621B_Init();
  4778  3D82  71 80             	or	f, 0x80	;select multiple RAM page mode
  4779  3D84  7C 34C0           	call	_HT1621B_Init
  4780                          ;main.c: 104: CurrentBackLight = 3;
  4781  3D87  55 49  00         	mov	[_CurrentBackLight^0], 0
  4782  3D8A  55 4A  03         	mov	[(_CurrentBackLight^0+1)], 3
  4783                          ;main.c: 105: PWM8_BL_WritePeriod(255);
  4784  3D8D  50 FF             	mov	a, 255
  4785  3D8F  71 80             	or	f, 0x80	;select multiple RAM page mode
  4786  3D91  7C 2C10           	call	_PWM8_BL_WritePeriod
  4787                          ;main.c: 106: PWM8_BL_WritePulseWidth(3);
  4788  3D94  50 03             	mov	a, 3
  4789  3D96  7C 2C13           	call	_PWM8_BL_WritePulseWidth
  4790                          ;main.c: 107: PWM8_BL_Start();
  4791  3D99  7C 2C08           	call	_PWM8_BL_Start
  4792                          ;main.c: 111: UART_Board_Start(0x00);
  4793  3D9C  50 00             	mov	a, 0
  4794  3D9E  7C 2D8A           	call	_UART_Board_Start
  4795                          ;main.c: 113: UART_Board_IntCntl(0x01 | 0x00);
  4796  3DA1  50 01             	mov	a, 1
  4797  3DA3  7C 2DB7           	call	_UART_Board_IntCntl
  4798                          ;main.c: 115: UART_Sensor_Start(0x00);
  4799  3DA6  50 00             	mov	a, 0
  4800  3DA8  7C 2EDA           	call	_UART_Sensor_Start
  4801                          ;main.c: 117: UART_Sensor_IntCntl(0x01 | 0x00);
  4802  3DAB  50 01             	mov	a, 1
  4803  3DAD  7C 2F07           	call	_UART_Sensor_IntCntl
  4804                          ;main.c: 119: Timer16_WritePeriod(3200);
  4805  3DB0  50 80             	mov	a, 128
  4806  3DB2  57 0C             	mov	x, 12
  4807  3DB4  7C 2D18           	call	_Timer16_WritePeriod
  4808                          ;main.c: 120: Timer16_WriteCompareValue(3200);
  4809  3DB7  50 80             	mov	a, 128
  4810  3DB9  57 0C             	mov	x, 12
  4811  3DBB  7C 2D1E           	call	_Timer16_WriteCompareValue
  4812                          ;main.c: 121: Timer16_EnableInt();
  4813  3DBE  7C 2D08           	call	_Timer16_EnableInt
  4814                          ;main.c: 122: Timer16_Start();
  4815  3DC1  7C 2D10           	call	_Timer16_Start
  4816                          ;main.c: 126: PMSFrameFlag = 0;
  4817  3DC4  62 D0 00          	mov	reg[208], 0
  4818  3DC7  55 65  00         	mov	[_PMSFrameFlag^0], 0
  4819                          ;main.c: 127: HeadFlag = 0;
  4820  3DCA  55 5C  00         	mov	[_HeadFlag^0], 0
  4821                          ;main.c: 128: DataPtr = 0;
  4822  3DCD  55 59  00         	mov	[_DataPtr^0], 0
  4823                          ;main.c: 130: SAR10_SetClk((0x0A));
  4824  3DD0  50 0A             	mov	a, 10
  4825  3DD2  7C 2CD7           	call	_SAR10_SetClk
  4826                          ;main.c: 131: SAR10_SetRunMode((0x00));
  4827  3DD5  50 00             	mov	a, 0
  4828  3DD7  7C 2CEF           	call	_SAR10_SetRunMode
  4829                          ;main.c: 132: SAR10_SetADCChannel((0x60));
  4830  3DDA  50 60             	mov	a, 96
  4831  3DDC  7C 2C8F           	call	_SAR10_SetADCChannel
  4832                          ;main.c: 133: SAR10_DisableInt();
  4833  3DDF  7C 2C4D           	call	_SAR10_DisableInt
  4834                          ;main.c: 134: SAR10_Start();
  4835  3DE2  7C 2C51           	call	_SAR10_Start
  4836                          ;main.c: 137: Si7020Init();
  4837  3DE5  7C 3079           	call	_Si7020Init
  4838                          ;main.c: 142: LCD_Init();
  4839  3DE8  7C 3057           	call	_LCD_Init
  4840                          ;main.c: 144: RES_WDT = 0;
  4841  3DEB  62 E3 00          	mov	reg[227], 0
  4842                          ;main.c: 145: while(1)
  4843                          ;			CUR_PP=0 XIO=0 
  4844  3DEE                    l172:
  4845                          ;main.c: 146: {
  4846                          ;main.c: 147: if (!RecTimeoutTimer)
  4847  3DEE  51 6B             	mov	a, [_RecTimeoutTimer^0]
  4848  3DF0  B00A              	jnz	l174
  4849                          ;main.c: 148: {
  4850                          ;main.c: 149: PMSFrameFlag = 0;
  4851  3DF2  55 65  00         	mov	[_PMSFrameFlag^0], 0
  4852                          ;main.c: 150: HeadFlag = 0;
  4853  3DF5  55 5C  00         	mov	[_HeadFlag^0], 0
  4854                          ;main.c: 151: DataPtr = 0;
  4855  3DF8  55 59  00         	mov	[_DataPtr^0], 0
  4856                          ;			CUR_PP=0 XIO=0 
  4857  3DFB                    l174:
  4858                          ;main.c: 152: }
  4859                          ;main.c: 154: if (PMSFrameFlag)
  4860  3DFB  51 65             	mov	a, [_PMSFrameFlag^0]
  4861  3DFD  A018              	jz	l175
  4862                          ;main.c: 155: {
  4863                          ;main.c: 156: PMSFrameFlag = 0;
  4864  3DFF  55 65  00         	mov	[_PMSFrameFlag^0], 0
  4865                          ;main.c: 157: if (FrameCheck())
  4866  3E02  71 80             	or	f, 0x80	;select multiple RAM page mode
  4867  3E04  7C 300A           	call	_FrameCheck
  4868  3E07  78                	dec	a
  4869  3E08  C00D              	jc	l175
  4870                          ;main.c: 158: {
  4871                          ;main.c: 159: data_pm2_5 = MyPMSUnion.MyPMFrame.PM2_5_US;
  4872  3E0A  5F 53  06         	mov	[_data_pm2_5^0], [(_MyPMSUnion+6)^0]
  4873  3E0D  5F 54  07         	mov	[(_data_pm2_5+1)^0], [(_MyPMSUnion+7)^0]
  4874                          ;main.c: 160: data_pm1_0 = MyPMSUnion.MyPMFrame.PM1_0_US;
  4875  3E10  5F 51  04         	mov	[_data_pm1_0^0], [(_MyPMSUnion+4)^0]
  4876  3E13  5F 52  05         	mov	[(_data_pm1_0+1)^0], [(_MyPMSUnion+5)^0]
  4877                          ;main.c: 165: }
  4878                          ;			CUR_PP=0 XIO=0 
  4879  3E16                    l175:
  4880                          ;main.c: 169: }
  4881                          ;main.c: 170: }
  4882                          ;main.c: 172: if (!one_sec_timer)
  4883  3E16  51 87             	mov	a, [_one_sec_timer^0]
  4884  3E18  B031              	jnz	l178
  4885                          ;main.c: 173: {
  4886                          ;main.c: 174: one_sec_timer = 24;
  4887  3E1A  55 87  18         	mov	[_one_sec_timer^0], 24
  4888                          ;main.c: 187: MUX_CR2 |= 0X02;
  4889  3E1D  71 10             	or	f, 0x10	; select config register space
  4890  3E1F  43 DA 02          	or	reg[0xDA], 2
  4891                          ;main.c: 188: SAR10_Trigger();
  4892  3E22  71 80             	or	f, 0x80	;select multiple RAM page mode
  4893  3E24  70 CF             	and	f, 0xCF	;select user reg space
  4894  3E26  7C 2C61           	call	_SAR10_Trigger
  4895                          ;main.c: 189: while(SAR10_fIsDataAvailable()==0);
  4896                          ;			XIO=0 PG=2 
  4897  3E29                    l179:
  4898  3E29  7C 2C69           	call	_SAR10_fIsDataAvailable
  4899  3E2C  78                	dec	a
  4900  3E2D  CFFB              	jc	l179
  4901                          ;			XIO=0 PG=2 
  4902                          ;main.c: 190: LightADCValue = SAR10_iGetData();
  4903  3E2F  7C 2C72           	call	_SAR10_iGetData
  4904  3E32  62 D0 00          	mov	reg[208], 0
  4905  3E35  5A 4D             	mov	[_LightADCValue^0], x
  4906  3E37  53 4E             	mov	[(_LightADCValue+1)^0], a
  4907                          ;main.c: 191: MUX_CR2 &= ~0X02;
  4908  3E39  71 10             	or	f, 0x10	; select config register space
  4909  3E3B  41 DA FD          	and	reg[0xDA], 0xFD
  4910                          ;main.c: 197: DstBackLight = LightRank(LightADCValue);
  4911  3E3E  51 4E             	mov	a, [(_LightADCValue^0+1)]
  4912  3E40  58 4D             	mov	x, [_LightADCValue^0]
  4913  3E42  7C 33F3           	call	_LightRank
  4914  3E45  53 4C             	mov	[(_DstBackLight^0+1)], a
  4915  3E47  55 4B  00         	mov	[_DstBackLight^0], 0
  4916                          ;			CUR_PP=0 XIO=0 
  4917  3E4A                    l178:
  4918                          ;main.c: 199: }
  4919                          ;main.c: 202: if(!rh_sample_timer)
  4920  3E4A  51 8A             	mov	a, [_rh_sample_timer^0]
  4921  3E4C  B068              	jnz	l182
  4922                          ;main.c: 203: {
  4923                          ;main.c: 204: rh_sample_timer = 24;
  4924  3E4E  55 8A  18         	mov	[_rh_sample_timer^0], 24
  4925                          ;main.c: 206: if (!RHSampleStep)
  4926  3E51  51 69             	mov	a, [_RHSampleStep^0]
  4927  3E53  B014              	jnz	l183
  4928                          ;main.c: 207: {
  4929                          ;main.c: 208: ret = Si7020SendCommand(0xF5);
  4930  3E55  50 F5             	mov	a, 245
  4931  3E57  71 80             	or	f, 0x80	;select multiple RAM page mode
  4932  3E59  7C 3764           	call	_Si7020SendCommand
  4933  3E5C  53 8B             	mov	[??_main^0], a
  4934                          ;main.c: 209: if(ret)
  4935  3E5E  51 8B             	mov	a, [??_main^0]
  4936  3E60  A054              	jz	l182
  4937                          ;main.c: 210: {
  4938                          ;main.c: 211: RHSampleStep = 1;
  4939  3E62  55 69  01         	mov	[_RHSampleStep^0], 1
  4940                          ;			CUR_PP=0 XIO=0 
  4941                          ;main.c: 212: }
  4942                          ;main.c: 213: }
  4943  3E65  7D 3EB5           	jmp	l182
  4944                          ;			CUR_PP=0 XIO=0 
  4945  3E68                    l183:
  4946                          ;main.c: 214: else
  4947                          ;main.c: 215: {
  4948                          ;main.c: 216: Si7020Read_RH_NHM(RecBuf);
  4949  3E68  50 7E             	mov	a, <(<_RecBuf)
  4950  3E6A  71 80             	or	f, 0x80	;select multiple RAM page mode
  4951  3E6C  7C 344F           	call	_Si7020Read_RH_NHM
  4952                          ;main.c: 217: Si7020Data = *(unsigned int *)RecBuf;
  4953  3E6F  57 7E             	mov	x, <_RecBuf
  4954  3E71  62 D3 00          	mov	reg[211], 0
  4955  3E74  52 00             	mov	a, [x+0]
  4956  3E76  08                	push	a
  4957  3E77  52 01             	mov	a, [x+1]
  4958  3E79  53 50             	mov	[(_Si7020Data^0+1)], a
  4959  3E7B  18                	pop	a
  4960  3E7C  53 4F             	mov	[_Si7020Data^0], a
  4961                          ;main.c: 218: if (CRC8Check())
  4962  3E7E  71 80             	or	f, 0x80	;select multiple RAM page mode
  4963  3E80  7C 3425           	call	_CRC8Check
  4964  3E83  78                	dec	a
  4965  3E84  C00C              	jc	l186
  4966                          ;main.c: 219: {
  4967                          ;main.c: 223: Humidity = Si7020CalcRH(Si7020Data);
  4968  3E86  51 50             	mov	a, [(_Si7020Data^0+1)]
  4969  3E88  58 4F             	mov	x, [_Si7020Data^0]
  4970  3E8A  71 80             	or	f, 0x80	;select multiple RAM page mode
  4971  3E8C  7C 30A4           	call	_Si7020CalcRH
  4972  3E8F  53 5E             	mov	[_Humidity^0], a
  4973                          ;			CUR_PP=0 XIO=0 
  4974  3E91                    l186:
  4975                          ;main.c: 226: }
  4976                          ;main.c: 228: Si7020Read_Temp_after_RHM(RecBuf);
  4977  3E91  50 7E             	mov	a, <(<_RecBuf)
  4978  3E93  71 80             	or	f, 0x80	;select multiple RAM page mode
  4979  3E95  7C 3086           	call	_Si7020Read_Temp_after_RHM
  4980                          ;main.c: 229: Si7020Data = *(unsigned int *)RecBuf;
  4981  3E98  57 7E             	mov	x, <_RecBuf
  4982  3E9A  62 D3 00          	mov	reg[211], 0
  4983  3E9D  52 00             	mov	a, [x+0]
  4984  3E9F  08                	push	a
  4985  3EA0  52 01             	mov	a, [x+1]
  4986  3EA2  53 50             	mov	[(_Si7020Data^0+1)], a
  4987  3EA4  18                	pop	a
  4988  3EA5  53 4F             	mov	[_Si7020Data^0], a
  4989                          ;main.c: 233: Temperature = Si7020CalcTemp(Si7020Data);
  4990  3EA7  51 50             	mov	a, [(_Si7020Data^0+1)]
  4991  3EA9  58 4F             	mov	x, [_Si7020Data^0]
  4992  3EAB  71 80             	or	f, 0x80	;select multiple RAM page mode
  4993  3EAD  7C 3304           	call	_Si7020CalcTemp
  4994  3EB0  53 6D             	mov	[_Temperature^0], a
  4995                          ;main.c: 236: RHSampleStep = 0;
  4996  3EB2  55 69  00         	mov	[_RHSampleStep^0], 0
  4997                          ;			CUR_PP=0 XIO=0 
  4998                          ;			CUR_PP=0 XIO=0 
  4999  3EB5                    l182:
  5000                          ;main.c: 237: }
  5001                          ;main.c: 261: }
  5002                          ;main.c: 263: if (!LcdUpdateTimer)
  5003  3EB5  51 85             	mov	a, [_LcdUpdateTimer^0]
  5004  3EB7  B009              	jnz	l187
  5005                          ;main.c: 264: {
  5006                          ;main.c: 265: LcdUpdateTimer = 12;
  5007  3EB9  55 85  0C         	mov	[_LcdUpdateTimer^0], 12
  5008                          ;main.c: 266: LCDOuputAll();
  5009  3EBC  71 80             	or	f, 0x80	;select multiple RAM page mode
  5010  3EBE  7C 3141           	call	_LCDOuputAll
  5011                          ;			CUR_PP=0 XIO=0 
  5012  3EC1                    l187:
  5013                          ;main.c: 267: }
  5014                          ;main.c: 269: if (!DataUploadTimer)
  5015  3EC1  51 83             	mov	a, [_DataUploadTimer^0]
  5016  3EC3  B009              	jnz	l188
  5017                          ;main.c: 270: {
  5018                          ;main.c: 271: DataUploadTimer = 48;
  5019  3EC5  55 83  30         	mov	[_DataUploadTimer^0], 48
  5020                          ;main.c: 272: B2BSendData();
  5021  3EC8  71 80             	or	f, 0x80	;select multiple RAM page mode
  5022  3ECA  7C 33B2           	call	_B2BSendData
  5023                          ;			XIO=0 
  5024  3ECD                    l188:
  5025                          ;main.c: 273: }
  5026                          ;main.c: 275: if (B2BFrameFlag)
  5027  3ECD  62 D0 00          	mov	reg[208], 0
  5028  3ED0  51 56             	mov	a, [_B2BFrameFlag^0]
  5029  3ED2  A024              	jz	l189
  5030                          ;main.c: 276: {
  5031                          ;main.c: 277: B2BFrameFlag = 0;
  5032  3ED4  55 56  00         	mov	[_B2BFrameFlag^0], 0
  5033                          ;main.c: 278: if (B2BFrameCheck())
  5034  3ED7  71 80             	or	f, 0x80	;select multiple RAM page mode
  5035  3ED9  7C 347C           	call	_B2BFrameCheck
  5036  3EDC  78                	dec	a
  5037  3EDD  C019              	jc	l189
  5038                          ;main.c: 279: {
  5039                          ;main.c: 282: HeapLife = myRxUnion.myRxFrame.HepaLife;
  5040  3EDF  5F 5D  2F         	mov	[_HeapLife^0], [(_myRxUnion+7)^0]
  5041                          ;main.c: 283: CarbonLife = myRxUnion.myRxFrame.CarbonLife;
  5042  3EE2  5F 58  30         	mov	[_CarbonLife^0], [(_myRxUnion+8)^0]
  5043                          ;main.c: 284: SpeedLvl = myRxUnion.myRxFrame.Speed;
  5044  3EE5  5F 6C  2B         	mov	[_SpeedLvl^0], [(_myRxUnion+3)^0]
  5045                          ;main.c: 285: Odor = myRxUnion.myRxFrame.Odor;
  5046  3EE8  5F 64  2C         	mov	[_Odor^0], [(_myRxUnion+4)^0]
  5047                          ;main.c: 286: Plasma = myRxUnion.myRxFrame.Plasma;
  5048  3EEB  5F 67  2E         	mov	[_Plasma^0], [(_myRxUnion+6)^0]
  5049                          ;main.c: 287: LockStatus = myRxUnion.myRxFrame.Lock;
  5050  3EEE  5F 63  31         	mov	[_LockStatus^0], [(_myRxUnion+9)^0]
  5051                          ;main.c: 288: mode = myRxUnion.myRxFrame.Mode;
  5052  3EF1  5F 71  2D         	mov	[_mode^0], [(_myRxUnion+5)^0]
  5053                          ;main.c: 289: Timer = myRxUnion.myRxFrame.Timer;
  5054  3EF4  5F 6E  32         	mov	[_Timer^0], [(_myRxUnion+10)^0]
  5055                          ;main.c: 290: }
  5056                          ;			CUR_PP=0 XIO=0 
  5057  3EF7                    l189:
  5058                          ;main.c: 295: }
  5059                          ;main.c: 296: }
  5060                          ;main.c: 297: RES_WDT = 0;
  5061  3EF7  62 E3 00          	mov	reg[227], 0
  5062                          ;			CUR_PP=0 XIO=0 
  5063  3EFA  7D 3DEE           	jmp	l172
  5064  3EFD                    ___exit:	;where's that confounded watchdog?
  5065  3EFD  7D 3EFD           	jmp	___exit
  5066  3F00                    __end_of_main:
  5067                          
  5068                          	psect	ramdata0
  5069                          ; =============== function _SensorUART ends ============
  5070  0083                    _DataUploadTimer:
  5071  0083                    	blk	1
  5072  0084                    _FanUpdateTimer:
  5073  0084                    	blk	1
  5074  0085                    _LcdUpdateTimer:
  5075  0085                    	blk	1
  5076  0086                    _PlasmaTimer:
  5077  0086                    	blk	1
  5078  0087                    _one_sec_timer:
  5079  0087                    	blk	1
  5080  0088                    _poly_h:
  5081  0088                    	blk	1
  5082  0089                    _poly_l:
  5083  0089                    	blk	1
  5084  008A                    _rh_sample_timer:
  5085  008A                    	blk	1
  5086                          
  5087                          	psect	romdata0
  5088                          ;initializer for _DataUploadTimer
  5089  0065  30                	db	48
  5090                          ;initializer for _FanUpdateTimer
  5091  0066  18                	db	24
  5092                          ;initializer for _LcdUpdateTimer
  5093  0067  0C                	db	12
  5094                          ;initializer for _PlasmaTimer
  5095  0068  18                	db	24
  5096                          ;initializer for _one_sec_timer
  5097  0069  18                	db	24
  5098                          ;initializer for _poly_h
  5099  006A  98                	db	152
  5100                          ;initializer for _poly_l
  5101  006B  80                	db	128
  5102                          ;initializer for _rh_sample_timer
  5103  006C  18                	db	24
  5104                          
  5105                          	psect	cdata
  5106  3F00                    _DigitSeg:
  5107  3F00  F5                	db	245
  5108  3F01  60                	db	96
  5109  3F02  B6                	db	182
  5110  3F03  F2                	db	242
  5111  3F04  63                	db	99
  5112  3F05  D3                	db	211
  5113  3F06  D7                	db	215
  5114  3F07  70                	db	112
  5115  3F08  F7                	db	247
  5116  3F09  F3                	db	243
  5117  3F0A                    _DigitSegSwap:
  5118  3F0A  5F                	db	95
  5119  3F0B  06                	db	6
  5120  3F0C  6B                	db	107
  5121  3F0D  2F                	db	47
  5122  3F0E  36                	db	54
  5123  3F0F  3D                	db	61
  5124  3F10  7D                	db	125
  5125  3F11  07                	db	7
  5126  3F12  7F                	db	127
  5127  3F13  3F                	db	63
  5128  3F14                    _RankLevel:
  5129  3F14  14                	db	20
  5130  3F15  78                	db	120
  5131  3F16  DC                	db	220
  5132  3F17  40                	db	64
  5133  3F18  00                	db	0
  5134  3F19  00                	db	0
  5135  3F1A  00                	db	0
  5136  3F1B  00                	db	0
  5137                          
  5138                          	psect	bss0
  5139  0000                    _MyPMSUnion:
  5140  0000                    	blk	40
  5141  0028                    _myRxUnion:
  5142  0028                    	blk	15
  5143  0037                    _myTxUnion:
  5144  0037                    	blk	15
  5145  0046                    _DisplayNum:
  5146  0046                    	blk	3
  5147  0049                    _CurrentBackLight:
  5148  0049                    	blk	2
  5149  004B                    _DstBackLight:
  5150  004B                    	blk	2
  5151  004D                    _LightADCValue:
  5152  004D                    	blk	2
  5153  004F                    _Si7020Data:
  5154  004F                    	blk	2
  5155  0051                    _data_pm1_0:
  5156  0051                    	blk	2
  5157  0053                    _data_pm2_5:
  5158  0053                    	blk	2
  5159  0055                    _B2BDataPtr:
  5160  0055                    	blk	1
  5161  0056                    _B2BFrameFlag:
  5162  0056                    	blk	1
  5163  0057                    _B2BHeadFlag:
  5164  0057                    	blk	1
  5165  0058                    _CarbonLife:
  5166  0058                    	blk	1
  5167  0059                    _DataPtr:
  5168  0059                    	blk	1
  5169  005A                    _FanFlag:
  5170  005A                    	blk	1
  5171  005B                    _FanUpdateTimeReload:
  5172  005B                    	blk	1
  5173  005C                    _HeadFlag:
  5174  005C                    	blk	1
  5175  005D                    _HeapLife:
  5176  005D                    	blk	1
  5177  005E                    _Humidity:
  5178  005E                    	blk	1
  5179  005F                    _IICTimeOutTimer:
  5180  005F                    	blk	1
  5181  0060                    _LifeFlag:
  5182  0060                    	blk	1
  5183  0061                    _LightDuty:
  5184  0061                    	blk	1
  5185  0062                    _LightLevel:
  5186  0062                    	blk	1
  5187  0063                    _LockStatus:
  5188  0063                    	blk	1
  5189  0064                    _Odor:
  5190  0064                    	blk	1
  5191  0065                    _PMSFrameFlag:
  5192  0065                    	blk	1
  5193  0066                    _PM_Flag:
  5194  0066                    	blk	1
  5195  0067                    _Plasma:
  5196  0067                    	blk	1
  5197  0068                    _PlasmaFlag:
  5198  0068                    	blk	1
  5199  0069                    _RHSampleStep:
  5200  0069                    	blk	1
  5201  006A                    _RH_T_Flag:
  5202  006A                    	blk	1
  5203  006B                    _RecTimeoutTimer:
  5204  006B                    	blk	1
  5205  006C                    _SpeedLvl:
  5206  006C                    	blk	1
  5207  006D                    _Temperature:
  5208  006D                    	blk	1
  5209  006E                    _Timer:
  5210  006E                    	blk	1
  5211  006F                    _ack:
  5212  006F                    	blk	1
  5213  0070                    _data_length:
  5214  0070                    	blk	1
  5215  0071                    _mode:
  5216  0071                    	blk	1
  5217  0072                    _DisplayBuf:
  5218  0072                    	blk	12
  5219  007E                    _RecBuf:
  5220  007E                    	blk	5


HI-TECH Software Macro Assembler (PSoC MCU) V9.61
Symbol Table                                                                                               Thu Jul 09 16:18:16 2015

                  DisplayPMxx@index 0092                      SendByte@BitCnt 0096                     DisplayPMxx@temp 0090  
                      _ChangeToRead 3BB2                         ??_LightRank 008D                    ___awdiv@dividend 0095  
                                 l8 3C21                                   l9 3C03                         _PlasmaTimer 0086  
                        delay_us@us 0098                            _ShowLife 3566                            _SpeedLvl 006C  
                                l10 3C0E                                  l11 3C20                                  l12 3C67  
                                l20 348C                                  l13 3C3F                                  l21 34BD  
                                l14 3C41                                  l40 3914                                  l24 33D2  
                                l17 3484                                  l42 3941                                  l27 3BCD  
                                l35 3906                                  l51 373F                                  l28 3BDE  
                                l45 396E                                  l46 394C                                  l38 3931  
                                l54 3752                                  l47 394F                                  l39 3911  
                                l80 36F6                                  l82 3708                                  l90 35B3  
                                l83 3720                                  l91 35E9                                  l76 3681  
                                l92 35DE                                  l77 36FC                                  l78 36D9  
                                l94 3614                                  l86 3573                                  l79 3701  
                                l95 3617                                  l87 358D                                  l88 3590  
                                l97 3143                          ??_SendByte 0095                __end_of_ChangeToRead 3BC3  
                          _Stop_I2c 3B81                          _Timer16ISR 3C68                  __end_of_Timer16ISR 3CE6  
                        ??_ShowLife 008E                           l500003709 34ED                                 l100 3165  
                               l101 3171                                 l110 31DB                                 l102 3185  
                               l103 318F                                 l200 3D4A                                 l112 31F5  
                               l104 3197                                 l201 3D4C                                 l121 3229  
                               l113 31F8                                 l105 31AE                                 l122 3233  
                               l114 3200                                 l106 31B9                                 l131 3286  
                               l123 323A                                 l115 3227                                 l107 31BC  
                               l108 31CA                                 l220 30A3                                 l204 3015  
                               l141 32D1                                 l133 3296                                 l125 324D  
                               l117 3219                                 l109 31E8                                 l126 3299  
                               l143 32DC                                 l135 32A7                                 l127 3260  
                               l119 3222                                 l207 3020                                 l160 3C9D  
                               l232 34D5                                 l240 3438                                 l224 33AA  
                               l136 32DF                                 l208 3054                                 l161 3CC1  
                               l153 3C73                                 l305 38F8                                 l217 3454  
                               l241 343D                                 l137 32B5                                 l129 3273  
                               l162 3CE5                                 l154 3C79                                 l314 3648  
                               l218 346A                                 l226 312F                                 l155 3C7F  
                               l251 3AE7                                 l323 3A8B                                 l315 3655  
                               l235 34F1                                 l243 344C                                 l139 32C3  
                               l227 3120                                 l156 3C85                                 l324 3AA6  
                               l332 3A4B                                 l172 3DEE                                 l157 3C8B  
                               l317 3AB1                                 l333 3A5D                                 l341 3818  
                               l165 3400                                 l229 3139                                 l158 3C91  
                               l254 3AFE                                 l318 3A86                                 l326 3A67  
                               l262 39A9                                 l510 38A8                                 l342 3827  
                               l238 3425                                 l166 3420                                 l182 3EB5  
                               l174 3DFB                                 l159 3C97                                 l255 3B01  
                               l319 3A81                                 l327 3A46                                 l511 38A3  
                               l335 382E                                 l183 3E68                                 l175 3E16  
                               l256 3B4E                                 l264 3AC0                                 l328 3A40  
                               l336 3814                                 l257 3B51                                 l265 3AC3  
                               l337 3811                                 l506 38E3                                 l346 37E7  
                               l186 3E91                                 l178 3E4A                                 l195 3D29  
                               l259 397E                                 l515 38AD                                 l507 387E  
                               l267 384B                                 l347 37FA                                 l187 3EC1  
                               l179 3E29                                 l196 3D0B                                 l516 38C8  
                               l508 3890                                 l268 385E                                 l188 3ECD  
                               l197 3D16                                 l509 38D3                                 l189 3EF7  
                               l198 3D28                                 l199 3D72                                 l295 3789  
                               l296 378F                                 l393 3528                                 l394 353D  
                               l299 37A6                                 l590 39FA                                 l591 39F0  
                               l586 3A2F                                 l595 3A03                                 l587 39D0  
                               l596 3A15                                 l588 39E0                                 l589 3A23  
                               u303 3242                                 u313 3255                                 u323 3268  
                               u333 327B                                 u343 328E                                 u424 3350  
                               u513 37F6                                 u434 3374                                 u523 3820  
                               u283 34A9                                 u444 30E4                                 u453 3AF0  
                               u293 3679                                 u454 3AEF                                 u463 37C0  
                  SendBit_1621@data 0093                       _one_sec_timer 0087                         IRcvBytes@no 008F  
                ??_SendDataBit_1621 0092                                 _ack 006F                                 _abs 38E4  
                       _data_length 0070                          _SensorUART 3CE6                        _Si7020CalcRH 30A4  
                         _Start_I2c 3B5C                   __end_of_Start_I2c 3B81                  __end_of_SensorUART 3D73  
                   ___lbmod@divisor 0091                        DisplayPMxx@k 0094                     ___lbmod@counter 0094  
                     SendBit_1621@i 0094         ??_Si7020Read_Temp_after_RHM 008D           __end_of_Si7020Read_RH_NHM 346B  
                          _delay_us 3BC3                __end_of_Si7020CalcRH 3141                     __end_of_Ack_I2c 3AE2  
             B2BFrameCheck@checksum 008E                    ___awdiv@quotient 0097                   WriteAll_1621@addr 0090  
                     ??_LCDOuputAll 008D                        IRcvBytes@sla 0091                                _Odor 0064  
               ??_Si7020SendCommand 008F                        ___awdiv@sign 0099                                abs@a 0093  
                        ??_delay_us 0098                          _B2BDataPtr 0055                                _main 3D73  
                              _mode 0071                   ___lmul@multiplier 0098                    __end_of_LCD_Init 3079  
                   _LeftRotate$5259 008E                   SendDataBit_1621@i 0094             ___end_of_c_program_code 3D73  
                  ShowHumiTemp@temp 008F                    ___lbmod@dividend 0092                     __end_of_RcvByte 39BD  
                   __end_of_SendCmd 351E                         _Temperature 006D                       LightRank@duty 0090  
                      ___awmod@sign 0097                        _HT1621B_Init 34C0                        ??_Timer16ISR 00A4  
         _Si7020Read_Temp_after_RHM 3086                      ??_ShowHumiTemp 008E                      _FanUpdateTimer 0084  
                  ___lbdiv@dividend 0092                             ?___lmul 0098                          _Si7020Data 004F  
                           ?___wmul 0098                            ??___lmul 00A0                          _Si7020Init 3079  
                             ??_abs 0093                     __end_of___awdiv 38E4                     __end_of___lbdiv 3831  
                          ??___wmul 009A                     __end_of___awmod 3A30                     __end_of___lbmod 3801  
              __end_of_HT1621B_Init 34D3                  __end_of_Si7020Init 3086                        ??_SensorUART 00A4  
                 _Timer16_EnableInt 2D08                     __end_of___lwdiv 3AB6                     __end_of___lwmod 3A6C  
                             IDX_PP 00D3                        ShowLife@life 008E                               CUR_PP 00D0  
                      ShowLife@temp 0090                      ___wmul@product 009C                           _CRC8Check 3425  
                     _SAR10_Trigger 2C61                   __end_of_CRC8Check 344F                        ISendByte@sla 0091  
                   ??_B2BFrameCheck 008D                     ___lwdiv@divisor 0095                    _SAR10_SetRunMode 2CEF  
                   ___lwdiv@counter 009B                    Si7020CalcRH@data 008D                        _RHSampleStep 0069  
                   _DataUploadTimer 0083                    Si7020CalcRH@temp 008F                      ?_WriteAll_1621 008E  
                    SendCmd@command 008D                        _DigitSegSwap 3F0A                               _Timer 006E  
                  _UART_Board_Start 2D8A                     ??_WriteAll_1621 008F             _UART_Sensor_bReadRxData 2EEE  
                  _UART_Board_Write 2E49                 _PWM8_BL_WritePeriod 2C10     Si7020Read_Temp_after_RHM@buffer 008D  
                       _B2BHeadFlag 0057                             _Ack_I2c 3AB6                             _PM_Flag 0066  
                     _LightADCValue 004D           __end_of_Si7020SendCommand 376D              _UART_Board_bReadRxData 2D9E  
                  ___lbdiv@quotient 0093                             _FanFlag 005A                           ??_Ack_I2c 0095  
                           _DataPtr 0059                         _DisplayPMxx 366A                            intlevel2 0003  
              Si7020Read_RH_NHM@ret 008E                    __end_of_Init_IIC 347C                      _Si7020CalcTemp 3304  
                 ShowHumiTemp@index 0090                 __end_of_DisplayPMxx 3721                   ShowHumiTemp@value 008E  
                       RcvByte@retc 0095                   ___wmul@multiplier 009A                        ??_Si7020Init 008D  
           _PWM8_BL_WritePulseWidth 2C13                  _UART_Board_IntCntl 2DB7                             _RcvByte 3975  
                           _SendCmd 34FD              _SAR10_fIsDataAvailable 2C69                          _ChangeToOD 3BA3  
                  __end_of_SendByte 3B5C                          _CarbonLife 0058                      LightRank@light 008D  
                  SensorUART@rxdata 00A4                    ??_Si7020CalcTemp 008D           _Timer16_WriteCompareValue 2D1E  
                __end_of_ChangeToOD 3BB2                         _B2BSendData 33B2        Si7020Read_Temp_after_RHM@ret 008E  
                         _myRxUnion 0028                        _ShowHumiTemp 35A6                     ___awdiv@divisor 0093  
                         ??_RcvByte 0095                           ??_SendCmd 008D                           _myTxUnion 0037  
                   ___awdiv@counter 009A                          LightRank@i 008F                 __end_of_B2BSendData 33F3  
                 _Si7020Read_RH_NHM 344F                    __end_of_ShowLife 35A6                          _data_pm1_0 0051  
                        _data_pm2_5 0053                             ___awdiv 3866                             ___lbdiv 3801  
                           ___awmod 39BD                             ___lbmod 37DD                          IRcvBytes@i 0092  
                   SendBit_1621@cnt 0092                          IRcvBytes@s 0090                            ?___awdiv 0093  
                          ?___awmod 0093                             ___lwdiv 3A6C                 _UART_Sensor_IntCntl 2F07  
                           ___lwmod 3A30            __end_of_SendDataBit_1621 3975                __end_of_ShowHumiTemp 363E  
                          ?___lwdiv 0095                            ?___lwmod 0095                           ??___awdiv 0095  
                         ??___lbdiv 0091                           ??___awmod 0095                           ??___lbmod 0091  
                  __end_of_Stop_I2c 3BA3             Si7020Read_RH_NHM@buffer 008D                           ??___lwdiv 0097  
                         ??___lwmod 0097                              ??_main 008B                          ISendByte@c 0090  
                    _LcdUpdateTimer 0085                    WriteAll_1621@cnt 008E                   Si7020Init@my_data 008D  
                     _Timer16_Start 2D10   __end_of_Si7020Read_Temp_after_RHM 30A4                       ShowLife@index 008F  
                  ___lwmod@dividend 0097                      ??_SendBit_1621 0092              __end_of_Si7020CalcTemp 33B2  
                    _SAR10_iGetData 2C72                      B2BSendData@sum 008E                         ___lbmod@rem 0093  
                      _SAR10_SetClk 2CD7                      __end_of___lmul 3566                    __end_of_delay_us 3BE1  
                   ___lbdiv@counter 0094                    ___lwdiv@dividend 0097                      __end_of___wmul 366A  
                         _RH_T_Flag 006A                             main@ret 008B                     BoardUART@rxdata 00A4  
                      __end_of_main 3F00                           _IRcvBytes 376D                   __end_of_IRcvBytes 37DD  
                         _ISendByte 3831                   __end_of_ISendByte 3866                       _PWM8_BL_Start 2C08  
               _Timer16_WritePeriod 2D18                          ?_IRcvBytes 008F                        _DstBackLight 004B  
                          _LCD_Init 3057                          _DisplayBuf 0072                          _DisplayNum 0046  
                   _rh_sample_timer 008A                          _FrameCheck 300A                  __end_of_FrameCheck 3057  
                            _RecBuf 007E                              _Plasma 0067                              ___exit 3EFD  
                       ??_IRcvBytes 0090                              ___lmul 351E                              ___wmul 363E  
                         _BoardUART 3BE1                       RcvByte@BitCnt 0096                         ??_ISendByte 0090  
               _FanUpdateTimeReload 005B                   __end_of_BoardUART 3C68                          _MyPMSUnion 0000  
                        _LeftRotate 34D3                         _LCDOuputAll 3141                  __end_of_LeftRotate 34FD  
                     _B2BFrameCheck 347C                    ___lwdiv@quotient 0099                   _Si7020SendCommand 3764  
                   ___lwmod@divisor 0095                Si7020SendCommand@cmd 008F                  FrameCheck@checksum 008D  
               __end_of_LCDOuputAll 3304                     ___lwmod@counter 0099                       ??_DisplayPMxx 008E  
                            _poly_h 0088                              _poly_l 0089                         _SAR10_Start 2C51  
                       __end_of_abs 38FD                 ___lmul@multiplicand 009C                          _LightLevel 0062  
                Si7020CalcTemp@data 008D                SendDataBit_1621@data 0093                        _SendBit_1621 38FD  
                Si7020CalcTemp@temp 008F                       _WriteAll_1621 3721                      ??_Si7020CalcRH 008D  
                       ??_BoardUART 00A4                            _HeadFlag 005C               __end_of_B2BFrameCheck 34C0  
               ___wmul@multiplicand 0098                       ??_B2BSendData 008D                __end_of_SendBit_1621 3938  
                        _LockStatus 0063                            _HeapLife 005D                      WriteAll_1621@i 0091  
                    WriteAll_1621@p 008F                            _DigitSeg 3F00                   _UART_Sensor_Start 2EDA  
                      _B2BFrameFlag 0056                      ___lmul@product 00A0                    _SendDataBit_1621 3938  
                         SendByte@c 0095                     _RecTimeoutTimer 006B                 ??_Si7020Read_RH_NHM 008D  
                   _IICTimeOutTimer 005F                        ??_FrameCheck 008D                           _LightDuty 0061  
                         _LightRank 33F3                 SendDataBit_1621@cnt 0092                   __end_of_LightRank 3425  
                  _SAR10_DisableInt 2C4D                            _LifeFlag 0060               __end_of_WriteAll_1621 3764  
                  _CurrentBackLight 0049                            _Init_IIC 346B                           _RankLevel 3F14  
               _SAR10_SetADCChannel 2C8F                        _PMSFrameFlag 0065                    ___awmod@dividend 0095  
                      ??_LeftRotate 008D                            _Humidity 005E           ___start_of_c_program_code 300A  
                   ___awmod@divisor 0093                            _SendByte 3AE2                     ___awmod@counter 0098  
                        _PlasmaFlag 0068  
HI-TECH Software Macro Assembler (PSoC MCU) V9.61
                                                                                                           Thu Jul 09 11:34:27 2015
     1                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     2                          ;;;
     3                          ;;;  M8C.INC -- Microcontroller Device System Declarations
     4                          ;;;
     5                          ;;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
     6                          ;;;
     7                          ;;;  This file provides address constants, bit field masks and a set of macro
     8                          ;;;  facilities for the Cypress Semiconductor CY8C22045 Microcontroller devices.
     9                          ;;;
    10                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    11                          
    12                          ;;=============================================================================
    13                          ;; Definition of abbreviations used in the descriptions below
    14                          ;;  (RW)   The register or bit supports reads and writes
    15                          ;;  (W)    The register or bit is write-only
    16                          ;;  (R)    The register or bit is read-only
    17                          ;;  (#)    Access to the register is bit specific (see the family datasheet)
    18                          ;;  (RC)   The register or bit can be read, but writing a 0 will clear it,
    19                          ;;         writing a 1 will have no effect.
    20                          ;;=============================================================================
    21                          
    22                          ;;=============================================================================
    23                          ;;      System Registers
    24                          ;;=============================================================================
    25                          
    26                          ;----------------------------
    27                          ;  Flag Register Bit Fields
    28                          ;----------------------------
    29  00C0                    FLAG_PGMODE_MASK:  equ 0C0h     ; Paging control for > 256 bytes of RAM
    30  0000                    FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
    31  0040                    FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
    32  0080                    FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
    33  00C0                    FLAG_PGMODE_3:     equ 0C0h       ; Direct to CUR_PP page, indexed to STK_PP page
    34  0000                    FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
    35  0040                    FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
    36  0080                    FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
    37  00C0                    FLAG_PGMODE_11b:   equ 0C0h       ; Same as PGMODE_3
    38  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    39  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    40  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    41  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    42  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    43                          
    44                          
    45                          ;;=============================================================================
    46                          ;;      Register Space, Bank 0
    47                          ;;=============================================================================
    48                          
    49                          ;------------------------------------------------
    50                          ;  Port Registers
    51                          ;  Note: Also see this address range in Bank 1.
    52                          ;------------------------------------------------
    53                          ; Port 0
    54  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    55  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    56  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    57  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    58                          ; Port 1
    59  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    60  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    61  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    62  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    63                          ; Port 2
    64  0008                    PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
    65  0009                    PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
    66  000A                    PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
    67  000B                    PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
    68                          ; Port 3
    69  000C                    PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
    70  000D                    PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
    71  000E                    PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
    72  000F                    PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
    73                          ; Port 4
    74  0010                    PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
    75  0011                    PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
    76  0012                    PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
    77  0013                    PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
    78                          
    79                          ;------------------------------------------------
    80                          ;  Digital PSoC(tm) block Registers
    81                          ;  Note: Also see this address range in Bank 1.
    82                          ;------------------------------------------------
    83                          ; Digital PSoC block 00, Basic Type C
    84  0020                    DBC00DR0:     equ 20h          ; data register 0                          (#)
    85  0021                    DBC00DR1:     equ 21h          ; data register 1                          (W)
    86  0022                    DBC00DR2:     equ 22h          ; data register 2                          (RW)
    87  0023                    DBC00CR0:     equ 23h          ; control & status register 0              (#)
    88                          
    89                          ; Digital PSoC block 01, Basic Type C
    90  0024                    DBC01DR0:     equ 24h          ; data register 0                          (#)
    91  0025                    DBC01DR1:     equ 25h          ; data register 1                          (W)
    92  0026                    DBC01DR2:     equ 26h          ; data register 2                          (RW)
    93  0027                    DBC01CR0:     equ 27h          ; control & status register 0              (#)
    94                          
    95                          ; Digital PSoC block 02, Communications Type C
    96  0028                    DCC02DR0:     equ 28h          ; data register 0                          (#)
    97  0029                    DCC02DR1:     equ 29h          ; data register 1                          (W)
    98  002A                    DCC02DR2:     equ 2Ah          ; data register 2                          (RW)
    99  002B                    DCC02CR0:     equ 2Bh          ; control & status register 0              (#)
   100                          
   101                          ; Digital PSoC block 03, Communications Type C
   102  002C                    DCC03DR0:     equ 2Ch          ; data register 0                          (#)
   103  002D                    DCC03DR1:     equ 2Dh          ; data register 1                          (W)
   104  002E                    DCC03DR2:     equ 2Eh          ; data register 2                          (RW)
   105  002F                    DCC03CR0:     equ 2Fh          ; control & status register 0              (#)
   106                          
   107                          ; Digital PSoC block 10, Basic Type C
   108  0030                    DBC10DR0:     equ 30h          ; data register 0                          (#)
   109  0031                    DBC10DR1:     equ 31h          ; data register 1                          (W)
   110  0032                    DBC10DR2:     equ 32h          ; data register 2                          (RW)
   111  0033                    DBC10CR0:     equ 33h          ; control & status register 0              (#)
   112                          
   113                          ; Digital PSoC block 11, Basic Type C
   114  0034                    DBC11DR0:     equ 34h          ; data register 0                          (#)
   115  0035                    DBC11DR1:     equ 35h          ; data register 1                          (W)
   116  0036                    DBC11DR2:     equ 36h          ; data register 2                          (RW)
   117  0037                    DBC11CR0:     equ 37h          ; control & status register 0              (#)
   118                          
   119                          ; Digital PSoC block 12, Communications Type C
   120  0038                    DCC12DR0:     equ 38h          ; data register 0                          (#)
   121  0039                    DCC12DR1:     equ 39h          ; data register 1                          (W)
   122  003A                    DCC12DR2:     equ 3Ah          ; data register 2                          (RW)
   123  003B                    DCC12CR0:     equ 3Bh          ; control & status register 0              (#)
   124                          
   125                          ; Digital PSoC block 13, Communications Type C
   126  003C                    DCC13DR0:     equ 3Ch          ; data register 0                          (#)
   127  003D                    DCC13DR1:     equ 3Dh          ; data register 1                          (W)
   128  003E                    DCC13DR2:     equ 3Eh          ; data register 2                          (RW)
   129  003F                    DCC13CR0:     equ 3Fh          ; control & status register 0              (#)
   130                          
   131                          ;-------------------------------------
   132                          ;  Analog Control Registers
   133                          ;-------------------------------------
   134  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
   135  00C0                    AMX_IN_ACI3:          equ C0h    ; MASK: column 3 input mux
   136  0030                    AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
   137  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
   138  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
   139                          
   140  0061                    AMUX_CFG:      equ 61h          ; Analog MUX Configuration
   141  0030                    AMUX_CFG_INTCAP:       equ 30h    ;
   142  000E                    AMUX_CFG_MUXCLK:  	  equ 0Eh	 ;
   143  0001                    AMUX_CFG_EN:		  	  equ 01h	 ;
   144                          
   145                          ; old declarations DO NOT USE
   146  0061                    AMUXCFG:      equ 61h          ; Analog MUX Configuration
   147  0030                    AMUXCFG_INTCAP:       equ 30h    ;
   148  000E                    AMUXCFG_MUXCLK:  	  equ 0Eh	 ;
   149  0001                    AMUXCFG_EN:		  	  equ 01h	 ;
   150                          
   151  0062                    PWM_CR:       equ 62h          ; Pulse-Width Modulator Control
   152  0038                    PWM_CR_HIGH:          equ 38h    ; MASK: PWM high time
   153  0006                    PWM_CR_LOW:           equ 06h	 ; MASK: PWM low time
   154  0001                    PWM_CR_EN:            equ 01h	 ; MASK: Enable/Disable PWM function
   155                          
   156  0063                    ARF_CR:       equ 63h          ; Analog Reference Control
   157                          
   158  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus Register           (#)
   159  0080                    CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
   160  0040                    CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
   161  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
   162  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
   163  0008                    CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
   164  0004                    CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
   165  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
   166  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   167                          
   168  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   169  0020                    CMP_CR1_CLDIS1:       equ 20h    ; MASK: Column 1 comparator output latch
   170  0010                    CMP_CR1_CLDIS0:	      equ 10h    ; MASK: Column 0 comparator output latch
   171                          
   172  0068                    ADC0_CR:      equ 68h          ; Analog Column 0 Configuration
   173  0080                    ADC0_CR_CMPST:        equ 80h    ;
   174  0040                    ADC0_CR_LOREN:        equ 40h    ;
   175  0020                    ADC0_CR_SHEN:         equ 20h    ;
   176  0008                    ADC0_CR_CBSRC:        equ 08h    ;
   177  0004                    ADC0_CR_ADCM:         equ 04h    ;
   178  0001                    ADC0_CR_EN:	          equ 01h    ;
   179                          
   180  0069                    ADC1_CR:      equ 69h          ; Analog Column 1 Configuration
   181  0080                    ADC1_CR_CMPST:        equ 80h    ;
   182  0040                    ADC1_CR_LOREN:        equ 40h    ;
   183  0020                    ADC1_CR_SHEN:         equ 20h    ;
   184  0008                    ADC1_CR_CBSRC:        equ 08h    ;
   185  0004                    ADC1_CR_ADCM:         equ 04h    ;
   186  0001                    ADC1_CR_EN:	          equ 01h    ;
   187                          
   188                          ; Continuous Time PSoC block Type E Row 0 Col 0
   189  0072                    ACE00CR1:     equ 72h          ; Control register 1                       (RW)
   190  0073                    ACE00CR2:     equ 73h          ; Control register 2                       (RW)
   191                          
   192                          ; Continuous Time PSoC block Type E Row 0 Col 1
   193  0076                    ACE01CR1:     equ 76h          ; Control register 1                       (RW)
   194  0077                    ACE01CR2:     equ 77h          ; Control register 2                       (RW)
   195                          
   196                          ; Switched Cap PSoC blockType E Row 1 Col 0
   197  0080                    ASE10CR0:     equ 80h          ; Control register 0                       (RW)
   198                          
   199                          ; Switched Cap PSoC blockType E Row 1 Col 1
   200  0084                    ASE11CR0:     equ 84h          ; Control register 0                       (RW)
   201+                         
   202+                         ;-----------------------------------------------
   203+                         ;  Global General Purpose Data Registers
   204+                         ;-----------------------------------------------
   205+ 006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   206+ 006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   207  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   208  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   209                          
   210                          ;------------------------------------------------
   211                          ;  Row Digital Interconnects
   212                          ;
   213                          ;  Note: the following registers are mapped into
   214                          ;  both register bank 0 AND register bank 1.
   215                          ;------------------------------------------------
   216                          
   217  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   218  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   219  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   220  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   221  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   222  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   223  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   224                          
   225  00B8                    RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
   226  00B9                    RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
   227  00BA                    RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
   228  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   229  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   230  00BD                    RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
   231  00BE                    RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
   232                          
   233                          ;-----------------------------------------------
   234                          ;  Ram Page Pointers
   235                          ;-----------------------------------------------
   236  00D0                    CUR_PP:      equ 0D0h           ; Current   Page Pointer
   237  00D1                    STK_PP:      equ 0D1h           ; Stack     Page Pointer
   238  00D3                    IDX_PP:      equ 0D3h           ; Index     Page Pointer
   239  00D4                    MVR_PP:      equ 0D4h           ; MVI Read  Page Pointer
   240  00D5                    MVW_PP:      equ 0D5h           ; MVI Write Page Pointer
   241                          
   242                          ;------------------------------------------------
   243                          ;  I2C Configuration Registers
   244                          ;------------------------------------------------
   245  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   246  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   247  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   248  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   249  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   250  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   251  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   252  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   253  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   254  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   255                          
   256  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   257  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   258  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   259  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   260  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   261  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   262  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   263  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   264  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   265                          
   266  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   267                          
   268  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   269  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   270  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   271  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   272  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   273                          
   274                          ;------------------------------------------------
   275                          ;  System and Global Resource Registers
   276                          ;------------------------------------------------
   277  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   278                                                         ; Use INT_MSK0 bit field masks
   279  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   280                                                         ; Use INT_MSK1 bit field masks
   281  00DC                    INT_CLR2:     equ 0DCh          ; Interrupt Clear Register 2               (RW)
   282                                                         ; Use INT_MSK2 bit field masks
   283  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   284                                                         ; Use INT_MSK3 bit field masks
   285                          
   286  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   287  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   288  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   289                          
   290  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   291  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   292  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   293  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   294  0010                    INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
   295  0008                    INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
   296  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   297  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   298  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   299                          
   300  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   301  0080                    INT_MSK1_DCC13:            equ 80h ; MASK: enable/disable DCC13 block interrupt
   302  0040                    INT_MSK1_DCC12:            equ 40h ; MASK: enable/disable DCC12 block interrupt
   303  0020                    INT_MSK1_DBC11:            equ 20h ; MASK: enable/disable DBC11 block interrupt
   304  0010                    INT_MSK1_DBC10:            equ 10h ; MASK: enable/disable DBC10 block interrupt
   305  0008                    INT_MSK1_DCC03:            equ 08h ; MASK: enable/disable DCC03 block interrupt
   306  0004                    INT_MSK1_DCC02:            equ 04h ; MASK: enable/disable DCC02 block interrupt
   307  0002                    INT_MSK1_DBC01:            equ 02h ; MASK: enable/disable DBC01 block interrupt
   308  0001                    INT_MSK1_DBC00:            equ 01h ; MASK: enable/disable DBC00 block interrupt
   309                          
   310  00DF                    INT_MSK2:     equ DFh			; Custom block Mask Register			   (RW)
   311  0010                    INT_MSK2_SARADC:           equ 10h ; MASK: enable/disable SARADC block interrupt
   312  0020                    INT_MSK2_CSD0:             equ 20h ; MASK: enable/disable CSD0 block interrupt
   313  0040                    INT_MSK2_CSD1:             equ 40h ; MASK: enable/disable CSD1 block interrupt
   314  0080                    INT_MSK2_RTC:              equ 80h ; MASK: enable/disable RTC block interrupt
   315                          
   316  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   317  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   318                          
   319                          ;------------------------------------------------------
   320                          ;  MAC Registers
   321                          ;------------------------------------------------------
   322                          
   323  00E8                    MUL0_X:       equ 0E8h          ; Multiply Input X Register                (W)
   324  00E9                    MUL0_Y:       equ 0E9h          ; Multiply Input Y Register                (W)
   325  00EA                    MUL0_DH:      equ 0EAh          ; Multiply Result High Byte Register       (R)
   326  00EB                    MUL0_DL:      equ 0EBh          ; Multiply Result Low Byte Register        (R)
   327                          
   328  00EC                    ACC0_DR1:     equ 0ECh          ; Accumulator Data Register 1              (RW)
   329  00ED                    ACC0_DR0:     equ 0EDh          ; Accumulator Data Register 0              (RW)
   330  00EE                    ACC0_DR3:     equ 0EEh          ; Accumulator Data Register 3              (RW)
   331  00EF                    ACC0_DR2:     equ 0EFh          ; Accumulator Data Register 2              (RW)
   332                          
   333                          ; DECIMATOR Control Registers
   334  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   335  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   336                          
   337                          ;------------------------------------------------------
   338                          ;  System Status and Control Registers
   339                          ;
   340                          ;  Note: The following registers are mapped into both
   341                          ;        register bank 0 AND register bank 1.
   342                          ;------------------------------------------------------
   343  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   344                                                             ; Use FLAG_ masks defined at top of file
   345                          
   346  00FD                    DAC_D:        equ 0FDh		   ; DAC Data Register                        (RW)
   347                          
   348  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   349  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: flag, Internal Reset Status bit
   350  0010                    CPU_SCR1_SLIMO:         equ 10h	   ; MASK: Slow IMO (internal main osc) enable
   351  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   352  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   353  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   354                          
   355  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   356  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   357  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   358  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   359  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   360  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   361                          
   362                          ;------------------------------------------------------
   363                          ;  Neon Capsense Digital Control Registers
   364                          ;------------------------------------------------------
   365  0050                    CSD0_DR0_L:				equ 50h		; Capsense 0 data low 0				(RW)
   366  0054                    CSD0_DR0_H:				equ 54h		; Capsense 0 data high 0			(RW)
   367  0058                    CSD1_DR0_L:				equ 58h		; Capsense 1 data low 0				(RW)
   368  005C                    CSD1_DR0_H:				equ 5Ch		; Capsense 1 data high 0			(RW)
   369  0051                    CSD0_DR1_L:				equ 51h		; Capsense 0 data low 1				(RW)
   370  0055                    CSD0_DR1_H:				equ 55h		; Capsense 0 data high 1			(RW)
   371  0059                    CSD1_DR1_L:				equ 59h		; Capsense 1 data low 1				(RW)
   372  005D                    CSD1_DR1_H:				equ 5Dh		; Capsense 1 data high 1			(RW)
   373  0052                    CSD0_CNT_L:				equ 52h		; Capsense 0 counter low			(RW)
   374  0056                    CSD0_CNT_H:				equ 56h		; Capsense 0 counter high			(RW)
   375  005A                    CSD1_CNT_L:				equ 5Ah		; Capsense 1 counter low			(RW)
   376  005E                    CSD1_CNT_H:				equ	5Eh		; Capsense 1 counter high			(RW)
   377  0053                    CSD0_CR0:				equ 53h		; Capsense 0 control 0				(RW)
   378  005B                    CSD1_CR0:				equ 5Bh		; Capsense 1 control 0				(RW)
   379  0057                    CSD0_CR1:				equ 57h		; Capsense 0 control 1				(RW)
   380  005F                    CSD1_CR1:				equ 5Fh		; Capsense 1 control 1				(RW)
   381                          
   382                          ;------------------------------------------------------
   383                          ;  Neon Analog Registers
   384                          ;------------------------------------------------------
   385  0065                    ASY_CR:					equ 65h		; Analog Synchronization Control	(RW)
   386  006A                    ADC_DH:					equ 6Ah		; ADC data high						(RW)
   387  006B                    ADC_DL:					equ 6Bh		; ADC data low						(RW)
   388  00C8                    PWMVREF0:				equ C8h		; PWM Voltage Reference 0			(RW)
   389  00C9                    PWMVREF1:				equ C9h		; PWM Voltage Reference 1			(RW)
   390  00CB                    PWMSRC:					equ CBh		; PWM Source						(RW)
   391  00CA                    IDACMODE:				equ CAh		; IDAC Mode							(RW)
   392  00FC                    IDACR_D:				equ FCh		; Analog Mux DAC data 0				(RW)
   393  00FD                    IDACL_D:				equ FDh		; Analog Mux DAC data 1				(RW)
   394                          
   395                          ;------------------------------------------------------
   396                          ;  Neon Digital Registers
   397                          ;------------------------------------------------------
   398  00B7                    RDI0DSM:				equ B7h		; Row Digital Interconnect input select 0	(RW)
   399  00BF                    RDI1DSM:				equ BFh		; Row Digital Interconnect input select 1	(RW)
   400                          
   401                          ;------------------------------------------------------
   402                          ;  Neon Test Registers
   403                          ;------------------------------------------------------
   404  00CC                    TSCR0:					equ CCh		; Tsource 0							(RW)
   405  00CD                    TSCMPH:					equ CDh		; TSCMP high						(RW)
   406  00CE                    TSCMPL:					equ CEh		; TSCMP low							(RW)
   407  00CF                    TSCR1:					equ CFh		; Tsource 1							(RW)
   408                          
   409                          ;;=============================================================================
   410                          ;;      Register Space, Bank 1
   411                          ;;=============================================================================
   412                          
   413                          ;------------------------------------------------
   414                          ;  Port Registers
   415                          ;  Note: Also see this address range in Bank 0.
   416                          ;------------------------------------------------
   417                          ; Port 0
   418  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   419  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   420  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   421  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   422                          
   423                          ; Port 1
   424  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   425  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   426  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   427  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   428                          
   429                          ; Port 2
   430  0008                    PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
   431  0009                    PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
   432  000A                    PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
   433  000B                    PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
   434                          
   435                          ; Port 3
   436  000C                    PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
   437  000D                    PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
   438  000E                    PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
   439  000F                    PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
   440                          
   441                          ; Port 4
   442  0010                    PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
   443  0011                    PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
   444  0012                    PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
   445  0013                    PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
   446                          
   447                          ;------------------------------------------------
   448                          ;  Digital PSoC(tm) block Registers
   449                          ;  Note: Also see this address range in Bank 0.
   450                          ;------------------------------------------------
   451                          
   452                          ; Digital PSoC block 00, Basic Type C
   453  0020                    DBC00FN:      equ 20h          ; Function Register                        (RW)
   454  0021                    DBC00IN:      equ 21h          ;    Input Register                        (RW)
   455  0022                    DBC00OU:      equ 22h          ;   Output Register                        (RW)
   456  0023                    DBC00CR1:     equ 23h          ;   control & status register 1            (RW)
   457                          
   458                          ; Digital PSoC block 01, Basic Type C
   459  0024                    DBC01FN:      equ 24h          ; Function Register                        (RW)
   460  0025                    DBC01IN:      equ 25h          ;    Input Register                        (RW)
   461  0026                    DBC01OU:      equ 26h          ;   Output Register                        (RW)
   462  0027                    DBC01CR1:     equ 27h          ;   control & status register 1            (RW)
   463                          
   464                          ; Digital PSoC block 02, Communications Type C
   465  0028                    DCC02FN:      equ 28h          ; Function Register                        (RW)
   466  0029                    DCC02IN:      equ 29h          ;    Input Register                        (RW)
   467  002A                    DCC02OU:      equ 2Ah          ;   Output Register                        (RW)
   468  002B                    DBC02CR1:     equ 2Bh          ;   control & status register 1            (RW)
   469                          
   470                          ; Digital PSoC block 03, Communications Type C
   471  002C                    DCC03FN:      equ 2Ch          ; Function Register                        (RW)
   472  002D                    DCC03IN:      equ 2Dh          ;    Input Register                        (RW)
   473  002E                    DCC03OU:      equ 2Eh          ;   Output Register                        (RW)
   474  0029                    DBC03CR1:     equ 29h          ;   control & status register 1            (RW)
   475                          
   476                          ; Digital PSoC block 10, Basic Type C
   477  0030                    DBC10FN:      equ 30h          ; Function Register                        (RW)
   478  0031                    DBC10IN:      equ 31h          ;    Input Register                        (RW)
   479  0032                    DBC10OU:      equ 32h          ;   Output Register                        (RW)
   480  0033                    DBC10CR1:     equ 33h          ;   control & status register 1            (RW)
   481                          
   482                          ; Digital PSoC block 11, Basic Type C
   483  0034                    DBC11FN:      equ 34h          ; Function Register                        (RW)
   484  0035                    DBC11IN:      equ 35h          ;    Input Register                        (RW)
   485  0036                    DBC11OU:      equ 36h          ;   Output Register                        (RW)
   486  0037                    DBC11CR1:     equ 37h          ;   control & status register 1            (RW)
   487                          
   488                          ; Digital PSoC block 12, Communications Type C
   489  0038                    DCC12FN:      equ 38h          ; Function Register                        (RW)
   490  0039                    DCC12IN:      equ 39h          ;    Input Register                        (RW)
   491  003A                    DCC12OU:      equ 3Ah          ;   Output Register                        (RW)
   492  003B                    DBC12CR1:     equ 3Bh          ;   control & status register 1            (RW)
   493                          
   494                          ; Digital PSoC block 13, Communications Type C
   495  003C                    DCC13FN:      equ 3Ch          ; Function Register                        (RW)
   496  003D                    DCC13IN:      equ 3Dh          ;    Input Register                        (RW)
   497  003E                    DCC13OU:      equ 3Eh          ;   Output Register                        (RW)
   498  003F                    DBC13CR1:     equ 3Fh          ;   control & status register 1            (RW)
   499                          
   500                          ;------------------------------------------------
   501                          ;  System and Global Resource Registers
   502                          ;  Note: Also see this address range in Bank 0.
   503                          ;------------------------------------------------
   504                          
   505  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   506  00C0                    CLK_CR0_ACOLUMN_3:    equ C0h    ; MASK: Specify clock for analog cloumn
   507  0030                    CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
   508  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   509  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   510                          
   511  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   512  0018                    CLK_CR1_ACLK1:        equ 18h    ; MASK: Digital PSoC block for analog source
   513  0003                    CLK_CR1_ACLK0:        equ 03h    ; MASK: Digital PSoC block for analog source
   514                          
   515  0003                    CLK_CR1_ACLK2:        equ 03h    ; Deprecated do not use
   516                          
   517  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   518  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   519                          
   520  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   521  000F                    AMD_CR0_AMOD0:        equ 0Fh    ; MASK: Modulation source for analog column 0
   522                          
   523  0064                    CMP_GO_EN:    equ 64h          ; Comparator Bus To Global Out Enable      (RW)
   524  0080                    CMP_GO_EN_GOO5:       equ 80h    ; MASK: Selected Col 1 signal to GOO5
   525  0040                    CMP_GO_EN_GOO1:       equ 40h    ; MASK: Selected Col 1 signal to GOO1
   526  0030                    CMP_GO_EN_SEL1:       equ 30h    ; MASK: Column 1 Signal Select
   527  0008                    CMP_GO_EN_GOO4:       equ 08h    ; MASK: Selected Col 0 signal to GOO4
   528  0004                    CMP_GO_EN_GOO0:       equ 04h    ; MASK: Selected Col 0 signal to GOO0
   529  0003                    CMP_GO_EN_SEL0:       equ 03h    ; MASK: Column 0 Signal Select
   530                          
   531  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   532  000F                    AMD_CR1_AMOD1:        equ 0Fh    ; MASK: Modulation ctrl for analog column 1
   533                          
   534  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   535  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   536  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   537                          
   538  006B                    CLK_CR3:      equ 6Bh          ; Analog Clock Source Control Register 3   (RW)
   539  0040                    CLK_CR3_SYS1:         equ 40h    ; MASK: Analog Clock 1 selection
   540  0030                    CLK_CR3_DIVCLK1:      equ 30h    ; MASK: Analog Clock 1 divider
   541  0004                    CLK_CR3_SYS0:         equ 04h    ; MASK: Analog Clock 0 selection
   542  0003                    CLK_CR3_DIVCLK0:      equ 03h    ; MASK: Analog Clock 0 divider
   543                          
   544                          ;------------------------------------------------
   545                          ;  Global Digital Interconnects
   546                          ;------------------------------------------------
   547                          
   548  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   549  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   550  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   551  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   552                          
   553  00A0                    GDI_O_IN_CR:  equ 0A0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   554  00A1                    GDI_E_IN_CR:  equ 0A1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   555  00A2                    GDI_O_OU_CR:  equ 0A2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   556  00A3                    GDI_E_OU_CR:  equ 0A3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   557                          
   558  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   559  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   560                          
   561                          ;------------------------------------------------
   562                          ;  Analog Mux Bus Port Enable Bits
   563                          ;------------------------------------------------
   564  00D8                    MUX_CR0:      equ 0D8h          ; Analog Mux Port 0 Bit Enables Register
   565  00D9                    MUX_CR1:      equ 0D9h          ; Analog Mux Port 1 Bit Enables Register
   566  00DA                    MUX_CR2:      equ 0DAh          ; Analog Mux Port 2 Bit Enables Register
   567  00DB                    MUX_CR3:      equ 0DBh          ; Analog Mux Port 3 Bit Enables Register
   568  00EC                    MUX_CR4:      equ 0ECh          ; Analog Mux Port 4 Bit Enables Register
   569                          
   570                          ;------------------------------------------------
   571                          ;  Clock and System Control Registers
   572                          ;------------------------------------------------
   573                          
   574  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   575  0080                    OSC_GO_EN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   576  0040                    OSC_GO_EN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   577  0020                    OSC_GO_EN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   578  0010                    OSC_GO_EN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   579  0008                    OSC_GO_EN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   580  0004                    OSC_GO_EN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   581  0002                    OSC_GO_EN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   582  0001                    OSC_GO_EN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   583                          
   584  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   585  0003                    OSC_CR4_VC3SEL:       equ 03h    ; MASK: System VC3 Clock source
   586                          
   587  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   588                          
   589  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   590  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   591  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   592  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   593  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   594  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   595  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   596  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   597  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   598  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   599  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   600  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   601  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   602  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   603  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   604  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   605  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   606  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   607                          
   608  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   609  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   610  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   611                          
   612  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   613  0080                    OSC_CR2_PLLGAIN:      equ 80h    ; MASK: High/Low gain
   614  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   615  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   616  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   617                          
   618  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   619  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   620  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   621  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   622  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   623  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   624  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   625  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   626                          
   627  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   628  0008                    VLT_CMP_NOWRITE:      equ 08h    ; MASK: Vcc below Flash Write level
   629  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   630  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   631  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   632                          
   633  00E5                    ADC0_TR:      equ 0E5h          ; ADC Column 0 Trim Register
   634  00E6                    ADC1_TR:      equ 0E6h          ; ADC Column 1 Trim Register
   635                          
   636  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   637  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   638  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   639  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   640                          
   641  00FA                    FLS_PR1:      equ 0FAh          ; Flash Program Register 1                 (RW)
   642  0003                    FLS_PR1_BANK:         equ 03h    ; MASK: Select Active Flash Bank
   643                          
   644  00FD                    DAC_CR0:       equ 0FDh          ; Analog Mux DAC Control Register 0
   645  00DC                    DAC_CR1:       equ 0DCh          ; Analog Mux DAC Control Register 1
   646  0008                    DAC_CR_IRANGE:        equ 08h    ; MASK: Sets the DAC Range low or high
   647  0006                    DAC_CR_OSCMODE:       equ 06h    ; MASK: Defines the reset mode for AMux
   648  0001                    DAC_CR_ENABLE:        equ 01h    ; MASK: Enable/Disable DAC function
   649                          
   650                          ;------------------------------------------------
   651                          ;  I2C Control Registers
   652                          ;------------------------------------------------
   653                          
   654  00AD                    I2C_ADDR:    equ 0ADh          ; I2C Address Register (RW)
   655                          
   656                          ;------------------------------------------------------
   657                          ;  Neon Analog Registers
   658                          ;------------------------------------------------------
   659  0053                    VDAC50CR0:		equ 53h			; V DAC5 control 0				(RW)
   660  0057                    VDAC51CR0:		equ 57h			; V DAC5 control 1				(RW)
   661  00A8                    ADC_CR0:		equ A8h			; ADC control 0					(RW)
   662  00A9                    ADC_CR1:		equ A9h			; ADC control 1					(RW)
   663  00AA                    ADC_CR2:		equ AAh			; ADC control 2					(RW)
   664  00AB                    ADC_CR3TRIM:	equ ABh			; ADC control 3					(RW)
   665  00AC                    ADC_CR4:		equ ACh			; ADC control 4					(RW)
   666  00E7                    VDAC_TRIM:		equ E7h			; V DAC trim					(RW)
   667                          
   668                          ;------------------------------------------------------
   669                          ;  Neon Current Sense CMP Registers
   670                          ;------------------------------------------------------
   671  0050                    CMP0CR1:		equ 50h			; CMP0 control 1				(RW)
   672  0051                    CMP0CR2:		equ 51h			; CMP0 control 2				(RW)
   673  0054                    CMP1CR1:		equ 54h			; CMP1 control 1				(RW)
   674  0055                    CMP1CR2:		equ 55h			; CMP1 control 2				(RW)
   675  0058                    CSCMPCR0:		equ 58h			; CSCMP control 0				(RW)
   676  0059                    CSCMPGOEN:		equ 59h			; CSCMO global out enable		(RW)
   677  005A                    CSLUTCR0:		equ 5Ah			; CSLUT control 0				(RW)
   678  005B                    CMPCOLMUX:		equ 5Bh			; CMP Column Mux				(RW)
   679  005C                    CMPPWMCR:		equ 5Ch			; CMP PWM control				(RW)
   680  005D                    CMPFLTCR:		equ 5Dh			; CMP filter control			(RW)
   681  005E                    CMPCLK1:		equ 5Eh			; CMP clock 1					(RW)
   682  005F                    CMPCLK0:		equ 5Fh			; CMP clock 0					(RW)
   683                          
   684                          ;------------------------------------------------------
   685                          ;  Neon Real Time Clock Registers
   686                          ;------------------------------------------------------
   687  00A4                    RTCH:			equ A4h			; Real time current hour		(RW)
   688  00A5                    RTCM:			equ A5h			; Real time current minute		(RW)
   689  00A6                    RTCS:			equ A6h			; Real time current second		(RW)
   690  00A7                    RTCCR:			equ A7h			; Real time clock control		(RW)
   691                          
   692                          ;------------------------------------------------------
   693                          ;  Analog MUX Config Registers
   694                          ;------------------------------------------------------
   695                          
   696  006A                    AMUX_CFG1:			equ 6Ah  ; Analog MUX Configuration 1
   697  0020                    AMUX_CFG1_GOINVR:	equ 20h  ;
   698  0010                    AMUX_CFG1_GOINVL:  	equ 10h	 ;
   699  000C                    AMUX_CFG1_AMUXMODR:	equ 0Ch	 ;
   700  0003                    AMUX_CFG1_AMUXMODL:	equ 03h	 ;
   701                          
   702                          ;;=============================================================================
   703                          ;;      M8C System Macros
   704                          ;;  These macros should be used when their functions are needed.
   705                          ;;=============================================================================
   706                          
   707                          ;----------------------------------------------------
   708                          ;  Swapping Register Banks
   709                          ;----------------------------------------------------
   710                              macro M8C_SetBank0
   711                              and   F, ~FLAG_XIO_MASK
   712  3D73                        endm
   713                          
   714                              macro M8C_SetBank1
   715                              or    F, FLAG_XIO_MASK
   716  3D73                        endm
   717                          
   718                          ;----------------------------------------------------
   719                          ;  Global Interrupt Enable/Disable
   720                          ;----------------------------------------------------
   721                              macro M8C_EnableGInt
   722                              or    F, FLAG_GLOBAL_IE
   723  3D73                        endm
   724                          
   725                              macro M8C_DisableGInt
   726                              and   F, ~FLAG_GLOBAL_IE
   727  3D73                        endm
   728                          
   729                          ;----------------------------------------------------
   730                          ;  Enable/Disable Interrupt Mask
   731                          ;
   732                          ;  Use the following macros to enable/disable
   733                          ;  bits in the Interrupt mask registers,
   734                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   735                          ;
   736                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   737                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   738                          ;
   739                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   740                          ;        and MASK is the bit set to enable or disable
   741                          ;----------------------------------------------------
   742                          ; Disable Interrupt Bit Mask(s)
   743                              macro M8C_DisableIntMask
   744                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   745  3D73                        endm
   746                          
   747                          ; Enable Interrupt Bit Mask(s)
   748                              macro M8C_EnableIntMask
   749                              or    reg[@0], @1               ; enable specified interrupt enable bit
   750  3D73                        endm
   751                          
   752                          ;----------------------------------------------------
   753                          ;  Clear Posted Interrupt Flag Mask
   754                          ;
   755                          ;  Use the following macros to clear the
   756                          ;  bits in the Interrupt Clear registers,
   757                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   758                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   759                          ;
   760                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   761                          ;        and MASK is the bit set to enable or disable
   762                          ;----------------------------------------------------
   763                              macro M8C_ClearIntFlag
   764                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   765  3D73                        endm
   766                          
   767                          ;----------------------------------------------------
   768                          ;  Power-On Reset & WatchDog Timer Functions
   769                          ;----------------------------------------------------
   770                              macro M8C_EnableWatchDog
   771                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   772  3D73                        endm
   773                          
   774                              macro M8C_ClearWDT
   775                              mov   reg[RES_WDT], 00h
   776  3D73                        endm
   777                          
   778                              macro M8C_ClearWDTAndSleep
   779                              mov   reg[RES_WDT], 38h
   780  3D73                        endm
   781                          
   782                          ;----------------------------------------------------
   783                          ;  Sleep, CPU Stop & Software Reset
   784                          ;----------------------------------------------------
   785                              macro M8C_Sleep
   786                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   787                              ; The next instruction to be executed depends on the state of the
   788                              ; various interrupt enable bits. If some interrupts are enabled
   789                              ; and the global interrupts are disabled, the next instruction will
   790                              ; be the one that follows the invocation of this macro. If global
   791                              ; interrupts are also enabled then the next instruction will be
   792                              ; from the interrupt vector table. If no interrupts are enabled
   793                              ; then the CPU sleeps forever.
   794  3D73                        endm
   795                          
   796                              macro M8C_Stop
   797                              ; In general, you probably don't want to do this, but here's how:
   798                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   799                              ; Next instruction to be executed is located in the interrupt
   800                              ; vector table entry for Power-On Reset.
   801  3D73                        endm
   802                          
   803                              macro M8C_Reset
   804                              ; Restore CPU to the power-on reset state.
   805                              mov A, 0
   806                              SSC
   807                              ; Next non-supervisor instruction will be at interrupt vector 0.
   808  3D73                        endm
   809                          
   810                          ;----------------------------------------------------
   811                          ; ImageCraft Code Compressor Actions
   812                          ;----------------------------------------------------
   813                              ; Suspend Code Compressor
   814                              ; Must not span a RET or RETI instruction
   815                              ; without resuming code compression
   816                              macro Suspend_CodeCompressor
   817                              or   F, 0
   818  3D73                        endm
   819                          
   820                              ; Resume Code Compression
   821                              macro Resume_CodeCompressor
   822                              add  SP, 0
   823                              endm
      + 3D73                    
      + 3D73                    ; end of file m8c.inc
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;
     4                          ;;       FILENAME: Memory.inc
     5                          ;;
     6                          ;;    DESCRIPTION: Memory Model and Stack Parameter Definitions for 
     7                          ;;                 CY8C22045 PSoC devices.
     8                          ;;
     9                          ;;  LAST MODIFIED: August 17, 2004
    10                          ;;
    11                          ;;-----------------------------------------------------------------------------
    12                          ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
    13                          ;;*****************************************************************************
    14                          ;;*****************************************************************************
    15                          ;
    16                          ;
    17                          ;  ******** Define Memory Model and Stack parameters ********
    18                          ;
    19  0001                    IMAGECRAFT: equ 1   
    20  0002                    HITECH: equ 2   
    21  0002                    TOOLCHAIN: equ HITECH   
    22  0001                    SYSTEM_LARGE_MEMORY_MODEL: equ 1   
    23  0000                    SYSTEM_SMALL_MEMORY_MODEL: equ 0   
    24  0003                    SYSTEM_STACK_PAGE: equ 3   
    25  0000                    SYSTEM_STACK_PAGE_OFFSET: equ 0   
    26  0002                    SYSTEM_TOOLS: equ 2   
    27  0000                    SYSTEM_IDXPG_TRACKS_STK_PP: equ 0   
    28  0001                    SYSTEM_IDXPG_TRACKS_IDX_PP: equ 1   
    29  0000                    SYSTEM_MULTIPAGE_STACK: equ 0 
    30                          
    31                          
    32                          ;  ******* Function Class Definitions *******
    33                          ;
    34                          ;  These definitions are used to describe RAM access patterns. They provide
    35                          ;  documentation and they control prologue and epilogue macros that perform
    36                          ;  the necessary housekeeping functions for large memory model devices like
    37                          ;  the CY8C22045.
    38                          
    39  0001                    RAM_USE_CLASS_1:               equ 1   ; PUSH, POP & I/O access
    40  0002                    RAM_USE_CLASS_2:               equ 2   ; Indexed address mode on stack page
    41  0004                    RAM_USE_CLASS_3:               equ 4   ; Indexed address mode to any page
    42  0008                    RAM_USE_CLASS_4:               equ 8   ; Direct/Indirect address mode access
    43                          
    44                          ; ******* Hi Tech Specific *******
    45                          ; Turn on the expansion of all macros by default
    46                          IF (TOOLCHAIN & HITECH)
    47                          OPT EXPAND
    48                          ENDIF
    49                          ; ******* Page Pointer Manipulation Macros *******
    50                          ;
    51                          ;  ******* Page Pointer Manipulation Macros *******
    52                          ;
    53                          ;  Most of the following macros are conditionally compiled so they only
    54                          ;  produce code if the large memory model is selected.
    55                          
    56                             ;-----------------------------------------------
    57                             ;  Set Stack Page Macro
    58                             ;-----------------------------------------------
    59                             ;
    60                             ;  DESC: Modify STK_PP in the large or small memory Models.
    61                             ;
    62                             ; INPUT: Constant (e.g., SYSTEM_STACK_PAGE) that specifies the RAM page on
    63                             ;        which stack operations like PUSH and POP store and retrieve their
    64                             ;        data
    65                             ;
    66                             ;  COST: 8 instruction cycles (in LMM only)
    67                          
    68                             macro RAM_SETPAGE_STK( PG_NUMBER )
    69                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    70                                mov reg[STK_PP], @PG_NUMBER
    71                             ENDIF
    72  3D73                       endm
    73                          
    74                             ;-----------------------------------------------
    75                             ;  Set Current Page Macro
    76                             ;-----------------------------------------------
    77                             ;
    78                             ;  DESC: Modify CUR_PP in the large or small memory Models.
    79                             ;
    80                             ; INPUT: Constant value (e.g., >bFoo) for the RAM page number used in
    81                             ;        calculation of effective direct-mode address operands.
    82                             ;
    83                             ;  COST: 8 instruction cycles (in LMM only)
    84                          
    85                             macro RAM_SETPAGE_CUR( PG_NUMBER )
    86                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    87                                mov reg[CUR_PP], @PG_NUMBER
    88                             ENDIF
    89  3D73                       endm
    90                          
    91                             ;-----------------------------------------------
    92                             ;  Set Index Page Macro
    93                             ;-----------------------------------------------
    94                             ;
    95                             ;  DESC: Modify IDX_PP in the large or small emory Models.
    96                             ;
    97                             ; INPUT: Constant value (e.g., >caFoo) for the RAM page number used in
    98                             ;         calculation of effective index-mode address operands.
    99                             ;
   100                             ;  COST: 8 instruction cycles (in LMM only)
   101                          
   102                             macro RAM_SETPAGE_IDX( PG_NUMBER )
   103                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   104                                mov reg[IDX_PP], @PG_NUMBER
   105                             ENDIF
   106  3D73                       endm
   107                          
   108                             ;-----------------------------------------------
   109                             ;  Set MVI Read Page Macro
   110                             ;-----------------------------------------------
   111                             ;
   112                             ;  DESC: Modify MVR_PP in the large or small memory Models.
   113                             ;
   114                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   115                             ;        calculation of indirect address operands used in the
   116                             ;        "mvi A, [pFoo]" instructions.
   117                             ;
   118                             ;  COST: 8 instruction cycles (in LMM only)
   119                          
   120                             macro RAM_SETPAGE_MVR( PG_NUMBER )
   121                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   122                                mov reg[MVR_PP], @PG_NUMBER
   123                             ENDIF
   124  3D73                       endm
   125                          
   126                             ;-----------------------------------------------
   127                             ;  Set MVI Write Page Macro
   128                             ;-----------------------------------------------
   129                             ;
   130                             ;  DESC: Modify MVW_PP in the large or small memory Models.
   131                             ;
   132                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   133                             ;        calculation of indirect address operands used in the
   134                             ;        "mvi [pFoo], A" instructions.
   135                             ;
   136                             ;  COST: 8 instruction cycles (in LMM only)
   137                          
   138                             macro RAM_SETPAGE_MVW( PG_NUMBER )
   139                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   140                                mov reg[MVW_PP], @PG_NUMBER
   141                             ENDIF
   142  3D73                       endm
   143                          
   144                             ;-----------------------------------------------
   145                             ;  Force Index Page Pointer to Stack Page
   146                             ;-----------------------------------------------
   147                             ;
   148                             ;  DESC: Map index-mode operands onto the stack page by modifying IDX_PP.
   149                             ;        See also RAM_LOCK_INDEX_TO_STACKPAGE.
   150                             ;
   151                             ; INPUT: None
   152                             ;
   153                             ;  COST: 8 instruction cycles (in LMM only)
   154                          
   155                             macro RAM_SETPAGE_IDX2STK
   156                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   157                                IF ( SYSTEM_MULTIPAGE_STACK )
   158                                   mov   A, reg[STK_PP]
   159                                   mov   reg[IDX_PP], A
   160                                ELSE
   161                                   RAM_SETPAGE_IDX SYSTEM_STACK_PAGE
   162                                ENDIF
   163                             ENDIF
   164  3D73                       endm
   165                          
   166                             ;-----------------------------------------------
   167                             ;  Change Memory Mode
   168                             ;-----------------------------------------------
   169                             ;
   170                             ;  DESC: Modify FLAG_PAGEMODE bits in the large and small memory Models.
   171                             ;
   172                             ; INPUT: Constant value for PGMODE bitfield of CPU Flag register, F.
   173                             ;        See FLAG_PGMODE_{x} constants in M8C.INC.
   174                             ;
   175                             ;  COST: 8 instruction cycles (in LMM only)
   176                          
   177                             macro RAM_CHANGE_PAGE_MODE( MODE )
   178                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   179                                and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
   180                                or    F,  FLAG_PGMODE_MASK & @MODE
   181                             ENDIF
   182  3D73                       endm
   183                          
   184                             ;-----------------------------------------------
   185                             ;  Set Large Memory Model Native Paging Mode
   186                             ;-----------------------------------------------
   187                             ;
   188                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   189                             ;        paging mode *IFF* a simple "OR" is guaranteed to work---for
   190                             ;        example, in an ISR, when the PGMODE bits have been cleared
   191                             ;        to zero. If a simple "OR" is not guaranteed to work, use
   192                             ;        the slower RAM_RESTORE_NATIVE_PAGING instead.
   193                             ;
   194                             ; INPUT: none
   195                             ;
   196                             ;  COST: 4 instruction cycles (in LMM only)
   197                          
   198                             macro RAM_SET_NATIVE_PAGING
   199                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   200                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   201                                or    F,  FLAG_PGMODE_11b            ; LMM w/ IndexPage<==>StackPage
   202                             ENDIF ;  PGMODE LOCKED
   203                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   204                                or    F,  FLAG_PGMODE_10b            ; LMM with independent IndexPage
   205                             ENDIF ; PGMODE FREE
   206                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   207  3D73                       endm
   208                          
   209                             ;-----------------------------------------------
   210                             ; Restore Large Memory Model Native Paging Mode
   211                             ;-----------------------------------------------
   212                             ;
   213                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   214                             ;        paging mode. Always works because it clears the PGMODE bits
   215                             ;        before OR-ing in the new ones. See RAM_RESTORE_NATIVE_PAGING
   216                             ;        for a faster method.
   217                             ;
   218                             ; INPUT: none
   219                             ;
   220                             ;  COST: 8 instruction cycles (in LMM only)
   221                          
   222                             macro RAM_RESTORE_NATIVE_PAGING
   223                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   224                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   225                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_11b ; LMM w/ IndexPage<==>StackPage
   226                             ENDIF ;  PGMODE LOCKED
   227                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   228                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b ; LMM with independent IndexPage
   229                             ENDIF ; PGMODE FREE
   230                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   231  3D73                       endm
   232                          
   233                             ;-----------------------------------------------
   234                             ; Force indexed addr mode operands to Stack Pg
   235                             ;-----------------------------------------------
   236                             ;
   237                             ;  DESC: Force instructions that use indexed address mode to reference the
   238                             ;        stack page (as defined by STK_PP). This macro sets the "Indexed
   239                             ;        Stack Mode" bit (LSB) of the PGMODE bit field in the CPU Flag
   240                             ;        register, F. (See also RAM_SETPAGE_IDX2STK, above.)
   241                             ;
   242                             ; INPUT: none
   243                             ;
   244                             ;  COST: 4 instruction cycles (in LMM only)
   245                          
   246                             macro RAM_X_POINTS_TO_STACKPAGE
   247                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   248                                or   F, FLAG_PGMODE_01b
   249                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   250  3D73                       endm
   251                          
   252                             ;-----------------------------------------------
   253                             ;  Force indexed addr mode operands to Index Pg
   254                             ;-----------------------------------------------
   255                             ;
   256                             ;  DESC: Permit instructions that use indexed address mode to reference page
   257                             ;        zero or the page pointed to by the IDX_PP register, depending on the
   258                             ;        setting of the MSb (or "Direct Page Mode" bit) of the PGMODE bits
   259                             ;        in the CPU Flag register, F. (This macro clears the PGMODE LSb.)
   260                             ;
   261                             ; INPUT: none
   262                             ;
   263                             ;  COST: 4 instruction cycles (in LMM only)
   264                          
   265                             macro RAM_X_POINTS_TO_INDEXPAGE
   266                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   267                                and  F, ~FLAG_PGMODE_01b
   268                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   269  3D73                       endm
   270                          
   271                             ;-----------------------------------------------
   272                             ;  Function Prologue
   273                             ;-----------------------------------------------
   274                             ;
   275                             ;  Prologue for functions that run in the LMM and SMM.
   276                             ;
   277                          
   278                             macro RAM_PROLOGUE( ACTUAL_CLASS )
   279                          
   280                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   281                             ; Nothing to do
   282                             ENDIF ; RAM_USE_CLASS_1
   283                          
   284                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   285                                IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   286                                   RAM_X_POINTS_TO_STACKPAGE         ; exit native paging mode!
   287                                ENDIF
   288                             ENDIF ; RAM_USE_CLASS_2
   289                          
   290                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   291                                IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   292                                   RAM_X_POINTS_TO_INDEXPAGE         ; exit native paging mode!
   293                                ENDIF
   294                             ENDIF ; RAM_USE_CLASS_3
   295                          
   296                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   297                             ; Nothing to do
   298                             ENDIF ; RAM_USE_CLASS_4
   299                          
   300  3D73                       endm
   301                          
   302                             ;-----------------------------------------------
   303                             ;  Function Epilogue
   304                             ;-----------------------------------------------
   305                             ;
   306                             ;  Prologue for functions that run in the LMM and SMM.
   307                             ;
   308                          
   309                             macro RAM_EPILOGUE( ACTUAL_CLASS )
   310                          
   311                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   312                             ; Nothing to do
   313                             ENDIF ; RAM_USE_CLASS_1
   314                          
   315                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   316                                RAM_RESTORE_NATIVE_PAGING
   317                             ENDIF ; RAM_USE_CLASS_2
   318                          
   319                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   320                                RAM_RESTORE_NATIVE_PAGING
   321                             ENDIF ; RAM_USE_CLASS_3
   322                          
   323                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   324                             ; Nothing to do
   325                             ENDIF ; RAM_USE_CLASS_4
   326                          
   327  3D73                       endm
   328                          
   329                             ;-----------------------------------------------
   330                             ;  Preserve Register
   331                             ;-----------------------------------------------
   332                             ;
   333                             ;  DESC: Preserve a register value on the stack
   334                             ;
   335                             ; INPUT: Name or address of register in I/O Space
   336                             ;        The I/O bank is an implicit parameter. That is, this function will
   337                             ;        Access the I/O bank currently specified by the CPU Flag register.
   338                             ;
   339                             ;  USES: CPU 'A' register
   340                             ;
   341                             ;  COST: 9 instruction cycles
   342                          
   343                             macro REG_PRESERVE( IOReg )
   344                             mov   A, reg[ @IOReg ]
   345                             push  A
   346  3D73                       endm
   347                          
   348                             ;-----------------------------------------------
   349                             ;  Restore Register
   350                             ;-----------------------------------------------
   351                             ;
   352                             ;  DESC: Restore a register value from the stack
   353                             ;
   354                             ; INPUT: Name or address of register in I/O Space
   355                             ;        The I/O bank is an implicit parameter. That is, this function will
   356                             ;        Access the I/O bank currently specified by the CPU Flag register.
   357                             ;
   358                             ;  USES: CPU 'A' register
   359                             ;
   360                             ;  COST: 10 instruction cycles
   361                          
   362                             macro REG_RESTORE( IOReg )
   363                             pop   A
   364                             mov   reg[ @IOReg ], A
   365  3D73                       endm
   366                          
   367                             ;-----------------------------------------------
   368                             ;  Preserve Volatile Page Pointer Registers
   369                             ;-----------------------------------------------
   370                             ;
   371                             ;  DESC: Invoked by ISRs before switching to the LMM mode and calling
   372                             ;        functions that require on it.
   373                             ;
   374                             ; INPUT: none
   375                             ;
   376                             ;  USES: CPU 'A' register
   377                             ;
   378                             ;  COST: 45 instruction cycles (in LMM only)
   379                          
   380                             macro ISR_PRESERVE_PAGE_POINTERS
   381                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   382                                REG_PRESERVE CUR_PP
   383                                REG_PRESERVE IDX_PP
   384                                REG_PRESERVE MVR_PP
   385                                REG_PRESERVE MVW_PP
   386                             ENDIF
   387  3D73                       endm
   388                          
   389                             ;-----------------------------------------------
   390                             ;  Restore Volatile Page Pointer Registers
   391                             ;-----------------------------------------------
   392                             ;
   393                             ;  DESC: Undo for RAM_PRESERVE_PAGE_POINTERS macro. Invoked by ISRs after
   394                             ;        calling functions that run in the LMM mode and before executing
   395                             ;        the RETI instruction.
   396                             ;
   397                             ; INPUT: none
   398                             ;
   399                             ;  USES: CPU 'A' register
   400                             ;
   401                             ;  COST: 50 instruction cycles (in LMM only)
   402                          
   403                             macro ISR_RESTORE_PAGE_POINTERS
   404                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   405                                REG_RESTORE MVW_PP
   406                                REG_RESTORE MVR_PP
   407                                REG_RESTORE IDX_PP
   408                                REG_RESTORE CUR_PP
   409                             ENDIF
   410                             endm
      + 3D73                    
      + 3D73                    ; end of file Memory.inc
     1                          ;  Generated by PSoC Designer 5.4.2946
     2                          ;
     3                          ;=============================================================================
     4                          ;  FILENAME:   GlobalParams.inc
     5                          ;  DATE:       27 September 2004
     6                          ;
     7                          ;  DESCRIPTION:
     8                          ;  Constants describing many of the global parameter settings.
     9                          ;  This file contains equates to support oscillator register initialization
    10                          ;  for the CY8C22345
    11                          ;
    12                          ;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
    13                          ;
    14                          ; NOTES:
    15                          ; Do not modify this file. It is generated by PSoC Designer each time the
    16                          ; generate application function is run. The values of the parameters in this
    17                          ; file can be modified by changing the values of the global parameters in the
    18                          ; device editor.
    19                          ;=============================================================================
    20                          ;
    21                          
    22  0003                    CPU_CLOCK:				equ	3h	;CPU clock value
    23  0007                    CPU_CLOCK_MASK:			equ	7h	;CPU clock mask
    24  0003                    CPU_CLOCK_JUST:			equ	3h	;CPU clock value justified
    25  0000                    SELECT_32K:				equ	0h		;32K select value
    26  0080                    SELECT_32K_MASK:		equ	80h		;32K select mask
    27  0000                    SELECT_32K_JUST:		equ	0h		;32K select value justified
    28  0000                    PLL_MODE:				equ	0h		;PLL mode value
    29  0040                    PLL_MODE_MASK:			equ	40h		;PLL mode mask
    30  0000                    PLL_MODE_JUST:			equ	0h		;PLL mode value justified
    31                          
    32  0002                    SLEEP_TIMER:			equ	2h		;Sleep Timer value
    33  0018                    SLEEP_TIMER_MASK:		equ	18h		;Sleep Timer mask
    34  0010                    SLEEP_TIMER_JUST:		equ	10h		;Sleep Timer value justified
    35                          
    36  0000                    SLEEP_TIMER2:			equ	0h		;Sleep Extend value
    37  0010                    SLEEP_TIMER_MASK2:		equ	10h		;Sleep Extend mask
    38  0000                    SLEEP_TIMER_JUST2:		equ	0h		;Sleep Extend value justified
    39                          
    40  0001                    SWITCH_MODE_PUMP:		equ	1h	;Switch Mode Pump setting
    41  0080                    SWITCH_MODE_PUMP_MASK:	equ	80h	;Switch Mode Pump mask
    42  0080                    SWITCH_MODE_PUMP_JUST:	equ	80h	;Switch Mode Pump justified
    43  0000                    LVD_TBEN:               equ 0   ; Low Voltage Throttle-back enable value
    44  0008                    LVD_TBEN_MASK:          equ 8  ; Low Voltage Throttle-back enable mask
    45  0000                    LVD_TBEN_JUST:          equ 0  ; Low Voltage Throttle-back enable justified
    46  0007                    TRIP_VOLTAGE:			equ	7h   ;Trip Voltage value
    47  0007                    TRIP_VOLTAGE_MASK:      equ 7h  ;Trip Voltage mask
    48  0007                    TRIP_VOLTAGE_JUST:      equ 7h  ;Trip Voltage justified
    49                                                        
    50  0010                    POWER_SETTING:			equ	10h
    51  0010                    POWER_SET_5V0:          equ 10h  ; MASK for 5.0V operation, fast and slow 
    52  0010                    POWER_SET_5V0_24MHZ:    equ 10h  ; Power Setting value for 5.0V fast      
    53  0011                    POWER_SET_5V0_6MHZ:     equ 11h  ; Power Setting value for 5.0V slow      
    54  0008                    POWER_SET_3V3:          equ 08h  ; MASK for 3.3V operation, fast and slow 
    55  0008                    POWER_SET_3V3_24MHZ:    equ 08h	 ; Power Setting value for 3.3V fast      
    56  0009                    POWER_SET_3V3_6MHZ:     equ 09h	 ; Power Setting value for 3.3V slow      
    57  0006                    POWER_SET_2V7:          equ 06h  ; MASK for 2.7V operation, fast and slow
    58  0004                    POWER_SET_2V7_12MHZ:    equ 04h	 ; MASK for 2.7V, 12MHZ operation
    59  0002                    POWER_SET_2V7_6MHZ:     equ 02h	 ; MASK for 2.7V,  6MHZ operation
    60  0001                    POWER_SET_SLOW_IMO:     equ 01h  ; MASK for slow Internal Main Oscillator (IMO) 
    61                          
    62  0001                    COMM_RX_PRESENT:		equ	1	;1 = TRUE
    63  0001                    WATCHDOG_ENABLE:		equ 1	;Watchdog Enable 1 = Enable
    64                          
    65  0007                    CLOCK_DIV_VC1:			equ	7h	;VC1 clock divider
    66  00F0                    CLOCK_DIV_VC1_MASK:		equ	f0h	;VC1 clock divider mask
    67  0070                    CLOCK_DIV_VC1_JUST:		equ	70h	;VC1 clock divider justified
    68  000F                    CLOCK_DIV_VC2:			equ	fh	;VC2 clock divider
    69  000F                    CLOCK_DIV_VC2_MASK:		equ	fh	;VC2 clock divider mask
    70  000F                    CLOCK_DIV_VC2_JUST:		equ	fh	;VC2 clock divider justified
    71  0001                    CLOCK_INPUT_VC3:		equ	1h	;VC3 clock source
    72  0003                    CLOCK_INPUT_VC3_MASK:	equ	3h	;VC3 clock source mask
    73  0001                    CLOCK_INPUT_VC3_JUST:	equ	1h	;VC3 clock source justified
    74  0026                    CLOCK_DIV_VC3:			equ	26h	;VC3 clock divider
    75  00FF                    CLOCK_DIV_VC3_MASK:		equ	ffh	;VC3 clock divider mask
    76  0026                    CLOCK_DIV_VC3_JUST:		equ	26h	;VC3 clock divider justified
    77  0000                    SYSCLK_SOURCE:				equ	(0h | 0h)	;SysClk Source setting
    78  0006                    SYSCLK_SOURCE_MASK:			equ	(4h | 2h)	;SysClk Source setting mask
    79  0000                    SYSCLK_SOURCE_JUST:			equ	(0h | 0h)	;SysClk Source setting justified
    80  0000                    SYSCLK_2_DISABLE:				equ	0h	;SysClk*2 Disable setting
    81  0001                    SYSCLK_2_DISABLE_MASK:			equ	1h	;SysClk*2 Disable setting mask
    82  0000                    SYSCLK_2_DISABLE_JUST:			equ	0h	;SysClk*2 Disable setting justified
    83                          ;
    84                          ; register initial values
    85                          ;
    86  0000                    ANALOG_IO_CONTROL:		equ 0h	;Analog IO Control register (ABF_CR)
    87  0011                    PORT_0_GLOBAL_SELECT:	equ 11h	;Port 0 global select register (PRT0GS)
    88  00FE                    PORT_0_DRIVE_0:			equ feh	;Port 0 drive mode 0 register (PRT0DM0)
    89  0001                    PORT_0_DRIVE_1:			equ 1h	;Port 0 drive mode 1 register (PRT0DM1)
    90  0000                    PORT_0_DRIVE_2:			equ 0h	;Port 0 drive mode 2 register (PRT0DM2)
    91  0000                    PORT_0_INTENABLE:		equ 0h	;Port 0 interrupt enable register (PRT0IE)
    92  0000                    PORT_0_INTCTRL_0:		equ 0h	;Port 0 interrupt control 0 register (PRT0IC0)
    93  0000                    PORT_0_INTCTRL_1:		equ 0h	;Port 0 interrupt control 1 register (PRT0IC1)
    94  0000                    PORT_1_GLOBAL_SELECT:	equ 0h	;Port 1 global select register (PRT1GS)
    95  00A0                    PORT_1_DRIVE_0:			equ a0h	;Port 1 drive mode 0 register (PRT1DM0)
    96  00FF                    PORT_1_DRIVE_1:			equ ffh	;Port 1 drive mode 1 register (PRT1DM1)
    97  00EF                    PORT_1_DRIVE_2:			equ efh	;Port 1 drive mode 2 register (PRT1DM2)
    98  0000                    PORT_1_INTENABLE:		equ 0h	;Port 1 interrupt enable register (PRT1IE)
    99  0000                    PORT_1_INTCTRL_0:		equ 0h	;Port 1 interrupt control 0 register (PRT1IC0)
   100  0000                    PORT_1_INTCTRL_1:		equ 0h	;Port 1 interrupt control 1 register (PRT1IC1)
   101  0019                    PORT_2_GLOBAL_SELECT:	equ 19h	;Port 2 global select register (PRT2GS)
   102  0029                    PORT_2_DRIVE_0:			equ 29h	;Port 2 drive mode 0 register (PRT2DM0)
   103  00D6                    PORT_2_DRIVE_1:			equ d6h	;Port 2 drive mode 1 register (PRT2DM1)
   104  00C6                    PORT_2_DRIVE_2:			equ c6h	;Port 2 drive mode 2 register (PRT2DM2)
   105  0000                    PORT_2_INTENABLE:		equ 0h	;Port 2 interrupt enable register (PRT2IE)
   106  0000                    PORT_2_INTCTRL_0:		equ 0h	;Port 2 interrupt control 0 register (PRT2IC0)
   107  0000                    PORT_2_INTCTRL_1:		equ 0h	;Port 2 interrupt control 1 register (PRT2IC1)
   108  0000                    PORT_3_GLOBAL_SELECT:	equ 0h	;Port 3 global select register (PRT3GS)
   109  0000                    PORT_3_DRIVE_0:			equ 0h	;Port 3 drive mode 0 register (PRT3DM0)
   110  0000                    PORT_3_DRIVE_1:			equ 0h	;Port 3 drive mode 1 register (PRT3DM1)
   111  0000                    PORT_3_DRIVE_2:			equ 0h	;Port 3 drive mode 2 register (PRT3DM2)
   112  0000                    PORT_3_INTENABLE:		equ 0h	;Port 3 interrupt enable register (PRT3IE)
   113  0000                    PORT_3_INTCTRL_0:		equ 0h	;Port 3 interrupt control 0 register (PRT3IC0)
   114  0000                    PORT_3_INTCTRL_1:		equ 0h	;Port 3 interrupt control 1 register (PRT3IC1)
     1                          ;  Generated by PSoC Designer 5.4.2946
     2                          ;
     3                          ;==========================================================================
     4                          ;  PSoCConfig.asm
     5                          ;  @PSOC_VERSION
     6                          ;
     7                          ;  Version: 0.85
     8                          ;  Revised: June 22, 2004
     9                          ;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
    10                          ;
    11                          ;  This file is generated by the Device Editor on Application Generation.
    12                          ;  It contains code which loads the configuration data table generated in
    13                          ;  the file PSoCConfigTBL.asm
    14                          ;
    15                          ;  DO NOT EDIT THIS FILE MANUALLY, AS IT IS OVERWRITTEN!!!
    16                          ;  Edits to this file will not be preserved.
    17                          ;==========================================================================
    18                          ;
    19                          include "m8c.inc"
    20                          include "memory.inc"
    21                          include "GlobalParams.inc"
    22                          
    23                          export LoadConfigInit
    24                          export _LoadConfigInit
    25                          export LoadConfig_led_display
    26                          export _LoadConfig_led_display
    27                          
    28                          export NO_SHADOW
    29                          export _NO_SHADOW
    30                          
    31  0010                    FLAG_CFG_MASK:      equ 10h         ;M8C flag register REG address bit mask
    32  00FF                    END_CONFIG_TABLE:   equ ffh         ;end of config table indicator
    33                          
    34                          AREA psoc_config(rom, rel)
    35                          
    36                          ;---------------------------------------------------------------------------
    37                          ; LoadConfigInit - Establish the start-up configuration (except for a few
    38                          ;                  parameters handled by boot code, like CPU speed). This
    39                          ;                  function can be called from user code, but typically it
    40                          ;                  is only called from boot.
    41                          ;
    42                          ;       INPUTS: None.
    43                          ;      RETURNS: Nothing.
    44                          ; SIDE EFFECTS: Registers are volatile: the A and X registers can be modified!
    45                          ;               In the large memory model currently only the page
    46                          ;               pointer registers listed below are modified.  This does
    47                          ;               not guarantee that in future implementations of this
    48                          ;               function other page pointer registers will not be
    49                          ;               modified.
    50                          ;          
    51                          ;               Page Pointer Registers Modified: 
    52                          ;               CUR_PP
    53                          ;
    54  29C5                    _LoadConfigInit:
    55  29C5                     LoadConfigInit:
    56                              RAM_PROLOGUE RAM_USE_CLASS_4
    57                              
    58  29C5  7C 29CC           	lcall	LoadConfig_led_display
    59  29C8  7C 2A29           	lcall	LoadConfigTBL_led_display_Ordered
    60                          
    61                          
    62                              RAM_EPILOGUE RAM_USE_CLASS_4
    63  29CB  7F                    ret
    64                          
    65                          ;---------------------------------------------------------------------------
    66                          ; Load Configuration led_display
    67                          ;
    68                          ;    Load configuration registers for led_display.
    69                          ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
    70                          ;
    71                          ;       INPUTS: None.
    72                          ;      RETURNS: Nothing.
    73                          ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
    74                          ;               modified as may the Page Pointer registers!
    75                          ;               In the large memory model currently only the page
    76                          ;               pointer registers listed below are modified.  This does
    77                          ;               not guarantee that in future implementations of this
    78                          ;               function other page pointer registers will not be
    79                          ;               modified.
    80                          ;          
    81                          ;               Page Pointer Registers Modified: 
    82                          ;               CUR_PP
    83                          ;
    84  29CC                    _LoadConfig_led_display:
    85  29CC                     LoadConfig_led_display:
    86                              RAM_PROLOGUE RAM_USE_CLASS_4
    87                          
    88  29CC  10                	push	x
    89  29CD  70 EF                 M8C_SetBank0                    ; Force bank 0
    90  29CF  50 00                 mov     a, 0                    ; Specify bank 0
    91  29D1  67                    asr     a                       ; Store in carry flag
    92                                                              ; Load bank 0 table:
    93  29D2  50 2A                 mov     A, >LoadConfigTBL_led_display_Bank0
    94  29D4  57 CE                 mov     X, <LoadConfigTBL_led_display_Bank0
    95  29D6  7C 29E7               lcall   LoadConfig              ; Load the bank 0 values
    96                          
    97  29D9  50 01                 mov     a, 1                    ; Specify bank 1
    98  29DB  67                    asr     a                       ; Store in carry flag
    99                                                              ; Load bank 1 table:
   100  29DC  50 2B                 mov     A, >LoadConfigTBL_led_display_Bank1
   101  29DE  57 65                 mov     X, <LoadConfigTBL_led_display_Bank1
   102  29E0  7C 29E7               lcall   LoadConfig              ; Load the bank 1 values
   103                          
   104  29E3  70 EF                 M8C_SetBank0                    ; Force return to bank 0
   105  29E5  20                	pop		x
   106                          
   107                              RAM_EPILOGUE RAM_USE_CLASS_4
   108  29E6  7F                    ret
   109                          
   110                          
   111                          
   112                          
   113                          ;---------------------------------------------------------------------------
   114                          ; LoadConfig - Set IO registers as specified in ROM table of (address,value)
   115                          ;              pairs. Terminate on address=0xFF.
   116                          ;
   117                          ;  INPUTS:  [A,X] points to the table to be loaded
   118                          ;           Flag Register Carry bit encodes the Register Bank
   119                          ;           (Carry=0 => Bank 0; Carry=1 => Bank 1)
   120                          ;
   121                          ;  RETURNS: nothing.
   122                          ;
   123                          ;  STACK FRAME:  X-4 I/O Bank 0/1 indicator
   124                          ;                X-3 Temporary store for register address
   125                          ;                X-2 LSB of config table address
   126                          ;                X-1 MSB of config table address
   127                          ;
   128  29E7                    LoadConfig:
   129  29E7  71 40                 RAM_PROLOGUE RAM_USE_CLASS_2
   130  29E9  38 02                 add     SP, 2                   ; Set up local vars
   131  29EB  10                    push    X                       ; Save config table address on stack
   132  29EC  08                    push    A
   133  29ED  4F                    mov     X, SP
   134  29EE  56 FC 00              mov     [X-4], 0                ; Set default Destination to Bank 0
   135  29F1  D004                  jnc     .BankSelectSaved        ; Carry says Bank 0 is OK
   136  29F3  56 FC 01              mov     [X-4], 1                ; No Carry: default to Bank 1
   137  29F6                    .BankSelectSaved:
   138  29F6  18                    pop     A
   139  29F7  20                    pop     X
   140                          
   141  29F8                    LoadConfigLp:
   142  29F8  70 EF                 M8C_SetBank0                    ; Switch to bank 0
   143  29FA  62 E3 00              M8C_ClearWDT                    ; Clear the watchdog for long inits
   144  29FD  10                    push    X                       ; Preserve the config table address
   145  29FE  08                    push    A
   146  29FF  28                    romx                            ; Load register address from table
   147  2A00  39 FF                 cmp     A, END_CONFIG_TABLE     ; End of table?
   148  2A02  A01F                  jz      EndLoadConfig           ;   Yes, go wrap it up
   149  2A04  4F                    mov     X, SP                   ;
   150  2A05  48 FC 01              tst     [X-4], 1                ; Loading IO Bank 1?
   151  2A08  A003                  jz      .IOBankNowSet           ;    No, Bank 0 is fine
   152  2A0A  71 10                 M8C_SetBank1                    ;   Yes, switch to Bank 1
   153  2A0C                    .IOBankNowSet:
   154  2A0C  54 FD                 mov     [X-3], A                ; Stash the register address
   155  2A0E  18                    pop     A                       ; Retrieve the table address
   156  2A0F  20                    pop     X
   157  2A10  75                    inc     X                       ; Advance to the data byte
   158  2A11  09 00                 adc     A, 0
   159  2A13  10                    push    X                       ; Save the config table address again
   160  2A14  08                    push    A
   161  2A15  28                    romx                            ; load config data from the table
   162  2A16  4F                    mov     X, SP                   ; retrieve the register address
   163  2A17  59 FD                 mov     X, [X-3]
   164  2A19  61 00                 mov     reg[X], A               ; Configure the register
   165  2A1B  18                    pop     A                       ; retrieve the table address
   166  2A1C  20                    pop     X
   167  2A1D  75                    inc     X                       ; advance to next table entry
   168  2A1E  09 00                 adc     A, 0
   169  2A20  8FD7                  jmp     LoadConfigLp            ; loop to configure another register
   170  2A22                    EndLoadConfig:
   171  2A22  38 FC                 add     SP, -4
   172                              RAM_EPILOGUE RAM_USE_CLASS_2
      + 2A24  70 3F             	and	f, 0x3F
      + 2A26  71 80             	or	f, 0x80
   173  2A28  7F                    ret
   174                          
   175                          AREA InterruptRAM(ram, rel)
   176                          
   177  00A7                    NO_SHADOW:
   178  00A7                    _NO_SHADOW:
HI-TECH Software Macro Assembler (PSoC MCU) V9.61
Symbol Table                                                                                               Thu Jul 09 11:34:27 2015
                  _LoadConfigInit 29C5    LoadConfigTBL_led_display_Bank0 2ACE    LoadConfigTBL_led_display_Bank1 2B65  
           LoadConfig_led_display 29CC                             HITECH 0002                    FLAG_PGMODE_01b 0040  
                  FLAG_PGMODE_10b 0080            _LoadConfig_led_display 29CC          SYSTEM_LARGE_MEMORY_MODEL 0001  
                        NO_SHADOW 00A7                          TOOLCHAIN 0002                         _NO_SHADOW 00A7  
                 FLAG_PGMODE_MASK 00C0                            RES_WDT 00E3                    RAM_USE_CLASS_1 0001  
                  RAM_USE_CLASS_2 0002                    RAM_USE_CLASS_3 0004                    RAM_USE_CLASS_4 0008  
LoadConfigTBL_led_display_Ordered 2A29                         LoadConfig 29E7                     LoadConfigInit 29C5  
                 END_CONFIG_TABLE 00FF                      EndLoadConfig 2A22                      FLAG_XIO_MASK 0010  
       SYSTEM_IDXPG_TRACKS_IDX_PP 0001                       LoadConfigLp 29F8         SYSTEM_IDXPG_TRACKS_STK_PP 0000  
HI-TECH Software Macro Assembler (PSoC MCU) V9.61
                                                                                                           Thu Jul 09 11:34:28 2015
     1                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     2                          ;;;
     3                          ;;;  M8C.INC -- Microcontroller Device System Declarations
     4                          ;;;
     5                          ;;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
     6                          ;;;
     7                          ;;;  This file provides address constants, bit field masks and a set of macro
     8                          ;;;  facilities for the Cypress Semiconductor CY8C22045 Microcontroller devices.
     9                          ;;;
    10                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    11                          
    12                          ;;=============================================================================
    13                          ;; Definition of abbreviations used in the descriptions below
    14                          ;;  (RW)   The register or bit supports reads and writes
    15                          ;;  (W)    The register or bit is write-only
    16                          ;;  (R)    The register or bit is read-only
    17                          ;;  (#)    Access to the register is bit specific (see the family datasheet)
    18                          ;;  (RC)   The register or bit can be read, but writing a 0 will clear it,
    19                          ;;         writing a 1 will have no effect.
    20                          ;;=============================================================================
    21                          
    22                          ;;=============================================================================
    23                          ;;      System Registers
    24                          ;;=============================================================================
    25                          
    26                          ;----------------------------
    27                          ;  Flag Register Bit Fields
    28                          ;----------------------------
    29  00C0                    FLAG_PGMODE_MASK:  equ 0C0h     ; Paging control for > 256 bytes of RAM
    30  0000                    FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
    31  0040                    FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
    32  0080                    FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
    33  00C0                    FLAG_PGMODE_3:     equ 0C0h       ; Direct to CUR_PP page, indexed to STK_PP page
    34  0000                    FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
    35  0040                    FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
    36  0080                    FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
    37  00C0                    FLAG_PGMODE_11b:   equ 0C0h       ; Same as PGMODE_3
    38  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    39  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    40  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    41  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    42  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    43                          
    44                          
    45                          ;;=============================================================================
    46                          ;;      Register Space, Bank 0
    47                          ;;=============================================================================
    48                          
    49                          ;------------------------------------------------
    50                          ;  Port Registers
    51                          ;  Note: Also see this address range in Bank 1.
    52                          ;------------------------------------------------
    53                          ; Port 0
    54  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    55  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    56  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    57  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    58                          ; Port 1
    59  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    60  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    61  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    62  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    63                          ; Port 2
    64  0008                    PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
    65  0009                    PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
    66  000A                    PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
    67  000B                    PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
    68                          ; Port 3
    69  000C                    PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
    70  000D                    PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
    71  000E                    PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
    72  000F                    PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
    73                          ; Port 4
    74  0010                    PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
    75  0011                    PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
    76  0012                    PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
    77  0013                    PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
    78                          
    79                          ;------------------------------------------------
    80                          ;  Digital PSoC(tm) block Registers
    81                          ;  Note: Also see this address range in Bank 1.
    82                          ;------------------------------------------------
    83                          ; Digital PSoC block 00, Basic Type C
    84  0020                    DBC00DR0:     equ 20h          ; data register 0                          (#)
    85  0021                    DBC00DR1:     equ 21h          ; data register 1                          (W)
    86  0022                    DBC00DR2:     equ 22h          ; data register 2                          (RW)
    87  0023                    DBC00CR0:     equ 23h          ; control & status register 0              (#)
    88                          
    89                          ; Digital PSoC block 01, Basic Type C
    90  0024                    DBC01DR0:     equ 24h          ; data register 0                          (#)
    91  0025                    DBC01DR1:     equ 25h          ; data register 1                          (W)
    92  0026                    DBC01DR2:     equ 26h          ; data register 2                          (RW)
    93  0027                    DBC01CR0:     equ 27h          ; control & status register 0              (#)
    94                          
    95                          ; Digital PSoC block 02, Communications Type C
    96  0028                    DCC02DR0:     equ 28h          ; data register 0                          (#)
    97  0029                    DCC02DR1:     equ 29h          ; data register 1                          (W)
    98  002A                    DCC02DR2:     equ 2Ah          ; data register 2                          (RW)
    99  002B                    DCC02CR0:     equ 2Bh          ; control & status register 0              (#)
   100                          
   101                          ; Digital PSoC block 03, Communications Type C
   102  002C                    DCC03DR0:     equ 2Ch          ; data register 0                          (#)
   103  002D                    DCC03DR1:     equ 2Dh          ; data register 1                          (W)
   104  002E                    DCC03DR2:     equ 2Eh          ; data register 2                          (RW)
   105  002F                    DCC03CR0:     equ 2Fh          ; control & status register 0              (#)
   106                          
   107                          ; Digital PSoC block 10, Basic Type C
   108  0030                    DBC10DR0:     equ 30h          ; data register 0                          (#)
   109  0031                    DBC10DR1:     equ 31h          ; data register 1                          (W)
   110  0032                    DBC10DR2:     equ 32h          ; data register 2                          (RW)
   111  0033                    DBC10CR0:     equ 33h          ; control & status register 0              (#)
   112                          
   113                          ; Digital PSoC block 11, Basic Type C
   114  0034                    DBC11DR0:     equ 34h          ; data register 0                          (#)
   115  0035                    DBC11DR1:     equ 35h          ; data register 1                          (W)
   116  0036                    DBC11DR2:     equ 36h          ; data register 2                          (RW)
   117  0037                    DBC11CR0:     equ 37h          ; control & status register 0              (#)
   118                          
   119                          ; Digital PSoC block 12, Communications Type C
   120  0038                    DCC12DR0:     equ 38h          ; data register 0                          (#)
   121  0039                    DCC12DR1:     equ 39h          ; data register 1                          (W)
   122  003A                    DCC12DR2:     equ 3Ah          ; data register 2                          (RW)
   123  003B                    DCC12CR0:     equ 3Bh          ; control & status register 0              (#)
   124                          
   125                          ; Digital PSoC block 13, Communications Type C
   126  003C                    DCC13DR0:     equ 3Ch          ; data register 0                          (#)
   127  003D                    DCC13DR1:     equ 3Dh          ; data register 1                          (W)
   128  003E                    DCC13DR2:     equ 3Eh          ; data register 2                          (RW)
   129  003F                    DCC13CR0:     equ 3Fh          ; control & status register 0              (#)
   130                          
   131                          ;-------------------------------------
   132                          ;  Analog Control Registers
   133                          ;-------------------------------------
   134  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
   135  00C0                    AMX_IN_ACI3:          equ C0h    ; MASK: column 3 input mux
   136  0030                    AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
   137  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
   138  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
   139                          
   140  0061                    AMUX_CFG:      equ 61h          ; Analog MUX Configuration
   141  0030                    AMUX_CFG_INTCAP:       equ 30h    ;
   142  000E                    AMUX_CFG_MUXCLK:  	  equ 0Eh	 ;
   143  0001                    AMUX_CFG_EN:		  	  equ 01h	 ;
   144                          
   145                          ; old declarations DO NOT USE
   146  0061                    AMUXCFG:      equ 61h          ; Analog MUX Configuration
   147  0030                    AMUXCFG_INTCAP:       equ 30h    ;
   148  000E                    AMUXCFG_MUXCLK:  	  equ 0Eh	 ;
   149  0001                    AMUXCFG_EN:		  	  equ 01h	 ;
   150                          
   151  0062                    PWM_CR:       equ 62h          ; Pulse-Width Modulator Control
   152  0038                    PWM_CR_HIGH:          equ 38h    ; MASK: PWM high time
   153  0006                    PWM_CR_LOW:           equ 06h	 ; MASK: PWM low time
   154  0001                    PWM_CR_EN:            equ 01h	 ; MASK: Enable/Disable PWM function
   155                          
   156  0063                    ARF_CR:       equ 63h          ; Analog Reference Control
   157                          
   158  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus Register           (#)
   159  0080                    CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
   160  0040                    CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
   161  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
   162  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
   163  0008                    CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
   164  0004                    CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
   165  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
   166  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   167                          
   168  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   169  0020                    CMP_CR1_CLDIS1:       equ 20h    ; MASK: Column 1 comparator output latch
   170  0010                    CMP_CR1_CLDIS0:	      equ 10h    ; MASK: Column 0 comparator output latch
   171                          
   172  0068                    ADC0_CR:      equ 68h          ; Analog Column 0 Configuration
   173  0080                    ADC0_CR_CMPST:        equ 80h    ;
   174  0040                    ADC0_CR_LOREN:        equ 40h    ;
   175  0020                    ADC0_CR_SHEN:         equ 20h    ;
   176  0008                    ADC0_CR_CBSRC:        equ 08h    ;
   177  0004                    ADC0_CR_ADCM:         equ 04h    ;
   178  0001                    ADC0_CR_EN:	          equ 01h    ;
   179                          
   180  0069                    ADC1_CR:      equ 69h          ; Analog Column 1 Configuration
   181  0080                    ADC1_CR_CMPST:        equ 80h    ;
   182  0040                    ADC1_CR_LOREN:        equ 40h    ;
   183  0020                    ADC1_CR_SHEN:         equ 20h    ;
   184  0008                    ADC1_CR_CBSRC:        equ 08h    ;
   185  0004                    ADC1_CR_ADCM:         equ 04h    ;
   186  0001                    ADC1_CR_EN:	          equ 01h    ;
   187                          
   188                          ; Continuous Time PSoC block Type E Row 0 Col 0
   189  0072                    ACE00CR1:     equ 72h          ; Control register 1                       (RW)
   190  0073                    ACE00CR2:     equ 73h          ; Control register 2                       (RW)
   191                          
   192                          ; Continuous Time PSoC block Type E Row 0 Col 1
   193  0076                    ACE01CR1:     equ 76h          ; Control register 1                       (RW)
   194  0077                    ACE01CR2:     equ 77h          ; Control register 2                       (RW)
   195                          
   196                          ; Switched Cap PSoC blockType E Row 1 Col 0
   197  0080                    ASE10CR0:     equ 80h          ; Control register 0                       (RW)
   198                          
   199                          ; Switched Cap PSoC blockType E Row 1 Col 1
   200  0084                    ASE11CR0:     equ 84h          ; Control register 0                       (RW)
   201                          
   202                          ;-----------------------------------------------
   203                          ;  Global General Purpose Data Registers
   204                          ;-----------------------------------------------
   205  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   206  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   207+ 006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   208  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   209                          
   210                          ;------------------------------------------------
   211                          ;  Row Digital Interconnects
   212                          ;
   213                          ;  Note: the following registers are mapped into
   214                          ;  both register bank 0 AND register bank 1.
   215                          ;------------------------------------------------
   216                          
   217  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   218  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   219  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   220  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   221  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   222  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   223  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   224                          
   225  00B8                    RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
   226  00B9                    RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
   227  00BA                    RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
   228  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   229  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   230  00BD                    RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
   231  00BE                    RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
   232                          
   233                          ;-----------------------------------------------
   234                          ;  Ram Page Pointers
   235                          ;-----------------------------------------------
   236  00D0                    CUR_PP:      equ 0D0h           ; Current   Page Pointer
   237  00D1                    STK_PP:      equ 0D1h           ; Stack     Page Pointer
   238  00D3                    IDX_PP:      equ 0D3h           ; Index     Page Pointer
   239  00D4                    MVR_PP:      equ 0D4h           ; MVI Read  Page Pointer
   240  00D5                    MVW_PP:      equ 0D5h           ; MVI Write Page Pointer
   241                          
   242                          ;------------------------------------------------
   243                          ;  I2C Configuration Registers
   244                          ;------------------------------------------------
   245  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   246  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   247  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   248  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   249  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   250  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   251  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   252  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   253  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   254  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   255                          
   256  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   257  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   258  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   259  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   260  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   261  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   262  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   263  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   264  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   265                          
   266  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   267                          
   268  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   269  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   270  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   271  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   272  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   273                          
   274                          ;------------------------------------------------
   275                          ;  System and Global Resource Registers
   276                          ;------------------------------------------------
   277  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   278                                                         ; Use INT_MSK0 bit field masks
   279  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   280                                                         ; Use INT_MSK1 bit field masks
   281  00DC                    INT_CLR2:     equ 0DCh          ; Interrupt Clear Register 2               (RW)
   282                                                         ; Use INT_MSK2 bit field masks
   283  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   284                                                         ; Use INT_MSK3 bit field masks
   285                          
   286  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   287  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   288  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   289                          
   290  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   291  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   292  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   293  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   294  0010                    INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
   295  0008                    INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
   296  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   297  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   298  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   299                          
   300  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   301  0080                    INT_MSK1_DCC13:            equ 80h ; MASK: enable/disable DCC13 block interrupt
   302  0040                    INT_MSK1_DCC12:            equ 40h ; MASK: enable/disable DCC12 block interrupt
   303  0020                    INT_MSK1_DBC11:            equ 20h ; MASK: enable/disable DBC11 block interrupt
   304  0010                    INT_MSK1_DBC10:            equ 10h ; MASK: enable/disable DBC10 block interrupt
   305  0008                    INT_MSK1_DCC03:            equ 08h ; MASK: enable/disable DCC03 block interrupt
   306  0004                    INT_MSK1_DCC02:            equ 04h ; MASK: enable/disable DCC02 block interrupt
   307  0002                    INT_MSK1_DBC01:            equ 02h ; MASK: enable/disable DBC01 block interrupt
   308  0001                    INT_MSK1_DBC00:            equ 01h ; MASK: enable/disable DBC00 block interrupt
   309                          
   310  00DF                    INT_MSK2:     equ DFh			; Custom block Mask Register			   (RW)
   311  0010                    INT_MSK2_SARADC:           equ 10h ; MASK: enable/disable SARADC block interrupt
   312  0020                    INT_MSK2_CSD0:             equ 20h ; MASK: enable/disable CSD0 block interrupt
   313  0040                    INT_MSK2_CSD1:             equ 40h ; MASK: enable/disable CSD1 block interrupt
   314  0080                    INT_MSK2_RTC:              equ 80h ; MASK: enable/disable RTC block interrupt
   315                          
   316  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   317  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   318                          
   319                          ;------------------------------------------------------
   320                          ;  MAC Registers
   321                          ;------------------------------------------------------
   322                          
   323  00E8                    MUL0_X:       equ 0E8h          ; Multiply Input X Register                (W)
   324  00E9                    MUL0_Y:       equ 0E9h          ; Multiply Input Y Register                (W)
   325  00EA                    MUL0_DH:      equ 0EAh          ; Multiply Result High Byte Register       (R)
   326  00EB                    MUL0_DL:      equ 0EBh          ; Multiply Result Low Byte Register        (R)
   327                          
   328  00EC                    ACC0_DR1:     equ 0ECh          ; Accumulator Data Register 1              (RW)
   329  00ED                    ACC0_DR0:     equ 0EDh          ; Accumulator Data Register 0              (RW)
   330  00EE                    ACC0_DR3:     equ 0EEh          ; Accumulator Data Register 3              (RW)
   331  00EF                    ACC0_DR2:     equ 0EFh          ; Accumulator Data Register 2              (RW)
   332                          
   333                          ; DECIMATOR Control Registers
   334  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   335  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   336                          
   337                          ;------------------------------------------------------
   338                          ;  System Status and Control Registers
   339                          ;
   340                          ;  Note: The following registers are mapped into both
   341                          ;        register bank 0 AND register bank 1.
   342                          ;------------------------------------------------------
   343  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   344                                                             ; Use FLAG_ masks defined at top of file
   345                          
   346  00FD                    DAC_D:        equ 0FDh		   ; DAC Data Register                        (RW)
   347                          
   348  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   349  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: flag, Internal Reset Status bit
   350  0010                    CPU_SCR1_SLIMO:         equ 10h	   ; MASK: Slow IMO (internal main osc) enable
   351  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   352  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   353  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   354                          
   355  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   356  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   357  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   358  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   359  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   360  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   361                          
   362                          ;------------------------------------------------------
   363                          ;  Neon Capsense Digital Control Registers
   364                          ;------------------------------------------------------
   365  0050                    CSD0_DR0_L:				equ 50h		; Capsense 0 data low 0				(RW)
   366  0054                    CSD0_DR0_H:				equ 54h		; Capsense 0 data high 0			(RW)
   367  0058                    CSD1_DR0_L:				equ 58h		; Capsense 1 data low 0				(RW)
   368  005C                    CSD1_DR0_H:				equ 5Ch		; Capsense 1 data high 0			(RW)
   369  0051                    CSD0_DR1_L:				equ 51h		; Capsense 0 data low 1				(RW)
   370  0055                    CSD0_DR1_H:				equ 55h		; Capsense 0 data high 1			(RW)
   371  0059                    CSD1_DR1_L:				equ 59h		; Capsense 1 data low 1				(RW)
   372  005D                    CSD1_DR1_H:				equ 5Dh		; Capsense 1 data high 1			(RW)
   373  0052                    CSD0_CNT_L:				equ 52h		; Capsense 0 counter low			(RW)
   374  0056                    CSD0_CNT_H:				equ 56h		; Capsense 0 counter high			(RW)
   375  005A                    CSD1_CNT_L:				equ 5Ah		; Capsense 1 counter low			(RW)
   376  005E                    CSD1_CNT_H:				equ	5Eh		; Capsense 1 counter high			(RW)
   377  0053                    CSD0_CR0:				equ 53h		; Capsense 0 control 0				(RW)
   378  005B                    CSD1_CR0:				equ 5Bh		; Capsense 1 control 0				(RW)
   379  0057                    CSD0_CR1:				equ 57h		; Capsense 0 control 1				(RW)
   380  005F                    CSD1_CR1:				equ 5Fh		; Capsense 1 control 1				(RW)
   381                          
   382                          ;------------------------------------------------------
   383                          ;  Neon Analog Registers
   384                          ;------------------------------------------------------
   385  0065                    ASY_CR:					equ 65h		; Analog Synchronization Control	(RW)
   386  006A                    ADC_DH:					equ 6Ah		; ADC data high						(RW)
   387  006B                    ADC_DL:					equ 6Bh		; ADC data low						(RW)
   388  00C8                    PWMVREF0:				equ C8h		; PWM Voltage Reference 0			(RW)
   389  00C9                    PWMVREF1:				equ C9h		; PWM Voltage Reference 1			(RW)
   390  00CB                    PWMSRC:					equ CBh		; PWM Source						(RW)
   391  00CA                    IDACMODE:				equ CAh		; IDAC Mode							(RW)
   392  00FC                    IDACR_D:				equ FCh		; Analog Mux DAC data 0				(RW)
   393  00FD                    IDACL_D:				equ FDh		; Analog Mux DAC data 1				(RW)
   394                          
   395                          ;------------------------------------------------------
   396                          ;  Neon Digital Registers
   397                          ;------------------------------------------------------
   398  00B7                    RDI0DSM:				equ B7h		; Row Digital Interconnect input select 0	(RW)
   399  00BF                    RDI1DSM:				equ BFh		; Row Digital Interconnect input select 1	(RW)
   400                          
   401                          ;------------------------------------------------------
   402                          ;  Neon Test Registers
   403                          ;------------------------------------------------------
   404  00CC                    TSCR0:					equ CCh		; Tsource 0							(RW)
   405  00CD                    TSCMPH:					equ CDh		; TSCMP high						(RW)
   406  00CE                    TSCMPL:					equ CEh		; TSCMP low							(RW)
   407  00CF                    TSCR1:					equ CFh		; Tsource 1							(RW)
   408                          
   409                          ;;=============================================================================
   410                          ;;      Register Space, Bank 1
   411                          ;;=============================================================================
   412                          
   413                          ;------------------------------------------------
   414                          ;  Port Registers
   415                          ;  Note: Also see this address range in Bank 0.
   416                          ;------------------------------------------------
   417                          ; Port 0
   418  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   419  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   420  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   421  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   422                          
   423                          ; Port 1
   424  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   425  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   426  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   427  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   428                          
   429                          ; Port 2
   430  0008                    PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
   431  0009                    PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
   432  000A                    PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
   433  000B                    PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
   434                          
   435                          ; Port 3
   436  000C                    PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
   437  000D                    PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
   438  000E                    PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
   439  000F                    PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
   440                          
   441                          ; Port 4
   442  0010                    PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
   443  0011                    PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
   444  0012                    PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
   445  0013                    PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
   446                          
   447                          ;------------------------------------------------
   448                          ;  Digital PSoC(tm) block Registers
   449                          ;  Note: Also see this address range in Bank 0.
   450                          ;------------------------------------------------
   451                          
   452                          ; Digital PSoC block 00, Basic Type C
   453  0020                    DBC00FN:      equ 20h          ; Function Register                        (RW)
   454  0021                    DBC00IN:      equ 21h          ;    Input Register                        (RW)
   455  0022                    DBC00OU:      equ 22h          ;   Output Register                        (RW)
   456  0023                    DBC00CR1:     equ 23h          ;   control & status register 1            (RW)
   457                          
   458                          ; Digital PSoC block 01, Basic Type C
   459  0024                    DBC01FN:      equ 24h          ; Function Register                        (RW)
   460  0025                    DBC01IN:      equ 25h          ;    Input Register                        (RW)
   461  0026                    DBC01OU:      equ 26h          ;   Output Register                        (RW)
   462  0027                    DBC01CR1:     equ 27h          ;   control & status register 1            (RW)
   463                          
   464                          ; Digital PSoC block 02, Communications Type C
   465  0028                    DCC02FN:      equ 28h          ; Function Register                        (RW)
   466  0029                    DCC02IN:      equ 29h          ;    Input Register                        (RW)
   467  002A                    DCC02OU:      equ 2Ah          ;   Output Register                        (RW)
   468  002B                    DBC02CR1:     equ 2Bh          ;   control & status register 1            (RW)
   469                          
   470                          ; Digital PSoC block 03, Communications Type C
   471  002C                    DCC03FN:      equ 2Ch          ; Function Register                        (RW)
   472  002D                    DCC03IN:      equ 2Dh          ;    Input Register                        (RW)
   473  002E                    DCC03OU:      equ 2Eh          ;   Output Register                        (RW)
   474  0029                    DBC03CR1:     equ 29h          ;   control & status register 1            (RW)
   475                          
   476                          ; Digital PSoC block 10, Basic Type C
   477  0030                    DBC10FN:      equ 30h          ; Function Register                        (RW)
   478  0031                    DBC10IN:      equ 31h          ;    Input Register                        (RW)
   479  0032                    DBC10OU:      equ 32h          ;   Output Register                        (RW)
   480  0033                    DBC10CR1:     equ 33h          ;   control & status register 1            (RW)
   481                          
   482                          ; Digital PSoC block 11, Basic Type C
   483  0034                    DBC11FN:      equ 34h          ; Function Register                        (RW)
   484  0035                    DBC11IN:      equ 35h          ;    Input Register                        (RW)
   485  0036                    DBC11OU:      equ 36h          ;   Output Register                        (RW)
   486  0037                    DBC11CR1:     equ 37h          ;   control & status register 1            (RW)
   487                          
   488                          ; Digital PSoC block 12, Communications Type C
   489  0038                    DCC12FN:      equ 38h          ; Function Register                        (RW)
   490  0039                    DCC12IN:      equ 39h          ;    Input Register                        (RW)
   491  003A                    DCC12OU:      equ 3Ah          ;   Output Register                        (RW)
   492  003B                    DBC12CR1:     equ 3Bh          ;   control & status register 1            (RW)
   493                          
   494                          ; Digital PSoC block 13, Communications Type C
   495  003C                    DCC13FN:      equ 3Ch          ; Function Register                        (RW)
   496  003D                    DCC13IN:      equ 3Dh          ;    Input Register                        (RW)
   497  003E                    DCC13OU:      equ 3Eh          ;   Output Register                        (RW)
   498  003F                    DBC13CR1:     equ 3Fh          ;   control & status register 1            (RW)
   499                          
   500                          ;------------------------------------------------
   501                          ;  System and Global Resource Registers
   502                          ;  Note: Also see this address range in Bank 0.
   503                          ;------------------------------------------------
   504                          
   505  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   506  00C0                    CLK_CR0_ACOLUMN_3:    equ C0h    ; MASK: Specify clock for analog cloumn
   507  0030                    CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
   508  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   509  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   510                          
   511  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   512  0018                    CLK_CR1_ACLK1:        equ 18h    ; MASK: Digital PSoC block for analog source
   513  0003                    CLK_CR1_ACLK0:        equ 03h    ; MASK: Digital PSoC block for analog source
   514                          
   515  0003                    CLK_CR1_ACLK2:        equ 03h    ; Deprecated do not use
   516                          
   517  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   518  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   519                          
   520  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   521  000F                    AMD_CR0_AMOD0:        equ 0Fh    ; MASK: Modulation source for analog column 0
   522                          
   523  0064                    CMP_GO_EN:    equ 64h          ; Comparator Bus To Global Out Enable      (RW)
   524  0080                    CMP_GO_EN_GOO5:       equ 80h    ; MASK: Selected Col 1 signal to GOO5
   525  0040                    CMP_GO_EN_GOO1:       equ 40h    ; MASK: Selected Col 1 signal to GOO1
   526  0030                    CMP_GO_EN_SEL1:       equ 30h    ; MASK: Column 1 Signal Select
   527  0008                    CMP_GO_EN_GOO4:       equ 08h    ; MASK: Selected Col 0 signal to GOO4
   528  0004                    CMP_GO_EN_GOO0:       equ 04h    ; MASK: Selected Col 0 signal to GOO0
   529  0003                    CMP_GO_EN_SEL0:       equ 03h    ; MASK: Column 0 Signal Select
   530                          
   531  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   532  000F                    AMD_CR1_AMOD1:        equ 0Fh    ; MASK: Modulation ctrl for analog column 1
   533                          
   534  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   535  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   536  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   537                          
   538  006B                    CLK_CR3:      equ 6Bh          ; Analog Clock Source Control Register 3   (RW)
   539  0040                    CLK_CR3_SYS1:         equ 40h    ; MASK: Analog Clock 1 selection
   540  0030                    CLK_CR3_DIVCLK1:      equ 30h    ; MASK: Analog Clock 1 divider
   541  0004                    CLK_CR3_SYS0:         equ 04h    ; MASK: Analog Clock 0 selection
   542  0003                    CLK_CR3_DIVCLK0:      equ 03h    ; MASK: Analog Clock 0 divider
   543                          
   544                          ;------------------------------------------------
   545                          ;  Global Digital Interconnects
   546                          ;------------------------------------------------
   547                          
   548  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   549  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   550  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   551  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   552                          
   553  00A0                    GDI_O_IN_CR:  equ 0A0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   554  00A1                    GDI_E_IN_CR:  equ 0A1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   555  00A2                    GDI_O_OU_CR:  equ 0A2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   556  00A3                    GDI_E_OU_CR:  equ 0A3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   557                          
   558  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   559  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   560                          
   561                          ;------------------------------------------------
   562                          ;  Analog Mux Bus Port Enable Bits
   563                          ;------------------------------------------------
   564  00D8                    MUX_CR0:      equ 0D8h          ; Analog Mux Port 0 Bit Enables Register
   565  00D9                    MUX_CR1:      equ 0D9h          ; Analog Mux Port 1 Bit Enables Register
   566  00DA                    MUX_CR2:      equ 0DAh          ; Analog Mux Port 2 Bit Enables Register
   567  00DB                    MUX_CR3:      equ 0DBh          ; Analog Mux Port 3 Bit Enables Register
   568  00EC                    MUX_CR4:      equ 0ECh          ; Analog Mux Port 4 Bit Enables Register
   569                          
   570                          ;------------------------------------------------
   571                          ;  Clock and System Control Registers
   572                          ;------------------------------------------------
   573                          
   574  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   575  0080                    OSC_GO_EN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   576  0040                    OSC_GO_EN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   577  0020                    OSC_GO_EN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   578  0010                    OSC_GO_EN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   579  0008                    OSC_GO_EN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   580  0004                    OSC_GO_EN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   581  0002                    OSC_GO_EN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   582  0001                    OSC_GO_EN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   583                          
   584  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   585  0003                    OSC_CR4_VC3SEL:       equ 03h    ; MASK: System VC3 Clock source
   586                          
   587  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   588                          
   589  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   590  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   591  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   592  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   593  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   594  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   595  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   596  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   597  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   598  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   599  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   600  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   601  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   602  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   603  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   604  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   605  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   606  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   607                          
   608  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   609  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   610  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   611                          
   612  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   613  0080                    OSC_CR2_PLLGAIN:      equ 80h    ; MASK: High/Low gain
   614  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   615  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   616  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   617                          
   618  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   619  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   620  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   621  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   622  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   623  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   624  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   625  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   626                          
   627  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   628  0008                    VLT_CMP_NOWRITE:      equ 08h    ; MASK: Vcc below Flash Write level
   629  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   630  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   631  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   632                          
   633  00E5                    ADC0_TR:      equ 0E5h          ; ADC Column 0 Trim Register
   634  00E6                    ADC1_TR:      equ 0E6h          ; ADC Column 1 Trim Register
   635                          
   636  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   637  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   638  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   639  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   640                          
   641  00FA                    FLS_PR1:      equ 0FAh          ; Flash Program Register 1                 (RW)
   642  0003                    FLS_PR1_BANK:         equ 03h    ; MASK: Select Active Flash Bank
   643                          
   644  00FD                    DAC_CR0:       equ 0FDh          ; Analog Mux DAC Control Register 0
   645  00DC                    DAC_CR1:       equ 0DCh          ; Analog Mux DAC Control Register 1
   646  0008                    DAC_CR_IRANGE:        equ 08h    ; MASK: Sets the DAC Range low or high
   647  0006                    DAC_CR_OSCMODE:       equ 06h    ; MASK: Defines the reset mode for AMux
   648  0001                    DAC_CR_ENABLE:        equ 01h    ; MASK: Enable/Disable DAC function
   649                          
   650                          ;------------------------------------------------
   651                          ;  I2C Control Registers
   652                          ;------------------------------------------------
   653                          
   654  00AD                    I2C_ADDR:    equ 0ADh          ; I2C Address Register (RW)
   655                          
   656                          ;------------------------------------------------------
   657                          ;  Neon Analog Registers
   658                          ;------------------------------------------------------
   659  0053                    VDAC50CR0:		equ 53h			; V DAC5 control 0				(RW)
   660  0057                    VDAC51CR0:		equ 57h			; V DAC5 control 1				(RW)
   661  00A8                    ADC_CR0:		equ A8h			; ADC control 0					(RW)
   662  00A9                    ADC_CR1:		equ A9h			; ADC control 1					(RW)
   663  00AA                    ADC_CR2:		equ AAh			; ADC control 2					(RW)
   664  00AB                    ADC_CR3TRIM:	equ ABh			; ADC control 3					(RW)
   665  00AC                    ADC_CR4:		equ ACh			; ADC control 4					(RW)
   666  00E7                    VDAC_TRIM:		equ E7h			; V DAC trim					(RW)
   667                          
   668                          ;------------------------------------------------------
   669                          ;  Neon Current Sense CMP Registers
   670                          ;------------------------------------------------------
   671  0050                    CMP0CR1:		equ 50h			; CMP0 control 1				(RW)
   672  0051                    CMP0CR2:		equ 51h			; CMP0 control 2				(RW)
   673  0054                    CMP1CR1:		equ 54h			; CMP1 control 1				(RW)
   674  0055                    CMP1CR2:		equ 55h			; CMP1 control 2				(RW)
   675  0058                    CSCMPCR0:		equ 58h			; CSCMP control 0				(RW)
   676  0059                    CSCMPGOEN:		equ 59h			; CSCMO global out enable		(RW)
   677  005A                    CSLUTCR0:		equ 5Ah			; CSLUT control 0				(RW)
   678  005B                    CMPCOLMUX:		equ 5Bh			; CMP Column Mux				(RW)
   679  005C                    CMPPWMCR:		equ 5Ch			; CMP PWM control				(RW)
   680  005D                    CMPFLTCR:		equ 5Dh			; CMP filter control			(RW)
   681  005E                    CMPCLK1:		equ 5Eh			; CMP clock 1					(RW)
   682  005F                    CMPCLK0:		equ 5Fh			; CMP clock 0					(RW)
   683                          
   684                          ;------------------------------------------------------
   685                          ;  Neon Real Time Clock Registers
   686                          ;------------------------------------------------------
   687  00A4                    RTCH:			equ A4h			; Real time current hour		(RW)
   688  00A5                    RTCM:			equ A5h			; Real time current minute		(RW)
   689  00A6                    RTCS:			equ A6h			; Real time current second		(RW)
   690  00A7                    RTCCR:			equ A7h			; Real time clock control		(RW)
   691                          
   692                          ;------------------------------------------------------
   693                          ;  Analog MUX Config Registers
   694                          ;------------------------------------------------------
   695                          
   696  006A                    AMUX_CFG1:			equ 6Ah  ; Analog MUX Configuration 1
   697  0020                    AMUX_CFG1_GOINVR:	equ 20h  ;
   698  0010                    AMUX_CFG1_GOINVL:  	equ 10h	 ;
   699  000C                    AMUX_CFG1_AMUXMODR:	equ 0Ch	 ;
   700  0003                    AMUX_CFG1_AMUXMODL:	equ 03h	 ;
   701                          
   702                          ;;=============================================================================
   703                          ;;      M8C System Macros
   704                          ;;  These macros should be used when their functions are needed.
   705                          ;;=============================================================================
   706                          
   707                          ;----------------------------------------------------
   708                          ;  Swapping Register Banks
   709                          ;----------------------------------------------------
   710                              macro M8C_SetBank0
   711                              and   F, ~FLAG_XIO_MASK
   712  3D73                        endm
   713                          
   714                              macro M8C_SetBank1
   715                              or    F, FLAG_XIO_MASK
   716  3D73                        endm
   717                          
   718                          ;----------------------------------------------------
   719                          ;  Global Interrupt Enable/Disable
   720                          ;----------------------------------------------------
   721                              macro M8C_EnableGInt
   722                              or    F, FLAG_GLOBAL_IE
   723  3D73                        endm
   724                          
   725                              macro M8C_DisableGInt
   726                              and   F, ~FLAG_GLOBAL_IE
   727  3D73                        endm
   728                          
   729                          ;----------------------------------------------------
   730                          ;  Enable/Disable Interrupt Mask
   731                          ;
   732                          ;  Use the following macros to enable/disable
   733                          ;  bits in the Interrupt mask registers,
   734                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   735                          ;
   736                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   737                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   738                          ;
   739                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   740                          ;        and MASK is the bit set to enable or disable
   741                          ;----------------------------------------------------
   742                          ; Disable Interrupt Bit Mask(s)
   743                              macro M8C_DisableIntMask
   744                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   745  3D73                        endm
   746                          
   747                          ; Enable Interrupt Bit Mask(s)
   748                              macro M8C_EnableIntMask
   749                              or    reg[@0], @1               ; enable specified interrupt enable bit
   750  3D73                        endm
   751                          
   752                          ;----------------------------------------------------
   753                          ;  Clear Posted Interrupt Flag Mask
   754                          ;
   755                          ;  Use the following macros to clear the
   756                          ;  bits in the Interrupt Clear registers,
   757                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   758                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   759                          ;
   760                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   761                          ;        and MASK is the bit set to enable or disable
   762                          ;----------------------------------------------------
   763                              macro M8C_ClearIntFlag
   764                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   765  3D73                        endm
   766                          
   767                          ;----------------------------------------------------
   768                          ;  Power-On Reset & WatchDog Timer Functions
   769                          ;----------------------------------------------------
   770                              macro M8C_EnableWatchDog
   771                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   772  3D73                        endm
   773                          
   774                              macro M8C_ClearWDT
   775                              mov   reg[RES_WDT], 00h
   776  3D73                        endm
   777                          
   778                              macro M8C_ClearWDTAndSleep
   779                              mov   reg[RES_WDT], 38h
   780  3D73                        endm
   781                          
   782                          ;----------------------------------------------------
   783                          ;  Sleep, CPU Stop & Software Reset
   784                          ;----------------------------------------------------
   785                              macro M8C_Sleep
   786                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   787                              ; The next instruction to be executed depends on the state of the
   788                              ; various interrupt enable bits. If some interrupts are enabled
   789                              ; and the global interrupts are disabled, the next instruction will
   790                              ; be the one that follows the invocation of this macro. If global
   791                              ; interrupts are also enabled then the next instruction will be
   792                              ; from the interrupt vector table. If no interrupts are enabled
   793                              ; then the CPU sleeps forever.
   794  3D73                        endm
   795                          
   796                              macro M8C_Stop
   797                              ; In general, you probably don't want to do this, but here's how:
   798                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   799                              ; Next instruction to be executed is located in the interrupt
   800                              ; vector table entry for Power-On Reset.
   801  3D73                        endm
   802                          
   803                              macro M8C_Reset
   804                              ; Restore CPU to the power-on reset state.
   805                              mov A, 0
   806                              SSC
   807                              ; Next non-supervisor instruction will be at interrupt vector 0.
   808  3D73                        endm
   809                          
   810                          ;----------------------------------------------------
   811                          ; ImageCraft Code Compressor Actions
   812                          ;----------------------------------------------------
   813                              ; Suspend Code Compressor
   814                              ; Must not span a RET or RETI instruction
   815                              ; without resuming code compression
   816                              macro Suspend_CodeCompressor
   817                              or   F, 0
   818  3D73                        endm
   819                          
   820                              ; Resume Code Compression
   821                              macro Resume_CodeCompressor
   822                              add  SP, 0
   823  3D73                        endm
     1                          ;  Generated by PSoC Designer 5.4.2946
     2                          ;
     3                          ; =============================================================================
     4                          ; FILENAME: PSoCConfigTBL.asm
     5                          ;  
     6                          ; Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
     7                          ;  
     8                          ; NOTES:
     9                          ; Do not modify this file. It is generated by PSoC Designer each time the
    10                          ; generate application function is run. The values of the parameters in this
    11                          ; file can be modified by changing the values of the global parameters in the
    12                          ; device editor.
    13                          ;  
    14                          ; =============================================================================
    15                           
    16                          include "m8c.inc"
    17                          ;  Personalization tables 
    18                          export LoadConfigTBL_led_display_Bank1
    19                          export LoadConfigTBL_led_display_Bank0
    20                          export LoadConfigTBL_led_display_Ordered
    21                          AREA lit(rom, rel)
    22  2ACE                    LoadConfigTBL_led_display_Bank0:
    23                          ;  Instance name PWM8_BL, User Module PWM8
    24                          ;       Instance name PWM8_BL, Block Name PWM8(DBC10)
    25  2ACE  33 00             	db		33h, 00h		;PWM8_BL_CONTROL_REG(DBC10CR0)
    26  2AD0  31 00             	db		31h, 00h		;PWM8_BL_PERIOD_REG(DBC10DR1)
    27  2AD2  32 00             	db		32h, 00h		;PWM8_BL_COMPARE_REG(DBC10DR2)
    28                          ;  Instance name SAR10, User Module SAR10
    29                          ;  Instance name Timer16, User Module Timer16
    30                          ;       Instance name Timer16, Block Name TIMER16_LSB(DBC00)
    31  2AD4  23 00             	db		23h, 00h		;Timer16_CONTROL_LSB_REG(DBC00CR0)
    32  2AD6  21 80             	db		21h, 80h		;Timer16_PERIOD_LSB_REG(DBC00DR1)
    33  2AD8  22 28             	db		22h, 28h		;Timer16_COMPARE_LSB_REG(DBC00DR2)
    34                          ;       Instance name Timer16, Block Name TIMER16_MSB(DBC01)
    35  2ADA  27 04             	db		27h, 04h		;Timer16_CONTROL_MSB_REG(DBC01CR0)
    36  2ADC  25 25             	db		25h, 25h		;Timer16_PERIOD_MSB_REG(DBC01DR1)
    37  2ADE  26 23             	db		26h, 23h		;Timer16_COMPARE_MSB_REG(DBC01DR2)
    38                          ;  Instance name UART_Board, User Module UART
    39                          ;       Instance name UART_Board, Block Name RX(DCC13)
    40  2AE0  3F 00             	db		3fh, 00h		;UART_Board_RX_CONTROL_REG(DCC13CR0)
    41  2AE2  3D 00             	db		3dh, 00h		;UART_Board_(DCC13DR1)
    42  2AE4  3E 00             	db		3eh, 00h		;UART_Board_RX_BUFFER_REG (DCC13DR2)
    43                          ;       Instance name UART_Board, Block Name TX(DCC12)
    44  2AE6  3B 00             	db		3bh, 00h		;UART_Board_TX_CONTROL_REG(DCC12CR0)
    45  2AE8  39 00             	db		39h, 00h		;UART_Board_TX_BUFFER_REG (DCC12DR1)
    46  2AEA  3A 00             	db		3ah, 00h		;UART_Board_(DCC12DR2)
    47                          ;  Instance name UART_Sensor, User Module UART
    48                          ;       Instance name UART_Sensor, Block Name RX(DCC03)
    49  2AEC  2F 00             	db		2fh, 00h		;UART_Sensor_RX_CONTROL_REG(DCC03CR0)
    50  2AEE  2D 00             	db		2dh, 00h		;UART_Sensor_(DCC03DR1)
    51  2AF0  2E 00             	db		2eh, 00h		;UART_Sensor_RX_BUFFER_REG (DCC03DR2)
    52                          ;       Instance name UART_Sensor, Block Name TX(DCC02)
    53  2AF2  2B 00             	db		2bh, 00h		;UART_Sensor_TX_CONTROL_REG(DCC02CR0)
    54  2AF4  29 00             	db		29h, 00h		;UART_Sensor_TX_BUFFER_REG (DCC02DR1)
    55  2AF6  2A 00             	db		2ah, 00h		;UART_Sensor_(DCC02DR2)
    56                          ;  Global Register values Bank 0
    57  2AF8  6A 00             	db		6ah, 00h		; ADCDataHigh register (ADC_DH)
    58  2AFA  6B 00             	db		6bh, 00h		; ADCDataLow register (ADC_DL)
    59  2AFC  60 09             	db		60h, 09h		; AnalogColumnInputSelect register (AMX_IN)
    60  2AFE  66 00             	db		66h, 00h		; AnalogComparatorControl1 register (CMP_CR1)
    61  2B00  61 00             	db		61h, 00h		; AnalogMuxBusConfig register (AMUX_CFG)
    62  2B02  FC 00             	db		fch, 00h		; AnalogMuxDACData:0 register (IDACR_D)
    63  2B04  FD 00             	db		fdh, 00h		; AnalogMuxDACData:1 register (IDACL_D)
    64  2B06  65 00             	db		65h, 00h		; AnalogSynchronizationControl register (ASY_CR)
    65  2B08  53 00             	db		53h, 00h		; CSD0Control0 register (CSD0_CR0)
    66  2B0A  57 00             	db		57h, 00h		; CSD0Control1 register (CSD0_CR1)
    67  2B0C  56 00             	db		56h, 00h		; CSD0CounterHigh register (CSD0_CNT_H)
    68  2B0E  52 00             	db		52h, 00h		; CSD0CounterLow register (CSD0_CNT_L)
    69  2B10  54 00             	db		54h, 00h		; CSD0Data0High register (CSD0_DR0_H)
    70  2B12  50 00             	db		50h, 00h		; CSD0Data0Low register (CSD0_DR0_L)
    71  2B14  55 00             	db		55h, 00h		; CSD0Data1High register (CSD0_DR1_H)
    72  2B16  51 00             	db		51h, 00h		; CSD0Data1Low register (CSD0_DR1_L)
    73  2B18  5B 00             	db		5bh, 00h		; CSD1Control0 register (CSD1_CR0)
    74  2B1A  5F 00             	db		5fh, 00h		; CSD1Control1 register (CSD1_CR1)
    75  2B1C  5E 00             	db		5eh, 00h		; CSD1CounterHigh register (CSD1_CNT_H)
    76  2B1E  5A 00             	db		5ah, 00h		; CSD1CounterLow register (CSD1_CNT_L)
    77  2B20  5C 00             	db		5ch, 00h		; CSD1Data0High register (CSD1_DR0_H)
    78  2B22  58 00             	db		58h, 00h		; CSD1Data0Low register (CSD1_DR0_L)
    79  2B24  5D 00             	db		5dh, 00h		; CSD1Data1High register (CSD1_DR1_H)
    80  2B26  59 00             	db		59h, 00h		; CSD1Data1Low register (CSD1_DR1_L)
    81  2B28  E6 00             	db		e6h, 00h		; DecimatorControl_0 register (DEC_CR0)
    82  2B2A  E7 00             	db		e7h, 00h		; DecimatorControl_1 register (DEC_CR1)
    83  2B2C  E4 00             	db		e4h, 00h		; DecimatorDataHigh register (DEC_DH)
    84  2B2E  E5 00             	db		e5h, 00h		; DecimatorDataLow register (DEC_DL)
    85  2B30  D6 00             	db		d6h, 00h		; I2CConfig register (I2CCFG)
    86  2B32  CA 00             	db		cah, 00h		; IDACMode register (IDACMODE)
    87  2B34  CB 00             	db		cbh, 00h		; PWMSource register (PWMSRC)
    88  2B36  C8 00             	db		c8h, 00h		; PWMVoltageReference_0 register (PWMVREF0)
    89  2B38  C9 00             	db		c9h, 00h		; PWMVoltageReference_1 register (PWMVREF1)
    90  2B3A  62 00             	db		62h, 00h		; PWM_Control register (PWM_CR)
    91  2B3C  B7 00             	db		b7h, 00h		; RowDigitalInterconnectInputSelect:0 register (RDI0DSM)
    92  2B3E  BF 00             	db		bfh, 00h		; RowDigitalInterconnectInputSelect:1 register (RDI1DSM)
    93  2B40  B0 00             	db		b0h, 00h		; Row_0_InputMux register (RDI0RI)
    94  2B42  B1 00             	db		b1h, 00h		; Row_0_InputSync register (RDI0SYN)
    95  2B44  B2 00             	db		b2h, 00h		; Row_0_LogicInputAMux register (RDI0IS)
    96  2B46  B3 33             	db		b3h, 33h		; Row_0_LogicSelect_0 register (RDI0LT0)
    97  2B48  B4 33             	db		b4h, 33h		; Row_0_LogicSelect_1 register (RDI0LT1)
    98  2B4A  B5 01             	db		b5h, 01h		; Row_0_OutputDrive_0 register (RDI0SRO0)
    99  2B4C  B6 00             	db		b6h, 00h		; Row_0_OutputDrive_1 register (RDI0SRO1)
   100  2B4E  B8 55             	db		b8h, 55h		; Row_1_InputMux register (RDI1RI)
   101  2B50  B9 00             	db		b9h, 00h		; Row_1_InputSync register (RDI1SYN)
   102  2B52  BA 10             	db		bah, 10h		; Row_1_LogicInputAMux register (RDI1IS)
   103  2B54  BB 33             	db		bbh, 33h		; Row_1_LogicSelect_0 register (RDI1LT0)
   104  2B56  BC 33             	db		bch, 33h		; Row_1_LogicSelect_1 register (RDI1LT1)
   105  2B58  BD 02             	db		bdh, 02h		; Row_1_OutputDrive_0 register (RDI1SRO0)
   106  2B5A  BE 10             	db		beh, 10h		; Row_1_OutputDrive_1 register (RDI1SRO1)
   107  2B5C  CD 00             	db		cdh, 00h		; TSCMPHigh register (TSCMPH)
   108  2B5E  CE 00             	db		ceh, 00h		; TSCMPLow register (TSCMPL)
   109  2B60  CC 00             	db		cch, 00h		; TSource:0 register (TSCR0)
   110  2B62  CF 00             	db		cfh, 00h		; TSource:1 register (TSCR1)
   111  2B64  FF                	db		ffh
   112  2B65                    LoadConfigTBL_led_display_Bank1:
   113                          ;  Instance name PWM8_BL, User Module PWM8
   114                          ;       Instance name PWM8_BL, Block Name PWM8(DBC10)
   115  2B65  33 00             	db		33h, 00h		;PWM8_BL_(DBC10CR1)
   116  2B67  30 21             	db		30h, 21h		;PWM8_BL_FUNC_REG(DBC10FN)
   117  2B69  31 11             	db		31h, 11h		;PWM8_BL_INPUT_REG(DBC10IN)
   118  2B6B  32 07             	db		32h, 07h		;PWM8_BL_OUTPUT_REG(DBC10OU)
   119                          ;  Instance name SAR10, User Module SAR10
   120                          ;  Instance name Timer16, User Module Timer16
   121                          ;       Instance name Timer16, Block Name TIMER16_LSB(DBC00)
   122  2B6D  23 00             	db		23h, 00h		;Timer16_(DBC00CR1)
   123  2B6F  20 00             	db		20h, 00h		;Timer16_FUNC_LSB_REG(DBC00FN)
   124  2B71  21 01             	db		21h, 01h		;Timer16_INPUT_LSB_REG(DBC00IN)
   125  2B73  22 40             	db		22h, 40h		;Timer16_OUTPUT_LSB_REG(DBC00OU)
   126                          ;       Instance name Timer16, Block Name TIMER16_MSB(DBC01)
   127  2B75  27 00             	db		27h, 00h		;Timer16_(DBC01CR1)
   128  2B77  24 20             	db		24h, 20h		;Timer16_FUNC_MSB_REG(DBC01FN)
   129  2B79  25 31             	db		25h, 31h		;Timer16_INPUT_MSB_REG(DBC01IN)
   130  2B7B  26 40             	db		26h, 40h		;Timer16_OUTPUT_MSB_REG(DBC01OU)
   131                          ;  Instance name UART_Board, User Module UART
   132                          ;       Instance name UART_Board, Block Name RX(DCC13)
   133  2B7D  3F 00             	db		3fh, 00h		;UART_Board_(DCC13CR1)
   134  2B7F  3C 05             	db		3ch, 05h		;UART_Board_RX_FUNC_REG   (DCC13FN)
   135  2B81  3D C1             	db		3dh, c1h		;UART_Board_RX_INPUT_REG  (DCC13IN)
   136  2B83  3E 40             	db		3eh, 40h		;UART_Board_RX_OUTPUT_REG (DCC13OU)
   137                          ;       Instance name UART_Board, Block Name TX(DCC12)
   138  2B85  3B 00             	db		3bh, 00h		;UART_Board_(DCC12CR1)
   139  2B87  38 1D             	db		38h, 1dh		;UART_Board_TX_FUNC_REG   (DCC12FN)
   140  2B89  39 01             	db		39h, 01h		;UART_Board_TX_INPUT_REG  (DCC12IN)
   141  2B8B  3A 44             	db		3ah, 44h		;UART_Board_TX_OUTPUT_REG (DCC12OU)
   142                          ;  Instance name UART_Sensor, User Module UART
   143                          ;       Instance name UART_Sensor, Block Name RX(DCC03)
   144  2B8D  2F 00             	db		2fh, 00h		;UART_Sensor_(DCC03CR1)
   145  2B8F  2C 05             	db		2ch, 05h		;UART_Sensor_RX_FUNC_REG   (DCC03FN)
   146  2B91  2D C1             	db		2dh, c1h		;UART_Sensor_RX_INPUT_REG  (DCC03IN)
   147  2B93  2E 40             	db		2eh, 40h		;UART_Sensor_RX_OUTPUT_REG (DCC03OU)
   148                          ;       Instance name UART_Sensor, Block Name TX(DCC02)
   149  2B95  2B 00             	db		2bh, 00h		;UART_Sensor_(DCC02CR1)
   150  2B97  28 1D             	db		28h, 1dh		;UART_Sensor_TX_FUNC_REG   (DCC02FN)
   151  2B99  29 01             	db		29h, 01h		;UART_Sensor_TX_INPUT_REG  (DCC02IN)
   152  2B9B  2A 44             	db		2ah, 44h		;UART_Sensor_TX_OUTPUT_REG (DCC02OU)
   153                          ;  Global Register values Bank 1
   154  2B9D  A8 60             	db		a8h, 60h		; ADCControl0 register (ADC_CR0)
   155  2B9F  A9 0A             	db		a9h, 0ah		; ADCControl1 register (ADC_CR1)
   156  2BA1  AA 00             	db		aah, 00h		; ADCControl2 register (ADC_CR2)
   157  2BA3  AB 00             	db		abh, 00h		; ADCControl3 register (ADC_CR3TRIM)
   158  2BA5  AC 00             	db		ach, 00h		; ADCControl4 register (ADC_CR4)
   159  2BA7  61 00             	db		61h, 00h		; AnalogClockSelect1 register (CLK_CR1)
   160  2BA9  69 00             	db		69h, 00h		; AnalogClockSelect2 register (CLK_CR2)
   161  2BAB  60 00             	db		60h, 00h		; AnalogColumnClockSelect register (CLK_CR0)
   162  2BAD  62 00             	db		62h, 00h		; AnalogIOControl_0 register (ABF_CR0)
   163  2BAF  67 33             	db		67h, 33h		; AnalogLUTControl0 register (ALT_CR0)
   164  2BB1  68 00             	db		68h, 00h		; AnalogLUTControl1 register (ALT_CR1)
   165  2BB3  5F 00             	db		5fh, 00h		; CMPClock:0 register (CMPCLK0)
   166  2BB5  5E 00             	db		5eh, 00h		; CMPClock:1 register (CMPCLK1)
   167  2BB7  5B 02             	db		5bh, 02h		; CMPColumnMux register (CMPCOLMUX)
   168  2BB9  5D 00             	db		5dh, 00h		; CMPFilterControl register (CMPFLTCR)
   169  2BBB  5C 00             	db		5ch, 00h		; CMPPWMControl register (CMPPWMCR)
   170  2BBD  59 00             	db		59h, 00h		; CSCMOGlobalOutEnable register (CSCMPGOEN)
   171  2BBF  58 00             	db		58h, 00h		; CSCMPControl:0 register (CSCMPCR0)
   172  2BC1  5A 33             	db		5ah, 33h		; CSLUTControl register (CSLUTCR0)
   173  2BC3  64 00             	db		64h, 00h		; ComparatorGlobalOutEn register (CMP_GO_EN)
   174  2BC5  65 00             	db		65h, 00h		; ComparatorGlobalOutEn1 register (CMP_GO_EN1)
   175  2BC7  FD 00             	db		fdh, 00h		; DAC_Control register (DAC_CR0)
   176  2BC9  DC 00             	db		dch, 00h		; DAC_Control_1 register (DAC_CR1)
   177  2BCB  D1 00             	db		d1h, 00h		; GlobalDigitalInterconnect_Drive_Even_Input register (GDI_E_IN)
   178  2BCD  A1 00             	db		a1h, 00h		; GlobalDigitalInterconnect_Drive_Even_Input_Control register (GDI_E_IN_CR)
   179  2BCF  D3 00             	db		d3h, 00h		; GlobalDigitalInterconnect_Drive_Even_Output register (GDI_E_OU)
   180  2BD1  A3 00             	db		a3h, 00h		; GlobalDigitalInterconnect_Drive_Even_Output_Control register (GDI_E_OU_CR)
   181  2BD3  D0 00             	db		d0h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Input register (GDI_O_IN)
   182  2BD5  A0 00             	db		a0h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Input_Control register (GDI_O_IN_CR)
   183  2BD7  D2 00             	db		d2h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Output register (GDI_O_OU)
   184  2BD9  A2 00             	db		a2h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Output_Control register (GDI_O_OU_CR)
   185  2BDB  AD 00             	db		adh, 00h		; I2CAddress register (I2C_ADDR)
   186  2BDD  E1 7F             	db		e1h, 7fh		; OscillatorControl_1 register (OSC_CR1)
   187  2BDF  E2 00             	db		e2h, 00h		; OscillatorControl_2 register (OSC_CR2)
   188  2BE1  DF 26             	db		dfh, 26h		; OscillatorControl_3 register (OSC_CR3)
   189  2BE3  DE 01             	db		deh, 01h		; OscillatorControl_4 register (OSC_CR4)
   190  2BE5  DD 00             	db		ddh, 00h		; OscillatorGlobalBusEnableControl register (OSC_GO_EN)
   191  2BE7  D8 00             	db		d8h, 00h		; Port_0_MUXBusCtrl register (MUX_CR0)
   192  2BE9  D9 00             	db		d9h, 00h		; Port_1_MUXBusCtrl register (MUX_CR1)
   193  2BEB  DA 00             	db		dah, 00h		; Port_2_MUXBusCtrl register (MUX_CR2)
   194  2BED  DB 00             	db		dbh, 00h		; Port_3_MUXBusCtrl register (MUX_CR3)
   195  2BEF  EC 00             	db		ech, 00h		; Port_4_MUXBusCtrl register (MUX_CR4)
   196  2BF1  A7 00             	db		a7h, 00h		; RTClockControl register (RTCCR)
   197  2BF3  A4 00             	db		a4h, 00h		; RTCurrentHour register (RTCH)
   198  2BF5  A5 00             	db		a5h, 00h		; RTCurrentMinute register (RTCM)
   199  2BF7  A6 00             	db		a6h, 00h		; RTCurrentSecond register (RTCS)
   200  2BF9  53 00             	db		53h, 00h		; VDAC5Control0:0 register (VDAC50CR0)
   201  2BFB  57 00             	db		57h, 00h		; VDAC5Control0:1 register (VDAC51CR0)
   202  2BFD  E7 00             	db		e7h, 00h		; VDACTrim register (VDAC_TRIM)
   203  2BFF  FF                	db		ffh
   204                          AREA psoc_config(rom, rel)
   205  2A29                    LoadConfigTBL_led_display_Ordered:
   206                          ;  Ordered Global Register values
   207  2A29  70 EF             	M8C_SetBank0
   208  2A2B  62 00 EE          	mov	reg[00h], eeh		; Port_0_Data register (PRT0DR)
   209  2A2E  71 10             	M8C_SetBank1
   210  2A30  62 00 FE          	mov	reg[00h], feh		; Port_0_DriveMode_0 register (PRT0DM0)
   211  2A33  62 01 01          	mov	reg[01h], 01h		; Port_0_DriveMode_1 register (PRT0DM1)
   212  2A36  70 EF             	M8C_SetBank0
   213  2A38  62 03 00          	mov	reg[03h], 00h		; Port_0_DriveMode_2 register (PRT0DM2)
   214  2A3B  62 02 11          	mov	reg[02h], 11h		; Port_0_GlobalSelect register (PRT0GS)
   215  2A3E  71 10             	M8C_SetBank1
   216  2A40  62 02 00          	mov	reg[02h], 00h		; Port_0_IntCtrl_0 register (PRT0IC0)
   217  2A43  62 03 00          	mov	reg[03h], 00h		; Port_0_IntCtrl_1 register (PRT0IC1)
   218  2A46  70 EF             	M8C_SetBank0
   219  2A48  62 01 00          	mov	reg[01h], 00h		; Port_0_IntEn register (PRT0IE)
   220  2A4B  62 04 A0          	mov	reg[04h], a0h		; Port_1_Data register (PRT1DR)
   221  2A4E  71 10             	M8C_SetBank1
   222  2A50  62 04 A0          	mov	reg[04h], a0h		; Port_1_DriveMode_0 register (PRT1DM0)
   223  2A53  62 05 FF          	mov	reg[05h], ffh		; Port_1_DriveMode_1 register (PRT1DM1)
   224  2A56  70 EF             	M8C_SetBank0
   225  2A58  62 07 EF          	mov	reg[07h], efh		; Port_1_DriveMode_2 register (PRT1DM2)
   226  2A5B  62 06 00          	mov	reg[06h], 00h		; Port_1_GlobalSelect register (PRT1GS)
   227  2A5E  71 10             	M8C_SetBank1
   228  2A60  62 06 00          	mov	reg[06h], 00h		; Port_1_IntCtrl_0 register (PRT1IC0)
   229  2A63  62 07 00          	mov	reg[07h], 00h		; Port_1_IntCtrl_1 register (PRT1IC1)
   230  2A66  70 EF             	M8C_SetBank0
   231  2A68  62 05 00          	mov	reg[05h], 00h		; Port_1_IntEn register (PRT1IE)
   232  2A6B  62 08 00          	mov	reg[08h], 00h		; Port_2_Data register (PRT2DR)
   233  2A6E  71 10             	M8C_SetBank1
   234  2A70  62 08 29          	mov	reg[08h], 29h		; Port_2_DriveMode_0 register (PRT2DM0)
   235  2A73  62 09 D6          	mov	reg[09h], d6h		; Port_2_DriveMode_1 register (PRT2DM1)
   236  2A76  70 EF             	M8C_SetBank0
   237  2A78  62 0B C6          	mov	reg[0bh], c6h		; Port_2_DriveMode_2 register (PRT2DM2)
   238  2A7B  62 0A 19          	mov	reg[0ah], 19h		; Port_2_GlobalSelect register (PRT2GS)
   239  2A7E  71 10             	M8C_SetBank1
   240  2A80  62 0A 00          	mov	reg[0ah], 00h		; Port_2_IntCtrl_0 register (PRT2IC0)
   241  2A83  62 0B 00          	mov	reg[0bh], 00h		; Port_2_IntCtrl_1 register (PRT2IC1)
   242  2A86  70 EF             	M8C_SetBank0
   243  2A88  62 09 00          	mov	reg[09h], 00h		; Port_2_IntEn register (PRT2IE)
   244  2A8B  62 0C 00          	mov	reg[0ch], 00h		; Port_3_Data register (PRT3DR)
   245  2A8E  71 10             	M8C_SetBank1
   246  2A90  62 0C 00          	mov	reg[0ch], 00h		; Port_3_DriveMode_0 register (PRT3DM0)
   247  2A93  62 0D 00          	mov	reg[0dh], 00h		; Port_3_DriveMode_1 register (PRT3DM1)
   248  2A96  70 EF             	M8C_SetBank0
   249  2A98  62 0F 00          	mov	reg[0fh], 00h		; Port_3_DriveMode_2 register (PRT3DM2)
   250  2A9B  62 0E 00          	mov	reg[0eh], 00h		; Port_3_GlobalSelect register (PRT3GS)
   251  2A9E  71 10             	M8C_SetBank1
   252  2AA0  62 0E 00          	mov	reg[0eh], 00h		; Port_3_IntCtrl_0 register (PRT3IC0)
   253  2AA3  62 0F 00          	mov	reg[0fh], 00h		; Port_3_IntCtrl_1 register (PRT3IC1)
   254  2AA6  70 EF             	M8C_SetBank0
   255  2AA8  62 0D 00          	mov	reg[0dh], 00h		; Port_3_IntEn register (PRT3IE)
   256  2AAB  62 10 00          	mov	reg[10h], 00h		; Port_4_Data register (PRT4DR)
   257  2AAE  71 10             	M8C_SetBank1
   258  2AB0  62 10 00          	mov	reg[10h], 00h		; Port_4_DriveMode_0 register (PRT4DM0)
   259  2AB3  62 11 00          	mov	reg[11h], 00h		; Port_4_DriveMode_1 register (PRT4DM1)
   260  2AB6  70 EF             	M8C_SetBank0
   261  2AB8  62 13 00          	mov	reg[13h], 00h		; Port_4_DriveMode_2 register (PRT4DM2)
   262  2ABB  62 12 00          	mov	reg[12h], 00h		; Port_4_GlobalSelect register (PRT4GS)
   263  2ABE  71 10             	M8C_SetBank1
   264  2AC0  62 12 00          	mov	reg[12h], 00h		; Port_4_IntCtrl_0 register (PRT4IC0)
   265  2AC3  62 13 00          	mov	reg[13h], 00h		; Port_4_IntCtrl_1 register (PRT4IC1)
   266  2AC6  70 EF             	M8C_SetBank0
   267  2AC8  62 11 00          	mov	reg[11h], 00h		; Port_4_IntEn register (PRT4IE)
   268  2ACB  70 EF             	M8C_SetBank0
   269  2ACD  7F                	ret
HI-TECH Software Macro Assembler (PSoC MCU) V9.61
Symbol Table                                                                                               Thu Jul 09 11:34:28 2015
  LoadConfigTBL_led_display_Bank0 2ACE    LoadConfigTBL_led_display_Bank1 2B65  LoadConfigTBL_led_display_Ordered 2A29  
                    FLAG_XIO_MASK 0010  
HI-TECH Software Macro Assembler (PSoC MCU) V9.61
                                                                                                           Thu Jul 09 11:34:28 2015
     1                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     2                          ;;;
     3                          ;;;  M8C.INC -- Microcontroller Device System Declarations
     4                          ;;;
     5                          ;;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
     6                          ;;;
     7                          ;;;  This file provides address constants, bit field masks and a set of macro
     8                          ;;;  facilities for the Cypress Semiconductor CY8C22045 Microcontroller devices.
     9                          ;;;
    10                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    11                          
    12                          ;;=============================================================================
    13                          ;; Definition of abbreviations used in the descriptions below
    14                          ;;  (RW)   The register or bit supports reads and writes
    15                          ;;  (W)    The register or bit is write-only
    16                          ;;  (R)    The register or bit is read-only
    17                          ;;  (#)    Access to the register is bit specific (see the family datasheet)
    18                          ;;  (RC)   The register or bit can be read, but writing a 0 will clear it,
    19                          ;;         writing a 1 will have no effect.
    20                          ;;=============================================================================
    21                          
    22                          ;;=============================================================================
    23                          ;;      System Registers
    24                          ;;=============================================================================
    25                          
    26                          ;----------------------------
    27                          ;  Flag Register Bit Fields
    28                          ;----------------------------
    29  00C0                    FLAG_PGMODE_MASK:  equ 0C0h     ; Paging control for > 256 bytes of RAM
    30  0000                    FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
    31  0040                    FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
    32  0080                    FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
    33  00C0                    FLAG_PGMODE_3:     equ 0C0h       ; Direct to CUR_PP page, indexed to STK_PP page
    34  0000                    FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
    35  0040                    FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
    36  0080                    FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
    37  00C0                    FLAG_PGMODE_11b:   equ 0C0h       ; Same as PGMODE_3
    38  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    39  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    40  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    41  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    42  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    43                          
    44                          
    45                          ;;=============================================================================
    46                          ;;      Register Space, Bank 0
    47                          ;;=============================================================================
    48                          
    49                          ;------------------------------------------------
    50                          ;  Port Registers
    51                          ;  Note: Also see this address range in Bank 1.
    52                          ;------------------------------------------------
    53                          ; Port 0
    54  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    55  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    56  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    57  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    58                          ; Port 1
    59  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    60  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    61  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    62  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    63                          ; Port 2
    64  0008                    PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
    65  0009                    PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
    66  000A                    PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
    67  000B                    PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
    68                          ; Port 3
    69  000C                    PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
    70  000D                    PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
    71  000E                    PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
    72  000F                    PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
    73                          ; Port 4
    74  0010                    PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
    75  0011                    PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
    76  0012                    PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
    77  0013                    PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
    78                          
    79                          ;------------------------------------------------
    80                          ;  Digital PSoC(tm) block Registers
    81                          ;  Note: Also see this address range in Bank 1.
    82                          ;------------------------------------------------
    83                          ; Digital PSoC block 00, Basic Type C
    84  0020                    DBC00DR0:     equ 20h          ; data register 0                          (#)
    85  0021                    DBC00DR1:     equ 21h          ; data register 1                          (W)
    86  0022                    DBC00DR2:     equ 22h          ; data register 2                          (RW)
    87  0023                    DBC00CR0:     equ 23h          ; control & status register 0              (#)
    88                          
    89                          ; Digital PSoC block 01, Basic Type C
    90  0024                    DBC01DR0:     equ 24h          ; data register 0                          (#)
    91  0025                    DBC01DR1:     equ 25h          ; data register 1                          (W)
    92  0026                    DBC01DR2:     equ 26h          ; data register 2                          (RW)
    93  0027                    DBC01CR0:     equ 27h          ; control & status register 0              (#)
    94                          
    95                          ; Digital PSoC block 02, Communications Type C
    96  0028                    DCC02DR0:     equ 28h          ; data register 0                          (#)
    97  0029                    DCC02DR1:     equ 29h          ; data register 1                          (W)
    98  002A                    DCC02DR2:     equ 2Ah          ; data register 2                          (RW)
    99  002B                    DCC02CR0:     equ 2Bh          ; control & status register 0              (#)
   100                          
   101                          ; Digital PSoC block 03, Communications Type C
   102  002C                    DCC03DR0:     equ 2Ch          ; data register 0                          (#)
   103  002D                    DCC03DR1:     equ 2Dh          ; data register 1                          (W)
   104  002E                    DCC03DR2:     equ 2Eh          ; data register 2                          (RW)
   105  002F                    DCC03CR0:     equ 2Fh          ; control & status register 0              (#)
   106                          
   107                          ; Digital PSoC block 10, Basic Type C
   108  0030                    DBC10DR0:     equ 30h          ; data register 0                          (#)
   109  0031                    DBC10DR1:     equ 31h          ; data register 1                          (W)
   110  0032                    DBC10DR2:     equ 32h          ; data register 2                          (RW)
   111  0033                    DBC10CR0:     equ 33h          ; control & status register 0              (#)
   112                          
   113                          ; Digital PSoC block 11, Basic Type C
   114  0034                    DBC11DR0:     equ 34h          ; data register 0                          (#)
   115  0035                    DBC11DR1:     equ 35h          ; data register 1                          (W)
   116  0036                    DBC11DR2:     equ 36h          ; data register 2                          (RW)
   117  0037                    DBC11CR0:     equ 37h          ; control & status register 0              (#)
   118                          
   119                          ; Digital PSoC block 12, Communications Type C
   120  0038                    DCC12DR0:     equ 38h          ; data register 0                          (#)
   121  0039                    DCC12DR1:     equ 39h          ; data register 1                          (W)
   122  003A                    DCC12DR2:     equ 3Ah          ; data register 2                          (RW)
   123  003B                    DCC12CR0:     equ 3Bh          ; control & status register 0              (#)
   124                          
   125                          ; Digital PSoC block 13, Communications Type C
   126  003C                    DCC13DR0:     equ 3Ch          ; data register 0                          (#)
   127  003D                    DCC13DR1:     equ 3Dh          ; data register 1                          (W)
   128  003E                    DCC13DR2:     equ 3Eh          ; data register 2                          (RW)
   129  003F                    DCC13CR0:     equ 3Fh          ; control & status register 0              (#)
   130                          
   131                          ;-------------------------------------
   132                          ;  Analog Control Registers
   133                          ;-------------------------------------
   134  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
   135  00C0                    AMX_IN_ACI3:          equ C0h    ; MASK: column 3 input mux
   136  0030                    AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
   137  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
   138  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
   139                          
   140  0061                    AMUX_CFG:      equ 61h          ; Analog MUX Configuration
   141  0030                    AMUX_CFG_INTCAP:       equ 30h    ;
   142  000E                    AMUX_CFG_MUXCLK:  	  equ 0Eh	 ;
   143  0001                    AMUX_CFG_EN:		  	  equ 01h	 ;
   144                          
   145                          ; old declarations DO NOT USE
   146  0061                    AMUXCFG:      equ 61h          ; Analog MUX Configuration
   147  0030                    AMUXCFG_INTCAP:       equ 30h    ;
   148  000E                    AMUXCFG_MUXCLK:  	  equ 0Eh	 ;
   149  0001                    AMUXCFG_EN:		  	  equ 01h	 ;
   150                          
   151  0062                    PWM_CR:       equ 62h          ; Pulse-Width Modulator Control
   152  0038                    PWM_CR_HIGH:          equ 38h    ; MASK: PWM high time
   153  0006                    PWM_CR_LOW:           equ 06h	 ; MASK: PWM low time
   154  0001                    PWM_CR_EN:            equ 01h	 ; MASK: Enable/Disable PWM function
   155                          
   156  0063                    ARF_CR:       equ 63h          ; Analog Reference Control
   157                          
   158  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus Register           (#)
   159  0080                    CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
   160  0040                    CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
   161  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
   162  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
   163  0008                    CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
   164  0004                    CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
   165  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
   166  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   167                          
   168  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   169  0020                    CMP_CR1_CLDIS1:       equ 20h    ; MASK: Column 1 comparator output latch
   170  0010                    CMP_CR1_CLDIS0:	      equ 10h    ; MASK: Column 0 comparator output latch
   171                          
   172  0068                    ADC0_CR:      equ 68h          ; Analog Column 0 Configuration
   173  0080                    ADC0_CR_CMPST:        equ 80h    ;
   174  0040                    ADC0_CR_LOREN:        equ 40h    ;
   175  0020                    ADC0_CR_SHEN:         equ 20h    ;
   176  0008                    ADC0_CR_CBSRC:        equ 08h    ;
   177  0004                    ADC0_CR_ADCM:         equ 04h    ;
   178  0001                    ADC0_CR_EN:	          equ 01h    ;
   179                          
   180  0069                    ADC1_CR:      equ 69h          ; Analog Column 1 Configuration
   181  0080                    ADC1_CR_CMPST:        equ 80h    ;
   182  0040                    ADC1_CR_LOREN:        equ 40h    ;
   183  0020                    ADC1_CR_SHEN:         equ 20h    ;
   184  0008                    ADC1_CR_CBSRC:        equ 08h    ;
   185  0004                    ADC1_CR_ADCM:         equ 04h    ;
   186  0001                    ADC1_CR_EN:	          equ 01h    ;
   187                          
   188                          ; Continuous Time PSoC block Type E Row 0 Col 0
   189  0072                    ACE00CR1:     equ 72h          ; Control register 1                       (RW)
   190  0073                    ACE00CR2:     equ 73h          ; Control register 2                       (RW)
   191                          
   192                          ; Continuous Time PSoC block Type E Row 0 Col 1
   193  0076                    ACE01CR1:     equ 76h          ; Control register 1                       (RW)
   194  0077                    ACE01CR2:     equ 77h          ; Control register 2                       (RW)
   195                          
   196                          ; Switched Cap PSoC blockType E Row 1 Col 0
   197  0080                    ASE10CR0:     equ 80h          ; Control register 0                       (RW)
   198                          
   199                          ; Switched Cap PSoC blockType E Row 1 Col 1
   200  0084                    ASE11CR0:     equ 84h          ; Control register 0                       (RW)
   201                          
   202                          ;-----------------------------------------------
   203                          ;  Global General Purpose Data Registers
   204                          ;-----------------------------------------------
   205  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   206  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   207  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   208  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   209                          
   210                          ;------------------------------------------------
   211                          ;  Row Digital Interconnects
   212                          ;
   213                          ;  Note: the following registers are mapped into
   214                          ;  both register bank 0 AND register bank 1.
   215                          ;------------------------------------------------
   216                          
   217  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   218  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   219  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   220  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   221  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   222  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   223  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   224                          
   225  00B8                    RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
   226  00B9                    RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
   227  00BA                    RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
   228  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   229  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   230  00BD                    RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
   231  00BE                    RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
   232                          
   233                          ;-----------------------------------------------
   234                          ;  Ram Page Pointers
   235                          ;-----------------------------------------------
   236  00D0                    CUR_PP:      equ 0D0h           ; Current   Page Pointer
   237  00D1                    STK_PP:      equ 0D1h           ; Stack     Page Pointer
   238  00D3                    IDX_PP:      equ 0D3h           ; Index     Page Pointer
   239  00D4                    MVR_PP:      equ 0D4h           ; MVI Read  Page Pointer
   240  00D5                    MVW_PP:      equ 0D5h           ; MVI Write Page Pointer
   241                          
   242                          ;------------------------------------------------
   243                          ;  I2C Configuration Registers
   244                          ;------------------------------------------------
   245  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   246  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   247  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   248  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   249  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   250  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   251  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   252  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   253  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   254  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   255                          
   256  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   257  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   258  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   259  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   260  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   261  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   262  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   263  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   264  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   265                          
   266  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   267                          
   268  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   269  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   270  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   271  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   272  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   273                          
   274                          ;------------------------------------------------
   275                          ;  System and Global Resource Registers
   276                          ;------------------------------------------------
   277  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   278                                                         ; Use INT_MSK0 bit field masks
   279  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   280                                                         ; Use INT_MSK1 bit field masks
   281  00DC                    INT_CLR2:     equ 0DCh          ; Interrupt Clear Register 2               (RW)
   282                                                         ; Use INT_MSK2 bit field masks
   283  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   284                                                         ; Use INT_MSK3 bit field masks
   285                          
   286  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   287  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   288  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   289                          
   290  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   291  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   292  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   293  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   294  0010                    INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
   295  0008                    INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
   296  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   297  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   298  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   299                          
   300  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   301  0080                    INT_MSK1_DCC13:            equ 80h ; MASK: enable/disable DCC13 block interrupt
   302  0040                    INT_MSK1_DCC12:            equ 40h ; MASK: enable/disable DCC12 block interrupt
   303  0020                    INT_MSK1_DBC11:            equ 20h ; MASK: enable/disable DBC11 block interrupt
   304  0010                    INT_MSK1_DBC10:            equ 10h ; MASK: enable/disable DBC10 block interrupt
   305+ 0008                    INT_MSK1_DCC03:            equ 08h ; MASK: enable/disable DCC03 block interrupt
   306  0004                    INT_MSK1_DCC02:            equ 04h ; MASK: enable/disable DCC02 block interrupt
   307  0002                    INT_MSK1_DBC01:            equ 02h ; MASK: enable/disable DBC01 block interrupt
   308  0001                    INT_MSK1_DBC00:            equ 01h ; MASK: enable/disable DBC00 block interrupt
   309                          
   310  00DF                    INT_MSK2:     equ DFh			; Custom block Mask Register			   (RW)
   311  0010                    INT_MSK2_SARADC:           equ 10h ; MASK: enable/disable SARADC block interrupt
   312  0020                    INT_MSK2_CSD0:             equ 20h ; MASK: enable/disable CSD0 block interrupt
   313  0040                    INT_MSK2_CSD1:             equ 40h ; MASK: enable/disable CSD1 block interrupt
   314  0080                    INT_MSK2_RTC:              equ 80h ; MASK: enable/disable RTC block interrupt
   315                          
   316  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   317  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   318                          
   319                          ;------------------------------------------------------
   320                          ;  MAC Registers
   321                          ;------------------------------------------------------
   322                          
   323  00E8                    MUL0_X:       equ 0E8h          ; Multiply Input X Register                (W)
   324  00E9                    MUL0_Y:       equ 0E9h          ; Multiply Input Y Register                (W)
   325  00EA                    MUL0_DH:      equ 0EAh          ; Multiply Result High Byte Register       (R)
   326  00EB                    MUL0_DL:      equ 0EBh          ; Multiply Result Low Byte Register        (R)
   327                          
   328  00EC                    ACC0_DR1:     equ 0ECh          ; Accumulator Data Register 1              (RW)
   329+ 00ED                    ACC0_DR0:     equ 0EDh          ; Accumulator Data Register 0              (RW)
   330+ 00EE                    ACC0_DR3:     equ 0EEh          ; Accumulator Data Register 3              (RW)
   331  00EF                    ACC0_DR2:     equ 0EFh          ; Accumulator Data Register 2              (RW)
   332                          
   333                          ; DECIMATOR Control Registers
   334  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   335  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   336                          
   337                          ;------------------------------------------------------
   338                          ;  System Status and Control Registers
   339                          ;
   340                          ;  Note: The following registers are mapped into both
   341                          ;        register bank 0 AND register bank 1.
   342                          ;------------------------------------------------------
   343  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   344                                                             ; Use FLAG_ masks defined at top of file
   345                          
   346  00FD                    DAC_D:        equ 0FDh		   ; DAC Data Register                        (RW)
   347                          
   348  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   349  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: flag, Internal Reset Status bit
   350  0010                    CPU_SCR1_SLIMO:         equ 10h	   ; MASK: Slow IMO (internal main osc) enable
   351  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   352  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   353  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   354                          
   355  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   356  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   357  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   358  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   359  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   360  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   361                          
   362                          ;------------------------------------------------------
   363                          ;  Neon Capsense Digital Control Registers
   364                          ;------------------------------------------------------
   365  0050                    CSD0_DR0_L:				equ 50h		; Capsense 0 data low 0				(RW)
   366  0054                    CSD0_DR0_H:				equ 54h		; Capsense 0 data high 0			(RW)
   367  0058                    CSD1_DR0_L:				equ 58h		; Capsense 1 data low 0				(RW)
   368  005C                    CSD1_DR0_H:				equ 5Ch		; Capsense 1 data high 0			(RW)
   369  0051                    CSD0_DR1_L:				equ 51h		; Capsense 0 data low 1				(RW)
   370  0055                    CSD0_DR1_H:				equ 55h		; Capsense 0 data high 1			(RW)
   371  0059                    CSD1_DR1_L:				equ 59h		; Capsense 1 data low 1				(RW)
   372  005D                    CSD1_DR1_H:				equ 5Dh		; Capsense 1 data high 1			(RW)
   373  0052                    CSD0_CNT_L:				equ 52h		; Capsense 0 counter low			(RW)
   374  0056                    CSD0_CNT_H:				equ 56h		; Capsense 0 counter high			(RW)
   375  005A                    CSD1_CNT_L:				equ 5Ah		; Capsense 1 counter low			(RW)
   376  005E                    CSD1_CNT_H:				equ	5Eh		; Capsense 1 counter high			(RW)
   377  0053                    CSD0_CR0:				equ 53h		; Capsense 0 control 0				(RW)
   378  005B                    CSD1_CR0:				equ 5Bh		; Capsense 1 control 0				(RW)
   379  0057                    CSD0_CR1:				equ 57h		; Capsense 0 control 1				(RW)
   380  005F                    CSD1_CR1:				equ 5Fh		; Capsense 1 control 1				(RW)
   381                          
   382                          ;------------------------------------------------------
   383                          ;  Neon Analog Registers
   384                          ;------------------------------------------------------
   385  0065                    ASY_CR:					equ 65h		; Analog Synchronization Control	(RW)
   386  006A                    ADC_DH:					equ 6Ah		; ADC data high						(RW)
   387  006B                    ADC_DL:					equ 6Bh		; ADC data low						(RW)
   388  00C8                    PWMVREF0:				equ C8h		; PWM Voltage Reference 0			(RW)
   389  00C9                    PWMVREF1:				equ C9h		; PWM Voltage Reference 1			(RW)
   390  00CB                    PWMSRC:					equ CBh		; PWM Source						(RW)
   391  00CA                    IDACMODE:				equ CAh		; IDAC Mode							(RW)
   392  00FC                    IDACR_D:				equ FCh		; Analog Mux DAC data 0				(RW)
   393  00FD                    IDACL_D:				equ FDh		; Analog Mux DAC data 1				(RW)
   394                          
   395                          ;------------------------------------------------------
   396                          ;  Neon Digital Registers
   397                          ;------------------------------------------------------
   398  00B7                    RDI0DSM:				equ B7h		; Row Digital Interconnect input select 0	(RW)
   399  00BF                    RDI1DSM:				equ BFh		; Row Digital Interconnect input select 1	(RW)
   400                          
   401                          ;------------------------------------------------------
   402                          ;  Neon Test Registers
   403                          ;------------------------------------------------------
   404  00CC                    TSCR0:					equ CCh		; Tsource 0							(RW)
   405  00CD                    TSCMPH:					equ CDh		; TSCMP high						(RW)
   406  00CE                    TSCMPL:					equ CEh		; TSCMP low							(RW)
   407  00CF                    TSCR1:					equ CFh		; Tsource 1							(RW)
   408                          
   409                          ;;=============================================================================
   410                          ;;      Register Space, Bank 1
   411                          ;;=============================================================================
   412                          
   413                          ;------------------------------------------------
   414                          ;  Port Registers
   415                          ;  Note: Also see this address range in Bank 0.
   416                          ;------------------------------------------------
   417                          ; Port 0
   418  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   419  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   420  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   421  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   422                          
   423                          ; Port 1
   424  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   425  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   426  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   427  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   428                          
   429                          ; Port 2
   430  0008                    PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
   431  0009                    PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
   432  000A                    PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
   433  000B                    PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
   434                          
   435                          ; Port 3
   436  000C                    PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
   437  000D                    PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
   438  000E                    PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
   439  000F                    PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
   440                          
   441                          ; Port 4
   442  0010                    PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
   443  0011                    PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
   444  0012                    PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
   445  0013                    PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
   446                          
   447                          ;------------------------------------------------
   448                          ;  Digital PSoC(tm) block Registers
   449                          ;  Note: Also see this address range in Bank 0.
   450                          ;------------------------------------------------
   451                          
   452                          ; Digital PSoC block 00, Basic Type C
   453  0020                    DBC00FN:      equ 20h          ; Function Register                        (RW)
   454  0021                    DBC00IN:      equ 21h          ;    Input Register                        (RW)
   455  0022                    DBC00OU:      equ 22h          ;   Output Register                        (RW)
   456  0023                    DBC00CR1:     equ 23h          ;   control & status register 1            (RW)
   457                          
   458                          ; Digital PSoC block 01, Basic Type C
   459  0024                    DBC01FN:      equ 24h          ; Function Register                        (RW)
   460  0025                    DBC01IN:      equ 25h          ;    Input Register                        (RW)
   461  0026                    DBC01OU:      equ 26h          ;   Output Register                        (RW)
   462  0027                    DBC01CR1:     equ 27h          ;   control & status register 1            (RW)
   463                          
   464                          ; Digital PSoC block 02, Communications Type C
   465  0028                    DCC02FN:      equ 28h          ; Function Register                        (RW)
   466  0029                    DCC02IN:      equ 29h          ;    Input Register                        (RW)
   467  002A                    DCC02OU:      equ 2Ah          ;   Output Register                        (RW)
   468  002B                    DBC02CR1:     equ 2Bh          ;   control & status register 1            (RW)
   469                          
   470                          ; Digital PSoC block 03, Communications Type C
   471  002C                    DCC03FN:      equ 2Ch          ; Function Register                        (RW)
   472  002D                    DCC03IN:      equ 2Dh          ;    Input Register                        (RW)
   473  002E                    DCC03OU:      equ 2Eh          ;   Output Register                        (RW)
   474  0029                    DBC03CR1:     equ 29h          ;   control & status register 1            (RW)
   475                          
   476                          ; Digital PSoC block 10, Basic Type C
   477  0030                    DBC10FN:      equ 30h          ; Function Register                        (RW)
   478  0031                    DBC10IN:      equ 31h          ;    Input Register                        (RW)
   479  0032                    DBC10OU:      equ 32h          ;   Output Register                        (RW)
   480  0033                    DBC10CR1:     equ 33h          ;   control & status register 1            (RW)
   481                          
   482                          ; Digital PSoC block 11, Basic Type C
   483  0034                    DBC11FN:      equ 34h          ; Function Register                        (RW)
   484  0035                    DBC11IN:      equ 35h          ;    Input Register                        (RW)
   485  0036                    DBC11OU:      equ 36h          ;   Output Register                        (RW)
   486  0037                    DBC11CR1:     equ 37h          ;   control & status register 1            (RW)
   487                          
   488                          ; Digital PSoC block 12, Communications Type C
   489  0038                    DCC12FN:      equ 38h          ; Function Register                        (RW)
   490  0039                    DCC12IN:      equ 39h          ;    Input Register                        (RW)
   491  003A                    DCC12OU:      equ 3Ah          ;   Output Register                        (RW)
   492  003B                    DBC12CR1:     equ 3Bh          ;   control & status register 1            (RW)
   493                          
   494                          ; Digital PSoC block 13, Communications Type C
   495  003C                    DCC13FN:      equ 3Ch          ; Function Register                        (RW)
   496  003D                    DCC13IN:      equ 3Dh          ;    Input Register                        (RW)
   497  003E                    DCC13OU:      equ 3Eh          ;   Output Register                        (RW)
   498  003F                    DBC13CR1:     equ 3Fh          ;   control & status register 1            (RW)
   499                          
   500                          ;------------------------------------------------
   501                          ;  System and Global Resource Registers
   502                          ;  Note: Also see this address range in Bank 0.
   503                          ;------------------------------------------------
   504                          
   505  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   506  00C0                    CLK_CR0_ACOLUMN_3:    equ C0h    ; MASK: Specify clock for analog cloumn
   507  0030                    CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
   508  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   509  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   510                          
   511  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   512  0018                    CLK_CR1_ACLK1:        equ 18h    ; MASK: Digital PSoC block for analog source
   513  0003                    CLK_CR1_ACLK0:        equ 03h    ; MASK: Digital PSoC block for analog source
   514                          
   515  0003                    CLK_CR1_ACLK2:        equ 03h    ; Deprecated do not use
   516                          
   517  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   518  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   519                          
   520  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   521  000F                    AMD_CR0_AMOD0:        equ 0Fh    ; MASK: Modulation source for analog column 0
   522                          
   523  0064                    CMP_GO_EN:    equ 64h          ; Comparator Bus To Global Out Enable      (RW)
   524  0080                    CMP_GO_EN_GOO5:       equ 80h    ; MASK: Selected Col 1 signal to GOO5
   525  0040                    CMP_GO_EN_GOO1:       equ 40h    ; MASK: Selected Col 1 signal to GOO1
   526  0030                    CMP_GO_EN_SEL1:       equ 30h    ; MASK: Column 1 Signal Select
   527  0008                    CMP_GO_EN_GOO4:       equ 08h    ; MASK: Selected Col 0 signal to GOO4
   528  0004                    CMP_GO_EN_GOO0:       equ 04h    ; MASK: Selected Col 0 signal to GOO0
   529  0003                    CMP_GO_EN_SEL0:       equ 03h    ; MASK: Column 0 Signal Select
   530                          
   531  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   532  000F                    AMD_CR1_AMOD1:        equ 0Fh    ; MASK: Modulation ctrl for analog column 1
   533                          
   534  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   535  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   536  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   537                          
   538  006B                    CLK_CR3:      equ 6Bh          ; Analog Clock Source Control Register 3   (RW)
   539  0040                    CLK_CR3_SYS1:         equ 40h    ; MASK: Analog Clock 1 selection
   540  0030                    CLK_CR3_DIVCLK1:      equ 30h    ; MASK: Analog Clock 1 divider
   541  0004                    CLK_CR3_SYS0:         equ 04h    ; MASK: Analog Clock 0 selection
   542  0003                    CLK_CR3_DIVCLK0:      equ 03h    ; MASK: Analog Clock 0 divider
   543                          
   544                          ;------------------------------------------------
   545                          ;  Global Digital Interconnects
   546                          ;------------------------------------------------
   547                          
   548  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   549  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   550  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   551  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   552                          
   553  00A0                    GDI_O_IN_CR:  equ 0A0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   554  00A1                    GDI_E_IN_CR:  equ 0A1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   555  00A2                    GDI_O_OU_CR:  equ 0A2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   556  00A3                    GDI_E_OU_CR:  equ 0A3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   557                          
   558  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   559  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   560                          
   561                          ;------------------------------------------------
   562                          ;  Analog Mux Bus Port Enable Bits
   563                          ;------------------------------------------------
   564  00D8                    MUX_CR0:      equ 0D8h          ; Analog Mux Port 0 Bit Enables Register
   565  00D9                    MUX_CR1:      equ 0D9h          ; Analog Mux Port 1 Bit Enables Register
   566  00DA                    MUX_CR2:      equ 0DAh          ; Analog Mux Port 2 Bit Enables Register
   567  00DB                    MUX_CR3:      equ 0DBh          ; Analog Mux Port 3 Bit Enables Register
   568  00EC                    MUX_CR4:      equ 0ECh          ; Analog Mux Port 4 Bit Enables Register
   569                          
   570                          ;------------------------------------------------
   571                          ;  Clock and System Control Registers
   572                          ;------------------------------------------------
   573                          
   574  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   575  0080                    OSC_GO_EN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   576  0040                    OSC_GO_EN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   577  0020                    OSC_GO_EN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   578  0010                    OSC_GO_EN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   579  0008                    OSC_GO_EN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   580  0004                    OSC_GO_EN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   581  0002                    OSC_GO_EN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   582  0001                    OSC_GO_EN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   583                          
   584  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   585  0003                    OSC_CR4_VC3SEL:       equ 03h    ; MASK: System VC3 Clock source
   586                          
   587  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   588                          
   589  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   590  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   591  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   592  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   593  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   594  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   595  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   596  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   597  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   598  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   599  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   600  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   601  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   602  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   603  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   604  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   605  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   606  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   607                          
   608  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   609  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   610  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   611                          
   612  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   613  0080                    OSC_CR2_PLLGAIN:      equ 80h    ; MASK: High/Low gain
   614  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   615  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   616  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   617                          
   618  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   619  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   620  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   621  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   622  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   623  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   624  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   625  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   626                          
   627  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   628  0008                    VLT_CMP_NOWRITE:      equ 08h    ; MASK: Vcc below Flash Write level
   629  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   630  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   631  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   632                          
   633  00E5                    ADC0_TR:      equ 0E5h          ; ADC Column 0 Trim Register
   634  00E6                    ADC1_TR:      equ 0E6h          ; ADC Column 1 Trim Register
   635                          
   636  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   637  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   638  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   639  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   640                          
   641  00FA                    FLS_PR1:      equ 0FAh          ; Flash Program Register 1                 (RW)
   642  0003                    FLS_PR1_BANK:         equ 03h    ; MASK: Select Active Flash Bank
   643                          
   644  00FD                    DAC_CR0:       equ 0FDh          ; Analog Mux DAC Control Register 0
   645  00DC                    DAC_CR1:       equ 0DCh          ; Analog Mux DAC Control Register 1
   646  0008                    DAC_CR_IRANGE:        equ 08h    ; MASK: Sets the DAC Range low or high
   647  0006                    DAC_CR_OSCMODE:       equ 06h    ; MASK: Defines the reset mode for AMux
   648  0001                    DAC_CR_ENABLE:        equ 01h    ; MASK: Enable/Disable DAC function
   649                          
   650                          ;------------------------------------------------
   651                          ;  I2C Control Registers
   652                          ;------------------------------------------------
   653                          
   654  00AD                    I2C_ADDR:    equ 0ADh          ; I2C Address Register (RW)
   655                          
   656                          ;------------------------------------------------------
   657                          ;  Neon Analog Registers
   658                          ;------------------------------------------------------
   659  0053                    VDAC50CR0:		equ 53h			; V DAC5 control 0				(RW)
   660  0057                    VDAC51CR0:		equ 57h			; V DAC5 control 1				(RW)
   661  00A8                    ADC_CR0:		equ A8h			; ADC control 0					(RW)
   662  00A9                    ADC_CR1:		equ A9h			; ADC control 1					(RW)
   663  00AA                    ADC_CR2:		equ AAh			; ADC control 2					(RW)
   664  00AB                    ADC_CR3TRIM:	equ ABh			; ADC control 3					(RW)
   665  00AC                    ADC_CR4:		equ ACh			; ADC control 4					(RW)
   666  00E7                    VDAC_TRIM:		equ E7h			; V DAC trim					(RW)
   667                          
   668                          ;------------------------------------------------------
   669                          ;  Neon Current Sense CMP Registers
   670                          ;------------------------------------------------------
   671  0050                    CMP0CR1:		equ 50h			; CMP0 control 1				(RW)
   672  0051                    CMP0CR2:		equ 51h			; CMP0 control 2				(RW)
   673  0054                    CMP1CR1:		equ 54h			; CMP1 control 1				(RW)
   674  0055                    CMP1CR2:		equ 55h			; CMP1 control 2				(RW)
   675  0058                    CSCMPCR0:		equ 58h			; CSCMP control 0				(RW)
   676  0059                    CSCMPGOEN:		equ 59h			; CSCMO global out enable		(RW)
   677  005A                    CSLUTCR0:		equ 5Ah			; CSLUT control 0				(RW)
   678  005B                    CMPCOLMUX:		equ 5Bh			; CMP Column Mux				(RW)
   679  005C                    CMPPWMCR:		equ 5Ch			; CMP PWM control				(RW)
   680  005D                    CMPFLTCR:		equ 5Dh			; CMP filter control			(RW)
   681  005E                    CMPCLK1:		equ 5Eh			; CMP clock 1					(RW)
   682  005F                    CMPCLK0:		equ 5Fh			; CMP clock 0					(RW)
   683                          
   684                          ;------------------------------------------------------
   685                          ;  Neon Real Time Clock Registers
   686                          ;------------------------------------------------------
   687  00A4                    RTCH:			equ A4h			; Real time current hour		(RW)
   688  00A5                    RTCM:			equ A5h			; Real time current minute		(RW)
   689  00A6                    RTCS:			equ A6h			; Real time current second		(RW)
   690  00A7                    RTCCR:			equ A7h			; Real time clock control		(RW)
   691                          
   692                          ;------------------------------------------------------
   693                          ;  Analog MUX Config Registers
   694                          ;------------------------------------------------------
   695                          
   696  006A                    AMUX_CFG1:			equ 6Ah  ; Analog MUX Configuration 1
   697  0020                    AMUX_CFG1_GOINVR:	equ 20h  ;
   698  0010                    AMUX_CFG1_GOINVL:  	equ 10h	 ;
   699  000C                    AMUX_CFG1_AMUXMODR:	equ 0Ch	 ;
   700  0003                    AMUX_CFG1_AMUXMODL:	equ 03h	 ;
   701                          
   702                          ;;=============================================================================
   703                          ;;      M8C System Macros
   704                          ;;  These macros should be used when their functions are needed.
   705                          ;;=============================================================================
   706                          
   707                          ;----------------------------------------------------
   708                          ;  Swapping Register Banks
   709                          ;----------------------------------------------------
   710                              macro M8C_SetBank0
   711                              and   F, ~FLAG_XIO_MASK
   712  3D73                        endm
   713                          
   714                              macro M8C_SetBank1
   715                              or    F, FLAG_XIO_MASK
   716  3D73                        endm
   717                          
   718                          ;----------------------------------------------------
   719                          ;  Global Interrupt Enable/Disable
   720                          ;----------------------------------------------------
   721                              macro M8C_EnableGInt
   722                              or    F, FLAG_GLOBAL_IE
   723  3D73                        endm
   724                          
   725                              macro M8C_DisableGInt
   726                              and   F, ~FLAG_GLOBAL_IE
   727  3D73                        endm
   728                          
   729                          ;----------------------------------------------------
   730                          ;  Enable/Disable Interrupt Mask
   731                          ;
   732                          ;  Use the following macros to enable/disable
   733                          ;  bits in the Interrupt mask registers,
   734                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   735                          ;
   736                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   737                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   738                          ;
   739                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   740                          ;        and MASK is the bit set to enable or disable
   741                          ;----------------------------------------------------
   742                          ; Disable Interrupt Bit Mask(s)
   743                              macro M8C_DisableIntMask
   744                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   745  3D73                        endm
   746                          
   747                          ; Enable Interrupt Bit Mask(s)
   748                              macro M8C_EnableIntMask
   749                              or    reg[@0], @1               ; enable specified interrupt enable bit
   750  3D73                        endm
   751                          
   752                          ;----------------------------------------------------
   753                          ;  Clear Posted Interrupt Flag Mask
   754                          ;
   755                          ;  Use the following macros to clear the
   756                          ;  bits in the Interrupt Clear registers,
   757                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   758                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   759                          ;
   760                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   761                          ;        and MASK is the bit set to enable or disable
   762                          ;----------------------------------------------------
   763                              macro M8C_ClearIntFlag
   764                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   765  3D73                        endm
   766                          
   767                          ;----------------------------------------------------
   768                          ;  Power-On Reset & WatchDog Timer Functions
   769                          ;----------------------------------------------------
   770                              macro M8C_EnableWatchDog
   771                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   772  3D73                        endm
   773                          
   774                              macro M8C_ClearWDT
   775                              mov   reg[RES_WDT], 00h
   776  3D73                        endm
   777                          
   778                              macro M8C_ClearWDTAndSleep
   779                              mov   reg[RES_WDT], 38h
   780  3D73                        endm
   781                          
   782                          ;----------------------------------------------------
   783                          ;  Sleep, CPU Stop & Software Reset
   784                          ;----------------------------------------------------
   785                              macro M8C_Sleep
   786                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   787                              ; The next instruction to be executed depends on the state of the
   788                              ; various interrupt enable bits. If some interrupts are enabled
   789                              ; and the global interrupts are disabled, the next instruction will
   790                              ; be the one that follows the invocation of this macro. If global
   791                              ; interrupts are also enabled then the next instruction will be
   792                              ; from the interrupt vector table. If no interrupts are enabled
   793                              ; then the CPU sleeps forever.
   794  3D73                        endm
   795                          
   796                              macro M8C_Stop
   797                              ; In general, you probably don't want to do this, but here's how:
   798                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   799                              ; Next instruction to be executed is located in the interrupt
   800                              ; vector table entry for Power-On Reset.
   801  3D73                        endm
   802                          
   803                              macro M8C_Reset
   804                              ; Restore CPU to the power-on reset state.
   805                              mov A, 0
   806                              SSC
   807                              ; Next non-supervisor instruction will be at interrupt vector 0.
   808  3D73                        endm
   809                          
   810                          ;----------------------------------------------------
   811                          ; ImageCraft Code Compressor Actions
   812                          ;----------------------------------------------------
   813                              ; Suspend Code Compressor
   814                              ; Must not span a RET or RETI instruction
   815                              ; without resuming code compression
   816                              macro Suspend_CodeCompressor
   817                              or   F, 0
   818  3D73                        endm
   819                          
   820                              ; Resume Code Compression
   821                              macro Resume_CodeCompressor
   822                              add  SP, 0
   823                              endm
      + 3D73                    
      + 3D73                    ; end of file m8c.inc
      + 3D73                    ;;*****************************************************************************
;;******************
      +                         ***********************************************************
;;  FILENAME: PWM8_BL.inc
;;   Version: 
      +                         2.60, Updated on 2013/5/19 at 10:44:7
;;  Generated by PSoC Designer 5.4.2946
;;
;;  DESCRIPTION: As
      +                         sembler declarations for the PWM8 user module interface
;;------------------------------------------
      +                         -----------------------------------
;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserve
      +                         d.
;;*****************************************************************************
;;***************
      +                         **************************************************************
   824                          
   825                          ; end of file m8c.inc
    29  00C0                    FLAG_PGMODE_MASK:  equ 0C0h     ; Paging control for > 256 bytes of RAM
    30  0000                    FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
    31  0040                    FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
    32  0080                    FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
    33  00C0                    FLAG_PGMODE_3:     equ 0C0h       ; Direct to CUR_PP page, indexed to STK_PP page
    34  0000                    FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
    35  0040                    FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
    36  0080                    FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
    37  00C0                    FLAG_PGMODE_11b:   equ 0C0h       ; Same as PGMODE_3
    38  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    39  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    40  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    41  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    42  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    43                          
    44                          
    45                          ;;=============================================================================
    46                          ;;      Register Space, Bank 0
    47                          ;;=============================================================================
    48                          
    49                          ;------------------------------------------------
    50                          ;  Port Registers
    51                          ;  Note: Also see this address range in Bank 1.
    52                          ;------------------------------------------------
    53                          ; Port 0
    54  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    55  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    56  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    57  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    58                          ; Port 1
    59  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    60  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    61  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    62  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    63                          ; Port 2
    64  0008                    PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
    65  0009                    PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
    66  000A                    PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
    67  000B                    PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
    68                          ; Port 3
    69  000C                    PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
    70  000D                    PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
    71  000E                    PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
    72  000F                    PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
    73                          ; Port 4
    74  0010                    PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
    75  0011                    PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
    76  0012                    PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
    77  0013                    PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
    78                          
    79                          ;------------------------------------------------
    80                          ;  Digital PSoC(tm) block Registers
    81                          ;  Note: Also see this address range in Bank 1.
    82                          ;------------------------------------------------
    83                          ; Digital PSoC block 00, Basic Type C
    84  0020                    DBC00DR0:     equ 20h          ; data register 0                          (#)
    85  0021                    DBC00DR1:     equ 21h          ; data register 1                          (W)
    86  0022                    DBC00DR2:     equ 22h          ; data register 2                          (RW)
    87  0023                    DBC00CR0:     equ 23h          ; control & status register 0              (#)
    88                          
    89                          ; Digital PSoC block 01, Basic Type C
    90  0024                    DBC01DR0:     equ 24h          ; data register 0                          (#)
    91  0025                    DBC01DR1:     equ 25h          ; data register 1                          (W)
    92  0026                    DBC01DR2:     equ 26h          ; data register 2                          (RW)
    93  0027                    DBC01CR0:     equ 27h          ; control & status register 0              (#)
    94                          
    95                          ; Digital PSoC block 02, Communications Type C
    96  0028                    DCC02DR0:     equ 28h          ; data register 0                          (#)
    97  0029                    DCC02DR1:     equ 29h          ; data register 1                          (W)
    98  002A                    DCC02DR2:     equ 2Ah          ; data register 2                          (RW)
    99  002B                    DCC02CR0:     equ 2Bh          ; control & status register 0              (#)
   100                          
   101                          ; Digital PSoC block 03, Communications Type C
   102  002C                    DCC03DR0:     equ 2Ch          ; data register 0                          (#)
   103  002D                    DCC03DR1:     equ 2Dh          ; data register 1                          (W)
   104  002E                    DCC03DR2:     equ 2Eh          ; data register 2                          (RW)
   105  002F                    DCC03CR0:     equ 2Fh          ; control & status register 0              (#)
   106                          
   107                          ; Digital PSoC block 10, Basic Type C
   108  0030                    DBC10DR0:     equ 30h          ; data register 0                          (#)
   109  0031                    DBC10DR1:     equ 31h          ; data register 1                          (W)
   110  0032                    DBC10DR2:     equ 32h          ; data register 2                          (RW)
   111  0033                    DBC10CR0:     equ 33h          ; control & status register 0              (#)
   112                          
   113                          ; Digital PSoC block 11, Basic Type C
   114  0034                    DBC11DR0:     equ 34h          ; data register 0                          (#)
   115  0035                    DBC11DR1:     equ 35h          ; data register 1                          (W)
   116  0036                    DBC11DR2:     equ 36h          ; data register 2                          (RW)
   117  0037                    DBC11CR0:     equ 37h          ; control & status register 0              (#)
   118                          
   119                          ; Digital PSoC block 12, Communications Type C
   120  0038                    DCC12DR0:     equ 38h          ; data register 0                          (#)
   121  0039                    DCC12DR1:     equ 39h          ; data register 1                          (W)
   122  003A                    DCC12DR2:     equ 3Ah          ; data register 2                          (RW)
   123  003B                    DCC12CR0:     equ 3Bh          ; control & status register 0              (#)
   124                          
   125                          ; Digital PSoC block 13, Communications Type C
   126  003C                    DCC13DR0:     equ 3Ch          ; data register 0                          (#)
   127  003D                    DCC13DR1:     equ 3Dh          ; data register 1                          (W)
   128  003E                    DCC13DR2:     equ 3Eh          ; data register 2                          (RW)
   129  003F                    DCC13CR0:     equ 3Fh          ; control & status register 0              (#)
   130                          
   131                          ;-------------------------------------
   132                          ;  Analog Control Registers
   133                          ;-------------------------------------
   134  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
   135  00C0                    AMX_IN_ACI3:          equ C0h    ; MASK: column 3 input mux
   136  0030                    AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
   137  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
   138  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
   139                          
   140  0061                    AMUX_CFG:      equ 61h          ; Analog MUX Configuration
   141  0030                    AMUX_CFG_INTCAP:       equ 30h    ;
   142  000E                    AMUX_CFG_MUXCLK:  	  equ 0Eh	 ;
   143  0001                    AMUX_CFG_EN:		  	  equ 01h	 ;
   144                          
   145                          ; old declarations DO NOT USE
   146  0061                    AMUXCFG:      equ 61h          ; Analog MUX Configuration
   147  0030                    AMUXCFG_INTCAP:       equ 30h    ;
   148  000E                    AMUXCFG_MUXCLK:  	  equ 0Eh	 ;
   149  0001                    AMUXCFG_EN:		  	  equ 01h	 ;
   150                          
   151  0062                    PWM_CR:       equ 62h          ; Pulse-Width Modulator Control
   152  0038                    PWM_CR_HIGH:          equ 38h    ; MASK: PWM high time
   153  0006                    PWM_CR_LOW:           equ 06h	 ; MASK: PWM low time
   154  0001                    PWM_CR_EN:            equ 01h	 ; MASK: Enable/Disable PWM function
   155                          
   156  0063                    ARF_CR:       equ 63h          ; Analog Reference Control
   157                          
   158  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus Register           (#)
   159  0080                    CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
   160  0040                    CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
   161  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
   162  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
   163  0008                    CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
   164  0004                    CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
   165  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
   166  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   167                          
   168  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   169  0020                    CMP_CR1_CLDIS1:       equ 20h    ; MASK: Column 1 comparator output latch
   170  0010                    CMP_CR1_CLDIS0:	      equ 10h    ; MASK: Column 0 comparator output latch
   171                          
   172  0068                    ADC0_CR:      equ 68h          ; Analog Column 0 Configuration
   173  0080                    ADC0_CR_CMPST:        equ 80h    ;
   174  0040                    ADC0_CR_LOREN:        equ 40h    ;
   175  0020                    ADC0_CR_SHEN:         equ 20h    ;
   176  0008                    ADC0_CR_CBSRC:        equ 08h    ;
   177  0004                    ADC0_CR_ADCM:         equ 04h    ;
   178  0001                    ADC0_CR_EN:	          equ 01h    ;
   179                          
   180  0069                    ADC1_CR:      equ 69h          ; Analog Column 1 Configuration
   181  0080                    ADC1_CR_CMPST:        equ 80h    ;
   182  0040                    ADC1_CR_LOREN:        equ 40h    ;
   183  0020                    ADC1_CR_SHEN:         equ 20h    ;
   184  0008                    ADC1_CR_CBSRC:        equ 08h    ;
   185  0004                    ADC1_CR_ADCM:         equ 04h    ;
   186  0001                    ADC1_CR_EN:	          equ 01h    ;
   187                          
   188                          ; Continuous Time PSoC block Type E Row 0 Col 0
   189  0072                    ACE00CR1:     equ 72h          ; Control register 1                       (RW)
   190  0073                    ACE00CR2:     equ 73h          ; Control register 2                       (RW)
   191                          
   192                          ; Continuous Time PSoC block Type E Row 0 Col 1
   193  0076                    ACE01CR1:     equ 76h          ; Control register 1                       (RW)
   194  0077                    ACE01CR2:     equ 77h          ; Control register 2                       (RW)
   195                          
   196                          ; Switched Cap PSoC blockType E Row 1 Col 0
   197  0080                    ASE10CR0:     equ 80h          ; Control register 0                       (RW)
   198                          
   199                          ; Switched Cap PSoC blockType E Row 1 Col 1
   200  0084                    ASE11CR0:     equ 84h          ; Control register 0                       (RW)
   201                          
   202                          ;-----------------------------------------------
   203                          ;  Global General Purpose Data Registers
   204                          ;-----------------------------------------------
   205  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   206  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   207  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   208  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   209                          
   210                          ;------------------------------------------------
   211                          ;  Row Digital Interconnects
   212                          ;
   213                          ;  Note: the following registers are mapped into
   214                          ;  both register bank 0 AND register bank 1.
   215                          ;------------------------------------------------
   216                          
   217  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   218  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   219  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   220  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   221  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   222  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   223  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   224                          
   225  00B8                    RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
   226  00B9                    RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
   227  00BA                    RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
   228  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   229  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   230  00BD                    RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
   231  00BE                    RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
   232                          
   233                          ;-----------------------------------------------
   234                          ;  Ram Page Pointers
   235                          ;-----------------------------------------------
   236  00D0                    CUR_PP:      equ 0D0h           ; Current   Page Pointer
   237  00D1                    STK_PP:      equ 0D1h           ; Stack     Page Pointer
   238  00D3                    IDX_PP:      equ 0D3h           ; Index     Page Pointer
   239  00D4                    MVR_PP:      equ 0D4h           ; MVI Read  Page Pointer
   240  00D5                    MVW_PP:      equ 0D5h           ; MVI Write Page Pointer
   241                          
   242                          ;------------------------------------------------
   243                          ;  I2C Configuration Registers
   244                          ;------------------------------------------------
   245  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   246  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   247  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   248  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   249  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   250  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   251  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   252  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   253  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   254  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   255                          
   256  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   257  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   258  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   259  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   260  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   261  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   262  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   263  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   264  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   265                          
   266  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   267                          
   268  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   269  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   270  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   271  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   272  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   273                          
   274                          ;------------------------------------------------
   275                          ;  System and Global Resource Registers
   276                          ;------------------------------------------------
   277  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   278                                                         ; Use INT_MSK0 bit field masks
   279  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   280                                                         ; Use INT_MSK1 bit field masks
   281  00DC                    INT_CLR2:     equ 0DCh          ; Interrupt Clear Register 2               (RW)
   282                                                         ; Use INT_MSK2 bit field masks
   283  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   284                                                         ; Use INT_MSK3 bit field masks
   285                          
   286  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   287  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   288  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   289                          
   290  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   291  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   292  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   293  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   294  0010                    INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
   295  0008                    INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
   296  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   297  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   298  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   299                          
   300  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   301  0080                    INT_MSK1_DCC13:            equ 80h ; MASK: enable/disable DCC13 block interrupt
   302  0040                    INT_MSK1_DCC12:            equ 40h ; MASK: enable/disable DCC12 block interrupt
   303  0020                    INT_MSK1_DBC11:            equ 20h ; MASK: enable/disable DBC11 block interrupt
   304  0010                    INT_MSK1_DBC10:            equ 10h ; MASK: enable/disable DBC10 block interrupt
   305  0008                    INT_MSK1_DCC03:            equ 08h ; MASK: enable/disable DCC03 block interrupt
   306  0004                    INT_MSK1_DCC02:            equ 04h ; MASK: enable/disable DCC02 block interrupt
   307  0002                    INT_MSK1_DBC01:            equ 02h ; MASK: enable/disable DBC01 block interrupt
   308  0001                    INT_MSK1_DBC00:            equ 01h ; MASK: enable/disable DBC00 block interrupt
   309                          
   310  00DF                    INT_MSK2:     equ DFh			; Custom block Mask Register			   (RW)
   311  0010                    INT_MSK2_SARADC:           equ 10h ; MASK: enable/disable SARADC block interrupt
   312  0020                    INT_MSK2_CSD0:             equ 20h ; MASK: enable/disable CSD0 block interrupt
   313  0040                    INT_MSK2_CSD1:             equ 40h ; MASK: enable/disable CSD1 block interrupt
   314  0080                    INT_MSK2_RTC:              equ 80h ; MASK: enable/disable RTC block interrupt
   315                          
   316  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   317  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   318                          
   319                          ;------------------------------------------------------
   320                          ;  MAC Registers
   321                          ;------------------------------------------------------
   322                          
   323  00E8                    MUL0_X:       equ 0E8h          ; Multiply Input X Register                (W)
   324  00E9                    MUL0_Y:       equ 0E9h          ; Multiply Input Y Register                (W)
   325  00EA                    MUL0_DH:      equ 0EAh          ; Multiply Result High Byte Register       (R)
   326  00EB                    MUL0_DL:      equ 0EBh          ; Multiply Result Low Byte Register        (R)
   327                          
   328  00EC                    ACC0_DR1:     equ 0ECh          ; Accumulator Data Register 1              (RW)
   329  00ED                    ACC0_DR0:     equ 0EDh          ; Accumulator Data Register 0              (RW)
   330  00EE                    ACC0_DR3:     equ 0EEh          ; Accumulator Data Register 3              (RW)
   331  00EF                    ACC0_DR2:     equ 0EFh          ; Accumulator Data Register 2              (RW)
   332                          
   333                          ; DECIMATOR Control Registers
   334  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   335  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   336                          
   337                          ;------------------------------------------------------
   338                          ;  System Status and Control Registers
   339                          ;
   340                          ;  Note: The following registers are mapped into both
   341                          ;        register bank 0 AND register bank 1.
   342                          ;------------------------------------------------------
   343  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   344                                                             ; Use FLAG_ masks defined at top of file
   345                          
   346  00FD                    DAC_D:        equ 0FDh		   ; DAC Data Register                        (RW)
   347                          
   348  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   349  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: flag, Internal Reset Status bit
   350  0010                    CPU_SCR1_SLIMO:         equ 10h	   ; MASK: Slow IMO (internal main osc) enable
   351  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   352  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   353  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   354                          
   355  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   356  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   357  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   358  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   359  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   360  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   361                          
   362                          ;------------------------------------------------------
   363                          ;  Neon Capsense Digital Control Registers
   364                          ;------------------------------------------------------
   365  0050                    CSD0_DR0_L:				equ 50h		; Capsense 0 data low 0				(RW)
   366  0054                    CSD0_DR0_H:				equ 54h		; Capsense 0 data high 0			(RW)
   367  0058                    CSD1_DR0_L:				equ 58h		; Capsense 1 data low 0				(RW)
   368  005C                    CSD1_DR0_H:				equ 5Ch		; Capsense 1 data high 0			(RW)
   369  0051                    CSD0_DR1_L:				equ 51h		; Capsense 0 data low 1				(RW)
   370  0055                    CSD0_DR1_H:				equ 55h		; Capsense 0 data high 1			(RW)
   371  0059                    CSD1_DR1_L:				equ 59h		; Capsense 1 data low 1				(RW)
   372  005D                    CSD1_DR1_H:				equ 5Dh		; Capsense 1 data high 1			(RW)
   373  0052                    CSD0_CNT_L:				equ 52h		; Capsense 0 counter low			(RW)
   374  0056                    CSD0_CNT_H:				equ 56h		; Capsense 0 counter high			(RW)
   375  005A                    CSD1_CNT_L:				equ 5Ah		; Capsense 1 counter low			(RW)
   376  005E                    CSD1_CNT_H:				equ	5Eh		; Capsense 1 counter high			(RW)
   377  0053                    CSD0_CR0:				equ 53h		; Capsense 0 control 0				(RW)
   378  005B                    CSD1_CR0:				equ 5Bh		; Capsense 1 control 0				(RW)
   379  0057                    CSD0_CR1:				equ 57h		; Capsense 0 control 1				(RW)
   380  005F                    CSD1_CR1:				equ 5Fh		; Capsense 1 control 1				(RW)
   381                          
   382                          ;------------------------------------------------------
   383                          ;  Neon Analog Registers
   384                          ;------------------------------------------------------
   385  0065                    ASY_CR:					equ 65h		; Analog Synchronization Control	(RW)
   386  006A                    ADC_DH:					equ 6Ah		; ADC data high						(RW)
   387  006B                    ADC_DL:					equ 6Bh		; ADC data low						(RW)
   388  00C8                    PWMVREF0:				equ C8h		; PWM Voltage Reference 0			(RW)
   389  00C9                    PWMVREF1:				equ C9h		; PWM Voltage Reference 1			(RW)
   390  00CB                    PWMSRC:					equ CBh		; PWM Source						(RW)
   391  00CA                    IDACMODE:				equ CAh		; IDAC Mode							(RW)
   392  00FC                    IDACR_D:				equ FCh		; Analog Mux DAC data 0				(RW)
   393  00FD                    IDACL_D:				equ FDh		; Analog Mux DAC data 1				(RW)
   394                          
   395                          ;------------------------------------------------------
   396                          ;  Neon Digital Registers
   397                          ;------------------------------------------------------
   398  00B7                    RDI0DSM:				equ B7h		; Row Digital Interconnect input select 0	(RW)
   399  00BF                    RDI1DSM:				equ BFh		; Row Digital Interconnect input select 1	(RW)
   400                          
   401                          ;------------------------------------------------------
   402                          ;  Neon Test Registers
   403                          ;------------------------------------------------------
   404  00CC                    TSCR0:					equ CCh		; Tsource 0							(RW)
   405  00CD                    TSCMPH:					equ CDh		; TSCMP high						(RW)
   406  00CE                    TSCMPL:					equ CEh		; TSCMP low							(RW)
   407  00CF                    TSCR1:					equ CFh		; Tsource 1							(RW)
   408                          
   409                          ;;=============================================================================
   410                          ;;      Register Space, Bank 1
   411                          ;;=============================================================================
   412                          
   413                          ;------------------------------------------------
   414                          ;  Port Registers
   415                          ;  Note: Also see this address range in Bank 0.
   416                          ;------------------------------------------------
   417                          ; Port 0
   418  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   419  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   420  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   421  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   422                          
   423                          ; Port 1
   424  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   425  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   426  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   427  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   428                          
   429                          ; Port 2
   430  0008                    PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
   431  0009                    PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
   432  000A                    PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
   433  000B                    PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
   434                          
   435                          ; Port 3
   436  000C                    PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
   437  000D                    PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
   438  000E                    PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
   439  000F                    PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
   440                          
   441                          ; Port 4
   442  0010                    PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
   443  0011                    PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
   444  0012                    PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
   445  0013                    PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
   446                          
   447                          ;------------------------------------------------
   448                          ;  Digital PSoC(tm) block Registers
   449                          ;  Note: Also see this address range in Bank 0.
   450                          ;------------------------------------------------
   451                          
   452                          ; Digital PSoC block 00, Basic Type C
   453  0020                    DBC00FN:      equ 20h          ; Function Register                        (RW)
   454  0021                    DBC00IN:      equ 21h          ;    Input Register                        (RW)
   455  0022                    DBC00OU:      equ 22h          ;   Output Register                        (RW)
   456  0023                    DBC00CR1:     equ 23h          ;   control & status register 1            (RW)
   457                          
   458                          ; Digital PSoC block 01, Basic Type C
   459  0024                    DBC01FN:      equ 24h          ; Function Register                        (RW)
   460  0025                    DBC01IN:      equ 25h          ;    Input Register                        (RW)
   461  0026                    DBC01OU:      equ 26h          ;   Output Register                        (RW)
   462  0027                    DBC01CR1:     equ 27h          ;   control & status register 1            (RW)
   463                          
   464                          ; Digital PSoC block 02, Communications Type C
   465  0028                    DCC02FN:      equ 28h          ; Function Register                        (RW)
   466  0029                    DCC02IN:      equ 29h          ;    Input Register                        (RW)
   467  002A                    DCC02OU:      equ 2Ah          ;   Output Register                        (RW)
   468  002B                    DBC02CR1:     equ 2Bh          ;   control & status register 1            (RW)
   469                          
   470                          ; Digital PSoC block 03, Communications Type C
   471  002C                    DCC03FN:      equ 2Ch          ; Function Register                        (RW)
   472  002D                    DCC03IN:      equ 2Dh          ;    Input Register                        (RW)
   473  002E                    DCC03OU:      equ 2Eh          ;   Output Register                        (RW)
   474  0029                    DBC03CR1:     equ 29h          ;   control & status register 1            (RW)
   475                          
   476                          ; Digital PSoC block 10, Basic Type C
   477  0030                    DBC10FN:      equ 30h          ; Function Register                        (RW)
   478  0031                    DBC10IN:      equ 31h          ;    Input Register                        (RW)
   479  0032                    DBC10OU:      equ 32h          ;   Output Register                        (RW)
   480  0033                    DBC10CR1:     equ 33h          ;   control & status register 1            (RW)
   481                          
   482                          ; Digital PSoC block 11, Basic Type C
   483  0034                    DBC11FN:      equ 34h          ; Function Register                        (RW)
   484  0035                    DBC11IN:      equ 35h          ;    Input Register                        (RW)
   485  0036                    DBC11OU:      equ 36h          ;   Output Register                        (RW)
   486  0037                    DBC11CR1:     equ 37h          ;   control & status register 1            (RW)
   487                          
   488                          ; Digital PSoC block 12, Communications Type C
   489  0038                    DCC12FN:      equ 38h          ; Function Register                        (RW)
   490  0039                    DCC12IN:      equ 39h          ;    Input Register                        (RW)
   491  003A                    DCC12OU:      equ 3Ah          ;   Output Register                        (RW)
   492  003B                    DBC12CR1:     equ 3Bh          ;   control & status register 1            (RW)
   493                          
   494                          ; Digital PSoC block 13, Communications Type C
   495  003C                    DCC13FN:      equ 3Ch          ; Function Register                        (RW)
   496  003D                    DCC13IN:      equ 3Dh          ;    Input Register                        (RW)
   497  003E                    DCC13OU:      equ 3Eh          ;   Output Register                        (RW)
   498  003F                    DBC13CR1:     equ 3Fh          ;   control & status register 1            (RW)
   499                          
   500                          ;------------------------------------------------
   501                          ;  System and Global Resource Registers
   502                          ;  Note: Also see this address range in Bank 0.
   503                          ;------------------------------------------------
   504                          
   505  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   506  00C0                    CLK_CR0_ACOLUMN_3:    equ C0h    ; MASK: Specify clock for analog cloumn
   507  0030                    CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
   508  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   509  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   510                          
   511  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   512  0018                    CLK_CR1_ACLK1:        equ 18h    ; MASK: Digital PSoC block for analog source
   513  0003                    CLK_CR1_ACLK0:        equ 03h    ; MASK: Digital PSoC block for analog source
   514                          
   515  0003                    CLK_CR1_ACLK2:        equ 03h    ; Deprecated do not use
   516                          
   517  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   518  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   519                          
   520  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   521  000F                    AMD_CR0_AMOD0:        equ 0Fh    ; MASK: Modulation source for analog column 0
   522                          
   523  0064                    CMP_GO_EN:    equ 64h          ; Comparator Bus To Global Out Enable      (RW)
   524  0080                    CMP_GO_EN_GOO5:       equ 80h    ; MASK: Selected Col 1 signal to GOO5
   525  0040                    CMP_GO_EN_GOO1:       equ 40h    ; MASK: Selected Col 1 signal to GOO1
   526  0030                    CMP_GO_EN_SEL1:       equ 30h    ; MASK: Column 1 Signal Select
   527  0008                    CMP_GO_EN_GOO4:       equ 08h    ; MASK: Selected Col 0 signal to GOO4
   528  0004                    CMP_GO_EN_GOO0:       equ 04h    ; MASK: Selected Col 0 signal to GOO0
   529  0003                    CMP_GO_EN_SEL0:       equ 03h    ; MASK: Column 0 Signal Select
   530                          
   531  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   532  000F                    AMD_CR1_AMOD1:        equ 0Fh    ; MASK: Modulation ctrl for analog column 1
   533                          
   534  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   535  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   536  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   537                          
   538  006B                    CLK_CR3:      equ 6Bh          ; Analog Clock Source Control Register 3   (RW)
   539  0040                    CLK_CR3_SYS1:         equ 40h    ; MASK: Analog Clock 1 selection
   540  0030                    CLK_CR3_DIVCLK1:      equ 30h    ; MASK: Analog Clock 1 divider
   541  0004                    CLK_CR3_SYS0:         equ 04h    ; MASK: Analog Clock 0 selection
   542  0003                    CLK_CR3_DIVCLK0:      equ 03h    ; MASK: Analog Clock 0 divider
   543                          
   544                          ;------------------------------------------------
   545                          ;  Global Digital Interconnects
   546                          ;------------------------------------------------
   547                          
   548  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   549  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   550  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   551  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   552                          
   553  00A0                    GDI_O_IN_CR:  equ 0A0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   554  00A1                    GDI_E_IN_CR:  equ 0A1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   555  00A2                    GDI_O_OU_CR:  equ 0A2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   556  00A3                    GDI_E_OU_CR:  equ 0A3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   557                          
   558  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   559  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   560                          
   561                          ;------------------------------------------------
   562                          ;  Analog Mux Bus Port Enable Bits
   563                          ;------------------------------------------------
   564  00D8                    MUX_CR0:      equ 0D8h          ; Analog Mux Port 0 Bit Enables Register
   565  00D9                    MUX_CR1:      equ 0D9h          ; Analog Mux Port 1 Bit Enables Register
   566  00DA                    MUX_CR2:      equ 0DAh          ; Analog Mux Port 2 Bit Enables Register
   567  00DB                    MUX_CR3:      equ 0DBh          ; Analog Mux Port 3 Bit Enables Register
   568  00EC                    MUX_CR4:      equ 0ECh          ; Analog Mux Port 4 Bit Enables Register
   569                          
   570                          ;------------------------------------------------
   571                          ;  Clock and System Control Registers
   572                          ;------------------------------------------------
   573                          
   574  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   575  0080                    OSC_GO_EN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   576  0040                    OSC_GO_EN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   577  0020                    OSC_GO_EN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   578  0010                    OSC_GO_EN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   579  0008                    OSC_GO_EN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   580  0004                    OSC_GO_EN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   581  0002                    OSC_GO_EN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   582  0001                    OSC_GO_EN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   583                          
   584  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   585  0003                    OSC_CR4_VC3SEL:       equ 03h    ; MASK: System VC3 Clock source
   586                          
   587  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   588                          
   589  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   590  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   591  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   592  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   593  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   594  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   595  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   596  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   597  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   598  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   599  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   600  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   601  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   602  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   603  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   604  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   605  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   606  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   607                          
   608  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   609  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   610  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   611                          
   612  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   613  0080                    OSC_CR2_PLLGAIN:      equ 80h    ; MASK: High/Low gain
   614  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   615  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   616  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   617                          
   618  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   619  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   620  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   621  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   622  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   623  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   624  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   625  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   626                          
   627  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   628  0008                    VLT_CMP_NOWRITE:      equ 08h    ; MASK: Vcc below Flash Write level
   629  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   630  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   631  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   632                          
   633  00E5                    ADC0_TR:      equ 0E5h          ; ADC Column 0 Trim Register
   634  00E6                    ADC1_TR:      equ 0E6h          ; ADC Column 1 Trim Register
   635                          
   636  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   637  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   638  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   639  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   640                          
   641  00FA                    FLS_PR1:      equ 0FAh          ; Flash Program Register 1                 (RW)
   642  0003                    FLS_PR1_BANK:         equ 03h    ; MASK: Select Active Flash Bank
   643                          
   644  00FD                    DAC_CR0:       equ 0FDh          ; Analog Mux DAC Control Register 0
   645  00DC                    DAC_CR1:       equ 0DCh          ; Analog Mux DAC Control Register 1
   646  0008                    DAC_CR_IRANGE:        equ 08h    ; MASK: Sets the DAC Range low or high
   647  0006                    DAC_CR_OSCMODE:       equ 06h    ; MASK: Defines the reset mode for AMux
   648  0001                    DAC_CR_ENABLE:        equ 01h    ; MASK: Enable/Disable DAC function
   649                          
   650                          ;------------------------------------------------
   651                          ;  I2C Control Registers
   652                          ;------------------------------------------------
   653                          
   654  00AD                    I2C_ADDR:    equ 0ADh          ; I2C Address Register (RW)
   655                          
   656                          ;------------------------------------------------------
   657                          ;  Neon Analog Registers
   658                          ;------------------------------------------------------
   659  0053                    VDAC50CR0:		equ 53h			; V DAC5 control 0				(RW)
   660  0057                    VDAC51CR0:		equ 57h			; V DAC5 control 1				(RW)
   661  00A8                    ADC_CR0:		equ A8h			; ADC control 0					(RW)
   662  00A9                    ADC_CR1:		equ A9h			; ADC control 1					(RW)
   663  00AA                    ADC_CR2:		equ AAh			; ADC control 2					(RW)
   664  00AB                    ADC_CR3TRIM:	equ ABh			; ADC control 3					(RW)
   665  00AC                    ADC_CR4:		equ ACh			; ADC control 4					(RW)
   666  00E7                    VDAC_TRIM:		equ E7h			; V DAC trim					(RW)
   667                          
   668                          ;------------------------------------------------------
   669                          ;  Neon Current Sense CMP Registers
   670                          ;------------------------------------------------------
   671  0050                    CMP0CR1:		equ 50h			; CMP0 control 1				(RW)
   672  0051                    CMP0CR2:		equ 51h			; CMP0 control 2				(RW)
   673  0054                    CMP1CR1:		equ 54h			; CMP1 control 1				(RW)
   674  0055                    CMP1CR2:		equ 55h			; CMP1 control 2				(RW)
   675  0058                    CSCMPCR0:		equ 58h			; CSCMP control 0				(RW)
   676  0059                    CSCMPGOEN:		equ 59h			; CSCMO global out enable		(RW)
   677  005A                    CSLUTCR0:		equ 5Ah			; CSLUT control 0				(RW)
   678  005B                    CMPCOLMUX:		equ 5Bh			; CMP Column Mux				(RW)
   679  005C                    CMPPWMCR:		equ 5Ch			; CMP PWM control				(RW)
   680  005D                    CMPFLTCR:		equ 5Dh			; CMP filter control			(RW)
   681  005E                    CMPCLK1:		equ 5Eh			; CMP clock 1					(RW)
   682  005F                    CMPCLK0:		equ 5Fh			; CMP clock 0					(RW)
   683                          
   684                          ;------------------------------------------------------
   685                          ;  Neon Real Time Clock Registers
   686                          ;------------------------------------------------------
   687  00A4                    RTCH:			equ A4h			; Real time current hour		(RW)
   688  00A5                    RTCM:			equ A5h			; Real time current minute		(RW)
   689  00A6                    RTCS:			equ A6h			; Real time current second		(RW)
   690  00A7                    RTCCR:			equ A7h			; Real time clock control		(RW)
   691                          
   692                          ;------------------------------------------------------
   693                          ;  Analog MUX Config Registers
   694                          ;------------------------------------------------------
   695                          
   696  006A                    AMUX_CFG1:			equ 6Ah  ; Analog MUX Configuration 1
   697  0020                    AMUX_CFG1_GOINVR:	equ 20h  ;
   698  0010                    AMUX_CFG1_GOINVL:  	equ 10h	 ;
   699  000C                    AMUX_CFG1_AMUXMODR:	equ 0Ch	 ;
   700  0003                    AMUX_CFG1_AMUXMODL:	equ 03h	 ;
   701                          
   702                          ;;=============================================================================
   703                          ;;      M8C System Macros
   704                          ;;  These macros should be used when their functions are needed.
   705                          ;;=============================================================================
   706                          
   707                          ;----------------------------------------------------
   708                          ;  Swapping Register Banks
   709                          ;----------------------------------------------------
   710                              macro M8C_SetBank0
   711                              and   F, ~FLAG_XIO_MASK
   712  3D73                        endm
   713                          
   714                              macro M8C_SetBank1
   715                              or    F, FLAG_XIO_MASK
   716  3D73                        endm
   717                          
   718                          ;----------------------------------------------------
   719                          ;  Global Interrupt Enable/Disable
   720                          ;----------------------------------------------------
   721                              macro M8C_EnableGInt
   722                              or    F, FLAG_GLOBAL_IE
   723  3D73                        endm
   724                          
   725                              macro M8C_DisableGInt
   726                              and   F, ~FLAG_GLOBAL_IE
   727  3D73                        endm
   728                          
   729                          ;----------------------------------------------------
   730                          ;  Enable/Disable Interrupt Mask
   731                          ;
   732                          ;  Use the following macros to enable/disable
   733                          ;  bits in the Interrupt mask registers,
   734                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   735                          ;
   736                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   737                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   738                          ;
   739                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   740                          ;        and MASK is the bit set to enable or disable
   741                          ;----------------------------------------------------
   742                          ; Disable Interrupt Bit Mask(s)
   743                              macro M8C_DisableIntMask
   744                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   745  3D73                        endm
   746                          
   747                          ; Enable Interrupt Bit Mask(s)
   748                              macro M8C_EnableIntMask
   749                              or    reg[@0], @1               ; enable specified interrupt enable bit
   750  3D73                        endm
   751                          
   752                          ;----------------------------------------------------
   753                          ;  Clear Posted Interrupt Flag Mask
   754                          ;
   755                          ;  Use the following macros to clear the
   756                          ;  bits in the Interrupt Clear registers,
   757                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   758                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   759                          ;
   760                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   761                          ;        and MASK is the bit set to enable or disable
   762                          ;----------------------------------------------------
   763                              macro M8C_ClearIntFlag
   764                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   765  3D73                        endm
   766                          
   767                          ;----------------------------------------------------
   768                          ;  Power-On Reset & WatchDog Timer Functions
   769                          ;----------------------------------------------------
   770                              macro M8C_EnableWatchDog
   771                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   772  3D73                        endm
   773                          
   774                              macro M8C_ClearWDT
   775                              mov   reg[RES_WDT], 00h
   776  3D73                        endm
   777                          
   778                              macro M8C_ClearWDTAndSleep
   779                              mov   reg[RES_WDT], 38h
   780  3D73                        endm
   781                          
   782                          ;----------------------------------------------------
   783                          ;  Sleep, CPU Stop & Software Reset
   784                          ;----------------------------------------------------
   785                              macro M8C_Sleep
   786                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   787                              ; The next instruction to be executed depends on the state of the
   788                              ; various interrupt enable bits. If some interrupts are enabled
   789                              ; and the global interrupts are disabled, the next instruction will
   790                              ; be the one that follows the invocation of this macro. If global
   791                              ; interrupts are also enabled then the next instruction will be
   792                              ; from the interrupt vector table. If no interrupts are enabled
   793                              ; then the CPU sleeps forever.
   794  3D73                        endm
   795                          
   796                              macro M8C_Stop
   797                              ; In general, you probably don't want to do this, but here's how:
   798                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   799                              ; Next instruction to be executed is located in the interrupt
   800                              ; vector table entry for Power-On Reset.
   801  3D73                        endm
   802                          
   803                              macro M8C_Reset
   804                              ; Restore CPU to the power-on reset state.
   805                              mov A, 0
   806                              SSC
   807                              ; Next non-supervisor instruction will be at interrupt vector 0.
   808  3D73                        endm
   809                          
   810                          ;----------------------------------------------------
   811                          ; ImageCraft Code Compressor Actions
   812                          ;----------------------------------------------------
   813                              ; Suspend Code Compressor
   814                              ; Must not span a RET or RETI instruction
   815                              ; without resuming code compression
   816                              macro Suspend_CodeCompressor
   817                              or   F, 0
   818  3D73                        endm
   819                          
   820                              ; Resume Code Compression
   821                              macro Resume_CodeCompressor
   822                              add  SP, 0
   823  3D73                        endm
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  FILENAME: PWM8_BL.inc
     4                          ;;   Version: 2.60, Updated on 2013/5/19 at 10:44:7
     5                          ;;  Generated by PSoC Designer 5.4.2946
     6                          ;;
     7                          ;;  DESCRIPTION: Assembler declarations for the PWM8 user module interface
     8                          ;;-----------------------------------------------------------------------------
     9                          ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
    10                          ;;*****************************************************************************
    11                          ;;*****************************************************************************
    12                          
    13                          include "m8c.inc"
    14                          
    15                          
    16                          ;--------------------------------------------------
    17                          ; Constants for PWM8_BL API's.
    18                          ;--------------------------------------------------
    19                          
    20  0001                    PWM8_BL_CONTROL_REG_START_BIT:             equ 0x01    ; Control register start bit
    21  00E1                    PWM8_BL_INT_REG:                           equ 0x0e1
    22  0010                    PWM8_BL_INT_MASK:                          equ 0x10
    23                          
    24                          
    25                          ;--------------------------------------------------
    26                          ; Constants for PWM8_BL user defined values
    27                          ;--------------------------------------------------
    28                          
    29  0000                    PWM8_BL_PERIOD:                            equ 0x00
    30  0000                    PWM8_BL_PULSE_WIDTH:                       equ 0x00
    31                          
    32                          
    33                          ;--------------------------------------------------
    34                          ; Register Address Constants for PWM8_BL
    35                          ;--------------------------------------------------
    36                          
    37  0030                    PWM8_BL_COUNTER_REG:                   equ 0x30   ; DR0 Count register
    38  0031                    PWM8_BL_PERIOD_REG:                    equ 0x31   ; DR1 Period register
    39  0032                    PWM8_BL_COMPARE_REG:                   equ 0x32   ; DR2 Compare register
    40  0033                    PWM8_BL_CONTROL_REG:                   equ 0x33   ; Control register
    41  0030                    PWM8_BL_FUNC_REG:                      equ 0x30   ; Function register
    42  0031                    PWM8_BL_INPUT_REG:                     equ 0x31   ; Input register
    43  0032                    PWM8_BL_OUTPUT_REG:                    equ 0x32   ; Output register
    44                          
    45                          
    46                          ;--------------------------------------------------
    47                          ; PWM8_BL Macro 'Functions'
    48                          ;--------------------------------------------------
    49                          
    50                             macro PWM8_BL_Start_M
    51                             or    reg[PWM8_BL_CONTROL_REG],  PWM8_BL_CONTROL_REG_START_BIT
    52  3D73                       endm
    53                          
    54                             macro PWM8_BL_Stop_M
    55                             and   reg[PWM8_BL_CONTROL_REG], ~PWM8_BL_CONTROL_REG_START_BIT
    56  3D73                       endm
    57                          
    58                             macro PWM8_BL_EnableInt_M
    59                             M8C_EnableIntMask PWM8_BL_INT_REG, PWM8_BL_INT_MASK
    60  3D73                       endm
    61                          
    62                             macro PWM8_BL_DisableInt_M
    63                             M8C_DisableIntMask PWM8_BL_INT_REG, PWM8_BL_INT_MASK
    64                             endm
      + 3D73                    
      + 3D73                    ; end of file PWM8_BL.inc
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;
     4                          ;;       FILENAME: Memory.inc
     5                          ;;
     6                          ;;    DESCRIPTION: Memory Model and Stack Parameter Definitions for 
     7                          ;;                 CY8C22045 PSoC devices.
     8                          ;;
     9                          ;;  LAST MODIFIED: August 17, 2004
    10                          ;;
    11                          ;;-----------------------------------------------------------------------------
    12                          ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
    13                          ;;*****************************************************************************
    14                          ;;*****************************************************************************
    15                          ;
    16                          ;
    17                          ;  ******** Define Memory Model and Stack parameters ********
    18                          ;
    19  0001                    IMAGECRAFT: equ 1   
    20  0002                    HITECH: equ 2   
    21  0002                    TOOLCHAIN: equ HITECH   
    22  0001                    SYSTEM_LARGE_MEMORY_MODEL: equ 1   
    23  0000                    SYSTEM_SMALL_MEMORY_MODEL: equ 0   
    24  0003                    SYSTEM_STACK_PAGE: equ 3   
    25  0000                    SYSTEM_STACK_PAGE_OFFSET: equ 0   
    26  0002                    SYSTEM_TOOLS: equ 2   
    27  0000                    SYSTEM_IDXPG_TRACKS_STK_PP: equ 0   
    28  0001                    SYSTEM_IDXPG_TRACKS_IDX_PP: equ 1   
    29  0000                    SYSTEM_MULTIPAGE_STACK: equ 0 
    30                          
    31                          
    32                          ;  ******* Function Class Definitions *******
    33                          ;
    34                          ;  These definitions are used to describe RAM access patterns. They provide
    35                          ;  documentation and they control prologue and epilogue macros that perform
    36                          ;  the necessary housekeeping functions for large memory model devices like
    37                          ;  the CY8C22045.
    38                          
    39  0001                    RAM_USE_CLASS_1:               equ 1   ; PUSH, POP & I/O access
    40  0002                    RAM_USE_CLASS_2:               equ 2   ; Indexed address mode on stack page
    41  0004                    RAM_USE_CLASS_3:               equ 4   ; Indexed address mode to any page
    42  0008                    RAM_USE_CLASS_4:               equ 8   ; Direct/Indirect address mode access
    43                          
    44                          ; ******* Hi Tech Specific *******
    45                          ; Turn on the expansion of all macros by default
    46                          IF (TOOLCHAIN & HITECH)
    47                          OPT EXPAND
    48                          ENDIF
    49                          ; ******* Page Pointer Manipulation Macros *******
    50                          ;
    51                          ;  ******* Page Pointer Manipulation Macros *******
    52                          ;
    53                          ;  Most of the following macros are conditionally compiled so they only
    54                          ;  produce code if the large memory model is selected.
    55                          
    56                             ;-----------------------------------------------
    57                             ;  Set Stack Page Macro
    58                             ;-----------------------------------------------
    59                             ;
    60                             ;  DESC: Modify STK_PP in the large or small memory Models.
    61                             ;
    62                             ; INPUT: Constant (e.g., SYSTEM_STACK_PAGE) that specifies the RAM page on
    63                             ;        which stack operations like PUSH and POP store and retrieve their
    64                             ;        data
    65                             ;
    66                             ;  COST: 8 instruction cycles (in LMM only)
    67                          
    68                             macro RAM_SETPAGE_STK( PG_NUMBER )
    69                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    70                                mov reg[STK_PP], @PG_NUMBER
    71                             ENDIF
    72  3D73                       endm
    73                          
    74                             ;-----------------------------------------------
    75                             ;  Set Current Page Macro
    76                             ;-----------------------------------------------
    77                             ;
    78                             ;  DESC: Modify CUR_PP in the large or small memory Models.
    79                             ;
    80                             ; INPUT: Constant value (e.g., >bFoo) for the RAM page number used in
    81                             ;        calculation of effective direct-mode address operands.
    82                             ;
    83                             ;  COST: 8 instruction cycles (in LMM only)
    84                          
    85                             macro RAM_SETPAGE_CUR( PG_NUMBER )
    86                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    87                                mov reg[CUR_PP], @PG_NUMBER
    88                             ENDIF
    89  3D73                       endm
    90                          
    91                             ;-----------------------------------------------
    92                             ;  Set Index Page Macro
    93                             ;-----------------------------------------------
    94                             ;
    95                             ;  DESC: Modify IDX_PP in the large or small emory Models.
    96                             ;
    97                             ; INPUT: Constant value (e.g., >caFoo) for the RAM page number used in
    98                             ;         calculation of effective index-mode address operands.
    99                             ;
   100                             ;  COST: 8 instruction cycles (in LMM only)
   101                          
   102                             macro RAM_SETPAGE_IDX( PG_NUMBER )
   103                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   104                                mov reg[IDX_PP], @PG_NUMBER
   105                             ENDIF
   106  3D73                       endm
   107                          
   108                             ;-----------------------------------------------
   109                             ;  Set MVI Read Page Macro
   110                             ;-----------------------------------------------
   111                             ;
   112                             ;  DESC: Modify MVR_PP in the large or small memory Models.
   113                             ;
   114                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   115                             ;        calculation of indirect address operands used in the
   116                             ;        "mvi A, [pFoo]" instructions.
   117                             ;
   118                             ;  COST: 8 instruction cycles (in LMM only)
   119                          
   120                             macro RAM_SETPAGE_MVR( PG_NUMBER )
   121                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   122                                mov reg[MVR_PP], @PG_NUMBER
   123                             ENDIF
   124  3D73                       endm
   125                          
   126                             ;-----------------------------------------------
   127                             ;  Set MVI Write Page Macro
   128                             ;-----------------------------------------------
   129                             ;
   130                             ;  DESC: Modify MVW_PP in the large or small memory Models.
   131                             ;
   132                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   133                             ;        calculation of indirect address operands used in the
   134                             ;        "mvi [pFoo], A" instructions.
   135                             ;
   136                             ;  COST: 8 instruction cycles (in LMM only)
   137                          
   138                             macro RAM_SETPAGE_MVW( PG_NUMBER )
   139                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   140                                mov reg[MVW_PP], @PG_NUMBER
   141                             ENDIF
   142  3D73                       endm
   143                          
   144                             ;-----------------------------------------------
   145                             ;  Force Index Page Pointer to Stack Page
   146                             ;-----------------------------------------------
   147                             ;
   148                             ;  DESC: Map index-mode operands onto the stack page by modifying IDX_PP.
   149                             ;        See also RAM_LOCK_INDEX_TO_STACKPAGE.
   150                             ;
   151                             ; INPUT: None
   152                             ;
   153                             ;  COST: 8 instruction cycles (in LMM only)
   154                          
   155                             macro RAM_SETPAGE_IDX2STK
   156                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   157                                IF ( SYSTEM_MULTIPAGE_STACK )
   158                                   mov   A, reg[STK_PP]
   159                                   mov   reg[IDX_PP], A
   160                                ELSE
   161                                   RAM_SETPAGE_IDX SYSTEM_STACK_PAGE
   162                                ENDIF
   163                             ENDIF
   164  3D73                       endm
   165                          
   166                             ;-----------------------------------------------
   167                             ;  Change Memory Mode
   168                             ;-----------------------------------------------
   169                             ;
   170                             ;  DESC: Modify FLAG_PAGEMODE bits in the large and small memory Models.
   171                             ;
   172                             ; INPUT: Constant value for PGMODE bitfield of CPU Flag register, F.
   173                             ;        See FLAG_PGMODE_{x} constants in M8C.INC.
   174                             ;
   175                             ;  COST: 8 instruction cycles (in LMM only)
   176                          
   177                             macro RAM_CHANGE_PAGE_MODE( MODE )
   178                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   179                                and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
   180                                or    F,  FLAG_PGMODE_MASK & @MODE
   181                             ENDIF
   182  3D73                       endm
   183                          
   184                             ;-----------------------------------------------
   185                             ;  Set Large Memory Model Native Paging Mode
   186                             ;-----------------------------------------------
   187                             ;
   188                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   189                             ;        paging mode *IFF* a simple "OR" is guaranteed to work---for
   190                             ;        example, in an ISR, when the PGMODE bits have been cleared
   191                             ;        to zero. If a simple "OR" is not guaranteed to work, use
   192                             ;        the slower RAM_RESTORE_NATIVE_PAGING instead.
   193                             ;
   194                             ; INPUT: none
   195                             ;
   196                             ;  COST: 4 instruction cycles (in LMM only)
   197                          
   198                             macro RAM_SET_NATIVE_PAGING
   199                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   200                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   201                                or    F,  FLAG_PGMODE_11b            ; LMM w/ IndexPage<==>StackPage
   202                             ENDIF ;  PGMODE LOCKED
   203                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   204                                or    F,  FLAG_PGMODE_10b            ; LMM with independent IndexPage
   205                             ENDIF ; PGMODE FREE
   206                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   207  3D73                       endm
   208                          
   209                             ;-----------------------------------------------
   210                             ; Restore Large Memory Model Native Paging Mode
   211                             ;-----------------------------------------------
   212                             ;
   213                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   214                             ;        paging mode. Always works because it clears the PGMODE bits
   215                             ;        before OR-ing in the new ones. See RAM_RESTORE_NATIVE_PAGING
   216                             ;        for a faster method.
   217                             ;
   218                             ; INPUT: none
   219                             ;
   220                             ;  COST: 8 instruction cycles (in LMM only)
   221                          
   222                             macro RAM_RESTORE_NATIVE_PAGING
   223                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   224                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   225                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_11b ; LMM w/ IndexPage<==>StackPage
   226                             ENDIF ;  PGMODE LOCKED
   227                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   228                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b ; LMM with independent IndexPage
   229                             ENDIF ; PGMODE FREE
   230                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   231  3D73                       endm
   232                          
   233                             ;-----------------------------------------------
   234                             ; Force indexed addr mode operands to Stack Pg
   235                             ;-----------------------------------------------
   236                             ;
   237                             ;  DESC: Force instructions that use indexed address mode to reference the
   238                             ;        stack page (as defined by STK_PP). This macro sets the "Indexed
   239                             ;        Stack Mode" bit (LSB) of the PGMODE bit field in the CPU Flag
   240                             ;        register, F. (See also RAM_SETPAGE_IDX2STK, above.)
   241                             ;
   242                             ; INPUT: none
   243                             ;
   244                             ;  COST: 4 instruction cycles (in LMM only)
   245                          
   246                             macro RAM_X_POINTS_TO_STACKPAGE
   247                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   248                                or   F, FLAG_PGMODE_01b
   249                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   250  3D73                       endm
   251                          
   252                             ;-----------------------------------------------
   253                             ;  Force indexed addr mode operands to Index Pg
   254                             ;-----------------------------------------------
   255                             ;
   256                             ;  DESC: Permit instructions that use indexed address mode to reference page
   257                             ;        zero or the page pointed to by the IDX_PP register, depending on the
   258                             ;        setting of the MSb (or "Direct Page Mode" bit) of the PGMODE bits
   259                             ;        in the CPU Flag register, F. (This macro clears the PGMODE LSb.)
   260                             ;
   261                             ; INPUT: none
   262                             ;
   263                             ;  COST: 4 instruction cycles (in LMM only)
   264                          
   265                             macro RAM_X_POINTS_TO_INDEXPAGE
   266                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   267                                and  F, ~FLAG_PGMODE_01b
   268                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   269  3D73                       endm
   270                          
   271                             ;-----------------------------------------------
   272                             ;  Function Prologue
   273                             ;-----------------------------------------------
   274                             ;
   275                             ;  Prologue for functions that run in the LMM and SMM.
   276                             ;
   277                          
   278                             macro RAM_PROLOGUE( ACTUAL_CLASS )
   279                          
   280                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   281                             ; Nothing to do
   282                             ENDIF ; RAM_USE_CLASS_1
   283                          
   284                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   285                                IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   286                                   RAM_X_POINTS_TO_STACKPAGE         ; exit native paging mode!
   287                                ENDIF
   288                             ENDIF ; RAM_USE_CLASS_2
   289                          
   290                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   291                                IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   292                                   RAM_X_POINTS_TO_INDEXPAGE         ; exit native paging mode!
   293                                ENDIF
   294                             ENDIF ; RAM_USE_CLASS_3
   295                          
   296                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   297                             ; Nothing to do
   298                             ENDIF ; RAM_USE_CLASS_4
   299                          
   300  3D73                       endm
   301                          
   302                             ;-----------------------------------------------
   303                             ;  Function Epilogue
   304                             ;-----------------------------------------------
   305                             ;
   306                             ;  Prologue for functions that run in the LMM and SMM.
   307                             ;
   308                          
   309                             macro RAM_EPILOGUE( ACTUAL_CLASS )
   310                          
   311                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   312                             ; Nothing to do
   313                             ENDIF ; RAM_USE_CLASS_1
   314                          
   315                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   316                                RAM_RESTORE_NATIVE_PAGING
   317                             ENDIF ; RAM_USE_CLASS_2
   318                          
   319                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   320                                RAM_RESTORE_NATIVE_PAGING
   321                             ENDIF ; RAM_USE_CLASS_3
   322                          
   323                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   324                             ; Nothing to do
   325                             ENDIF ; RAM_USE_CLASS_4
   326                          
   327  3D73                       endm
   328                          
   329                             ;-----------------------------------------------
   330                             ;  Preserve Register
   331                             ;-----------------------------------------------
   332                             ;
   333                             ;  DESC: Preserve a register value on the stack
   334                             ;
   335                             ; INPUT: Name or address of register in I/O Space
   336                             ;        The I/O bank is an implicit parameter. That is, this function will
   337                             ;        Access the I/O bank currently specified by the CPU Flag register.
   338                             ;
   339                             ;  USES: CPU 'A' register
   340                             ;
   341                             ;  COST: 9 instruction cycles
   342                          
   343                             macro REG_PRESERVE( IOReg )
   344                             mov   A, reg[ @IOReg ]
   345                             push  A
   346  3D73                       endm
   347                          
   348                             ;-----------------------------------------------
   349                             ;  Restore Register
   350                             ;-----------------------------------------------
   351                             ;
   352                             ;  DESC: Restore a register value from the stack
   353                             ;
   354                             ; INPUT: Name or address of register in I/O Space
   355                             ;        The I/O bank is an implicit parameter. That is, this function will
   356                             ;        Access the I/O bank currently specified by the CPU Flag register.
   357                             ;
   358                             ;  USES: CPU 'A' register
   359                             ;
   360                             ;  COST: 10 instruction cycles
   361                          
   362                             macro REG_RESTORE( IOReg )
   363                             pop   A
   364                             mov   reg[ @IOReg ], A
   365  3D73                       endm
   366                          
   367                             ;-----------------------------------------------
   368                             ;  Preserve Volatile Page Pointer Registers
   369                             ;-----------------------------------------------
   370                             ;
   371                             ;  DESC: Invoked by ISRs before switching to the LMM mode and calling
   372                             ;        functions that require on it.
   373                             ;
   374                             ; INPUT: none
   375                             ;
   376                             ;  USES: CPU 'A' register
   377                             ;
   378                             ;  COST: 45 instruction cycles (in LMM only)
   379                          
   380                             macro ISR_PRESERVE_PAGE_POINTERS
   381                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   382                                REG_PRESERVE CUR_PP
   383                                REG_PRESERVE IDX_PP
   384                                REG_PRESERVE MVR_PP
   385                                REG_PRESERVE MVW_PP
   386                             ENDIF
   387  3D73                       endm
   388                          
   389                             ;-----------------------------------------------
   390                             ;  Restore Volatile Page Pointer Registers
   391                             ;-----------------------------------------------
   392                             ;
   393                             ;  DESC: Undo for RAM_PRESERVE_PAGE_POINTERS macro. Invoked by ISRs after
   394                             ;        calling functions that run in the LMM mode and before executing
   395                             ;        the RETI instruction.
   396                             ;
   397                             ; INPUT: none
   398                             ;
   399                             ;  USES: CPU 'A' register
   400                             ;
   401                             ;  COST: 50 instruction cycles (in LMM only)
   402                          
   403                             macro ISR_RESTORE_PAGE_POINTERS
   404                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   405                                REG_RESTORE MVW_PP
   406                                REG_RESTORE MVR_PP
   407                                REG_RESTORE IDX_PP
   408                                REG_RESTORE CUR_PP
   409                             ENDIF
   410  3D73                       endm
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  FILENAME: PWM8_BL.asm
     4                          ;;   Version: 2.60, Updated on 2013/5/19 at 10:44:7
     5                          ;;  Generated by PSoC Designer 5.4.2946
     6                          ;;
     7                          ;;  DESCRIPTION: PWM8 User Module software implementation file
     8                          ;;
     9                          ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
    10                          ;;        arguments and observe the associated "Registers are volatile" policy.
    11                          ;;        This means it is the caller's responsibility to preserve any values
    12                          ;;        in the X and A registers that are still needed after the API functions
    13                          ;;        returns. For Large Memory Model devices it is also the caller's 
    14                          ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
    15                          ;;        MVW_PP registers. Even though some of these registers may not be modified
    16                          ;;        now, there is no guarantee that will remain the case in future releases.
    17                          ;;-----------------------------------------------------------------------------
    18                          ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
    19                          ;;*****************************************************************************
    20                          ;;*****************************************************************************
    21                          
    22                          include "m8c.inc"
    23                          include "PWM8_BL.inc"
    24                          include "memory.inc"
    25                          
    26                          ;-----------------------------------------------
    27                          ;  Global Symbols
    28                          ;-----------------------------------------------
    29                          export  PWM8_BL_EnableInt
    30                          export _PWM8_BL_EnableInt
    31                          export  PWM8_BL_DisableInt
    32                          export _PWM8_BL_DisableInt
    33                          export  PWM8_BL_Start
    34                          export _PWM8_BL_Start
    35                          export  PWM8_BL_Stop
    36                          export _PWM8_BL_Stop
    37                          export  PWM8_BL_WritePeriod
    38                          export _PWM8_BL_WritePeriod
    39                          export  PWM8_BL_WritePulseWidth
    40                          export _PWM8_BL_WritePulseWidth
    41                          export  PWM8_BL_bReadPulseWidth
    42                          export _PWM8_BL_bReadPulseWidth
    43                          export  PWM8_BL_bReadCounter
    44                          export _PWM8_BL_bReadCounter
    45                          
    46                          ; The following functions are deprecated and subject to omission in future releases
    47                          ;
    48                          export  bPWM8_BL_ReadPulseWidth    ; deprecated
    49                          export _bPWM8_BL_ReadPulseWidth    ; deprecated
    50                          export  bPWM8_BL_ReadCounter       ; deprecated
    51                          export _bPWM8_BL_ReadCounter       ; deprecated
    52                          
    53                          
    54                          AREA led_display_RAM (RAM,REL)
    55                          
    56                          ;-----------------------------------------------
    57                          ;  Constant Definitions
    58                          ;-----------------------------------------------
    59                          
    60  0000                    INPUT_REG_NULL:                equ 0x00    ; Clear the input register
    61                          
    62                          
    63                          ;-----------------------------------------------
    64                          ; Variable Allocation
    65                          ;-----------------------------------------------
    66                          
    67                          
    68                          AREA UserModules (ROM, REL)
    69                          
    70                          .SECTION
    71                          ;-----------------------------------------------------------------------------
    72                          ;  FUNCTION NAME: PWM8_BL_EnableInt
    73                          ;
    74                          ;  DESCRIPTION:
    75                          ;     Enables this PWM's interrupt by setting the interrupt enable mask bit
    76                          ;     associated with this User Module. This function has no effect until and
    77                          ;     unless the global interrupts are enabled (for example by using the
    78                          ;     macro M8C_EnableGInt).
    79                          ;-----------------------------------------------------------------------------
    80                          ;
    81                          ;  ARGUMENTS:    None.
    82                          ;  RETURNS:      Nothing.
    83                          ;  SIDE EFFECTS:
    84                          ;    The A and X registers may be modified by this or future implementations
    85                          ;    of this function.  The same is true for all RAM page pointer registers in
    86                          ;    the Large Memory Model.  When necessary, it is the calling function's
    87                          ;    responsibility to perserve their values across calls to fastcall16 
    88                          ;    functions.
    89                          ;
    90  2C00                     PWM8_BL_EnableInt:
    91  2C00                    _PWM8_BL_EnableInt:
    92                             RAM_PROLOGUE RAM_USE_CLASS_1
    93  2C00  43 E1 10             PWM8_BL_EnableInt_M
    94                             RAM_EPILOGUE RAM_USE_CLASS_1
    95  2C03  7F                   ret
    96                          
    97                          
    98                          .ENDSECTION
    99                          
   100                          .SECTION
   101                          ;-----------------------------------------------------------------------------
   102                          ;  FUNCTION NAME: PWM8_BL_DisableInt
   103                          ;
   104                          ;  DESCRIPTION:
   105                          ;     Disables this PWM's interrupt by clearing the interrupt enable
   106                          ;     mask bit associated with this User Module.
   107                          ;-----------------------------------------------------------------------------
   108                          ;
   109                          ;  ARGUMENTS:    None
   110                          ;  RETURNS:      Nothing
   111                          ;  SIDE EFFECTS:
   112                          ;    The A and X registers may be modified by this or future implementations
   113                          ;    of this function.  The same is true for all RAM page pointer registers in
   114                          ;    the Large Memory Model.  When necessary, it is the calling function's
   115                          ;    responsibility to perserve their values across calls to fastcall16 
   116                          ;    functions.
   117                          ;
   118  2C04                     PWM8_BL_DisableInt:
   119  2C04                    _PWM8_BL_DisableInt:
   120                             RAM_PROLOGUE RAM_USE_CLASS_1
   121  2C04  41 E1 EF             PWM8_BL_DisableInt_M
   122                             RAM_EPILOGUE RAM_USE_CLASS_1
   123  2C07  7F                   ret
   124                          
   125                          
   126                          .ENDSECTION
   127                          
   128                          .SECTION
   129                          ;-----------------------------------------------------------------------------
   130                          ;  FUNCTION NAME: PWM8_BL_Start
   131                          ;
   132                          ;  DESCRIPTION:
   133                          ;     Sets the start bit in the Control register of this user module.  The
   134                          ;     PWM will begin counting on the next input clock as soon as the
   135                          ;     enable input is asserted high.
   136                          ;-----------------------------------------------------------------------------
   137                          ;
   138                          ;  ARGUMENTS:    None
   139                          ;  RETURNS:      Nothing
   140                          ;  SIDE EFFECTS:
   141                          ;    The A and X registers may be modified by this or future implementations
   142                          ;    of this function.  The same is true for all RAM page pointer registers in
   143                          ;    the Large Memory Model.  When necessary, it is the calling function's
   144                          ;    responsibility to perserve their values across calls to fastcall16 
   145                          ;    functions.
   146                          ;
   147  2C08                     PWM8_BL_Start:
   148  2C08                    _PWM8_BL_Start:
   149                             RAM_PROLOGUE RAM_USE_CLASS_1
   150  2C08  43 33 01             PWM8_BL_Start_M
   151                             RAM_EPILOGUE RAM_USE_CLASS_1
   152  2C0B  7F                   ret
   153                          
   154                          
   155                          .ENDSECTION
   156                          
   157                          .SECTION
   158                          ;-----------------------------------------------------------------------------
   159                          ;  FUNCTION NAME: PWM8_BL_Stop
   160                          ;
   161                          ;  DESCRIPTION:
   162                          ;     Disables PWM operation by clearing the start bit in the Control
   163                          ;     register.
   164                          ;-----------------------------------------------------------------------------
   165                          ;
   166                          ;  ARGUMENTS:    None
   167                          ;  RETURNS:      Nothing
   168                          ;  SIDE EFFECTS:
   169                          ;    The A and X registers may be modified by this or future implementations
   170                          ;    of this function.  The same is true for all RAM page pointer registers in
   171                          ;    the Large Memory Model.  When necessary, it is the calling function's
   172                          ;    responsibility to perserve their values across calls to fastcall16 
   173                          ;    functions.
   174                          ;
   175  2C0C                     PWM8_BL_Stop:
   176  2C0C                    _PWM8_BL_Stop:
   177                             RAM_PROLOGUE RAM_USE_CLASS_1
   178  2C0C  41 33 FE             PWM8_BL_Stop_M
   179                             RAM_EPILOGUE RAM_USE_CLASS_1
   180  2C0F  7F                   ret
   181                          
   182                          
   183                          .ENDSECTION
   184                          
   185                          .SECTION
   186                          ;-----------------------------------------------------------------------------
   187                          ;  FUNCTION NAME: PWM8_BL_WritePeriod
   188                          ;
   189                          ;  DESCRIPTION:
   190                          ;     Write the 8-bit period value into the Period register (DR1).
   191                          ;-----------------------------------------------------------------------------
   192                          ;
   193                          ;  ARGUMENTS: fastcall16 BYTE bPeriodValue (passed in A)
   194                          ;  RETURNS:   Nothing
   195                          ;  SIDE EFFECTS:
   196                          ;    If the PWM user module is stopped, then this value will also be
   197                          ;    latched into the Count register (DR0).
   198                          ;    
   199                          ;    The A and X registers may be modified by this or future implementations
   200                          ;    of this function.  The same is true for all RAM page pointer registers in
   201                          ;    the Large Memory Model.  When necessary, it is the calling function's
   202                          ;    responsibility to perserve their values across calls to fastcall16 
   203                          ;    functions.
   204                          ;
   205  2C10                     PWM8_BL_WritePeriod:
   206  2C10                    _PWM8_BL_WritePeriod:
   207                             RAM_PROLOGUE RAM_USE_CLASS_1
   208  2C10  60 31                mov   reg[PWM8_BL_PERIOD_REG], A
   209                             RAM_EPILOGUE RAM_USE_CLASS_1
   210  2C12  7F                   ret
   211                          
   212                          
   213                          .ENDSECTION
   214                          
   215                          .SECTION
   216                          ;-----------------------------------------------------------------------------
   217                          ;  FUNCTION NAME: PWM8_BL_WritePulseWidth
   218                          ;
   219                          ;  DESCRIPTION:
   220                          ;     Writes compare value into the Compare register (DR2).
   221                          ;-----------------------------------------------------------------------------
   222                          ;
   223                          ;  ARGUMENTS:    fastcall16 BYTE bCompareValue (passed in A)
   224                          ;  RETURNS:      Nothing
   225                          ;  SIDE EFFECTS:
   226                          ;    The A and X registers may be modified by this or future implementations
   227                          ;    of this function.  The same is true for all RAM page pointer registers in
   228                          ;    the Large Memory Model.  When necessary, it is the calling function's
   229                          ;    responsibility to perserve their values across calls to fastcall16 
   230                          ;    functions.
   231                          ;
   232  2C13                     PWM8_BL_WritePulseWidth:
   233  2C13                    _PWM8_BL_WritePulseWidth:
   234                             RAM_PROLOGUE RAM_USE_CLASS_1
   235  2C13  60 32                mov   reg[PWM8_BL_COMPARE_REG], A
   236                             RAM_EPILOGUE RAM_USE_CLASS_1
   237  2C15  7F                   ret
   238                          
   239                          
   240                          .ENDSECTION
   241                          
   242                          .SECTION
   243                          ;-----------------------------------------------------------------------------
   244                          ;  FUNCTION NAME: PWM8_BL_bReadPulseWidth
   245                          ;
   246                          ;  DESCRIPTION:
   247                          ;     Reads the Compare register.
   248                          ;-----------------------------------------------------------------------------
   249                          ;
   250                          ;  ARGUMENTS:    None
   251                          ;  RETURNS:      fastcall16 BYTE bCompareValue (value of DR2 in the A register)
   252                          ;  SIDE EFFECTS:
   253                          ;    The A and X registers may be modified by this or future implementations
   254                          ;    of this function.  The same is true for all RAM page pointer registers in
   255                          ;    the Large Memory Model.  When necessary, it is the calling function's
   256                          ;    responsibility to perserve their values across calls to fastcall16 
   257                          ;    functions.
   258                          ;
   259  2C16                     PWM8_BL_bReadPulseWidth:
   260  2C16                    _PWM8_BL_bReadPulseWidth:
   261  2C16                     bPWM8_BL_ReadPulseWidth:                        ; this name deprecated
   262  2C16                    _bPWM8_BL_ReadPulseWidth:                        ; this name deprecated
   263                             RAM_PROLOGUE RAM_USE_CLASS_1
   264  2C16  5D 32                mov   A, reg[PWM8_BL_COMPARE_REG]
   265                             RAM_EPILOGUE RAM_USE_CLASS_1
   266  2C18  7F                   ret
   267                          
   268                          
   269                          .ENDSECTION
   270                          
   271                          .SECTION
   272                          ;-----------------------------------------------------------------------------
   273                          ;  FUNCTION NAME: PWM8_BL_bReadCounter
   274                          ;
   275                          ;  DESCRIPTION:
   276                          ;     Returns the value in the Count register (DR0), preserving the value in
   277                          ;     the compare register (DR2). Interrupts are prevented during the transfer
   278                          ;     from the Count to the Compare registers by holding the clock low in
   279                          ;     the PSoC block.
   280                          ;-----------------------------------------------------------------------------
   281                          ;
   282                          ;  ARGUMENTS: None
   283                          ;  RETURNS:   fastcall16 BYTE bCount (value of DR0 in the A register)
   284                          ;  SIDE EFFECTS:
   285                          ;     1) The user module is stopped momentarily and one or more counts may be missed.
   286                          ;     2) The A and X registers may be modified by this or future implementations
   287                          ;        of this function.  The same is true for all RAM page pointer registers in
   288                          ;        the Large Memory Model.  When necessary, it is the calling function's
   289                          ;        responsibility to perserve their values across calls to fastcall16 
   290                          ;        functions.
   291                          ;
   292  2C19                     PWM8_BL_bReadCounter:
   293  2C19                    _PWM8_BL_bReadCounter:
   294  2C19                     bPWM8_BL_ReadCounter:                           ; this name deprecated
   295  2C19                    _bPWM8_BL_ReadCounter:                           ; this name deprecated
   296                          
   297  0000                       bOrigCompareValue:      EQU   0               ; Frame offset to temp Compare store
   298  0001                       bOrigClockSetting:      EQU   1               ; Frame offset to temp Input   store
   299  0002                       wCounter:               EQU   2               ; Frame offset to temp Count   store
   300  0003                       STACK_FRAME_SIZE:       EQU   3               ; max stack frame size is 3 bytes
   301                          
   302  2C19  71 40                RAM_PROLOGUE RAM_USE_CLASS_2
   303  2C1B  4F                   mov   X, SP                                   ; X <- stack frame pointer
   304  2C1C  5D 32                mov   A, reg[PWM8_BL_COMPARE_REG]             ; Save the Compare register on the stack
   305  2C1E  08                   push  A                                       ;
   306  2C1F  41 33 FE             PWM8_BL_Stop_M                                ; Disable (stop) the PWM
   307  2C22  71 10                M8C_SetBank1                                  ;
   308  2C24  5D 31                mov   A, reg[PWM8_BL_INPUT_REG]               ; save the clock input setting
   309  2C26  08                   push  A                                       ;   on the stack (now 2 bytes) and ...
   310                                                                           ;   hold the clock low:
   311  2C27  62 31 00             mov   reg[PWM8_BL_INPUT_REG], INPUT_REG_NULL
   312  2C2A  70 EF                M8C_SetBank0
   313                                                                           ; Extract the Count via DR2 register
   314  2C2C  5D 30                mov   A, reg[PWM8_BL_COUNTER_REG]             ; DR2 <- DR0
   315  2C2E  5D 32                mov   A, reg[PWM8_BL_COMPARE_REG]             ; Stash the Count on the stack
   316  2C30  08                   push  A                                       ;  -stack frame is now 3 bytes
   317  2C31  52 00                mov   A, [X+bOrigCompareValue]                ; Restore the Compare register
   318  2C33  60 32                mov   reg[PWM8_BL_COMPARE_REG], A
   319  2C35  71 10                M8C_SetBank1                                  ; Restore the PWM operation:
   320  2C37  52 01                mov   A, [X+bOrigClockSetting]                ;   First, the clock setting...
   321  2C39  60 31                mov   reg[PWM8_BL_INPUT_REG], A               ;
   322  2C3B  70 EF                M8C_SetBank0                                  ;
   323  2C3D  43 33 01             PWM8_BL_Start_M                               ;   then re-enable the PWM.
   324  2C40  18                   pop   A                                       ; Setup the return value
   325  2C41  38 FE                ADD   SP, -(STACK_FRAME_SIZE-1)               ; Zap remainder of stack frame
   326                             RAM_EPILOGUE RAM_USE_CLASS_2
      + 2C43  70 3F             	and	f, 0x3F
      + 2C45  71 80             	or	f, 0x80
   327  2C47  7F                   ret
HI-TECH Software Macro Assembler (PSoC MCU) V9.61
Symbol Table                                                                                               Thu Jul 09 11:34:28 2015
                PWM8_BL_Start 2C08                PWM8_BL_INT_REG 00E1           PWM8_BL_bReadCounter 2C19  
        _bPWM8_BL_ReadCounter 2C19               PWM8_BL_INT_MASK 0010        PWM8_BL_WritePulseWidth 2C13  
            bOrigClockSetting 0001                         HITECH 0002            PWM8_BL_COMPARE_REG 0032  
              FLAG_PGMODE_01b 0040                FLAG_PGMODE_10b 0080           _PWM8_BL_WritePeriod 2C10  
          PWM8_BL_CONTROL_REG 0033              PWM8_BL_INPUT_REG 0031            PWM8_BL_COUNTER_REG 0030  
               INPUT_REG_NULL 0000       _PWM8_BL_WritePulseWidth 2C13      SYSTEM_LARGE_MEMORY_MODEL 0001  
      bPWM8_BL_ReadPulseWidth 2C16                   PWM8_BL_Stop 2C0C  PWM8_BL_CONTROL_REG_START_BIT 0001  
           PWM8_BL_DisableInt 2C04                      TOOLCHAIN 0002              bOrigCompareValue 0000  
      PWM8_BL_bReadPulseWidth 2C16               FLAG_PGMODE_MASK 00C0            PWM8_BL_WritePeriod 2C10  
              RAM_USE_CLASS_1 0001                RAM_USE_CLASS_2 0002                RAM_USE_CLASS_3 0004  
              RAM_USE_CLASS_4 0008           bPWM8_BL_ReadCounter 2C19          _PWM8_BL_bReadCounter 2C19  
               _PWM8_BL_Start 2C08              PWM8_BL_EnableInt 2C00       _bPWM8_BL_ReadPulseWidth 2C16  
             STACK_FRAME_SIZE 0003       _PWM8_BL_bReadPulseWidth 2C16                  _PWM8_BL_Stop 2C0C  
                FLAG_XIO_MASK 0010     SYSTEM_IDXPG_TRACKS_IDX_PP 0001             PWM8_BL_PERIOD_REG 0031  
          _PWM8_BL_DisableInt 2C04     SYSTEM_IDXPG_TRACKS_STK_PP 0000             _PWM8_BL_EnableInt 2C00  
HI-TECH Software Macro Assembler (PSoC MCU) V9.61
                                                                                                           Thu Jul 09 11:34:28 2015
     1                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     2                          ;;;
     3                          ;;;  M8C.INC -- Microcontroller Device System Declarations
     4                          ;;;
     5                          ;;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
     6                          ;;;
     7                          ;;;  This file provides address constants, bit field masks and a set of macro
     8                          ;;;  facilities for the Cypress Semiconductor CY8C22045 Microcontroller devices.
     9                          ;;;
    10                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    11                          
    12                          ;;=============================================================================
    13                          ;; Definition of abbreviations used in the descriptions below
    14                          ;;  (RW)   The register or bit supports reads and writes
    15                          ;;  (W)    The register or bit is write-only
    16                          ;;  (R)    The register or bit is read-only
    17                          ;;  (#)    Access to the register is bit specific (see the family datasheet)
    18                          ;;  (RC)   The register or bit can be read, but writing a 0 will clear it,
    19                          ;;         writing a 1 will have no effect.
    20                          ;;=============================================================================
    21                          
    22                          ;;=============================================================================
    23                          ;;      System Registers
    24                          ;;=============================================================================
    25                          
    26                          ;----------------------------
    27                          ;  Flag Register Bit Fields
    28                          ;----------------------------
    29  00C0                    FLAG_PGMODE_MASK:  equ 0C0h     ; Paging control for > 256 bytes of RAM
    30  0000                    FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
    31  0040                    FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
    32  0080                    FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
    33  00C0                    FLAG_PGMODE_3:     equ 0C0h       ; Direct to CUR_PP page, indexed to STK_PP page
    34  0000                    FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
    35  0040                    FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
    36  0080                    FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
    37  00C0                    FLAG_PGMODE_11b:   equ 0C0h       ; Same as PGMODE_3
    38  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    39  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    40  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    41  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    42  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    43                          
    44                          
    45                          ;;=============================================================================
    46                          ;;      Register Space, Bank 0
    47                          ;;=============================================================================
    48                          
    49                          ;------------------------------------------------
    50                          ;  Port Registers
    51                          ;  Note: Also see this address range in Bank 1.
    52                          ;------------------------------------------------
    53                          ; Port 0
    54  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    55  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    56  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    57  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    58                          ; Port 1
    59  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    60  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    61  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    62  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    63                          ; Port 2
    64  0008                    PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
    65  0009                    PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
    66  000A                    PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
    67  000B                    PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
    68                          ; Port 3
    69  000C                    PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
    70  000D                    PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
    71  000E                    PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
    72  000F                    PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
    73                          ; Port 4
    74  0010                    PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
    75  0011                    PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
    76  0012                    PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
    77  0013                    PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
    78                          
    79                          ;------------------------------------------------
    80                          ;  Digital PSoC(tm) block Registers
    81                          ;  Note: Also see this address range in Bank 1.
    82                          ;------------------------------------------------
    83                          ; Digital PSoC block 00, Basic Type C
    84  0020                    DBC00DR0:     equ 20h          ; data register 0                          (#)
    85  0021                    DBC00DR1:     equ 21h          ; data register 1                          (W)
    86  0022                    DBC00DR2:     equ 22h          ; data register 2                          (RW)
    87  0023                    DBC00CR0:     equ 23h          ; control & status register 0              (#)
    88                          
    89                          ; Digital PSoC block 01, Basic Type C
    90  0024                    DBC01DR0:     equ 24h          ; data register 0                          (#)
    91  0025                    DBC01DR1:     equ 25h          ; data register 1                          (W)
    92  0026                    DBC01DR2:     equ 26h          ; data register 2                          (RW)
    93  0027                    DBC01CR0:     equ 27h          ; control & status register 0              (#)
    94                          
    95                          ; Digital PSoC block 02, Communications Type C
    96  0028                    DCC02DR0:     equ 28h          ; data register 0                          (#)
    97  0029                    DCC02DR1:     equ 29h          ; data register 1                          (W)
    98  002A                    DCC02DR2:     equ 2Ah          ; data register 2                          (RW)
    99  002B                    DCC02CR0:     equ 2Bh          ; control & status register 0              (#)
   100                          
   101                          ; Digital PSoC block 03, Communications Type C
   102  002C                    DCC03DR0:     equ 2Ch          ; data register 0                          (#)
   103  002D                    DCC03DR1:     equ 2Dh          ; data register 1                          (W)
   104  002E                    DCC03DR2:     equ 2Eh          ; data register 2                          (RW)
   105  002F                    DCC03CR0:     equ 2Fh          ; control & status register 0              (#)
   106                          
   107                          ; Digital PSoC block 10, Basic Type C
   108  0030                    DBC10DR0:     equ 30h          ; data register 0                          (#)
   109  0031                    DBC10DR1:     equ 31h          ; data register 1                          (W)
   110  0032                    DBC10DR2:     equ 32h          ; data register 2                          (RW)
   111  0033                    DBC10CR0:     equ 33h          ; control & status register 0              (#)
   112                          
   113                          ; Digital PSoC block 11, Basic Type C
   114  0034                    DBC11DR0:     equ 34h          ; data register 0                          (#)
   115  0035                    DBC11DR1:     equ 35h          ; data register 1                          (W)
   116  0036                    DBC11DR2:     equ 36h          ; data register 2                          (RW)
   117  0037                    DBC11CR0:     equ 37h          ; control & status register 0              (#)
   118                          
   119                          ; Digital PSoC block 12, Communications Type C
   120  0038                    DCC12DR0:     equ 38h          ; data register 0                          (#)
   121  0039                    DCC12DR1:     equ 39h          ; data register 1                          (W)
   122  003A                    DCC12DR2:     equ 3Ah          ; data register 2                          (RW)
   123  003B                    DCC12CR0:     equ 3Bh          ; control & status register 0              (#)
   124                          
   125                          ; Digital PSoC block 13, Communications Type C
   126  003C                    DCC13DR0:     equ 3Ch          ; data register 0                          (#)
   127  003D                    DCC13DR1:     equ 3Dh          ; data register 1                          (W)
   128  003E                    DCC13DR2:     equ 3Eh          ; data register 2                          (RW)
   129  003F                    DCC13CR0:     equ 3Fh          ; control & status register 0              (#)
   130                          
   131                          ;-------------------------------------
   132                          ;  Analog Control Registers
   133                          ;-------------------------------------
   134  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
   135  00C0                    AMX_IN_ACI3:          equ C0h    ; MASK: column 3 input mux
   136  0030                    AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
   137  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
   138  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
   139                          
   140  0061                    AMUX_CFG:      equ 61h          ; Analog MUX Configuration
   141  0030                    AMUX_CFG_INTCAP:       equ 30h    ;
   142  000E                    AMUX_CFG_MUXCLK:  	  equ 0Eh	 ;
   143  0001                    AMUX_CFG_EN:		  	  equ 01h	 ;
   144                          
   145                          ; old declarations DO NOT USE
   146  0061                    AMUXCFG:      equ 61h          ; Analog MUX Configuration
   147  0030                    AMUXCFG_INTCAP:       equ 30h    ;
   148  000E                    AMUXCFG_MUXCLK:  	  equ 0Eh	 ;
   149  0001                    AMUXCFG_EN:		  	  equ 01h	 ;
   150                          
   151  0062                    PWM_CR:       equ 62h          ; Pulse-Width Modulator Control
   152  0038                    PWM_CR_HIGH:          equ 38h    ; MASK: PWM high time
   153  0006                    PWM_CR_LOW:           equ 06h	 ; MASK: PWM low time
   154  0001                    PWM_CR_EN:            equ 01h	 ; MASK: Enable/Disable PWM function
   155                          
   156  0063                    ARF_CR:       equ 63h          ; Analog Reference Control
   157                          
   158  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus Register           (#)
   159  0080                    CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
   160  0040                    CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
   161  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
   162  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
   163  0008                    CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
   164  0004                    CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
   165  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
   166  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   167                          
   168  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   169  0020                    CMP_CR1_CLDIS1:       equ 20h    ; MASK: Column 1 comparator output latch
   170  0010                    CMP_CR1_CLDIS0:	      equ 10h    ; MASK: Column 0 comparator output latch
   171                          
   172  0068                    ADC0_CR:      equ 68h          ; Analog Column 0 Configuration
   173  0080                    ADC0_CR_CMPST:        equ 80h    ;
   174  0040                    ADC0_CR_LOREN:        equ 40h    ;
   175  0020                    ADC0_CR_SHEN:         equ 20h    ;
   176  0008                    ADC0_CR_CBSRC:        equ 08h    ;
   177  0004                    ADC0_CR_ADCM:         equ 04h    ;
   178  0001                    ADC0_CR_EN:	          equ 01h    ;
   179                          
   180  0069                    ADC1_CR:      equ 69h          ; Analog Column 1 Configuration
   181  0080                    ADC1_CR_CMPST:        equ 80h    ;
   182  0040                    ADC1_CR_LOREN:        equ 40h    ;
   183  0020                    ADC1_CR_SHEN:         equ 20h    ;
   184  0008                    ADC1_CR_CBSRC:        equ 08h    ;
   185  0004                    ADC1_CR_ADCM:         equ 04h    ;
   186+ 0001                    ADC1_CR_EN:	          equ 01h    ;
   187                          
   188                          ; Continuous Time PSoC block Type E Row 0 Col 0
   189  0072                    ACE00CR1:     equ 72h          ; Control register 1                       (RW)
   190  0073                    ACE00CR2:     equ 73h          ; Control register 2                       (RW)
   191                          
   192                          ; Continuous Time PSoC block Type E Row 0 Col 1
   193  0076                    ACE01CR1:     equ 76h          ; Control register 1                       (RW)
   194  0077                    ACE01CR2:     equ 77h          ; Control register 2                       (RW)
   195                          
   196                          ; Switched Cap PSoC blockType E Row 1 Col 0
   197  0080                    ASE10CR0:     equ 80h          ; Control register 0                       (RW)
   198                          
   199                          ; Switched Cap PSoC blockType E Row 1 Col 1
   200  0084                    ASE11CR0:     equ 84h          ; Control register 0                       (RW)
   201                          
   202                          ;-----------------------------------------------
   203                          ;  Global General Purpose Data Registers
   204                          ;-----------------------------------------------
   205  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   206  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   207  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   208  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   209                          
   210                          ;------------------------------------------------
   211                          ;  Row Digital Interconnects
   212                          ;
   213                          ;  Note: the following registers are mapped into
   214                          ;  both register bank 0 AND register bank 1.
   215                          ;------------------------------------------------
   216                          
   217  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   218  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   219  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   220  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   221  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   222  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   223  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   224                          
   225  00B8                    RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
   226  00B9                    RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
   227  00BA                    RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
   228  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   229  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   230  00BD                    RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
   231  00BE                    RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
   232                          
   233                          ;-----------------------------------------------
   234                          ;  Ram Page Pointers
   235                          ;-----------------------------------------------
   236  00D0                    CUR_PP:      equ 0D0h           ; Current   Page Pointer
   237  00D1                    STK_PP:      equ 0D1h           ; Stack     Page Pointer
   238  00D3                    IDX_PP:      equ 0D3h           ; Index     Page Pointer
   239  00D4                    MVR_PP:      equ 0D4h           ; MVI Read  Page Pointer
   240  00D5                    MVW_PP:      equ 0D5h           ; MVI Write Page Pointer
   241                          
   242                          ;------------------------------------------------
   243                          ;  I2C Configuration Registers
   244                          ;------------------------------------------------
   245  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   246  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   247  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   248  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   249  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   250  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   251  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   252  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   253  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   254  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   255                          
   256  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   257  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   258  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   259  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   260  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   261  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   262  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   263  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   264  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   265                          
   266  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   267                          
   268  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   269  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   270  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   271  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   272  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   273                          
   274                          ;------------------------------------------------
   275                          ;  System and Global Resource Registers
   276                          ;------------------------------------------------
   277  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   278                                                         ; Use INT_MSK0 bit field masks
   279  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   280                                                         ; Use INT_MSK1 bit field masks
   281  00DC                    INT_CLR2:     equ 0DCh          ; Interrupt Clear Register 2               (RW)
   282                                                         ; Use INT_MSK2 bit field masks
   283  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   284                                                         ; Use INT_MSK3 bit field masks
   285                          
   286  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   287  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   288  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   289                          
   290  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   291  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   292  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   293  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   294  0010                    INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
   295  0008                    INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
   296  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   297  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   298  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   299                          
   300  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   301  0080                    INT_MSK1_DCC13:            equ 80h ; MASK: enable/disable DCC13 block interrupt
   302  0040                    INT_MSK1_DCC12:            equ 40h ; MASK: enable/disable DCC12 block interrupt
   303  0020                    INT_MSK1_DBC11:            equ 20h ; MASK: enable/disable DBC11 block interrupt
   304  0010                    INT_MSK1_DBC10:            equ 10h ; MASK: enable/disable DBC10 block interrupt
   305  0008                    INT_MSK1_DCC03:            equ 08h ; MASK: enable/disable DCC03 block interrupt
   306  0004                    INT_MSK1_DCC02:            equ 04h ; MASK: enable/disable DCC02 block interrupt
   307  0002                    INT_MSK1_DBC01:            equ 02h ; MASK: enable/disable DBC01 block interrupt
   308  0001                    INT_MSK1_DBC00:            equ 01h ; MASK: enable/disable DBC00 block interrupt
   309                          
   310  00DF                    INT_MSK2:     equ DFh			; Custom block Mask Register			   (RW)
   311  0010                    INT_MSK2_SARADC:           equ 10h ; MASK: enable/disable SARADC block interrupt
   312  0020                    INT_MSK2_CSD0:             equ 20h ; MASK: enable/disable CSD0 block interrupt
   313  0040                    INT_MSK2_CSD1:             equ 40h ; MASK: enable/disable CSD1 block interrupt
   314  0080                    INT_MSK2_RTC:              equ 80h ; MASK: enable/disable RTC block interrupt
   315                          
   316  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   317  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   318                          
   319                          ;------------------------------------------------------
   320                          ;  MAC Registers
   321                          ;------------------------------------------------------
   322                          
   323  00E8                    MUL0_X:       equ 0E8h          ; Multiply Input X Register                (W)
   324  00E9                    MUL0_Y:       equ 0E9h          ; Multiply Input Y Register                (W)
   325  00EA                    MUL0_DH:      equ 0EAh          ; Multiply Result High Byte Register       (R)
   326  00EB                    MUL0_DL:      equ 0EBh          ; Multiply Result Low Byte Register        (R)
   327                          
   328  00EC                    ACC0_DR1:     equ 0ECh          ; Accumulator Data Register 1              (RW)
   329  00ED                    ACC0_DR0:     equ 0EDh          ; Accumulator Data Register 0              (RW)
   330  00EE                    ACC0_DR3:     equ 0EEh          ; Accumulator Data Register 3              (RW)
   331  00EF                    ACC0_DR2:     equ 0EFh          ; Accumulator Data Register 2              (RW)
   332                          
   333                          ; DECIMATOR Control Registers
   334  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   335  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   336                          
   337                          ;------------------------------------------------------
   338                          ;  System Status and Control Registers
   339                          ;
   340                          ;  Note: The following registers are mapped into both
   341                          ;        register bank 0 AND register bank 1.
   342                          ;------------------------------------------------------
   343  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   344                                                             ; Use FLAG_ masks defined at top of file
   345                          
   346  00FD                    DAC_D:        equ 0FDh		   ; DAC Data Register                        (RW)
   347                          
   348  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   349  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: flag, Internal Reset Status bit
   350  0010                    CPU_SCR1_SLIMO:         equ 10h	   ; MASK: Slow IMO (internal main osc) enable
   351  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   352  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   353  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   354                          
   355  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   356  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   357  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   358  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   359  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   360  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   361                          
   362                          ;------------------------------------------------------
   363                          ;  Neon Capsense Digital Control Registers
   364                          ;------------------------------------------------------
   365  0050                    CSD0_DR0_L:				equ 50h		; Capsense 0 data low 0				(RW)
   366  0054                    CSD0_DR0_H:				equ 54h		; Capsense 0 data high 0			(RW)
   367  0058                    CSD1_DR0_L:				equ 58h		; Capsense 1 data low 0				(RW)
   368  005C                    CSD1_DR0_H:				equ 5Ch		; Capsense 1 data high 0			(RW)
   369  0051                    CSD0_DR1_L:				equ 51h		; Capsense 0 data low 1				(RW)
   370  0055                    CSD0_DR1_H:				equ 55h		; Capsense 0 data high 1			(RW)
   371  0059                    CSD1_DR1_L:				equ 59h		; Capsense 1 data low 1				(RW)
   372  005D                    CSD1_DR1_H:				equ 5Dh		; Capsense 1 data high 1			(RW)
   373  0052                    CSD0_CNT_L:				equ 52h		; Capsense 0 counter low			(RW)
   374  0056                    CSD0_CNT_H:				equ 56h		; Capsense 0 counter high			(RW)
   375  005A                    CSD1_CNT_L:				equ 5Ah		; Capsense 1 counter low			(RW)
   376  005E                    CSD1_CNT_H:				equ	5Eh		; Capsense 1 counter high			(RW)
   377  0053                    CSD0_CR0:				equ 53h		; Capsense 0 control 0				(RW)
   378  005B                    CSD1_CR0:				equ 5Bh		; Capsense 1 control 0				(RW)
   379  0057                    CSD0_CR1:				equ 57h		; Capsense 0 control 1				(RW)
   380  005F                    CSD1_CR1:				equ 5Fh		; Capsense 1 control 1				(RW)
   381                          
   382                          ;------------------------------------------------------
   383                          ;  Neon Analog Registers
   384                          ;------------------------------------------------------
   385  0065                    ASY_CR:					equ 65h		; Analog Synchronization Control	(RW)
   386  006A                    ADC_DH:					equ 6Ah		; ADC data high						(RW)
   387  006B                    ADC_DL:					equ 6Bh		; ADC data low						(RW)
   388  00C8                    PWMVREF0:				equ C8h		; PWM Voltage Reference 0			(RW)
   389  00C9                    PWMVREF1:				equ C9h		; PWM Voltage Reference 1			(RW)
   390  00CB                    PWMSRC:					equ CBh		; PWM Source						(RW)
   391  00CA                    IDACMODE:				equ CAh		; IDAC Mode							(RW)
   392  00FC                    IDACR_D:				equ FCh		; Analog Mux DAC data 0				(RW)
   393  00FD                    IDACL_D:				equ FDh		; Analog Mux DAC data 1				(RW)
   394                          
   395                          ;------------------------------------------------------
   396                          ;  Neon Digital Registers
   397                          ;------------------------------------------------------
   398  00B7                    RDI0DSM:				equ B7h		; Row Digital Interconnect input select 0	(RW)
   399  00BF                    RDI1DSM:				equ BFh		; Row Digital Interconnect input select 1	(RW)
   400                          
   401                          ;------------------------------------------------------
   402                          ;  Neon Test Registers
   403                          ;------------------------------------------------------
   404  00CC                    TSCR0:					equ CCh		; Tsource 0							(RW)
   405  00CD                    TSCMPH:					equ CDh		; TSCMP high						(RW)
   406  00CE                    TSCMPL:					equ CEh		; TSCMP low							(RW)
   407  00CF                    TSCR1:					equ CFh		; Tsource 1							(RW)
   408                          
   409                          ;;=============================================================================
   410                          ;;      Register Space, Bank 1
   411                          ;;=============================================================================
   412                          
   413                          ;------------------------------------------------
   414                          ;  Port Registers
   415                          ;  Note: Also see this address range in Bank 0.
   416                          ;------------------------------------------------
   417                          ; Port 0
   418  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   419  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   420  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   421  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   422                          
   423                          ; Port 1
   424  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   425  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   426  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   427  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   428                          
   429                          ; Port 2
   430  0008                    PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
   431  0009                    PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
   432  000A                    PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
   433  000B                    PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
   434                          
   435                          ; Port 3
   436  000C                    PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
   437  000D                    PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
   438  000E                    PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
   439  000F                    PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
   440                          
   441                          ; Port 4
   442  0010                    PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
   443  0011                    PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
   444  0012                    PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
   445  0013                    PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
   446                          
   447                          ;------------------------------------------------
   448                          ;  Digital PSoC(tm) block Registers
   449                          ;  Note: Also see this address range in Bank 0.
   450                          ;------------------------------------------------
   451                          
   452                          ; Digital PSoC block 00, Basic Type C
   453  0020                    DBC00FN:      equ 20h          ; Function Register                        (RW)
   454  0021                    DBC00IN:      equ 21h          ;    Input Register                        (RW)
   455  0022                    DBC00OU:      equ 22h          ;   Output Register                        (RW)
   456  0023                    DBC00CR1:     equ 23h          ;   control & status register 1            (RW)
   457                          
   458                          ; Digital PSoC block 01, Basic Type C
   459  0024                    DBC01FN:      equ 24h          ; Function Register                        (RW)
   460  0025                    DBC01IN:      equ 25h          ;    Input Register                        (RW)
   461  0026                    DBC01OU:      equ 26h          ;   Output Register                        (RW)
   462  0027                    DBC01CR1:     equ 27h          ;   control & status register 1            (RW)
   463                          
   464                          ; Digital PSoC block 02, Communications Type C
   465  0028                    DCC02FN:      equ 28h          ; Function Register                        (RW)
   466  0029                    DCC02IN:      equ 29h          ;    Input Register                        (RW)
   467  002A                    DCC02OU:      equ 2Ah          ;   Output Register                        (RW)
   468  002B                    DBC02CR1:     equ 2Bh          ;   control & status register 1            (RW)
   469                          
   470                          ; Digital PSoC block 03, Communications Type C
   471  002C                    DCC03FN:      equ 2Ch          ; Function Register                        (RW)
   472  002D                    DCC03IN:      equ 2Dh          ;    Input Register                        (RW)
   473  002E                    DCC03OU:      equ 2Eh          ;   Output Register                        (RW)
   474  0029                    DBC03CR1:     equ 29h          ;   control & status register 1            (RW)
   475                          
   476                          ; Digital PSoC block 10, Basic Type C
   477  0030                    DBC10FN:      equ 30h          ; Function Register                        (RW)
   478  0031                    DBC10IN:      equ 31h          ;    Input Register                        (RW)
   479  0032                    DBC10OU:      equ 32h          ;   Output Register                        (RW)
   480  0033                    DBC10CR1:     equ 33h          ;   control & status register 1            (RW)
   481                          
   482                          ; Digital PSoC block 11, Basic Type C
   483  0034                    DBC11FN:      equ 34h          ; Function Register                        (RW)
   484  0035                    DBC11IN:      equ 35h          ;    Input Register                        (RW)
   485  0036                    DBC11OU:      equ 36h          ;   Output Register                        (RW)
   486  0037                    DBC11CR1:     equ 37h          ;   control & status register 1            (RW)
   487                          
   488                          ; Digital PSoC block 12, Communications Type C
   489  0038                    DCC12FN:      equ 38h          ; Function Register                        (RW)
   490  0039                    DCC12IN:      equ 39h          ;    Input Register                        (RW)
   491  003A                    DCC12OU:      equ 3Ah          ;   Output Register                        (RW)
   492  003B                    DBC12CR1:     equ 3Bh          ;   control & status register 1            (RW)
   493                          
   494                          ; Digital PSoC block 13, Communications Type C
   495  003C                    DCC13FN:      equ 3Ch          ; Function Register                        (RW)
   496  003D                    DCC13IN:      equ 3Dh          ;    Input Register                        (RW)
   497  003E                    DCC13OU:      equ 3Eh          ;   Output Register                        (RW)
   498  003F                    DBC13CR1:     equ 3Fh          ;   control & status register 1            (RW)
   499                          
   500                          ;------------------------------------------------
   501                          ;  System and Global Resource Registers
   502                          ;  Note: Also see this address range in Bank 0.
   503                          ;------------------------------------------------
   504                          
   505  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   506  00C0                    CLK_CR0_ACOLUMN_3:    equ C0h    ; MASK: Specify clock for analog cloumn
   507  0030                    CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
   508  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   509  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   510                          
   511  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   512  0018                    CLK_CR1_ACLK1:        equ 18h    ; MASK: Digital PSoC block for analog source
   513  0003                    CLK_CR1_ACLK0:        equ 03h    ; MASK: Digital PSoC block for analog source
   514                          
   515  0003                    CLK_CR1_ACLK2:        equ 03h    ; Deprecated do not use
   516                          
   517  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   518  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   519                          
   520  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   521  000F                    AMD_CR0_AMOD0:        equ 0Fh    ; MASK: Modulation source for analog column 0
   522                          
   523  0064                    CMP_GO_EN:    equ 64h          ; Comparator Bus To Global Out Enable      (RW)
   524  0080                    CMP_GO_EN_GOO5:       equ 80h    ; MASK: Selected Col 1 signal to GOO5
   525  0040                    CMP_GO_EN_GOO1:       equ 40h    ; MASK: Selected Col 1 signal to GOO1
   526  0030                    CMP_GO_EN_SEL1:       equ 30h    ; MASK: Column 1 Signal Select
   527  0008                    CMP_GO_EN_GOO4:       equ 08h    ; MASK: Selected Col 0 signal to GOO4
   528  0004                    CMP_GO_EN_GOO0:       equ 04h    ; MASK: Selected Col 0 signal to GOO0
   529  0003                    CMP_GO_EN_SEL0:       equ 03h    ; MASK: Column 0 Signal Select
   530                          
   531  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   532  000F                    AMD_CR1_AMOD1:        equ 0Fh    ; MASK: Modulation ctrl for analog column 1
   533                          
   534  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   535  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   536  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   537                          
   538  006B                    CLK_CR3:      equ 6Bh          ; Analog Clock Source Control Register 3   (RW)
   539  0040                    CLK_CR3_SYS1:         equ 40h    ; MASK: Analog Clock 1 selection
   540  0030                    CLK_CR3_DIVCLK1:      equ 30h    ; MASK: Analog Clock 1 divider
   541  0004                    CLK_CR3_SYS0:         equ 04h    ; MASK: Analog Clock 0 selection
   542  0003                    CLK_CR3_DIVCLK0:      equ 03h    ; MASK: Analog Clock 0 divider
   543                          
   544                          ;------------------------------------------------
   545                          ;  Global Digital Interconnects
   546                          ;------------------------------------------------
   547                          
   548  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   549  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   550  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   551  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   552                          
   553  00A0                    GDI_O_IN_CR:  equ 0A0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   554  00A1                    GDI_E_IN_CR:  equ 0A1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   555  00A2                    GDI_O_OU_CR:  equ 0A2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   556  00A3                    GDI_E_OU_CR:  equ 0A3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   557                          
   558  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   559  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   560                          
   561                          ;------------------------------------------------
   562                          ;  Analog Mux Bus Port Enable Bits
   563                          ;------------------------------------------------
   564  00D8                    MUX_CR0:      equ 0D8h          ; Analog Mux Port 0 Bit Enables Register
   565  00D9                    MUX_CR1:      equ 0D9h          ; Analog Mux Port 1 Bit Enables Register
   566  00DA                    MUX_CR2:      equ 0DAh          ; Analog Mux Port 2 Bit Enables Register
   567  00DB                    MUX_CR3:      equ 0DBh          ; Analog Mux Port 3 Bit Enables Register
   568  00EC                    MUX_CR4:      equ 0ECh          ; Analog Mux Port 4 Bit Enables Register
   569                          
   570                          ;------------------------------------------------
   571                          ;  Clock and System Control Registers
   572                          ;------------------------------------------------
   573                          
   574  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   575  0080                    OSC_GO_EN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   576  0040                    OSC_GO_EN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   577  0020                    OSC_GO_EN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   578  0010                    OSC_GO_EN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   579  0008                    OSC_GO_EN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   580  0004                    OSC_GO_EN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   581  0002                    OSC_GO_EN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   582  0001                    OSC_GO_EN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   583                          
   584  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   585  0003                    OSC_CR4_VC3SEL:       equ 03h    ; MASK: System VC3 Clock source
   586                          
   587  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   588                          
   589  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   590  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   591  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   592  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   593  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   594  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   595  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   596  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   597  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   598  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   599  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   600  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   601  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   602  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   603  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   604  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   605  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   606  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   607                          
   608  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   609  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   610  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   611                          
   612  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   613  0080                    OSC_CR2_PLLGAIN:      equ 80h    ; MASK: High/Low gain
   614  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   615  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   616  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   617                          
   618  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   619  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   620  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   621  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   622  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   623  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   624  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   625  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   626                          
   627  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   628  0008                    VLT_CMP_NOWRITE:      equ 08h    ; MASK: Vcc below Flash Write level
   629  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   630  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   631  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   632                          
   633  00E5                    ADC0_TR:      equ 0E5h          ; ADC Column 0 Trim Register
   634  00E6                    ADC1_TR:      equ 0E6h          ; ADC Column 1 Trim Register
   635                          
   636  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   637  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   638  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   639  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   640                          
   641  00FA                    FLS_PR1:      equ 0FAh          ; Flash Program Register 1                 (RW)
   642  0003                    FLS_PR1_BANK:         equ 03h    ; MASK: Select Active Flash Bank
   643                          
   644  00FD                    DAC_CR0:       equ 0FDh          ; Analog Mux DAC Control Register 0
   645  00DC                    DAC_CR1:       equ 0DCh          ; Analog Mux DAC Control Register 1
   646  0008                    DAC_CR_IRANGE:        equ 08h    ; MASK: Sets the DAC Range low or high
   647  0006                    DAC_CR_OSCMODE:       equ 06h    ; MASK: Defines the reset mode for AMux
   648  0001                    DAC_CR_ENABLE:        equ 01h    ; MASK: Enable/Disable DAC function
   649                          
   650                          ;------------------------------------------------
   651                          ;  I2C Control Registers
   652                          ;------------------------------------------------
   653                          
   654  00AD                    I2C_ADDR:    equ 0ADh          ; I2C Address Register (RW)
   655                          
   656                          ;------------------------------------------------------
   657                          ;  Neon Analog Registers
   658                          ;------------------------------------------------------
   659  0053                    VDAC50CR0:		equ 53h			; V DAC5 control 0				(RW)
   660  0057                    VDAC51CR0:		equ 57h			; V DAC5 control 1				(RW)
   661  00A8                    ADC_CR0:		equ A8h			; ADC control 0					(RW)
   662  00A9                    ADC_CR1:		equ A9h			; ADC control 1					(RW)
   663  00AA                    ADC_CR2:		equ AAh			; ADC control 2					(RW)
   664  00AB                    ADC_CR3TRIM:	equ ABh			; ADC control 3					(RW)
   665  00AC                    ADC_CR4:		equ ACh			; ADC control 4					(RW)
   666  00E7                    VDAC_TRIM:		equ E7h			; V DAC trim					(RW)
   667                          
   668                          ;------------------------------------------------------
   669                          ;  Neon Current Sense CMP Registers
   670                          ;------------------------------------------------------
   671  0050                    CMP0CR1:		equ 50h			; CMP0 control 1				(RW)
   672  0051                    CMP0CR2:		equ 51h			; CMP0 control 2				(RW)
   673  0054                    CMP1CR1:		equ 54h			; CMP1 control 1				(RW)
   674  0055                    CMP1CR2:		equ 55h			; CMP1 control 2				(RW)
   675  0058                    CSCMPCR0:		equ 58h			; CSCMP control 0				(RW)
   676  0059                    CSCMPGOEN:		equ 59h			; CSCMO global out enable		(RW)
   677  005A                    CSLUTCR0:		equ 5Ah			; CSLUT control 0				(RW)
   678  005B                    CMPCOLMUX:		equ 5Bh			; CMP Column Mux				(RW)
   679  005C                    CMPPWMCR:		equ 5Ch			; CMP PWM control				(RW)
   680  005D                    CMPFLTCR:		equ 5Dh			; CMP filter control			(RW)
   681  005E                    CMPCLK1:		equ 5Eh			; CMP clock 1					(RW)
   682  005F                    CMPCLK0:		equ 5Fh			; CMP clock 0					(RW)
   683                          
   684                          ;------------------------------------------------------
   685                          ;  Neon Real Time Clock Registers
   686                          ;------------------------------------------------------
   687  00A4                    RTCH:			equ A4h			; Real time current hour		(RW)
   688  00A5                    RTCM:			equ A5h			; Real time current minute		(RW)
   689  00A6                    RTCS:			equ A6h			; Real time current second		(RW)
   690  00A7                    RTCCR:			equ A7h			; Real time clock control		(RW)
   691                          
   692                          ;------------------------------------------------------
   693                          ;  Analog MUX Config Registers
   694                          ;------------------------------------------------------
   695                          
   696  006A                    AMUX_CFG1:			equ 6Ah  ; Analog MUX Configuration 1
   697  0020                    AMUX_CFG1_GOINVR:	equ 20h  ;
   698  0010                    AMUX_CFG1_GOINVL:  	equ 10h	 ;
   699  000C                    AMUX_CFG1_AMUXMODR:	equ 0Ch	 ;
   700  0003                    AMUX_CFG1_AMUXMODL:	equ 03h	 ;
   701                          
   702                          ;;=============================================================================
   703                          ;;      M8C System Macros
   704                          ;;  These macros should be used when their functions are needed.
   705                          ;;=============================================================================
   706                          
   707                          ;----------------------------------------------------
   708                          ;  Swapping Register Banks
   709                          ;----------------------------------------------------
   710                              macro M8C_SetBank0
   711                              and   F, ~FLAG_XIO_MASK
   712  3D73                        endm
   713                          
   714                              macro M8C_SetBank1
   715                              or    F, FLAG_XIO_MASK
   716  3D73                        endm
   717                          
   718                          ;----------------------------------------------------
   719                          ;  Global Interrupt Enable/Disable
   720                          ;----------------------------------------------------
   721                              macro M8C_EnableGInt
   722                              or    F, FLAG_GLOBAL_IE
   723  3D73                        endm
   724                          
   725                              macro M8C_DisableGInt
   726                              and   F, ~FLAG_GLOBAL_IE
   727  3D73                        endm
   728                          
   729                          ;----------------------------------------------------
   730                          ;  Enable/Disable Interrupt Mask
   731                          ;
   732                          ;  Use the following macros to enable/disable
   733                          ;  bits in the Interrupt mask registers,
   734                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   735                          ;
   736                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   737                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   738                          ;
   739                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   740                          ;        and MASK is the bit set to enable or disable
   741                          ;----------------------------------------------------
   742                          ; Disable Interrupt Bit Mask(s)
   743                              macro M8C_DisableIntMask
   744                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   745  3D73                        endm
   746                          
   747                          ; Enable Interrupt Bit Mask(s)
   748                              macro M8C_EnableIntMask
   749                              or    reg[@0], @1               ; enable specified interrupt enable bit
   750  3D73                        endm
   751                          
   752                          ;----------------------------------------------------
   753                          ;  Clear Posted Interrupt Flag Mask
   754                          ;
   755                          ;  Use the following macros to clear the
   756                          ;  bits in the Interrupt Clear registers,
   757                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   758                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   759                          ;
   760                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   761                          ;        and MASK is the bit set to enable or disable
   762                          ;----------------------------------------------------
   763                              macro M8C_ClearIntFlag
   764                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   765  3D73                        endm
   766                          
   767                          ;----------------------------------------------------
   768                          ;  Power-On Reset & WatchDog Timer Functions
   769                          ;----------------------------------------------------
   770                              macro M8C_EnableWatchDog
   771                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   772  3D73                        endm
   773                          
   774                              macro M8C_ClearWDT
   775                              mov   reg[RES_WDT], 00h
   776  3D73                        endm
   777                          
   778                              macro M8C_ClearWDTAndSleep
   779                              mov   reg[RES_WDT], 38h
   780  3D73                        endm
   781                          
   782                          ;----------------------------------------------------
   783                          ;  Sleep, CPU Stop & Software Reset
   784                          ;----------------------------------------------------
   785                              macro M8C_Sleep
   786                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   787                              ; The next instruction to be executed depends on the state of the
   788                              ; various interrupt enable bits. If some interrupts are enabled
   789                              ; and the global interrupts are disabled, the next instruction will
   790                              ; be the one that follows the invocation of this macro. If global
   791                              ; interrupts are also enabled then the next instruction will be
   792                              ; from the interrupt vector table. If no interrupts are enabled
   793                              ; then the CPU sleeps forever.
   794  3D73                        endm
   795                          
   796                              macro M8C_Stop
   797                              ; In general, you probably don't want to do this, but here's how:
   798                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   799                              ; Next instruction to be executed is located in the interrupt
   800                              ; vector table entry for Power-On Reset.
   801  3D73                        endm
   802                          
   803                              macro M8C_Reset
   804                              ; Restore CPU to the power-on reset state.
   805                              mov A, 0
   806                              SSC
   807                              ; Next non-supervisor instruction will be at interrupt vector 0.
   808  3D73                        endm
   809                          
   810                          ;----------------------------------------------------
   811                          ; ImageCraft Code Compressor Actions
   812                          ;----------------------------------------------------
   813                              ; Suspend Code Compressor
   814                              ; Must not span a RET or RETI instruction
   815                              ; without resuming code compression
   816                              macro Suspend_CodeCompressor
   817                              or   F, 0
   818  3D73                        endm
   819                          
   820                              ; Resume Code Compression
   821                              macro Resume_CodeCompressor
   822                              add  SP, 0
   823                              endm
      + 3D73                    
      + 3D73                    ; end of file m8c.inc
      + 3D73                    ;;*****************************************************************************
;;******************
      +                         ***********************************************************
;;  FILENAME: PWM8_BL.inc
;;   Version: 
      +                         2.60, Updated on 2013/5/19 at 10:44:7
;;  Generated by PSoC Designer 5.4.2946
;;
;;  DESCRIPTION: As
      +                         sembler declarations for the PWM8 user module interface
;;------------------------------------------
      +                         -----------------------------------
;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserve
      +                         d.
;;*****************************************************************************
;;***************
      +                         **************************************************************
   824                          
   825                          ; end of file m8c.inc
    29  00C0                    FLAG_PGMODE_MASK:  equ 0C0h     ; Paging control for > 256 bytes of RAM
    30  0000                    FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
    31  0040                    FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
    32  0080                    FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
    33  00C0                    FLAG_PGMODE_3:     equ 0C0h       ; Direct to CUR_PP page, indexed to STK_PP page
    34  0000                    FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
    35  0040                    FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
    36  0080                    FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
    37  00C0                    FLAG_PGMODE_11b:   equ 0C0h       ; Same as PGMODE_3
    38  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    39  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    40  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    41  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    42  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    43                          
    44                          
    45                          ;;=============================================================================
    46                          ;;      Register Space, Bank 0
    47                          ;;=============================================================================
    48                          
    49                          ;------------------------------------------------
    50                          ;  Port Registers
    51                          ;  Note: Also see this address range in Bank 1.
    52                          ;------------------------------------------------
    53                          ; Port 0
    54  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    55  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    56  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    57  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    58                          ; Port 1
    59  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    60  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    61  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    62  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    63                          ; Port 2
    64  0008                    PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
    65  0009                    PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
    66  000A                    PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
    67  000B                    PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
    68                          ; Port 3
    69  000C                    PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
    70  000D                    PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
    71  000E                    PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
    72  000F                    PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
    73                          ; Port 4
    74  0010                    PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
    75  0011                    PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
    76  0012                    PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
    77  0013                    PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
    78                          
    79                          ;------------------------------------------------
    80                          ;  Digital PSoC(tm) block Registers
    81                          ;  Note: Also see this address range in Bank 1.
    82                          ;------------------------------------------------
    83                          ; Digital PSoC block 00, Basic Type C
    84  0020                    DBC00DR0:     equ 20h          ; data register 0                          (#)
    85  0021                    DBC00DR1:     equ 21h          ; data register 1                          (W)
    86  0022                    DBC00DR2:     equ 22h          ; data register 2                          (RW)
    87  0023                    DBC00CR0:     equ 23h          ; control & status register 0              (#)
    88                          
    89                          ; Digital PSoC block 01, Basic Type C
    90  0024                    DBC01DR0:     equ 24h          ; data register 0                          (#)
    91  0025                    DBC01DR1:     equ 25h          ; data register 1                          (W)
    92  0026                    DBC01DR2:     equ 26h          ; data register 2                          (RW)
    93  0027                    DBC01CR0:     equ 27h          ; control & status register 0              (#)
    94                          
    95                          ; Digital PSoC block 02, Communications Type C
    96  0028                    DCC02DR0:     equ 28h          ; data register 0                          (#)
    97  0029                    DCC02DR1:     equ 29h          ; data register 1                          (W)
    98  002A                    DCC02DR2:     equ 2Ah          ; data register 2                          (RW)
    99  002B                    DCC02CR0:     equ 2Bh          ; control & status register 0              (#)
   100                          
   101                          ; Digital PSoC block 03, Communications Type C
   102  002C                    DCC03DR0:     equ 2Ch          ; data register 0                          (#)
   103  002D                    DCC03DR1:     equ 2Dh          ; data register 1                          (W)
   104  002E                    DCC03DR2:     equ 2Eh          ; data register 2                          (RW)
   105  002F                    DCC03CR0:     equ 2Fh          ; control & status register 0              (#)
   106                          
   107                          ; Digital PSoC block 10, Basic Type C
   108  0030                    DBC10DR0:     equ 30h          ; data register 0                          (#)
   109  0031                    DBC10DR1:     equ 31h          ; data register 1                          (W)
   110  0032                    DBC10DR2:     equ 32h          ; data register 2                          (RW)
   111  0033                    DBC10CR0:     equ 33h          ; control & status register 0              (#)
   112                          
   113                          ; Digital PSoC block 11, Basic Type C
   114  0034                    DBC11DR0:     equ 34h          ; data register 0                          (#)
   115  0035                    DBC11DR1:     equ 35h          ; data register 1                          (W)
   116  0036                    DBC11DR2:     equ 36h          ; data register 2                          (RW)
   117  0037                    DBC11CR0:     equ 37h          ; control & status register 0              (#)
   118                          
   119                          ; Digital PSoC block 12, Communications Type C
   120  0038                    DCC12DR0:     equ 38h          ; data register 0                          (#)
   121  0039                    DCC12DR1:     equ 39h          ; data register 1                          (W)
   122  003A                    DCC12DR2:     equ 3Ah          ; data register 2                          (RW)
   123  003B                    DCC12CR0:     equ 3Bh          ; control & status register 0              (#)
   124                          
   125                          ; Digital PSoC block 13, Communications Type C
   126  003C                    DCC13DR0:     equ 3Ch          ; data register 0                          (#)
   127  003D                    DCC13DR1:     equ 3Dh          ; data register 1                          (W)
   128  003E                    DCC13DR2:     equ 3Eh          ; data register 2                          (RW)
   129  003F                    DCC13CR0:     equ 3Fh          ; control & status register 0              (#)
   130                          
   131                          ;-------------------------------------
   132                          ;  Analog Control Registers
   133                          ;-------------------------------------
   134  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
   135  00C0                    AMX_IN_ACI3:          equ C0h    ; MASK: column 3 input mux
   136  0030                    AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
   137  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
   138  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
   139                          
   140  0061                    AMUX_CFG:      equ 61h          ; Analog MUX Configuration
   141  0030                    AMUX_CFG_INTCAP:       equ 30h    ;
   142  000E                    AMUX_CFG_MUXCLK:  	  equ 0Eh	 ;
   143  0001                    AMUX_CFG_EN:		  	  equ 01h	 ;
   144                          
   145                          ; old declarations DO NOT USE
   146  0061                    AMUXCFG:      equ 61h          ; Analog MUX Configuration
   147  0030                    AMUXCFG_INTCAP:       equ 30h    ;
   148  000E                    AMUXCFG_MUXCLK:  	  equ 0Eh	 ;
   149  0001                    AMUXCFG_EN:		  	  equ 01h	 ;
   150                          
   151  0062                    PWM_CR:       equ 62h          ; Pulse-Width Modulator Control
   152  0038                    PWM_CR_HIGH:          equ 38h    ; MASK: PWM high time
   153  0006                    PWM_CR_LOW:           equ 06h	 ; MASK: PWM low time
   154  0001                    PWM_CR_EN:            equ 01h	 ; MASK: Enable/Disable PWM function
   155                          
   156  0063                    ARF_CR:       equ 63h          ; Analog Reference Control
   157                          
   158  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus Register           (#)
   159  0080                    CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
   160  0040                    CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
   161  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
   162  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
   163  0008                    CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
   164  0004                    CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
   165  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
   166  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   167                          
   168  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   169  0020                    CMP_CR1_CLDIS1:       equ 20h    ; MASK: Column 1 comparator output latch
   170  0010                    CMP_CR1_CLDIS0:	      equ 10h    ; MASK: Column 0 comparator output latch
   171                          
   172  0068                    ADC0_CR:      equ 68h          ; Analog Column 0 Configuration
   173  0080                    ADC0_CR_CMPST:        equ 80h    ;
   174  0040                    ADC0_CR_LOREN:        equ 40h    ;
   175  0020                    ADC0_CR_SHEN:         equ 20h    ;
   176  0008                    ADC0_CR_CBSRC:        equ 08h    ;
   177  0004                    ADC0_CR_ADCM:         equ 04h    ;
   178  0001                    ADC0_CR_EN:	          equ 01h    ;
   179                          
   180  0069                    ADC1_CR:      equ 69h          ; Analog Column 1 Configuration
   181  0080                    ADC1_CR_CMPST:        equ 80h    ;
   182  0040                    ADC1_CR_LOREN:        equ 40h    ;
   183  0020                    ADC1_CR_SHEN:         equ 20h    ;
   184  0008                    ADC1_CR_CBSRC:        equ 08h    ;
   185  0004                    ADC1_CR_ADCM:         equ 04h    ;
   186  0001                    ADC1_CR_EN:	          equ 01h    ;
   187                          
   188                          ; Continuous Time PSoC block Type E Row 0 Col 0
   189  0072                    ACE00CR1:     equ 72h          ; Control register 1                       (RW)
   190  0073                    ACE00CR2:     equ 73h          ; Control register 2                       (RW)
   191                          
   192                          ; Continuous Time PSoC block Type E Row 0 Col 1
   193  0076                    ACE01CR1:     equ 76h          ; Control register 1                       (RW)
   194  0077                    ACE01CR2:     equ 77h          ; Control register 2                       (RW)
   195                          
   196                          ; Switched Cap PSoC blockType E Row 1 Col 0
   197  0080                    ASE10CR0:     equ 80h          ; Control register 0                       (RW)
   198                          
   199                          ; Switched Cap PSoC blockType E Row 1 Col 1
   200  0084                    ASE11CR0:     equ 84h          ; Control register 0                       (RW)
   201                          
   202                          ;-----------------------------------------------
   203                          ;  Global General Purpose Data Registers
   204                          ;-----------------------------------------------
   205  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   206  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   207  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   208  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   209                          
   210                          ;------------------------------------------------
   211                          ;  Row Digital Interconnects
   212                          ;
   213                          ;  Note: the following registers are mapped into
   214                          ;  both register bank 0 AND register bank 1.
   215                          ;------------------------------------------------
   216                          
   217  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   218  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   219  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   220  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   221  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   222  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   223  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   224                          
   225  00B8                    RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
   226  00B9                    RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
   227  00BA                    RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
   228  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   229  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   230  00BD                    RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
   231  00BE                    RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
   232                          
   233                          ;-----------------------------------------------
   234                          ;  Ram Page Pointers
   235                          ;-----------------------------------------------
   236  00D0                    CUR_PP:      equ 0D0h           ; Current   Page Pointer
   237  00D1                    STK_PP:      equ 0D1h           ; Stack     Page Pointer
   238  00D3                    IDX_PP:      equ 0D3h           ; Index     Page Pointer
   239  00D4                    MVR_PP:      equ 0D4h           ; MVI Read  Page Pointer
   240  00D5                    MVW_PP:      equ 0D5h           ; MVI Write Page Pointer
   241                          
   242                          ;------------------------------------------------
   243                          ;  I2C Configuration Registers
   244                          ;------------------------------------------------
   245  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   246  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   247  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   248  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   249  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   250  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   251  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   252  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   253  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   254  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   255                          
   256  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   257  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   258  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   259  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   260  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   261  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   262  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   263  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   264  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   265                          
   266  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   267                          
   268  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   269  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   270  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   271  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   272  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   273                          
   274                          ;------------------------------------------------
   275                          ;  System and Global Resource Registers
   276                          ;------------------------------------------------
   277  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   278                                                         ; Use INT_MSK0 bit field masks
   279  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   280                                                         ; Use INT_MSK1 bit field masks
   281  00DC                    INT_CLR2:     equ 0DCh          ; Interrupt Clear Register 2               (RW)
   282                                                         ; Use INT_MSK2 bit field masks
   283  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   284                                                         ; Use INT_MSK3 bit field masks
   285                          
   286  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   287  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   288  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   289                          
   290  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   291  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   292  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   293  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   294  0010                    INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
   295  0008                    INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
   296  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   297  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   298  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   299                          
   300  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   301  0080                    INT_MSK1_DCC13:            equ 80h ; MASK: enable/disable DCC13 block interrupt
   302  0040                    INT_MSK1_DCC12:            equ 40h ; MASK: enable/disable DCC12 block interrupt
   303  0020                    INT_MSK1_DBC11:            equ 20h ; MASK: enable/disable DBC11 block interrupt
   304  0010                    INT_MSK1_DBC10:            equ 10h ; MASK: enable/disable DBC10 block interrupt
   305  0008                    INT_MSK1_DCC03:            equ 08h ; MASK: enable/disable DCC03 block interrupt
   306  0004                    INT_MSK1_DCC02:            equ 04h ; MASK: enable/disable DCC02 block interrupt
   307  0002                    INT_MSK1_DBC01:            equ 02h ; MASK: enable/disable DBC01 block interrupt
   308  0001                    INT_MSK1_DBC00:            equ 01h ; MASK: enable/disable DBC00 block interrupt
   309                          
   310  00DF                    INT_MSK2:     equ DFh			; Custom block Mask Register			   (RW)
   311  0010                    INT_MSK2_SARADC:           equ 10h ; MASK: enable/disable SARADC block interrupt
   312  0020                    INT_MSK2_CSD0:             equ 20h ; MASK: enable/disable CSD0 block interrupt
   313  0040                    INT_MSK2_CSD1:             equ 40h ; MASK: enable/disable CSD1 block interrupt
   314  0080                    INT_MSK2_RTC:              equ 80h ; MASK: enable/disable RTC block interrupt
   315                          
   316  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   317  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   318                          
   319                          ;------------------------------------------------------
   320                          ;  MAC Registers
   321                          ;------------------------------------------------------
   322                          
   323  00E8                    MUL0_X:       equ 0E8h          ; Multiply Input X Register                (W)
   324  00E9                    MUL0_Y:       equ 0E9h          ; Multiply Input Y Register                (W)
   325  00EA                    MUL0_DH:      equ 0EAh          ; Multiply Result High Byte Register       (R)
   326  00EB                    MUL0_DL:      equ 0EBh          ; Multiply Result Low Byte Register        (R)
   327                          
   328  00EC                    ACC0_DR1:     equ 0ECh          ; Accumulator Data Register 1              (RW)
   329  00ED                    ACC0_DR0:     equ 0EDh          ; Accumulator Data Register 0              (RW)
   330  00EE                    ACC0_DR3:     equ 0EEh          ; Accumulator Data Register 3              (RW)
   331  00EF                    ACC0_DR2:     equ 0EFh          ; Accumulator Data Register 2              (RW)
   332                          
   333                          ; DECIMATOR Control Registers
   334  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   335  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   336                          
   337                          ;------------------------------------------------------
   338                          ;  System Status and Control Registers
   339                          ;
   340                          ;  Note: The following registers are mapped into both
   341                          ;        register bank 0 AND register bank 1.
   342                          ;------------------------------------------------------
   343  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   344                                                             ; Use FLAG_ masks defined at top of file
   345                          
   346  00FD                    DAC_D:        equ 0FDh		   ; DAC Data Register                        (RW)
   347                          
   348  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   349  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: flag, Internal Reset Status bit
   350  0010                    CPU_SCR1_SLIMO:         equ 10h	   ; MASK: Slow IMO (internal main osc) enable
   351  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   352  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   353  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   354                          
   355  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   356  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   357  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   358  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   359  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   360  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   361                          
   362                          ;------------------------------------------------------
   363                          ;  Neon Capsense Digital Control Registers
   364                          ;------------------------------------------------------
   365  0050                    CSD0_DR0_L:				equ 50h		; Capsense 0 data low 0				(RW)
   366  0054                    CSD0_DR0_H:				equ 54h		; Capsense 0 data high 0			(RW)
   367  0058                    CSD1_DR0_L:				equ 58h		; Capsense 1 data low 0				(RW)
   368  005C                    CSD1_DR0_H:				equ 5Ch		; Capsense 1 data high 0			(RW)
   369  0051                    CSD0_DR1_L:				equ 51h		; Capsense 0 data low 1				(RW)
   370  0055                    CSD0_DR1_H:				equ 55h		; Capsense 0 data high 1			(RW)
   371  0059                    CSD1_DR1_L:				equ 59h		; Capsense 1 data low 1				(RW)
   372  005D                    CSD1_DR1_H:				equ 5Dh		; Capsense 1 data high 1			(RW)
   373  0052                    CSD0_CNT_L:				equ 52h		; Capsense 0 counter low			(RW)
   374  0056                    CSD0_CNT_H:				equ 56h		; Capsense 0 counter high			(RW)
   375  005A                    CSD1_CNT_L:				equ 5Ah		; Capsense 1 counter low			(RW)
   376  005E                    CSD1_CNT_H:				equ	5Eh		; Capsense 1 counter high			(RW)
   377  0053                    CSD0_CR0:				equ 53h		; Capsense 0 control 0				(RW)
   378  005B                    CSD1_CR0:				equ 5Bh		; Capsense 1 control 0				(RW)
   379  0057                    CSD0_CR1:				equ 57h		; Capsense 0 control 1				(RW)
   380  005F                    CSD1_CR1:				equ 5Fh		; Capsense 1 control 1				(RW)
   381                          
   382                          ;------------------------------------------------------
   383                          ;  Neon Analog Registers
   384                          ;------------------------------------------------------
   385  0065                    ASY_CR:					equ 65h		; Analog Synchronization Control	(RW)
   386  006A                    ADC_DH:					equ 6Ah		; ADC data high						(RW)
   387  006B                    ADC_DL:					equ 6Bh		; ADC data low						(RW)
   388  00C8                    PWMVREF0:				equ C8h		; PWM Voltage Reference 0			(RW)
   389  00C9                    PWMVREF1:				equ C9h		; PWM Voltage Reference 1			(RW)
   390  00CB                    PWMSRC:					equ CBh		; PWM Source						(RW)
   391  00CA                    IDACMODE:				equ CAh		; IDAC Mode							(RW)
   392  00FC                    IDACR_D:				equ FCh		; Analog Mux DAC data 0				(RW)
   393  00FD                    IDACL_D:				equ FDh		; Analog Mux DAC data 1				(RW)
   394                          
   395                          ;------------------------------------------------------
   396                          ;  Neon Digital Registers
   397                          ;------------------------------------------------------
   398  00B7                    RDI0DSM:				equ B7h		; Row Digital Interconnect input select 0	(RW)
   399  00BF                    RDI1DSM:				equ BFh		; Row Digital Interconnect input select 1	(RW)
   400                          
   401                          ;------------------------------------------------------
   402                          ;  Neon Test Registers
   403                          ;------------------------------------------------------
   404  00CC                    TSCR0:					equ CCh		; Tsource 0							(RW)
   405  00CD                    TSCMPH:					equ CDh		; TSCMP high						(RW)
   406  00CE                    TSCMPL:					equ CEh		; TSCMP low							(RW)
   407  00CF                    TSCR1:					equ CFh		; Tsource 1							(RW)
   408                          
   409                          ;;=============================================================================
   410                          ;;      Register Space, Bank 1
   411                          ;;=============================================================================
   412                          
   413                          ;------------------------------------------------
   414                          ;  Port Registers
   415                          ;  Note: Also see this address range in Bank 0.
   416                          ;------------------------------------------------
   417                          ; Port 0
   418  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   419  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   420  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   421  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   422                          
   423                          ; Port 1
   424  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   425  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   426  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   427  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   428                          
   429                          ; Port 2
   430  0008                    PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
   431  0009                    PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
   432  000A                    PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
   433  000B                    PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
   434                          
   435                          ; Port 3
   436  000C                    PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
   437  000D                    PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
   438  000E                    PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
   439  000F                    PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
   440                          
   441                          ; Port 4
   442  0010                    PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
   443  0011                    PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
   444  0012                    PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
   445  0013                    PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
   446                          
   447                          ;------------------------------------------------
   448                          ;  Digital PSoC(tm) block Registers
   449                          ;  Note: Also see this address range in Bank 0.
   450                          ;------------------------------------------------
   451                          
   452                          ; Digital PSoC block 00, Basic Type C
   453  0020                    DBC00FN:      equ 20h          ; Function Register                        (RW)
   454  0021                    DBC00IN:      equ 21h          ;    Input Register                        (RW)
   455  0022                    DBC00OU:      equ 22h          ;   Output Register                        (RW)
   456  0023                    DBC00CR1:     equ 23h          ;   control & status register 1            (RW)
   457                          
   458                          ; Digital PSoC block 01, Basic Type C
   459  0024                    DBC01FN:      equ 24h          ; Function Register                        (RW)
   460  0025                    DBC01IN:      equ 25h          ;    Input Register                        (RW)
   461  0026                    DBC01OU:      equ 26h          ;   Output Register                        (RW)
   462  0027                    DBC01CR1:     equ 27h          ;   control & status register 1            (RW)
   463                          
   464                          ; Digital PSoC block 02, Communications Type C
   465  0028                    DCC02FN:      equ 28h          ; Function Register                        (RW)
   466  0029                    DCC02IN:      equ 29h          ;    Input Register                        (RW)
   467  002A                    DCC02OU:      equ 2Ah          ;   Output Register                        (RW)
   468  002B                    DBC02CR1:     equ 2Bh          ;   control & status register 1            (RW)
   469                          
   470                          ; Digital PSoC block 03, Communications Type C
   471  002C                    DCC03FN:      equ 2Ch          ; Function Register                        (RW)
   472  002D                    DCC03IN:      equ 2Dh          ;    Input Register                        (RW)
   473  002E                    DCC03OU:      equ 2Eh          ;   Output Register                        (RW)
   474  0029                    DBC03CR1:     equ 29h          ;   control & status register 1            (RW)
   475                          
   476                          ; Digital PSoC block 10, Basic Type C
   477  0030                    DBC10FN:      equ 30h          ; Function Register                        (RW)
   478  0031                    DBC10IN:      equ 31h          ;    Input Register                        (RW)
   479  0032                    DBC10OU:      equ 32h          ;   Output Register                        (RW)
   480  0033                    DBC10CR1:     equ 33h          ;   control & status register 1            (RW)
   481                          
   482                          ; Digital PSoC block 11, Basic Type C
   483  0034                    DBC11FN:      equ 34h          ; Function Register                        (RW)
   484  0035                    DBC11IN:      equ 35h          ;    Input Register                        (RW)
   485  0036                    DBC11OU:      equ 36h          ;   Output Register                        (RW)
   486  0037                    DBC11CR1:     equ 37h          ;   control & status register 1            (RW)
   487                          
   488                          ; Digital PSoC block 12, Communications Type C
   489  0038                    DCC12FN:      equ 38h          ; Function Register                        (RW)
   490  0039                    DCC12IN:      equ 39h          ;    Input Register                        (RW)
   491  003A                    DCC12OU:      equ 3Ah          ;   Output Register                        (RW)
   492  003B                    DBC12CR1:     equ 3Bh          ;   control & status register 1            (RW)
   493                          
   494                          ; Digital PSoC block 13, Communications Type C
   495  003C                    DCC13FN:      equ 3Ch          ; Function Register                        (RW)
   496  003D                    DCC13IN:      equ 3Dh          ;    Input Register                        (RW)
   497  003E                    DCC13OU:      equ 3Eh          ;   Output Register                        (RW)
   498  003F                    DBC13CR1:     equ 3Fh          ;   control & status register 1            (RW)
   499                          
   500                          ;------------------------------------------------
   501                          ;  System and Global Resource Registers
   502                          ;  Note: Also see this address range in Bank 0.
   503                          ;------------------------------------------------
   504                          
   505  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   506  00C0                    CLK_CR0_ACOLUMN_3:    equ C0h    ; MASK: Specify clock for analog cloumn
   507  0030                    CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
   508  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   509  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   510                          
   511  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   512  0018                    CLK_CR1_ACLK1:        equ 18h    ; MASK: Digital PSoC block for analog source
   513  0003                    CLK_CR1_ACLK0:        equ 03h    ; MASK: Digital PSoC block for analog source
   514                          
   515  0003                    CLK_CR1_ACLK2:        equ 03h    ; Deprecated do not use
   516                          
   517  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   518  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   519                          
   520  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   521  000F                    AMD_CR0_AMOD0:        equ 0Fh    ; MASK: Modulation source for analog column 0
   522                          
   523  0064                    CMP_GO_EN:    equ 64h          ; Comparator Bus To Global Out Enable      (RW)
   524  0080                    CMP_GO_EN_GOO5:       equ 80h    ; MASK: Selected Col 1 signal to GOO5
   525  0040                    CMP_GO_EN_GOO1:       equ 40h    ; MASK: Selected Col 1 signal to GOO1
   526  0030                    CMP_GO_EN_SEL1:       equ 30h    ; MASK: Column 1 Signal Select
   527  0008                    CMP_GO_EN_GOO4:       equ 08h    ; MASK: Selected Col 0 signal to GOO4
   528  0004                    CMP_GO_EN_GOO0:       equ 04h    ; MASK: Selected Col 0 signal to GOO0
   529  0003                    CMP_GO_EN_SEL0:       equ 03h    ; MASK: Column 0 Signal Select
   530                          
   531  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   532  000F                    AMD_CR1_AMOD1:        equ 0Fh    ; MASK: Modulation ctrl for analog column 1
   533                          
   534  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   535  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   536  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   537                          
   538  006B                    CLK_CR3:      equ 6Bh          ; Analog Clock Source Control Register 3   (RW)
   539  0040                    CLK_CR3_SYS1:         equ 40h    ; MASK: Analog Clock 1 selection
   540  0030                    CLK_CR3_DIVCLK1:      equ 30h    ; MASK: Analog Clock 1 divider
   541  0004                    CLK_CR3_SYS0:         equ 04h    ; MASK: Analog Clock 0 selection
   542  0003                    CLK_CR3_DIVCLK0:      equ 03h    ; MASK: Analog Clock 0 divider
   543                          
   544                          ;------------------------------------------------
   545                          ;  Global Digital Interconnects
   546                          ;------------------------------------------------
   547                          
   548  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   549  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   550  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   551  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   552                          
   553  00A0                    GDI_O_IN_CR:  equ 0A0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   554  00A1                    GDI_E_IN_CR:  equ 0A1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   555  00A2                    GDI_O_OU_CR:  equ 0A2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   556  00A3                    GDI_E_OU_CR:  equ 0A3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   557                          
   558  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   559  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   560                          
   561                          ;------------------------------------------------
   562                          ;  Analog Mux Bus Port Enable Bits
   563                          ;------------------------------------------------
   564  00D8                    MUX_CR0:      equ 0D8h          ; Analog Mux Port 0 Bit Enables Register
   565  00D9                    MUX_CR1:      equ 0D9h          ; Analog Mux Port 1 Bit Enables Register
   566  00DA                    MUX_CR2:      equ 0DAh          ; Analog Mux Port 2 Bit Enables Register
   567  00DB                    MUX_CR3:      equ 0DBh          ; Analog Mux Port 3 Bit Enables Register
   568  00EC                    MUX_CR4:      equ 0ECh          ; Analog Mux Port 4 Bit Enables Register
   569                          
   570                          ;------------------------------------------------
   571                          ;  Clock and System Control Registers
   572                          ;------------------------------------------------
   573                          
   574  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   575  0080                    OSC_GO_EN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   576  0040                    OSC_GO_EN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   577  0020                    OSC_GO_EN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   578  0010                    OSC_GO_EN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   579  0008                    OSC_GO_EN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   580  0004                    OSC_GO_EN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   581  0002                    OSC_GO_EN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   582  0001                    OSC_GO_EN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   583                          
   584  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   585  0003                    OSC_CR4_VC3SEL:       equ 03h    ; MASK: System VC3 Clock source
   586                          
   587  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   588                          
   589  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   590  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   591  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   592  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   593  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   594  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   595  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   596  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   597  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   598  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   599  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   600  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   601  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   602  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   603  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   604  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   605  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   606  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   607                          
   608  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   609  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   610  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   611                          
   612  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   613  0080                    OSC_CR2_PLLGAIN:      equ 80h    ; MASK: High/Low gain
   614  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   615  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   616  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   617                          
   618  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   619  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   620  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   621  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   622  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   623  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   624  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   625  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   626                          
   627  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   628  0008                    VLT_CMP_NOWRITE:      equ 08h    ; MASK: Vcc below Flash Write level
   629  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   630  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   631  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   632                          
   633  00E5                    ADC0_TR:      equ 0E5h          ; ADC Column 0 Trim Register
   634  00E6                    ADC1_TR:      equ 0E6h          ; ADC Column 1 Trim Register
   635                          
   636  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   637  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   638  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   639  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   640                          
   641  00FA                    FLS_PR1:      equ 0FAh          ; Flash Program Register 1                 (RW)
   642  0003                    FLS_PR1_BANK:         equ 03h    ; MASK: Select Active Flash Bank
   643                          
   644  00FD                    DAC_CR0:       equ 0FDh          ; Analog Mux DAC Control Register 0
   645  00DC                    DAC_CR1:       equ 0DCh          ; Analog Mux DAC Control Register 1
   646  0008                    DAC_CR_IRANGE:        equ 08h    ; MASK: Sets the DAC Range low or high
   647  0006                    DAC_CR_OSCMODE:       equ 06h    ; MASK: Defines the reset mode for AMux
   648  0001                    DAC_CR_ENABLE:        equ 01h    ; MASK: Enable/Disable DAC function
   649                          
   650                          ;------------------------------------------------
   651                          ;  I2C Control Registers
   652                          ;------------------------------------------------
   653                          
   654  00AD                    I2C_ADDR:    equ 0ADh          ; I2C Address Register (RW)
   655                          
   656                          ;------------------------------------------------------
   657                          ;  Neon Analog Registers
   658                          ;------------------------------------------------------
   659  0053                    VDAC50CR0:		equ 53h			; V DAC5 control 0				(RW)
   660  0057                    VDAC51CR0:		equ 57h			; V DAC5 control 1				(RW)
   661  00A8                    ADC_CR0:		equ A8h			; ADC control 0					(RW)
   662  00A9                    ADC_CR1:		equ A9h			; ADC control 1					(RW)
   663  00AA                    ADC_CR2:		equ AAh			; ADC control 2					(RW)
   664  00AB                    ADC_CR3TRIM:	equ ABh			; ADC control 3					(RW)
   665  00AC                    ADC_CR4:		equ ACh			; ADC control 4					(RW)
   666  00E7                    VDAC_TRIM:		equ E7h			; V DAC trim					(RW)
   667                          
   668                          ;------------------------------------------------------
   669                          ;  Neon Current Sense CMP Registers
   670                          ;------------------------------------------------------
   671  0050                    CMP0CR1:		equ 50h			; CMP0 control 1				(RW)
   672  0051                    CMP0CR2:		equ 51h			; CMP0 control 2				(RW)
   673  0054                    CMP1CR1:		equ 54h			; CMP1 control 1				(RW)
   674  0055                    CMP1CR2:		equ 55h			; CMP1 control 2				(RW)
   675  0058                    CSCMPCR0:		equ 58h			; CSCMP control 0				(RW)
   676  0059                    CSCMPGOEN:		equ 59h			; CSCMO global out enable		(RW)
   677  005A                    CSLUTCR0:		equ 5Ah			; CSLUT control 0				(RW)
   678  005B                    CMPCOLMUX:		equ 5Bh			; CMP Column Mux				(RW)
   679  005C                    CMPPWMCR:		equ 5Ch			; CMP PWM control				(RW)
   680  005D                    CMPFLTCR:		equ 5Dh			; CMP filter control			(RW)
   681  005E                    CMPCLK1:		equ 5Eh			; CMP clock 1					(RW)
   682  005F                    CMPCLK0:		equ 5Fh			; CMP clock 0					(RW)
   683                          
   684                          ;------------------------------------------------------
   685                          ;  Neon Real Time Clock Registers
   686                          ;------------------------------------------------------
   687  00A4                    RTCH:			equ A4h			; Real time current hour		(RW)
   688  00A5                    RTCM:			equ A5h			; Real time current minute		(RW)
   689  00A6                    RTCS:			equ A6h			; Real time current second		(RW)
   690  00A7                    RTCCR:			equ A7h			; Real time clock control		(RW)
   691                          
   692                          ;------------------------------------------------------
   693                          ;  Analog MUX Config Registers
   694                          ;------------------------------------------------------
   695                          
   696  006A                    AMUX_CFG1:			equ 6Ah  ; Analog MUX Configuration 1
   697  0020                    AMUX_CFG1_GOINVR:	equ 20h  ;
   698  0010                    AMUX_CFG1_GOINVL:  	equ 10h	 ;
   699  000C                    AMUX_CFG1_AMUXMODR:	equ 0Ch	 ;
   700  0003                    AMUX_CFG1_AMUXMODL:	equ 03h	 ;
   701                          
   702                          ;;=============================================================================
   703                          ;;      M8C System Macros
   704                          ;;  These macros should be used when their functions are needed.
   705                          ;;=============================================================================
   706                          
   707                          ;----------------------------------------------------
   708                          ;  Swapping Register Banks
   709                          ;----------------------------------------------------
   710                              macro M8C_SetBank0
   711                              and   F, ~FLAG_XIO_MASK
   712  3D73                        endm
   713                          
   714                              macro M8C_SetBank1
   715                              or    F, FLAG_XIO_MASK
   716  3D73                        endm
   717                          
   718                          ;----------------------------------------------------
   719                          ;  Global Interrupt Enable/Disable
   720                          ;----------------------------------------------------
   721                              macro M8C_EnableGInt
   722                              or    F, FLAG_GLOBAL_IE
   723  3D73                        endm
   724                          
   725                              macro M8C_DisableGInt
   726                              and   F, ~FLAG_GLOBAL_IE
   727  3D73                        endm
   728                          
   729                          ;----------------------------------------------------
   730                          ;  Enable/Disable Interrupt Mask
   731                          ;
   732                          ;  Use the following macros to enable/disable
   733                          ;  bits in the Interrupt mask registers,
   734                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   735                          ;
   736                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   737                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   738                          ;
   739                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   740                          ;        and MASK is the bit set to enable or disable
   741                          ;----------------------------------------------------
   742                          ; Disable Interrupt Bit Mask(s)
   743                              macro M8C_DisableIntMask
   744                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   745  3D73                        endm
   746                          
   747                          ; Enable Interrupt Bit Mask(s)
   748                              macro M8C_EnableIntMask
   749                              or    reg[@0], @1               ; enable specified interrupt enable bit
   750  3D73                        endm
   751                          
   752                          ;----------------------------------------------------
   753                          ;  Clear Posted Interrupt Flag Mask
   754                          ;
   755                          ;  Use the following macros to clear the
   756                          ;  bits in the Interrupt Clear registers,
   757                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   758                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   759                          ;
   760                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   761                          ;        and MASK is the bit set to enable or disable
   762                          ;----------------------------------------------------
   763                              macro M8C_ClearIntFlag
   764                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   765  3D73                        endm
   766                          
   767                          ;----------------------------------------------------
   768                          ;  Power-On Reset & WatchDog Timer Functions
   769                          ;----------------------------------------------------
   770                              macro M8C_EnableWatchDog
   771                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   772  3D73                        endm
   773                          
   774                              macro M8C_ClearWDT
   775                              mov   reg[RES_WDT], 00h
   776  3D73                        endm
   777                          
   778                              macro M8C_ClearWDTAndSleep
   779                              mov   reg[RES_WDT], 38h
   780  3D73                        endm
   781                          
   782                          ;----------------------------------------------------
   783                          ;  Sleep, CPU Stop & Software Reset
   784                          ;----------------------------------------------------
   785                              macro M8C_Sleep
   786                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   787                              ; The next instruction to be executed depends on the state of the
   788                              ; various interrupt enable bits. If some interrupts are enabled
   789                              ; and the global interrupts are disabled, the next instruction will
   790                              ; be the one that follows the invocation of this macro. If global
   791                              ; interrupts are also enabled then the next instruction will be
   792                              ; from the interrupt vector table. If no interrupts are enabled
   793                              ; then the CPU sleeps forever.
   794  3D73                        endm
   795                          
   796                              macro M8C_Stop
   797                              ; In general, you probably don't want to do this, but here's how:
   798                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   799                              ; Next instruction to be executed is located in the interrupt
   800                              ; vector table entry for Power-On Reset.
   801  3D73                        endm
   802                          
   803                              macro M8C_Reset
   804                              ; Restore CPU to the power-on reset state.
   805                              mov A, 0
   806                              SSC
   807                              ; Next non-supervisor instruction will be at interrupt vector 0.
   808  3D73                        endm
   809                          
   810                          ;----------------------------------------------------
   811                          ; ImageCraft Code Compressor Actions
   812                          ;----------------------------------------------------
   813                              ; Suspend Code Compressor
   814                              ; Must not span a RET or RETI instruction
   815                              ; without resuming code compression
   816                              macro Suspend_CodeCompressor
   817                              or   F, 0
   818  3D73                        endm
   819                          
   820                              ; Resume Code Compression
   821                              macro Resume_CodeCompressor
   822                              add  SP, 0
   823  3D73                        endm
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  FILENAME: PWM8_BL.inc
     4                          ;;   Version: 2.60, Updated on 2013/5/19 at 10:44:7
     5                          ;;  Generated by PSoC Designer 5.4.2946
     6                          ;;
     7                          ;;  DESCRIPTION: Assembler declarations for the PWM8 user module interface
     8                          ;;-----------------------------------------------------------------------------
     9                          ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
    10                          ;;*****************************************************************************
    11                          ;;*****************************************************************************
    12                          
    13                          include "m8c.inc"
    14                          
    15                          
    16                          ;--------------------------------------------------
    17                          ; Constants for PWM8_BL API's.
    18                          ;--------------------------------------------------
    19                          
    20  0001                    PWM8_BL_CONTROL_REG_START_BIT:             equ 0x01    ; Control register start bit
    21  00E1                    PWM8_BL_INT_REG:                           equ 0x0e1
    22  0010                    PWM8_BL_INT_MASK:                          equ 0x10
    23                          
    24                          
    25                          ;--------------------------------------------------
    26                          ; Constants for PWM8_BL user defined values
    27                          ;--------------------------------------------------
    28                          
    29  0000                    PWM8_BL_PERIOD:                            equ 0x00
    30  0000                    PWM8_BL_PULSE_WIDTH:                       equ 0x00
    31                          
    32                          
    33                          ;--------------------------------------------------
    34                          ; Register Address Constants for PWM8_BL
    35                          ;--------------------------------------------------
    36                          
    37  0030                    PWM8_BL_COUNTER_REG:                   equ 0x30   ; DR0 Count register
    38  0031                    PWM8_BL_PERIOD_REG:                    equ 0x31   ; DR1 Period register
    39  0032                    PWM8_BL_COMPARE_REG:                   equ 0x32   ; DR2 Compare register
    40  0033                    PWM8_BL_CONTROL_REG:                   equ 0x33   ; Control register
    41  0030                    PWM8_BL_FUNC_REG:                      equ 0x30   ; Function register
    42  0031                    PWM8_BL_INPUT_REG:                     equ 0x31   ; Input register
    43  0032                    PWM8_BL_OUTPUT_REG:                    equ 0x32   ; Output register
    44                          
    45                          
    46                          ;--------------------------------------------------
    47                          ; PWM8_BL Macro 'Functions'
    48                          ;--------------------------------------------------
    49                          
    50                             macro PWM8_BL_Start_M
    51                             or    reg[PWM8_BL_CONTROL_REG],  PWM8_BL_CONTROL_REG_START_BIT
    52  3D73                       endm
    53                          
    54                             macro PWM8_BL_Stop_M
    55                             and   reg[PWM8_BL_CONTROL_REG], ~PWM8_BL_CONTROL_REG_START_BIT
    56  3D73                       endm
    57                          
    58                             macro PWM8_BL_EnableInt_M
    59                             M8C_EnableIntMask PWM8_BL_INT_REG, PWM8_BL_INT_MASK
    60  3D73                       endm
    61                          
    62                             macro PWM8_BL_DisableInt_M
    63                             M8C_DisableIntMask PWM8_BL_INT_REG, PWM8_BL_INT_MASK
    64                             endm
      + 3D73                    
      + 3D73                    ; end of file PWM8_BL.inc
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;
     4                          ;;       FILENAME: Memory.inc
     5                          ;;
     6                          ;;    DESCRIPTION: Memory Model and Stack Parameter Definitions for 
     7                          ;;                 CY8C22045 PSoC devices.
     8                          ;;
     9                          ;;  LAST MODIFIED: August 17, 2004
    10                          ;;
    11                          ;;-----------------------------------------------------------------------------
    12                          ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
    13                          ;;*****************************************************************************
    14                          ;;*****************************************************************************
    15                          ;
    16                          ;
    17                          ;  ******** Define Memory Model and Stack parameters ********
    18                          ;
    19  0001                    IMAGECRAFT: equ 1   
    20  0002                    HITECH: equ 2   
    21  0002                    TOOLCHAIN: equ HITECH   
    22  0001                    SYSTEM_LARGE_MEMORY_MODEL: equ 1   
    23  0000                    SYSTEM_SMALL_MEMORY_MODEL: equ 0   
    24  0003                    SYSTEM_STACK_PAGE: equ 3   
    25  0000                    SYSTEM_STACK_PAGE_OFFSET: equ 0   
    26  0002                    SYSTEM_TOOLS: equ 2   
    27  0000                    SYSTEM_IDXPG_TRACKS_STK_PP: equ 0   
    28  0001                    SYSTEM_IDXPG_TRACKS_IDX_PP: equ 1   
    29  0000                    SYSTEM_MULTIPAGE_STACK: equ 0 
    30                          
    31                          
    32                          ;  ******* Function Class Definitions *******
    33                          ;
    34                          ;  These definitions are used to describe RAM access patterns. They provide
    35                          ;  documentation and they control prologue and epilogue macros that perform
    36                          ;  the necessary housekeeping functions for large memory model devices like
    37                          ;  the CY8C22045.
    38                          
    39  0001                    RAM_USE_CLASS_1:               equ 1   ; PUSH, POP & I/O access
    40  0002                    RAM_USE_CLASS_2:               equ 2   ; Indexed address mode on stack page
    41  0004                    RAM_USE_CLASS_3:               equ 4   ; Indexed address mode to any page
    42  0008                    RAM_USE_CLASS_4:               equ 8   ; Direct/Indirect address mode access
    43                          
    44                          ; ******* Hi Tech Specific *******
    45                          ; Turn on the expansion of all macros by default
    46                          IF (TOOLCHAIN & HITECH)
    47                          OPT EXPAND
    48                          ENDIF
    49                          ; ******* Page Pointer Manipulation Macros *******
    50                          ;
    51                          ;  ******* Page Pointer Manipulation Macros *******
    52                          ;
    53                          ;  Most of the following macros are conditionally compiled so they only
    54                          ;  produce code if the large memory model is selected.
    55                          
    56                             ;-----------------------------------------------
    57                             ;  Set Stack Page Macro
    58                             ;-----------------------------------------------
    59                             ;
    60                             ;  DESC: Modify STK_PP in the large or small memory Models.
    61                             ;
    62                             ; INPUT: Constant (e.g., SYSTEM_STACK_PAGE) that specifies the RAM page on
    63                             ;        which stack operations like PUSH and POP store and retrieve their
    64                             ;        data
    65                             ;
    66                             ;  COST: 8 instruction cycles (in LMM only)
    67                          
    68                             macro RAM_SETPAGE_STK( PG_NUMBER )
    69                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    70                                mov reg[STK_PP], @PG_NUMBER
    71                             ENDIF
    72  3D73                       endm
    73                          
    74                             ;-----------------------------------------------
    75                             ;  Set Current Page Macro
    76                             ;-----------------------------------------------
    77                             ;
    78                             ;  DESC: Modify CUR_PP in the large or small memory Models.
    79                             ;
    80                             ; INPUT: Constant value (e.g., >bFoo) for the RAM page number used in
    81                             ;        calculation of effective direct-mode address operands.
    82                             ;
    83                             ;  COST: 8 instruction cycles (in LMM only)
    84                          
    85                             macro RAM_SETPAGE_CUR( PG_NUMBER )
    86                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    87                                mov reg[CUR_PP], @PG_NUMBER
    88                             ENDIF
    89  3D73                       endm
    90                          
    91                             ;-----------------------------------------------
    92                             ;  Set Index Page Macro
    93                             ;-----------------------------------------------
    94                             ;
    95                             ;  DESC: Modify IDX_PP in the large or small emory Models.
    96                             ;
    97                             ; INPUT: Constant value (e.g., >caFoo) for the RAM page number used in
    98                             ;         calculation of effective index-mode address operands.
    99                             ;
   100                             ;  COST: 8 instruction cycles (in LMM only)
   101                          
   102                             macro RAM_SETPAGE_IDX( PG_NUMBER )
   103                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   104                                mov reg[IDX_PP], @PG_NUMBER
   105                             ENDIF
   106  3D73                       endm
   107                          
   108                             ;-----------------------------------------------
   109                             ;  Set MVI Read Page Macro
   110                             ;-----------------------------------------------
   111                             ;
   112                             ;  DESC: Modify MVR_PP in the large or small memory Models.
   113                             ;
   114                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   115                             ;        calculation of indirect address operands used in the
   116                             ;        "mvi A, [pFoo]" instructions.
   117                             ;
   118                             ;  COST: 8 instruction cycles (in LMM only)
   119                          
   120                             macro RAM_SETPAGE_MVR( PG_NUMBER )
   121                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   122                                mov reg[MVR_PP], @PG_NUMBER
   123                             ENDIF
   124  3D73                       endm
   125                          
   126                             ;-----------------------------------------------
   127                             ;  Set MVI Write Page Macro
   128                             ;-----------------------------------------------
   129                             ;
   130                             ;  DESC: Modify MVW_PP in the large or small memory Models.
   131                             ;
   132                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   133                             ;        calculation of indirect address operands used in the
   134                             ;        "mvi [pFoo], A" instructions.
   135                             ;
   136                             ;  COST: 8 instruction cycles (in LMM only)
   137                          
   138                             macro RAM_SETPAGE_MVW( PG_NUMBER )
   139                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   140                                mov reg[MVW_PP], @PG_NUMBER
   141                             ENDIF
   142  3D73                       endm
   143                          
   144                             ;-----------------------------------------------
   145                             ;  Force Index Page Pointer to Stack Page
   146                             ;-----------------------------------------------
   147                             ;
   148                             ;  DESC: Map index-mode operands onto the stack page by modifying IDX_PP.
   149                             ;        See also RAM_LOCK_INDEX_TO_STACKPAGE.
   150                             ;
   151                             ; INPUT: None
   152                             ;
   153                             ;  COST: 8 instruction cycles (in LMM only)
   154                          
   155                             macro RAM_SETPAGE_IDX2STK
   156                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   157                                IF ( SYSTEM_MULTIPAGE_STACK )
   158                                   mov   A, reg[STK_PP]
   159                                   mov   reg[IDX_PP], A
   160                                ELSE
   161                                   RAM_SETPAGE_IDX SYSTEM_STACK_PAGE
   162                                ENDIF
   163                             ENDIF
   164  3D73                       endm
   165                          
   166                             ;-----------------------------------------------
   167                             ;  Change Memory Mode
   168                             ;-----------------------------------------------
   169                             ;
   170                             ;  DESC: Modify FLAG_PAGEMODE bits in the large and small memory Models.
   171                             ;
   172                             ; INPUT: Constant value for PGMODE bitfield of CPU Flag register, F.
   173                             ;        See FLAG_PGMODE_{x} constants in M8C.INC.
   174                             ;
   175                             ;  COST: 8 instruction cycles (in LMM only)
   176                          
   177                             macro RAM_CHANGE_PAGE_MODE( MODE )
   178                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   179                                and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
   180                                or    F,  FLAG_PGMODE_MASK & @MODE
   181                             ENDIF
   182  3D73                       endm
   183                          
   184                             ;-----------------------------------------------
   185                             ;  Set Large Memory Model Native Paging Mode
   186                             ;-----------------------------------------------
   187                             ;
   188                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   189                             ;        paging mode *IFF* a simple "OR" is guaranteed to work---for
   190                             ;        example, in an ISR, when the PGMODE bits have been cleared
   191                             ;        to zero. If a simple "OR" is not guaranteed to work, use
   192                             ;        the slower RAM_RESTORE_NATIVE_PAGING instead.
   193                             ;
   194                             ; INPUT: none
   195                             ;
   196                             ;  COST: 4 instruction cycles (in LMM only)
   197                          
   198                             macro RAM_SET_NATIVE_PAGING
   199                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   200                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   201                                or    F,  FLAG_PGMODE_11b            ; LMM w/ IndexPage<==>StackPage
   202                             ENDIF ;  PGMODE LOCKED
   203                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   204                                or    F,  FLAG_PGMODE_10b            ; LMM with independent IndexPage
   205                             ENDIF ; PGMODE FREE
   206                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   207  3D73                       endm
   208                          
   209                             ;-----------------------------------------------
   210                             ; Restore Large Memory Model Native Paging Mode
   211                             ;-----------------------------------------------
   212                             ;
   213                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   214                             ;        paging mode. Always works because it clears the PGMODE bits
   215                             ;        before OR-ing in the new ones. See RAM_RESTORE_NATIVE_PAGING
   216                             ;        for a faster method.
   217                             ;
   218                             ; INPUT: none
   219                             ;
   220                             ;  COST: 8 instruction cycles (in LMM only)
   221                          
   222                             macro RAM_RESTORE_NATIVE_PAGING
   223                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   224                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   225                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_11b ; LMM w/ IndexPage<==>StackPage
   226                             ENDIF ;  PGMODE LOCKED
   227                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   228                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b ; LMM with independent IndexPage
   229                             ENDIF ; PGMODE FREE
   230                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   231  3D73                       endm
   232                          
   233                             ;-----------------------------------------------
   234                             ; Force indexed addr mode operands to Stack Pg
   235                             ;-----------------------------------------------
   236                             ;
   237                             ;  DESC: Force instructions that use indexed address mode to reference the
   238                             ;        stack page (as defined by STK_PP). This macro sets the "Indexed
   239                             ;        Stack Mode" bit (LSB) of the PGMODE bit field in the CPU Flag
   240                             ;        register, F. (See also RAM_SETPAGE_IDX2STK, above.)
   241                             ;
   242                             ; INPUT: none
   243                             ;
   244                             ;  COST: 4 instruction cycles (in LMM only)
   245                          
   246                             macro RAM_X_POINTS_TO_STACKPAGE
   247                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   248                                or   F, FLAG_PGMODE_01b
   249                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   250  3D73                       endm
   251                          
   252                             ;-----------------------------------------------
   253                             ;  Force indexed addr mode operands to Index Pg
   254                             ;-----------------------------------------------
   255                             ;
   256                             ;  DESC: Permit instructions that use indexed address mode to reference page
   257                             ;        zero or the page pointed to by the IDX_PP register, depending on the
   258                             ;        setting of the MSb (or "Direct Page Mode" bit) of the PGMODE bits
   259                             ;        in the CPU Flag register, F. (This macro clears the PGMODE LSb.)
   260                             ;
   261                             ; INPUT: none
   262                             ;
   263                             ;  COST: 4 instruction cycles (in LMM only)
   264                          
   265                             macro RAM_X_POINTS_TO_INDEXPAGE
   266                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   267                                and  F, ~FLAG_PGMODE_01b
   268                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   269  3D73                       endm
   270                          
   271                             ;-----------------------------------------------
   272                             ;  Function Prologue
   273                             ;-----------------------------------------------
   274                             ;
   275                             ;  Prologue for functions that run in the LMM and SMM.
   276                             ;
   277                          
   278                             macro RAM_PROLOGUE( ACTUAL_CLASS )
   279                          
   280                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   281                             ; Nothing to do
   282                             ENDIF ; RAM_USE_CLASS_1
   283                          
   284                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   285                                IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   286                                   RAM_X_POINTS_TO_STACKPAGE         ; exit native paging mode!
   287                                ENDIF
   288                             ENDIF ; RAM_USE_CLASS_2
   289                          
   290                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   291                                IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   292                                   RAM_X_POINTS_TO_INDEXPAGE         ; exit native paging mode!
   293                                ENDIF
   294                             ENDIF ; RAM_USE_CLASS_3
   295                          
   296                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   297                             ; Nothing to do
   298                             ENDIF ; RAM_USE_CLASS_4
   299                          
   300  3D73                       endm
   301                          
   302                             ;-----------------------------------------------
   303                             ;  Function Epilogue
   304                             ;-----------------------------------------------
   305                             ;
   306                             ;  Prologue for functions that run in the LMM and SMM.
   307                             ;
   308                          
   309                             macro RAM_EPILOGUE( ACTUAL_CLASS )
   310                          
   311                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   312                             ; Nothing to do
   313                             ENDIF ; RAM_USE_CLASS_1
   314                          
   315                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   316                                RAM_RESTORE_NATIVE_PAGING
   317                             ENDIF ; RAM_USE_CLASS_2
   318                          
   319                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   320                                RAM_RESTORE_NATIVE_PAGING
   321                             ENDIF ; RAM_USE_CLASS_3
   322                          
   323                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   324                             ; Nothing to do
   325                             ENDIF ; RAM_USE_CLASS_4
   326                          
   327  3D73                       endm
   328                          
   329                             ;-----------------------------------------------
   330                             ;  Preserve Register
   331                             ;-----------------------------------------------
   332                             ;
   333                             ;  DESC: Preserve a register value on the stack
   334                             ;
   335                             ; INPUT: Name or address of register in I/O Space
   336                             ;        The I/O bank is an implicit parameter. That is, this function will
   337                             ;        Access the I/O bank currently specified by the CPU Flag register.
   338                             ;
   339                             ;  USES: CPU 'A' register
   340                             ;
   341                             ;  COST: 9 instruction cycles
   342                          
   343                             macro REG_PRESERVE( IOReg )
   344                             mov   A, reg[ @IOReg ]
   345                             push  A
   346  3D73                       endm
   347                          
   348                             ;-----------------------------------------------
   349                             ;  Restore Register
   350                             ;-----------------------------------------------
   351                             ;
   352                             ;  DESC: Restore a register value from the stack
   353                             ;
   354                             ; INPUT: Name or address of register in I/O Space
   355                             ;        The I/O bank is an implicit parameter. That is, this function will
   356                             ;        Access the I/O bank currently specified by the CPU Flag register.
   357                             ;
   358                             ;  USES: CPU 'A' register
   359                             ;
   360                             ;  COST: 10 instruction cycles
   361                          
   362                             macro REG_RESTORE( IOReg )
   363                             pop   A
   364                             mov   reg[ @IOReg ], A
   365  3D73                       endm
   366                          
   367                             ;-----------------------------------------------
   368                             ;  Preserve Volatile Page Pointer Registers
   369                             ;-----------------------------------------------
   370                             ;
   371                             ;  DESC: Invoked by ISRs before switching to the LMM mode and calling
   372                             ;        functions that require on it.
   373                             ;
   374                             ; INPUT: none
   375                             ;
   376                             ;  USES: CPU 'A' register
   377                             ;
   378                             ;  COST: 45 instruction cycles (in LMM only)
   379                          
   380                             macro ISR_PRESERVE_PAGE_POINTERS
   381                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   382                                REG_PRESERVE CUR_PP
   383                                REG_PRESERVE IDX_PP
   384                                REG_PRESERVE MVR_PP
   385                                REG_PRESERVE MVW_PP
   386                             ENDIF
   387  3D73                       endm
   388                          
   389                             ;-----------------------------------------------
   390                             ;  Restore Volatile Page Pointer Registers
   391                             ;-----------------------------------------------
   392                             ;
   393                             ;  DESC: Undo for RAM_PRESERVE_PAGE_POINTERS macro. Invoked by ISRs after
   394                             ;        calling functions that run in the LMM mode and before executing
   395                             ;        the RETI instruction.
   396                             ;
   397                             ; INPUT: none
   398                             ;
   399                             ;  USES: CPU 'A' register
   400                             ;
   401                             ;  COST: 50 instruction cycles (in LMM only)
   402                          
   403                             macro ISR_RESTORE_PAGE_POINTERS
   404                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   405                                REG_RESTORE MVW_PP
   406                                REG_RESTORE MVR_PP
   407                                REG_RESTORE IDX_PP
   408                                REG_RESTORE CUR_PP
   409                             ENDIF
   410  3D73                       endm
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  FILENAME: PWM8_BLINT.asm
     4                          ;;   Version: 2.60, Updated on 2013/5/19 at 10:44:7
     5                          ;;  Generated by PSoC Designer 5.4.2946
     6                          ;;
     7                          ;;  DESCRIPTION: PWM8 Interrupt Service Routine
     8                          ;;-----------------------------------------------------------------------------
     9                          ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
    10                          ;;*****************************************************************************
    11                          ;;*****************************************************************************
    12                          
    13                          include "m8c.inc"
    14                          include "PWM8_BL.inc"
    15                          include "memory.inc"
    16                          
    17                          
    18                          ;-----------------------------------------------
    19                          ;  Global Symbols
    20                          ;-----------------------------------------------
    21                          export  _PWM8_BL_ISR
    22                          
    23                          
    24                          AREA InterruptRAM (RAM,REL,CON)
    25                          
    26                          ;@PSoC_UserCode_INIT@ (Do not change this line.)
    27                          ;---------------------------------------------------
    28                          ; Insert your custom declarations below this banner
    29                          ;---------------------------------------------------
    30                          
    31                          ;------------------------
    32                          ; Includes
    33                          ;------------------------
    34                          
    35                          	
    36                          ;------------------------
    37                          ;  Constant Definitions
    38                          ;------------------------
    39                          
    40                          
    41                          ;------------------------
    42                          ; Variable Allocation
    43                          ;------------------------
    44                          
    45                          
    46                          ;---------------------------------------------------
    47                          ; Insert your custom declarations above this banner
    48                          ;---------------------------------------------------
    49                          ;@PSoC_UserCode_END@ (Do not change this line.)
    50                          
    51                          
    52                          AREA UserModules (ROM, REL)
    53                          
    54                          ;-----------------------------------------------------------------------------
    55                          ;  FUNCTION NAME: _PWM8_BL_ISR
    56                          ;
    57                          ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
    58                          ;
    59                          ;-----------------------------------------------------------------------------
    60                          ;
    61                          
    62  2C48                    _PWM8_BL_ISR:
    63                          
    64                             ;@PSoC_UserCode_BODY@ (Do not change this line.)
    65                             ;---------------------------------------------------
    66                             ; Insert your custom assembly code below this banner
    67                             ;---------------------------------------------------
    68                             ;   NOTE: interrupt service routines must preserve
    69                             ;   the values of the A and X CPU registers.
    70                             
    71                             ;---------------------------------------------------
    72                             ; Insert your custom assembly code above this banner
    73                             ;---------------------------------------------------
    74                             
    75                             ;---------------------------------------------------
    76                             ; Insert a lcall to a C function below this banner
    77                             ; and un-comment the lines between these banners
    78                             ;---------------------------------------------------
    79                             
    80                             ;PRESERVE_CPU_CONTEXT
    81                             ;lcall _My_C_Function
    82                             ;RESTORE_CPU_CONTEXT
    83                             
    84                             ;---------------------------------------------------
    85                             ; Insert a lcall to a C function above this banner
    86                             ; and un-comment the lines between these banners
    87                             ;---------------------------------------------------
    88                             ;@PSoC_UserCode_END@ (Do not change this line.)
    89                          
    90  2C48  7E                   reti
HI-TECH Software Macro Assembler (PSoC MCU) V9.61
Symbol Table                                                                                               Thu Jul 09 11:34:28 2015
                       HITECH 0002                   _PWM8_BL_ISR 2C48                      TOOLCHAIN 0002  
HI-TECH Software Macro Assembler (PSoC MCU) V9.61
                                                                                                           Thu Jul 09 11:34:29 2015
     1                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     2                          ;;;
     3                          ;;;  M8C.INC -- Microcontroller Device System Declarations
     4                          ;;;
     5                          ;;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
     6                          ;;;
     7                          ;;;  This file provides address constants, bit field masks and a set of macro
     8                          ;;;  facilities for the Cypress Semiconductor CY8C22045 Microcontroller devices.
     9                          ;;;
    10                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    11                          
    12                          ;;=============================================================================
    13                          ;; Definition of abbreviations used in the descriptions below
    14                          ;;  (RW)   The register or bit supports reads and writes
    15                          ;;  (W)    The register or bit is write-only
    16                          ;;  (R)    The register or bit is read-only
    17                          ;;  (#)    Access to the register is bit specific (see the family datasheet)
    18                          ;;  (RC)   The register or bit can be read, but writing a 0 will clear it,
    19                          ;;         writing a 1 will have no effect.
    20                          ;;=============================================================================
    21                          
    22                          ;;=============================================================================
    23                          ;;      System Registers
    24                          ;;=============================================================================
    25                          
    26                          ;----------------------------
    27                          ;  Flag Register Bit Fields
    28                          ;----------------------------
    29  00C0                    FLAG_PGMODE_MASK:  equ 0C0h     ; Paging control for > 256 bytes of RAM
    30  0000                    FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
    31  0040                    FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
    32  0080                    FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
    33  00C0                    FLAG_PGMODE_3:     equ 0C0h       ; Direct to CUR_PP page, indexed to STK_PP page
    34  0000                    FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
    35  0040                    FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
    36  0080                    FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
    37  00C0                    FLAG_PGMODE_11b:   equ 0C0h       ; Same as PGMODE_3
    38  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    39  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    40  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    41  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    42  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    43                          
    44                          
    45                          ;;=============================================================================
    46                          ;;      Register Space, Bank 0
    47                          ;;=============================================================================
    48                          
    49                          ;------------------------------------------------
    50                          ;  Port Registers
    51                          ;  Note: Also see this address range in Bank 1.
    52                          ;------------------------------------------------
    53                          ; Port 0
    54  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    55  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    56  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    57  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    58                          ; Port 1
    59  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    60  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    61  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    62  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    63                          ; Port 2
    64  0008                    PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
    65  0009                    PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
    66  000A                    PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
    67  000B                    PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
    68                          ; Port 3
    69  000C                    PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
    70  000D                    PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
    71  000E                    PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
    72  000F                    PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
    73                          ; Port 4
    74  0010                    PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
    75  0011                    PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
    76  0012                    PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
    77  0013                    PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
    78                          
    79                          ;------------------------------------------------
    80                          ;  Digital PSoC(tm) block Registers
    81                          ;  Note: Also see this address range in Bank 1.
    82                          ;------------------------------------------------
    83                          ; Digital PSoC block 00, Basic Type C
    84  0020                    DBC00DR0:     equ 20h          ; data register 0                          (#)
    85  0021                    DBC00DR1:     equ 21h          ; data register 1                          (W)
    86  0022                    DBC00DR2:     equ 22h          ; data register 2                          (RW)
    87  0023                    DBC00CR0:     equ 23h          ; control & status register 0              (#)
    88                          
    89                          ; Digital PSoC block 01, Basic Type C
    90  0024                    DBC01DR0:     equ 24h          ; data register 0                          (#)
    91  0025                    DBC01DR1:     equ 25h          ; data register 1                          (W)
    92  0026                    DBC01DR2:     equ 26h          ; data register 2                          (RW)
    93  0027                    DBC01CR0:     equ 27h          ; control & status register 0              (#)
    94                          
    95                          ; Digital PSoC block 02, Communications Type C
    96  0028                    DCC02DR0:     equ 28h          ; data register 0                          (#)
    97  0029                    DCC02DR1:     equ 29h          ; data register 1                          (W)
    98  002A                    DCC02DR2:     equ 2Ah          ; data register 2                          (RW)
    99  002B                    DCC02CR0:     equ 2Bh          ; control & status register 0              (#)
   100                          
   101                          ; Digital PSoC block 03, Communications Type C
   102  002C                    DCC03DR0:     equ 2Ch          ; data register 0                          (#)
   103  002D                    DCC03DR1:     equ 2Dh          ; data register 1                          (W)
   104  002E                    DCC03DR2:     equ 2Eh          ; data register 2                          (RW)
   105  002F                    DCC03CR0:     equ 2Fh          ; control & status register 0              (#)
   106                          
   107                          ; Digital PSoC block 10, Basic Type C
   108  0030                    DBC10DR0:     equ 30h          ; data register 0                          (#)
   109  0031                    DBC10DR1:     equ 31h          ; data register 1                          (W)
   110  0032                    DBC10DR2:     equ 32h          ; data register 2                          (RW)
   111  0033                    DBC10CR0:     equ 33h          ; control & status register 0              (#)
   112                          
   113                          ; Digital PSoC block 11, Basic Type C
   114  0034                    DBC11DR0:     equ 34h          ; data register 0                          (#)
   115  0035                    DBC11DR1:     equ 35h          ; data register 1                          (W)
   116  0036                    DBC11DR2:     equ 36h          ; data register 2                          (RW)
   117  0037                    DBC11CR0:     equ 37h          ; control & status register 0              (#)
   118                          
   119                          ; Digital PSoC block 12, Communications Type C
   120  0038                    DCC12DR0:     equ 38h          ; data register 0                          (#)
   121  0039                    DCC12DR1:     equ 39h          ; data register 1                          (W)
   122  003A                    DCC12DR2:     equ 3Ah          ; data register 2                          (RW)
   123  003B                    DCC12CR0:     equ 3Bh          ; control & status register 0              (#)
   124                          
   125                          ; Digital PSoC block 13, Communications Type C
   126  003C                    DCC13DR0:     equ 3Ch          ; data register 0                          (#)
   127  003D                    DCC13DR1:     equ 3Dh          ; data register 1                          (W)
   128  003E                    DCC13DR2:     equ 3Eh          ; data register 2                          (RW)
   129  003F                    DCC13CR0:     equ 3Fh          ; control & status register 0              (#)
   130                          
   131                          ;-------------------------------------
   132                          ;  Analog Control Registers
   133                          ;-------------------------------------
   134  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
   135  00C0                    AMX_IN_ACI3:          equ C0h    ; MASK: column 3 input mux
   136  0030                    AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
   137  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
   138  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
   139                          
   140  0061                    AMUX_CFG:      equ 61h          ; Analog MUX Configuration
   141  0030                    AMUX_CFG_INTCAP:       equ 30h    ;
   142  000E                    AMUX_CFG_MUXCLK:  	  equ 0Eh	 ;
   143  0001                    AMUX_CFG_EN:		  	  equ 01h	 ;
   144                          
   145                          ; old declarations DO NOT USE
   146  0061                    AMUXCFG:      equ 61h          ; Analog MUX Configuration
   147  0030                    AMUXCFG_INTCAP:       equ 30h    ;
   148  000E                    AMUXCFG_MUXCLK:  	  equ 0Eh	 ;
   149  0001                    AMUXCFG_EN:		  	  equ 01h	 ;
   150                          
   151  0062                    PWM_CR:       equ 62h          ; Pulse-Width Modulator Control
   152  0038                    PWM_CR_HIGH:          equ 38h    ; MASK: PWM high time
   153  0006                    PWM_CR_LOW:           equ 06h	 ; MASK: PWM low time
   154  0001                    PWM_CR_EN:            equ 01h	 ; MASK: Enable/Disable PWM function
   155                          
   156  0063                    ARF_CR:       equ 63h          ; Analog Reference Control
   157                          
   158  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus Register           (#)
   159  0080                    CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
   160  0040                    CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
   161  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
   162  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
   163  0008                    CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
   164  0004                    CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
   165  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
   166  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   167                          
   168  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   169  0020                    CMP_CR1_CLDIS1:       equ 20h    ; MASK: Column 1 comparator output latch
   170  0010                    CMP_CR1_CLDIS0:	      equ 10h    ; MASK: Column 0 comparator output latch
   171                          
   172  0068                    ADC0_CR:      equ 68h          ; Analog Column 0 Configuration
   173  0080                    ADC0_CR_CMPST:        equ 80h    ;
   174  0040                    ADC0_CR_LOREN:        equ 40h    ;
   175  0020                    ADC0_CR_SHEN:         equ 20h    ;
   176  0008                    ADC0_CR_CBSRC:        equ 08h    ;
   177  0004                    ADC0_CR_ADCM:         equ 04h    ;
   178  0001                    ADC0_CR_EN:	          equ 01h    ;
   179                          
   180  0069                    ADC1_CR:      equ 69h          ; Analog Column 1 Configuration
   181  0080                    ADC1_CR_CMPST:        equ 80h    ;
   182  0040                    ADC1_CR_LOREN:        equ 40h    ;
   183  0020                    ADC1_CR_SHEN:         equ 20h    ;
   184  0008                    ADC1_CR_CBSRC:        equ 08h    ;
   185  0004                    ADC1_CR_ADCM:         equ 04h    ;
   186  0001                    ADC1_CR_EN:	          equ 01h    ;
   187                          
   188                          ; Continuous Time PSoC block Type E Row 0 Col 0
   189  0072                    ACE00CR1:     equ 72h          ; Control register 1                       (RW)
   190  0073                    ACE00CR2:     equ 73h          ; Control register 2                       (RW)
   191                          
   192                          ; Continuous Time PSoC block Type E Row 0 Col 1
   193  0076                    ACE01CR1:     equ 76h          ; Control register 1                       (RW)
   194  0077                    ACE01CR2:     equ 77h          ; Control register 2                       (RW)
   195                          
   196                          ; Switched Cap PSoC blockType E Row 1 Col 0
   197  0080                    ASE10CR0:     equ 80h          ; Control register 0                       (RW)
   198                          
   199                          ; Switched Cap PSoC blockType E Row 1 Col 1
   200  0084                    ASE11CR0:     equ 84h          ; Control register 0                       (RW)
   201                          
   202                          ;-----------------------------------------------
   203                          ;  Global General Purpose Data Registers
   204                          ;-----------------------------------------------
   205  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   206  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   207  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   208  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   209                          
   210                          ;------------------------------------------------
   211                          ;  Row Digital Interconnects
   212                          ;
   213                          ;  Note: the following registers are mapped into
   214                          ;  both register bank 0 AND register bank 1.
   215                          ;------------------------------------------------
   216                          
   217  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   218  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   219  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   220  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   221  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   222  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   223  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   224                          
   225  00B8                    RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
   226  00B9                    RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
   227  00BA                    RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
   228  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   229  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   230  00BD                    RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
   231  00BE                    RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
   232                          
   233                          ;-----------------------------------------------
   234                          ;  Ram Page Pointers
   235                          ;-----------------------------------------------
   236  00D0                    CUR_PP:      equ 0D0h           ; Current   Page Pointer
   237  00D1                    STK_PP:      equ 0D1h           ; Stack     Page Pointer
   238  00D3                    IDX_PP:      equ 0D3h           ; Index     Page Pointer
   239  00D4                    MVR_PP:      equ 0D4h           ; MVI Read  Page Pointer
   240  00D5                    MVW_PP:      equ 0D5h           ; MVI Write Page Pointer
   241                          
   242                          ;------------------------------------------------
   243                          ;  I2C Configuration Registers
   244                          ;------------------------------------------------
   245  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   246  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   247  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   248  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   249  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   250  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   251  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   252  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   253  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   254  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   255                          
   256  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   257  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   258  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   259  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   260  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   261  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   262  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   263  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   264  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   265                          
   266  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   267                          
   268  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   269  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   270  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   271  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   272  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   273                          
   274                          ;------------------------------------------------
   275                          ;  System and Global Resource Registers
   276                          ;------------------------------------------------
   277  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   278                                                         ; Use INT_MSK0 bit field masks
   279  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   280                                                         ; Use INT_MSK1 bit field masks
   281  00DC                    INT_CLR2:     equ 0DCh          ; Interrupt Clear Register 2               (RW)
   282                                                         ; Use INT_MSK2 bit field masks
   283  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   284                                                         ; Use INT_MSK3 bit field masks
   285                          
   286  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   287  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   288  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   289                          
   290  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   291  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   292  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   293  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   294  0010                    INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
   295  0008                    INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
   296  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   297  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   298  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   299                          
   300  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   301  0080                    INT_MSK1_DCC13:            equ 80h ; MASK: enable/disable DCC13 block interrupt
   302  0040                    INT_MSK1_DCC12:            equ 40h ; MASK: enable/disable DCC12 block interrupt
   303  0020                    INT_MSK1_DBC11:            equ 20h ; MASK: enable/disable DBC11 block interrupt
   304  0010                    INT_MSK1_DBC10:            equ 10h ; MASK: enable/disable DBC10 block interrupt
   305  0008                    INT_MSK1_DCC03:            equ 08h ; MASK: enable/disable DCC03 block interrupt
   306  0004                    INT_MSK1_DCC02:            equ 04h ; MASK: enable/disable DCC02 block interrupt
   307+ 0002                    INT_MSK1_DBC01:            equ 02h ; MASK: enable/disable DBC01 block interrupt
   308  0001                    INT_MSK1_DBC00:            equ 01h ; MASK: enable/disable DBC00 block interrupt
   309                          
   310  00DF                    INT_MSK2:     equ DFh			; Custom block Mask Register			   (RW)
   311  0010                    INT_MSK2_SARADC:           equ 10h ; MASK: enable/disable SARADC block interrupt
   312  0020                    INT_MSK2_CSD0:             equ 20h ; MASK: enable/disable CSD0 block interrupt
   313  0040                    INT_MSK2_CSD1:             equ 40h ; MASK: enable/disable CSD1 block interrupt
   314  0080                    INT_MSK2_RTC:              equ 80h ; MASK: enable/disable RTC block interrupt
   315                          
   316  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   317  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   318                          
   319                          ;------------------------------------------------------
   320                          ;  MAC Registers
   321                          ;------------------------------------------------------
   322                          
   323  00E8                    MUL0_X:       equ 0E8h          ; Multiply Input X Register                (W)
   324  00E9                    MUL0_Y:       equ 0E9h          ; Multiply Input Y Register                (W)
   325  00EA                    MUL0_DH:      equ 0EAh          ; Multiply Result High Byte Register       (R)
   326  00EB                    MUL0_DL:      equ 0EBh          ; Multiply Result Low Byte Register        (R)
   327                          
   328  00EC                    ACC0_DR1:     equ 0ECh          ; Accumulator Data Register 1              (RW)
   329  00ED                    ACC0_DR0:     equ 0EDh          ; Accumulator Data Register 0              (RW)
   330  00EE                    ACC0_DR3:     equ 0EEh          ; Accumulator Data Register 3              (RW)
   331+ 00EF                    ACC0_DR2:     equ 0EFh          ; Accumulator Data Register 2              (RW)
   332+                         
   333+                         ; DECIMATOR Control Registers
   334+ 00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   335  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   336                          
   337                          ;------------------------------------------------------
   338                          ;  System Status and Control Registers
   339                          ;
   340                          ;  Note: The following registers are mapped into both
   341                          ;        register bank 0 AND register bank 1.
   342                          ;------------------------------------------------------
   343  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   344                                                             ; Use FLAG_ masks defined at top of file
   345                          
   346  00FD                    DAC_D:        equ 0FDh		   ; DAC Data Register                        (RW)
   347                          
   348  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   349  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: flag, Internal Reset Status bit
   350  0010                    CPU_SCR1_SLIMO:         equ 10h	   ; MASK: Slow IMO (internal main osc) enable
   351  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   352  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   353  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   354                          
   355  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   356  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   357  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   358  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   359  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   360  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   361                          
   362                          ;------------------------------------------------------
   363                          ;  Neon Capsense Digital Control Registers
   364                          ;------------------------------------------------------
   365  0050                    CSD0_DR0_L:				equ 50h		; Capsense 0 data low 0				(RW)
   366  0054                    CSD0_DR0_H:				equ 54h		; Capsense 0 data high 0			(RW)
   367  0058                    CSD1_DR0_L:				equ 58h		; Capsense 1 data low 0				(RW)
   368  005C                    CSD1_DR0_H:				equ 5Ch		; Capsense 1 data high 0			(RW)
   369  0051                    CSD0_DR1_L:				equ 51h		; Capsense 0 data low 1				(RW)
   370  0055                    CSD0_DR1_H:				equ 55h		; Capsense 0 data high 1			(RW)
   371  0059                    CSD1_DR1_L:				equ 59h		; Capsense 1 data low 1				(RW)
   372  005D                    CSD1_DR1_H:				equ 5Dh		; Capsense 1 data high 1			(RW)
   373  0052                    CSD0_CNT_L:				equ 52h		; Capsense 0 counter low			(RW)
   374  0056                    CSD0_CNT_H:				equ 56h		; Capsense 0 counter high			(RW)
   375  005A                    CSD1_CNT_L:				equ 5Ah		; Capsense 1 counter low			(RW)
   376  005E                    CSD1_CNT_H:				equ	5Eh		; Capsense 1 counter high			(RW)
   377  0053                    CSD0_CR0:				equ 53h		; Capsense 0 control 0				(RW)
   378  005B                    CSD1_CR0:				equ 5Bh		; Capsense 1 control 0				(RW)
   379  0057                    CSD0_CR1:				equ 57h		; Capsense 0 control 1				(RW)
   380  005F                    CSD1_CR1:				equ 5Fh		; Capsense 1 control 1				(RW)
   381                          
   382                          ;------------------------------------------------------
   383                          ;  Neon Analog Registers
   384                          ;------------------------------------------------------
   385  0065                    ASY_CR:					equ 65h		; Analog Synchronization Control	(RW)
   386  006A                    ADC_DH:					equ 6Ah		; ADC data high						(RW)
   387  006B                    ADC_DL:					equ 6Bh		; ADC data low						(RW)
   388  00C8                    PWMVREF0:				equ C8h		; PWM Voltage Reference 0			(RW)
   389  00C9                    PWMVREF1:				equ C9h		; PWM Voltage Reference 1			(RW)
   390  00CB                    PWMSRC:					equ CBh		; PWM Source						(RW)
   391  00CA                    IDACMODE:				equ CAh		; IDAC Mode							(RW)
   392  00FC                    IDACR_D:				equ FCh		; Analog Mux DAC data 0				(RW)
   393  00FD                    IDACL_D:				equ FDh		; Analog Mux DAC data 1				(RW)
   394                          
   395                          ;------------------------------------------------------
   396                          ;  Neon Digital Registers
   397                          ;------------------------------------------------------
   398  00B7                    RDI0DSM:				equ B7h		; Row Digital Interconnect input select 0	(RW)
   399  00BF                    RDI1DSM:				equ BFh		; Row Digital Interconnect input select 1	(RW)
   400                          
   401                          ;------------------------------------------------------
   402                          ;  Neon Test Registers
   403                          ;------------------------------------------------------
   404  00CC                    TSCR0:					equ CCh		; Tsource 0							(RW)
   405  00CD                    TSCMPH:					equ CDh		; TSCMP high						(RW)
   406  00CE                    TSCMPL:					equ CEh		; TSCMP low							(RW)
   407  00CF                    TSCR1:					equ CFh		; Tsource 1							(RW)
   408                          
   409                          ;;=============================================================================
   410                          ;;      Register Space, Bank 1
   411                          ;;=============================================================================
   412                          
   413                          ;------------------------------------------------
   414                          ;  Port Registers
   415                          ;  Note: Also see this address range in Bank 0.
   416                          ;------------------------------------------------
   417                          ; Port 0
   418  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   419  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   420  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   421  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   422                          
   423                          ; Port 1
   424  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   425  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   426  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   427  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   428                          
   429                          ; Port 2
   430  0008                    PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
   431  0009                    PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
   432  000A                    PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
   433  000B                    PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
   434                          
   435                          ; Port 3
   436  000C                    PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
   437  000D                    PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
   438  000E                    PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
   439  000F                    PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
   440                          
   441                          ; Port 4
   442  0010                    PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
   443  0011                    PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
   444  0012                    PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
   445  0013                    PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
   446                          
   447                          ;------------------------------------------------
   448                          ;  Digital PSoC(tm) block Registers
   449                          ;  Note: Also see this address range in Bank 0.
   450                          ;------------------------------------------------
   451                          
   452                          ; Digital PSoC block 00, Basic Type C
   453  0020                    DBC00FN:      equ 20h          ; Function Register                        (RW)
   454  0021                    DBC00IN:      equ 21h          ;    Input Register                        (RW)
   455  0022                    DBC00OU:      equ 22h          ;   Output Register                        (RW)
   456  0023                    DBC00CR1:     equ 23h          ;   control & status register 1            (RW)
   457                          
   458                          ; Digital PSoC block 01, Basic Type C
   459  0024                    DBC01FN:      equ 24h          ; Function Register                        (RW)
   460  0025                    DBC01IN:      equ 25h          ;    Input Register                        (RW)
   461  0026                    DBC01OU:      equ 26h          ;   Output Register                        (RW)
   462  0027                    DBC01CR1:     equ 27h          ;   control & status register 1            (RW)
   463                          
   464                          ; Digital PSoC block 02, Communications Type C
   465  0028                    DCC02FN:      equ 28h          ; Function Register                        (RW)
   466  0029                    DCC02IN:      equ 29h          ;    Input Register                        (RW)
   467  002A                    DCC02OU:      equ 2Ah          ;   Output Register                        (RW)
   468  002B                    DBC02CR1:     equ 2Bh          ;   control & status register 1            (RW)
   469                          
   470                          ; Digital PSoC block 03, Communications Type C
   471  002C                    DCC03FN:      equ 2Ch          ; Function Register                        (RW)
   472  002D                    DCC03IN:      equ 2Dh          ;    Input Register                        (RW)
   473  002E                    DCC03OU:      equ 2Eh          ;   Output Register                        (RW)
   474  0029                    DBC03CR1:     equ 29h          ;   control & status register 1            (RW)
   475                          
   476                          ; Digital PSoC block 10, Basic Type C
   477  0030                    DBC10FN:      equ 30h          ; Function Register                        (RW)
   478  0031                    DBC10IN:      equ 31h          ;    Input Register                        (RW)
   479  0032                    DBC10OU:      equ 32h          ;   Output Register                        (RW)
   480  0033                    DBC10CR1:     equ 33h          ;   control & status register 1            (RW)
   481                          
   482                          ; Digital PSoC block 11, Basic Type C
   483  0034                    DBC11FN:      equ 34h          ; Function Register                        (RW)
   484  0035                    DBC11IN:      equ 35h          ;    Input Register                        (RW)
   485  0036                    DBC11OU:      equ 36h          ;   Output Register                        (RW)
   486  0037                    DBC11CR1:     equ 37h          ;   control & status register 1            (RW)
   487                          
   488                          ; Digital PSoC block 12, Communications Type C
   489  0038                    DCC12FN:      equ 38h          ; Function Register                        (RW)
   490  0039                    DCC12IN:      equ 39h          ;    Input Register                        (RW)
   491  003A                    DCC12OU:      equ 3Ah          ;   Output Register                        (RW)
   492  003B                    DBC12CR1:     equ 3Bh          ;   control & status register 1            (RW)
   493                          
   494                          ; Digital PSoC block 13, Communications Type C
   495  003C                    DCC13FN:      equ 3Ch          ; Function Register                        (RW)
   496  003D                    DCC13IN:      equ 3Dh          ;    Input Register                        (RW)
   497  003E                    DCC13OU:      equ 3Eh          ;   Output Register                        (RW)
   498  003F                    DBC13CR1:     equ 3Fh          ;   control & status register 1            (RW)
   499                          
   500                          ;------------------------------------------------
   501                          ;  System and Global Resource Registers
   502                          ;  Note: Also see this address range in Bank 0.
   503                          ;------------------------------------------------
   504                          
   505  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   506  00C0                    CLK_CR0_ACOLUMN_3:    equ C0h    ; MASK: Specify clock for analog cloumn
   507  0030                    CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
   508  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   509  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   510                          
   511  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   512  0018                    CLK_CR1_ACLK1:        equ 18h    ; MASK: Digital PSoC block for analog source
   513  0003                    CLK_CR1_ACLK0:        equ 03h    ; MASK: Digital PSoC block for analog source
   514                          
   515  0003                    CLK_CR1_ACLK2:        equ 03h    ; Deprecated do not use
   516                          
   517  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   518  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   519                          
   520  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   521  000F                    AMD_CR0_AMOD0:        equ 0Fh    ; MASK: Modulation source for analog column 0
   522                          
   523  0064                    CMP_GO_EN:    equ 64h          ; Comparator Bus To Global Out Enable      (RW)
   524  0080                    CMP_GO_EN_GOO5:       equ 80h    ; MASK: Selected Col 1 signal to GOO5
   525  0040                    CMP_GO_EN_GOO1:       equ 40h    ; MASK: Selected Col 1 signal to GOO1
   526  0030                    CMP_GO_EN_SEL1:       equ 30h    ; MASK: Column 1 Signal Select
   527  0008                    CMP_GO_EN_GOO4:       equ 08h    ; MASK: Selected Col 0 signal to GOO4
   528  0004                    CMP_GO_EN_GOO0:       equ 04h    ; MASK: Selected Col 0 signal to GOO0
   529  0003                    CMP_GO_EN_SEL0:       equ 03h    ; MASK: Column 0 Signal Select
   530                          
   531  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   532  000F                    AMD_CR1_AMOD1:        equ 0Fh    ; MASK: Modulation ctrl for analog column 1
   533                          
   534  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   535  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   536  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   537                          
   538  006B                    CLK_CR3:      equ 6Bh          ; Analog Clock Source Control Register 3   (RW)
   539  0040                    CLK_CR3_SYS1:         equ 40h    ; MASK: Analog Clock 1 selection
   540  0030                    CLK_CR3_DIVCLK1:      equ 30h    ; MASK: Analog Clock 1 divider
   541  0004                    CLK_CR3_SYS0:         equ 04h    ; MASK: Analog Clock 0 selection
   542  0003                    CLK_CR3_DIVCLK0:      equ 03h    ; MASK: Analog Clock 0 divider
   543                          
   544                          ;------------------------------------------------
   545                          ;  Global Digital Interconnects
   546                          ;------------------------------------------------
   547                          
   548  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   549  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   550  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   551  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   552                          
   553  00A0                    GDI_O_IN_CR:  equ 0A0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   554  00A1                    GDI_E_IN_CR:  equ 0A1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   555  00A2                    GDI_O_OU_CR:  equ 0A2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   556  00A3                    GDI_E_OU_CR:  equ 0A3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   557                          
   558  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   559  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   560                          
   561                          ;------------------------------------------------
   562                          ;  Analog Mux Bus Port Enable Bits
   563                          ;------------------------------------------------
   564  00D8                    MUX_CR0:      equ 0D8h          ; Analog Mux Port 0 Bit Enables Register
   565  00D9                    MUX_CR1:      equ 0D9h          ; Analog Mux Port 1 Bit Enables Register
   566  00DA                    MUX_CR2:      equ 0DAh          ; Analog Mux Port 2 Bit Enables Register
   567  00DB                    MUX_CR3:      equ 0DBh          ; Analog Mux Port 3 Bit Enables Register
   568  00EC                    MUX_CR4:      equ 0ECh          ; Analog Mux Port 4 Bit Enables Register
   569                          
   570                          ;------------------------------------------------
   571                          ;  Clock and System Control Registers
   572                          ;------------------------------------------------
   573                          
   574  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   575  0080                    OSC_GO_EN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   576  0040                    OSC_GO_EN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   577  0020                    OSC_GO_EN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   578  0010                    OSC_GO_EN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   579  0008                    OSC_GO_EN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   580  0004                    OSC_GO_EN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   581  0002                    OSC_GO_EN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   582  0001                    OSC_GO_EN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   583                          
   584  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   585  0003                    OSC_CR4_VC3SEL:       equ 03h    ; MASK: System VC3 Clock source
   586                          
   587  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   588                          
   589  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   590  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   591  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   592  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   593  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   594  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   595  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   596  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   597  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   598  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   599  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   600  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   601  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   602  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   603  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   604  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   605  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   606  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   607                          
   608  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   609  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   610  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   611                          
   612  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   613  0080                    OSC_CR2_PLLGAIN:      equ 80h    ; MASK: High/Low gain
   614  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   615  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   616  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   617                          
   618  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   619  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   620  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   621  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   622  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   623  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   624  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   625  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   626                          
   627  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   628  0008                    VLT_CMP_NOWRITE:      equ 08h    ; MASK: Vcc below Flash Write level
   629  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   630  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   631  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   632                          
   633  00E5                    ADC0_TR:      equ 0E5h          ; ADC Column 0 Trim Register
   634  00E6                    ADC1_TR:      equ 0E6h          ; ADC Column 1 Trim Register
   635                          
   636  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   637  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   638  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   639  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   640                          
   641  00FA                    FLS_PR1:      equ 0FAh          ; Flash Program Register 1                 (RW)
   642  0003                    FLS_PR1_BANK:         equ 03h    ; MASK: Select Active Flash Bank
   643                          
   644  00FD                    DAC_CR0:       equ 0FDh          ; Analog Mux DAC Control Register 0
   645  00DC                    DAC_CR1:       equ 0DCh          ; Analog Mux DAC Control Register 1
   646  0008                    DAC_CR_IRANGE:        equ 08h    ; MASK: Sets the DAC Range low or high
   647  0006                    DAC_CR_OSCMODE:       equ 06h    ; MASK: Defines the reset mode for AMux
   648  0001                    DAC_CR_ENABLE:        equ 01h    ; MASK: Enable/Disable DAC function
   649                          
   650                          ;------------------------------------------------
   651                          ;  I2C Control Registers
   652                          ;------------------------------------------------
   653                          
   654  00AD                    I2C_ADDR:    equ 0ADh          ; I2C Address Register (RW)
   655                          
   656                          ;------------------------------------------------------
   657                          ;  Neon Analog Registers
   658                          ;------------------------------------------------------
   659  0053                    VDAC50CR0:		equ 53h			; V DAC5 control 0				(RW)
   660  0057                    VDAC51CR0:		equ 57h			; V DAC5 control 1				(RW)
   661  00A8                    ADC_CR0:		equ A8h			; ADC control 0					(RW)
   662  00A9                    ADC_CR1:		equ A9h			; ADC control 1					(RW)
   663  00AA                    ADC_CR2:		equ AAh			; ADC control 2					(RW)
   664  00AB                    ADC_CR3TRIM:	equ ABh			; ADC control 3					(RW)
   665  00AC                    ADC_CR4:		equ ACh			; ADC control 4					(RW)
   666  00E7                    VDAC_TRIM:		equ E7h			; V DAC trim					(RW)
   667                          
   668                          ;------------------------------------------------------
   669                          ;  Neon Current Sense CMP Registers
   670                          ;------------------------------------------------------
   671  0050                    CMP0CR1:		equ 50h			; CMP0 control 1				(RW)
   672  0051                    CMP0CR2:		equ 51h			; CMP0 control 2				(RW)
   673  0054                    CMP1CR1:		equ 54h			; CMP1 control 1				(RW)
   674  0055                    CMP1CR2:		equ 55h			; CMP1 control 2				(RW)
   675  0058                    CSCMPCR0:		equ 58h			; CSCMP control 0				(RW)
   676  0059                    CSCMPGOEN:		equ 59h			; CSCMO global out enable		(RW)
   677  005A                    CSLUTCR0:		equ 5Ah			; CSLUT control 0				(RW)
   678  005B                    CMPCOLMUX:		equ 5Bh			; CMP Column Mux				(RW)
   679  005C                    CMPPWMCR:		equ 5Ch			; CMP PWM control				(RW)
   680  005D                    CMPFLTCR:		equ 5Dh			; CMP filter control			(RW)
   681  005E                    CMPCLK1:		equ 5Eh			; CMP clock 1					(RW)
   682  005F                    CMPCLK0:		equ 5Fh			; CMP clock 0					(RW)
   683                          
   684                          ;------------------------------------------------------
   685                          ;  Neon Real Time Clock Registers
   686                          ;------------------------------------------------------
   687  00A4                    RTCH:			equ A4h			; Real time current hour		(RW)
   688  00A5                    RTCM:			equ A5h			; Real time current minute		(RW)
   689  00A6                    RTCS:			equ A6h			; Real time current second		(RW)
   690  00A7                    RTCCR:			equ A7h			; Real time clock control		(RW)
   691                          
   692                          ;------------------------------------------------------
   693                          ;  Analog MUX Config Registers
   694                          ;------------------------------------------------------
   695                          
   696  006A                    AMUX_CFG1:			equ 6Ah  ; Analog MUX Configuration 1
   697  0020                    AMUX_CFG1_GOINVR:	equ 20h  ;
   698  0010                    AMUX_CFG1_GOINVL:  	equ 10h	 ;
   699  000C                    AMUX_CFG1_AMUXMODR:	equ 0Ch	 ;
   700  0003                    AMUX_CFG1_AMUXMODL:	equ 03h	 ;
   701                          
   702                          ;;=============================================================================
   703                          ;;      M8C System Macros
   704                          ;;  These macros should be used when their functions are needed.
   705                          ;;=============================================================================
   706                          
   707                          ;----------------------------------------------------
   708                          ;  Swapping Register Banks
   709                          ;----------------------------------------------------
   710                              macro M8C_SetBank0
   711                              and   F, ~FLAG_XIO_MASK
   712  3D73                        endm
   713                          
   714                              macro M8C_SetBank1
   715                              or    F, FLAG_XIO_MASK
   716  3D73                        endm
   717                          
   718                          ;----------------------------------------------------
   719                          ;  Global Interrupt Enable/Disable
   720                          ;----------------------------------------------------
   721                              macro M8C_EnableGInt
   722                              or    F, FLAG_GLOBAL_IE
   723  3D73                        endm
   724                          
   725                              macro M8C_DisableGInt
   726                              and   F, ~FLAG_GLOBAL_IE
   727  3D73                        endm
   728                          
   729                          ;----------------------------------------------------
   730                          ;  Enable/Disable Interrupt Mask
   731                          ;
   732                          ;  Use the following macros to enable/disable
   733                          ;  bits in the Interrupt mask registers,
   734                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   735                          ;
   736                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   737                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   738                          ;
   739                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   740                          ;        and MASK is the bit set to enable or disable
   741                          ;----------------------------------------------------
   742                          ; Disable Interrupt Bit Mask(s)
   743                              macro M8C_DisableIntMask
   744                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   745  3D73                        endm
   746                          
   747                          ; Enable Interrupt Bit Mask(s)
   748                              macro M8C_EnableIntMask
   749                              or    reg[@0], @1               ; enable specified interrupt enable bit
   750  3D73                        endm
   751                          
   752                          ;----------------------------------------------------
   753                          ;  Clear Posted Interrupt Flag Mask
   754                          ;
   755                          ;  Use the following macros to clear the
   756                          ;  bits in the Interrupt Clear registers,
   757                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   758                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   759                          ;
   760                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   761                          ;        and MASK is the bit set to enable or disable
   762                          ;----------------------------------------------------
   763                              macro M8C_ClearIntFlag
   764                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   765  3D73                        endm
   766                          
   767                          ;----------------------------------------------------
   768                          ;  Power-On Reset & WatchDog Timer Functions
   769                          ;----------------------------------------------------
   770                              macro M8C_EnableWatchDog
   771                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   772  3D73                        endm
   773                          
   774                              macro M8C_ClearWDT
   775                              mov   reg[RES_WDT], 00h
   776  3D73                        endm
   777                          
   778                              macro M8C_ClearWDTAndSleep
   779                              mov   reg[RES_WDT], 38h
   780  3D73                        endm
   781                          
   782                          ;----------------------------------------------------
   783                          ;  Sleep, CPU Stop & Software Reset
   784                          ;----------------------------------------------------
   785                              macro M8C_Sleep
   786                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   787                              ; The next instruction to be executed depends on the state of the
   788                              ; various interrupt enable bits. If some interrupts are enabled
   789                              ; and the global interrupts are disabled, the next instruction will
   790                              ; be the one that follows the invocation of this macro. If global
   791                              ; interrupts are also enabled then the next instruction will be
   792                              ; from the interrupt vector table. If no interrupts are enabled
   793                              ; then the CPU sleeps forever.
   794  3D73                        endm
   795                          
   796                              macro M8C_Stop
   797                              ; In general, you probably don't want to do this, but here's how:
   798                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   799                              ; Next instruction to be executed is located in the interrupt
   800                              ; vector table entry for Power-On Reset.
   801  3D73                        endm
   802                          
   803                              macro M8C_Reset
   804                              ; Restore CPU to the power-on reset state.
   805                              mov A, 0
   806                              SSC
   807                              ; Next non-supervisor instruction will be at interrupt vector 0.
   808  3D73                        endm
   809                          
   810                          ;----------------------------------------------------
   811                          ; ImageCraft Code Compressor Actions
   812                          ;----------------------------------------------------
   813                              ; Suspend Code Compressor
   814                              ; Must not span a RET or RETI instruction
   815                              ; without resuming code compression
   816                              macro Suspend_CodeCompressor
   817                              or   F, 0
   818  3D73                        endm
   819                          
   820                              ; Resume Code Compression
   821                              macro Resume_CodeCompressor
   822                              add  SP, 0
   823                              endm
      + 3D73                    
      + 3D73                    ; end of file m8c.inc
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;
     4                          ;;       FILENAME: Memory.inc
     5                          ;;
     6                          ;;    DESCRIPTION: Memory Model and Stack Parameter Definitions for 
     7                          ;;                 CY8C22045 PSoC devices.
     8                          ;;
     9                          ;;  LAST MODIFIED: August 17, 2004
    10                          ;;
    11                          ;;-----------------------------------------------------------------------------
    12                          ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
    13                          ;;*****************************************************************************
    14                          ;;*****************************************************************************
    15                          ;
    16                          ;
    17                          ;  ******** Define Memory Model and Stack parameters ********
    18                          ;
    19  0001                    IMAGECRAFT: equ 1   
    20  0002                    HITECH: equ 2   
    21  0002                    TOOLCHAIN: equ HITECH   
    22  0001                    SYSTEM_LARGE_MEMORY_MODEL: equ 1   
    23  0000                    SYSTEM_SMALL_MEMORY_MODEL: equ 0   
    24  0003                    SYSTEM_STACK_PAGE: equ 3   
    25  0000                    SYSTEM_STACK_PAGE_OFFSET: equ 0   
    26  0002                    SYSTEM_TOOLS: equ 2   
    27  0000                    SYSTEM_IDXPG_TRACKS_STK_PP: equ 0   
    28  0001                    SYSTEM_IDXPG_TRACKS_IDX_PP: equ 1   
    29  0000                    SYSTEM_MULTIPAGE_STACK: equ 0 
    30                          
    31                          
    32                          ;  ******* Function Class Definitions *******
    33                          ;
    34                          ;  These definitions are used to describe RAM access patterns. They provide
    35                          ;  documentation and they control prologue and epilogue macros that perform
    36                          ;  the necessary housekeeping functions for large memory model devices like
    37                          ;  the CY8C22045.
    38                          
    39  0001                    RAM_USE_CLASS_1:               equ 1   ; PUSH, POP & I/O access
    40  0002                    RAM_USE_CLASS_2:               equ 2   ; Indexed address mode on stack page
    41  0004                    RAM_USE_CLASS_3:               equ 4   ; Indexed address mode to any page
    42  0008                    RAM_USE_CLASS_4:               equ 8   ; Direct/Indirect address mode access
    43                          
    44                          ; ******* Hi Tech Specific *******
    45                          ; Turn on the expansion of all macros by default
    46                          IF (TOOLCHAIN & HITECH)
    47                          OPT EXPAND
    48                          ENDIF
    49                          ; ******* Page Pointer Manipulation Macros *******
    50                          ;
    51                          ;  ******* Page Pointer Manipulation Macros *******
    52                          ;
    53                          ;  Most of the following macros are conditionally compiled so they only
    54                          ;  produce code if the large memory model is selected.
    55                          
    56                             ;-----------------------------------------------
    57                             ;  Set Stack Page Macro
    58                             ;-----------------------------------------------
    59                             ;
    60                             ;  DESC: Modify STK_PP in the large or small memory Models.
    61                             ;
    62                             ; INPUT: Constant (e.g., SYSTEM_STACK_PAGE) that specifies the RAM page on
    63                             ;        which stack operations like PUSH and POP store and retrieve their
    64                             ;        data
    65                             ;
    66                             ;  COST: 8 instruction cycles (in LMM only)
    67                          
    68                             macro RAM_SETPAGE_STK( PG_NUMBER )
    69                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    70                                mov reg[STK_PP], @PG_NUMBER
    71                             ENDIF
    72  3D73                       endm
    73                          
    74                             ;-----------------------------------------------
    75                             ;  Set Current Page Macro
    76                             ;-----------------------------------------------
    77                             ;
    78                             ;  DESC: Modify CUR_PP in the large or small memory Models.
    79                             ;
    80                             ; INPUT: Constant value (e.g., >bFoo) for the RAM page number used in
    81                             ;        calculation of effective direct-mode address operands.
    82                             ;
    83                             ;  COST: 8 instruction cycles (in LMM only)
    84                          
    85                             macro RAM_SETPAGE_CUR( PG_NUMBER )
    86                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    87                                mov reg[CUR_PP], @PG_NUMBER
    88                             ENDIF
    89  3D73                       endm
    90                          
    91                             ;-----------------------------------------------
    92                             ;  Set Index Page Macro
    93                             ;-----------------------------------------------
    94                             ;
    95                             ;  DESC: Modify IDX_PP in the large or small emory Models.
    96                             ;
    97                             ; INPUT: Constant value (e.g., >caFoo) for the RAM page number used in
    98                             ;         calculation of effective index-mode address operands.
    99                             ;
   100                             ;  COST: 8 instruction cycles (in LMM only)
   101                          
   102                             macro RAM_SETPAGE_IDX( PG_NUMBER )
   103                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   104                                mov reg[IDX_PP], @PG_NUMBER
   105                             ENDIF
   106  3D73                       endm
   107                          
   108                             ;-----------------------------------------------
   109                             ;  Set MVI Read Page Macro
   110                             ;-----------------------------------------------
   111                             ;
   112                             ;  DESC: Modify MVR_PP in the large or small memory Models.
   113                             ;
   114                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   115                             ;        calculation of indirect address operands used in the
   116                             ;        "mvi A, [pFoo]" instructions.
   117                             ;
   118                             ;  COST: 8 instruction cycles (in LMM only)
   119                          
   120                             macro RAM_SETPAGE_MVR( PG_NUMBER )
   121                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   122                                mov reg[MVR_PP], @PG_NUMBER
   123                             ENDIF
   124  3D73                       endm
   125                          
   126                             ;-----------------------------------------------
   127                             ;  Set MVI Write Page Macro
   128                             ;-----------------------------------------------
   129                             ;
   130                             ;  DESC: Modify MVW_PP in the large or small memory Models.
   131                             ;
   132                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   133                             ;        calculation of indirect address operands used in the
   134                             ;        "mvi [pFoo], A" instructions.
   135                             ;
   136                             ;  COST: 8 instruction cycles (in LMM only)
   137                          
   138                             macro RAM_SETPAGE_MVW( PG_NUMBER )
   139                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   140                                mov reg[MVW_PP], @PG_NUMBER
   141                             ENDIF
   142  3D73                       endm
   143                          
   144                             ;-----------------------------------------------
   145                             ;  Force Index Page Pointer to Stack Page
   146                             ;-----------------------------------------------
   147                             ;
   148                             ;  DESC: Map index-mode operands onto the stack page by modifying IDX_PP.
   149                             ;        See also RAM_LOCK_INDEX_TO_STACKPAGE.
   150                             ;
   151                             ; INPUT: None
   152                             ;
   153                             ;  COST: 8 instruction cycles (in LMM only)
   154                          
   155                             macro RAM_SETPAGE_IDX2STK
   156                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   157                                IF ( SYSTEM_MULTIPAGE_STACK )
   158                                   mov   A, reg[STK_PP]
   159                                   mov   reg[IDX_PP], A
   160                                ELSE
   161                                   RAM_SETPAGE_IDX SYSTEM_STACK_PAGE
   162                                ENDIF
   163                             ENDIF
   164  3D73                       endm
   165                          
   166                             ;-----------------------------------------------
   167                             ;  Change Memory Mode
   168                             ;-----------------------------------------------
   169                             ;
   170                             ;  DESC: Modify FLAG_PAGEMODE bits in the large and small memory Models.
   171                             ;
   172                             ; INPUT: Constant value for PGMODE bitfield of CPU Flag register, F.
   173                             ;        See FLAG_PGMODE_{x} constants in M8C.INC.
   174                             ;
   175                             ;  COST: 8 instruction cycles (in LMM only)
   176                          
   177                             macro RAM_CHANGE_PAGE_MODE( MODE )
   178                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   179                                and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
   180                                or    F,  FLAG_PGMODE_MASK & @MODE
   181                             ENDIF
   182  3D73                       endm
   183                          
   184                             ;-----------------------------------------------
   185                             ;  Set Large Memory Model Native Paging Mode
   186                             ;-----------------------------------------------
   187                             ;
   188                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   189                             ;        paging mode *IFF* a simple "OR" is guaranteed to work---for
   190                             ;        example, in an ISR, when the PGMODE bits have been cleared
   191                             ;        to zero. If a simple "OR" is not guaranteed to work, use
   192                             ;        the slower RAM_RESTORE_NATIVE_PAGING instead.
   193                             ;
   194                             ; INPUT: none
   195                             ;
   196                             ;  COST: 4 instruction cycles (in LMM only)
   197                          
   198                             macro RAM_SET_NATIVE_PAGING
   199                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   200                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   201                                or    F,  FLAG_PGMODE_11b            ; LMM w/ IndexPage<==>StackPage
   202                             ENDIF ;  PGMODE LOCKED
   203                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   204                                or    F,  FLAG_PGMODE_10b            ; LMM with independent IndexPage
   205                             ENDIF ; PGMODE FREE
   206                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   207  3D73                       endm
   208                          
   209                             ;-----------------------------------------------
   210                             ; Restore Large Memory Model Native Paging Mode
   211                             ;-----------------------------------------------
   212                             ;
   213                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   214                             ;        paging mode. Always works because it clears the PGMODE bits
   215                             ;        before OR-ing in the new ones. See RAM_RESTORE_NATIVE_PAGING
   216                             ;        for a faster method.
   217                             ;
   218                             ; INPUT: none
   219                             ;
   220                             ;  COST: 8 instruction cycles (in LMM only)
   221                          
   222                             macro RAM_RESTORE_NATIVE_PAGING
   223                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   224                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   225                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_11b ; LMM w/ IndexPage<==>StackPage
   226                             ENDIF ;  PGMODE LOCKED
   227                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   228                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b ; LMM with independent IndexPage
   229                             ENDIF ; PGMODE FREE
   230                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   231  3D73                       endm
   232                          
   233                             ;-----------------------------------------------
   234                             ; Force indexed addr mode operands to Stack Pg
   235                             ;-----------------------------------------------
   236                             ;
   237                             ;  DESC: Force instructions that use indexed address mode to reference the
   238                             ;        stack page (as defined by STK_PP). This macro sets the "Indexed
   239                             ;        Stack Mode" bit (LSB) of the PGMODE bit field in the CPU Flag
   240                             ;        register, F. (See also RAM_SETPAGE_IDX2STK, above.)
   241                             ;
   242                             ; INPUT: none
   243                             ;
   244                             ;  COST: 4 instruction cycles (in LMM only)
   245                          
   246                             macro RAM_X_POINTS_TO_STACKPAGE
   247                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   248                                or   F, FLAG_PGMODE_01b
   249                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   250  3D73                       endm
   251                          
   252                             ;-----------------------------------------------
   253                             ;  Force indexed addr mode operands to Index Pg
   254                             ;-----------------------------------------------
   255                             ;
   256                             ;  DESC: Permit instructions that use indexed address mode to reference page
   257                             ;        zero or the page pointed to by the IDX_PP register, depending on the
   258                             ;        setting of the MSb (or "Direct Page Mode" bit) of the PGMODE bits
   259                             ;        in the CPU Flag register, F. (This macro clears the PGMODE LSb.)
   260                             ;
   261                             ; INPUT: none
   262                             ;
   263                             ;  COST: 4 instruction cycles (in LMM only)
   264                          
   265                             macro RAM_X_POINTS_TO_INDEXPAGE
   266                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   267                                and  F, ~FLAG_PGMODE_01b
   268                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   269  3D73                       endm
   270                          
   271                             ;-----------------------------------------------
   272                             ;  Function Prologue
   273                             ;-----------------------------------------------
   274                             ;
   275                             ;  Prologue for functions that run in the LMM and SMM.
   276                             ;
   277                          
   278                             macro RAM_PROLOGUE( ACTUAL_CLASS )
   279                          
   280                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   281                             ; Nothing to do
   282                             ENDIF ; RAM_USE_CLASS_1
   283                          
   284                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   285                                IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   286                                   RAM_X_POINTS_TO_STACKPAGE         ; exit native paging mode!
   287                                ENDIF
   288                             ENDIF ; RAM_USE_CLASS_2
   289                          
   290                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   291                                IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   292                                   RAM_X_POINTS_TO_INDEXPAGE         ; exit native paging mode!
   293                                ENDIF
   294                             ENDIF ; RAM_USE_CLASS_3
   295                          
   296                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   297                             ; Nothing to do
   298                             ENDIF ; RAM_USE_CLASS_4
   299                          
   300  3D73                       endm
   301                          
   302                             ;-----------------------------------------------
   303                             ;  Function Epilogue
   304                             ;-----------------------------------------------
   305                             ;
   306                             ;  Prologue for functions that run in the LMM and SMM.
   307                             ;
   308                          
   309                             macro RAM_EPILOGUE( ACTUAL_CLASS )
   310                          
   311                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   312                             ; Nothing to do
   313                             ENDIF ; RAM_USE_CLASS_1
   314                          
   315                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   316                                RAM_RESTORE_NATIVE_PAGING
   317                             ENDIF ; RAM_USE_CLASS_2
   318                          
   319                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   320                                RAM_RESTORE_NATIVE_PAGING
   321                             ENDIF ; RAM_USE_CLASS_3
   322                          
   323                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   324                             ; Nothing to do
   325                             ENDIF ; RAM_USE_CLASS_4
   326                          
   327  3D73                       endm
   328                          
   329                             ;-----------------------------------------------
   330                             ;  Preserve Register
   331                             ;-----------------------------------------------
   332                             ;
   333                             ;  DESC: Preserve a register value on the stack
   334                             ;
   335                             ; INPUT: Name or address of register in I/O Space
   336                             ;        The I/O bank is an implicit parameter. That is, this function will
   337                             ;        Access the I/O bank currently specified by the CPU Flag register.
   338                             ;
   339                             ;  USES: CPU 'A' register
   340                             ;
   341                             ;  COST: 9 instruction cycles
   342                          
   343                             macro REG_PRESERVE( IOReg )
   344                             mov   A, reg[ @IOReg ]
   345                             push  A
   346  3D73                       endm
   347                          
   348                             ;-----------------------------------------------
   349                             ;  Restore Register
   350                             ;-----------------------------------------------
   351                             ;
   352                             ;  DESC: Restore a register value from the stack
   353                             ;
   354                             ; INPUT: Name or address of register in I/O Space
   355                             ;        The I/O bank is an implicit parameter. That is, this function will
   356                             ;        Access the I/O bank currently specified by the CPU Flag register.
   357                             ;
   358                             ;  USES: CPU 'A' register
   359                             ;
   360                             ;  COST: 10 instruction cycles
   361                          
   362                             macro REG_RESTORE( IOReg )
   363                             pop   A
   364                             mov   reg[ @IOReg ], A
   365  3D73                       endm
   366                          
   367                             ;-----------------------------------------------
   368                             ;  Preserve Volatile Page Pointer Registers
   369                             ;-----------------------------------------------
   370                             ;
   371                             ;  DESC: Invoked by ISRs before switching to the LMM mode and calling
   372                             ;        functions that require on it.
   373                             ;
   374                             ; INPUT: none
   375                             ;
   376                             ;  USES: CPU 'A' register
   377                             ;
   378                             ;  COST: 45 instruction cycles (in LMM only)
   379                          
   380                             macro ISR_PRESERVE_PAGE_POINTERS
   381                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   382                                REG_PRESERVE CUR_PP
   383                                REG_PRESERVE IDX_PP
   384                                REG_PRESERVE MVR_PP
   385                                REG_PRESERVE MVW_PP
   386                             ENDIF
   387  3D73                       endm
   388                          
   389                             ;-----------------------------------------------
   390                             ;  Restore Volatile Page Pointer Registers
   391                             ;-----------------------------------------------
   392                             ;
   393                             ;  DESC: Undo for RAM_PRESERVE_PAGE_POINTERS macro. Invoked by ISRs after
   394                             ;        calling functions that run in the LMM mode and before executing
   395                             ;        the RETI instruction.
   396                             ;
   397                             ; INPUT: none
   398                             ;
   399                             ;  USES: CPU 'A' register
   400                             ;
   401                             ;  COST: 50 instruction cycles (in LMM only)
   402                          
   403                             macro ISR_RESTORE_PAGE_POINTERS
   404                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   405                                REG_RESTORE MVW_PP
   406                                REG_RESTORE MVR_PP
   407                                REG_RESTORE IDX_PP
   408                                REG_RESTORE CUR_PP
   409                             ENDIF
   410                             endm
      + 3D73                    
      + 3D73                    ; end of file Memory.inc
      + 3D73                    ;;*****************************************************************************
;;******************
      +                         ***********************************************************
;;  FILENAME: SAR10.inc
;;   Version: 2.
      +                         00, Updated on 2013/5/19 at 10:39:9
;;  Generated by PSoC Designer 5.4.2946
;;
;;  DESCRIPTION: Asse
      +                         mbler declarations for the SAR10 user module interface
;;-------------------------------------------
      +                         ----------------------------------
;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved
      +                         .
;;*****************************************************************************
;;****************
      +                         *************************************************************
   824                          
   825                          ; end of file m8c.inc
    29  00C0                    FLAG_PGMODE_MASK:  equ 0C0h     ; Paging control for > 256 bytes of RAM
    30  0000                    FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
    31  0040                    FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
    32  0080                    FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
    33  00C0                    FLAG_PGMODE_3:     equ 0C0h       ; Direct to CUR_PP page, indexed to STK_PP page
    34  0000                    FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
    35  0040                    FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
    36  0080                    FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
    37  00C0                    FLAG_PGMODE_11b:   equ 0C0h       ; Same as PGMODE_3
    38  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    39  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    40  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    41  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    42  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    43                          
    44                          
    45                          ;;=============================================================================
    46                          ;;      Register Space, Bank 0
    47                          ;;=============================================================================
    48                          
    49                          ;------------------------------------------------
    50                          ;  Port Registers
    51                          ;  Note: Also see this address range in Bank 1.
    52                          ;------------------------------------------------
    53                          ; Port 0
    54  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    55  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    56  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    57  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    58                          ; Port 1
    59  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    60  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    61  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    62  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    63                          ; Port 2
    64  0008                    PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
    65  0009                    PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
    66  000A                    PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
    67  000B                    PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
    68                          ; Port 3
    69  000C                    PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
    70  000D                    PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
    71  000E                    PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
    72  000F                    PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
    73                          ; Port 4
    74  0010                    PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
    75  0011                    PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
    76  0012                    PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
    77  0013                    PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
    78                          
    79                          ;------------------------------------------------
    80                          ;  Digital PSoC(tm) block Registers
    81                          ;  Note: Also see this address range in Bank 1.
    82                          ;------------------------------------------------
    83                          ; Digital PSoC block 00, Basic Type C
    84  0020                    DBC00DR0:     equ 20h          ; data register 0                          (#)
    85  0021                    DBC00DR1:     equ 21h          ; data register 1                          (W)
    86  0022                    DBC00DR2:     equ 22h          ; data register 2                          (RW)
    87  0023                    DBC00CR0:     equ 23h          ; control & status register 0              (#)
    88                          
    89                          ; Digital PSoC block 01, Basic Type C
    90  0024                    DBC01DR0:     equ 24h          ; data register 0                          (#)
    91  0025                    DBC01DR1:     equ 25h          ; data register 1                          (W)
    92  0026                    DBC01DR2:     equ 26h          ; data register 2                          (RW)
    93  0027                    DBC01CR0:     equ 27h          ; control & status register 0              (#)
    94                          
    95                          ; Digital PSoC block 02, Communications Type C
    96  0028                    DCC02DR0:     equ 28h          ; data register 0                          (#)
    97  0029                    DCC02DR1:     equ 29h          ; data register 1                          (W)
    98  002A                    DCC02DR2:     equ 2Ah          ; data register 2                          (RW)
    99  002B                    DCC02CR0:     equ 2Bh          ; control & status register 0              (#)
   100                          
   101                          ; Digital PSoC block 03, Communications Type C
   102  002C                    DCC03DR0:     equ 2Ch          ; data register 0                          (#)
   103  002D                    DCC03DR1:     equ 2Dh          ; data register 1                          (W)
   104  002E                    DCC03DR2:     equ 2Eh          ; data register 2                          (RW)
   105  002F                    DCC03CR0:     equ 2Fh          ; control & status register 0              (#)
   106                          
   107                          ; Digital PSoC block 10, Basic Type C
   108  0030                    DBC10DR0:     equ 30h          ; data register 0                          (#)
   109  0031                    DBC10DR1:     equ 31h          ; data register 1                          (W)
   110  0032                    DBC10DR2:     equ 32h          ; data register 2                          (RW)
   111  0033                    DBC10CR0:     equ 33h          ; control & status register 0              (#)
   112                          
   113                          ; Digital PSoC block 11, Basic Type C
   114  0034                    DBC11DR0:     equ 34h          ; data register 0                          (#)
   115  0035                    DBC11DR1:     equ 35h          ; data register 1                          (W)
   116  0036                    DBC11DR2:     equ 36h          ; data register 2                          (RW)
   117  0037                    DBC11CR0:     equ 37h          ; control & status register 0              (#)
   118                          
   119                          ; Digital PSoC block 12, Communications Type C
   120  0038                    DCC12DR0:     equ 38h          ; data register 0                          (#)
   121  0039                    DCC12DR1:     equ 39h          ; data register 1                          (W)
   122  003A                    DCC12DR2:     equ 3Ah          ; data register 2                          (RW)
   123  003B                    DCC12CR0:     equ 3Bh          ; control & status register 0              (#)
   124                          
   125                          ; Digital PSoC block 13, Communications Type C
   126  003C                    DCC13DR0:     equ 3Ch          ; data register 0                          (#)
   127  003D                    DCC13DR1:     equ 3Dh          ; data register 1                          (W)
   128  003E                    DCC13DR2:     equ 3Eh          ; data register 2                          (RW)
   129  003F                    DCC13CR0:     equ 3Fh          ; control & status register 0              (#)
   130                          
   131                          ;-------------------------------------
   132                          ;  Analog Control Registers
   133                          ;-------------------------------------
   134  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
   135  00C0                    AMX_IN_ACI3:          equ C0h    ; MASK: column 3 input mux
   136  0030                    AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
   137  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
   138  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
   139                          
   140  0061                    AMUX_CFG:      equ 61h          ; Analog MUX Configuration
   141  0030                    AMUX_CFG_INTCAP:       equ 30h    ;
   142  000E                    AMUX_CFG_MUXCLK:  	  equ 0Eh	 ;
   143  0001                    AMUX_CFG_EN:		  	  equ 01h	 ;
   144                          
   145                          ; old declarations DO NOT USE
   146  0061                    AMUXCFG:      equ 61h          ; Analog MUX Configuration
   147  0030                    AMUXCFG_INTCAP:       equ 30h    ;
   148  000E                    AMUXCFG_MUXCLK:  	  equ 0Eh	 ;
   149  0001                    AMUXCFG_EN:		  	  equ 01h	 ;
   150                          
   151  0062                    PWM_CR:       equ 62h          ; Pulse-Width Modulator Control
   152  0038                    PWM_CR_HIGH:          equ 38h    ; MASK: PWM high time
   153  0006                    PWM_CR_LOW:           equ 06h	 ; MASK: PWM low time
   154  0001                    PWM_CR_EN:            equ 01h	 ; MASK: Enable/Disable PWM function
   155                          
   156  0063                    ARF_CR:       equ 63h          ; Analog Reference Control
   157                          
   158  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus Register           (#)
   159  0080                    CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
   160  0040                    CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
   161  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
   162  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
   163  0008                    CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
   164  0004                    CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
   165  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
   166  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   167                          
   168  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   169  0020                    CMP_CR1_CLDIS1:       equ 20h    ; MASK: Column 1 comparator output latch
   170  0010                    CMP_CR1_CLDIS0:	      equ 10h    ; MASK: Column 0 comparator output latch
   171                          
   172  0068                    ADC0_CR:      equ 68h          ; Analog Column 0 Configuration
   173  0080                    ADC0_CR_CMPST:        equ 80h    ;
   174  0040                    ADC0_CR_LOREN:        equ 40h    ;
   175  0020                    ADC0_CR_SHEN:         equ 20h    ;
   176  0008                    ADC0_CR_CBSRC:        equ 08h    ;
   177  0004                    ADC0_CR_ADCM:         equ 04h    ;
   178  0001                    ADC0_CR_EN:	          equ 01h    ;
   179                          
   180  0069                    ADC1_CR:      equ 69h          ; Analog Column 1 Configuration
   181  0080                    ADC1_CR_CMPST:        equ 80h    ;
   182  0040                    ADC1_CR_LOREN:        equ 40h    ;
   183  0020                    ADC1_CR_SHEN:         equ 20h    ;
   184  0008                    ADC1_CR_CBSRC:        equ 08h    ;
   185  0004                    ADC1_CR_ADCM:         equ 04h    ;
   186  0001                    ADC1_CR_EN:	          equ 01h    ;
   187                          
   188                          ; Continuous Time PSoC block Type E Row 0 Col 0
   189  0072                    ACE00CR1:     equ 72h          ; Control register 1                       (RW)
   190  0073                    ACE00CR2:     equ 73h          ; Control register 2                       (RW)
   191                          
   192                          ; Continuous Time PSoC block Type E Row 0 Col 1
   193  0076                    ACE01CR1:     equ 76h          ; Control register 1                       (RW)
   194  0077                    ACE01CR2:     equ 77h          ; Control register 2                       (RW)
   195                          
   196                          ; Switched Cap PSoC blockType E Row 1 Col 0
   197  0080                    ASE10CR0:     equ 80h          ; Control register 0                       (RW)
   198                          
   199                          ; Switched Cap PSoC blockType E Row 1 Col 1
   200  0084                    ASE11CR0:     equ 84h          ; Control register 0                       (RW)
   201                          
   202                          ;-----------------------------------------------
   203                          ;  Global General Purpose Data Registers
   204                          ;-----------------------------------------------
   205  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   206  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   207  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   208  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   209                          
   210                          ;------------------------------------------------
   211                          ;  Row Digital Interconnects
   212                          ;
   213                          ;  Note: the following registers are mapped into
   214                          ;  both register bank 0 AND register bank 1.
   215                          ;------------------------------------------------
   216                          
   217  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   218  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   219  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   220  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   221  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   222  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   223  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   224                          
   225  00B8                    RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
   226  00B9                    RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
   227  00BA                    RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
   228  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   229  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   230  00BD                    RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
   231  00BE                    RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
   232                          
   233                          ;-----------------------------------------------
   234                          ;  Ram Page Pointers
   235                          ;-----------------------------------------------
   236  00D0                    CUR_PP:      equ 0D0h           ; Current   Page Pointer
   237  00D1                    STK_PP:      equ 0D1h           ; Stack     Page Pointer
   238  00D3                    IDX_PP:      equ 0D3h           ; Index     Page Pointer
   239  00D4                    MVR_PP:      equ 0D4h           ; MVI Read  Page Pointer
   240  00D5                    MVW_PP:      equ 0D5h           ; MVI Write Page Pointer
   241                          
   242                          ;------------------------------------------------
   243                          ;  I2C Configuration Registers
   244                          ;------------------------------------------------
   245  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   246  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   247  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   248  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   249  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   250  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   251  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   252  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   253  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   254  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   255                          
   256  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   257  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   258  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   259  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   260  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   261  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   262  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   263  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   264  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   265                          
   266  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   267                          
   268  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   269  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   270  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   271  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   272  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   273                          
   274                          ;------------------------------------------------
   275                          ;  System and Global Resource Registers
   276                          ;------------------------------------------------
   277  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   278                                                         ; Use INT_MSK0 bit field masks
   279  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   280                                                         ; Use INT_MSK1 bit field masks
   281  00DC                    INT_CLR2:     equ 0DCh          ; Interrupt Clear Register 2               (RW)
   282                                                         ; Use INT_MSK2 bit field masks
   283  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   284                                                         ; Use INT_MSK3 bit field masks
   285                          
   286  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   287  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   288  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   289                          
   290  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   291  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   292  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   293  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   294  0010                    INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
   295  0008                    INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
   296  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   297  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   298  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   299                          
   300  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   301  0080                    INT_MSK1_DCC13:            equ 80h ; MASK: enable/disable DCC13 block interrupt
   302  0040                    INT_MSK1_DCC12:            equ 40h ; MASK: enable/disable DCC12 block interrupt
   303  0020                    INT_MSK1_DBC11:            equ 20h ; MASK: enable/disable DBC11 block interrupt
   304  0010                    INT_MSK1_DBC10:            equ 10h ; MASK: enable/disable DBC10 block interrupt
   305  0008                    INT_MSK1_DCC03:            equ 08h ; MASK: enable/disable DCC03 block interrupt
   306  0004                    INT_MSK1_DCC02:            equ 04h ; MASK: enable/disable DCC02 block interrupt
   307  0002                    INT_MSK1_DBC01:            equ 02h ; MASK: enable/disable DBC01 block interrupt
   308  0001                    INT_MSK1_DBC00:            equ 01h ; MASK: enable/disable DBC00 block interrupt
   309                          
   310  00DF                    INT_MSK2:     equ DFh			; Custom block Mask Register			   (RW)
   311  0010                    INT_MSK2_SARADC:           equ 10h ; MASK: enable/disable SARADC block interrupt
   312  0020                    INT_MSK2_CSD0:             equ 20h ; MASK: enable/disable CSD0 block interrupt
   313  0040                    INT_MSK2_CSD1:             equ 40h ; MASK: enable/disable CSD1 block interrupt
   314  0080                    INT_MSK2_RTC:              equ 80h ; MASK: enable/disable RTC block interrupt
   315                          
   316  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   317  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   318                          
   319                          ;------------------------------------------------------
   320                          ;  MAC Registers
   321                          ;------------------------------------------------------
   322                          
   323  00E8                    MUL0_X:       equ 0E8h          ; Multiply Input X Register                (W)
   324  00E9                    MUL0_Y:       equ 0E9h          ; Multiply Input Y Register                (W)
   325  00EA                    MUL0_DH:      equ 0EAh          ; Multiply Result High Byte Register       (R)
   326  00EB                    MUL0_DL:      equ 0EBh          ; Multiply Result Low Byte Register        (R)
   327                          
   328  00EC                    ACC0_DR1:     equ 0ECh          ; Accumulator Data Register 1              (RW)
   329  00ED                    ACC0_DR0:     equ 0EDh          ; Accumulator Data Register 0              (RW)
   330  00EE                    ACC0_DR3:     equ 0EEh          ; Accumulator Data Register 3              (RW)
   331  00EF                    ACC0_DR2:     equ 0EFh          ; Accumulator Data Register 2              (RW)
   332                          
   333                          ; DECIMATOR Control Registers
   334  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   335  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   336                          
   337                          ;------------------------------------------------------
   338                          ;  System Status and Control Registers
   339                          ;
   340                          ;  Note: The following registers are mapped into both
   341                          ;        register bank 0 AND register bank 1.
   342                          ;------------------------------------------------------
   343  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   344                                                             ; Use FLAG_ masks defined at top of file
   345                          
   346  00FD                    DAC_D:        equ 0FDh		   ; DAC Data Register                        (RW)
   347                          
   348  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   349  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: flag, Internal Reset Status bit
   350  0010                    CPU_SCR1_SLIMO:         equ 10h	   ; MASK: Slow IMO (internal main osc) enable
   351  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   352  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   353  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   354                          
   355  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   356  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   357  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   358  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   359  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   360  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   361                          
   362                          ;------------------------------------------------------
   363                          ;  Neon Capsense Digital Control Registers
   364                          ;------------------------------------------------------
   365  0050                    CSD0_DR0_L:				equ 50h		; Capsense 0 data low 0				(RW)
   366  0054                    CSD0_DR0_H:				equ 54h		; Capsense 0 data high 0			(RW)
   367  0058                    CSD1_DR0_L:				equ 58h		; Capsense 1 data low 0				(RW)
   368  005C                    CSD1_DR0_H:				equ 5Ch		; Capsense 1 data high 0			(RW)
   369  0051                    CSD0_DR1_L:				equ 51h		; Capsense 0 data low 1				(RW)
   370  0055                    CSD0_DR1_H:				equ 55h		; Capsense 0 data high 1			(RW)
   371  0059                    CSD1_DR1_L:				equ 59h		; Capsense 1 data low 1				(RW)
   372  005D                    CSD1_DR1_H:				equ 5Dh		; Capsense 1 data high 1			(RW)
   373  0052                    CSD0_CNT_L:				equ 52h		; Capsense 0 counter low			(RW)
   374  0056                    CSD0_CNT_H:				equ 56h		; Capsense 0 counter high			(RW)
   375  005A                    CSD1_CNT_L:				equ 5Ah		; Capsense 1 counter low			(RW)
   376  005E                    CSD1_CNT_H:				equ	5Eh		; Capsense 1 counter high			(RW)
   377  0053                    CSD0_CR0:				equ 53h		; Capsense 0 control 0				(RW)
   378  005B                    CSD1_CR0:				equ 5Bh		; Capsense 1 control 0				(RW)
   379  0057                    CSD0_CR1:				equ 57h		; Capsense 0 control 1				(RW)
   380  005F                    CSD1_CR1:				equ 5Fh		; Capsense 1 control 1				(RW)
   381                          
   382                          ;------------------------------------------------------
   383                          ;  Neon Analog Registers
   384                          ;------------------------------------------------------
   385  0065                    ASY_CR:					equ 65h		; Analog Synchronization Control	(RW)
   386  006A                    ADC_DH:					equ 6Ah		; ADC data high						(RW)
   387  006B                    ADC_DL:					equ 6Bh		; ADC data low						(RW)
   388  00C8                    PWMVREF0:				equ C8h		; PWM Voltage Reference 0			(RW)
   389  00C9                    PWMVREF1:				equ C9h		; PWM Voltage Reference 1			(RW)
   390  00CB                    PWMSRC:					equ CBh		; PWM Source						(RW)
   391  00CA                    IDACMODE:				equ CAh		; IDAC Mode							(RW)
   392  00FC                    IDACR_D:				equ FCh		; Analog Mux DAC data 0				(RW)
   393  00FD                    IDACL_D:				equ FDh		; Analog Mux DAC data 1				(RW)
   394                          
   395                          ;------------------------------------------------------
   396                          ;  Neon Digital Registers
   397                          ;------------------------------------------------------
   398  00B7                    RDI0DSM:				equ B7h		; Row Digital Interconnect input select 0	(RW)
   399  00BF                    RDI1DSM:				equ BFh		; Row Digital Interconnect input select 1	(RW)
   400                          
   401                          ;------------------------------------------------------
   402                          ;  Neon Test Registers
   403                          ;------------------------------------------------------
   404  00CC                    TSCR0:					equ CCh		; Tsource 0							(RW)
   405  00CD                    TSCMPH:					equ CDh		; TSCMP high						(RW)
   406  00CE                    TSCMPL:					equ CEh		; TSCMP low							(RW)
   407  00CF                    TSCR1:					equ CFh		; Tsource 1							(RW)
   408                          
   409                          ;;=============================================================================
   410                          ;;      Register Space, Bank 1
   411                          ;;=============================================================================
   412                          
   413                          ;------------------------------------------------
   414                          ;  Port Registers
   415                          ;  Note: Also see this address range in Bank 0.
   416                          ;------------------------------------------------
   417                          ; Port 0
   418  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   419  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   420  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   421  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   422                          
   423                          ; Port 1
   424  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   425  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   426  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   427  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   428                          
   429                          ; Port 2
   430  0008                    PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
   431  0009                    PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
   432  000A                    PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
   433  000B                    PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
   434                          
   435                          ; Port 3
   436  000C                    PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
   437  000D                    PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
   438  000E                    PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
   439  000F                    PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
   440                          
   441                          ; Port 4
   442  0010                    PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
   443  0011                    PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
   444  0012                    PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
   445  0013                    PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
   446                          
   447                          ;------------------------------------------------
   448                          ;  Digital PSoC(tm) block Registers
   449                          ;  Note: Also see this address range in Bank 0.
   450                          ;------------------------------------------------
   451                          
   452                          ; Digital PSoC block 00, Basic Type C
   453  0020                    DBC00FN:      equ 20h          ; Function Register                        (RW)
   454  0021                    DBC00IN:      equ 21h          ;    Input Register                        (RW)
   455  0022                    DBC00OU:      equ 22h          ;   Output Register                        (RW)
   456  0023                    DBC00CR1:     equ 23h          ;   control & status register 1            (RW)
   457                          
   458                          ; Digital PSoC block 01, Basic Type C
   459  0024                    DBC01FN:      equ 24h          ; Function Register                        (RW)
   460  0025                    DBC01IN:      equ 25h          ;    Input Register                        (RW)
   461  0026                    DBC01OU:      equ 26h          ;   Output Register                        (RW)
   462  0027                    DBC01CR1:     equ 27h          ;   control & status register 1            (RW)
   463                          
   464                          ; Digital PSoC block 02, Communications Type C
   465  0028                    DCC02FN:      equ 28h          ; Function Register                        (RW)
   466  0029                    DCC02IN:      equ 29h          ;    Input Register                        (RW)
   467  002A                    DCC02OU:      equ 2Ah          ;   Output Register                        (RW)
   468  002B                    DBC02CR1:     equ 2Bh          ;   control & status register 1            (RW)
   469                          
   470                          ; Digital PSoC block 03, Communications Type C
   471  002C                    DCC03FN:      equ 2Ch          ; Function Register                        (RW)
   472  002D                    DCC03IN:      equ 2Dh          ;    Input Register                        (RW)
   473  002E                    DCC03OU:      equ 2Eh          ;   Output Register                        (RW)
   474  0029                    DBC03CR1:     equ 29h          ;   control & status register 1            (RW)
   475                          
   476                          ; Digital PSoC block 10, Basic Type C
   477  0030                    DBC10FN:      equ 30h          ; Function Register                        (RW)
   478  0031                    DBC10IN:      equ 31h          ;    Input Register                        (RW)
   479  0032                    DBC10OU:      equ 32h          ;   Output Register                        (RW)
   480  0033                    DBC10CR1:     equ 33h          ;   control & status register 1            (RW)
   481                          
   482                          ; Digital PSoC block 11, Basic Type C
   483  0034                    DBC11FN:      equ 34h          ; Function Register                        (RW)
   484  0035                    DBC11IN:      equ 35h          ;    Input Register                        (RW)
   485  0036                    DBC11OU:      equ 36h          ;   Output Register                        (RW)
   486  0037                    DBC11CR1:     equ 37h          ;   control & status register 1            (RW)
   487                          
   488                          ; Digital PSoC block 12, Communications Type C
   489  0038                    DCC12FN:      equ 38h          ; Function Register                        (RW)
   490  0039                    DCC12IN:      equ 39h          ;    Input Register                        (RW)
   491  003A                    DCC12OU:      equ 3Ah          ;   Output Register                        (RW)
   492  003B                    DBC12CR1:     equ 3Bh          ;   control & status register 1            (RW)
   493                          
   494                          ; Digital PSoC block 13, Communications Type C
   495  003C                    DCC13FN:      equ 3Ch          ; Function Register                        (RW)
   496  003D                    DCC13IN:      equ 3Dh          ;    Input Register                        (RW)
   497  003E                    DCC13OU:      equ 3Eh          ;   Output Register                        (RW)
   498  003F                    DBC13CR1:     equ 3Fh          ;   control & status register 1            (RW)
   499                          
   500                          ;------------------------------------------------
   501                          ;  System and Global Resource Registers
   502                          ;  Note: Also see this address range in Bank 0.
   503                          ;------------------------------------------------
   504                          
   505  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   506  00C0                    CLK_CR0_ACOLUMN_3:    equ C0h    ; MASK: Specify clock for analog cloumn
   507  0030                    CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
   508  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   509  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   510                          
   511  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   512  0018                    CLK_CR1_ACLK1:        equ 18h    ; MASK: Digital PSoC block for analog source
   513  0003                    CLK_CR1_ACLK0:        equ 03h    ; MASK: Digital PSoC block for analog source
   514                          
   515  0003                    CLK_CR1_ACLK2:        equ 03h    ; Deprecated do not use
   516                          
   517  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   518  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   519                          
   520  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   521  000F                    AMD_CR0_AMOD0:        equ 0Fh    ; MASK: Modulation source for analog column 0
   522                          
   523  0064                    CMP_GO_EN:    equ 64h          ; Comparator Bus To Global Out Enable      (RW)
   524  0080                    CMP_GO_EN_GOO5:       equ 80h    ; MASK: Selected Col 1 signal to GOO5
   525  0040                    CMP_GO_EN_GOO1:       equ 40h    ; MASK: Selected Col 1 signal to GOO1
   526  0030                    CMP_GO_EN_SEL1:       equ 30h    ; MASK: Column 1 Signal Select
   527  0008                    CMP_GO_EN_GOO4:       equ 08h    ; MASK: Selected Col 0 signal to GOO4
   528  0004                    CMP_GO_EN_GOO0:       equ 04h    ; MASK: Selected Col 0 signal to GOO0
   529  0003                    CMP_GO_EN_SEL0:       equ 03h    ; MASK: Column 0 Signal Select
   530                          
   531  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   532  000F                    AMD_CR1_AMOD1:        equ 0Fh    ; MASK: Modulation ctrl for analog column 1
   533                          
   534  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   535  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   536  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   537                          
   538  006B                    CLK_CR3:      equ 6Bh          ; Analog Clock Source Control Register 3   (RW)
   539  0040                    CLK_CR3_SYS1:         equ 40h    ; MASK: Analog Clock 1 selection
   540  0030                    CLK_CR3_DIVCLK1:      equ 30h    ; MASK: Analog Clock 1 divider
   541  0004                    CLK_CR3_SYS0:         equ 04h    ; MASK: Analog Clock 0 selection
   542  0003                    CLK_CR3_DIVCLK0:      equ 03h    ; MASK: Analog Clock 0 divider
   543                          
   544                          ;------------------------------------------------
   545                          ;  Global Digital Interconnects
   546                          ;------------------------------------------------
   547                          
   548  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   549  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   550  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   551  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   552                          
   553  00A0                    GDI_O_IN_CR:  equ 0A0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   554  00A1                    GDI_E_IN_CR:  equ 0A1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   555  00A2                    GDI_O_OU_CR:  equ 0A2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   556  00A3                    GDI_E_OU_CR:  equ 0A3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   557                          
   558  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   559  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   560                          
   561                          ;------------------------------------------------
   562                          ;  Analog Mux Bus Port Enable Bits
   563                          ;------------------------------------------------
   564  00D8                    MUX_CR0:      equ 0D8h          ; Analog Mux Port 0 Bit Enables Register
   565  00D9                    MUX_CR1:      equ 0D9h          ; Analog Mux Port 1 Bit Enables Register
   566  00DA                    MUX_CR2:      equ 0DAh          ; Analog Mux Port 2 Bit Enables Register
   567  00DB                    MUX_CR3:      equ 0DBh          ; Analog Mux Port 3 Bit Enables Register
   568  00EC                    MUX_CR4:      equ 0ECh          ; Analog Mux Port 4 Bit Enables Register
   569                          
   570                          ;------------------------------------------------
   571                          ;  Clock and System Control Registers
   572                          ;------------------------------------------------
   573                          
   574  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   575  0080                    OSC_GO_EN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   576  0040                    OSC_GO_EN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   577  0020                    OSC_GO_EN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   578  0010                    OSC_GO_EN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   579  0008                    OSC_GO_EN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   580  0004                    OSC_GO_EN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   581  0002                    OSC_GO_EN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   582  0001                    OSC_GO_EN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   583                          
   584  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   585  0003                    OSC_CR4_VC3SEL:       equ 03h    ; MASK: System VC3 Clock source
   586                          
   587  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   588                          
   589  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   590  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   591  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   592  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   593  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   594  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   595  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   596  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   597  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   598  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   599  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   600  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   601  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   602  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   603  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   604  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   605  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   606  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   607                          
   608  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   609  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   610  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   611                          
   612  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   613  0080                    OSC_CR2_PLLGAIN:      equ 80h    ; MASK: High/Low gain
   614  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   615  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   616  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   617                          
   618  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   619  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   620  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   621  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   622  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   623  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   624  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   625  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   626                          
   627  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   628  0008                    VLT_CMP_NOWRITE:      equ 08h    ; MASK: Vcc below Flash Write level
   629  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   630  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   631  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   632                          
   633  00E5                    ADC0_TR:      equ 0E5h          ; ADC Column 0 Trim Register
   634  00E6                    ADC1_TR:      equ 0E6h          ; ADC Column 1 Trim Register
   635                          
   636  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   637  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   638  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   639  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   640                          
   641  00FA                    FLS_PR1:      equ 0FAh          ; Flash Program Register 1                 (RW)
   642  0003                    FLS_PR1_BANK:         equ 03h    ; MASK: Select Active Flash Bank
   643                          
   644  00FD                    DAC_CR0:       equ 0FDh          ; Analog Mux DAC Control Register 0
   645  00DC                    DAC_CR1:       equ 0DCh          ; Analog Mux DAC Control Register 1
   646  0008                    DAC_CR_IRANGE:        equ 08h    ; MASK: Sets the DAC Range low or high
   647  0006                    DAC_CR_OSCMODE:       equ 06h    ; MASK: Defines the reset mode for AMux
   648  0001                    DAC_CR_ENABLE:        equ 01h    ; MASK: Enable/Disable DAC function
   649                          
   650                          ;------------------------------------------------
   651                          ;  I2C Control Registers
   652                          ;------------------------------------------------
   653                          
   654  00AD                    I2C_ADDR:    equ 0ADh          ; I2C Address Register (RW)
   655                          
   656                          ;------------------------------------------------------
   657                          ;  Neon Analog Registers
   658                          ;------------------------------------------------------
   659  0053                    VDAC50CR0:		equ 53h			; V DAC5 control 0				(RW)
   660  0057                    VDAC51CR0:		equ 57h			; V DAC5 control 1				(RW)
   661  00A8                    ADC_CR0:		equ A8h			; ADC control 0					(RW)
   662  00A9                    ADC_CR1:		equ A9h			; ADC control 1					(RW)
   663  00AA                    ADC_CR2:		equ AAh			; ADC control 2					(RW)
   664  00AB                    ADC_CR3TRIM:	equ ABh			; ADC control 3					(RW)
   665  00AC                    ADC_CR4:		equ ACh			; ADC control 4					(RW)
   666  00E7                    VDAC_TRIM:		equ E7h			; V DAC trim					(RW)
   667                          
   668                          ;------------------------------------------------------
   669                          ;  Neon Current Sense CMP Registers
   670                          ;------------------------------------------------------
   671  0050                    CMP0CR1:		equ 50h			; CMP0 control 1				(RW)
   672  0051                    CMP0CR2:		equ 51h			; CMP0 control 2				(RW)
   673  0054                    CMP1CR1:		equ 54h			; CMP1 control 1				(RW)
   674  0055                    CMP1CR2:		equ 55h			; CMP1 control 2				(RW)
   675  0058                    CSCMPCR0:		equ 58h			; CSCMP control 0				(RW)
   676  0059                    CSCMPGOEN:		equ 59h			; CSCMO global out enable		(RW)
   677  005A                    CSLUTCR0:		equ 5Ah			; CSLUT control 0				(RW)
   678  005B                    CMPCOLMUX:		equ 5Bh			; CMP Column Mux				(RW)
   679  005C                    CMPPWMCR:		equ 5Ch			; CMP PWM control				(RW)
   680  005D                    CMPFLTCR:		equ 5Dh			; CMP filter control			(RW)
   681  005E                    CMPCLK1:		equ 5Eh			; CMP clock 1					(RW)
   682  005F                    CMPCLK0:		equ 5Fh			; CMP clock 0					(RW)
   683                          
   684                          ;------------------------------------------------------
   685                          ;  Neon Real Time Clock Registers
   686                          ;------------------------------------------------------
   687  00A4                    RTCH:			equ A4h			; Real time current hour		(RW)
   688  00A5                    RTCM:			equ A5h			; Real time current minute		(RW)
   689  00A6                    RTCS:			equ A6h			; Real time current second		(RW)
   690  00A7                    RTCCR:			equ A7h			; Real time clock control		(RW)
   691                          
   692                          ;------------------------------------------------------
   693                          ;  Analog MUX Config Registers
   694                          ;------------------------------------------------------
   695                          
   696  006A                    AMUX_CFG1:			equ 6Ah  ; Analog MUX Configuration 1
   697  0020                    AMUX_CFG1_GOINVR:	equ 20h  ;
   698  0010                    AMUX_CFG1_GOINVL:  	equ 10h	 ;
   699  000C                    AMUX_CFG1_AMUXMODR:	equ 0Ch	 ;
   700  0003                    AMUX_CFG1_AMUXMODL:	equ 03h	 ;
   701                          
   702                          ;;=============================================================================
   703                          ;;      M8C System Macros
   704                          ;;  These macros should be used when their functions are needed.
   705                          ;;=============================================================================
   706                          
   707                          ;----------------------------------------------------
   708                          ;  Swapping Register Banks
   709                          ;----------------------------------------------------
   710                              macro M8C_SetBank0
   711                              and   F, ~FLAG_XIO_MASK
   712  3D73                        endm
   713                          
   714                              macro M8C_SetBank1
   715                              or    F, FLAG_XIO_MASK
   716  3D73                        endm
   717                          
   718                          ;----------------------------------------------------
   719                          ;  Global Interrupt Enable/Disable
   720                          ;----------------------------------------------------
   721                              macro M8C_EnableGInt
   722                              or    F, FLAG_GLOBAL_IE
   723  3D73                        endm
   724                          
   725                              macro M8C_DisableGInt
   726                              and   F, ~FLAG_GLOBAL_IE
   727  3D73                        endm
   728                          
   729                          ;----------------------------------------------------
   730                          ;  Enable/Disable Interrupt Mask
   731                          ;
   732                          ;  Use the following macros to enable/disable
   733                          ;  bits in the Interrupt mask registers,
   734                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   735                          ;
   736                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   737                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   738                          ;
   739                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   740                          ;        and MASK is the bit set to enable or disable
   741                          ;----------------------------------------------------
   742                          ; Disable Interrupt Bit Mask(s)
   743                              macro M8C_DisableIntMask
   744                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   745  3D73                        endm
   746                          
   747                          ; Enable Interrupt Bit Mask(s)
   748                              macro M8C_EnableIntMask
   749                              or    reg[@0], @1               ; enable specified interrupt enable bit
   750  3D73                        endm
   751                          
   752                          ;----------------------------------------------------
   753                          ;  Clear Posted Interrupt Flag Mask
   754                          ;
   755                          ;  Use the following macros to clear the
   756                          ;  bits in the Interrupt Clear registers,
   757                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   758                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   759                          ;
   760                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   761                          ;        and MASK is the bit set to enable or disable
   762                          ;----------------------------------------------------
   763                              macro M8C_ClearIntFlag
   764                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   765  3D73                        endm
   766                          
   767                          ;----------------------------------------------------
   768                          ;  Power-On Reset & WatchDog Timer Functions
   769                          ;----------------------------------------------------
   770                              macro M8C_EnableWatchDog
   771                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   772  3D73                        endm
   773                          
   774                              macro M8C_ClearWDT
   775                              mov   reg[RES_WDT], 00h
   776  3D73                        endm
   777                          
   778                              macro M8C_ClearWDTAndSleep
   779                              mov   reg[RES_WDT], 38h
   780  3D73                        endm
   781                          
   782                          ;----------------------------------------------------
   783                          ;  Sleep, CPU Stop & Software Reset
   784                          ;----------------------------------------------------
   785                              macro M8C_Sleep
   786                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   787                              ; The next instruction to be executed depends on the state of the
   788                              ; various interrupt enable bits. If some interrupts are enabled
   789                              ; and the global interrupts are disabled, the next instruction will
   790                              ; be the one that follows the invocation of this macro. If global
   791                              ; interrupts are also enabled then the next instruction will be
   792                              ; from the interrupt vector table. If no interrupts are enabled
   793                              ; then the CPU sleeps forever.
   794  3D73                        endm
   795                          
   796                              macro M8C_Stop
   797                              ; In general, you probably don't want to do this, but here's how:
   798                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   799                              ; Next instruction to be executed is located in the interrupt
   800                              ; vector table entry for Power-On Reset.
   801  3D73                        endm
   802                          
   803                              macro M8C_Reset
   804                              ; Restore CPU to the power-on reset state.
   805                              mov A, 0
   806                              SSC
   807                              ; Next non-supervisor instruction will be at interrupt vector 0.
   808  3D73                        endm
   809                          
   810                          ;----------------------------------------------------
   811                          ; ImageCraft Code Compressor Actions
   812                          ;----------------------------------------------------
   813                              ; Suspend Code Compressor
   814                              ; Must not span a RET or RETI instruction
   815                              ; without resuming code compression
   816                              macro Suspend_CodeCompressor
   817                              or   F, 0
   818  3D73                        endm
   819                          
   820                              ; Resume Code Compression
   821                              macro Resume_CodeCompressor
   822                              add  SP, 0
   823  3D73                        endm
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  FILENAME: SAR10.inc
     4                          ;;   Version: 2.00, Updated on 2013/5/19 at 10:39:9
     5                          ;;  Generated by PSoC Designer 5.4.2946
     6                          ;;
     7                          ;;  DESCRIPTION: Assembler declarations for the SAR10 user module interface
     8                          ;;-----------------------------------------------------------------------------
     9                          ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
    10                          ;;*****************************************************************************
    11                          ;;*****************************************************************************
    12                          
    13                          include "m8c.inc"
    14                          
    15                          
    16                          ;--------------------------------------------------
    17                          ; Constants for SAR10 API's.
    18                          ;--------------------------------------------------
    19                          
    20  0001                    SAR10_SAR_CR0_REG_START_BIT:                               equ 0x01    ; Control register start bit
    21  0078                    SAR10_CHN_SEL_MASK:                                        equ 0x78
    22  0030                    SAR10_TRG_SEL_MASK:                                        equ 0x30
    23  0001                    SAR10_ALIGN_EN_MASK:                                       equ 0x01
    24  000E                    SAR10_CLK_SEL_MASK:                                        equ 0x0E
    25  0008                    SAR10_FREE_RUN_MASK:                                       equ 0x08
    26  0004                    SAR10_READY_MASK:                                          equ 0x04
    27  0002                    SAR10_SAR_CR0_REG_SW_TRIG_BIT:                             equ 0x02
    28                          
    29  00DF                    SAR10_INT_REG:                                             equ 0x0df
    30  0010                    SAR10_INT_SAR_MASK:                                        equ 0x10
    31                          ;--------------------------------------------------
    32                          ; SAR10 channel selection definitions
    33                          ;--------------------------------------------------
    34  0000                    SAR10_CHS_P00:                                             equ   (00h)
    35  0008                    SAR10_CHS_P01:                                             equ   (08h)
    36  0010                    SAR10_CHS_P02:                                             equ   (10h)
    37  0018                    SAR10_CHS_P03:                                             equ   (18h)
    38  0020                    SAR10_CHS_P04:                                             equ   (20h)
    39  0028                    SAR10_CHS_P05:                                             equ   (28h)
    40  0030                    SAR10_CHS_P06:                                             equ   (30h)
    41  0038                    SAR10_CHS_P07:                                             equ   (38h)
    42  0060                    SAR10_CHS_AMUX0:                                           equ   (60h)
    43  0068                    SAR10_CHS_AMUX1:                                           equ   (68h)
    44                          ;for compatibly with olds projects
    45  0060                    SAR10_CHS_AMUXL:                                           equ   (60h)
    46  0068                    SAR10_CHS_AMUXR:                                           equ   (68h)
    47                          
    48                          ;--------------------------------------------------
    49                          ; SAR10 trigger source definitions
    50                          ;--------------------------------------------------
    51  0000                    SAR10_SRC_TGRL:                                            equ   (00h)
    52  0010                    SAR10_SRC_TGRH:                                            equ   (10h)
    53  0020                    SAR10_SRC_TGR16:                                           equ   (20h)
    54  0030                    SAR10_SRC_TGRINCMP:                                        equ   (30h)
    55                          
    56                          ;--------------------------------------------------
    57                          ; SAR10 auto trigger definitions
    58                          ;--------------------------------------------------
    59  0001                    SAR10_AUTOTGR_ENABLE:                                      equ   (01h)
    60  0000                    SAR10_AUTOTGR_DISABLE:                                     equ   (00h)
    61                          
    62                          ;--------------------------------------------------
    63                          ; SAR10 clock selection definitions
    64                          ;--------------------------------------------------
    65  0000                    SAR10_SYSCLK_2:                                            equ   (00h)
    66  0002                    SAR10_SYSCLK_4:                                            equ   (02h)
    67  0004                    SAR10_SYSCLK_6:                                            equ   (04h)
    68  0006                    SAR10_SYSCLK_8:                                            equ   (06h)
    69  0008                    SAR10_SYSCLK_12:                                           equ   (08h)
    70  000A                    SAR10_SYSCLK_16:                                           equ   (0Ah)
    71  000C                    SAR10_SYSCLK_32:                                           equ   (0Ch)
    72  000E                    SAR10_SYSCLK_64:                                           equ   (0Eh)
    73                          
    74                          ;--------------------------------------------------
    75                          ; SAR10 run mode selection definitions
    76                          ;--------------------------------------------------
    77  0000                    SAR10_ONESHOT:                                             equ   (00h)
    78  0008                    SAR10_FREERUN:                                             equ   (08h)
    79                          
    80                          ;--------------------------------------------------
    81                          ; SAR10 definitions
    82                          ;--------------------------------------------------
    83  0000                    SAR10_Justify:                                             equ 0h
    84                          
    85                          ;--------------------------------------------------
    86                          ; Register Address Constants for SAR10
    87                          ;--------------------------------------------------
    88                          
    89  00A8                    SAR10_SAR_CR0_REG:                             equ 0xa8   ; SAR Control_0 register
    90  00A9                    SAR10_SAR_CR1_REG:                             equ 0xa9   ; SAR Control_1 register
    91  00AA                    SAR10_SAR_CR2_REG:                             equ 0xaa   ; SAR Control_2 register
    92  006A                    SAR10_SAR_DH_REG:                              equ 0x6a    ; SAR Data (MSB) register
    93  006B                    SAR10_SAR_DL_REG:                              equ 0x6b    ; SAR Data (LSB) register
    94                          
    95                          ;--------------------------------------------------
    96                          ; SAR10 Macro 'Functions'
    97                          ;--------------------------------------------------
    98                          
    99                             macro SAR10_Start_M
   100                             or    reg[SAR10_SAR_CR0_REG],  SAR10_SAR_CR0_REG_START_BIT
   101  3D73                       endm
   102                          
   103                             macro SAR10_Stop_M
   104                             and   reg[SAR10_SAR_CR0_REG], ~SAR10_SAR_CR0_REG_START_BIT
   105  3D73                       endm
   106                          
   107                             macro SAR10_EnableInt_M
   108                             M8C_EnableIntMask SAR10_INT_REG, SAR10_INT_SAR_MASK
   109  3D73                       endm
   110                          
   111                             macro SAR10_DisableInt_M
   112                             M8C_DisableIntMask SAR10_INT_REG, SAR10_INT_SAR_MASK
   113  3D73                       endm
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  FILENAME: SAR10.asm
     4                          ;;   Version: 2.00, Updated on 2013/5/19 at 10:39:9
     5                          ;;  Generated by PSoC Designer 5.4.2946
     6                          ;;
     7                          ;;  DESCRIPTION: SAR10 User Module software implementation file
     8                          ;;
     9                          ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
    10                          ;;        arguments and observe the associated "Registers are volatile" policy.
    11                          ;;        This means it is the caller's responsibility to preserve any values
    12                          ;;        in the X and A registers that are still needed after the API functions
    13                          ;;        returns. For Large Memory Model devices it is also the caller's 
    14                          ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
    15                          ;;        MVW_PP registers. Even though some of these registers may not be modified
    16                          ;;        now, there is no guarantee that will remain the case in future releases.
    17                          ;;-----------------------------------------------------------------------------
    18                          ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
    19                          ;;*****************************************************************************
    20                          ;;*****************************************************************************
    21                          
    22                          include "m8c.inc"
    23                          include "memory.inc"
    24                          include "SAR10.inc"
    25                          
    26                          ;-----------------------------------------------
    27                          ;  Global Symbols
    28                          ;-----------------------------------------------
    29                          export  SAR10_EnableInt
    30                          export _SAR10_EnableInt
    31                          export  SAR10_DisableInt
    32                          export _SAR10_DisableInt
    33                          export  SAR10_Start
    34                          export _SAR10_Start
    35                          export  SAR10_Stop
    36                          export _SAR10_Stop
    37                          export  SAR10_Trigger
    38                          export _SAR10_Trigger
    39                          export  SAR10_fIsDataAvailable
    40                          export _SAR10_fIsDataAvailable
    41                          export  SAR10_iGetData
    42                          export _SAR10_iGetData
    43                          export  SAR10_bGetData
    44                          export _SAR10_bGetData
    45                          export  SAR10_SetADCChannel
    46                          export _SAR10_SetADCChannel
    47                          export  SAR10_SetTriggerSrc
    48                          export _SAR10_SetTriggerSrc
    49                          export  SAR10_EnableAutoTrigger
    50                          export _SAR10_EnableAutoTrigger
    51                          export  SAR10_SetClk
    52                          export _SAR10_SetClk
    53                          export  SAR10_SetRunMode
    54                          export _SAR10_SetRunMode
    55                          
    56                          AREA led_display_RAM (RAM,REL)
    57                          
    58                          ;-----------------------------------------------
    59                          ;  Constant Definitions
    60                          ;-----------------------------------------------
    61                          
    62                          ;-----------------------------------------------
    63                          ; Variable Allocation
    64                          ;-----------------------------------------------
    65                          
    66                          
    67                          AREA UserModules (ROM, REL)
    68                          
    69                          .SECTION
    70                          ;-----------------------------------------------------------------------------
    71                          ;  FUNCTION NAME: SAR10_EnableInt
    72                          ;
    73                          ;  DESCRIPTION:
    74                          ;     Enables the interrupt mode operation by setting the interrupt enable mask bit
    75                          ;     associated with this User Module. This function has no effect until and
    76                          ;     unless the global interrupts are enabled (for example by using the
    77                          ;     macro M8C_EnableGInt).
    78                          ;-----------------------------------------------------------------------------
    79                          ;
    80                          ;  ARGUMENTS:    None.
    81                          ;  RETURNS:      Nothing.
    82                          ;  SIDE EFFECTS: 
    83                          ;    The A and X registers may be modified by this or future implementations
    84                          ;    of this function.  The same is true for all RAM page pointer registers in
    85                          ;    the Large Memory Model.  When necessary, it is the calling function's
    86                          ;    responsibility to perserve their values across calls to fastcall16 
    87                          ;    functions.
    88                          ;
    89  2C49                     SAR10_EnableInt:
    90  2C49                    _SAR10_EnableInt:
    91                             RAM_PROLOGUE RAM_USE_CLASS_1
    92  2C49  43 DF 10             SAR10_EnableInt_M
    93                             RAM_EPILOGUE RAM_USE_CLASS_1
    94  2C4C  7F                   ret
    95                          
    96                          .ENDSECTION
    97                          
    98                          
    99                          .SECTION
   100                          ;-----------------------------------------------------------------------------
   101                          ;  FUNCTION NAME: SAR10_DisableInt
   102                          ;
   103                          ;  DESCRIPTION:
   104                          ;     Disables the interrupt mode operation by clearing the interrupt enable
   105                          ;     mask bit associated with this User Module.
   106                          ;-----------------------------------------------------------------------------
   107                          ;
   108                          ;  ARGUMENTS:    None
   109                          ;  RETURNS:      Nothing
   110                          ;  SIDE EFFECTS: 
   111                          ;    The A and X registers may be modified by this or future implementations
   112                          ;    of this function.  The same is true for all RAM page pointer registers in
   113                          ;    the Large Memory Model.  When necessary, it is the calling function's
   114                          ;    responsibility to perserve their values across calls to fastcall16 
   115                          ;    functions.
   116                          ;
   117  2C4D                     SAR10_DisableInt:
   118  2C4D                    _SAR10_DisableInt:
   119                             RAM_PROLOGUE RAM_USE_CLASS_1
   120  2C4D  41 DF EF             SAR10_DisableInt_M
   121                             RAM_EPILOGUE RAM_USE_CLASS_1
   122  2C50  7F                   ret
   123                          
   124                          .ENDSECTION
   125                          
   126                          
   127                          .SECTION
   128                          ;-----------------------------------------------------------------------------
   129                          ;  FUNCTION NAME: SAR10_Start
   130                          ;
   131                          ;  DESCRIPTION:
   132                          ;     Enables SAR operation. 
   133                          ;     Set the ADC_EN bit in SAR_CR0 register
   134                          ;-----------------------------------------------------------------------------
   135                          ;
   136                          ;  ARGUMENTS:    None
   137                          ;  RETURNS:      Nothing
   138                          ;  SIDE EFFECTS: 
   139                          ;    The A and X registers may be modified by this or future implementations
   140                          ;    of this function.  The same is true for all RAM page pointer registers in
   141                          ;    the Large Memory Model.  When necessary, it is the calling function's
   142                          ;    responsibility to perserve their values across calls to fastcall16 
   143                          ;    functions.
   144                          ;
   145  2C51                     SAR10_Start:
   146  2C51                    _SAR10_Start:
   147                             RAM_PROLOGUE RAM_USE_CLASS_1
   148  2C51  71 10                M8C_SetBank1
   149  2C53  43 A8 01             SAR10_Start_M
   150  2C56  70 EF                M8C_SetBank0
   151                             RAM_EPILOGUE RAM_USE_CLASS_1
   152  2C58  7F                   ret
   153                          
   154                          .ENDSECTION
   155                          
   156                          
   157                          .SECTION
   158                          ;-----------------------------------------------------------------------------
   159                          ;  FUNCTION NAME: SAR10_Stop
   160                          ;
   161                          ;  DESCRIPTION:
   162                          ;     Disables SAR operation 
   163                          ;     Clear ADC_EN bit in SAR_CR0 register
   164                          ;-----------------------------------------------------------------------------
   165                          ;
   166                          ;  ARGUMENTS:    None
   167                          ;  RETURNS:      Nothing
   168                          ;  SIDE EFFECTS: 
   169                          ;    The A and X registers may be modified by this or future implementations
   170                          ;    of this function.  The same is true for all RAM page pointer registers in
   171                          ;    the Large Memory Model.  When necessary, it is the calling function's
   172                          ;    responsibility to perserve their values across calls to fastcall16 
   173                          ;    functions.
   174                          ;
   175  2C59                     SAR10_Stop:
   176  2C59                    _SAR10_Stop:
   177                             RAM_PROLOGUE RAM_USE_CLASS_1
   178  2C59  71 10                M8C_SetBank1
   179  2C5B  41 A8 FE             SAR10_Stop_M
   180  2C5E  70 EF                M8C_SetBank0
   181                             RAM_EPILOGUE RAM_USE_CLASS_1
   182  2C60  7F                   ret
   183                          
   184                          .ENDSECTION
   185                          
   186                          .SECTION
   187                          ;-----------------------------------------------------------------------------
   188                          ;  FUNCTION NAME: SAR10_Trigger
   189                          ;
   190                          ;  DESCRIPTION:
   191                          ;     Trigger the SAR to sample for one time
   192                          ;     Set START/ONGOING bit in SAR_CR0 register
   193                          ;
   194                          ;-----------------------------------------------------------------------------
   195                          ;
   196                          ;  ARGUMENTS:   Nothing
   197                          ;  RETURNS:         Nothing
   198                          ;  SIDE EFFECTS: 
   199                          ;    The A and X registers may be modified by this or future implementations
   200                          ;    of this function.  The same is true for all RAM page pointer registers in
   201                          ;    the Large Memory Model.  When necessary, it is the calling function's
   202                          ;    responsibility to perserve their values across calls to fastcall16 
   203                          ;    functions.
   204                          ;
   205  2C61                     SAR10_Trigger:
   206  2C61                    _SAR10_Trigger:
   207                             RAM_PROLOGUE RAM_USE_CLASS_1
   208  2C61  71 10                M8C_SetBank1
   209  2C63  43 A8 02             or    reg[SAR10_SAR_CR0_REG], SAR10_SAR_CR0_REG_SW_TRIG_BIT
   210  2C66  70 EF                M8C_SetBank0
   211                             RAM_EPILOGUE RAM_USE_CLASS_1
   212  2C68  7F                   ret
   213                          
   214                          .ENDSECTION
   215                          
   216                          .SECTION
   217                          ;-----------------------------------------------------------------------------
   218                          ;  FUNCTION NAME: SAR10_fIsDataAvailable
   219                          ;
   220                          ;  DESCRIPTION:
   221                          ;     Checks the availability of sampled data.
   222                          ;     Get READY bit from SAR_CR0 register
   223                          ;
   224                          ;-----------------------------------------------------------------------------
   225                          ;
   226                          ;  ARGUMENTS:   None
   227                          ;  RETURNS:     fastcall16 BYTE fIsDataAvailable (void)
   228                          ;  SIDE EFFECTS: 
   229                          ;    The A and X registers may be modified by this or future implementations
   230                          ;    of this function.  The same is true for all RAM page pointer registers in
   231                          ;    the Large Memory Model.  When necessary, it is the calling function's
   232                          ;    responsibility to perserve their values across calls to fastcall16 
   233                          ;    functions.
   234                          ;
   235  2C69                     SAR10_fIsDataAvailable:
   236  2C69                    _SAR10_fIsDataAvailable:
   237                             RAM_PROLOGUE RAM_USE_CLASS_4
   238  2C69  71 10                M8C_SetBank1
   239  2C6B  5D A8                mov   A,reg[SAR10_SAR_CR0_REG]    ; Read value of SAR_CR0 register
   240  2C6D  70 EF                M8C_SetBank0
   241  2C6F  21 04                and   A,SAR10_READY_MASK                   ; Checks the availability of sampled data.
   242                             RAM_EPILOGUE RAM_USE_CLASS_4
   243  2C71  7F                   ret
   244                          
   245                          .ENDSECTION
   246                          
   247                          .SECTION
   248                          ;-----------------------------------------------------------------------------
   249                          ;  FUNCTION NAME: SAR10_iGetData
   250                          ;
   251                          ;  DESCRIPTION:
   252                          ;     Returns last converted data.
   253                          ;     SAR_DL will be read first, then the SAR_DH
   254                          ;     The MSB is returned in X and the LSB in A
   255                          ;     Note: this function returns correct result only in right-justify mode 
   256                          ;     for CY8C28x45 device.
   257                          ;
   258                          ;-----------------------------------------------------------------------------
   259                          ;
   260                          ;  ARGUMENTS:   None
   261                          ;  RETURNS:     fastcall16 INT iGetData(void)
   262                          ;  SIDE EFFECTS: 
   263                          ;    The A and X registers may be modified by this or future implementations
   264                          ;    of this function.  The same is true for all RAM page pointer registers in
   265                          ;    the Large Memory Model.  When necessary, it is the calling function's
   266                          ;    responsibility to perserve their values across calls to fastcall16 
   267                          ;    functions.
   268                          ;
   269  FFFFFFFE                       Temp_offs:         equ  -2
   270  FFFFFFFF                       DL_REG_offs:       equ  -1
   271                                  
   272  2C72                     SAR10_iGetData:
   273  2C72                    _SAR10_iGetData:
   274  2C72  71 40                RAM_PROLOGUE RAM_USE_CLASS_2
   275                          IF(SAR10_Justify)  ; for CY8C28x45 Device
   276                             mov   A, reg[SAR10_SAR_DL_REG]  ; Get 8 lowest bits
   277                             push  A                                    ; Store 8 lowest bits in stack
   278                             mov   A, reg[SAR10_SAR_DH_REG]  ; Read 2 highest bits
   279                             mov   X, A                                 ; Get MSB of result
   280                             pop   A                                    ; Get LSB of result
   281                          ELSE ;for CY8C22x45 device
   282  2C74  50 00                mov   A, 0x00                              ; Init local var
   283  2C76  08                   push  A                                    ; Reserve one byte in stack
   284  2C77  5D 6B                mov   A, reg[SAR10_SAR_DL_REG]  ; Get 2 lowest bits
   285  2C79  08                   push  A                                    ; Store 2 lowest bits in stack
   286  2C7A  4F                   mov   X, SP                                ; Set SP in X
   287  2C7B  5D 6A                mov   A, reg[SAR10_SAR_DH_REG]  ; Read 8 highest bits
   288  2C7D  64                   asl   A                                    ; Determine two highest bits and store it in stack
   289  2C7E  6C FE                rlc   [X+Temp_offs]
   290  2C80  64                   asl   A
   291  2C81  6C FE                rlc   [X+Temp_offs]
   292  2C83  2B FF                or    A, [X+DL_REG_offs]                    ; Form LSB of result
   293  2C85  20                   pop   X                                     
   294  2C86  20                   pop   X                                     ; Get MSB of result
   295                          ENDIF
   296                             RAM_EPILOGUE RAM_USE_CLASS_2
      + 2C87  70 3F             	and	f, 0x3F
      + 2C89  71 80             	or	f, 0x80
   297  2C8B  7F                   ret
   298                          
   299                          .ENDSECTION
   300                          
   301                          .SECTION
   302                          ;-----------------------------------------------------------------------------
   303                          ;  FUNCTION NAME: SAR10_GetDataMSB8
   304                          ;
   305                          ;  DESCRIPTION:
   306                          ;    Returns last converted data.
   307                          ;    Note: this function returns correct result only in left-justify mode
   308                          ;    for CY8C28x45 device.  
   309                          ;
   310                          ;-----------------------------------------------------------------------------
   311                          ;
   312                          ;  ARGUMENTS:    Nothing
   313                          ;  RETURNS:          fastcall16 char GetDataMSB8(void)
   314                          ;  SIDE EFFECTS: 
   315                          ;    The A and X registers may be modified by this or future implementations
   316                          ;    of this function.  The same is true for all RAM page pointer registers in
   317                          ;    the Large Memory Model.  When necessary, it is the calling function's
   318                          ;    responsibility to perserve their values across calls to fastcall16 
   319                          ;    functions.
   320                          ;
   321  2C8C                     SAR10_bGetData:
   322  2C8C                    _SAR10_bGetData:
   323                             RAM_PROLOGUE RAM_USE_CLASS_1
   324  2C8C  5D 6A                mov   A,reg[SAR10_SAR_DH_REG]
   325                             RAM_EPILOGUE RAM_USE_CLASS_1
   326  2C8E  7F                   ret
   327                          
   328                          .ENDSECTION
   329                          
   330                          .SECTION
   331                          ;-----------------------------------------------------------------------------
   332                          ;  FUNCTION NAME: SAR10_SelectADCChannel
   333                          ;
   334                          ;  DESCRIPTION:
   335                          ;    Select the SAR input from 14 optional input channels.
   336                          ;   Set ADC_CHS bits in SAR_CR0 register
   337                          ;-----------------------------------------------------------------------------
   338                          ;
   339                          ;  ARGUMENTS:    fastcall16 void SelectADCChannel(passed in A)
   340                          ;  RETURNS:    None
   341                          ;  SIDE EFFECTS: 
   342                          ;    The A and X registers may be modified by this or future implementations
   343                          ;    of this function.  The same is true for all RAM page pointer registers in
   344                          ;    the Large Memory Model.  When necessary, it is the calling function's
   345                          ;    responsibility to perserve their values across calls to fastcall16 
   346                          ;    functions.
   347                          ;
   348  2C8F                     SAR10_SetADCChannel:
   349  2C8F                    _SAR10_SetADCChannel:
   350  2C8F  71 40                RAM_PROLOGUE RAM_USE_CLASS_2
   351  2C91  21 78                and   A, SAR10_CHN_SEL_MASK
   352  2C93  4F                   mov   X, SP
   353  2C94  08                   push  A                                     ; store value in stack
   354  2C95  71 10                M8C_SetBank1
   355  2C97  5D A8                mov   A, reg[SAR10_SAR_CR0_REG]  ; get register value
   356  2C99  21 87                and   A, ~SAR10_CHN_SEL_MASK     ; clear ADC_CHS bits
   357  2C9B  2B 00                or    A, [X]                                ; set ADC_CHS bits
   358  2C9D  60 A8                mov   reg[SAR10_SAR_CR0_REG], A  ; set new register value
   359  2C9F  70 EF                M8C_SetBank0
   360  2CA1  18                   pop   A
   361                             RAM_EPILOGUE RAM_USE_CLASS_2
      + 2CA2  70 3F             	and	f, 0x3F
      + 2CA4  71 80             	or	f, 0x80
   362  2CA6  7F                   ret
   363                          
   364                          .ENDSECTION
   365                          
   366                          .SECTION
   367                          ;-----------------------------------------------------------------------------
   368                          ;  FUNCTION NAME: SAR10_SelectTriggerSrc
   369                          ;
   370                          ;  DESCRIPTION:
   371                          ;    Select the SAR10 auto-trigger source 
   372                          ;    by setting TIGSEL in SAR_CR1
   373                          ;
   374                          ;-----------------------------------------------------------------------------
   375                          ;
   376                          ;  ARGUMENTS:    fastcall16 void SelectTriggerSrc(passed in A)
   377                          ;  RETURNS:    None
   378                          ;  SIDE EFFECTS: 
   379                          ;    The A and X registers may be modified by this or future implementations
   380                          ;    of this function.  The same is true for all RAM page pointer registers in
   381                          ;    the Large Memory Model.  When necessary, it is the calling function's
   382                          ;    responsibility to perserve their values across calls to fastcall16 
   383                          ;    functions.
   384                          ;
   385  2CA7                     SAR10_SetTriggerSrc:
   386  2CA7                    _SAR10_SetTriggerSrc:
   387  2CA7  71 40                RAM_PROLOGUE RAM_USE_CLASS_2
   388  2CA9  21 30                and   A, SAR10_TRG_SEL_MASK 
   389  2CAB  4F                   mov   X, SP
   390  2CAC  08                   push  A                                    ; store value in stack
   391  2CAD  71 10                M8C_SetBank1
   392  2CAF  5D A9                mov   A, reg[SAR10_SAR_CR1_REG]  ; get register value
   393  2CB1  21 CF                and   A, ~SAR10_TRG_SEL_MASK     ; clear TIGSEL bits
   394  2CB3  2B 00                or    A, [X]                                ; set TIGSEL bits
   395  2CB5  60 A9                mov   reg[SAR10_SAR_CR1_REG], A  ; set new register value
   396  2CB7  70 EF                M8C_SetBank0
   397  2CB9  18                   pop   A
   398                             RAM_EPILOGUE RAM_USE_CLASS_2
      + 2CBA  70 3F             	and	f, 0x3F
      + 2CBC  71 80             	or	f, 0x80
   399  2CBE  7F                   ret
   400                          
   401                          .ENDSECTION
   402                          
   403                          .SECTION
   404                          ;-----------------------------------------------------------------------------
   405                          ;  FUNCTION NAME: SAR10_EnableAutoTrigger
   406                          ;
   407                          ;  DESCRIPTION:
   408                          ;    Global enable CR of the SAR10 auto-trigger function by setting 
   409                          ;    by setting ALIGN_EN in SAR_CR1
   410                          ;
   411                          ;-----------------------------------------------------------------------------
   412                          ;
   413                          ;  ARGUMENTS:    fastcall16 void EnableAutoTrigger(passed in A)
   414                          ;  RETURNS:    None
   415                          ;  SIDE EFFECTS: 
   416                          ;    The A and X registers may be modified by this or future implementations
   417                          ;    of this function.  The same is true for all RAM page pointer registers in
   418                          ;    the Large Memory Model.  When necessary, it is the calling function's
   419                          ;    responsibility to perserve their values across calls to fastcall16 
   420                          ;    functions.
   421                          ;
   422  2CBF                     SAR10_EnableAutoTrigger:
   423  2CBF                    _SAR10_EnableAutoTrigger:
   424  2CBF  71 40                RAM_PROLOGUE RAM_USE_CLASS_2
   425  2CC1  21 01                and   A, SAR10_ALIGN_EN_MASK
   426  2CC3  4F                   mov   X, SP
   427  2CC4  08                   push  A                                    ; store value in stack
   428  2CC5  71 10                M8C_SetBank1
   429  2CC7  5D A9                mov   A, reg[SAR10_SAR_CR1_REG]  ; get register value
   430  2CC9  21 FE                and   A, ~SAR10_ALIGN_EN_MASK    ; clear ALIGN_EN bits
   431  2CCB  2B 00                or    A, [X]                                ; set ALIGN_EN bits
   432  2CCD  60 A9                mov   reg[SAR10_SAR_CR1_REG], A  ; set new register value
   433  2CCF  70 EF                M8C_SetBank0
   434  2CD1  18                   pop   A
   435                             RAM_EPILOGUE RAM_USE_CLASS_2
      + 2CD2  70 3F             	and	f, 0x3F
      + 2CD4  71 80             	or	f, 0x80
   436  2CD6  7F                   ret
   437                          
   438                          .ENDSECTION
   439                          
   440                          .SECTION
   441                          ;-----------------------------------------------------------------------------
   442                          ;  FUNCTION NAME: SAR10_SetClk
   443                          ;
   444                          ;  DESCRIPTION:
   445                          ;    Set SAR Sample Rate and Clock Selection 
   446                          ;    by setting CLKSEL bits in SAR_CR1
   447                          ;
   448                          ;-----------------------------------------------------------------------------
   449                          ;
   450                          ;  ARGUMENTS:    fastcall16 void SetClk(passed in A)
   451                          ;  RETURNS:    None
   452                          ;  SIDE EFFECTS: 
   453                          ;    The A and X registers may be modified by this or future implementations
   454                          ;    of this function.  The same is true for all RAM page pointer registers in
   455                          ;    the Large Memory Model.  When necessary, it is the calling function's
   456                          ;    responsibility to perserve their values across calls to fastcall16 
   457                          ;    functions.
   458                          ;
   459  2CD7                     SAR10_SetClk:
   460  2CD7                    _SAR10_SetClk:
   461  2CD7  71 40                RAM_PROLOGUE RAM_USE_CLASS_2
   462  2CD9  21 0E                and   A, SAR10_CLK_SEL_MASK
   463  2CDB  4F                   mov   X, SP
   464  2CDC  08                   push  A                                    ; store value in stack
   465  2CDD  71 10                M8C_SetBank1
   466  2CDF  5D A9                mov   A, reg[SAR10_SAR_CR1_REG]  ; get register value
   467  2CE1  21 F1                and   A, ~SAR10_CLK_SEL_MASK     ; clear CLKSEL bits
   468  2CE3  2B 00                or    A, [X]                                ; set CLKSEL bits
   469  2CE5  60 A9                mov   reg[SAR10_SAR_CR1_REG], A  ; set new register value
   470  2CE7  70 EF                M8C_SetBank0
   471  2CE9  18                   pop   A
   472                             RAM_EPILOGUE RAM_USE_CLASS_2
      + 2CEA  70 3F             	and	f, 0x3F
      + 2CEC  71 80             	or	f, 0x80
   473  2CEE  7F                   ret
   474                          
   475                          .ENDSECTION
   476                          
   477                          .SECTION
   478                          ;-----------------------------------------------------------------------------
   479                          ;  FUNCTION NAME: SAR10_SetRunMode
   480                          ;
   481                          ;  DESCRIPTION:
   482                          ;    Set free-running mode for SAR
   483                          ;    by setting FREERUN bits in SAR_CR2
   484                          ;
   485                          ;-----------------------------------------------------------------------------
   486                          ;
   487                          ;  ARGUMENTS:    fastcall16 void SetRunMode(passed in A)
   488                          ;  RETURNS:    None
   489                          ;  SIDE EFFECTS: 
   490                          ;    The A and X registers may be modified by this or future implementations
   491                          ;    of this function.  The same is true for all RAM page pointer registers in
   492                          ;    the Large Memory Model.  When necessary, it is the calling function's
   493                          ;    responsibility to perserve their values across calls to fastcall16 
   494                          ;    functions.
   495                          ;
   496  2CEF                     SAR10_SetRunMode:
   497  2CEF                    _SAR10_SetRunMode:
   498  2CEF  71 40                RAM_PROLOGUE RAM_USE_CLASS_2
   499  2CF1  21 08                and   A, SAR10_FREE_RUN_MASK
   500  2CF3  4F                   mov   X, SP
   501  2CF4  08                   push  A                                    ; store value in stack
   502  2CF5  71 10                M8C_SetBank1
   503  2CF7  5D AA                mov   A, reg[SAR10_SAR_CR2_REG]  ; get register value
   504  2CF9  21 F7                and   A, ~SAR10_FREE_RUN_MASK    ; clear FREERUN bits
   505  2CFB  2B 00                or    A, [X]                                ; set FREERUN bits
   506  2CFD  60 AA                mov reg[SAR10_SAR_CR2_REG], A   ; set new register value   
   507  2CFF  70 EF                M8C_SetBank0
   508  2D01  18                   pop   A
   509                             RAM_EPILOGUE RAM_USE_CLASS_2
      + 2D02  70 3F             	and	f, 0x3F
      + 2D04  71 80             	or	f, 0x80
   510  2D06  7F                   ret
HI-TECH Software Macro Assembler (PSoC MCU) V9.61
Symbol Table                                                                                               Thu Jul 09 11:34:29 2015
                    Temp_offs FFFFFFFE       _SAR10_EnableAutoTrigger 2CBF            SAR10_FREE_RUN_MASK 0008  
          SAR10_ALIGN_EN_MASK 0001               SAR10_READY_MASK 0004             SAR10_TRG_SEL_MASK 0030  
          SAR10_SetADCChannel 2C8F               SAR10_SetRunMode 2CEF                 SAR10_bGetData 2C8C  
                       HITECH 0002                FLAG_PGMODE_01b 0040                FLAG_PGMODE_10b 0080  
             SAR10_SAR_DH_REG 006A               SAR10_SAR_DL_REG 006B                 _SAR10_Trigger 2C61  
                 SAR10_SetClk 2CD7              _SAR10_SetRunMode 2CEF                 SAR10_iGetData 2C72  
       SAR10_fIsDataAvailable 2C69                SAR10_EnableInt 2C49      SYSTEM_LARGE_MEMORY_MODEL 0001  
      _SAR10_fIsDataAvailable 2C69                  SAR10_INT_REG 00DF                _SAR10_bGetData 2C8C  
           SAR10_CHN_SEL_MASK 0078                    DL_REG_offs FFFFFFFF                      TOOLCHAIN 0002  
            SAR10_SAR_CR0_REG 00A8              SAR10_SAR_CR1_REG 00A9              SAR10_SAR_CR2_REG 00AA  
SAR10_SAR_CR0_REG_SW_TRIG_BIT 0002               FLAG_PGMODE_MASK 00C0                _SAR10_iGetData 2C72  
              RAM_USE_CLASS_1 0001                RAM_USE_CLASS_2 0002                RAM_USE_CLASS_3 0004  
              RAM_USE_CLASS_4 0008                  _SAR10_SetClk 2CD7                  SAR10_Justify 0000  
                  SAR10_Start 2C51                  SAR10_Trigger 2C61    SAR10_SAR_CR0_REG_START_BIT 0001  
           SAR10_CLK_SEL_MASK 000E           _SAR10_SetTriggerSrc 2CA7        SAR10_EnableAutoTrigger 2CBF  
                 _SAR10_Start 2C51                     SAR10_Stop 2C59               SAR10_DisableInt 2C4D  
           SAR10_INT_SAR_MASK 0010                    _SAR10_Stop 2C59                  FLAG_XIO_MASK 0010  
            _SAR10_DisableInt 2C4D     SYSTEM_IDXPG_TRACKS_IDX_PP 0001               _SAR10_EnableInt 2C49  
         _SAR10_SetADCChannel 2C8F     SYSTEM_IDXPG_TRACKS_STK_PP 0000            SAR10_SetTriggerSrc 2CA7  
HI-TECH Software Macro Assembler (PSoC MCU) V9.61
                                                                                                           Thu Jul 09 11:34:29 2015
     1                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     2                          ;;;
     3                          ;;;  M8C.INC -- Microcontroller Device System Declarations
     4                          ;;;
     5                          ;;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
     6                          ;;;
     7                          ;;;  This file provides address constants, bit field masks and a set of macro
     8                          ;;;  facilities for the Cypress Semiconductor CY8C22045 Microcontroller devices.
     9                          ;;;
    10                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    11                          
    12                          ;;=============================================================================
    13                          ;; Definition of abbreviations used in the descriptions below
    14                          ;;  (RW)   The register or bit supports reads and writes
    15                          ;;  (W)    The register or bit is write-only
    16                          ;;  (R)    The register or bit is read-only
    17                          ;;  (#)    Access to the register is bit specific (see the family datasheet)
    18                          ;;  (RC)   The register or bit can be read, but writing a 0 will clear it,
    19                          ;;         writing a 1 will have no effect.
    20                          ;;=============================================================================
    21                          
    22                          ;;=============================================================================
    23                          ;;      System Registers
    24                          ;;=============================================================================
    25                          
    26                          ;----------------------------
    27                          ;  Flag Register Bit Fields
    28                          ;----------------------------
    29  00C0                    FLAG_PGMODE_MASK:  equ 0C0h     ; Paging control for > 256 bytes of RAM
    30  0000                    FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
    31  0040                    FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
    32  0080                    FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
    33  00C0                    FLAG_PGMODE_3:     equ 0C0h       ; Direct to CUR_PP page, indexed to STK_PP page
    34  0000                    FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
    35  0040                    FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
    36  0080                    FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
    37  00C0                    FLAG_PGMODE_11b:   equ 0C0h       ; Same as PGMODE_3
    38  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    39  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    40  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    41  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    42  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    43                          
    44                          
    45                          ;;=============================================================================
    46                          ;;      Register Space, Bank 0
    47                          ;;=============================================================================
    48                          
    49                          ;------------------------------------------------
    50                          ;  Port Registers
    51                          ;  Note: Also see this address range in Bank 1.
    52                          ;------------------------------------------------
    53                          ; Port 0
    54  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    55  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    56  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    57  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    58                          ; Port 1
    59  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    60  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    61  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    62  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    63                          ; Port 2
    64  0008                    PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
    65  0009                    PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
    66  000A                    PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
    67  000B                    PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
    68                          ; Port 3
    69  000C                    PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
    70  000D                    PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
    71  000E                    PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
    72  000F                    PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
    73                          ; Port 4
    74  0010                    PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
    75  0011                    PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
    76  0012                    PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
    77  0013                    PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
    78                          
    79                          ;------------------------------------------------
    80                          ;  Digital PSoC(tm) block Registers
    81                          ;  Note: Also see this address range in Bank 1.
    82                          ;------------------------------------------------
    83                          ; Digital PSoC block 00, Basic Type C
    84  0020                    DBC00DR0:     equ 20h          ; data register 0                          (#)
    85  0021                    DBC00DR1:     equ 21h          ; data register 1                          (W)
    86  0022                    DBC00DR2:     equ 22h          ; data register 2                          (RW)
    87  0023                    DBC00CR0:     equ 23h          ; control & status register 0              (#)
    88                          
    89                          ; Digital PSoC block 01, Basic Type C
    90  0024                    DBC01DR0:     equ 24h          ; data register 0                          (#)
    91  0025                    DBC01DR1:     equ 25h          ; data register 1                          (W)
    92  0026                    DBC01DR2:     equ 26h          ; data register 2                          (RW)
    93  0027                    DBC01CR0:     equ 27h          ; control & status register 0              (#)
    94                          
    95                          ; Digital PSoC block 02, Communications Type C
    96  0028                    DCC02DR0:     equ 28h          ; data register 0                          (#)
    97  0029                    DCC02DR1:     equ 29h          ; data register 1                          (W)
    98  002A                    DCC02DR2:     equ 2Ah          ; data register 2                          (RW)
    99  002B                    DCC02CR0:     equ 2Bh          ; control & status register 0              (#)
   100                          
   101                          ; Digital PSoC block 03, Communications Type C
   102  002C                    DCC03DR0:     equ 2Ch          ; data register 0                          (#)
   103  002D                    DCC03DR1:     equ 2Dh          ; data register 1                          (W)
   104  002E                    DCC03DR2:     equ 2Eh          ; data register 2                          (RW)
   105  002F                    DCC03CR0:     equ 2Fh          ; control & status register 0              (#)
   106                          
   107                          ; Digital PSoC block 10, Basic Type C
   108  0030                    DBC10DR0:     equ 30h          ; data register 0                          (#)
   109  0031                    DBC10DR1:     equ 31h          ; data register 1                          (W)
   110  0032                    DBC10DR2:     equ 32h          ; data register 2                          (RW)
   111  0033                    DBC10CR0:     equ 33h          ; control & status register 0              (#)
   112                          
   113                          ; Digital PSoC block 11, Basic Type C
   114  0034                    DBC11DR0:     equ 34h          ; data register 0                          (#)
   115  0035                    DBC11DR1:     equ 35h          ; data register 1                          (W)
   116  0036                    DBC11DR2:     equ 36h          ; data register 2                          (RW)
   117  0037                    DBC11CR0:     equ 37h          ; control & status register 0              (#)
   118                          
   119                          ; Digital PSoC block 12, Communications Type C
   120  0038                    DCC12DR0:     equ 38h          ; data register 0                          (#)
   121  0039                    DCC12DR1:     equ 39h          ; data register 1                          (W)
   122  003A                    DCC12DR2:     equ 3Ah          ; data register 2                          (RW)
   123  003B                    DCC12CR0:     equ 3Bh          ; control & status register 0              (#)
   124                          
   125                          ; Digital PSoC block 13, Communications Type C
   126  003C                    DCC13DR0:     equ 3Ch          ; data register 0                          (#)
   127  003D                    DCC13DR1:     equ 3Dh          ; data register 1                          (W)
   128  003E                    DCC13DR2:     equ 3Eh          ; data register 2                          (RW)
   129  003F                    DCC13CR0:     equ 3Fh          ; control & status register 0              (#)
   130                          
   131                          ;-------------------------------------
   132                          ;  Analog Control Registers
   133                          ;-------------------------------------
   134  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
   135  00C0                    AMX_IN_ACI3:          equ C0h    ; MASK: column 3 input mux
   136  0030                    AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
   137  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
   138  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
   139                          
   140  0061                    AMUX_CFG:      equ 61h          ; Analog MUX Configuration
   141  0030                    AMUX_CFG_INTCAP:       equ 30h    ;
   142  000E                    AMUX_CFG_MUXCLK:  	  equ 0Eh	 ;
   143  0001                    AMUX_CFG_EN:		  	  equ 01h	 ;
   144                          
   145                          ; old declarations DO NOT USE
   146  0061                    AMUXCFG:      equ 61h          ; Analog MUX Configuration
   147  0030                    AMUXCFG_INTCAP:       equ 30h    ;
   148  000E                    AMUXCFG_MUXCLK:  	  equ 0Eh	 ;
   149  0001                    AMUXCFG_EN:		  	  equ 01h	 ;
   150                          
   151  0062                    PWM_CR:       equ 62h          ; Pulse-Width Modulator Control
   152  0038                    PWM_CR_HIGH:          equ 38h    ; MASK: PWM high time
   153  0006                    PWM_CR_LOW:           equ 06h	 ; MASK: PWM low time
   154  0001                    PWM_CR_EN:            equ 01h	 ; MASK: Enable/Disable PWM function
   155                          
   156  0063                    ARF_CR:       equ 63h          ; Analog Reference Control
   157                          
   158  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus Register           (#)
   159  0080                    CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
   160  0040                    CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
   161  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
   162  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
   163  0008                    CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
   164  0004                    CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
   165  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
   166  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   167                          
   168  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   169  0020                    CMP_CR1_CLDIS1:       equ 20h    ; MASK: Column 1 comparator output latch
   170  0010                    CMP_CR1_CLDIS0:	      equ 10h    ; MASK: Column 0 comparator output latch
   171                          
   172  0068                    ADC0_CR:      equ 68h          ; Analog Column 0 Configuration
   173  0080                    ADC0_CR_CMPST:        equ 80h    ;
   174  0040                    ADC0_CR_LOREN:        equ 40h    ;
   175  0020                    ADC0_CR_SHEN:         equ 20h    ;
   176  0008                    ADC0_CR_CBSRC:        equ 08h    ;
   177  0004                    ADC0_CR_ADCM:         equ 04h    ;
   178  0001                    ADC0_CR_EN:	          equ 01h    ;
   179                          
   180  0069                    ADC1_CR:      equ 69h          ; Analog Column 1 Configuration
   181  0080                    ADC1_CR_CMPST:        equ 80h    ;
   182  0040                    ADC1_CR_LOREN:        equ 40h    ;
   183  0020                    ADC1_CR_SHEN:         equ 20h    ;
   184  0008                    ADC1_CR_CBSRC:        equ 08h    ;
   185  0004                    ADC1_CR_ADCM:         equ 04h    ;
   186  0001                    ADC1_CR_EN:	          equ 01h    ;
   187+                         
   188+                         ; Continuous Time PSoC block Type E Row 0 Col 0
   189+ 0072                    ACE00CR1:     equ 72h          ; Control register 1                       (RW)
   190+ 0073                    ACE00CR2:     equ 73h          ; Control register 2                       (RW)
   191                          
   192                          ; Continuous Time PSoC block Type E Row 0 Col 1
   193  0076                    ACE01CR1:     equ 76h          ; Control register 1                       (RW)
   194  0077                    ACE01CR2:     equ 77h          ; Control register 2                       (RW)
   195                          
   196                          ; Switched Cap PSoC blockType E Row 1 Col 0
   197  0080                    ASE10CR0:     equ 80h          ; Control register 0                       (RW)
   198                          
   199                          ; Switched Cap PSoC blockType E Row 1 Col 1
   200  0084                    ASE11CR0:     equ 84h          ; Control register 0                       (RW)
   201                          
   202                          ;-----------------------------------------------
   203                          ;  Global General Purpose Data Registers
   204                          ;-----------------------------------------------
   205  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   206  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   207  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   208  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   209                          
   210                          ;------------------------------------------------
   211                          ;  Row Digital Interconnects
   212                          ;
   213                          ;  Note: the following registers are mapped into
   214                          ;  both register bank 0 AND register bank 1.
   215                          ;------------------------------------------------
   216                          
   217  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   218  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   219  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   220  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   221  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   222  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   223  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   224                          
   225  00B8                    RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
   226  00B9                    RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
   227  00BA                    RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
   228  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   229  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   230  00BD                    RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
   231  00BE                    RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
   232                          
   233                          ;-----------------------------------------------
   234                          ;  Ram Page Pointers
   235                          ;-----------------------------------------------
   236  00D0                    CUR_PP:      equ 0D0h           ; Current   Page Pointer
   237  00D1                    STK_PP:      equ 0D1h           ; Stack     Page Pointer
   238  00D3                    IDX_PP:      equ 0D3h           ; Index     Page Pointer
   239  00D4                    MVR_PP:      equ 0D4h           ; MVI Read  Page Pointer
   240  00D5                    MVW_PP:      equ 0D5h           ; MVI Write Page Pointer
   241                          
   242                          ;------------------------------------------------
   243                          ;  I2C Configuration Registers
   244                          ;------------------------------------------------
   245  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   246  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   247  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   248  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   249  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   250  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   251  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   252  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   253  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   254  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   255                          
   256  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   257  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   258  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   259  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   260  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   261  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   262  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   263  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   264  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   265                          
   266  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   267                          
   268  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   269  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   270  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   271  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   272  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   273                          
   274                          ;------------------------------------------------
   275                          ;  System and Global Resource Registers
   276                          ;------------------------------------------------
   277  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   278                                                         ; Use INT_MSK0 bit field masks
   279  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   280                                                         ; Use INT_MSK1 bit field masks
   281  00DC                    INT_CLR2:     equ 0DCh          ; Interrupt Clear Register 2               (RW)
   282                                                         ; Use INT_MSK2 bit field masks
   283  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   284                                                         ; Use INT_MSK3 bit field masks
   285                          
   286  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   287  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   288  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   289                          
   290  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   291  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   292  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   293  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   294  0010                    INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
   295  0008                    INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
   296  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   297  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   298  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   299                          
   300  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   301  0080                    INT_MSK1_DCC13:            equ 80h ; MASK: enable/disable DCC13 block interrupt
   302  0040                    INT_MSK1_DCC12:            equ 40h ; MASK: enable/disable DCC12 block interrupt
   303  0020                    INT_MSK1_DBC11:            equ 20h ; MASK: enable/disable DBC11 block interrupt
   304  0010                    INT_MSK1_DBC10:            equ 10h ; MASK: enable/disable DBC10 block interrupt
   305  0008                    INT_MSK1_DCC03:            equ 08h ; MASK: enable/disable DCC03 block interrupt
   306  0004                    INT_MSK1_DCC02:            equ 04h ; MASK: enable/disable DCC02 block interrupt
   307  0002                    INT_MSK1_DBC01:            equ 02h ; MASK: enable/disable DBC01 block interrupt
   308  0001                    INT_MSK1_DBC00:            equ 01h ; MASK: enable/disable DBC00 block interrupt
   309                          
   310  00DF                    INT_MSK2:     equ DFh			; Custom block Mask Register			   (RW)
   311  0010                    INT_MSK2_SARADC:           equ 10h ; MASK: enable/disable SARADC block interrupt
   312  0020                    INT_MSK2_CSD0:             equ 20h ; MASK: enable/disable CSD0 block interrupt
   313  0040                    INT_MSK2_CSD1:             equ 40h ; MASK: enable/disable CSD1 block interrupt
   314  0080                    INT_MSK2_RTC:              equ 80h ; MASK: enable/disable RTC block interrupt
   315                          
   316  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   317  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   318                          
   319                          ;------------------------------------------------------
   320                          ;  MAC Registers
   321                          ;------------------------------------------------------
   322                          
   323  00E8                    MUL0_X:       equ 0E8h          ; Multiply Input X Register                (W)
   324  00E9                    MUL0_Y:       equ 0E9h          ; Multiply Input Y Register                (W)
   325  00EA                    MUL0_DH:      equ 0EAh          ; Multiply Result High Byte Register       (R)
   326  00EB                    MUL0_DL:      equ 0EBh          ; Multiply Result Low Byte Register        (R)
   327                          
   328  00EC                    ACC0_DR1:     equ 0ECh          ; Accumulator Data Register 1              (RW)
   329  00ED                    ACC0_DR0:     equ 0EDh          ; Accumulator Data Register 0              (RW)
   330  00EE                    ACC0_DR3:     equ 0EEh          ; Accumulator Data Register 3              (RW)
   331  00EF                    ACC0_DR2:     equ 0EFh          ; Accumulator Data Register 2              (RW)
   332                          
   333                          ; DECIMATOR Control Registers
   334  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   335  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   336                          
   337                          ;------------------------------------------------------
   338                          ;  System Status and Control Registers
   339                          ;
   340                          ;  Note: The following registers are mapped into both
   341                          ;        register bank 0 AND register bank 1.
   342                          ;------------------------------------------------------
   343  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   344                                                             ; Use FLAG_ masks defined at top of file
   345                          
   346  00FD                    DAC_D:        equ 0FDh		   ; DAC Data Register                        (RW)
   347                          
   348  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   349  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: flag, Internal Reset Status bit
   350  0010                    CPU_SCR1_SLIMO:         equ 10h	   ; MASK: Slow IMO (internal main osc) enable
   351  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   352  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   353  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   354                          
   355  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   356  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   357  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   358  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   359  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   360  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   361                          
   362                          ;------------------------------------------------------
   363                          ;  Neon Capsense Digital Control Registers
   364                          ;------------------------------------------------------
   365  0050                    CSD0_DR0_L:				equ 50h		; Capsense 0 data low 0				(RW)
   366  0054                    CSD0_DR0_H:				equ 54h		; Capsense 0 data high 0			(RW)
   367  0058                    CSD1_DR0_L:				equ 58h		; Capsense 1 data low 0				(RW)
   368  005C                    CSD1_DR0_H:				equ 5Ch		; Capsense 1 data high 0			(RW)
   369  0051                    CSD0_DR1_L:				equ 51h		; Capsense 0 data low 1				(RW)
   370  0055                    CSD0_DR1_H:				equ 55h		; Capsense 0 data high 1			(RW)
   371  0059                    CSD1_DR1_L:				equ 59h		; Capsense 1 data low 1				(RW)
   372  005D                    CSD1_DR1_H:				equ 5Dh		; Capsense 1 data high 1			(RW)
   373  0052                    CSD0_CNT_L:				equ 52h		; Capsense 0 counter low			(RW)
   374  0056                    CSD0_CNT_H:				equ 56h		; Capsense 0 counter high			(RW)
   375  005A                    CSD1_CNT_L:				equ 5Ah		; Capsense 1 counter low			(RW)
   376  005E                    CSD1_CNT_H:				equ	5Eh		; Capsense 1 counter high			(RW)
   377  0053                    CSD0_CR0:				equ 53h		; Capsense 0 control 0				(RW)
   378  005B                    CSD1_CR0:				equ 5Bh		; Capsense 1 control 0				(RW)
   379  0057                    CSD0_CR1:				equ 57h		; Capsense 0 control 1				(RW)
   380  005F                    CSD1_CR1:				equ 5Fh		; Capsense 1 control 1				(RW)
   381                          
   382                          ;------------------------------------------------------
   383                          ;  Neon Analog Registers
   384                          ;------------------------------------------------------
   385  0065                    ASY_CR:					equ 65h		; Analog Synchronization Control	(RW)
   386  006A                    ADC_DH:					equ 6Ah		; ADC data high						(RW)
   387  006B                    ADC_DL:					equ 6Bh		; ADC data low						(RW)
   388  00C8                    PWMVREF0:				equ C8h		; PWM Voltage Reference 0			(RW)
   389  00C9                    PWMVREF1:				equ C9h		; PWM Voltage Reference 1			(RW)
   390  00CB                    PWMSRC:					equ CBh		; PWM Source						(RW)
   391  00CA                    IDACMODE:				equ CAh		; IDAC Mode							(RW)
   392  00FC                    IDACR_D:				equ FCh		; Analog Mux DAC data 0				(RW)
   393  00FD                    IDACL_D:				equ FDh		; Analog Mux DAC data 1				(RW)
   394                          
   395                          ;------------------------------------------------------
   396                          ;  Neon Digital Registers
   397                          ;------------------------------------------------------
   398  00B7                    RDI0DSM:				equ B7h		; Row Digital Interconnect input select 0	(RW)
   399  00BF                    RDI1DSM:				equ BFh		; Row Digital Interconnect input select 1	(RW)
   400                          
   401                          ;------------------------------------------------------
   402                          ;  Neon Test Registers
   403                          ;------------------------------------------------------
   404  00CC                    TSCR0:					equ CCh		; Tsource 0							(RW)
   405  00CD                    TSCMPH:					equ CDh		; TSCMP high						(RW)
   406  00CE                    TSCMPL:					equ CEh		; TSCMP low							(RW)
   407  00CF                    TSCR1:					equ CFh		; Tsource 1							(RW)
   408                          
   409                          ;;=============================================================================
   410                          ;;      Register Space, Bank 1
   411                          ;;=============================================================================
   412                          
   413                          ;------------------------------------------------
   414                          ;  Port Registers
   415                          ;  Note: Also see this address range in Bank 0.
   416                          ;------------------------------------------------
   417                          ; Port 0
   418  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   419  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   420  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   421  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   422                          
   423                          ; Port 1
   424  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   425  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   426  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   427  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   428                          
   429                          ; Port 2
   430  0008                    PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
   431  0009                    PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
   432  000A                    PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
   433  000B                    PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
   434                          
   435                          ; Port 3
   436  000C                    PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
   437  000D                    PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
   438  000E                    PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
   439  000F                    PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
   440                          
   441                          ; Port 4
   442  0010                    PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
   443  0011                    PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
   444  0012                    PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
   445  0013                    PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
   446                          
   447                          ;------------------------------------------------
   448                          ;  Digital PSoC(tm) block Registers
   449                          ;  Note: Also see this address range in Bank 0.
   450                          ;------------------------------------------------
   451                          
   452                          ; Digital PSoC block 00, Basic Type C
   453  0020                    DBC00FN:      equ 20h          ; Function Register                        (RW)
   454  0021                    DBC00IN:      equ 21h          ;    Input Register                        (RW)
   455  0022                    DBC00OU:      equ 22h          ;   Output Register                        (RW)
   456  0023                    DBC00CR1:     equ 23h          ;   control & status register 1            (RW)
   457                          
   458                          ; Digital PSoC block 01, Basic Type C
   459  0024                    DBC01FN:      equ 24h          ; Function Register                        (RW)
   460  0025                    DBC01IN:      equ 25h          ;    Input Register                        (RW)
   461  0026                    DBC01OU:      equ 26h          ;   Output Register                        (RW)
   462  0027                    DBC01CR1:     equ 27h          ;   control & status register 1            (RW)
   463                          
   464                          ; Digital PSoC block 02, Communications Type C
   465  0028                    DCC02FN:      equ 28h          ; Function Register                        (RW)
   466  0029                    DCC02IN:      equ 29h          ;    Input Register                        (RW)
   467  002A                    DCC02OU:      equ 2Ah          ;   Output Register                        (RW)
   468  002B                    DBC02CR1:     equ 2Bh          ;   control & status register 1            (RW)
   469                          
   470                          ; Digital PSoC block 03, Communications Type C
   471  002C                    DCC03FN:      equ 2Ch          ; Function Register                        (RW)
   472  002D                    DCC03IN:      equ 2Dh          ;    Input Register                        (RW)
   473  002E                    DCC03OU:      equ 2Eh          ;   Output Register                        (RW)
   474  0029                    DBC03CR1:     equ 29h          ;   control & status register 1            (RW)
   475                          
   476                          ; Digital PSoC block 10, Basic Type C
   477  0030                    DBC10FN:      equ 30h          ; Function Register                        (RW)
   478  0031                    DBC10IN:      equ 31h          ;    Input Register                        (RW)
   479  0032                    DBC10OU:      equ 32h          ;   Output Register                        (RW)
   480  0033                    DBC10CR1:     equ 33h          ;   control & status register 1            (RW)
   481                          
   482                          ; Digital PSoC block 11, Basic Type C
   483  0034                    DBC11FN:      equ 34h          ; Function Register                        (RW)
   484  0035                    DBC11IN:      equ 35h          ;    Input Register                        (RW)
   485  0036                    DBC11OU:      equ 36h          ;   Output Register                        (RW)
   486  0037                    DBC11CR1:     equ 37h          ;   control & status register 1            (RW)
   487                          
   488                          ; Digital PSoC block 12, Communications Type C
   489  0038                    DCC12FN:      equ 38h          ; Function Register                        (RW)
   490  0039                    DCC12IN:      equ 39h          ;    Input Register                        (RW)
   491  003A                    DCC12OU:      equ 3Ah          ;   Output Register                        (RW)
   492  003B                    DBC12CR1:     equ 3Bh          ;   control & status register 1            (RW)
   493                          
   494                          ; Digital PSoC block 13, Communications Type C
   495  003C                    DCC13FN:      equ 3Ch          ; Function Register                        (RW)
   496  003D                    DCC13IN:      equ 3Dh          ;    Input Register                        (RW)
   497  003E                    DCC13OU:      equ 3Eh          ;   Output Register                        (RW)
   498  003F                    DBC13CR1:     equ 3Fh          ;   control & status register 1            (RW)
   499                          
   500                          ;------------------------------------------------
   501                          ;  System and Global Resource Registers
   502                          ;  Note: Also see this address range in Bank 0.
   503                          ;------------------------------------------------
   504                          
   505  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   506  00C0                    CLK_CR0_ACOLUMN_3:    equ C0h    ; MASK: Specify clock for analog cloumn
   507  0030                    CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
   508  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   509  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   510                          
   511  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   512  0018                    CLK_CR1_ACLK1:        equ 18h    ; MASK: Digital PSoC block for analog source
   513  0003                    CLK_CR1_ACLK0:        equ 03h    ; MASK: Digital PSoC block for analog source
   514                          
   515  0003                    CLK_CR1_ACLK2:        equ 03h    ; Deprecated do not use
   516                          
   517  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   518  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   519                          
   520  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   521  000F                    AMD_CR0_AMOD0:        equ 0Fh    ; MASK: Modulation source for analog column 0
   522                          
   523  0064                    CMP_GO_EN:    equ 64h          ; Comparator Bus To Global Out Enable      (RW)
   524  0080                    CMP_GO_EN_GOO5:       equ 80h    ; MASK: Selected Col 1 signal to GOO5
   525  0040                    CMP_GO_EN_GOO1:       equ 40h    ; MASK: Selected Col 1 signal to GOO1
   526  0030                    CMP_GO_EN_SEL1:       equ 30h    ; MASK: Column 1 Signal Select
   527  0008                    CMP_GO_EN_GOO4:       equ 08h    ; MASK: Selected Col 0 signal to GOO4
   528  0004                    CMP_GO_EN_GOO0:       equ 04h    ; MASK: Selected Col 0 signal to GOO0
   529  0003                    CMP_GO_EN_SEL0:       equ 03h    ; MASK: Column 0 Signal Select
   530                          
   531  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   532  000F                    AMD_CR1_AMOD1:        equ 0Fh    ; MASK: Modulation ctrl for analog column 1
   533                          
   534  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   535  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   536  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   537                          
   538  006B                    CLK_CR3:      equ 6Bh          ; Analog Clock Source Control Register 3   (RW)
   539  0040                    CLK_CR3_SYS1:         equ 40h    ; MASK: Analog Clock 1 selection
   540  0030                    CLK_CR3_DIVCLK1:      equ 30h    ; MASK: Analog Clock 1 divider
   541  0004                    CLK_CR3_SYS0:         equ 04h    ; MASK: Analog Clock 0 selection
   542  0003                    CLK_CR3_DIVCLK0:      equ 03h    ; MASK: Analog Clock 0 divider
   543                          
   544                          ;------------------------------------------------
   545                          ;  Global Digital Interconnects
   546                          ;------------------------------------------------
   547                          
   548  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   549  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   550  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   551  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   552                          
   553  00A0                    GDI_O_IN_CR:  equ 0A0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   554  00A1                    GDI_E_IN_CR:  equ 0A1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   555  00A2                    GDI_O_OU_CR:  equ 0A2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   556  00A3                    GDI_E_OU_CR:  equ 0A3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   557                          
   558  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   559  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   560                          
   561                          ;------------------------------------------------
   562                          ;  Analog Mux Bus Port Enable Bits
   563                          ;------------------------------------------------
   564  00D8                    MUX_CR0:      equ 0D8h          ; Analog Mux Port 0 Bit Enables Register
   565  00D9                    MUX_CR1:      equ 0D9h          ; Analog Mux Port 1 Bit Enables Register
   566  00DA                    MUX_CR2:      equ 0DAh          ; Analog Mux Port 2 Bit Enables Register
   567  00DB                    MUX_CR3:      equ 0DBh          ; Analog Mux Port 3 Bit Enables Register
   568  00EC                    MUX_CR4:      equ 0ECh          ; Analog Mux Port 4 Bit Enables Register
   569                          
   570                          ;------------------------------------------------
   571                          ;  Clock and System Control Registers
   572                          ;------------------------------------------------
   573                          
   574  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   575  0080                    OSC_GO_EN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   576  0040                    OSC_GO_EN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   577  0020                    OSC_GO_EN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   578  0010                    OSC_GO_EN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   579  0008                    OSC_GO_EN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   580  0004                    OSC_GO_EN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   581  0002                    OSC_GO_EN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   582  0001                    OSC_GO_EN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   583                          
   584  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   585  0003                    OSC_CR4_VC3SEL:       equ 03h    ; MASK: System VC3 Clock source
   586                          
   587  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   588                          
   589  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   590  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   591  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   592  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   593  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   594  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   595  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   596  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   597  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   598  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   599  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   600  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   601  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   602  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   603  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   604  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   605  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   606  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   607                          
   608  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   609  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   610  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   611                          
   612  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   613  0080                    OSC_CR2_PLLGAIN:      equ 80h    ; MASK: High/Low gain
   614  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   615  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   616  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   617                          
   618  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   619  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   620  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   621  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   622  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   623  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   624  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   625  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   626                          
   627  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   628  0008                    VLT_CMP_NOWRITE:      equ 08h    ; MASK: Vcc below Flash Write level
   629  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   630  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   631  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   632                          
   633  00E5                    ADC0_TR:      equ 0E5h          ; ADC Column 0 Trim Register
   634  00E6                    ADC1_TR:      equ 0E6h          ; ADC Column 1 Trim Register
   635                          
   636  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   637  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   638  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   639  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   640                          
   641  00FA                    FLS_PR1:      equ 0FAh          ; Flash Program Register 1                 (RW)
   642  0003                    FLS_PR1_BANK:         equ 03h    ; MASK: Select Active Flash Bank
   643                          
   644  00FD                    DAC_CR0:       equ 0FDh          ; Analog Mux DAC Control Register 0
   645  00DC                    DAC_CR1:       equ 0DCh          ; Analog Mux DAC Control Register 1
   646  0008                    DAC_CR_IRANGE:        equ 08h    ; MASK: Sets the DAC Range low or high
   647  0006                    DAC_CR_OSCMODE:       equ 06h    ; MASK: Defines the reset mode for AMux
   648  0001                    DAC_CR_ENABLE:        equ 01h    ; MASK: Enable/Disable DAC function
   649                          
   650                          ;------------------------------------------------
   651                          ;  I2C Control Registers
   652                          ;------------------------------------------------
   653                          
   654  00AD                    I2C_ADDR:    equ 0ADh          ; I2C Address Register (RW)
   655                          
   656                          ;------------------------------------------------------
   657                          ;  Neon Analog Registers
   658                          ;------------------------------------------------------
   659  0053                    VDAC50CR0:		equ 53h			; V DAC5 control 0				(RW)
   660  0057                    VDAC51CR0:		equ 57h			; V DAC5 control 1				(RW)
   661  00A8                    ADC_CR0:		equ A8h			; ADC control 0					(RW)
   662  00A9                    ADC_CR1:		equ A9h			; ADC control 1					(RW)
   663  00AA                    ADC_CR2:		equ AAh			; ADC control 2					(RW)
   664  00AB                    ADC_CR3TRIM:	equ ABh			; ADC control 3					(RW)
   665  00AC                    ADC_CR4:		equ ACh			; ADC control 4					(RW)
   666  00E7                    VDAC_TRIM:		equ E7h			; V DAC trim					(RW)
   667                          
   668                          ;------------------------------------------------------
   669                          ;  Neon Current Sense CMP Registers
   670                          ;------------------------------------------------------
   671  0050                    CMP0CR1:		equ 50h			; CMP0 control 1				(RW)
   672  0051                    CMP0CR2:		equ 51h			; CMP0 control 2				(RW)
   673  0054                    CMP1CR1:		equ 54h			; CMP1 control 1				(RW)
   674  0055                    CMP1CR2:		equ 55h			; CMP1 control 2				(RW)
   675  0058                    CSCMPCR0:		equ 58h			; CSCMP control 0				(RW)
   676  0059                    CSCMPGOEN:		equ 59h			; CSCMO global out enable		(RW)
   677  005A                    CSLUTCR0:		equ 5Ah			; CSLUT control 0				(RW)
   678  005B                    CMPCOLMUX:		equ 5Bh			; CMP Column Mux				(RW)
   679  005C                    CMPPWMCR:		equ 5Ch			; CMP PWM control				(RW)
   680  005D                    CMPFLTCR:		equ 5Dh			; CMP filter control			(RW)
   681  005E                    CMPCLK1:		equ 5Eh			; CMP clock 1					(RW)
   682  005F                    CMPCLK0:		equ 5Fh			; CMP clock 0					(RW)
   683                          
   684                          ;------------------------------------------------------
   685                          ;  Neon Real Time Clock Registers
   686                          ;------------------------------------------------------
   687  00A4                    RTCH:			equ A4h			; Real time current hour		(RW)
   688  00A5                    RTCM:			equ A5h			; Real time current minute		(RW)
   689  00A6                    RTCS:			equ A6h			; Real time current second		(RW)
   690  00A7                    RTCCR:			equ A7h			; Real time clock control		(RW)
   691                          
   692                          ;------------------------------------------------------
   693                          ;  Analog MUX Config Registers
   694                          ;------------------------------------------------------
   695                          
   696  006A                    AMUX_CFG1:			equ 6Ah  ; Analog MUX Configuration 1
   697  0020                    AMUX_CFG1_GOINVR:	equ 20h  ;
   698  0010                    AMUX_CFG1_GOINVL:  	equ 10h	 ;
   699  000C                    AMUX_CFG1_AMUXMODR:	equ 0Ch	 ;
   700  0003                    AMUX_CFG1_AMUXMODL:	equ 03h	 ;
   701                          
   702                          ;;=============================================================================
   703                          ;;      M8C System Macros
   704                          ;;  These macros should be used when their functions are needed.
   705                          ;;=============================================================================
   706                          
   707                          ;----------------------------------------------------
   708                          ;  Swapping Register Banks
   709                          ;----------------------------------------------------
   710                              macro M8C_SetBank0
   711                              and   F, ~FLAG_XIO_MASK
   712  3D73                        endm
   713                          
   714                              macro M8C_SetBank1
   715                              or    F, FLAG_XIO_MASK
   716  3D73                        endm
   717                          
   718                          ;----------------------------------------------------
   719                          ;  Global Interrupt Enable/Disable
   720                          ;----------------------------------------------------
   721                              macro M8C_EnableGInt
   722                              or    F, FLAG_GLOBAL_IE
   723  3D73                        endm
   724                          
   725                              macro M8C_DisableGInt
   726                              and   F, ~FLAG_GLOBAL_IE
   727  3D73                        endm
   728                          
   729                          ;----------------------------------------------------
   730                          ;  Enable/Disable Interrupt Mask
   731                          ;
   732                          ;  Use the following macros to enable/disable
   733                          ;  bits in the Interrupt mask registers,
   734                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   735                          ;
   736                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   737                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   738                          ;
   739                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   740                          ;        and MASK is the bit set to enable or disable
   741                          ;----------------------------------------------------
   742                          ; Disable Interrupt Bit Mask(s)
   743                              macro M8C_DisableIntMask
   744                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   745  3D73                        endm
   746                          
   747                          ; Enable Interrupt Bit Mask(s)
   748                              macro M8C_EnableIntMask
   749                              or    reg[@0], @1               ; enable specified interrupt enable bit
   750  3D73                        endm
   751                          
   752                          ;----------------------------------------------------
   753                          ;  Clear Posted Interrupt Flag Mask
   754                          ;
   755                          ;  Use the following macros to clear the
   756                          ;  bits in the Interrupt Clear registers,
   757                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   758                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   759                          ;
   760                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   761                          ;        and MASK is the bit set to enable or disable
   762                          ;----------------------------------------------------
   763                              macro M8C_ClearIntFlag
   764                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   765  3D73                        endm
   766                          
   767                          ;----------------------------------------------------
   768                          ;  Power-On Reset & WatchDog Timer Functions
   769                          ;----------------------------------------------------
   770                              macro M8C_EnableWatchDog
   771                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   772  3D73                        endm
   773                          
   774                              macro M8C_ClearWDT
   775                              mov   reg[RES_WDT], 00h
   776  3D73                        endm
   777                          
   778                              macro M8C_ClearWDTAndSleep
   779                              mov   reg[RES_WDT], 38h
   780  3D73                        endm
   781                          
   782                          ;----------------------------------------------------
   783                          ;  Sleep, CPU Stop & Software Reset
   784                          ;----------------------------------------------------
   785                              macro M8C_Sleep
   786                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   787                              ; The next instruction to be executed depends on the state of the
   788                              ; various interrupt enable bits. If some interrupts are enabled
   789                              ; and the global interrupts are disabled, the next instruction will
   790                              ; be the one that follows the invocation of this macro. If global
   791                              ; interrupts are also enabled then the next instruction will be
   792                              ; from the interrupt vector table. If no interrupts are enabled
   793                              ; then the CPU sleeps forever.
   794  3D73                        endm
   795                          
   796                              macro M8C_Stop
   797                              ; In general, you probably don't want to do this, but here's how:
   798                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   799                              ; Next instruction to be executed is located in the interrupt
   800                              ; vector table entry for Power-On Reset.
   801  3D73                        endm
   802                          
   803                              macro M8C_Reset
   804                              ; Restore CPU to the power-on reset state.
   805                              mov A, 0
   806                              SSC
   807                              ; Next non-supervisor instruction will be at interrupt vector 0.
   808  3D73                        endm
   809                          
   810                          ;----------------------------------------------------
   811                          ; ImageCraft Code Compressor Actions
   812                          ;----------------------------------------------------
   813                              ; Suspend Code Compressor
   814                              ; Must not span a RET or RETI instruction
   815                              ; without resuming code compression
   816                              macro Suspend_CodeCompressor
   817                              or   F, 0
   818  3D73                        endm
   819                          
   820                              ; Resume Code Compression
   821                              macro Resume_CodeCompressor
   822                              add  SP, 0
   823                              endm
      + 3D73                    
      + 3D73                    ; end of file m8c.inc
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;
     4                          ;;       FILENAME: Memory.inc
     5                          ;;
     6                          ;;    DESCRIPTION: Memory Model and Stack Parameter Definitions for 
     7                          ;;                 CY8C22045 PSoC devices.
     8                          ;;
     9                          ;;  LAST MODIFIED: August 17, 2004
    10                          ;;
    11                          ;;-----------------------------------------------------------------------------
    12                          ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
    13                          ;;*****************************************************************************
    14                          ;;*****************************************************************************
    15                          ;
    16                          ;
    17                          ;  ******** Define Memory Model and Stack parameters ********
    18                          ;
    19  0001                    IMAGECRAFT: equ 1   
    20  0002                    HITECH: equ 2   
    21  0002                    TOOLCHAIN: equ HITECH   
    22  0001                    SYSTEM_LARGE_MEMORY_MODEL: equ 1   
    23  0000                    SYSTEM_SMALL_MEMORY_MODEL: equ 0   
    24  0003                    SYSTEM_STACK_PAGE: equ 3   
    25  0000                    SYSTEM_STACK_PAGE_OFFSET: equ 0   
    26  0002                    SYSTEM_TOOLS: equ 2   
    27  0000                    SYSTEM_IDXPG_TRACKS_STK_PP: equ 0   
    28  0001                    SYSTEM_IDXPG_TRACKS_IDX_PP: equ 1   
    29  0000                    SYSTEM_MULTIPAGE_STACK: equ 0 
    30                          
    31                          
    32                          ;  ******* Function Class Definitions *******
    33                          ;
    34                          ;  These definitions are used to describe RAM access patterns. They provide
    35                          ;  documentation and they control prologue and epilogue macros that perform
    36                          ;  the necessary housekeeping functions for large memory model devices like
    37                          ;  the CY8C22045.
    38                          
    39  0001                    RAM_USE_CLASS_1:               equ 1   ; PUSH, POP & I/O access
    40  0002                    RAM_USE_CLASS_2:               equ 2   ; Indexed address mode on stack page
    41  0004                    RAM_USE_CLASS_3:               equ 4   ; Indexed address mode to any page
    42  0008                    RAM_USE_CLASS_4:               equ 8   ; Direct/Indirect address mode access
    43                          
    44                          ; ******* Hi Tech Specific *******
    45                          ; Turn on the expansion of all macros by default
    46                          IF (TOOLCHAIN & HITECH)
    47                          OPT EXPAND
    48                          ENDIF
    49                          ; ******* Page Pointer Manipulation Macros *******
    50                          ;
    51                          ;  ******* Page Pointer Manipulation Macros *******
    52                          ;
    53                          ;  Most of the following macros are conditionally compiled so they only
    54                          ;  produce code if the large memory model is selected.
    55                          
    56                             ;-----------------------------------------------
    57                             ;  Set Stack Page Macro
    58                             ;-----------------------------------------------
    59                             ;
    60                             ;  DESC: Modify STK_PP in the large or small memory Models.
    61                             ;
    62                             ; INPUT: Constant (e.g., SYSTEM_STACK_PAGE) that specifies the RAM page on
    63                             ;        which stack operations like PUSH and POP store and retrieve their
    64                             ;        data
    65                             ;
    66                             ;  COST: 8 instruction cycles (in LMM only)
    67                          
    68                             macro RAM_SETPAGE_STK( PG_NUMBER )
    69                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    70                                mov reg[STK_PP], @PG_NUMBER
    71                             ENDIF
    72  3D73                       endm
    73                          
    74                             ;-----------------------------------------------
    75                             ;  Set Current Page Macro
    76                             ;-----------------------------------------------
    77                             ;
    78                             ;  DESC: Modify CUR_PP in the large or small memory Models.
    79                             ;
    80                             ; INPUT: Constant value (e.g., >bFoo) for the RAM page number used in
    81                             ;        calculation of effective direct-mode address operands.
    82                             ;
    83                             ;  COST: 8 instruction cycles (in LMM only)
    84                          
    85                             macro RAM_SETPAGE_CUR( PG_NUMBER )
    86                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    87                                mov reg[CUR_PP], @PG_NUMBER
    88                             ENDIF
    89  3D73                       endm
    90                          
    91                             ;-----------------------------------------------
    92                             ;  Set Index Page Macro
    93                             ;-----------------------------------------------
    94                             ;
    95                             ;  DESC: Modify IDX_PP in the large or small emory Models.
    96                             ;
    97                             ; INPUT: Constant value (e.g., >caFoo) for the RAM page number used in
    98                             ;         calculation of effective index-mode address operands.
    99                             ;
   100                             ;  COST: 8 instruction cycles (in LMM only)
   101                          
   102                             macro RAM_SETPAGE_IDX( PG_NUMBER )
   103                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   104                                mov reg[IDX_PP], @PG_NUMBER
   105                             ENDIF
   106  3D73                       endm
   107                          
   108                             ;-----------------------------------------------
   109                             ;  Set MVI Read Page Macro
   110                             ;-----------------------------------------------
   111                             ;
   112                             ;  DESC: Modify MVR_PP in the large or small memory Models.
   113                             ;
   114                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   115                             ;        calculation of indirect address operands used in the
   116                             ;        "mvi A, [pFoo]" instructions.
   117                             ;
   118                             ;  COST: 8 instruction cycles (in LMM only)
   119                          
   120                             macro RAM_SETPAGE_MVR( PG_NUMBER )
   121                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   122                                mov reg[MVR_PP], @PG_NUMBER
   123                             ENDIF
   124  3D73                       endm
   125                          
   126                             ;-----------------------------------------------
   127                             ;  Set MVI Write Page Macro
   128                             ;-----------------------------------------------
   129                             ;
   130                             ;  DESC: Modify MVW_PP in the large or small memory Models.
   131                             ;
   132                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   133                             ;        calculation of indirect address operands used in the
   134                             ;        "mvi [pFoo], A" instructions.
   135                             ;
   136                             ;  COST: 8 instruction cycles (in LMM only)
   137                          
   138                             macro RAM_SETPAGE_MVW( PG_NUMBER )
   139                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   140                                mov reg[MVW_PP], @PG_NUMBER
   141                             ENDIF
   142  3D73                       endm
   143                          
   144                             ;-----------------------------------------------
   145                             ;  Force Index Page Pointer to Stack Page
   146                             ;-----------------------------------------------
   147                             ;
   148                             ;  DESC: Map index-mode operands onto the stack page by modifying IDX_PP.
   149                             ;        See also RAM_LOCK_INDEX_TO_STACKPAGE.
   150                             ;
   151                             ; INPUT: None
   152                             ;
   153                             ;  COST: 8 instruction cycles (in LMM only)
   154                          
   155                             macro RAM_SETPAGE_IDX2STK
   156                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   157                                IF ( SYSTEM_MULTIPAGE_STACK )
   158                                   mov   A, reg[STK_PP]
   159                                   mov   reg[IDX_PP], A
   160                                ELSE
   161                                   RAM_SETPAGE_IDX SYSTEM_STACK_PAGE
   162                                ENDIF
   163                             ENDIF
   164  3D73                       endm
   165                          
   166                             ;-----------------------------------------------
   167                             ;  Change Memory Mode
   168                             ;-----------------------------------------------
   169                             ;
   170                             ;  DESC: Modify FLAG_PAGEMODE bits in the large and small memory Models.
   171                             ;
   172                             ; INPUT: Constant value for PGMODE bitfield of CPU Flag register, F.
   173                             ;        See FLAG_PGMODE_{x} constants in M8C.INC.
   174                             ;
   175                             ;  COST: 8 instruction cycles (in LMM only)
   176                          
   177                             macro RAM_CHANGE_PAGE_MODE( MODE )
   178                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   179                                and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
   180                                or    F,  FLAG_PGMODE_MASK & @MODE
   181                             ENDIF
   182  3D73                       endm
   183                          
   184                             ;-----------------------------------------------
   185                             ;  Set Large Memory Model Native Paging Mode
   186                             ;-----------------------------------------------
   187                             ;
   188                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   189                             ;        paging mode *IFF* a simple "OR" is guaranteed to work---for
   190                             ;        example, in an ISR, when the PGMODE bits have been cleared
   191                             ;        to zero. If a simple "OR" is not guaranteed to work, use
   192                             ;        the slower RAM_RESTORE_NATIVE_PAGING instead.
   193                             ;
   194                             ; INPUT: none
   195                             ;
   196                             ;  COST: 4 instruction cycles (in LMM only)
   197                          
   198                             macro RAM_SET_NATIVE_PAGING
   199                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   200                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   201                                or    F,  FLAG_PGMODE_11b            ; LMM w/ IndexPage<==>StackPage
   202                             ENDIF ;  PGMODE LOCKED
   203                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   204                                or    F,  FLAG_PGMODE_10b            ; LMM with independent IndexPage
   205                             ENDIF ; PGMODE FREE
   206                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   207  3D73                       endm
   208                          
   209                             ;-----------------------------------------------
   210                             ; Restore Large Memory Model Native Paging Mode
   211                             ;-----------------------------------------------
   212                             ;
   213                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   214                             ;        paging mode. Always works because it clears the PGMODE bits
   215                             ;        before OR-ing in the new ones. See RAM_RESTORE_NATIVE_PAGING
   216                             ;        for a faster method.
   217                             ;
   218                             ; INPUT: none
   219                             ;
   220                             ;  COST: 8 instruction cycles (in LMM only)
   221                          
   222                             macro RAM_RESTORE_NATIVE_PAGING
   223                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   224                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   225                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_11b ; LMM w/ IndexPage<==>StackPage
   226                             ENDIF ;  PGMODE LOCKED
   227                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   228                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b ; LMM with independent IndexPage
   229                             ENDIF ; PGMODE FREE
   230                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   231  3D73                       endm
   232                          
   233                             ;-----------------------------------------------
   234                             ; Force indexed addr mode operands to Stack Pg
   235                             ;-----------------------------------------------
   236                             ;
   237                             ;  DESC: Force instructions that use indexed address mode to reference the
   238                             ;        stack page (as defined by STK_PP). This macro sets the "Indexed
   239                             ;        Stack Mode" bit (LSB) of the PGMODE bit field in the CPU Flag
   240                             ;        register, F. (See also RAM_SETPAGE_IDX2STK, above.)
   241                             ;
   242                             ; INPUT: none
   243                             ;
   244                             ;  COST: 4 instruction cycles (in LMM only)
   245                          
   246                             macro RAM_X_POINTS_TO_STACKPAGE
   247                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   248                                or   F, FLAG_PGMODE_01b
   249                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   250  3D73                       endm
   251                          
   252                             ;-----------------------------------------------
   253                             ;  Force indexed addr mode operands to Index Pg
   254                             ;-----------------------------------------------
   255                             ;
   256                             ;  DESC: Permit instructions that use indexed address mode to reference page
   257                             ;        zero or the page pointed to by the IDX_PP register, depending on the
   258                             ;        setting of the MSb (or "Direct Page Mode" bit) of the PGMODE bits
   259                             ;        in the CPU Flag register, F. (This macro clears the PGMODE LSb.)
   260                             ;
   261                             ; INPUT: none
   262                             ;
   263                             ;  COST: 4 instruction cycles (in LMM only)
   264                          
   265                             macro RAM_X_POINTS_TO_INDEXPAGE
   266                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   267                                and  F, ~FLAG_PGMODE_01b
   268                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   269  3D73                       endm
   270                          
   271                             ;-----------------------------------------------
   272                             ;  Function Prologue
   273                             ;-----------------------------------------------
   274                             ;
   275                             ;  Prologue for functions that run in the LMM and SMM.
   276                             ;
   277                          
   278                             macro RAM_PROLOGUE( ACTUAL_CLASS )
   279                          
   280                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   281                             ; Nothing to do
   282                             ENDIF ; RAM_USE_CLASS_1
   283                          
   284                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   285                                IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   286                                   RAM_X_POINTS_TO_STACKPAGE         ; exit native paging mode!
   287                                ENDIF
   288                             ENDIF ; RAM_USE_CLASS_2
   289                          
   290                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   291                                IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   292                                   RAM_X_POINTS_TO_INDEXPAGE         ; exit native paging mode!
   293                                ENDIF
   294                             ENDIF ; RAM_USE_CLASS_3
   295                          
   296                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   297                             ; Nothing to do
   298                             ENDIF ; RAM_USE_CLASS_4
   299                          
   300  3D73                       endm
   301                          
   302                             ;-----------------------------------------------
   303                             ;  Function Epilogue
   304                             ;-----------------------------------------------
   305                             ;
   306                             ;  Prologue for functions that run in the LMM and SMM.
   307                             ;
   308                          
   309                             macro RAM_EPILOGUE( ACTUAL_CLASS )
   310                          
   311                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   312                             ; Nothing to do
   313                             ENDIF ; RAM_USE_CLASS_1
   314                          
   315                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   316                                RAM_RESTORE_NATIVE_PAGING
   317                             ENDIF ; RAM_USE_CLASS_2
   318                          
   319                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   320                                RAM_RESTORE_NATIVE_PAGING
   321                             ENDIF ; RAM_USE_CLASS_3
   322                          
   323                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   324                             ; Nothing to do
   325                             ENDIF ; RAM_USE_CLASS_4
   326                          
   327  3D73                       endm
   328                          
   329                             ;-----------------------------------------------
   330                             ;  Preserve Register
   331                             ;-----------------------------------------------
   332                             ;
   333                             ;  DESC: Preserve a register value on the stack
   334                             ;
   335                             ; INPUT: Name or address of register in I/O Space
   336                             ;        The I/O bank is an implicit parameter. That is, this function will
   337                             ;        Access the I/O bank currently specified by the CPU Flag register.
   338                             ;
   339                             ;  USES: CPU 'A' register
   340                             ;
   341                             ;  COST: 9 instruction cycles
   342                          
   343                             macro REG_PRESERVE( IOReg )
   344                             mov   A, reg[ @IOReg ]
   345                             push  A
   346  3D73                       endm
   347                          
   348                             ;-----------------------------------------------
   349                             ;  Restore Register
   350                             ;-----------------------------------------------
   351                             ;
   352                             ;  DESC: Restore a register value from the stack
   353                             ;
   354                             ; INPUT: Name or address of register in I/O Space
   355                             ;        The I/O bank is an implicit parameter. That is, this function will
   356                             ;        Access the I/O bank currently specified by the CPU Flag register.
   357                             ;
   358                             ;  USES: CPU 'A' register
   359                             ;
   360                             ;  COST: 10 instruction cycles
   361                          
   362                             macro REG_RESTORE( IOReg )
   363                             pop   A
   364                             mov   reg[ @IOReg ], A
   365  3D73                       endm
   366                          
   367                             ;-----------------------------------------------
   368                             ;  Preserve Volatile Page Pointer Registers
   369                             ;-----------------------------------------------
   370                             ;
   371                             ;  DESC: Invoked by ISRs before switching to the LMM mode and calling
   372                             ;        functions that require on it.
   373                             ;
   374                             ; INPUT: none
   375                             ;
   376                             ;  USES: CPU 'A' register
   377                             ;
   378                             ;  COST: 45 instruction cycles (in LMM only)
   379                          
   380                             macro ISR_PRESERVE_PAGE_POINTERS
   381                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   382                                REG_PRESERVE CUR_PP
   383                                REG_PRESERVE IDX_PP
   384                                REG_PRESERVE MVR_PP
   385                                REG_PRESERVE MVW_PP
   386                             ENDIF
   387  3D73                       endm
   388                          
   389                             ;-----------------------------------------------
   390                             ;  Restore Volatile Page Pointer Registers
   391                             ;-----------------------------------------------
   392                             ;
   393                             ;  DESC: Undo for RAM_PRESERVE_PAGE_POINTERS macro. Invoked by ISRs after
   394                             ;        calling functions that run in the LMM mode and before executing
   395                             ;        the RETI instruction.
   396                             ;
   397                             ; INPUT: none
   398                             ;
   399                             ;  USES: CPU 'A' register
   400                             ;
   401                             ;  COST: 50 instruction cycles (in LMM only)
   402                          
   403                             macro ISR_RESTORE_PAGE_POINTERS
   404                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   405                                REG_RESTORE MVW_PP
   406                                REG_RESTORE MVR_PP
   407                                REG_RESTORE IDX_PP
   408                                REG_RESTORE CUR_PP
   409                             ENDIF
   410                             endm
      + 3D73                    
      + 3D73                    ; end of file Memory.inc
      + 3D73                    ;;*****************************************************************************
;;******************
      +                         ***********************************************************
;;  FILENAME: SAR10.inc
;;   Version: 2.
      +                         00, Updated on 2013/5/19 at 10:39:9
;;  Generated by PSoC Designer 5.4.2946
;;
;;  DESCRIPTION: Asse
      +                         mbler declarations for the SAR10 user module interface
;;-------------------------------------------
      +                         ----------------------------------
;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved
      +                         .
;;*****************************************************************************
;;****************
      +                         *************************************************************
   824                          
   825                          ; end of file m8c.inc
    29  00C0                    FLAG_PGMODE_MASK:  equ 0C0h     ; Paging control for > 256 bytes of RAM
    30  0000                    FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
    31  0040                    FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
    32  0080                    FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
    33  00C0                    FLAG_PGMODE_3:     equ 0C0h       ; Direct to CUR_PP page, indexed to STK_PP page
    34  0000                    FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
    35  0040                    FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
    36  0080                    FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
    37  00C0                    FLAG_PGMODE_11b:   equ 0C0h       ; Same as PGMODE_3
    38  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    39  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    40  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    41  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    42  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    43                          
    44                          
    45                          ;;=============================================================================
    46                          ;;      Register Space, Bank 0
    47                          ;;=============================================================================
    48                          
    49                          ;------------------------------------------------
    50                          ;  Port Registers
    51                          ;  Note: Also see this address range in Bank 1.
    52                          ;------------------------------------------------
    53                          ; Port 0
    54  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    55  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    56  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    57  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    58                          ; Port 1
    59  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    60  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    61  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    62  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    63                          ; Port 2
    64  0008                    PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
    65  0009                    PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
    66  000A                    PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
    67  000B                    PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
    68                          ; Port 3
    69  000C                    PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
    70  000D                    PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
    71  000E                    PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
    72  000F                    PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
    73                          ; Port 4
    74  0010                    PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
    75  0011                    PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
    76  0012                    PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
    77  0013                    PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
    78                          
    79                          ;------------------------------------------------
    80                          ;  Digital PSoC(tm) block Registers
    81                          ;  Note: Also see this address range in Bank 1.
    82                          ;------------------------------------------------
    83                          ; Digital PSoC block 00, Basic Type C
    84  0020                    DBC00DR0:     equ 20h          ; data register 0                          (#)
    85  0021                    DBC00DR1:     equ 21h          ; data register 1                          (W)
    86  0022                    DBC00DR2:     equ 22h          ; data register 2                          (RW)
    87  0023                    DBC00CR0:     equ 23h          ; control & status register 0              (#)
    88                          
    89                          ; Digital PSoC block 01, Basic Type C
    90  0024                    DBC01DR0:     equ 24h          ; data register 0                          (#)
    91  0025                    DBC01DR1:     equ 25h          ; data register 1                          (W)
    92  0026                    DBC01DR2:     equ 26h          ; data register 2                          (RW)
    93  0027                    DBC01CR0:     equ 27h          ; control & status register 0              (#)
    94                          
    95                          ; Digital PSoC block 02, Communications Type C
    96  0028                    DCC02DR0:     equ 28h          ; data register 0                          (#)
    97  0029                    DCC02DR1:     equ 29h          ; data register 1                          (W)
    98  002A                    DCC02DR2:     equ 2Ah          ; data register 2                          (RW)
    99  002B                    DCC02CR0:     equ 2Bh          ; control & status register 0              (#)
   100                          
   101                          ; Digital PSoC block 03, Communications Type C
   102  002C                    DCC03DR0:     equ 2Ch          ; data register 0                          (#)
   103  002D                    DCC03DR1:     equ 2Dh          ; data register 1                          (W)
   104  002E                    DCC03DR2:     equ 2Eh          ; data register 2                          (RW)
   105  002F                    DCC03CR0:     equ 2Fh          ; control & status register 0              (#)
   106                          
   107                          ; Digital PSoC block 10, Basic Type C
   108  0030                    DBC10DR0:     equ 30h          ; data register 0                          (#)
   109  0031                    DBC10DR1:     equ 31h          ; data register 1                          (W)
   110  0032                    DBC10DR2:     equ 32h          ; data register 2                          (RW)
   111  0033                    DBC10CR0:     equ 33h          ; control & status register 0              (#)
   112                          
   113                          ; Digital PSoC block 11, Basic Type C
   114  0034                    DBC11DR0:     equ 34h          ; data register 0                          (#)
   115  0035                    DBC11DR1:     equ 35h          ; data register 1                          (W)
   116  0036                    DBC11DR2:     equ 36h          ; data register 2                          (RW)
   117  0037                    DBC11CR0:     equ 37h          ; control & status register 0              (#)
   118                          
   119                          ; Digital PSoC block 12, Communications Type C
   120  0038                    DCC12DR0:     equ 38h          ; data register 0                          (#)
   121  0039                    DCC12DR1:     equ 39h          ; data register 1                          (W)
   122  003A                    DCC12DR2:     equ 3Ah          ; data register 2                          (RW)
   123  003B                    DCC12CR0:     equ 3Bh          ; control & status register 0              (#)
   124                          
   125                          ; Digital PSoC block 13, Communications Type C
   126  003C                    DCC13DR0:     equ 3Ch          ; data register 0                          (#)
   127  003D                    DCC13DR1:     equ 3Dh          ; data register 1                          (W)
   128  003E                    DCC13DR2:     equ 3Eh          ; data register 2                          (RW)
   129  003F                    DCC13CR0:     equ 3Fh          ; control & status register 0              (#)
   130                          
   131                          ;-------------------------------------
   132                          ;  Analog Control Registers
   133                          ;-------------------------------------
   134  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
   135  00C0                    AMX_IN_ACI3:          equ C0h    ; MASK: column 3 input mux
   136  0030                    AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
   137  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
   138  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
   139                          
   140  0061                    AMUX_CFG:      equ 61h          ; Analog MUX Configuration
   141  0030                    AMUX_CFG_INTCAP:       equ 30h    ;
   142  000E                    AMUX_CFG_MUXCLK:  	  equ 0Eh	 ;
   143  0001                    AMUX_CFG_EN:		  	  equ 01h	 ;
   144                          
   145                          ; old declarations DO NOT USE
   146  0061                    AMUXCFG:      equ 61h          ; Analog MUX Configuration
   147  0030                    AMUXCFG_INTCAP:       equ 30h    ;
   148  000E                    AMUXCFG_MUXCLK:  	  equ 0Eh	 ;
   149  0001                    AMUXCFG_EN:		  	  equ 01h	 ;
   150                          
   151  0062                    PWM_CR:       equ 62h          ; Pulse-Width Modulator Control
   152  0038                    PWM_CR_HIGH:          equ 38h    ; MASK: PWM high time
   153  0006                    PWM_CR_LOW:           equ 06h	 ; MASK: PWM low time
   154  0001                    PWM_CR_EN:            equ 01h	 ; MASK: Enable/Disable PWM function
   155                          
   156  0063                    ARF_CR:       equ 63h          ; Analog Reference Control
   157                          
   158  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus Register           (#)
   159  0080                    CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
   160  0040                    CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
   161  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
   162  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
   163  0008                    CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
   164  0004                    CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
   165  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
   166  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   167                          
   168  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   169  0020                    CMP_CR1_CLDIS1:       equ 20h    ; MASK: Column 1 comparator output latch
   170  0010                    CMP_CR1_CLDIS0:	      equ 10h    ; MASK: Column 0 comparator output latch
   171                          
   172  0068                    ADC0_CR:      equ 68h          ; Analog Column 0 Configuration
   173  0080                    ADC0_CR_CMPST:        equ 80h    ;
   174  0040                    ADC0_CR_LOREN:        equ 40h    ;
   175  0020                    ADC0_CR_SHEN:         equ 20h    ;
   176  0008                    ADC0_CR_CBSRC:        equ 08h    ;
   177  0004                    ADC0_CR_ADCM:         equ 04h    ;
   178  0001                    ADC0_CR_EN:	          equ 01h    ;
   179                          
   180  0069                    ADC1_CR:      equ 69h          ; Analog Column 1 Configuration
   181  0080                    ADC1_CR_CMPST:        equ 80h    ;
   182  0040                    ADC1_CR_LOREN:        equ 40h    ;
   183  0020                    ADC1_CR_SHEN:         equ 20h    ;
   184  0008                    ADC1_CR_CBSRC:        equ 08h    ;
   185  0004                    ADC1_CR_ADCM:         equ 04h    ;
   186  0001                    ADC1_CR_EN:	          equ 01h    ;
   187                          
   188                          ; Continuous Time PSoC block Type E Row 0 Col 0
   189  0072                    ACE00CR1:     equ 72h          ; Control register 1                       (RW)
   190  0073                    ACE00CR2:     equ 73h          ; Control register 2                       (RW)
   191                          
   192                          ; Continuous Time PSoC block Type E Row 0 Col 1
   193  0076                    ACE01CR1:     equ 76h          ; Control register 1                       (RW)
   194  0077                    ACE01CR2:     equ 77h          ; Control register 2                       (RW)
   195                          
   196                          ; Switched Cap PSoC blockType E Row 1 Col 0
   197  0080                    ASE10CR0:     equ 80h          ; Control register 0                       (RW)
   198                          
   199                          ; Switched Cap PSoC blockType E Row 1 Col 1
   200  0084                    ASE11CR0:     equ 84h          ; Control register 0                       (RW)
   201                          
   202                          ;-----------------------------------------------
   203                          ;  Global General Purpose Data Registers
   204                          ;-----------------------------------------------
   205  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   206  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   207  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   208  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   209                          
   210                          ;------------------------------------------------
   211                          ;  Row Digital Interconnects
   212                          ;
   213                          ;  Note: the following registers are mapped into
   214                          ;  both register bank 0 AND register bank 1.
   215                          ;------------------------------------------------
   216                          
   217  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   218  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   219  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   220  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   221  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   222  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   223  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   224                          
   225  00B8                    RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
   226  00B9                    RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
   227  00BA                    RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
   228  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   229  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   230  00BD                    RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
   231  00BE                    RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
   232                          
   233                          ;-----------------------------------------------
   234                          ;  Ram Page Pointers
   235                          ;-----------------------------------------------
   236  00D0                    CUR_PP:      equ 0D0h           ; Current   Page Pointer
   237  00D1                    STK_PP:      equ 0D1h           ; Stack     Page Pointer
   238  00D3                    IDX_PP:      equ 0D3h           ; Index     Page Pointer
   239  00D4                    MVR_PP:      equ 0D4h           ; MVI Read  Page Pointer
   240  00D5                    MVW_PP:      equ 0D5h           ; MVI Write Page Pointer
   241                          
   242                          ;------------------------------------------------
   243                          ;  I2C Configuration Registers
   244                          ;------------------------------------------------
   245  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   246  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   247  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   248  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   249  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   250  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   251  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   252  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   253  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   254  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   255                          
   256  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   257  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   258  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   259  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   260  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   261  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   262  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   263  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   264  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   265                          
   266  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   267                          
   268  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   269  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   270  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   271  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   272  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   273                          
   274                          ;------------------------------------------------
   275                          ;  System and Global Resource Registers
   276                          ;------------------------------------------------
   277  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   278                                                         ; Use INT_MSK0 bit field masks
   279  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   280                                                         ; Use INT_MSK1 bit field masks
   281  00DC                    INT_CLR2:     equ 0DCh          ; Interrupt Clear Register 2               (RW)
   282                                                         ; Use INT_MSK2 bit field masks
   283  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   284                                                         ; Use INT_MSK3 bit field masks
   285                          
   286  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   287  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   288  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   289                          
   290  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   291  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   292  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   293  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   294  0010                    INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
   295  0008                    INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
   296  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   297  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   298  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   299                          
   300  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   301  0080                    INT_MSK1_DCC13:            equ 80h ; MASK: enable/disable DCC13 block interrupt
   302  0040                    INT_MSK1_DCC12:            equ 40h ; MASK: enable/disable DCC12 block interrupt
   303  0020                    INT_MSK1_DBC11:            equ 20h ; MASK: enable/disable DBC11 block interrupt
   304  0010                    INT_MSK1_DBC10:            equ 10h ; MASK: enable/disable DBC10 block interrupt
   305  0008                    INT_MSK1_DCC03:            equ 08h ; MASK: enable/disable DCC03 block interrupt
   306  0004                    INT_MSK1_DCC02:            equ 04h ; MASK: enable/disable DCC02 block interrupt
   307  0002                    INT_MSK1_DBC01:            equ 02h ; MASK: enable/disable DBC01 block interrupt
   308  0001                    INT_MSK1_DBC00:            equ 01h ; MASK: enable/disable DBC00 block interrupt
   309                          
   310  00DF                    INT_MSK2:     equ DFh			; Custom block Mask Register			   (RW)
   311  0010                    INT_MSK2_SARADC:           equ 10h ; MASK: enable/disable SARADC block interrupt
   312  0020                    INT_MSK2_CSD0:             equ 20h ; MASK: enable/disable CSD0 block interrupt
   313  0040                    INT_MSK2_CSD1:             equ 40h ; MASK: enable/disable CSD1 block interrupt
   314  0080                    INT_MSK2_RTC:              equ 80h ; MASK: enable/disable RTC block interrupt
   315                          
   316  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   317  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   318                          
   319                          ;------------------------------------------------------
   320                          ;  MAC Registers
   321                          ;------------------------------------------------------
   322                          
   323  00E8                    MUL0_X:       equ 0E8h          ; Multiply Input X Register                (W)
   324  00E9                    MUL0_Y:       equ 0E9h          ; Multiply Input Y Register                (W)
   325  00EA                    MUL0_DH:      equ 0EAh          ; Multiply Result High Byte Register       (R)
   326  00EB                    MUL0_DL:      equ 0EBh          ; Multiply Result Low Byte Register        (R)
   327                          
   328  00EC                    ACC0_DR1:     equ 0ECh          ; Accumulator Data Register 1              (RW)
   329  00ED                    ACC0_DR0:     equ 0EDh          ; Accumulator Data Register 0              (RW)
   330  00EE                    ACC0_DR3:     equ 0EEh          ; Accumulator Data Register 3              (RW)
   331  00EF                    ACC0_DR2:     equ 0EFh          ; Accumulator Data Register 2              (RW)
   332                          
   333                          ; DECIMATOR Control Registers
   334  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   335  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   336                          
   337                          ;------------------------------------------------------
   338                          ;  System Status and Control Registers
   339                          ;
   340                          ;  Note: The following registers are mapped into both
   341                          ;        register bank 0 AND register bank 1.
   342                          ;------------------------------------------------------
   343  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   344                                                             ; Use FLAG_ masks defined at top of file
   345                          
   346  00FD                    DAC_D:        equ 0FDh		   ; DAC Data Register                        (RW)
   347                          
   348  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   349  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: flag, Internal Reset Status bit
   350  0010                    CPU_SCR1_SLIMO:         equ 10h	   ; MASK: Slow IMO (internal main osc) enable
   351  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   352  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   353  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   354                          
   355  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   356  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   357  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   358  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   359  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   360  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   361                          
   362                          ;------------------------------------------------------
   363                          ;  Neon Capsense Digital Control Registers
   364                          ;------------------------------------------------------
   365  0050                    CSD0_DR0_L:				equ 50h		; Capsense 0 data low 0				(RW)
   366  0054                    CSD0_DR0_H:				equ 54h		; Capsense 0 data high 0			(RW)
   367  0058                    CSD1_DR0_L:				equ 58h		; Capsense 1 data low 0				(RW)
   368  005C                    CSD1_DR0_H:				equ 5Ch		; Capsense 1 data high 0			(RW)
   369  0051                    CSD0_DR1_L:				equ 51h		; Capsense 0 data low 1				(RW)
   370  0055                    CSD0_DR1_H:				equ 55h		; Capsense 0 data high 1			(RW)
   371  0059                    CSD1_DR1_L:				equ 59h		; Capsense 1 data low 1				(RW)
   372  005D                    CSD1_DR1_H:				equ 5Dh		; Capsense 1 data high 1			(RW)
   373  0052                    CSD0_CNT_L:				equ 52h		; Capsense 0 counter low			(RW)
   374  0056                    CSD0_CNT_H:				equ 56h		; Capsense 0 counter high			(RW)
   375  005A                    CSD1_CNT_L:				equ 5Ah		; Capsense 1 counter low			(RW)
   376  005E                    CSD1_CNT_H:				equ	5Eh		; Capsense 1 counter high			(RW)
   377  0053                    CSD0_CR0:				equ 53h		; Capsense 0 control 0				(RW)
   378  005B                    CSD1_CR0:				equ 5Bh		; Capsense 1 control 0				(RW)
   379  0057                    CSD0_CR1:				equ 57h		; Capsense 0 control 1				(RW)
   380  005F                    CSD1_CR1:				equ 5Fh		; Capsense 1 control 1				(RW)
   381                          
   382                          ;------------------------------------------------------
   383                          ;  Neon Analog Registers
   384                          ;------------------------------------------------------
   385  0065                    ASY_CR:					equ 65h		; Analog Synchronization Control	(RW)
   386  006A                    ADC_DH:					equ 6Ah		; ADC data high						(RW)
   387  006B                    ADC_DL:					equ 6Bh		; ADC data low						(RW)
   388  00C8                    PWMVREF0:				equ C8h		; PWM Voltage Reference 0			(RW)
   389  00C9                    PWMVREF1:				equ C9h		; PWM Voltage Reference 1			(RW)
   390  00CB                    PWMSRC:					equ CBh		; PWM Source						(RW)
   391  00CA                    IDACMODE:				equ CAh		; IDAC Mode							(RW)
   392  00FC                    IDACR_D:				equ FCh		; Analog Mux DAC data 0				(RW)
   393  00FD                    IDACL_D:				equ FDh		; Analog Mux DAC data 1				(RW)
   394                          
   395                          ;------------------------------------------------------
   396                          ;  Neon Digital Registers
   397                          ;------------------------------------------------------
   398  00B7                    RDI0DSM:				equ B7h		; Row Digital Interconnect input select 0	(RW)
   399  00BF                    RDI1DSM:				equ BFh		; Row Digital Interconnect input select 1	(RW)
   400                          
   401                          ;------------------------------------------------------
   402                          ;  Neon Test Registers
   403                          ;------------------------------------------------------
   404  00CC                    TSCR0:					equ CCh		; Tsource 0							(RW)
   405  00CD                    TSCMPH:					equ CDh		; TSCMP high						(RW)
   406  00CE                    TSCMPL:					equ CEh		; TSCMP low							(RW)
   407  00CF                    TSCR1:					equ CFh		; Tsource 1							(RW)
   408                          
   409                          ;;=============================================================================
   410                          ;;      Register Space, Bank 1
   411                          ;;=============================================================================
   412                          
   413                          ;------------------------------------------------
   414                          ;  Port Registers
   415                          ;  Note: Also see this address range in Bank 0.
   416                          ;------------------------------------------------
   417                          ; Port 0
   418  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   419  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   420  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   421  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   422                          
   423                          ; Port 1
   424  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   425  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   426  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   427  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   428                          
   429                          ; Port 2
   430  0008                    PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
   431  0009                    PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
   432  000A                    PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
   433  000B                    PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
   434                          
   435                          ; Port 3
   436  000C                    PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
   437  000D                    PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
   438  000E                    PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
   439  000F                    PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
   440                          
   441                          ; Port 4
   442  0010                    PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
   443  0011                    PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
   444  0012                    PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
   445  0013                    PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
   446                          
   447                          ;------------------------------------------------
   448                          ;  Digital PSoC(tm) block Registers
   449                          ;  Note: Also see this address range in Bank 0.
   450                          ;------------------------------------------------
   451                          
   452                          ; Digital PSoC block 00, Basic Type C
   453  0020                    DBC00FN:      equ 20h          ; Function Register                        (RW)
   454  0021                    DBC00IN:      equ 21h          ;    Input Register                        (RW)
   455  0022                    DBC00OU:      equ 22h          ;   Output Register                        (RW)
   456  0023                    DBC00CR1:     equ 23h          ;   control & status register 1            (RW)
   457                          
   458                          ; Digital PSoC block 01, Basic Type C
   459  0024                    DBC01FN:      equ 24h          ; Function Register                        (RW)
   460  0025                    DBC01IN:      equ 25h          ;    Input Register                        (RW)
   461  0026                    DBC01OU:      equ 26h          ;   Output Register                        (RW)
   462  0027                    DBC01CR1:     equ 27h          ;   control & status register 1            (RW)
   463                          
   464                          ; Digital PSoC block 02, Communications Type C
   465  0028                    DCC02FN:      equ 28h          ; Function Register                        (RW)
   466  0029                    DCC02IN:      equ 29h          ;    Input Register                        (RW)
   467  002A                    DCC02OU:      equ 2Ah          ;   Output Register                        (RW)
   468  002B                    DBC02CR1:     equ 2Bh          ;   control & status register 1            (RW)
   469                          
   470                          ; Digital PSoC block 03, Communications Type C
   471  002C                    DCC03FN:      equ 2Ch          ; Function Register                        (RW)
   472  002D                    DCC03IN:      equ 2Dh          ;    Input Register                        (RW)
   473  002E                    DCC03OU:      equ 2Eh          ;   Output Register                        (RW)
   474  0029                    DBC03CR1:     equ 29h          ;   control & status register 1            (RW)
   475                          
   476                          ; Digital PSoC block 10, Basic Type C
   477  0030                    DBC10FN:      equ 30h          ; Function Register                        (RW)
   478  0031                    DBC10IN:      equ 31h          ;    Input Register                        (RW)
   479  0032                    DBC10OU:      equ 32h          ;   Output Register                        (RW)
   480  0033                    DBC10CR1:     equ 33h          ;   control & status register 1            (RW)
   481                          
   482                          ; Digital PSoC block 11, Basic Type C
   483  0034                    DBC11FN:      equ 34h          ; Function Register                        (RW)
   484  0035                    DBC11IN:      equ 35h          ;    Input Register                        (RW)
   485  0036                    DBC11OU:      equ 36h          ;   Output Register                        (RW)
   486  0037                    DBC11CR1:     equ 37h          ;   control & status register 1            (RW)
   487                          
   488                          ; Digital PSoC block 12, Communications Type C
   489  0038                    DCC12FN:      equ 38h          ; Function Register                        (RW)
   490  0039                    DCC12IN:      equ 39h          ;    Input Register                        (RW)
   491  003A                    DCC12OU:      equ 3Ah          ;   Output Register                        (RW)
   492  003B                    DBC12CR1:     equ 3Bh          ;   control & status register 1            (RW)
   493                          
   494                          ; Digital PSoC block 13, Communications Type C
   495  003C                    DCC13FN:      equ 3Ch          ; Function Register                        (RW)
   496  003D                    DCC13IN:      equ 3Dh          ;    Input Register                        (RW)
   497  003E                    DCC13OU:      equ 3Eh          ;   Output Register                        (RW)
   498  003F                    DBC13CR1:     equ 3Fh          ;   control & status register 1            (RW)
   499                          
   500                          ;------------------------------------------------
   501                          ;  System and Global Resource Registers
   502                          ;  Note: Also see this address range in Bank 0.
   503                          ;------------------------------------------------
   504                          
   505  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   506  00C0                    CLK_CR0_ACOLUMN_3:    equ C0h    ; MASK: Specify clock for analog cloumn
   507  0030                    CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
   508  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   509  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   510                          
   511  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   512  0018                    CLK_CR1_ACLK1:        equ 18h    ; MASK: Digital PSoC block for analog source
   513  0003                    CLK_CR1_ACLK0:        equ 03h    ; MASK: Digital PSoC block for analog source
   514                          
   515  0003                    CLK_CR1_ACLK2:        equ 03h    ; Deprecated do not use
   516                          
   517  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   518  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   519                          
   520  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   521  000F                    AMD_CR0_AMOD0:        equ 0Fh    ; MASK: Modulation source for analog column 0
   522                          
   523  0064                    CMP_GO_EN:    equ 64h          ; Comparator Bus To Global Out Enable      (RW)
   524  0080                    CMP_GO_EN_GOO5:       equ 80h    ; MASK: Selected Col 1 signal to GOO5
   525  0040                    CMP_GO_EN_GOO1:       equ 40h    ; MASK: Selected Col 1 signal to GOO1
   526  0030                    CMP_GO_EN_SEL1:       equ 30h    ; MASK: Column 1 Signal Select
   527  0008                    CMP_GO_EN_GOO4:       equ 08h    ; MASK: Selected Col 0 signal to GOO4
   528  0004                    CMP_GO_EN_GOO0:       equ 04h    ; MASK: Selected Col 0 signal to GOO0
   529  0003                    CMP_GO_EN_SEL0:       equ 03h    ; MASK: Column 0 Signal Select
   530                          
   531  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   532  000F                    AMD_CR1_AMOD1:        equ 0Fh    ; MASK: Modulation ctrl for analog column 1
   533                          
   534  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   535  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   536  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   537                          
   538  006B                    CLK_CR3:      equ 6Bh          ; Analog Clock Source Control Register 3   (RW)
   539  0040                    CLK_CR3_SYS1:         equ 40h    ; MASK: Analog Clock 1 selection
   540  0030                    CLK_CR3_DIVCLK1:      equ 30h    ; MASK: Analog Clock 1 divider
   541  0004                    CLK_CR3_SYS0:         equ 04h    ; MASK: Analog Clock 0 selection
   542  0003                    CLK_CR3_DIVCLK0:      equ 03h    ; MASK: Analog Clock 0 divider
   543                          
   544                          ;------------------------------------------------
   545                          ;  Global Digital Interconnects
   546                          ;------------------------------------------------
   547                          
   548  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   549  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   550  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   551  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   552                          
   553  00A0                    GDI_O_IN_CR:  equ 0A0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   554  00A1                    GDI_E_IN_CR:  equ 0A1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   555  00A2                    GDI_O_OU_CR:  equ 0A2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   556  00A3                    GDI_E_OU_CR:  equ 0A3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   557                          
   558  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   559  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   560                          
   561                          ;------------------------------------------------
   562                          ;  Analog Mux Bus Port Enable Bits
   563                          ;------------------------------------------------
   564  00D8                    MUX_CR0:      equ 0D8h          ; Analog Mux Port 0 Bit Enables Register
   565  00D9                    MUX_CR1:      equ 0D9h          ; Analog Mux Port 1 Bit Enables Register
   566  00DA                    MUX_CR2:      equ 0DAh          ; Analog Mux Port 2 Bit Enables Register
   567  00DB                    MUX_CR3:      equ 0DBh          ; Analog Mux Port 3 Bit Enables Register
   568  00EC                    MUX_CR4:      equ 0ECh          ; Analog Mux Port 4 Bit Enables Register
   569                          
   570                          ;------------------------------------------------
   571                          ;  Clock and System Control Registers
   572                          ;------------------------------------------------
   573                          
   574  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   575  0080                    OSC_GO_EN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   576  0040                    OSC_GO_EN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   577  0020                    OSC_GO_EN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   578  0010                    OSC_GO_EN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   579  0008                    OSC_GO_EN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   580  0004                    OSC_GO_EN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   581  0002                    OSC_GO_EN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   582  0001                    OSC_GO_EN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   583                          
   584  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   585  0003                    OSC_CR4_VC3SEL:       equ 03h    ; MASK: System VC3 Clock source
   586                          
   587  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   588                          
   589  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   590  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   591  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   592  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   593  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   594  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   595  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   596  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   597  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   598  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   599  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   600  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   601  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   602  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   603  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   604  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   605  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   606  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   607                          
   608  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   609  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   610  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   611                          
   612  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   613  0080                    OSC_CR2_PLLGAIN:      equ 80h    ; MASK: High/Low gain
   614  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   615  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   616  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   617                          
   618  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   619  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   620  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   621  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   622  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   623  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   624  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   625  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   626                          
   627  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   628  0008                    VLT_CMP_NOWRITE:      equ 08h    ; MASK: Vcc below Flash Write level
   629  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   630  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   631  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   632                          
   633  00E5                    ADC0_TR:      equ 0E5h          ; ADC Column 0 Trim Register
   634  00E6                    ADC1_TR:      equ 0E6h          ; ADC Column 1 Trim Register
   635                          
   636  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   637  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   638  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   639  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   640                          
   641  00FA                    FLS_PR1:      equ 0FAh          ; Flash Program Register 1                 (RW)
   642  0003                    FLS_PR1_BANK:         equ 03h    ; MASK: Select Active Flash Bank
   643                          
   644  00FD                    DAC_CR0:       equ 0FDh          ; Analog Mux DAC Control Register 0
   645  00DC                    DAC_CR1:       equ 0DCh          ; Analog Mux DAC Control Register 1
   646  0008                    DAC_CR_IRANGE:        equ 08h    ; MASK: Sets the DAC Range low or high
   647  0006                    DAC_CR_OSCMODE:       equ 06h    ; MASK: Defines the reset mode for AMux
   648  0001                    DAC_CR_ENABLE:        equ 01h    ; MASK: Enable/Disable DAC function
   649                          
   650                          ;------------------------------------------------
   651                          ;  I2C Control Registers
   652                          ;------------------------------------------------
   653                          
   654  00AD                    I2C_ADDR:    equ 0ADh          ; I2C Address Register (RW)
   655                          
   656                          ;------------------------------------------------------
   657                          ;  Neon Analog Registers
   658                          ;------------------------------------------------------
   659  0053                    VDAC50CR0:		equ 53h			; V DAC5 control 0				(RW)
   660  0057                    VDAC51CR0:		equ 57h			; V DAC5 control 1				(RW)
   661  00A8                    ADC_CR0:		equ A8h			; ADC control 0					(RW)
   662  00A9                    ADC_CR1:		equ A9h			; ADC control 1					(RW)
   663  00AA                    ADC_CR2:		equ AAh			; ADC control 2					(RW)
   664  00AB                    ADC_CR3TRIM:	equ ABh			; ADC control 3					(RW)
   665  00AC                    ADC_CR4:		equ ACh			; ADC control 4					(RW)
   666  00E7                    VDAC_TRIM:		equ E7h			; V DAC trim					(RW)
   667                          
   668                          ;------------------------------------------------------
   669                          ;  Neon Current Sense CMP Registers
   670                          ;------------------------------------------------------
   671  0050                    CMP0CR1:		equ 50h			; CMP0 control 1				(RW)
   672  0051                    CMP0CR2:		equ 51h			; CMP0 control 2				(RW)
   673  0054                    CMP1CR1:		equ 54h			; CMP1 control 1				(RW)
   674  0055                    CMP1CR2:		equ 55h			; CMP1 control 2				(RW)
   675  0058                    CSCMPCR0:		equ 58h			; CSCMP control 0				(RW)
   676  0059                    CSCMPGOEN:		equ 59h			; CSCMO global out enable		(RW)
   677  005A                    CSLUTCR0:		equ 5Ah			; CSLUT control 0				(RW)
   678  005B                    CMPCOLMUX:		equ 5Bh			; CMP Column Mux				(RW)
   679  005C                    CMPPWMCR:		equ 5Ch			; CMP PWM control				(RW)
   680  005D                    CMPFLTCR:		equ 5Dh			; CMP filter control			(RW)
   681  005E                    CMPCLK1:		equ 5Eh			; CMP clock 1					(RW)
   682  005F                    CMPCLK0:		equ 5Fh			; CMP clock 0					(RW)
   683                          
   684                          ;------------------------------------------------------
   685                          ;  Neon Real Time Clock Registers
   686                          ;------------------------------------------------------
   687  00A4                    RTCH:			equ A4h			; Real time current hour		(RW)
   688  00A5                    RTCM:			equ A5h			; Real time current minute		(RW)
   689  00A6                    RTCS:			equ A6h			; Real time current second		(RW)
   690  00A7                    RTCCR:			equ A7h			; Real time clock control		(RW)
   691                          
   692                          ;------------------------------------------------------
   693                          ;  Analog MUX Config Registers
   694                          ;------------------------------------------------------
   695                          
   696  006A                    AMUX_CFG1:			equ 6Ah  ; Analog MUX Configuration 1
   697  0020                    AMUX_CFG1_GOINVR:	equ 20h  ;
   698  0010                    AMUX_CFG1_GOINVL:  	equ 10h	 ;
   699  000C                    AMUX_CFG1_AMUXMODR:	equ 0Ch	 ;
   700  0003                    AMUX_CFG1_AMUXMODL:	equ 03h	 ;
   701                          
   702                          ;;=============================================================================
   703                          ;;      M8C System Macros
   704                          ;;  These macros should be used when their functions are needed.
   705                          ;;=============================================================================
   706                          
   707                          ;----------------------------------------------------
   708                          ;  Swapping Register Banks
   709                          ;----------------------------------------------------
   710                              macro M8C_SetBank0
   711                              and   F, ~FLAG_XIO_MASK
   712  3D73                        endm
   713                          
   714                              macro M8C_SetBank1
   715                              or    F, FLAG_XIO_MASK
   716  3D73                        endm
   717                          
   718                          ;----------------------------------------------------
   719                          ;  Global Interrupt Enable/Disable
   720                          ;----------------------------------------------------
   721                              macro M8C_EnableGInt
   722                              or    F, FLAG_GLOBAL_IE
   723  3D73                        endm
   724                          
   725                              macro M8C_DisableGInt
   726                              and   F, ~FLAG_GLOBAL_IE
   727  3D73                        endm
   728                          
   729                          ;----------------------------------------------------
   730                          ;  Enable/Disable Interrupt Mask
   731                          ;
   732                          ;  Use the following macros to enable/disable
   733                          ;  bits in the Interrupt mask registers,
   734                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   735                          ;
   736                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   737                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   738                          ;
   739                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   740                          ;        and MASK is the bit set to enable or disable
   741                          ;----------------------------------------------------
   742                          ; Disable Interrupt Bit Mask(s)
   743                              macro M8C_DisableIntMask
   744                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   745  3D73                        endm
   746                          
   747                          ; Enable Interrupt Bit Mask(s)
   748                              macro M8C_EnableIntMask
   749                              or    reg[@0], @1               ; enable specified interrupt enable bit
   750  3D73                        endm
   751                          
   752                          ;----------------------------------------------------
   753                          ;  Clear Posted Interrupt Flag Mask
   754                          ;
   755                          ;  Use the following macros to clear the
   756                          ;  bits in the Interrupt Clear registers,
   757                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   758                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   759                          ;
   760                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   761                          ;        and MASK is the bit set to enable or disable
   762                          ;----------------------------------------------------
   763                              macro M8C_ClearIntFlag
   764                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   765  3D73                        endm
   766                          
   767                          ;----------------------------------------------------
   768                          ;  Power-On Reset & WatchDog Timer Functions
   769                          ;----------------------------------------------------
   770                              macro M8C_EnableWatchDog
   771                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   772  3D73                        endm
   773                          
   774                              macro M8C_ClearWDT
   775                              mov   reg[RES_WDT], 00h
   776  3D73                        endm
   777                          
   778                              macro M8C_ClearWDTAndSleep
   779                              mov   reg[RES_WDT], 38h
   780  3D73                        endm
   781                          
   782                          ;----------------------------------------------------
   783                          ;  Sleep, CPU Stop & Software Reset
   784                          ;----------------------------------------------------
   785                              macro M8C_Sleep
   786                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   787                              ; The next instruction to be executed depends on the state of the
   788                              ; various interrupt enable bits. If some interrupts are enabled
   789                              ; and the global interrupts are disabled, the next instruction will
   790                              ; be the one that follows the invocation of this macro. If global
   791                              ; interrupts are also enabled then the next instruction will be
   792                              ; from the interrupt vector table. If no interrupts are enabled
   793                              ; then the CPU sleeps forever.
   794  3D73                        endm
   795                          
   796                              macro M8C_Stop
   797                              ; In general, you probably don't want to do this, but here's how:
   798                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   799                              ; Next instruction to be executed is located in the interrupt
   800                              ; vector table entry for Power-On Reset.
   801  3D73                        endm
   802                          
   803                              macro M8C_Reset
   804                              ; Restore CPU to the power-on reset state.
   805                              mov A, 0
   806                              SSC
   807                              ; Next non-supervisor instruction will be at interrupt vector 0.
   808  3D73                        endm
   809                          
   810                          ;----------------------------------------------------
   811                          ; ImageCraft Code Compressor Actions
   812                          ;----------------------------------------------------
   813                              ; Suspend Code Compressor
   814                              ; Must not span a RET or RETI instruction
   815                              ; without resuming code compression
   816                              macro Suspend_CodeCompressor
   817                              or   F, 0
   818  3D73                        endm
   819                          
   820                              ; Resume Code Compression
   821                              macro Resume_CodeCompressor
   822                              add  SP, 0
   823  3D73                        endm
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  FILENAME: SAR10.inc
     4                          ;;   Version: 2.00, Updated on 2013/5/19 at 10:39:9
     5                          ;;  Generated by PSoC Designer 5.4.2946
     6                          ;;
     7                          ;;  DESCRIPTION: Assembler declarations for the SAR10 user module interface
     8                          ;;-----------------------------------------------------------------------------
     9                          ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
    10                          ;;*****************************************************************************
    11                          ;;*****************************************************************************
    12                          
    13                          include "m8c.inc"
    14                          
    15                          
    16                          ;--------------------------------------------------
    17                          ; Constants for SAR10 API's.
    18                          ;--------------------------------------------------
    19                          
    20  0001                    SAR10_SAR_CR0_REG_START_BIT:                               equ 0x01    ; Control register start bit
    21  0078                    SAR10_CHN_SEL_MASK:                                        equ 0x78
    22  0030                    SAR10_TRG_SEL_MASK:                                        equ 0x30
    23  0001                    SAR10_ALIGN_EN_MASK:                                       equ 0x01
    24  000E                    SAR10_CLK_SEL_MASK:                                        equ 0x0E
    25  0008                    SAR10_FREE_RUN_MASK:                                       equ 0x08
    26  0004                    SAR10_READY_MASK:                                          equ 0x04
    27  0002                    SAR10_SAR_CR0_REG_SW_TRIG_BIT:                             equ 0x02
    28                          
    29  00DF                    SAR10_INT_REG:                                             equ 0x0df
    30  0010                    SAR10_INT_SAR_MASK:                                        equ 0x10
    31                          ;--------------------------------------------------
    32                          ; SAR10 channel selection definitions
    33                          ;--------------------------------------------------
    34  0000                    SAR10_CHS_P00:                                             equ   (00h)
    35  0008                    SAR10_CHS_P01:                                             equ   (08h)
    36  0010                    SAR10_CHS_P02:                                             equ   (10h)
    37  0018                    SAR10_CHS_P03:                                             equ   (18h)
    38  0020                    SAR10_CHS_P04:                                             equ   (20h)
    39  0028                    SAR10_CHS_P05:                                             equ   (28h)
    40  0030                    SAR10_CHS_P06:                                             equ   (30h)
    41  0038                    SAR10_CHS_P07:                                             equ   (38h)
    42  0060                    SAR10_CHS_AMUX0:                                           equ   (60h)
    43  0068                    SAR10_CHS_AMUX1:                                           equ   (68h)
    44                          ;for compatibly with olds projects
    45  0060                    SAR10_CHS_AMUXL:                                           equ   (60h)
    46  0068                    SAR10_CHS_AMUXR:                                           equ   (68h)
    47                          
    48                          ;--------------------------------------------------
    49                          ; SAR10 trigger source definitions
    50                          ;--------------------------------------------------
    51  0000                    SAR10_SRC_TGRL:                                            equ   (00h)
    52  0010                    SAR10_SRC_TGRH:                                            equ   (10h)
    53  0020                    SAR10_SRC_TGR16:                                           equ   (20h)
    54  0030                    SAR10_SRC_TGRINCMP:                                        equ   (30h)
    55                          
    56                          ;--------------------------------------------------
    57                          ; SAR10 auto trigger definitions
    58                          ;--------------------------------------------------
    59  0001                    SAR10_AUTOTGR_ENABLE:                                      equ   (01h)
    60  0000                    SAR10_AUTOTGR_DISABLE:                                     equ   (00h)
    61                          
    62                          ;--------------------------------------------------
    63                          ; SAR10 clock selection definitions
    64                          ;--------------------------------------------------
    65  0000                    SAR10_SYSCLK_2:                                            equ   (00h)
    66  0002                    SAR10_SYSCLK_4:                                            equ   (02h)
    67  0004                    SAR10_SYSCLK_6:                                            equ   (04h)
    68  0006                    SAR10_SYSCLK_8:                                            equ   (06h)
    69  0008                    SAR10_SYSCLK_12:                                           equ   (08h)
    70  000A                    SAR10_SYSCLK_16:                                           equ   (0Ah)
    71  000C                    SAR10_SYSCLK_32:                                           equ   (0Ch)
    72  000E                    SAR10_SYSCLK_64:                                           equ   (0Eh)
    73                          
    74                          ;--------------------------------------------------
    75                          ; SAR10 run mode selection definitions
    76                          ;--------------------------------------------------
    77  0000                    SAR10_ONESHOT:                                             equ   (00h)
    78  0008                    SAR10_FREERUN:                                             equ   (08h)
    79                          
    80                          ;--------------------------------------------------
    81                          ; SAR10 definitions
    82                          ;--------------------------------------------------
    83  0000                    SAR10_Justify:                                             equ 0h
    84                          
    85                          ;--------------------------------------------------
    86                          ; Register Address Constants for SAR10
    87                          ;--------------------------------------------------
    88                          
    89  00A8                    SAR10_SAR_CR0_REG:                             equ 0xa8   ; SAR Control_0 register
    90  00A9                    SAR10_SAR_CR1_REG:                             equ 0xa9   ; SAR Control_1 register
    91  00AA                    SAR10_SAR_CR2_REG:                             equ 0xaa   ; SAR Control_2 register
    92  006A                    SAR10_SAR_DH_REG:                              equ 0x6a    ; SAR Data (MSB) register
    93  006B                    SAR10_SAR_DL_REG:                              equ 0x6b    ; SAR Data (LSB) register
    94                          
    95                          ;--------------------------------------------------
    96                          ; SAR10 Macro 'Functions'
    97                          ;--------------------------------------------------
    98                          
    99                             macro SAR10_Start_M
   100                             or    reg[SAR10_SAR_CR0_REG],  SAR10_SAR_CR0_REG_START_BIT
   101  3D73                       endm
   102                          
   103                             macro SAR10_Stop_M
   104                             and   reg[SAR10_SAR_CR0_REG], ~SAR10_SAR_CR0_REG_START_BIT
   105  3D73                       endm
   106                          
   107                             macro SAR10_EnableInt_M
   108                             M8C_EnableIntMask SAR10_INT_REG, SAR10_INT_SAR_MASK
   109  3D73                       endm
   110                          
   111                             macro SAR10_DisableInt_M
   112                             M8C_DisableIntMask SAR10_INT_REG, SAR10_INT_SAR_MASK
   113  3D73                       endm
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  FILENAME: SAR10INT.asm
     4                          ;;   Version: 2.00, Updated on 2013/5/19 at 10:39:9
     5                          ;;  Generated by PSoC Designer 5.4.2946
     6                          ;;
     7                          ;;  DESCRIPTION: SAR10 Interrupt Service Routine
     8                          ;;-----------------------------------------------------------------------------
     9                          ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
    10                          ;;*****************************************************************************
    11                          ;;*****************************************************************************
    12                          
    13                          include "m8c.inc"
    14                          include "memory.inc"
    15                          include "SAR10.inc"
    16                          
    17                          ;-----------------------------------------------
    18                          ;  Global Symbols
    19                          ;-----------------------------------------------
    20                          export  _SAR10_ISR
    21                          
    22                          
    23                          AREA InterruptRAM (RAM,REL,CON)
    24                             
    25                          ;@PSoC_UserCode_INIT@ (Do not change this line.)
    26                          ;---------------------------------------------------
    27                          ; Insert your custom declarations below this banner
    28                          ;---------------------------------------------------
    29                          
    30                          ;------------------------
    31                          ; Includes
    32                          ;------------------------
    33                          
    34                          	
    35                          ;------------------------
    36                          ;  Constant Definitions
    37                          ;------------------------
    38                          
    39                          
    40                          ;------------------------
    41                          ; Variable Allocation
    42                          ;------------------------
    43                          
    44                          ;---------------------------------------------------
    45                          ; Insert your custom declarations above this banner
    46                          ;---------------------------------------------------
    47                          ;@PSoC_UserCode_END@ (Do not change this line.)
    48                          
    49                          
    50                          AREA UserModules (ROM, REL)
    51                          
    52                          ;-----------------------------------------------------------------------------
    53                          ;  FUNCTION NAME: _SAR10_ISR
    54                          ;
    55                          ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
    56                          ;
    57                          ;-----------------------------------------------------------------------------
    58                          ;
    59                          
    60  2D07                    _SAR10_ISR:
    61                          
    62                             ;@PSoC_UserCode_BODY@ (Do not change this line.)
    63                             ;---------------------------------------------------
    64                             ; Insert your custom assembly code below this banner
    65                             ;---------------------------------------------------
    66                             ;   NOTE: interrupt service routines must preserve
    67                             ;   the values of the A and X CPU registers.
    68                             
    69                             ;---------------------------------------------------
    70                             ; Insert your custom assembly code above this banner
    71                             ;---------------------------------------------------
    72                             
    73                             ;---------------------------------------------------
    74                             ; Insert a lcall to a C function below this banner
    75                             ; and un-comment the lines between these banners
    76                             ;---------------------------------------------------
    77                             
    78                             ;PRESERVE_CPU_CONTEXT
    79                             ;lcall _My_C_Function
    80                             ;RESTORE_CPU_CONTEXT
    81                             
    82                             ;---------------------------------------------------
    83                             ; Insert a lcall to a C function above this banner
    84                             ; and un-comment the lines between these banners
    85                             ;---------------------------------------------------
    86                             ;@PSoC_UserCode_END@ (Do not change this line.)
    87                          
    88  2D07  7E                   reti
HI-TECH Software Macro Assembler (PSoC MCU) V9.61
Symbol Table                                                                                               Thu Jul 09 11:34:29 2015
                       HITECH 0002                     _SAR10_ISR 2D07                      TOOLCHAIN 0002  
HI-TECH Software Macro Assembler (PSoC MCU) V9.61
                                                                                                           Thu Jul 09 11:34:30 2015
     1                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     2                          ;;;
     3                          ;;;  M8C.INC -- Microcontroller Device System Declarations
     4                          ;;;
     5                          ;;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
     6                          ;;;
     7                          ;;;  This file provides address constants, bit field masks and a set of macro
     8                          ;;;  facilities for the Cypress Semiconductor CY8C22045 Microcontroller devices.
     9                          ;;;
    10                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    11                          
    12                          ;;=============================================================================
    13                          ;; Definition of abbreviations used in the descriptions below
    14                          ;;  (RW)   The register or bit supports reads and writes
    15                          ;;  (W)    The register or bit is write-only
    16                          ;;  (R)    The register or bit is read-only
    17                          ;;  (#)    Access to the register is bit specific (see the family datasheet)
    18                          ;;  (RC)   The register or bit can be read, but writing a 0 will clear it,
    19                          ;;         writing a 1 will have no effect.
    20                          ;;=============================================================================
    21                          
    22                          ;;=============================================================================
    23                          ;;      System Registers
    24                          ;;=============================================================================
    25                          
    26                          ;----------------------------
    27                          ;  Flag Register Bit Fields
    28                          ;----------------------------
    29  00C0                    FLAG_PGMODE_MASK:  equ 0C0h     ; Paging control for > 256 bytes of RAM
    30  0000                    FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
    31  0040                    FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
    32  0080                    FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
    33  00C0                    FLAG_PGMODE_3:     equ 0C0h       ; Direct to CUR_PP page, indexed to STK_PP page
    34  0000                    FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
    35  0040                    FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
    36  0080                    FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
    37  00C0                    FLAG_PGMODE_11b:   equ 0C0h       ; Same as PGMODE_3
    38  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    39  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    40  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    41  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    42  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    43                          
    44                          
    45                          ;;=============================================================================
    46                          ;;      Register Space, Bank 0
    47                          ;;=============================================================================
    48                          
    49                          ;------------------------------------------------
    50                          ;  Port Registers
    51                          ;  Note: Also see this address range in Bank 1.
    52                          ;------------------------------------------------
    53                          ; Port 0
    54  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    55  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    56  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    57  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    58                          ; Port 1
    59  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    60  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    61  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    62  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    63                          ; Port 2
    64  0008                    PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
    65  0009                    PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
    66  000A                    PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
    67  000B                    PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
    68                          ; Port 3
    69  000C                    PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
    70  000D                    PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
    71  000E                    PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
    72  000F                    PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
    73                          ; Port 4
    74  0010                    PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
    75  0011                    PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
    76  0012                    PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
    77  0013                    PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
    78                          
    79                          ;------------------------------------------------
    80                          ;  Digital PSoC(tm) block Registers
    81                          ;  Note: Also see this address range in Bank 1.
    82                          ;------------------------------------------------
    83                          ; Digital PSoC block 00, Basic Type C
    84  0020                    DBC00DR0:     equ 20h          ; data register 0                          (#)
    85  0021                    DBC00DR1:     equ 21h          ; data register 1                          (W)
    86  0022                    DBC00DR2:     equ 22h          ; data register 2                          (RW)
    87  0023                    DBC00CR0:     equ 23h          ; control & status register 0              (#)
    88                          
    89                          ; Digital PSoC block 01, Basic Type C
    90  0024                    DBC01DR0:     equ 24h          ; data register 0                          (#)
    91  0025                    DBC01DR1:     equ 25h          ; data register 1                          (W)
    92  0026                    DBC01DR2:     equ 26h          ; data register 2                          (RW)
    93  0027                    DBC01CR0:     equ 27h          ; control & status register 0              (#)
    94                          
    95                          ; Digital PSoC block 02, Communications Type C
    96  0028                    DCC02DR0:     equ 28h          ; data register 0                          (#)
    97  0029                    DCC02DR1:     equ 29h          ; data register 1                          (W)
    98  002A                    DCC02DR2:     equ 2Ah          ; data register 2                          (RW)
    99  002B                    DCC02CR0:     equ 2Bh          ; control & status register 0              (#)
   100                          
   101                          ; Digital PSoC block 03, Communications Type C
   102  002C                    DCC03DR0:     equ 2Ch          ; data register 0                          (#)
   103  002D                    DCC03DR1:     equ 2Dh          ; data register 1                          (W)
   104  002E                    DCC03DR2:     equ 2Eh          ; data register 2                          (RW)
   105  002F                    DCC03CR0:     equ 2Fh          ; control & status register 0              (#)
   106                          
   107                          ; Digital PSoC block 10, Basic Type C
   108  0030                    DBC10DR0:     equ 30h          ; data register 0                          (#)
   109  0031                    DBC10DR1:     equ 31h          ; data register 1                          (W)
   110  0032                    DBC10DR2:     equ 32h          ; data register 2                          (RW)
   111  0033                    DBC10CR0:     equ 33h          ; control & status register 0              (#)
   112                          
   113                          ; Digital PSoC block 11, Basic Type C
   114  0034                    DBC11DR0:     equ 34h          ; data register 0                          (#)
   115  0035                    DBC11DR1:     equ 35h          ; data register 1                          (W)
   116  0036                    DBC11DR2:     equ 36h          ; data register 2                          (RW)
   117  0037                    DBC11CR0:     equ 37h          ; control & status register 0              (#)
   118                          
   119                          ; Digital PSoC block 12, Communications Type C
   120  0038                    DCC12DR0:     equ 38h          ; data register 0                          (#)
   121  0039                    DCC12DR1:     equ 39h          ; data register 1                          (W)
   122  003A                    DCC12DR2:     equ 3Ah          ; data register 2                          (RW)
   123  003B                    DCC12CR0:     equ 3Bh          ; control & status register 0              (#)
   124                          
   125                          ; Digital PSoC block 13, Communications Type C
   126  003C                    DCC13DR0:     equ 3Ch          ; data register 0                          (#)
   127  003D                    DCC13DR1:     equ 3Dh          ; data register 1                          (W)
   128  003E                    DCC13DR2:     equ 3Eh          ; data register 2                          (RW)
   129  003F                    DCC13CR0:     equ 3Fh          ; control & status register 0              (#)
   130                          
   131                          ;-------------------------------------
   132                          ;  Analog Control Registers
   133                          ;-------------------------------------
   134  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
   135  00C0                    AMX_IN_ACI3:          equ C0h    ; MASK: column 3 input mux
   136  0030                    AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
   137  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
   138  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
   139                          
   140  0061                    AMUX_CFG:      equ 61h          ; Analog MUX Configuration
   141  0030                    AMUX_CFG_INTCAP:       equ 30h    ;
   142  000E                    AMUX_CFG_MUXCLK:  	  equ 0Eh	 ;
   143  0001                    AMUX_CFG_EN:		  	  equ 01h	 ;
   144                          
   145                          ; old declarations DO NOT USE
   146  0061                    AMUXCFG:      equ 61h          ; Analog MUX Configuration
   147  0030                    AMUXCFG_INTCAP:       equ 30h    ;
   148  000E                    AMUXCFG_MUXCLK:  	  equ 0Eh	 ;
   149  0001                    AMUXCFG_EN:		  	  equ 01h	 ;
   150                          
   151  0062                    PWM_CR:       equ 62h          ; Pulse-Width Modulator Control
   152  0038                    PWM_CR_HIGH:          equ 38h    ; MASK: PWM high time
   153  0006                    PWM_CR_LOW:           equ 06h	 ; MASK: PWM low time
   154  0001                    PWM_CR_EN:            equ 01h	 ; MASK: Enable/Disable PWM function
   155                          
   156  0063                    ARF_CR:       equ 63h          ; Analog Reference Control
   157                          
   158  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus Register           (#)
   159  0080                    CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
   160  0040                    CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
   161  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
   162  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
   163  0008                    CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
   164  0004                    CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
   165  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
   166  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   167                          
   168  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   169  0020                    CMP_CR1_CLDIS1:       equ 20h    ; MASK: Column 1 comparator output latch
   170  0010                    CMP_CR1_CLDIS0:	      equ 10h    ; MASK: Column 0 comparator output latch
   171                          
   172  0068                    ADC0_CR:      equ 68h          ; Analog Column 0 Configuration
   173  0080                    ADC0_CR_CMPST:        equ 80h    ;
   174  0040                    ADC0_CR_LOREN:        equ 40h    ;
   175  0020                    ADC0_CR_SHEN:         equ 20h    ;
   176  0008                    ADC0_CR_CBSRC:        equ 08h    ;
   177  0004                    ADC0_CR_ADCM:         equ 04h    ;
   178  0001                    ADC0_CR_EN:	          equ 01h    ;
   179                          
   180  0069                    ADC1_CR:      equ 69h          ; Analog Column 1 Configuration
   181  0080                    ADC1_CR_CMPST:        equ 80h    ;
   182  0040                    ADC1_CR_LOREN:        equ 40h    ;
   183  0020                    ADC1_CR_SHEN:         equ 20h    ;
   184  0008                    ADC1_CR_CBSRC:        equ 08h    ;
   185  0004                    ADC1_CR_ADCM:         equ 04h    ;
   186  0001                    ADC1_CR_EN:	          equ 01h    ;
   187                          
   188                          ; Continuous Time PSoC block Type E Row 0 Col 0
   189  0072                    ACE00CR1:     equ 72h          ; Control register 1                       (RW)
   190  0073                    ACE00CR2:     equ 73h          ; Control register 2                       (RW)
   191                          
   192                          ; Continuous Time PSoC block Type E Row 0 Col 1
   193  0076                    ACE01CR1:     equ 76h          ; Control register 1                       (RW)
   194  0077                    ACE01CR2:     equ 77h          ; Control register 2                       (RW)
   195                          
   196                          ; Switched Cap PSoC blockType E Row 1 Col 0
   197  0080                    ASE10CR0:     equ 80h          ; Control register 0                       (RW)
   198                          
   199                          ; Switched Cap PSoC blockType E Row 1 Col 1
   200  0084                    ASE11CR0:     equ 84h          ; Control register 0                       (RW)
   201                          
   202                          ;-----------------------------------------------
   203                          ;  Global General Purpose Data Registers
   204                          ;-----------------------------------------------
   205  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   206  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   207  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   208  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   209                          
   210                          ;------------------------------------------------
   211                          ;  Row Digital Interconnects
   212                          ;
   213                          ;  Note: the following registers are mapped into
   214                          ;  both register bank 0 AND register bank 1.
   215                          ;------------------------------------------------
   216                          
   217  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   218  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   219  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   220  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   221  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   222  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   223  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   224                          
   225  00B8                    RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
   226  00B9                    RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
   227  00BA                    RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
   228  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   229  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   230  00BD                    RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
   231  00BE                    RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
   232                          
   233                          ;-----------------------------------------------
   234                          ;  Ram Page Pointers
   235                          ;-----------------------------------------------
   236  00D0                    CUR_PP:      equ 0D0h           ; Current   Page Pointer
   237  00D1                    STK_PP:      equ 0D1h           ; Stack     Page Pointer
   238  00D3                    IDX_PP:      equ 0D3h           ; Index     Page Pointer
   239  00D4                    MVR_PP:      equ 0D4h           ; MVI Read  Page Pointer
   240  00D5                    MVW_PP:      equ 0D5h           ; MVI Write Page Pointer
   241                          
   242                          ;------------------------------------------------
   243                          ;  I2C Configuration Registers
   244                          ;------------------------------------------------
   245  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   246  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   247  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   248  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   249  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   250  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   251  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   252  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   253  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   254  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   255                          
   256  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   257  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   258  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   259  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   260  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   261  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   262  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   263  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   264  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   265                          
   266  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   267                          
   268  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   269  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   270  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   271  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   272  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   273                          
   274                          ;------------------------------------------------
   275                          ;  System and Global Resource Registers
   276                          ;------------------------------------------------
   277  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   278                                                         ; Use INT_MSK0 bit field masks
   279  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   280                                                         ; Use INT_MSK1 bit field masks
   281  00DC                    INT_CLR2:     equ 0DCh          ; Interrupt Clear Register 2               (RW)
   282                                                         ; Use INT_MSK2 bit field masks
   283  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   284                                                         ; Use INT_MSK3 bit field masks
   285                          
   286  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   287  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   288  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   289                          
   290  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   291  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   292  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   293  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   294  0010                    INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
   295  0008                    INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
   296  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   297  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   298  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   299                          
   300  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   301  0080                    INT_MSK1_DCC13:            equ 80h ; MASK: enable/disable DCC13 block interrupt
   302  0040                    INT_MSK1_DCC12:            equ 40h ; MASK: enable/disable DCC12 block interrupt
   303  0020                    INT_MSK1_DBC11:            equ 20h ; MASK: enable/disable DBC11 block interrupt
   304  0010                    INT_MSK1_DBC10:            equ 10h ; MASK: enable/disable DBC10 block interrupt
   305+ 0008                    INT_MSK1_DCC03:            equ 08h ; MASK: enable/disable DCC03 block interrupt
   306  0004                    INT_MSK1_DCC02:            equ 04h ; MASK: enable/disable DCC02 block interrupt
   307  0002                    INT_MSK1_DBC01:            equ 02h ; MASK: enable/disable DBC01 block interrupt
   308  0001                    INT_MSK1_DBC00:            equ 01h ; MASK: enable/disable DBC00 block interrupt
   309                          
   310  00DF                    INT_MSK2:     equ DFh			; Custom block Mask Register			   (RW)
   311  0010                    INT_MSK2_SARADC:           equ 10h ; MASK: enable/disable SARADC block interrupt
   312  0020                    INT_MSK2_CSD0:             equ 20h ; MASK: enable/disable CSD0 block interrupt
   313  0040                    INT_MSK2_CSD1:             equ 40h ; MASK: enable/disable CSD1 block interrupt
   314  0080                    INT_MSK2_RTC:              equ 80h ; MASK: enable/disable RTC block interrupt
   315                          
   316  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   317  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   318                          
   319                          ;------------------------------------------------------
   320                          ;  MAC Registers
   321                          ;------------------------------------------------------
   322                          
   323  00E8                    MUL0_X:       equ 0E8h          ; Multiply Input X Register                (W)
   324  00E9                    MUL0_Y:       equ 0E9h          ; Multiply Input Y Register                (W)
   325  00EA                    MUL0_DH:      equ 0EAh          ; Multiply Result High Byte Register       (R)
   326  00EB                    MUL0_DL:      equ 0EBh          ; Multiply Result Low Byte Register        (R)
   327                          
   328  00EC                    ACC0_DR1:     equ 0ECh          ; Accumulator Data Register 1              (RW)
   329+ 00ED                    ACC0_DR0:     equ 0EDh          ; Accumulator Data Register 0              (RW)
   330+ 00EE                    ACC0_DR3:     equ 0EEh          ; Accumulator Data Register 3              (RW)
   331  00EF                    ACC0_DR2:     equ 0EFh          ; Accumulator Data Register 2              (RW)
   332                          
   333                          ; DECIMATOR Control Registers
   334  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   335  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   336                          
   337                          ;------------------------------------------------------
   338                          ;  System Status and Control Registers
   339                          ;
   340                          ;  Note: The following registers are mapped into both
   341                          ;        register bank 0 AND register bank 1.
   342                          ;------------------------------------------------------
   343  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   344                                                             ; Use FLAG_ masks defined at top of file
   345                          
   346  00FD                    DAC_D:        equ 0FDh		   ; DAC Data Register                        (RW)
   347                          
   348  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   349  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: flag, Internal Reset Status bit
   350  0010                    CPU_SCR1_SLIMO:         equ 10h	   ; MASK: Slow IMO (internal main osc) enable
   351  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   352  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   353  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   354                          
   355  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   356  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   357  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   358  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   359  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   360  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   361                          
   362                          ;------------------------------------------------------
   363                          ;  Neon Capsense Digital Control Registers
   364                          ;------------------------------------------------------
   365  0050                    CSD0_DR0_L:				equ 50h		; Capsense 0 data low 0				(RW)
   366  0054                    CSD0_DR0_H:				equ 54h		; Capsense 0 data high 0			(RW)
   367  0058                    CSD1_DR0_L:				equ 58h		; Capsense 1 data low 0				(RW)
   368  005C                    CSD1_DR0_H:				equ 5Ch		; Capsense 1 data high 0			(RW)
   369  0051                    CSD0_DR1_L:				equ 51h		; Capsense 0 data low 1				(RW)
   370  0055                    CSD0_DR1_H:				equ 55h		; Capsense 0 data high 1			(RW)
   371  0059                    CSD1_DR1_L:				equ 59h		; Capsense 1 data low 1				(RW)
   372  005D                    CSD1_DR1_H:				equ 5Dh		; Capsense 1 data high 1			(RW)
   373  0052                    CSD0_CNT_L:				equ 52h		; Capsense 0 counter low			(RW)
   374  0056                    CSD0_CNT_H:				equ 56h		; Capsense 0 counter high			(RW)
   375  005A                    CSD1_CNT_L:				equ 5Ah		; Capsense 1 counter low			(RW)
   376  005E                    CSD1_CNT_H:				equ	5Eh		; Capsense 1 counter high			(RW)
   377  0053                    CSD0_CR0:				equ 53h		; Capsense 0 control 0				(RW)
   378  005B                    CSD1_CR0:				equ 5Bh		; Capsense 1 control 0				(RW)
   379  0057                    CSD0_CR1:				equ 57h		; Capsense 0 control 1				(RW)
   380  005F                    CSD1_CR1:				equ 5Fh		; Capsense 1 control 1				(RW)
   381                          
   382                          ;------------------------------------------------------
   383                          ;  Neon Analog Registers
   384                          ;------------------------------------------------------
   385  0065                    ASY_CR:					equ 65h		; Analog Synchronization Control	(RW)
   386  006A                    ADC_DH:					equ 6Ah		; ADC data high						(RW)
   387  006B                    ADC_DL:					equ 6Bh		; ADC data low						(RW)
   388  00C8                    PWMVREF0:				equ C8h		; PWM Voltage Reference 0			(RW)
   389  00C9                    PWMVREF1:				equ C9h		; PWM Voltage Reference 1			(RW)
   390  00CB                    PWMSRC:					equ CBh		; PWM Source						(RW)
   391  00CA                    IDACMODE:				equ CAh		; IDAC Mode							(RW)
   392  00FC                    IDACR_D:				equ FCh		; Analog Mux DAC data 0				(RW)
   393  00FD                    IDACL_D:				equ FDh		; Analog Mux DAC data 1				(RW)
   394                          
   395                          ;------------------------------------------------------
   396                          ;  Neon Digital Registers
   397                          ;------------------------------------------------------
   398  00B7                    RDI0DSM:				equ B7h		; Row Digital Interconnect input select 0	(RW)
   399  00BF                    RDI1DSM:				equ BFh		; Row Digital Interconnect input select 1	(RW)
   400                          
   401                          ;------------------------------------------------------
   402                          ;  Neon Test Registers
   403                          ;------------------------------------------------------
   404  00CC                    TSCR0:					equ CCh		; Tsource 0							(RW)
   405  00CD                    TSCMPH:					equ CDh		; TSCMP high						(RW)
   406  00CE                    TSCMPL:					equ CEh		; TSCMP low							(RW)
   407  00CF                    TSCR1:					equ CFh		; Tsource 1							(RW)
   408                          
   409                          ;;=============================================================================
   410                          ;;      Register Space, Bank 1
   411                          ;;=============================================================================
   412                          
   413                          ;------------------------------------------------
   414                          ;  Port Registers
   415                          ;  Note: Also see this address range in Bank 0.
   416                          ;------------------------------------------------
   417                          ; Port 0
   418  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   419  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   420  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   421  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   422                          
   423                          ; Port 1
   424  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   425  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   426  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   427  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   428                          
   429                          ; Port 2
   430  0008                    PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
   431  0009                    PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
   432  000A                    PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
   433  000B                    PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
   434                          
   435                          ; Port 3
   436  000C                    PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
   437  000D                    PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
   438  000E                    PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
   439  000F                    PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
   440                          
   441                          ; Port 4
   442  0010                    PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
   443  0011                    PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
   444  0012                    PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
   445  0013                    PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
   446                          
   447                          ;------------------------------------------------
   448                          ;  Digital PSoC(tm) block Registers
   449                          ;  Note: Also see this address range in Bank 0.
   450                          ;------------------------------------------------
   451                          
   452                          ; Digital PSoC block 00, Basic Type C
   453  0020                    DBC00FN:      equ 20h          ; Function Register                        (RW)
   454  0021                    DBC00IN:      equ 21h          ;    Input Register                        (RW)
   455  0022                    DBC00OU:      equ 22h          ;   Output Register                        (RW)
   456  0023                    DBC00CR1:     equ 23h          ;   control & status register 1            (RW)
   457                          
   458                          ; Digital PSoC block 01, Basic Type C
   459  0024                    DBC01FN:      equ 24h          ; Function Register                        (RW)
   460  0025                    DBC01IN:      equ 25h          ;    Input Register                        (RW)
   461  0026                    DBC01OU:      equ 26h          ;   Output Register                        (RW)
   462  0027                    DBC01CR1:     equ 27h          ;   control & status register 1            (RW)
   463                          
   464                          ; Digital PSoC block 02, Communications Type C
   465  0028                    DCC02FN:      equ 28h          ; Function Register                        (RW)
   466  0029                    DCC02IN:      equ 29h          ;    Input Register                        (RW)
   467  002A                    DCC02OU:      equ 2Ah          ;   Output Register                        (RW)
   468  002B                    DBC02CR1:     equ 2Bh          ;   control & status register 1            (RW)
   469                          
   470                          ; Digital PSoC block 03, Communications Type C
   471  002C                    DCC03FN:      equ 2Ch          ; Function Register                        (RW)
   472  002D                    DCC03IN:      equ 2Dh          ;    Input Register                        (RW)
   473  002E                    DCC03OU:      equ 2Eh          ;   Output Register                        (RW)
   474  0029                    DBC03CR1:     equ 29h          ;   control & status register 1            (RW)
   475                          
   476                          ; Digital PSoC block 10, Basic Type C
   477  0030                    DBC10FN:      equ 30h          ; Function Register                        (RW)
   478  0031                    DBC10IN:      equ 31h          ;    Input Register                        (RW)
   479  0032                    DBC10OU:      equ 32h          ;   Output Register                        (RW)
   480  0033                    DBC10CR1:     equ 33h          ;   control & status register 1            (RW)
   481                          
   482                          ; Digital PSoC block 11, Basic Type C
   483  0034                    DBC11FN:      equ 34h          ; Function Register                        (RW)
   484  0035                    DBC11IN:      equ 35h          ;    Input Register                        (RW)
   485  0036                    DBC11OU:      equ 36h          ;   Output Register                        (RW)
   486  0037                    DBC11CR1:     equ 37h          ;   control & status register 1            (RW)
   487                          
   488                          ; Digital PSoC block 12, Communications Type C
   489  0038                    DCC12FN:      equ 38h          ; Function Register                        (RW)
   490  0039                    DCC12IN:      equ 39h          ;    Input Register                        (RW)
   491  003A                    DCC12OU:      equ 3Ah          ;   Output Register                        (RW)
   492  003B                    DBC12CR1:     equ 3Bh          ;   control & status register 1            (RW)
   493                          
   494                          ; Digital PSoC block 13, Communications Type C
   495  003C                    DCC13FN:      equ 3Ch          ; Function Register                        (RW)
   496  003D                    DCC13IN:      equ 3Dh          ;    Input Register                        (RW)
   497  003E                    DCC13OU:      equ 3Eh          ;   Output Register                        (RW)
   498  003F                    DBC13CR1:     equ 3Fh          ;   control & status register 1            (RW)
   499                          
   500                          ;------------------------------------------------
   501                          ;  System and Global Resource Registers
   502                          ;  Note: Also see this address range in Bank 0.
   503                          ;------------------------------------------------
   504                          
   505  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   506  00C0                    CLK_CR0_ACOLUMN_3:    equ C0h    ; MASK: Specify clock for analog cloumn
   507  0030                    CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
   508  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   509  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   510                          
   511  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   512  0018                    CLK_CR1_ACLK1:        equ 18h    ; MASK: Digital PSoC block for analog source
   513  0003                    CLK_CR1_ACLK0:        equ 03h    ; MASK: Digital PSoC block for analog source
   514                          
   515  0003                    CLK_CR1_ACLK2:        equ 03h    ; Deprecated do not use
   516                          
   517  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   518  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   519                          
   520  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   521  000F                    AMD_CR0_AMOD0:        equ 0Fh    ; MASK: Modulation source for analog column 0
   522                          
   523  0064                    CMP_GO_EN:    equ 64h          ; Comparator Bus To Global Out Enable      (RW)
   524  0080                    CMP_GO_EN_GOO5:       equ 80h    ; MASK: Selected Col 1 signal to GOO5
   525  0040                    CMP_GO_EN_GOO1:       equ 40h    ; MASK: Selected Col 1 signal to GOO1
   526  0030                    CMP_GO_EN_SEL1:       equ 30h    ; MASK: Column 1 Signal Select
   527  0008                    CMP_GO_EN_GOO4:       equ 08h    ; MASK: Selected Col 0 signal to GOO4
   528  0004                    CMP_GO_EN_GOO0:       equ 04h    ; MASK: Selected Col 0 signal to GOO0
   529  0003                    CMP_GO_EN_SEL0:       equ 03h    ; MASK: Column 0 Signal Select
   530                          
   531  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   532  000F                    AMD_CR1_AMOD1:        equ 0Fh    ; MASK: Modulation ctrl for analog column 1
   533                          
   534  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   535  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   536  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   537                          
   538  006B                    CLK_CR3:      equ 6Bh          ; Analog Clock Source Control Register 3   (RW)
   539  0040                    CLK_CR3_SYS1:         equ 40h    ; MASK: Analog Clock 1 selection
   540  0030                    CLK_CR3_DIVCLK1:      equ 30h    ; MASK: Analog Clock 1 divider
   541  0004                    CLK_CR3_SYS0:         equ 04h    ; MASK: Analog Clock 0 selection
   542  0003                    CLK_CR3_DIVCLK0:      equ 03h    ; MASK: Analog Clock 0 divider
   543                          
   544                          ;------------------------------------------------
   545                          ;  Global Digital Interconnects
   546                          ;------------------------------------------------
   547                          
   548  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   549  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   550  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   551  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   552                          
   553  00A0                    GDI_O_IN_CR:  equ 0A0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   554  00A1                    GDI_E_IN_CR:  equ 0A1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   555  00A2                    GDI_O_OU_CR:  equ 0A2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   556  00A3                    GDI_E_OU_CR:  equ 0A3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   557                          
   558  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   559  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   560                          
   561                          ;------------------------------------------------
   562                          ;  Analog Mux Bus Port Enable Bits
   563                          ;------------------------------------------------
   564  00D8                    MUX_CR0:      equ 0D8h          ; Analog Mux Port 0 Bit Enables Register
   565  00D9                    MUX_CR1:      equ 0D9h          ; Analog Mux Port 1 Bit Enables Register
   566  00DA                    MUX_CR2:      equ 0DAh          ; Analog Mux Port 2 Bit Enables Register
   567  00DB                    MUX_CR3:      equ 0DBh          ; Analog Mux Port 3 Bit Enables Register
   568  00EC                    MUX_CR4:      equ 0ECh          ; Analog Mux Port 4 Bit Enables Register
   569                          
   570                          ;------------------------------------------------
   571                          ;  Clock and System Control Registers
   572                          ;------------------------------------------------
   573                          
   574  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   575  0080                    OSC_GO_EN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   576  0040                    OSC_GO_EN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   577  0020                    OSC_GO_EN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   578  0010                    OSC_GO_EN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   579  0008                    OSC_GO_EN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   580  0004                    OSC_GO_EN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   581  0002                    OSC_GO_EN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   582  0001                    OSC_GO_EN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   583                          
   584  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   585  0003                    OSC_CR4_VC3SEL:       equ 03h    ; MASK: System VC3 Clock source
   586                          
   587  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   588                          
   589  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   590  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   591  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   592  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   593  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   594  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   595  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   596  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   597  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   598  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   599  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   600  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   601  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   602  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   603  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   604  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   605  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   606  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   607                          
   608  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   609  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   610  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   611                          
   612  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   613  0080                    OSC_CR2_PLLGAIN:      equ 80h    ; MASK: High/Low gain
   614  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   615  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   616  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   617                          
   618  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   619  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   620  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   621  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   622  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   623  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   624  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   625  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   626                          
   627  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   628  0008                    VLT_CMP_NOWRITE:      equ 08h    ; MASK: Vcc below Flash Write level
   629  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   630  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   631  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   632                          
   633  00E5                    ADC0_TR:      equ 0E5h          ; ADC Column 0 Trim Register
   634  00E6                    ADC1_TR:      equ 0E6h          ; ADC Column 1 Trim Register
   635                          
   636  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   637  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   638  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   639  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   640                          
   641  00FA                    FLS_PR1:      equ 0FAh          ; Flash Program Register 1                 (RW)
   642  0003                    FLS_PR1_BANK:         equ 03h    ; MASK: Select Active Flash Bank
   643                          
   644  00FD                    DAC_CR0:       equ 0FDh          ; Analog Mux DAC Control Register 0
   645  00DC                    DAC_CR1:       equ 0DCh          ; Analog Mux DAC Control Register 1
   646  0008                    DAC_CR_IRANGE:        equ 08h    ; MASK: Sets the DAC Range low or high
   647  0006                    DAC_CR_OSCMODE:       equ 06h    ; MASK: Defines the reset mode for AMux
   648  0001                    DAC_CR_ENABLE:        equ 01h    ; MASK: Enable/Disable DAC function
   649                          
   650                          ;------------------------------------------------
   651                          ;  I2C Control Registers
   652                          ;------------------------------------------------
   653                          
   654  00AD                    I2C_ADDR:    equ 0ADh          ; I2C Address Register (RW)
   655                          
   656                          ;------------------------------------------------------
   657                          ;  Neon Analog Registers
   658                          ;------------------------------------------------------
   659  0053                    VDAC50CR0:		equ 53h			; V DAC5 control 0				(RW)
   660  0057                    VDAC51CR0:		equ 57h			; V DAC5 control 1				(RW)
   661  00A8                    ADC_CR0:		equ A8h			; ADC control 0					(RW)
   662  00A9                    ADC_CR1:		equ A9h			; ADC control 1					(RW)
   663  00AA                    ADC_CR2:		equ AAh			; ADC control 2					(RW)
   664  00AB                    ADC_CR3TRIM:	equ ABh			; ADC control 3					(RW)
   665  00AC                    ADC_CR4:		equ ACh			; ADC control 4					(RW)
   666  00E7                    VDAC_TRIM:		equ E7h			; V DAC trim					(RW)
   667                          
   668                          ;------------------------------------------------------
   669                          ;  Neon Current Sense CMP Registers
   670                          ;------------------------------------------------------
   671  0050                    CMP0CR1:		equ 50h			; CMP0 control 1				(RW)
   672  0051                    CMP0CR2:		equ 51h			; CMP0 control 2				(RW)
   673  0054                    CMP1CR1:		equ 54h			; CMP1 control 1				(RW)
   674  0055                    CMP1CR2:		equ 55h			; CMP1 control 2				(RW)
   675  0058                    CSCMPCR0:		equ 58h			; CSCMP control 0				(RW)
   676  0059                    CSCMPGOEN:		equ 59h			; CSCMO global out enable		(RW)
   677  005A                    CSLUTCR0:		equ 5Ah			; CSLUT control 0				(RW)
   678  005B                    CMPCOLMUX:		equ 5Bh			; CMP Column Mux				(RW)
   679  005C                    CMPPWMCR:		equ 5Ch			; CMP PWM control				(RW)
   680  005D                    CMPFLTCR:		equ 5Dh			; CMP filter control			(RW)
   681  005E                    CMPCLK1:		equ 5Eh			; CMP clock 1					(RW)
   682  005F                    CMPCLK0:		equ 5Fh			; CMP clock 0					(RW)
   683                          
   684                          ;------------------------------------------------------
   685                          ;  Neon Real Time Clock Registers
   686                          ;------------------------------------------------------
   687  00A4                    RTCH:			equ A4h			; Real time current hour		(RW)
   688  00A5                    RTCM:			equ A5h			; Real time current minute		(RW)
   689  00A6                    RTCS:			equ A6h			; Real time current second		(RW)
   690  00A7                    RTCCR:			equ A7h			; Real time clock control		(RW)
   691                          
   692                          ;------------------------------------------------------
   693                          ;  Analog MUX Config Registers
   694                          ;------------------------------------------------------
   695                          
   696  006A                    AMUX_CFG1:			equ 6Ah  ; Analog MUX Configuration 1
   697  0020                    AMUX_CFG1_GOINVR:	equ 20h  ;
   698  0010                    AMUX_CFG1_GOINVL:  	equ 10h	 ;
   699  000C                    AMUX_CFG1_AMUXMODR:	equ 0Ch	 ;
   700  0003                    AMUX_CFG1_AMUXMODL:	equ 03h	 ;
   701                          
   702                          ;;=============================================================================
   703                          ;;      M8C System Macros
   704                          ;;  These macros should be used when their functions are needed.
   705                          ;;=============================================================================
   706                          
   707                          ;----------------------------------------------------
   708                          ;  Swapping Register Banks
   709                          ;----------------------------------------------------
   710                              macro M8C_SetBank0
   711                              and   F, ~FLAG_XIO_MASK
   712  3D73                        endm
   713                          
   714                              macro M8C_SetBank1
   715                              or    F, FLAG_XIO_MASK
   716  3D73                        endm
   717                          
   718                          ;----------------------------------------------------
   719                          ;  Global Interrupt Enable/Disable
   720                          ;----------------------------------------------------
   721                              macro M8C_EnableGInt
   722                              or    F, FLAG_GLOBAL_IE
   723  3D73                        endm
   724                          
   725                              macro M8C_DisableGInt
   726                              and   F, ~FLAG_GLOBAL_IE
   727  3D73                        endm
   728                          
   729                          ;----------------------------------------------------
   730                          ;  Enable/Disable Interrupt Mask
   731                          ;
   732                          ;  Use the following macros to enable/disable
   733                          ;  bits in the Interrupt mask registers,
   734                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   735                          ;
   736                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   737                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   738                          ;
   739                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   740                          ;        and MASK is the bit set to enable or disable
   741                          ;----------------------------------------------------
   742                          ; Disable Interrupt Bit Mask(s)
   743                              macro M8C_DisableIntMask
   744                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   745  3D73                        endm
   746                          
   747                          ; Enable Interrupt Bit Mask(s)
   748                              macro M8C_EnableIntMask
   749                              or    reg[@0], @1               ; enable specified interrupt enable bit
   750  3D73                        endm
   751                          
   752                          ;----------------------------------------------------
   753                          ;  Clear Posted Interrupt Flag Mask
   754                          ;
   755                          ;  Use the following macros to clear the
   756                          ;  bits in the Interrupt Clear registers,
   757                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   758                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   759                          ;
   760                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   761                          ;        and MASK is the bit set to enable or disable
   762                          ;----------------------------------------------------
   763                              macro M8C_ClearIntFlag
   764                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   765  3D73                        endm
   766                          
   767                          ;----------------------------------------------------
   768                          ;  Power-On Reset & WatchDog Timer Functions
   769                          ;----------------------------------------------------
   770                              macro M8C_EnableWatchDog
   771                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   772  3D73                        endm
   773                          
   774                              macro M8C_ClearWDT
   775                              mov   reg[RES_WDT], 00h
   776  3D73                        endm
   777                          
   778                              macro M8C_ClearWDTAndSleep
   779                              mov   reg[RES_WDT], 38h
   780  3D73                        endm
   781                          
   782                          ;----------------------------------------------------
   783                          ;  Sleep, CPU Stop & Software Reset
   784                          ;----------------------------------------------------
   785                              macro M8C_Sleep
   786                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   787                              ; The next instruction to be executed depends on the state of the
   788                              ; various interrupt enable bits. If some interrupts are enabled
   789                              ; and the global interrupts are disabled, the next instruction will
   790                              ; be the one that follows the invocation of this macro. If global
   791                              ; interrupts are also enabled then the next instruction will be
   792                              ; from the interrupt vector table. If no interrupts are enabled
   793                              ; then the CPU sleeps forever.
   794  3D73                        endm
   795                          
   796                              macro M8C_Stop
   797                              ; In general, you probably don't want to do this, but here's how:
   798                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   799                              ; Next instruction to be executed is located in the interrupt
   800                              ; vector table entry for Power-On Reset.
   801  3D73                        endm
   802                          
   803                              macro M8C_Reset
   804                              ; Restore CPU to the power-on reset state.
   805                              mov A, 0
   806                              SSC
   807                              ; Next non-supervisor instruction will be at interrupt vector 0.
   808  3D73                        endm
   809                          
   810                          ;----------------------------------------------------
   811                          ; ImageCraft Code Compressor Actions
   812                          ;----------------------------------------------------
   813                              ; Suspend Code Compressor
   814                              ; Must not span a RET or RETI instruction
   815                              ; without resuming code compression
   816                              macro Suspend_CodeCompressor
   817                              or   F, 0
   818  3D73                        endm
   819                          
   820                              ; Resume Code Compression
   821                              macro Resume_CodeCompressor
   822                              add  SP, 0
   823                              endm
      + 3D73                    
      + 3D73                    ; end of file m8c.inc
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;
     4                          ;;       FILENAME: Memory.inc
     5                          ;;
     6                          ;;    DESCRIPTION: Memory Model and Stack Parameter Definitions for 
     7                          ;;                 CY8C22045 PSoC devices.
     8                          ;;
     9                          ;;  LAST MODIFIED: August 17, 2004
    10                          ;;
    11                          ;;-----------------------------------------------------------------------------
    12                          ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
    13                          ;;*****************************************************************************
    14                          ;;*****************************************************************************
    15                          ;
    16                          ;
    17                          ;  ******** Define Memory Model and Stack parameters ********
    18                          ;
    19  0001                    IMAGECRAFT: equ 1   
    20  0002                    HITECH: equ 2   
    21  0002                    TOOLCHAIN: equ HITECH   
    22  0001                    SYSTEM_LARGE_MEMORY_MODEL: equ 1   
    23  0000                    SYSTEM_SMALL_MEMORY_MODEL: equ 0   
    24  0003                    SYSTEM_STACK_PAGE: equ 3   
    25  0000                    SYSTEM_STACK_PAGE_OFFSET: equ 0   
    26  0002                    SYSTEM_TOOLS: equ 2   
    27  0000                    SYSTEM_IDXPG_TRACKS_STK_PP: equ 0   
    28  0001                    SYSTEM_IDXPG_TRACKS_IDX_PP: equ 1   
    29  0000                    SYSTEM_MULTIPAGE_STACK: equ 0 
    30                          
    31                          
    32                          ;  ******* Function Class Definitions *******
    33                          ;
    34                          ;  These definitions are used to describe RAM access patterns. They provide
    35                          ;  documentation and they control prologue and epilogue macros that perform
    36                          ;  the necessary housekeeping functions for large memory model devices like
    37                          ;  the CY8C22045.
    38                          
    39  0001                    RAM_USE_CLASS_1:               equ 1   ; PUSH, POP & I/O access
    40  0002                    RAM_USE_CLASS_2:               equ 2   ; Indexed address mode on stack page
    41  0004                    RAM_USE_CLASS_3:               equ 4   ; Indexed address mode to any page
    42  0008                    RAM_USE_CLASS_4:               equ 8   ; Direct/Indirect address mode access
    43                          
    44                          ; ******* Hi Tech Specific *******
    45                          ; Turn on the expansion of all macros by default
    46                          IF (TOOLCHAIN & HITECH)
    47                          OPT EXPAND
    48                          ENDIF
    49                          ; ******* Page Pointer Manipulation Macros *******
    50                          ;
    51                          ;  ******* Page Pointer Manipulation Macros *******
    52                          ;
    53                          ;  Most of the following macros are conditionally compiled so they only
    54                          ;  produce code if the large memory model is selected.
    55                          
    56                             ;-----------------------------------------------
    57                             ;  Set Stack Page Macro
    58                             ;-----------------------------------------------
    59                             ;
    60                             ;  DESC: Modify STK_PP in the large or small memory Models.
    61                             ;
    62                             ; INPUT: Constant (e.g., SYSTEM_STACK_PAGE) that specifies the RAM page on
    63                             ;        which stack operations like PUSH and POP store and retrieve their
    64                             ;        data
    65                             ;
    66                             ;  COST: 8 instruction cycles (in LMM only)
    67                          
    68                             macro RAM_SETPAGE_STK( PG_NUMBER )
    69                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    70                                mov reg[STK_PP], @PG_NUMBER
    71                             ENDIF
    72  3D73                       endm
    73                          
    74                             ;-----------------------------------------------
    75                             ;  Set Current Page Macro
    76                             ;-----------------------------------------------
    77                             ;
    78                             ;  DESC: Modify CUR_PP in the large or small memory Models.
    79                             ;
    80                             ; INPUT: Constant value (e.g., >bFoo) for the RAM page number used in
    81                             ;        calculation of effective direct-mode address operands.
    82                             ;
    83                             ;  COST: 8 instruction cycles (in LMM only)
    84                          
    85                             macro RAM_SETPAGE_CUR( PG_NUMBER )
    86                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    87                                mov reg[CUR_PP], @PG_NUMBER
    88                             ENDIF
    89  3D73                       endm
    90                          
    91                             ;-----------------------------------------------
    92                             ;  Set Index Page Macro
    93                             ;-----------------------------------------------
    94                             ;
    95                             ;  DESC: Modify IDX_PP in the large or small emory Models.
    96                             ;
    97                             ; INPUT: Constant value (e.g., >caFoo) for the RAM page number used in
    98                             ;         calculation of effective index-mode address operands.
    99                             ;
   100                             ;  COST: 8 instruction cycles (in LMM only)
   101                          
   102                             macro RAM_SETPAGE_IDX( PG_NUMBER )
   103                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   104                                mov reg[IDX_PP], @PG_NUMBER
   105                             ENDIF
   106  3D73                       endm
   107                          
   108                             ;-----------------------------------------------
   109                             ;  Set MVI Read Page Macro
   110                             ;-----------------------------------------------
   111                             ;
   112                             ;  DESC: Modify MVR_PP in the large or small memory Models.
   113                             ;
   114                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   115                             ;        calculation of indirect address operands used in the
   116                             ;        "mvi A, [pFoo]" instructions.
   117                             ;
   118                             ;  COST: 8 instruction cycles (in LMM only)
   119                          
   120                             macro RAM_SETPAGE_MVR( PG_NUMBER )
   121                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   122                                mov reg[MVR_PP], @PG_NUMBER
   123                             ENDIF
   124  3D73                       endm
   125                          
   126                             ;-----------------------------------------------
   127                             ;  Set MVI Write Page Macro
   128                             ;-----------------------------------------------
   129                             ;
   130                             ;  DESC: Modify MVW_PP in the large or small memory Models.
   131                             ;
   132                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   133                             ;        calculation of indirect address operands used in the
   134                             ;        "mvi [pFoo], A" instructions.
   135                             ;
   136                             ;  COST: 8 instruction cycles (in LMM only)
   137                          
   138                             macro RAM_SETPAGE_MVW( PG_NUMBER )
   139                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   140                                mov reg[MVW_PP], @PG_NUMBER
   141                             ENDIF
   142  3D73                       endm
   143                          
   144                             ;-----------------------------------------------
   145                             ;  Force Index Page Pointer to Stack Page
   146                             ;-----------------------------------------------
   147                             ;
   148                             ;  DESC: Map index-mode operands onto the stack page by modifying IDX_PP.
   149                             ;        See also RAM_LOCK_INDEX_TO_STACKPAGE.
   150                             ;
   151                             ; INPUT: None
   152                             ;
   153                             ;  COST: 8 instruction cycles (in LMM only)
   154                          
   155                             macro RAM_SETPAGE_IDX2STK
   156                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   157                                IF ( SYSTEM_MULTIPAGE_STACK )
   158                                   mov   A, reg[STK_PP]
   159                                   mov   reg[IDX_PP], A
   160                                ELSE
   161                                   RAM_SETPAGE_IDX SYSTEM_STACK_PAGE
   162                                ENDIF
   163                             ENDIF
   164  3D73                       endm
   165                          
   166                             ;-----------------------------------------------
   167                             ;  Change Memory Mode
   168                             ;-----------------------------------------------
   169                             ;
   170                             ;  DESC: Modify FLAG_PAGEMODE bits in the large and small memory Models.
   171                             ;
   172                             ; INPUT: Constant value for PGMODE bitfield of CPU Flag register, F.
   173                             ;        See FLAG_PGMODE_{x} constants in M8C.INC.
   174                             ;
   175                             ;  COST: 8 instruction cycles (in LMM only)
   176                          
   177                             macro RAM_CHANGE_PAGE_MODE( MODE )
   178                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   179                                and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
   180                                or    F,  FLAG_PGMODE_MASK & @MODE
   181                             ENDIF
   182  3D73                       endm
   183                          
   184                             ;-----------------------------------------------
   185                             ;  Set Large Memory Model Native Paging Mode
   186                             ;-----------------------------------------------
   187                             ;
   188                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   189                             ;        paging mode *IFF* a simple "OR" is guaranteed to work---for
   190                             ;        example, in an ISR, when the PGMODE bits have been cleared
   191                             ;        to zero. If a simple "OR" is not guaranteed to work, use
   192                             ;        the slower RAM_RESTORE_NATIVE_PAGING instead.
   193                             ;
   194                             ; INPUT: none
   195                             ;
   196                             ;  COST: 4 instruction cycles (in LMM only)
   197                          
   198                             macro RAM_SET_NATIVE_PAGING
   199                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   200                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   201                                or    F,  FLAG_PGMODE_11b            ; LMM w/ IndexPage<==>StackPage
   202                             ENDIF ;  PGMODE LOCKED
   203                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   204                                or    F,  FLAG_PGMODE_10b            ; LMM with independent IndexPage
   205                             ENDIF ; PGMODE FREE
   206                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   207  3D73                       endm
   208                          
   209                             ;-----------------------------------------------
   210                             ; Restore Large Memory Model Native Paging Mode
   211                             ;-----------------------------------------------
   212                             ;
   213                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   214                             ;        paging mode. Always works because it clears the PGMODE bits
   215                             ;        before OR-ing in the new ones. See RAM_RESTORE_NATIVE_PAGING
   216                             ;        for a faster method.
   217                             ;
   218                             ; INPUT: none
   219                             ;
   220                             ;  COST: 8 instruction cycles (in LMM only)
   221                          
   222                             macro RAM_RESTORE_NATIVE_PAGING
   223                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   224                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   225                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_11b ; LMM w/ IndexPage<==>StackPage
   226                             ENDIF ;  PGMODE LOCKED
   227                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   228                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b ; LMM with independent IndexPage
   229                             ENDIF ; PGMODE FREE
   230                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   231  3D73                       endm
   232                          
   233                             ;-----------------------------------------------
   234                             ; Force indexed addr mode operands to Stack Pg
   235                             ;-----------------------------------------------
   236                             ;
   237                             ;  DESC: Force instructions that use indexed address mode to reference the
   238                             ;        stack page (as defined by STK_PP). This macro sets the "Indexed
   239                             ;        Stack Mode" bit (LSB) of the PGMODE bit field in the CPU Flag
   240                             ;        register, F. (See also RAM_SETPAGE_IDX2STK, above.)
   241                             ;
   242                             ; INPUT: none
   243                             ;
   244                             ;  COST: 4 instruction cycles (in LMM only)
   245                          
   246                             macro RAM_X_POINTS_TO_STACKPAGE
   247                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   248                                or   F, FLAG_PGMODE_01b
   249                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   250  3D73                       endm
   251                          
   252                             ;-----------------------------------------------
   253                             ;  Force indexed addr mode operands to Index Pg
   254                             ;-----------------------------------------------
   255                             ;
   256                             ;  DESC: Permit instructions that use indexed address mode to reference page
   257                             ;        zero or the page pointed to by the IDX_PP register, depending on the
   258                             ;        setting of the MSb (or "Direct Page Mode" bit) of the PGMODE bits
   259                             ;        in the CPU Flag register, F. (This macro clears the PGMODE LSb.)
   260                             ;
   261                             ; INPUT: none
   262                             ;
   263                             ;  COST: 4 instruction cycles (in LMM only)
   264                          
   265                             macro RAM_X_POINTS_TO_INDEXPAGE
   266                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   267                                and  F, ~FLAG_PGMODE_01b
   268                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   269  3D73                       endm
   270                          
   271                             ;-----------------------------------------------
   272                             ;  Function Prologue
   273                             ;-----------------------------------------------
   274                             ;
   275                             ;  Prologue for functions that run in the LMM and SMM.
   276                             ;
   277                          
   278                             macro RAM_PROLOGUE( ACTUAL_CLASS )
   279                          
   280                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   281                             ; Nothing to do
   282                             ENDIF ; RAM_USE_CLASS_1
   283                          
   284                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   285                                IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   286                                   RAM_X_POINTS_TO_STACKPAGE         ; exit native paging mode!
   287                                ENDIF
   288                             ENDIF ; RAM_USE_CLASS_2
   289                          
   290                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   291                                IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   292                                   RAM_X_POINTS_TO_INDEXPAGE         ; exit native paging mode!
   293                                ENDIF
   294                             ENDIF ; RAM_USE_CLASS_3
   295                          
   296                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   297                             ; Nothing to do
   298                             ENDIF ; RAM_USE_CLASS_4
   299                          
   300  3D73                       endm
   301                          
   302                             ;-----------------------------------------------
   303                             ;  Function Epilogue
   304                             ;-----------------------------------------------
   305                             ;
   306                             ;  Prologue for functions that run in the LMM and SMM.
   307                             ;
   308                          
   309                             macro RAM_EPILOGUE( ACTUAL_CLASS )
   310                          
   311                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   312                             ; Nothing to do
   313                             ENDIF ; RAM_USE_CLASS_1
   314                          
   315                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   316                                RAM_RESTORE_NATIVE_PAGING
   317                             ENDIF ; RAM_USE_CLASS_2
   318                          
   319                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   320                                RAM_RESTORE_NATIVE_PAGING
   321                             ENDIF ; RAM_USE_CLASS_3
   322                          
   323                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   324                             ; Nothing to do
   325                             ENDIF ; RAM_USE_CLASS_4
   326                          
   327  3D73                       endm
   328                          
   329                             ;-----------------------------------------------
   330                             ;  Preserve Register
   331                             ;-----------------------------------------------
   332                             ;
   333                             ;  DESC: Preserve a register value on the stack
   334                             ;
   335                             ; INPUT: Name or address of register in I/O Space
   336                             ;        The I/O bank is an implicit parameter. That is, this function will
   337                             ;        Access the I/O bank currently specified by the CPU Flag register.
   338                             ;
   339                             ;  USES: CPU 'A' register
   340                             ;
   341                             ;  COST: 9 instruction cycles
   342                          
   343                             macro REG_PRESERVE( IOReg )
   344                             mov   A, reg[ @IOReg ]
   345                             push  A
   346  3D73                       endm
   347                          
   348                             ;-----------------------------------------------
   349                             ;  Restore Register
   350                             ;-----------------------------------------------
   351                             ;
   352                             ;  DESC: Restore a register value from the stack
   353                             ;
   354                             ; INPUT: Name or address of register in I/O Space
   355                             ;        The I/O bank is an implicit parameter. That is, this function will
   356                             ;        Access the I/O bank currently specified by the CPU Flag register.
   357                             ;
   358                             ;  USES: CPU 'A' register
   359                             ;
   360                             ;  COST: 10 instruction cycles
   361                          
   362                             macro REG_RESTORE( IOReg )
   363                             pop   A
   364                             mov   reg[ @IOReg ], A
   365  3D73                       endm
   366                          
   367                             ;-----------------------------------------------
   368                             ;  Preserve Volatile Page Pointer Registers
   369                             ;-----------------------------------------------
   370                             ;
   371                             ;  DESC: Invoked by ISRs before switching to the LMM mode and calling
   372                             ;        functions that require on it.
   373                             ;
   374                             ; INPUT: none
   375                             ;
   376                             ;  USES: CPU 'A' register
   377                             ;
   378                             ;  COST: 45 instruction cycles (in LMM only)
   379                          
   380                             macro ISR_PRESERVE_PAGE_POINTERS
   381                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   382                                REG_PRESERVE CUR_PP
   383                                REG_PRESERVE IDX_PP
   384                                REG_PRESERVE MVR_PP
   385                                REG_PRESERVE MVW_PP
   386                             ENDIF
   387  3D73                       endm
   388                          
   389                             ;-----------------------------------------------
   390                             ;  Restore Volatile Page Pointer Registers
   391                             ;-----------------------------------------------
   392                             ;
   393                             ;  DESC: Undo for RAM_PRESERVE_PAGE_POINTERS macro. Invoked by ISRs after
   394                             ;        calling functions that run in the LMM mode and before executing
   395                             ;        the RETI instruction.
   396                             ;
   397                             ; INPUT: none
   398                             ;
   399                             ;  USES: CPU 'A' register
   400                             ;
   401                             ;  COST: 50 instruction cycles (in LMM only)
   402                          
   403                             macro ISR_RESTORE_PAGE_POINTERS
   404                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   405                                REG_RESTORE MVW_PP
   406                                REG_RESTORE MVR_PP
   407                                REG_RESTORE IDX_PP
   408                                REG_RESTORE CUR_PP
   409                             ENDIF
   410                             endm
      + 3D73                    
      + 3D73                    ; end of file Memory.inc
      + 3D73                    ;;*****************************************************************************
;;******************
      +                         ***********************************************************
;;  FILENAME: Timer16.inc
;;   Version: 
      +                         2.6, Updated on 2013/5/19 at 10:44:39
;;  Generated by PSoC Designer 5.4.2946
;;
;;  DESCRIPTION: As
      +                         sembler declarations for the Timer16 user module interface
;;---------------------------------------
      +                         --------------------------------------
;;  Copyright (c) Cypress Semiconductor 2013. All Rights Rese
      +                         rved.
;;*****************************************************************************
;;************
      +                         *****************************************************************
   824                          
   825                          ; end of file m8c.inc
    29  00C0                    FLAG_PGMODE_MASK:  equ 0C0h     ; Paging control for > 256 bytes of RAM
    30  0000                    FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
    31  0040                    FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
    32  0080                    FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
    33  00C0                    FLAG_PGMODE_3:     equ 0C0h       ; Direct to CUR_PP page, indexed to STK_PP page
    34  0000                    FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
    35  0040                    FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
    36  0080                    FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
    37  00C0                    FLAG_PGMODE_11b:   equ 0C0h       ; Same as PGMODE_3
    38  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    39  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    40  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    41  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    42  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    43                          
    44                          
    45                          ;;=============================================================================
    46                          ;;      Register Space, Bank 0
    47                          ;;=============================================================================
    48                          
    49                          ;------------------------------------------------
    50                          ;  Port Registers
    51                          ;  Note: Also see this address range in Bank 1.
    52                          ;------------------------------------------------
    53                          ; Port 0
    54  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    55  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    56  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    57  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    58                          ; Port 1
    59  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    60  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    61  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    62  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    63                          ; Port 2
    64  0008                    PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
    65  0009                    PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
    66  000A                    PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
    67  000B                    PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
    68                          ; Port 3
    69  000C                    PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
    70  000D                    PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
    71  000E                    PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
    72  000F                    PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
    73                          ; Port 4
    74  0010                    PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
    75  0011                    PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
    76  0012                    PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
    77  0013                    PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
    78                          
    79                          ;------------------------------------------------
    80                          ;  Digital PSoC(tm) block Registers
    81                          ;  Note: Also see this address range in Bank 1.
    82                          ;------------------------------------------------
    83                          ; Digital PSoC block 00, Basic Type C
    84  0020                    DBC00DR0:     equ 20h          ; data register 0                          (#)
    85  0021                    DBC00DR1:     equ 21h          ; data register 1                          (W)
    86  0022                    DBC00DR2:     equ 22h          ; data register 2                          (RW)
    87  0023                    DBC00CR0:     equ 23h          ; control & status register 0              (#)
    88                          
    89                          ; Digital PSoC block 01, Basic Type C
    90  0024                    DBC01DR0:     equ 24h          ; data register 0                          (#)
    91  0025                    DBC01DR1:     equ 25h          ; data register 1                          (W)
    92  0026                    DBC01DR2:     equ 26h          ; data register 2                          (RW)
    93  0027                    DBC01CR0:     equ 27h          ; control & status register 0              (#)
    94                          
    95                          ; Digital PSoC block 02, Communications Type C
    96  0028                    DCC02DR0:     equ 28h          ; data register 0                          (#)
    97  0029                    DCC02DR1:     equ 29h          ; data register 1                          (W)
    98  002A                    DCC02DR2:     equ 2Ah          ; data register 2                          (RW)
    99  002B                    DCC02CR0:     equ 2Bh          ; control & status register 0              (#)
   100                          
   101                          ; Digital PSoC block 03, Communications Type C
   102  002C                    DCC03DR0:     equ 2Ch          ; data register 0                          (#)
   103  002D                    DCC03DR1:     equ 2Dh          ; data register 1                          (W)
   104  002E                    DCC03DR2:     equ 2Eh          ; data register 2                          (RW)
   105  002F                    DCC03CR0:     equ 2Fh          ; control & status register 0              (#)
   106                          
   107                          ; Digital PSoC block 10, Basic Type C
   108  0030                    DBC10DR0:     equ 30h          ; data register 0                          (#)
   109  0031                    DBC10DR1:     equ 31h          ; data register 1                          (W)
   110  0032                    DBC10DR2:     equ 32h          ; data register 2                          (RW)
   111  0033                    DBC10CR0:     equ 33h          ; control & status register 0              (#)
   112                          
   113                          ; Digital PSoC block 11, Basic Type C
   114  0034                    DBC11DR0:     equ 34h          ; data register 0                          (#)
   115  0035                    DBC11DR1:     equ 35h          ; data register 1                          (W)
   116  0036                    DBC11DR2:     equ 36h          ; data register 2                          (RW)
   117  0037                    DBC11CR0:     equ 37h          ; control & status register 0              (#)
   118                          
   119                          ; Digital PSoC block 12, Communications Type C
   120  0038                    DCC12DR0:     equ 38h          ; data register 0                          (#)
   121  0039                    DCC12DR1:     equ 39h          ; data register 1                          (W)
   122  003A                    DCC12DR2:     equ 3Ah          ; data register 2                          (RW)
   123  003B                    DCC12CR0:     equ 3Bh          ; control & status register 0              (#)
   124                          
   125                          ; Digital PSoC block 13, Communications Type C
   126  003C                    DCC13DR0:     equ 3Ch          ; data register 0                          (#)
   127  003D                    DCC13DR1:     equ 3Dh          ; data register 1                          (W)
   128  003E                    DCC13DR2:     equ 3Eh          ; data register 2                          (RW)
   129  003F                    DCC13CR0:     equ 3Fh          ; control & status register 0              (#)
   130                          
   131                          ;-------------------------------------
   132                          ;  Analog Control Registers
   133                          ;-------------------------------------
   134  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
   135  00C0                    AMX_IN_ACI3:          equ C0h    ; MASK: column 3 input mux
   136  0030                    AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
   137  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
   138  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
   139                          
   140  0061                    AMUX_CFG:      equ 61h          ; Analog MUX Configuration
   141  0030                    AMUX_CFG_INTCAP:       equ 30h    ;
   142  000E                    AMUX_CFG_MUXCLK:  	  equ 0Eh	 ;
   143  0001                    AMUX_CFG_EN:		  	  equ 01h	 ;
   144                          
   145                          ; old declarations DO NOT USE
   146  0061                    AMUXCFG:      equ 61h          ; Analog MUX Configuration
   147  0030                    AMUXCFG_INTCAP:       equ 30h    ;
   148  000E                    AMUXCFG_MUXCLK:  	  equ 0Eh	 ;
   149  0001                    AMUXCFG_EN:		  	  equ 01h	 ;
   150                          
   151  0062                    PWM_CR:       equ 62h          ; Pulse-Width Modulator Control
   152  0038                    PWM_CR_HIGH:          equ 38h    ; MASK: PWM high time
   153  0006                    PWM_CR_LOW:           equ 06h	 ; MASK: PWM low time
   154  0001                    PWM_CR_EN:            equ 01h	 ; MASK: Enable/Disable PWM function
   155                          
   156  0063                    ARF_CR:       equ 63h          ; Analog Reference Control
   157                          
   158  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus Register           (#)
   159  0080                    CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
   160  0040                    CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
   161  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
   162  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
   163  0008                    CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
   164  0004                    CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
   165  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
   166  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   167                          
   168  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   169  0020                    CMP_CR1_CLDIS1:       equ 20h    ; MASK: Column 1 comparator output latch
   170  0010                    CMP_CR1_CLDIS0:	      equ 10h    ; MASK: Column 0 comparator output latch
   171                          
   172  0068                    ADC0_CR:      equ 68h          ; Analog Column 0 Configuration
   173  0080                    ADC0_CR_CMPST:        equ 80h    ;
   174  0040                    ADC0_CR_LOREN:        equ 40h    ;
   175  0020                    ADC0_CR_SHEN:         equ 20h    ;
   176  0008                    ADC0_CR_CBSRC:        equ 08h    ;
   177  0004                    ADC0_CR_ADCM:         equ 04h    ;
   178  0001                    ADC0_CR_EN:	          equ 01h    ;
   179                          
   180  0069                    ADC1_CR:      equ 69h          ; Analog Column 1 Configuration
   181  0080                    ADC1_CR_CMPST:        equ 80h    ;
   182  0040                    ADC1_CR_LOREN:        equ 40h    ;
   183  0020                    ADC1_CR_SHEN:         equ 20h    ;
   184  0008                    ADC1_CR_CBSRC:        equ 08h    ;
   185  0004                    ADC1_CR_ADCM:         equ 04h    ;
   186  0001                    ADC1_CR_EN:	          equ 01h    ;
   187                          
   188                          ; Continuous Time PSoC block Type E Row 0 Col 0
   189  0072                    ACE00CR1:     equ 72h          ; Control register 1                       (RW)
   190  0073                    ACE00CR2:     equ 73h          ; Control register 2                       (RW)
   191                          
   192                          ; Continuous Time PSoC block Type E Row 0 Col 1
   193  0076                    ACE01CR1:     equ 76h          ; Control register 1                       (RW)
   194  0077                    ACE01CR2:     equ 77h          ; Control register 2                       (RW)
   195                          
   196                          ; Switched Cap PSoC blockType E Row 1 Col 0
   197  0080                    ASE10CR0:     equ 80h          ; Control register 0                       (RW)
   198                          
   199                          ; Switched Cap PSoC blockType E Row 1 Col 1
   200  0084                    ASE11CR0:     equ 84h          ; Control register 0                       (RW)
   201                          
   202                          ;-----------------------------------------------
   203                          ;  Global General Purpose Data Registers
   204                          ;-----------------------------------------------
   205  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   206  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   207  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   208  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   209                          
   210                          ;------------------------------------------------
   211                          ;  Row Digital Interconnects
   212                          ;
   213                          ;  Note: the following registers are mapped into
   214                          ;  both register bank 0 AND register bank 1.
   215                          ;------------------------------------------------
   216                          
   217  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   218  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   219  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   220  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   221  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   222  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   223  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   224                          
   225  00B8                    RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
   226  00B9                    RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
   227  00BA                    RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
   228  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   229  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   230  00BD                    RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
   231  00BE                    RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
   232                          
   233                          ;-----------------------------------------------
   234                          ;  Ram Page Pointers
   235                          ;-----------------------------------------------
   236  00D0                    CUR_PP:      equ 0D0h           ; Current   Page Pointer
   237  00D1                    STK_PP:      equ 0D1h           ; Stack     Page Pointer
   238  00D3                    IDX_PP:      equ 0D3h           ; Index     Page Pointer
   239  00D4                    MVR_PP:      equ 0D4h           ; MVI Read  Page Pointer
   240  00D5                    MVW_PP:      equ 0D5h           ; MVI Write Page Pointer
   241                          
   242                          ;------------------------------------------------
   243                          ;  I2C Configuration Registers
   244                          ;------------------------------------------------
   245  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   246  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   247  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   248  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   249  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   250  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   251  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   252  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   253  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   254  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   255                          
   256  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   257  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   258  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   259  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   260  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   261  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   262  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   263  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   264  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   265                          
   266  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   267                          
   268  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   269  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   270  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   271  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   272  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   273                          
   274                          ;------------------------------------------------
   275                          ;  System and Global Resource Registers
   276                          ;------------------------------------------------
   277  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   278                                                         ; Use INT_MSK0 bit field masks
   279  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   280                                                         ; Use INT_MSK1 bit field masks
   281  00DC                    INT_CLR2:     equ 0DCh          ; Interrupt Clear Register 2               (RW)
   282                                                         ; Use INT_MSK2 bit field masks
   283  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   284                                                         ; Use INT_MSK3 bit field masks
   285                          
   286  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   287  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   288  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   289                          
   290  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   291  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   292  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   293  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   294  0010                    INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
   295  0008                    INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
   296  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   297  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   298  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   299                          
   300  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   301  0080                    INT_MSK1_DCC13:            equ 80h ; MASK: enable/disable DCC13 block interrupt
   302  0040                    INT_MSK1_DCC12:            equ 40h ; MASK: enable/disable DCC12 block interrupt
   303  0020                    INT_MSK1_DBC11:            equ 20h ; MASK: enable/disable DBC11 block interrupt
   304  0010                    INT_MSK1_DBC10:            equ 10h ; MASK: enable/disable DBC10 block interrupt
   305  0008                    INT_MSK1_DCC03:            equ 08h ; MASK: enable/disable DCC03 block interrupt
   306  0004                    INT_MSK1_DCC02:            equ 04h ; MASK: enable/disable DCC02 block interrupt
   307  0002                    INT_MSK1_DBC01:            equ 02h ; MASK: enable/disable DBC01 block interrupt
   308  0001                    INT_MSK1_DBC00:            equ 01h ; MASK: enable/disable DBC00 block interrupt
   309                          
   310  00DF                    INT_MSK2:     equ DFh			; Custom block Mask Register			   (RW)
   311  0010                    INT_MSK2_SARADC:           equ 10h ; MASK: enable/disable SARADC block interrupt
   312  0020                    INT_MSK2_CSD0:             equ 20h ; MASK: enable/disable CSD0 block interrupt
   313  0040                    INT_MSK2_CSD1:             equ 40h ; MASK: enable/disable CSD1 block interrupt
   314  0080                    INT_MSK2_RTC:              equ 80h ; MASK: enable/disable RTC block interrupt
   315                          
   316  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   317  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   318                          
   319                          ;------------------------------------------------------
   320                          ;  MAC Registers
   321                          ;------------------------------------------------------
   322                          
   323  00E8                    MUL0_X:       equ 0E8h          ; Multiply Input X Register                (W)
   324  00E9                    MUL0_Y:       equ 0E9h          ; Multiply Input Y Register                (W)
   325  00EA                    MUL0_DH:      equ 0EAh          ; Multiply Result High Byte Register       (R)
   326  00EB                    MUL0_DL:      equ 0EBh          ; Multiply Result Low Byte Register        (R)
   327                          
   328  00EC                    ACC0_DR1:     equ 0ECh          ; Accumulator Data Register 1              (RW)
   329  00ED                    ACC0_DR0:     equ 0EDh          ; Accumulator Data Register 0              (RW)
   330  00EE                    ACC0_DR3:     equ 0EEh          ; Accumulator Data Register 3              (RW)
   331  00EF                    ACC0_DR2:     equ 0EFh          ; Accumulator Data Register 2              (RW)
   332                          
   333                          ; DECIMATOR Control Registers
   334  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   335  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   336                          
   337                          ;------------------------------------------------------
   338                          ;  System Status and Control Registers
   339                          ;
   340                          ;  Note: The following registers are mapped into both
   341                          ;        register bank 0 AND register bank 1.
   342                          ;------------------------------------------------------
   343  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   344                                                             ; Use FLAG_ masks defined at top of file
   345                          
   346  00FD                    DAC_D:        equ 0FDh		   ; DAC Data Register                        (RW)
   347                          
   348  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   349  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: flag, Internal Reset Status bit
   350  0010                    CPU_SCR1_SLIMO:         equ 10h	   ; MASK: Slow IMO (internal main osc) enable
   351  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   352  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   353  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   354                          
   355  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   356  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   357  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   358  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   359  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   360  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   361                          
   362                          ;------------------------------------------------------
   363                          ;  Neon Capsense Digital Control Registers
   364                          ;------------------------------------------------------
   365  0050                    CSD0_DR0_L:				equ 50h		; Capsense 0 data low 0				(RW)
   366  0054                    CSD0_DR0_H:				equ 54h		; Capsense 0 data high 0			(RW)
   367  0058                    CSD1_DR0_L:				equ 58h		; Capsense 1 data low 0				(RW)
   368  005C                    CSD1_DR0_H:				equ 5Ch		; Capsense 1 data high 0			(RW)
   369  0051                    CSD0_DR1_L:				equ 51h		; Capsense 0 data low 1				(RW)
   370  0055                    CSD0_DR1_H:				equ 55h		; Capsense 0 data high 1			(RW)
   371  0059                    CSD1_DR1_L:				equ 59h		; Capsense 1 data low 1				(RW)
   372  005D                    CSD1_DR1_H:				equ 5Dh		; Capsense 1 data high 1			(RW)
   373  0052                    CSD0_CNT_L:				equ 52h		; Capsense 0 counter low			(RW)
   374  0056                    CSD0_CNT_H:				equ 56h		; Capsense 0 counter high			(RW)
   375  005A                    CSD1_CNT_L:				equ 5Ah		; Capsense 1 counter low			(RW)
   376  005E                    CSD1_CNT_H:				equ	5Eh		; Capsense 1 counter high			(RW)
   377  0053                    CSD0_CR0:				equ 53h		; Capsense 0 control 0				(RW)
   378  005B                    CSD1_CR0:				equ 5Bh		; Capsense 1 control 0				(RW)
   379  0057                    CSD0_CR1:				equ 57h		; Capsense 0 control 1				(RW)
   380  005F                    CSD1_CR1:				equ 5Fh		; Capsense 1 control 1				(RW)
   381                          
   382                          ;------------------------------------------------------
   383                          ;  Neon Analog Registers
   384                          ;------------------------------------------------------
   385  0065                    ASY_CR:					equ 65h		; Analog Synchronization Control	(RW)
   386  006A                    ADC_DH:					equ 6Ah		; ADC data high						(RW)
   387  006B                    ADC_DL:					equ 6Bh		; ADC data low						(RW)
   388  00C8                    PWMVREF0:				equ C8h		; PWM Voltage Reference 0			(RW)
   389  00C9                    PWMVREF1:				equ C9h		; PWM Voltage Reference 1			(RW)
   390  00CB                    PWMSRC:					equ CBh		; PWM Source						(RW)
   391  00CA                    IDACMODE:				equ CAh		; IDAC Mode							(RW)
   392  00FC                    IDACR_D:				equ FCh		; Analog Mux DAC data 0				(RW)
   393  00FD                    IDACL_D:				equ FDh		; Analog Mux DAC data 1				(RW)
   394                          
   395                          ;------------------------------------------------------
   396                          ;  Neon Digital Registers
   397                          ;------------------------------------------------------
   398  00B7                    RDI0DSM:				equ B7h		; Row Digital Interconnect input select 0	(RW)
   399  00BF                    RDI1DSM:				equ BFh		; Row Digital Interconnect input select 1	(RW)
   400                          
   401                          ;------------------------------------------------------
   402                          ;  Neon Test Registers
   403                          ;------------------------------------------------------
   404  00CC                    TSCR0:					equ CCh		; Tsource 0							(RW)
   405  00CD                    TSCMPH:					equ CDh		; TSCMP high						(RW)
   406  00CE                    TSCMPL:					equ CEh		; TSCMP low							(RW)
   407  00CF                    TSCR1:					equ CFh		; Tsource 1							(RW)
   408                          
   409                          ;;=============================================================================
   410                          ;;      Register Space, Bank 1
   411                          ;;=============================================================================
   412                          
   413                          ;------------------------------------------------
   414                          ;  Port Registers
   415                          ;  Note: Also see this address range in Bank 0.
   416                          ;------------------------------------------------
   417                          ; Port 0
   418  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   419  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   420  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   421  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   422                          
   423                          ; Port 1
   424  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   425  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   426  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   427  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   428                          
   429                          ; Port 2
   430  0008                    PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
   431  0009                    PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
   432  000A                    PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
   433  000B                    PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
   434                          
   435                          ; Port 3
   436  000C                    PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
   437  000D                    PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
   438  000E                    PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
   439  000F                    PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
   440                          
   441                          ; Port 4
   442  0010                    PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
   443  0011                    PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
   444  0012                    PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
   445  0013                    PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
   446                          
   447                          ;------------------------------------------------
   448                          ;  Digital PSoC(tm) block Registers
   449                          ;  Note: Also see this address range in Bank 0.
   450                          ;------------------------------------------------
   451                          
   452                          ; Digital PSoC block 00, Basic Type C
   453  0020                    DBC00FN:      equ 20h          ; Function Register                        (RW)
   454  0021                    DBC00IN:      equ 21h          ;    Input Register                        (RW)
   455  0022                    DBC00OU:      equ 22h          ;   Output Register                        (RW)
   456  0023                    DBC00CR1:     equ 23h          ;   control & status register 1            (RW)
   457                          
   458                          ; Digital PSoC block 01, Basic Type C
   459  0024                    DBC01FN:      equ 24h          ; Function Register                        (RW)
   460  0025                    DBC01IN:      equ 25h          ;    Input Register                        (RW)
   461  0026                    DBC01OU:      equ 26h          ;   Output Register                        (RW)
   462  0027                    DBC01CR1:     equ 27h          ;   control & status register 1            (RW)
   463                          
   464                          ; Digital PSoC block 02, Communications Type C
   465  0028                    DCC02FN:      equ 28h          ; Function Register                        (RW)
   466  0029                    DCC02IN:      equ 29h          ;    Input Register                        (RW)
   467  002A                    DCC02OU:      equ 2Ah          ;   Output Register                        (RW)
   468  002B                    DBC02CR1:     equ 2Bh          ;   control & status register 1            (RW)
   469                          
   470                          ; Digital PSoC block 03, Communications Type C
   471  002C                    DCC03FN:      equ 2Ch          ; Function Register                        (RW)
   472  002D                    DCC03IN:      equ 2Dh          ;    Input Register                        (RW)
   473  002E                    DCC03OU:      equ 2Eh          ;   Output Register                        (RW)
   474  0029                    DBC03CR1:     equ 29h          ;   control & status register 1            (RW)
   475                          
   476                          ; Digital PSoC block 10, Basic Type C
   477  0030                    DBC10FN:      equ 30h          ; Function Register                        (RW)
   478  0031                    DBC10IN:      equ 31h          ;    Input Register                        (RW)
   479  0032                    DBC10OU:      equ 32h          ;   Output Register                        (RW)
   480  0033                    DBC10CR1:     equ 33h          ;   control & status register 1            (RW)
   481                          
   482                          ; Digital PSoC block 11, Basic Type C
   483  0034                    DBC11FN:      equ 34h          ; Function Register                        (RW)
   484  0035                    DBC11IN:      equ 35h          ;    Input Register                        (RW)
   485  0036                    DBC11OU:      equ 36h          ;   Output Register                        (RW)
   486  0037                    DBC11CR1:     equ 37h          ;   control & status register 1            (RW)
   487                          
   488                          ; Digital PSoC block 12, Communications Type C
   489  0038                    DCC12FN:      equ 38h          ; Function Register                        (RW)
   490  0039                    DCC12IN:      equ 39h          ;    Input Register                        (RW)
   491  003A                    DCC12OU:      equ 3Ah          ;   Output Register                        (RW)
   492  003B                    DBC12CR1:     equ 3Bh          ;   control & status register 1            (RW)
   493                          
   494                          ; Digital PSoC block 13, Communications Type C
   495  003C                    DCC13FN:      equ 3Ch          ; Function Register                        (RW)
   496  003D                    DCC13IN:      equ 3Dh          ;    Input Register                        (RW)
   497  003E                    DCC13OU:      equ 3Eh          ;   Output Register                        (RW)
   498  003F                    DBC13CR1:     equ 3Fh          ;   control & status register 1            (RW)
   499                          
   500                          ;------------------------------------------------
   501                          ;  System and Global Resource Registers
   502                          ;  Note: Also see this address range in Bank 0.
   503                          ;------------------------------------------------
   504                          
   505  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   506  00C0                    CLK_CR0_ACOLUMN_3:    equ C0h    ; MASK: Specify clock for analog cloumn
   507  0030                    CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
   508  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   509  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   510                          
   511  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   512  0018                    CLK_CR1_ACLK1:        equ 18h    ; MASK: Digital PSoC block for analog source
   513  0003                    CLK_CR1_ACLK0:        equ 03h    ; MASK: Digital PSoC block for analog source
   514                          
   515  0003                    CLK_CR1_ACLK2:        equ 03h    ; Deprecated do not use
   516                          
   517  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   518  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   519                          
   520  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   521  000F                    AMD_CR0_AMOD0:        equ 0Fh    ; MASK: Modulation source for analog column 0
   522                          
   523  0064                    CMP_GO_EN:    equ 64h          ; Comparator Bus To Global Out Enable      (RW)
   524  0080                    CMP_GO_EN_GOO5:       equ 80h    ; MASK: Selected Col 1 signal to GOO5
   525  0040                    CMP_GO_EN_GOO1:       equ 40h    ; MASK: Selected Col 1 signal to GOO1
   526  0030                    CMP_GO_EN_SEL1:       equ 30h    ; MASK: Column 1 Signal Select
   527  0008                    CMP_GO_EN_GOO4:       equ 08h    ; MASK: Selected Col 0 signal to GOO4
   528  0004                    CMP_GO_EN_GOO0:       equ 04h    ; MASK: Selected Col 0 signal to GOO0
   529  0003                    CMP_GO_EN_SEL0:       equ 03h    ; MASK: Column 0 Signal Select
   530                          
   531  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   532  000F                    AMD_CR1_AMOD1:        equ 0Fh    ; MASK: Modulation ctrl for analog column 1
   533                          
   534  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   535  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   536  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   537                          
   538  006B                    CLK_CR3:      equ 6Bh          ; Analog Clock Source Control Register 3   (RW)
   539  0040                    CLK_CR3_SYS1:         equ 40h    ; MASK: Analog Clock 1 selection
   540  0030                    CLK_CR3_DIVCLK1:      equ 30h    ; MASK: Analog Clock 1 divider
   541  0004                    CLK_CR3_SYS0:         equ 04h    ; MASK: Analog Clock 0 selection
   542  0003                    CLK_CR3_DIVCLK0:      equ 03h    ; MASK: Analog Clock 0 divider
   543                          
   544                          ;------------------------------------------------
   545                          ;  Global Digital Interconnects
   546                          ;------------------------------------------------
   547                          
   548  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   549  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   550  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   551  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   552                          
   553  00A0                    GDI_O_IN_CR:  equ 0A0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   554  00A1                    GDI_E_IN_CR:  equ 0A1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   555  00A2                    GDI_O_OU_CR:  equ 0A2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   556  00A3                    GDI_E_OU_CR:  equ 0A3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   557                          
   558  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   559  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   560                          
   561                          ;------------------------------------------------
   562                          ;  Analog Mux Bus Port Enable Bits
   563                          ;------------------------------------------------
   564  00D8                    MUX_CR0:      equ 0D8h          ; Analog Mux Port 0 Bit Enables Register
   565  00D9                    MUX_CR1:      equ 0D9h          ; Analog Mux Port 1 Bit Enables Register
   566  00DA                    MUX_CR2:      equ 0DAh          ; Analog Mux Port 2 Bit Enables Register
   567  00DB                    MUX_CR3:      equ 0DBh          ; Analog Mux Port 3 Bit Enables Register
   568  00EC                    MUX_CR4:      equ 0ECh          ; Analog Mux Port 4 Bit Enables Register
   569                          
   570                          ;------------------------------------------------
   571                          ;  Clock and System Control Registers
   572                          ;------------------------------------------------
   573                          
   574  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   575  0080                    OSC_GO_EN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   576  0040                    OSC_GO_EN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   577  0020                    OSC_GO_EN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   578  0010                    OSC_GO_EN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   579  0008                    OSC_GO_EN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   580  0004                    OSC_GO_EN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   581  0002                    OSC_GO_EN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   582  0001                    OSC_GO_EN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   583                          
   584  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   585  0003                    OSC_CR4_VC3SEL:       equ 03h    ; MASK: System VC3 Clock source
   586                          
   587  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   588                          
   589  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   590  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   591  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   592  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   593  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   594  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   595  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   596  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   597  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   598  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   599  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   600  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   601  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   602  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   603  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   604  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   605  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   606  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   607                          
   608  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   609  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   610  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   611                          
   612  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   613  0080                    OSC_CR2_PLLGAIN:      equ 80h    ; MASK: High/Low gain
   614  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   615  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   616  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   617                          
   618  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   619  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   620  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   621  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   622  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   623  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   624  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   625  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   626                          
   627  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   628  0008                    VLT_CMP_NOWRITE:      equ 08h    ; MASK: Vcc below Flash Write level
   629  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   630  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   631  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   632                          
   633  00E5                    ADC0_TR:      equ 0E5h          ; ADC Column 0 Trim Register
   634  00E6                    ADC1_TR:      equ 0E6h          ; ADC Column 1 Trim Register
   635                          
   636  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   637  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   638  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   639  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   640                          
   641  00FA                    FLS_PR1:      equ 0FAh          ; Flash Program Register 1                 (RW)
   642  0003                    FLS_PR1_BANK:         equ 03h    ; MASK: Select Active Flash Bank
   643                          
   644  00FD                    DAC_CR0:       equ 0FDh          ; Analog Mux DAC Control Register 0
   645  00DC                    DAC_CR1:       equ 0DCh          ; Analog Mux DAC Control Register 1
   646  0008                    DAC_CR_IRANGE:        equ 08h    ; MASK: Sets the DAC Range low or high
   647  0006                    DAC_CR_OSCMODE:       equ 06h    ; MASK: Defines the reset mode for AMux
   648  0001                    DAC_CR_ENABLE:        equ 01h    ; MASK: Enable/Disable DAC function
   649                          
   650                          ;------------------------------------------------
   651                          ;  I2C Control Registers
   652                          ;------------------------------------------------
   653                          
   654  00AD                    I2C_ADDR:    equ 0ADh          ; I2C Address Register (RW)
   655                          
   656                          ;------------------------------------------------------
   657                          ;  Neon Analog Registers
   658                          ;------------------------------------------------------
   659  0053                    VDAC50CR0:		equ 53h			; V DAC5 control 0				(RW)
   660  0057                    VDAC51CR0:		equ 57h			; V DAC5 control 1				(RW)
   661  00A8                    ADC_CR0:		equ A8h			; ADC control 0					(RW)
   662  00A9                    ADC_CR1:		equ A9h			; ADC control 1					(RW)
   663  00AA                    ADC_CR2:		equ AAh			; ADC control 2					(RW)
   664  00AB                    ADC_CR3TRIM:	equ ABh			; ADC control 3					(RW)
   665  00AC                    ADC_CR4:		equ ACh			; ADC control 4					(RW)
   666  00E7                    VDAC_TRIM:		equ E7h			; V DAC trim					(RW)
   667                          
   668                          ;------------------------------------------------------
   669                          ;  Neon Current Sense CMP Registers
   670                          ;------------------------------------------------------
   671  0050                    CMP0CR1:		equ 50h			; CMP0 control 1				(RW)
   672  0051                    CMP0CR2:		equ 51h			; CMP0 control 2				(RW)
   673  0054                    CMP1CR1:		equ 54h			; CMP1 control 1				(RW)
   674  0055                    CMP1CR2:		equ 55h			; CMP1 control 2				(RW)
   675  0058                    CSCMPCR0:		equ 58h			; CSCMP control 0				(RW)
   676  0059                    CSCMPGOEN:		equ 59h			; CSCMO global out enable		(RW)
   677  005A                    CSLUTCR0:		equ 5Ah			; CSLUT control 0				(RW)
   678  005B                    CMPCOLMUX:		equ 5Bh			; CMP Column Mux				(RW)
   679  005C                    CMPPWMCR:		equ 5Ch			; CMP PWM control				(RW)
   680  005D                    CMPFLTCR:		equ 5Dh			; CMP filter control			(RW)
   681  005E                    CMPCLK1:		equ 5Eh			; CMP clock 1					(RW)
   682  005F                    CMPCLK0:		equ 5Fh			; CMP clock 0					(RW)
   683                          
   684                          ;------------------------------------------------------
   685                          ;  Neon Real Time Clock Registers
   686                          ;------------------------------------------------------
   687  00A4                    RTCH:			equ A4h			; Real time current hour		(RW)
   688  00A5                    RTCM:			equ A5h			; Real time current minute		(RW)
   689  00A6                    RTCS:			equ A6h			; Real time current second		(RW)
   690  00A7                    RTCCR:			equ A7h			; Real time clock control		(RW)
   691                          
   692                          ;------------------------------------------------------
   693                          ;  Analog MUX Config Registers
   694                          ;------------------------------------------------------
   695                          
   696  006A                    AMUX_CFG1:			equ 6Ah  ; Analog MUX Configuration 1
   697  0020                    AMUX_CFG1_GOINVR:	equ 20h  ;
   698  0010                    AMUX_CFG1_GOINVL:  	equ 10h	 ;
   699  000C                    AMUX_CFG1_AMUXMODR:	equ 0Ch	 ;
   700  0003                    AMUX_CFG1_AMUXMODL:	equ 03h	 ;
   701                          
   702                          ;;=============================================================================
   703                          ;;      M8C System Macros
   704                          ;;  These macros should be used when their functions are needed.
   705                          ;;=============================================================================
   706                          
   707                          ;----------------------------------------------------
   708                          ;  Swapping Register Banks
   709                          ;----------------------------------------------------
   710                              macro M8C_SetBank0
   711                              and   F, ~FLAG_XIO_MASK
   712  3D73                        endm
   713                          
   714                              macro M8C_SetBank1
   715                              or    F, FLAG_XIO_MASK
   716  3D73                        endm
   717                          
   718                          ;----------------------------------------------------
   719                          ;  Global Interrupt Enable/Disable
   720                          ;----------------------------------------------------
   721                              macro M8C_EnableGInt
   722                              or    F, FLAG_GLOBAL_IE
   723  3D73                        endm
   724                          
   725                              macro M8C_DisableGInt
   726                              and   F, ~FLAG_GLOBAL_IE
   727  3D73                        endm
   728                          
   729                          ;----------------------------------------------------
   730                          ;  Enable/Disable Interrupt Mask
   731                          ;
   732                          ;  Use the following macros to enable/disable
   733                          ;  bits in the Interrupt mask registers,
   734                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   735                          ;
   736                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   737                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   738                          ;
   739                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   740                          ;        and MASK is the bit set to enable or disable
   741                          ;----------------------------------------------------
   742                          ; Disable Interrupt Bit Mask(s)
   743                              macro M8C_DisableIntMask
   744                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   745  3D73                        endm
   746                          
   747                          ; Enable Interrupt Bit Mask(s)
   748                              macro M8C_EnableIntMask
   749                              or    reg[@0], @1               ; enable specified interrupt enable bit
   750  3D73                        endm
   751                          
   752                          ;----------------------------------------------------
   753                          ;  Clear Posted Interrupt Flag Mask
   754                          ;
   755                          ;  Use the following macros to clear the
   756                          ;  bits in the Interrupt Clear registers,
   757                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   758                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   759                          ;
   760                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   761                          ;        and MASK is the bit set to enable or disable
   762                          ;----------------------------------------------------
   763                              macro M8C_ClearIntFlag
   764                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   765  3D73                        endm
   766                          
   767                          ;----------------------------------------------------
   768                          ;  Power-On Reset & WatchDog Timer Functions
   769                          ;----------------------------------------------------
   770                              macro M8C_EnableWatchDog
   771                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   772  3D73                        endm
   773                          
   774                              macro M8C_ClearWDT
   775                              mov   reg[RES_WDT], 00h
   776  3D73                        endm
   777                          
   778                              macro M8C_ClearWDTAndSleep
   779                              mov   reg[RES_WDT], 38h
   780  3D73                        endm
   781                          
   782                          ;----------------------------------------------------
   783                          ;  Sleep, CPU Stop & Software Reset
   784                          ;----------------------------------------------------
   785                              macro M8C_Sleep
   786                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   787                              ; The next instruction to be executed depends on the state of the
   788                              ; various interrupt enable bits. If some interrupts are enabled
   789                              ; and the global interrupts are disabled, the next instruction will
   790                              ; be the one that follows the invocation of this macro. If global
   791                              ; interrupts are also enabled then the next instruction will be
   792                              ; from the interrupt vector table. If no interrupts are enabled
   793                              ; then the CPU sleeps forever.
   794  3D73                        endm
   795                          
   796                              macro M8C_Stop
   797                              ; In general, you probably don't want to do this, but here's how:
   798                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   799                              ; Next instruction to be executed is located in the interrupt
   800                              ; vector table entry for Power-On Reset.
   801  3D73                        endm
   802                          
   803                              macro M8C_Reset
   804                              ; Restore CPU to the power-on reset state.
   805                              mov A, 0
   806                              SSC
   807                              ; Next non-supervisor instruction will be at interrupt vector 0.
   808  3D73                        endm
   809                          
   810                          ;----------------------------------------------------
   811                          ; ImageCraft Code Compressor Actions
   812                          ;----------------------------------------------------
   813                              ; Suspend Code Compressor
   814                              ; Must not span a RET or RETI instruction
   815                              ; without resuming code compression
   816                              macro Suspend_CodeCompressor
   817                              or   F, 0
   818  3D73                        endm
   819                          
   820                              ; Resume Code Compression
   821                              macro Resume_CodeCompressor
   822                              add  SP, 0
   823  3D73                        endm
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  FILENAME: Timer16.inc
     4                          ;;   Version: 2.6, Updated on 2013/5/19 at 10:44:39
     5                          ;;  Generated by PSoC Designer 5.4.2946
     6                          ;;
     7                          ;;  DESCRIPTION: Assembler declarations for the Timer16 user module interface
     8                          ;;-----------------------------------------------------------------------------
     9                          ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
    10                          ;;*****************************************************************************
    11                          ;;*****************************************************************************
    12                          
    13                          include "m8c.inc"
    14                          
    15                          
    16                          ;--------------------------------------------------
    17                          ; Constants for Timer16 API's.
    18                          ;--------------------------------------------------
    19                          
    20  0001                    Timer16_CONTROL_REG_START_BIT:             equ 0x01    ; Control register start bit
    21  00E1                    Timer16_INT_REG:                           equ 0x0e1
    22  0002                    Timer16_INT_MASK:                          equ 0x02
    23                          
    24                          
    25                          ;--------------------------------------------------
    26                          ; Constants for Timer16 user defined values
    27                          ;--------------------------------------------------
    28                          
    29  2580                    Timer16_PERIOD:                            equ 0x2580
    30  2328                    Timer16_COMPARE_VALUE:                     equ 0x2328
    31                          
    32                          
    33                          ;--------------------------------------------------
    34                          ; Register Address Constants for Timer16
    35                          ;--------------------------------------------------
    36                          
    37  0020                    Timer16_COUNTER_LSB_REG:               equ 0x20   ; DR0 Counter register
    38  0024                    Timer16_COUNTER_MSB_REG:               equ 0x24
    39  0021                    Timer16_PERIOD_LSB_REG:                equ 0x21   ; DR1 Period register
    40  0025                    Timer16_PERIOD_MSB_REG:                equ 0x25
    41  0022                    Timer16_COMPARE_LSB_REG:               equ 0x22   ; DR2 CompareValue register
    42  0026                    Timer16_COMPARE_MSB_REG:               equ 0x26
    43  0023                    Timer16_CONTROL_LSB_REG:               equ 0x23   ; Control register
    44  0027                    Timer16_CONTROL_MSB_REG:               equ 0x27
    45  0020                    Timer16_FUNC_LSB_REG:                  equ 0x20   ; Function register
    46  0024                    Timer16_FUNC_MSB_REG:                  equ 0x24
    47  0021                    Timer16_INPUT_LSB_REG:                 equ 0x21   ; Input register
    48  0025                    Timer16_INPUT_MSB_REG:                 equ 0x25
    49  0022                    Timer16_OUTPUT_LSB_REG:                equ 0x22   ; Output register
    50  0026                    Timer16_OUTPUT_MSB_REG:                equ 0x26
    51                          
    52                          
    53                          ;--------------------------------------------------
    54                          ; Timer16 Macro 'Functions'
    55                          ;--------------------------------------------------
    56                          
    57                             macro Timer16_Start_M
    58                             or    reg[Timer16_CONTROL_LSB_REG],  Timer16_CONTROL_REG_START_BIT
    59  3D73                       endm
    60                          
    61                             macro Timer16_Stop_M
    62                             and   reg[Timer16_CONTROL_LSB_REG], ~Timer16_CONTROL_REG_START_BIT
    63  3D73                       endm
    64                          
    65                             macro Timer16_EnableInt_M
    66                             M8C_EnableIntMask Timer16_INT_REG, Timer16_INT_MASK
    67  3D73                       endm
    68                          
    69                             macro Timer16_DisableInt_M
    70                             M8C_DisableIntMask Timer16_INT_REG, Timer16_INT_MASK
    71  3D73                       endm
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  FILENAME: Timer16.asm
     4                          ;;   Version: 2.6, Updated on 2013/5/19 at 10:44:39
     5                          ;;  Generated by PSoC Designer 5.4.2946
     6                          ;;
     7                          ;;  DESCRIPTION: Timer16 User Module software implementation file
     8                          ;;
     9                          ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
    10                          ;;        arguments and observe the associated "Registers are volatile" policy.
    11                          ;;        This means it is the caller's responsibility to preserve any values
    12                          ;;        in the X and A registers that are still needed after the API functions
    13                          ;;        returns. For Large Memory Model devices it is also the caller's 
    14                          ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
    15                          ;;        MVW_PP registers. Even though some of these registers may not be modified
    16                          ;;        now, there is no guarantee that will remain the case in future releases.
    17                          ;;-----------------------------------------------------------------------------
    18                          ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
    19                          ;;*****************************************************************************
    20                          ;;*****************************************************************************
    21                          
    22                          include "m8c.inc"
    23                          include "memory.inc"
    24                          include "Timer16.inc"
    25                          
    26                          ;-----------------------------------------------
    27                          ;  Global Symbols
    28                          ;-----------------------------------------------
    29                          export  Timer16_EnableInt
    30                          export _Timer16_EnableInt
    31                          export  Timer16_DisableInt
    32                          export _Timer16_DisableInt
    33                          export  Timer16_Start
    34                          export _Timer16_Start
    35                          export  Timer16_Stop
    36                          export _Timer16_Stop
    37                          export  Timer16_WritePeriod
    38                          export _Timer16_WritePeriod
    39                          export  Timer16_WriteCompareValue
    40                          export _Timer16_WriteCompareValue
    41                          export  Timer16_wReadCompareValue
    42                          export _Timer16_wReadCompareValue
    43                          export  Timer16_wReadTimer
    44                          export _Timer16_wReadTimer
    45                          export  Timer16_wReadTimerSaveCV
    46                          export _Timer16_wReadTimerSaveCV
    47                          
    48                          ; The following functions are deprecated and subject to omission in future releases
    49                          ;
    50                          export  wTimer16_ReadCompareValue  ; deprecated
    51                          export _wTimer16_ReadCompareValue  ; deprecated
    52                          export  wTimer16_ReadTimer         ; deprecated
    53                          export _wTimer16_ReadTimer         ; deprecated
    54                          export  wTimer16_ReadTimerSaveCV   ; deprecated
    55                          export _wTimer16_ReadTimerSaveCV   ; deprecated
    56                          
    57                          export  wTimer16_ReadCounter       ; obsolete
    58                          export _wTimer16_ReadCounter       ; obsolete
    59                          export  wTimer16_CaptureCounter    ; obsolete
    60                          export _wTimer16_CaptureCounter    ; obsolete
    61                          
    62                          
    63                          AREA led_display_RAM (RAM,REL)
    64                          
    65                          ;-----------------------------------------------
    66                          ;  Constant Definitions
    67                          ;-----------------------------------------------
    68                          
    69                          
    70                          ;-----------------------------------------------
    71                          ; Variable Allocation
    72                          ;-----------------------------------------------
    73                          
    74                          
    75                          AREA UserModules (ROM, REL)
    76                          
    77                          .SECTION
    78                          ;-----------------------------------------------------------------------------
    79                          ;  FUNCTION NAME: Timer16_EnableInt
    80                          ;
    81                          ;  DESCRIPTION:
    82                          ;     Enables this timer's interrupt by setting the interrupt enable mask bit
    83                          ;     associated with this User Module. This function has no effect until and
    84                          ;     unless the global interrupts are enabled (for example by using the
    85                          ;     macro M8C_EnableGInt).
    86                          ;-----------------------------------------------------------------------------
    87                          ;
    88                          ;  ARGUMENTS:    None.
    89                          ;  RETURNS:      Nothing.
    90                          ;  SIDE EFFECTS: 
    91                          ;    The A and X registers may be modified by this or future implementations
    92                          ;    of this function.  The same is true for all RAM page pointer registers in
    93                          ;    the Large Memory Model.  When necessary, it is the calling function's
    94                          ;    responsibility to perserve their values across calls to fastcall16 
    95                          ;    functions.
    96                          ;
    97  2D08                     Timer16_EnableInt:
    98  2D08                    _Timer16_EnableInt:
    99                             RAM_PROLOGUE RAM_USE_CLASS_1
   100  2D08  43 E1 02             Timer16_EnableInt_M
   101                             RAM_EPILOGUE RAM_USE_CLASS_1
   102  2D0B  7F                   ret
   103                          
   104                          .ENDSECTION
   105                          
   106                          
   107                          .SECTION
   108                          ;-----------------------------------------------------------------------------
   109                          ;  FUNCTION NAME: Timer16_DisableInt
   110                          ;
   111                          ;  DESCRIPTION:
   112                          ;     Disables this timer's interrupt by clearing the interrupt enable
   113                          ;     mask bit associated with this User Module.
   114                          ;-----------------------------------------------------------------------------
   115                          ;
   116                          ;  ARGUMENTS:    None
   117                          ;  RETURNS:      Nothing
   118                          ;  SIDE EFFECTS: 
   119                          ;    The A and X registers may be modified by this or future implementations
   120                          ;    of this function.  The same is true for all RAM page pointer registers in
   121                          ;    the Large Memory Model.  When necessary, it is the calling function's
   122                          ;    responsibility to perserve their values across calls to fastcall16 
   123                          ;    functions.
   124                          ;
   125  2D0C                     Timer16_DisableInt:
   126  2D0C                    _Timer16_DisableInt:
   127                             RAM_PROLOGUE RAM_USE_CLASS_1
   128  2D0C  41 E1 FD             Timer16_DisableInt_M
   129                             RAM_EPILOGUE RAM_USE_CLASS_1
   130  2D0F  7F                   ret
   131                          
   132                          .ENDSECTION
   133                          
   134                          
   135                          .SECTION
   136                          ;-----------------------------------------------------------------------------
   137                          ;  FUNCTION NAME: Timer16_Start
   138                          ;
   139                          ;  DESCRIPTION:
   140                          ;     Sets the start bit in the Control register of this user module.  The
   141                          ;     timer will begin counting on the next input clock.
   142                          ;-----------------------------------------------------------------------------
   143                          ;
   144                          ;  ARGUMENTS:    None
   145                          ;  RETURNS:      Nothing
   146                          ;  SIDE EFFECTS: 
   147                          ;    The A and X registers may be modified by this or future implementations
   148                          ;    of this function.  The same is true for all RAM page pointer registers in
   149                          ;    the Large Memory Model.  When necessary, it is the calling function's
   150                          ;    responsibility to perserve their values across calls to fastcall16 
   151                          ;    functions.
   152                          ;
   153  2D10                     Timer16_Start:
   154  2D10                    _Timer16_Start:
   155                             RAM_PROLOGUE RAM_USE_CLASS_1
   156  2D10  43 23 01             Timer16_Start_M
   157                             RAM_EPILOGUE RAM_USE_CLASS_1
   158  2D13  7F                   ret
   159                          
   160                          .ENDSECTION
   161                          
   162                          
   163                          .SECTION
   164                          ;-----------------------------------------------------------------------------
   165                          ;  FUNCTION NAME: Timer16_Stop
   166                          ;
   167                          ;  DESCRIPTION:
   168                          ;     Disables timer operation by clearing the start bit in the Control
   169                          ;     register of the LSB block.
   170                          ;-----------------------------------------------------------------------------
   171                          ;
   172                          ;  ARGUMENTS:    None
   173                          ;  RETURNS:      Nothing
   174                          ;  SIDE EFFECTS: 
   175                          ;    The A and X registers may be modified by this or future implementations
   176                          ;    of this function.  The same is true for all RAM page pointer registers in
   177                          ;    the Large Memory Model.  When necessary, it is the calling function's
   178                          ;    responsibility to perserve their values across calls to fastcall16 
   179                          ;    functions.
   180                          ;
   181  2D14                     Timer16_Stop:
   182  2D14                    _Timer16_Stop:
   183                             RAM_PROLOGUE RAM_USE_CLASS_1
   184  2D14  41 23 FE             Timer16_Stop_M
   185                             RAM_EPILOGUE RAM_USE_CLASS_1
   186  2D17  7F                   ret
   187                          
   188                          .ENDSECTION
   189                          
   190                          
   191                          .SECTION
   192                          ;-----------------------------------------------------------------------------
   193                          ;  FUNCTION NAME: Timer16_WritePeriod
   194                          ;
   195                          ;  DESCRIPTION:
   196                          ;     Write the 16-bit period value into the Period register (DR1). If the
   197                          ;     Timer user module is stopped, then this value will also be latched
   198                          ;     into the Count register (DR0).
   199                          ;-----------------------------------------------------------------------------
   200                          ;
   201                          ;  ARGUMENTS: fastcall16 WORD wPeriodValue (LSB in A, MSB in X)
   202                          ;  RETURNS:   Nothing
   203                          ;  SIDE EFFECTS:
   204                          ;    The A and X registers may be modified by this or future implementations
   205                          ;    of this function.  The same is true for all RAM page pointer registers in
   206                          ;    the Large Memory Model.  When necessary, it is the calling function's
   207                          ;    responsibility to perserve their values across calls to fastcall16 
   208                          ;    functions.
   209                          ;
   210  2D18                     Timer16_WritePeriod:
   211  2D18                    _Timer16_WritePeriod:
   212                             RAM_PROLOGUE RAM_USE_CLASS_1
   213  2D18  60 21                mov   reg[Timer16_PERIOD_LSB_REG], A
   214  2D1A  5B                   mov   A, X
   215  2D1B  60 25                mov   reg[Timer16_PERIOD_MSB_REG], A
   216                             RAM_EPILOGUE RAM_USE_CLASS_1
   217  2D1D  7F                   ret
   218                          
   219                          .ENDSECTION
   220                          
   221                          
   222                          .SECTION
   223                          ;-----------------------------------------------------------------------------
   224                          ;  FUNCTION NAME: Timer16_WriteCompareValue
   225                          ;
   226                          ;  DESCRIPTION:
   227                          ;     Writes compare value into the Compare register (DR2).
   228                          ;
   229                          ;     NOTE! The Timer user module must be STOPPED in order to write the
   230                          ;           Compare register. (Call Timer16_Stop to disable).
   231                          ;-----------------------------------------------------------------------------
   232                          ;
   233                          ;  ARGUMENTS:    fastcall16 WORD wCompareValue (LSB in A, MSB in X)
   234                          ;  RETURNS:      Nothing
   235                          ;  SIDE EFFECTS: 
   236                          ;    The A and X registers may be modified by this or future implementations
   237                          ;    of this function.  The same is true for all RAM page pointer registers in
   238                          ;    the Large Memory Model.  When necessary, it is the calling function's
   239                          ;    responsibility to perserve their values across calls to fastcall16 
   240                          ;    functions.
   241                          ;
   242  2D1E                     Timer16_WriteCompareValue:
   243  2D1E                    _Timer16_WriteCompareValue:
   244                             RAM_PROLOGUE RAM_USE_CLASS_1
   245  2D1E  60 22                mov   reg[Timer16_COMPARE_LSB_REG], A
   246  2D20  5B                   mov   A, X
   247  2D21  60 26                mov   reg[Timer16_COMPARE_MSB_REG], A
   248                             RAM_EPILOGUE RAM_USE_CLASS_1
   249  2D23  7F                   ret
   250                          
   251                          .ENDSECTION
   252                          
   253                          
   254                          .SECTION
   255                          ;-----------------------------------------------------------------------------
   256                          ;  FUNCTION NAME: Timer16_wReadCompareValue
   257                          ;
   258                          ;  DESCRIPTION:
   259                          ;     Reads the Compare registers.
   260                          ;-----------------------------------------------------------------------------
   261                          ;
   262                          ;  ARGUMENTS:    None
   263                          ;  RETURNS:      fastcall16 WORD wCompareValue (value of DR2 in the X & A registers)
   264                          ;  SIDE EFFECTS: 
   265                          ;    The A and X registers may be modified by this or future implementations
   266                          ;    of this function.  The same is true for all RAM page pointer registers in
   267                          ;    the Large Memory Model.  When necessary, it is the calling function's
   268                          ;    responsibility to perserve their values across calls to fastcall16 
   269                          ;    functions.
   270                          ;
   271  2D24                     Timer16_wReadCompareValue:
   272  2D24                    _Timer16_wReadCompareValue:
   273  2D24                     wTimer16_ReadCompareValue:                      ; this name deprecated
   274  2D24                    _wTimer16_ReadCompareValue:                      ; this name deprecated
   275                             RAM_PROLOGUE RAM_USE_CLASS_1
   276  2D24  5D 26                mov   A, reg[Timer16_COMPARE_MSB_REG]
   277  2D26  5C                   mov   X, A
   278  2D27  5D 22                mov   A, reg[Timer16_COMPARE_LSB_REG]
   279                             RAM_EPILOGUE RAM_USE_CLASS_1
   280  2D29  7F                   ret
   281                          
   282                          .ENDSECTION
   283                          
   284                          
   285                          .SECTION
   286                          ;-----------------------------------------------------------------------------
   287                          ;  FUNCTION NAME: Timer16_wReadTimerSaveCV
   288                          ;
   289                          ;  DESCRIPTION:
   290                          ;     Returns the value in the Count register (DR0), preserving the
   291                          ;     value in the compare register (DR2).
   292                          ;-----------------------------------------------------------------------------
   293                          ;
   294                          ;  ARGUMENTS: None
   295                          ;  RETURNS:   fastcall16 WORD wCount (value of DR0 in the X & A registers)
   296                          ;  SIDE EFFECTS:
   297                          ;     1) May cause an interrupt, if interrupt on Compare is enabled.
   298                          ;     2) If enabled, Global interrupts are momentarily disabled.
   299                          ;     3) The user module is stopped momentarily while the compare value is
   300                          ;        restored.  This may cause the Count register to miss one or more
   301                          ;        counts depending on the input clock speed.
   302                          ;     4) The A and X registers may be modified by this or future implementations
   303                          ;        of this function.  The same is true for all RAM page pointer registers in
   304                          ;        the Large Memory Model.  When necessary, it is the calling function's
   305                          ;        responsibility to perserve their values across calls to fastcall16 
   306                          ;        functions.
   307                          ;
   308                          ;  THEORY of OPERATION:
   309                          ;     1) Read and save the Compare register.
   310                          ;     2) Read the Count register, causing its data to be latched into
   311                          ;        the Compare register.
   312                          ;     3) Read and save the Counter value, now in the Compare register,
   313                          ;        to the buffer.
   314                          ;     4) Disable global interrupts
   315                          ;     5) Halt the timer
   316                          ;     6) Restore the Compare register values
   317                          ;     7) Start the Timer again
   318                          ;     8) Restore global interrupt state
   319                          ;
   320  2D2A                     Timer16_wReadTimerSaveCV:
   321  2D2A                    _Timer16_wReadTimerSaveCV:
   322  2D2A                     wTimer16_ReadTimerSaveCV:                       ; this name deprecated
   323  2D2A                    _wTimer16_ReadTimerSaveCV:                       ; this name deprecated
   324  2D2A                     wTimer16_ReadCounter:                           ; this name deprecated
   325  2D2A                    _wTimer16_ReadCounter:                           ; this name deprecated
   326                          
   327  0000                    CpuFlags:      equ   0
   328  0001                    wCount_MSB:    equ   1
   329  0002                    wCount_LSB:    equ   2
   330                          
   331  2D2A  71 40                RAM_PROLOGUE RAM_USE_CLASS_2
   332  2D2C  4F                   mov   X, SP                                   ; X <- stack frame pointer
   333  2D2D  38 03                add   SP, 3                                   ; Reserve space for flags, count
   334  2D2F  5D 23                mov   A, reg[Timer16_CONTROL_LSB_REG]         ; save the Control register
   335  2D31  08                   push  A
   336  2D32  5D 22                mov   A, reg[Timer16_COMPARE_LSB_REG]         ; save the Compare register
   337  2D34  08                   push  A
   338  2D35  5D 26                mov   A, reg[Timer16_COMPARE_MSB_REG]
   339  2D37  08                   push  A
   340  2D38  5D 20                mov   A, reg[Timer16_COUNTER_LSB_REG]         ; synchronous copy DR2 <- DR0
   341                                                                           ; This may cause an interrupt!
   342  2D3A  5D 26                mov   A, reg[Timer16_COMPARE_MSB_REG]         ; Now grab DR2 (DR0) and save
   343  2D3C  54 01                mov   [X+wCount_MSB], A
   344  2D3E  5D 22                mov   A, reg[Timer16_COMPARE_LSB_REG]
   345  2D40  54 02                mov   [X+wCount_LSB], A
   346  2D42  50 00                mov   A, 0                                    ; Guess the global interrupt state
   347  2D44  49 F7 01             tst   reg[CPU_F], FLAG_GLOBAL_IE              ; Currently Disabled?
   348  2D47  A003                 jz    .SetupStatusFlag                        ;   Yes, guess was correct
   349  2D49  50 01                mov   A, FLAG_GLOBAL_IE                       ;    No, modify our guess
   350  2D4B                    .SetupStatusFlag:                                ; and ...
   351  2D4B  54 00                mov   [X+CpuFlags], A                         ;   StackFrame[0] <- Flag Reg image
   352  2D4D  70 FE                M8C_DisableGInt                               ; Disable interrupts globally
   353  2D4F  41 23 FE             Timer16_Stop_M                                ; Disable (stop) the timer
   354  2D52  18                   pop   A                                       ; Restore the Compare register
   355  2D53  60 26                mov   reg[Timer16_COMPARE_MSB_REG], A
   356  2D55  18                   pop   A
   357  2D56  60 22                mov   reg[Timer16_COMPARE_LSB_REG], A
   358  2D58  18                   pop   A                                       ; restore start state of the timer
   359  2D59  60 23                mov   reg[Timer16_CONTROL_LSB_REG], A
   360  2D5B  18                   pop   A                                       ; Return result stored in stack frame
   361  2D5C  20                   pop   X
   362                             RAM_EPILOGUE RAM_USE_CLASS_2
      + 2D5D  70 3F             	and	f, 0x3F
      + 2D5F  71 80             	or	f, 0x80
   363  2D61  7E                   reti                                          ; Flag Reg <- StackFrame[0]
   364                          
   365                          .ENDSECTION
   366                          
   367                          
   368                          .SECTION
   369                          ;-----------------------------------------------------------------------------
   370                          ;  FUNCTION NAME: Timer16_wReadTimer
   371                          ;
   372                          ;  DESCRIPTION:
   373                          ;     Performs a software capture of the Count register.  A synchronous
   374                          ;     read of the Count register is performed.  The timer is NOT stopped.
   375                          ;
   376                          ;     WARNING - this will cause loss of data in the Compare register.
   377                          ;-----------------------------------------------------------------------------
   378                          ;
   379                          ;  ARGUMENTS:    None
   380                          ;  RETURNS:      fastcall16 WORD wCount, (value of DR0 in the X & A registers)
   381                          ;  SIDE EFFECTS:
   382                          ;    May cause an interrupt.
   383                          ;
   384                          ;    The A and X registers may be modified by this or future implementations
   385                          ;    of this function.  The same is true for all RAM page pointer registers in
   386                          ;    the Large Memory Model.  When necessary, it is the calling function's
   387                          ;    responsibility to perserve their values across calls to fastcall16 
   388                          ;    functions.
   389                          ;
   390                          ;  THEORY of OPERATION:
   391                          ;     1) Read the Count register - this causes the count value to be
   392                          ;        latched into the Compare registers.
   393                          ;     2) Read and return the Count register values from the Compare
   394                          ;        registers into the return buffer.
   395                          ;
   396  2D62                     Timer16_wReadTimer:
   397  2D62                    _Timer16_wReadTimer:
   398  2D62                     wTimer16_ReadTimer:                             ; this name deprecated
   399  2D62                    _wTimer16_ReadTimer:                             ; this name deprecated
   400  2D62                     wTimer16_CaptureCounter:                        ; this name deprecated
   401  2D62                    _wTimer16_CaptureCounter:                        ; this name deprecated
   402                          
   403                             RAM_PROLOGUE RAM_USE_CLASS_1
   404  2D62  5D 20                mov   A, reg[Timer16_COUNTER_LSB_REG]         ; synchronous copy DR2 <- DR0
   405                                                                           ; This may cause an interrupt!
   406                          
   407  2D64  5D 26                mov   A, reg[Timer16_COMPARE_MSB_REG]         ; Return DR2 (actually DR0)
   408  2D66  5C                   mov   X, A
   409  2D67  5D 22                mov   A, reg[Timer16_COMPARE_LSB_REG]
   410                             RAM_EPILOGUE RAM_USE_CLASS_1
   411  2D69  7F                   ret
HI-TECH Software Macro Assembler (PSoC MCU) V9.61
Symbol Table                                                                                               Thu Jul 09 11:34:30 2015
           wTimer16_ReadTimer 2D62           wTimer16_ReadCounter 2D2A              Timer16_EnableInt 2D08  
     Timer16_wReadTimerSaveCV 2D2A                          CPU_F 00F7       _wTimer16_CaptureCounter 2D62  
    Timer16_WriteCompareValue 2D1E             Timer16_DisableInt 2D0C     _wTimer16_ReadCompareValue 2D24  
                       HITECH 0002             _Timer16_EnableInt 2D08                  _Timer16_Stop 2D14  
              FLAG_PGMODE_01b 0040                FLAG_PGMODE_10b 0080       wTimer16_ReadTimerSaveCV 2D2A  
           Timer16_wReadTimer 2D62                       CpuFlags 0000               Timer16_INT_MASK 0002  
          _wTimer16_ReadTimer 2D62      SYSTEM_LARGE_MEMORY_MODEL 0001     _Timer16_WriteCompareValue 2D1E  
               FLAG_GLOBAL_IE 0001         Timer16_PERIOD_LSB_REG 0021         Timer16_PERIOD_MSB_REG 0025  
        _wTimer16_ReadCounter 2D2A                      TOOLCHAIN 0002        Timer16_COUNTER_LSB_REG 0020  
               _Timer16_Start 2D10               FLAG_PGMODE_MASK 00C0            _Timer16_DisableInt 2D0C  
              RAM_USE_CLASS_1 0001                RAM_USE_CLASS_2 0002                RAM_USE_CLASS_3 0004  
              RAM_USE_CLASS_4 0008      _Timer16_wReadTimerSaveCV 2D2A      Timer16_wReadCompareValue 2D24  
                   wCount_LSB 0002                     wCount_MSB 0001        Timer16_CONTROL_LSB_REG 0023  
              Timer16_INT_REG 00E1           _Timer16_WritePeriod 2D18            _Timer16_wReadTimer 2D62  
      Timer16_COMPARE_LSB_REG 0022        Timer16_COMPARE_MSB_REG 0026      _wTimer16_ReadTimerSaveCV 2D2A  
Timer16_CONTROL_REG_START_BIT 0001        wTimer16_CaptureCounter 2D62     SYSTEM_IDXPG_TRACKS_IDX_PP 0001  
          Timer16_WritePeriod 2D18     _Timer16_wReadCompareValue 2D24                  Timer16_Start 2D10  
    wTimer16_ReadCompareValue 2D24     SYSTEM_IDXPG_TRACKS_STK_PP 0000                   Timer16_Stop 2D14  
HI-TECH Software Macro Assembler (PSoC MCU) V9.61
                                                                                                           Thu Jul 09 11:34:30 2015
     1                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     2                          ;;;
     3                          ;;;  M8C.INC -- Microcontroller Device System Declarations
     4                          ;;;
     5                          ;;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
     6                          ;;;
     7                          ;;;  This file provides address constants, bit field masks and a set of macro
     8                          ;;;  facilities for the Cypress Semiconductor CY8C22045 Microcontroller devices.
     9                          ;;;
    10                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    11                          
    12                          ;;=============================================================================
    13                          ;; Definition of abbreviations used in the descriptions below
    14                          ;;  (RW)   The register or bit supports reads and writes
    15                          ;;  (W)    The register or bit is write-only
    16                          ;;  (R)    The register or bit is read-only
    17                          ;;  (#)    Access to the register is bit specific (see the family datasheet)
    18                          ;;  (RC)   The register or bit can be read, but writing a 0 will clear it,
    19                          ;;         writing a 1 will have no effect.
    20                          ;;=============================================================================
    21                          
    22                          ;;=============================================================================
    23                          ;;      System Registers
    24                          ;;=============================================================================
    25                          
    26                          ;----------------------------
    27                          ;  Flag Register Bit Fields
    28                          ;----------------------------
    29  00C0                    FLAG_PGMODE_MASK:  equ 0C0h     ; Paging control for > 256 bytes of RAM
    30  0000                    FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
    31  0040                    FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
    32  0080                    FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
    33  00C0                    FLAG_PGMODE_3:     equ 0C0h       ; Direct to CUR_PP page, indexed to STK_PP page
    34  0000                    FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
    35  0040                    FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
    36  0080                    FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
    37  00C0                    FLAG_PGMODE_11b:   equ 0C0h       ; Same as PGMODE_3
    38  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    39  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    40  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    41  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    42  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    43                          
    44                          
    45                          ;;=============================================================================
    46                          ;;      Register Space, Bank 0
    47                          ;;=============================================================================
    48                          
    49                          ;------------------------------------------------
    50                          ;  Port Registers
    51                          ;  Note: Also see this address range in Bank 1.
    52                          ;------------------------------------------------
    53                          ; Port 0
    54  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    55  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    56  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    57  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    58                          ; Port 1
    59  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    60  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    61  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    62  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    63                          ; Port 2
    64  0008                    PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
    65  0009                    PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
    66  000A                    PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
    67  000B                    PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
    68                          ; Port 3
    69  000C                    PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
    70  000D                    PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
    71  000E                    PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
    72  000F                    PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
    73                          ; Port 4
    74  0010                    PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
    75  0011                    PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
    76  0012                    PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
    77  0013                    PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
    78                          
    79                          ;------------------------------------------------
    80                          ;  Digital PSoC(tm) block Registers
    81                          ;  Note: Also see this address range in Bank 1.
    82                          ;------------------------------------------------
    83                          ; Digital PSoC block 00, Basic Type C
    84  0020                    DBC00DR0:     equ 20h          ; data register 0                          (#)
    85  0021                    DBC00DR1:     equ 21h          ; data register 1                          (W)
    86  0022                    DBC00DR2:     equ 22h          ; data register 2                          (RW)
    87  0023                    DBC00CR0:     equ 23h          ; control & status register 0              (#)
    88                          
    89                          ; Digital PSoC block 01, Basic Type C
    90  0024                    DBC01DR0:     equ 24h          ; data register 0                          (#)
    91  0025                    DBC01DR1:     equ 25h          ; data register 1                          (W)
    92  0026                    DBC01DR2:     equ 26h          ; data register 2                          (RW)
    93  0027                    DBC01CR0:     equ 27h          ; control & status register 0              (#)
    94                          
    95                          ; Digital PSoC block 02, Communications Type C
    96  0028                    DCC02DR0:     equ 28h          ; data register 0                          (#)
    97  0029                    DCC02DR1:     equ 29h          ; data register 1                          (W)
    98  002A                    DCC02DR2:     equ 2Ah          ; data register 2                          (RW)
    99  002B                    DCC02CR0:     equ 2Bh          ; control & status register 0              (#)
   100                          
   101                          ; Digital PSoC block 03, Communications Type C
   102  002C                    DCC03DR0:     equ 2Ch          ; data register 0                          (#)
   103  002D                    DCC03DR1:     equ 2Dh          ; data register 1                          (W)
   104  002E                    DCC03DR2:     equ 2Eh          ; data register 2                          (RW)
   105  002F                    DCC03CR0:     equ 2Fh          ; control & status register 0              (#)
   106                          
   107                          ; Digital PSoC block 10, Basic Type C
   108  0030                    DBC10DR0:     equ 30h          ; data register 0                          (#)
   109  0031                    DBC10DR1:     equ 31h          ; data register 1                          (W)
   110  0032                    DBC10DR2:     equ 32h          ; data register 2                          (RW)
   111  0033                    DBC10CR0:     equ 33h          ; control & status register 0              (#)
   112                          
   113                          ; Digital PSoC block 11, Basic Type C
   114  0034                    DBC11DR0:     equ 34h          ; data register 0                          (#)
   115  0035                    DBC11DR1:     equ 35h          ; data register 1                          (W)
   116  0036                    DBC11DR2:     equ 36h          ; data register 2                          (RW)
   117  0037                    DBC11CR0:     equ 37h          ; control & status register 0              (#)
   118                          
   119                          ; Digital PSoC block 12, Communications Type C
   120  0038                    DCC12DR0:     equ 38h          ; data register 0                          (#)
   121  0039                    DCC12DR1:     equ 39h          ; data register 1                          (W)
   122  003A                    DCC12DR2:     equ 3Ah          ; data register 2                          (RW)
   123  003B                    DCC12CR0:     equ 3Bh          ; control & status register 0              (#)
   124                          
   125                          ; Digital PSoC block 13, Communications Type C
   126  003C                    DCC13DR0:     equ 3Ch          ; data register 0                          (#)
   127  003D                    DCC13DR1:     equ 3Dh          ; data register 1                          (W)
   128  003E                    DCC13DR2:     equ 3Eh          ; data register 2                          (RW)
   129  003F                    DCC13CR0:     equ 3Fh          ; control & status register 0              (#)
   130                          
   131                          ;-------------------------------------
   132                          ;  Analog Control Registers
   133                          ;-------------------------------------
   134  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
   135  00C0                    AMX_IN_ACI3:          equ C0h    ; MASK: column 3 input mux
   136  0030                    AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
   137  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
   138  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
   139                          
   140  0061                    AMUX_CFG:      equ 61h          ; Analog MUX Configuration
   141  0030                    AMUX_CFG_INTCAP:       equ 30h    ;
   142  000E                    AMUX_CFG_MUXCLK:  	  equ 0Eh	 ;
   143  0001                    AMUX_CFG_EN:		  	  equ 01h	 ;
   144                          
   145                          ; old declarations DO NOT USE
   146  0061                    AMUXCFG:      equ 61h          ; Analog MUX Configuration
   147  0030                    AMUXCFG_INTCAP:       equ 30h    ;
   148  000E                    AMUXCFG_MUXCLK:  	  equ 0Eh	 ;
   149  0001                    AMUXCFG_EN:		  	  equ 01h	 ;
   150                          
   151  0062                    PWM_CR:       equ 62h          ; Pulse-Width Modulator Control
   152  0038                    PWM_CR_HIGH:          equ 38h    ; MASK: PWM high time
   153  0006                    PWM_CR_LOW:           equ 06h	 ; MASK: PWM low time
   154  0001                    PWM_CR_EN:            equ 01h	 ; MASK: Enable/Disable PWM function
   155                          
   156  0063                    ARF_CR:       equ 63h          ; Analog Reference Control
   157                          
   158  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus Register           (#)
   159  0080                    CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
   160  0040                    CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
   161  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
   162  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
   163  0008                    CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
   164  0004                    CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
   165  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
   166  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   167                          
   168  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   169  0020                    CMP_CR1_CLDIS1:       equ 20h    ; MASK: Column 1 comparator output latch
   170  0010                    CMP_CR1_CLDIS0:	      equ 10h    ; MASK: Column 0 comparator output latch
   171                          
   172  0068                    ADC0_CR:      equ 68h          ; Analog Column 0 Configuration
   173  0080                    ADC0_CR_CMPST:        equ 80h    ;
   174  0040                    ADC0_CR_LOREN:        equ 40h    ;
   175  0020                    ADC0_CR_SHEN:         equ 20h    ;
   176  0008                    ADC0_CR_CBSRC:        equ 08h    ;
   177  0004                    ADC0_CR_ADCM:         equ 04h    ;
   178  0001                    ADC0_CR_EN:	          equ 01h    ;
   179                          
   180  0069                    ADC1_CR:      equ 69h          ; Analog Column 1 Configuration
   181  0080                    ADC1_CR_CMPST:        equ 80h    ;
   182  0040                    ADC1_CR_LOREN:        equ 40h    ;
   183  0020                    ADC1_CR_SHEN:         equ 20h    ;
   184  0008                    ADC1_CR_CBSRC:        equ 08h    ;
   185  0004                    ADC1_CR_ADCM:         equ 04h    ;
   186  0001                    ADC1_CR_EN:	          equ 01h    ;
   187                          
   188                          ; Continuous Time PSoC block Type E Row 0 Col 0
   189  0072                    ACE00CR1:     equ 72h          ; Control register 1                       (RW)
   190  0073                    ACE00CR2:     equ 73h          ; Control register 2                       (RW)
   191                          
   192                          ; Continuous Time PSoC block Type E Row 0 Col 1
   193  0076                    ACE01CR1:     equ 76h          ; Control register 1                       (RW)
   194  0077                    ACE01CR2:     equ 77h          ; Control register 2                       (RW)
   195                          
   196                          ; Switched Cap PSoC blockType E Row 1 Col 0
   197  0080                    ASE10CR0:     equ 80h          ; Control register 0                       (RW)
   198                          
   199                          ; Switched Cap PSoC blockType E Row 1 Col 1
   200  0084                    ASE11CR0:     equ 84h          ; Control register 0                       (RW)
   201                          
   202                          ;-----------------------------------------------
   203                          ;  Global General Purpose Data Registers
   204                          ;-----------------------------------------------
   205  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   206  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   207  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   208  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   209                          
   210                          ;------------------------------------------------
   211                          ;  Row Digital Interconnects
   212                          ;
   213                          ;  Note: the following registers are mapped into
   214                          ;  both register bank 0 AND register bank 1.
   215                          ;------------------------------------------------
   216                          
   217  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   218  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   219  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   220  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   221  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   222  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   223  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   224                          
   225  00B8                    RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
   226  00B9                    RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
   227  00BA                    RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
   228  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   229  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   230  00BD                    RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
   231  00BE                    RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
   232                          
   233                          ;-----------------------------------------------
   234                          ;  Ram Page Pointers
   235                          ;-----------------------------------------------
   236  00D0                    CUR_PP:      equ 0D0h           ; Current   Page Pointer
   237  00D1                    STK_PP:      equ 0D1h           ; Stack     Page Pointer
   238  00D3                    IDX_PP:      equ 0D3h           ; Index     Page Pointer
   239  00D4                    MVR_PP:      equ 0D4h           ; MVI Read  Page Pointer
   240  00D5                    MVW_PP:      equ 0D5h           ; MVI Write Page Pointer
   241                          
   242                          ;------------------------------------------------
   243                          ;  I2C Configuration Registers
   244                          ;------------------------------------------------
   245  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   246  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   247  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   248  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   249  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   250  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   251  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   252  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   253  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   254  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   255                          
   256  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   257  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   258  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   259  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   260  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   261  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   262  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   263  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   264  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   265                          
   266  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   267                          
   268  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   269  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   270  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   271  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   272  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   273                          
   274                          ;------------------------------------------------
   275                          ;  System and Global Resource Registers
   276                          ;------------------------------------------------
   277  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   278                                                         ; Use INT_MSK0 bit field masks
   279  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   280                                                         ; Use INT_MSK1 bit field masks
   281  00DC                    INT_CLR2:     equ 0DCh          ; Interrupt Clear Register 2               (RW)
   282                                                         ; Use INT_MSK2 bit field masks
   283  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   284                                                         ; Use INT_MSK3 bit field masks
   285                          
   286  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   287  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   288  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   289                          
   290  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   291  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   292  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   293  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   294  0010                    INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
   295  0008                    INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
   296  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   297  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   298  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   299                          
   300  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   301  0080                    INT_MSK1_DCC13:            equ 80h ; MASK: enable/disable DCC13 block interrupt
   302  0040                    INT_MSK1_DCC12:            equ 40h ; MASK: enable/disable DCC12 block interrupt
   303  0020                    INT_MSK1_DBC11:            equ 20h ; MASK: enable/disable DBC11 block interrupt
   304  0010                    INT_MSK1_DBC10:            equ 10h ; MASK: enable/disable DBC10 block interrupt
   305  0008                    INT_MSK1_DCC03:            equ 08h ; MASK: enable/disable DCC03 block interrupt
   306  0004                    INT_MSK1_DCC02:            equ 04h ; MASK: enable/disable DCC02 block interrupt
   307  0002                    INT_MSK1_DBC01:            equ 02h ; MASK: enable/disable DBC01 block interrupt
   308  0001                    INT_MSK1_DBC00:            equ 01h ; MASK: enable/disable DBC00 block interrupt
   309                          
   310  00DF                    INT_MSK2:     equ DFh			; Custom block Mask Register			   (RW)
   311  0010                    INT_MSK2_SARADC:           equ 10h ; MASK: enable/disable SARADC block interrupt
   312  0020                    INT_MSK2_CSD0:             equ 20h ; MASK: enable/disable CSD0 block interrupt
   313  0040                    INT_MSK2_CSD1:             equ 40h ; MASK: enable/disable CSD1 block interrupt
   314  0080                    INT_MSK2_RTC:              equ 80h ; MASK: enable/disable RTC block interrupt
   315                          
   316  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   317  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   318                          
   319                          ;------------------------------------------------------
   320                          ;  MAC Registers
   321                          ;------------------------------------------------------
   322                          
   323  00E8                    MUL0_X:       equ 0E8h          ; Multiply Input X Register                (W)
   324  00E9                    MUL0_Y:       equ 0E9h          ; Multiply Input Y Register                (W)
   325  00EA                    MUL0_DH:      equ 0EAh          ; Multiply Result High Byte Register       (R)
   326  00EB                    MUL0_DL:      equ 0EBh          ; Multiply Result Low Byte Register        (R)
   327                          
   328  00EC                    ACC0_DR1:     equ 0ECh          ; Accumulator Data Register 1              (RW)
   329  00ED                    ACC0_DR0:     equ 0EDh          ; Accumulator Data Register 0              (RW)
   330  00EE                    ACC0_DR3:     equ 0EEh          ; Accumulator Data Register 3              (RW)
   331  00EF                    ACC0_DR2:     equ 0EFh          ; Accumulator Data Register 2              (RW)
   332                          
   333                          ; DECIMATOR Control Registers
   334  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   335  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   336                          
   337                          ;------------------------------------------------------
   338                          ;  System Status and Control Registers
   339                          ;
   340                          ;  Note: The following registers are mapped into both
   341                          ;        register bank 0 AND register bank 1.
   342                          ;------------------------------------------------------
   343  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   344                                                             ; Use FLAG_ masks defined at top of file
   345                          
   346  00FD                    DAC_D:        equ 0FDh		   ; DAC Data Register                        (RW)
   347                          
   348  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   349  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: flag, Internal Reset Status bit
   350  0010                    CPU_SCR1_SLIMO:         equ 10h	   ; MASK: Slow IMO (internal main osc) enable
   351  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   352  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   353  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   354                          
   355  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   356  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   357  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   358  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   359  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   360  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   361                          
   362                          ;------------------------------------------------------
   363                          ;  Neon Capsense Digital Control Registers
   364                          ;------------------------------------------------------
   365  0050                    CSD0_DR0_L:				equ 50h		; Capsense 0 data low 0				(RW)
   366  0054                    CSD0_DR0_H:				equ 54h		; Capsense 0 data high 0			(RW)
   367  0058                    CSD1_DR0_L:				equ 58h		; Capsense 1 data low 0				(RW)
   368  005C                    CSD1_DR0_H:				equ 5Ch		; Capsense 1 data high 0			(RW)
   369  0051                    CSD0_DR1_L:				equ 51h		; Capsense 0 data low 1				(RW)
   370  0055                    CSD0_DR1_H:				equ 55h		; Capsense 0 data high 1			(RW)
   371  0059                    CSD1_DR1_L:				equ 59h		; Capsense 1 data low 1				(RW)
   372  005D                    CSD1_DR1_H:				equ 5Dh		; Capsense 1 data high 1			(RW)
   373  0052                    CSD0_CNT_L:				equ 52h		; Capsense 0 counter low			(RW)
   374  0056                    CSD0_CNT_H:				equ 56h		; Capsense 0 counter high			(RW)
   375  005A                    CSD1_CNT_L:				equ 5Ah		; Capsense 1 counter low			(RW)
   376  005E                    CSD1_CNT_H:				equ	5Eh		; Capsense 1 counter high			(RW)
   377  0053                    CSD0_CR0:				equ 53h		; Capsense 0 control 0				(RW)
   378  005B                    CSD1_CR0:				equ 5Bh		; Capsense 1 control 0				(RW)
   379  0057                    CSD0_CR1:				equ 57h		; Capsense 0 control 1				(RW)
   380  005F                    CSD1_CR1:				equ 5Fh		; Capsense 1 control 1				(RW)
   381                          
   382                          ;------------------------------------------------------
   383                          ;  Neon Analog Registers
   384                          ;------------------------------------------------------
   385  0065                    ASY_CR:					equ 65h		; Analog Synchronization Control	(RW)
   386  006A                    ADC_DH:					equ 6Ah		; ADC data high						(RW)
   387  006B                    ADC_DL:					equ 6Bh		; ADC data low						(RW)
   388  00C8                    PWMVREF0:				equ C8h		; PWM Voltage Reference 0			(RW)
   389  00C9                    PWMVREF1:				equ C9h		; PWM Voltage Reference 1			(RW)
   390  00CB                    PWMSRC:					equ CBh		; PWM Source						(RW)
   391  00CA                    IDACMODE:				equ CAh		; IDAC Mode							(RW)
   392  00FC                    IDACR_D:				equ FCh		; Analog Mux DAC data 0				(RW)
   393  00FD                    IDACL_D:				equ FDh		; Analog Mux DAC data 1				(RW)
   394                          
   395                          ;------------------------------------------------------
   396                          ;  Neon Digital Registers
   397                          ;------------------------------------------------------
   398  00B7                    RDI0DSM:				equ B7h		; Row Digital Interconnect input select 0	(RW)
   399  00BF                    RDI1DSM:				equ BFh		; Row Digital Interconnect input select 1	(RW)
   400                          
   401                          ;------------------------------------------------------
   402                          ;  Neon Test Registers
   403                          ;------------------------------------------------------
   404  00CC                    TSCR0:					equ CCh		; Tsource 0							(RW)
   405  00CD                    TSCMPH:					equ CDh		; TSCMP high						(RW)
   406  00CE                    TSCMPL:					equ CEh		; TSCMP low							(RW)
   407  00CF                    TSCR1:					equ CFh		; Tsource 1							(RW)
   408                          
   409                          ;;=============================================================================
   410                          ;;      Register Space, Bank 1
   411                          ;;=============================================================================
   412                          
   413                          ;------------------------------------------------
   414                          ;  Port Registers
   415                          ;  Note: Also see this address range in Bank 0.
   416                          ;------------------------------------------------
   417                          ; Port 0
   418  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   419  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   420  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   421  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   422                          
   423                          ; Port 1
   424  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   425  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   426  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   427  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   428                          
   429                          ; Port 2
   430  0008                    PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
   431  0009                    PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
   432  000A                    PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
   433  000B                    PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
   434                          
   435                          ; Port 3
   436  000C                    PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
   437  000D                    PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
   438  000E                    PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
   439  000F                    PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
   440                          
   441                          ; Port 4
   442  0010                    PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
   443  0011                    PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
   444  0012                    PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
   445  0013                    PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
   446                          
   447                          ;------------------------------------------------
   448                          ;  Digital PSoC(tm) block Registers
   449                          ;  Note: Also see this address range in Bank 0.
   450                          ;------------------------------------------------
   451                          
   452                          ; Digital PSoC block 00, Basic Type C
   453  0020                    DBC00FN:      equ 20h          ; Function Register                        (RW)
   454  0021                    DBC00IN:      equ 21h          ;    Input Register                        (RW)
   455  0022                    DBC00OU:      equ 22h          ;   Output Register                        (RW)
   456  0023                    DBC00CR1:     equ 23h          ;   control & status register 1            (RW)
   457                          
   458                          ; Digital PSoC block 01, Basic Type C
   459  0024                    DBC01FN:      equ 24h          ; Function Register                        (RW)
   460  0025                    DBC01IN:      equ 25h          ;    Input Register                        (RW)
   461  0026                    DBC01OU:      equ 26h          ;   Output Register                        (RW)
   462  0027                    DBC01CR1:     equ 27h          ;   control & status register 1            (RW)
   463                          
   464                          ; Digital PSoC block 02, Communications Type C
   465  0028                    DCC02FN:      equ 28h          ; Function Register                        (RW)
   466  0029                    DCC02IN:      equ 29h          ;    Input Register                        (RW)
   467  002A                    DCC02OU:      equ 2Ah          ;   Output Register                        (RW)
   468  002B                    DBC02CR1:     equ 2Bh          ;   control & status register 1            (RW)
   469                          
   470                          ; Digital PSoC block 03, Communications Type C
   471  002C                    DCC03FN:      equ 2Ch          ; Function Register                        (RW)
   472  002D                    DCC03IN:      equ 2Dh          ;    Input Register                        (RW)
   473  002E                    DCC03OU:      equ 2Eh          ;   Output Register                        (RW)
   474  0029                    DBC03CR1:     equ 29h          ;   control & status register 1            (RW)
   475                          
   476                          ; Digital PSoC block 10, Basic Type C
   477  0030                    DBC10FN:      equ 30h          ; Function Register                        (RW)
   478  0031                    DBC10IN:      equ 31h          ;    Input Register                        (RW)
   479  0032                    DBC10OU:      equ 32h          ;   Output Register                        (RW)
   480  0033                    DBC10CR1:     equ 33h          ;   control & status register 1            (RW)
   481                          
   482                          ; Digital PSoC block 11, Basic Type C
   483  0034                    DBC11FN:      equ 34h          ; Function Register                        (RW)
   484  0035                    DBC11IN:      equ 35h          ;    Input Register                        (RW)
   485  0036                    DBC11OU:      equ 36h          ;   Output Register                        (RW)
   486  0037                    DBC11CR1:     equ 37h          ;   control & status register 1            (RW)
   487                          
   488                          ; Digital PSoC block 12, Communications Type C
   489  0038                    DCC12FN:      equ 38h          ; Function Register                        (RW)
   490  0039                    DCC12IN:      equ 39h          ;    Input Register                        (RW)
   491  003A                    DCC12OU:      equ 3Ah          ;   Output Register                        (RW)
   492  003B                    DBC12CR1:     equ 3Bh          ;   control & status register 1            (RW)
   493                          
   494                          ; Digital PSoC block 13, Communications Type C
   495  003C                    DCC13FN:      equ 3Ch          ; Function Register                        (RW)
   496  003D                    DCC13IN:      equ 3Dh          ;    Input Register                        (RW)
   497  003E                    DCC13OU:      equ 3Eh          ;   Output Register                        (RW)
   498  003F                    DBC13CR1:     equ 3Fh          ;   control & status register 1            (RW)
   499                          
   500                          ;------------------------------------------------
   501                          ;  System and Global Resource Registers
   502                          ;  Note: Also see this address range in Bank 0.
   503                          ;------------------------------------------------
   504                          
   505  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   506  00C0                    CLK_CR0_ACOLUMN_3:    equ C0h    ; MASK: Specify clock for analog cloumn
   507  0030                    CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
   508  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   509  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   510                          
   511  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   512  0018                    CLK_CR1_ACLK1:        equ 18h    ; MASK: Digital PSoC block for analog source
   513  0003                    CLK_CR1_ACLK0:        equ 03h    ; MASK: Digital PSoC block for analog source
   514                          
   515  0003                    CLK_CR1_ACLK2:        equ 03h    ; Deprecated do not use
   516                          
   517  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   518  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   519                          
   520  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   521  000F                    AMD_CR0_AMOD0:        equ 0Fh    ; MASK: Modulation source for analog column 0
   522                          
   523  0064                    CMP_GO_EN:    equ 64h          ; Comparator Bus To Global Out Enable      (RW)
   524  0080                    CMP_GO_EN_GOO5:       equ 80h    ; MASK: Selected Col 1 signal to GOO5
   525  0040                    CMP_GO_EN_GOO1:       equ 40h    ; MASK: Selected Col 1 signal to GOO1
   526  0030                    CMP_GO_EN_SEL1:       equ 30h    ; MASK: Column 1 Signal Select
   527  0008                    CMP_GO_EN_GOO4:       equ 08h    ; MASK: Selected Col 0 signal to GOO4
   528  0004                    CMP_GO_EN_GOO0:       equ 04h    ; MASK: Selected Col 0 signal to GOO0
   529  0003                    CMP_GO_EN_SEL0:       equ 03h    ; MASK: Column 0 Signal Select
   530                          
   531  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   532  000F                    AMD_CR1_AMOD1:        equ 0Fh    ; MASK: Modulation ctrl for analog column 1
   533                          
   534  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   535  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   536  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   537                          
   538  006B                    CLK_CR3:      equ 6Bh          ; Analog Clock Source Control Register 3   (RW)
   539  0040                    CLK_CR3_SYS1:         equ 40h    ; MASK: Analog Clock 1 selection
   540  0030                    CLK_CR3_DIVCLK1:      equ 30h    ; MASK: Analog Clock 1 divider
   541  0004                    CLK_CR3_SYS0:         equ 04h    ; MASK: Analog Clock 0 selection
   542  0003                    CLK_CR3_DIVCLK0:      equ 03h    ; MASK: Analog Clock 0 divider
   543                          
   544                          ;------------------------------------------------
   545                          ;  Global Digital Interconnects
   546                          ;------------------------------------------------
   547                          
   548  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   549  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   550  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   551  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   552                          
   553  00A0                    GDI_O_IN_CR:  equ 0A0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   554  00A1                    GDI_E_IN_CR:  equ 0A1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   555  00A2                    GDI_O_OU_CR:  equ 0A2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   556  00A3                    GDI_E_OU_CR:  equ 0A3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   557                          
   558  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   559  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   560                          
   561                          ;------------------------------------------------
   562                          ;  Analog Mux Bus Port Enable Bits
   563                          ;------------------------------------------------
   564  00D8                    MUX_CR0:      equ 0D8h          ; Analog Mux Port 0 Bit Enables Register
   565  00D9                    MUX_CR1:      equ 0D9h          ; Analog Mux Port 1 Bit Enables Register
   566  00DA                    MUX_CR2:      equ 0DAh          ; Analog Mux Port 2 Bit Enables Register
   567  00DB                    MUX_CR3:      equ 0DBh          ; Analog Mux Port 3 Bit Enables Register
   568  00EC                    MUX_CR4:      equ 0ECh          ; Analog Mux Port 4 Bit Enables Register
   569                          
   570                          ;------------------------------------------------
   571                          ;  Clock and System Control Registers
   572                          ;------------------------------------------------
   573                          
   574  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   575  0080                    OSC_GO_EN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   576  0040                    OSC_GO_EN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   577  0020                    OSC_GO_EN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   578  0010                    OSC_GO_EN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   579  0008                    OSC_GO_EN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   580  0004                    OSC_GO_EN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   581  0002                    OSC_GO_EN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   582  0001                    OSC_GO_EN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   583                          
   584  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   585  0003                    OSC_CR4_VC3SEL:       equ 03h    ; MASK: System VC3 Clock source
   586                          
   587  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   588                          
   589  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   590  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   591  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   592  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   593  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   594  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   595  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   596  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   597  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   598  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   599  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   600  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   601  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   602  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   603  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   604  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   605  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   606  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   607                          
   608  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   609  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   610  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   611                          
   612  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   613  0080                    OSC_CR2_PLLGAIN:      equ 80h    ; MASK: High/Low gain
   614  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   615  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   616  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   617                          
   618  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   619  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   620  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   621  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   622  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   623  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   624  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   625  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   626                          
   627  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   628  0008                    VLT_CMP_NOWRITE:      equ 08h    ; MASK: Vcc below Flash Write level
   629  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   630  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   631  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   632                          
   633  00E5                    ADC0_TR:      equ 0E5h          ; ADC Column 0 Trim Register
   634  00E6                    ADC1_TR:      equ 0E6h          ; ADC Column 1 Trim Register
   635                          
   636  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   637  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   638  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   639  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   640                          
   641  00FA                    FLS_PR1:      equ 0FAh          ; Flash Program Register 1                 (RW)
   642  0003                    FLS_PR1_BANK:         equ 03h    ; MASK: Select Active Flash Bank
   643                          
   644  00FD                    DAC_CR0:       equ 0FDh          ; Analog Mux DAC Control Register 0
   645  00DC                    DAC_CR1:       equ 0DCh          ; Analog Mux DAC Control Register 1
   646  0008                    DAC_CR_IRANGE:        equ 08h    ; MASK: Sets the DAC Range low or high
   647  0006                    DAC_CR_OSCMODE:       equ 06h    ; MASK: Defines the reset mode for AMux
   648  0001                    DAC_CR_ENABLE:        equ 01h    ; MASK: Enable/Disable DAC function
   649                          
   650                          ;------------------------------------------------
   651                          ;  I2C Control Registers
   652                          ;------------------------------------------------
   653                          
   654  00AD                    I2C_ADDR:    equ 0ADh          ; I2C Address Register (RW)
   655                          
   656                          ;------------------------------------------------------
   657                          ;  Neon Analog Registers
   658                          ;------------------------------------------------------
   659  0053                    VDAC50CR0:		equ 53h			; V DAC5 control 0				(RW)
   660  0057                    VDAC51CR0:		equ 57h			; V DAC5 control 1				(RW)
   661  00A8                    ADC_CR0:		equ A8h			; ADC control 0					(RW)
   662  00A9                    ADC_CR1:		equ A9h			; ADC control 1					(RW)
   663  00AA                    ADC_CR2:		equ AAh			; ADC control 2					(RW)
   664  00AB                    ADC_CR3TRIM:	equ ABh			; ADC control 3					(RW)
   665  00AC                    ADC_CR4:		equ ACh			; ADC control 4					(RW)
   666  00E7                    VDAC_TRIM:		equ E7h			; V DAC trim					(RW)
   667                          
   668                          ;------------------------------------------------------
   669                          ;  Neon Current Sense CMP Registers
   670                          ;------------------------------------------------------
   671  0050                    CMP0CR1:		equ 50h			; CMP0 control 1				(RW)
   672  0051                    CMP0CR2:		equ 51h			; CMP0 control 2				(RW)
   673  0054                    CMP1CR1:		equ 54h			; CMP1 control 1				(RW)
   674  0055                    CMP1CR2:		equ 55h			; CMP1 control 2				(RW)
   675  0058                    CSCMPCR0:		equ 58h			; CSCMP control 0				(RW)
   676  0059                    CSCMPGOEN:		equ 59h			; CSCMO global out enable		(RW)
   677  005A                    CSLUTCR0:		equ 5Ah			; CSLUT control 0				(RW)
   678  005B                    CMPCOLMUX:		equ 5Bh			; CMP Column Mux				(RW)
   679  005C                    CMPPWMCR:		equ 5Ch			; CMP PWM control				(RW)
   680  005D                    CMPFLTCR:		equ 5Dh			; CMP filter control			(RW)
   681  005E                    CMPCLK1:		equ 5Eh			; CMP clock 1					(RW)
   682  005F                    CMPCLK0:		equ 5Fh			; CMP clock 0					(RW)
   683                          
   684                          ;------------------------------------------------------
   685                          ;  Neon Real Time Clock Registers
   686                          ;------------------------------------------------------
   687  00A4                    RTCH:			equ A4h			; Real time current hour		(RW)
   688  00A5                    RTCM:			equ A5h			; Real time current minute		(RW)
   689  00A6                    RTCS:			equ A6h			; Real time current second		(RW)
   690  00A7                    RTCCR:			equ A7h			; Real time clock control		(RW)
   691                          
   692                          ;------------------------------------------------------
   693                          ;  Analog MUX Config Registers
   694                          ;------------------------------------------------------
   695                          
   696  006A                    AMUX_CFG1:			equ 6Ah  ; Analog MUX Configuration 1
   697  0020                    AMUX_CFG1_GOINVR:	equ 20h  ;
   698  0010                    AMUX_CFG1_GOINVL:  	equ 10h	 ;
   699  000C                    AMUX_CFG1_AMUXMODR:	equ 0Ch	 ;
   700  0003                    AMUX_CFG1_AMUXMODL:	equ 03h	 ;
   701                          
   702                          ;;=============================================================================
   703                          ;;      M8C System Macros
   704                          ;;  These macros should be used when their functions are needed.
   705                          ;;=============================================================================
   706                          
   707                          ;----------------------------------------------------
   708                          ;  Swapping Register Banks
   709                          ;----------------------------------------------------
   710                              macro M8C_SetBank0
   711                              and   F, ~FLAG_XIO_MASK
   712  0000'                       endm
   713                          
   714                              macro M8C_SetBank1
   715                              or    F, FLAG_XIO_MASK
   716  0000'                       endm
   717                          
   718                          ;----------------------------------------------------
   719                          ;  Global Interrupt Enable/Disable
   720                          ;----------------------------------------------------
   721                              macro M8C_EnableGInt
   722                              or    F, FLAG_GLOBAL_IE
   723  0000'                       endm
   724                          
   725                              macro M8C_DisableGInt
   726                              and   F, ~FLAG_GLOBAL_IE
   727  0000'                       endm
   728                          
   729                          ;----------------------------------------------------
   730                          ;  Enable/Disable Interrupt Mask
   731                          ;
   732                          ;  Use the following macros to enable/disable
   733                          ;  bits in the Interrupt mask registers,
   734                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   735                          ;
   736                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   737                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   738                          ;
   739                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   740                          ;        and MASK is the bit set to enable or disable
   741                          ;----------------------------------------------------
   742                          ; Disable Interrupt Bit Mask(s)
   743                              macro M8C_DisableIntMask
   744                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   745  0000'                       endm
   746                          
   747                          ; Enable Interrupt Bit Mask(s)
   748                              macro M8C_EnableIntMask
   749                              or    reg[@0], @1               ; enable specified interrupt enable bit
   750  0000'                       endm
   751                          
   752                          ;----------------------------------------------------
   753                          ;  Clear Posted Interrupt Flag Mask
   754                          ;
   755                          ;  Use the following macros to clear the
   756                          ;  bits in the Interrupt Clear registers,
   757                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   758                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   759                          ;
   760                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   761                          ;        and MASK is the bit set to enable or disable
   762                          ;----------------------------------------------------
   763                              macro M8C_ClearIntFlag
   764                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   765  0000'                       endm
   766                          
   767                          ;----------------------------------------------------
   768                          ;  Power-On Reset & WatchDog Timer Functions
   769                          ;----------------------------------------------------
   770                              macro M8C_EnableWatchDog
   771                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   772  0000'                       endm
   773                          
   774                              macro M8C_ClearWDT
   775                              mov   reg[RES_WDT], 00h
   776  0000'                       endm
   777                          
   778                              macro M8C_ClearWDTAndSleep
   779                              mov   reg[RES_WDT], 38h
   780  0000'                       endm
   781                          
   782                          ;----------------------------------------------------
   783                          ;  Sleep, CPU Stop & Software Reset
   784                          ;----------------------------------------------------
   785                              macro M8C_Sleep
   786                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   787                              ; The next instruction to be executed depends on the state of the
   788                              ; various interrupt enable bits. If some interrupts are enabled
   789                              ; and the global interrupts are disabled, the next instruction will
   790                              ; be the one that follows the invocation of this macro. If global
   791                              ; interrupts are also enabled then the next instruction will be
   792                              ; from the interrupt vector table. If no interrupts are enabled
   793                              ; then the CPU sleeps forever.
   794  0000'                       endm
   795                          
   796                              macro M8C_Stop
   797                              ; In general, you probably don't want to do this, but here's how:
   798                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   799                              ; Next instruction to be executed is located in the interrupt
   800                              ; vector table entry for Power-On Reset.
   801  0000'                       endm
   802                          
   803                              macro M8C_Reset
   804                              ; Restore CPU to the power-on reset state.
   805                              mov A, 0
   806                              SSC
   807                              ; Next non-supervisor instruction will be at interrupt vector 0.
   808  0000'                       endm
   809                          
   810                          ;----------------------------------------------------
   811                          ; ImageCraft Code Compressor Actions
   812                          ;----------------------------------------------------
   813                              ; Suspend Code Compressor
   814                              ; Must not span a RET or RETI instruction
   815                              ; without resuming code compression
   816                              macro Suspend_CodeCompressor
   817                              or   F, 0
   818  0000'                       endm
   819                          
   820                              ; Resume Code Compression
   821                              macro Resume_CodeCompressor
   822                              add  SP, 0
   823                              endm
      + 0000'                   
      + 0000'                   ; end of file m8c.inc
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;
     4                          ;;       FILENAME: Memory.inc
     5                          ;;
     6                          ;;    DESCRIPTION: Memory Model and Stack Parameter Definitions for 
     7                          ;;                 CY8C22045 PSoC devices.
     8                          ;;
     9                          ;;  LAST MODIFIED: August 17, 2004
    10                          ;;
    11                          ;;-----------------------------------------------------------------------------
    12                          ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
    13                          ;;*****************************************************************************
    14                          ;;*****************************************************************************
    15                          ;
    16                          ;
    17                          ;  ******** Define Memory Model and Stack parameters ********
    18                          ;
    19  0001                    IMAGECRAFT: equ 1   
    20  0002                    HITECH: equ 2   
    21  0002                    TOOLCHAIN: equ HITECH   
    22  0001                    SYSTEM_LARGE_MEMORY_MODEL: equ 1   
    23  0000                    SYSTEM_SMALL_MEMORY_MODEL: equ 0   
    24  0003                    SYSTEM_STACK_PAGE: equ 3   
    25  0000                    SYSTEM_STACK_PAGE_OFFSET: equ 0   
    26  0002                    SYSTEM_TOOLS: equ 2   
    27  0000                    SYSTEM_IDXPG_TRACKS_STK_PP: equ 0   
    28  0001                    SYSTEM_IDXPG_TRACKS_IDX_PP: equ 1   
    29  0000                    SYSTEM_MULTIPAGE_STACK: equ 0 
    30                          
    31                          
    32                          ;  ******* Function Class Definitions *******
    33                          ;
    34                          ;  These definitions are used to describe RAM access patterns. They provide
    35                          ;  documentation and they control prologue and epilogue macros that perform
    36                          ;  the necessary housekeeping functions for large memory model devices like
    37                          ;  the CY8C22045.
    38                          
    39  0001                    RAM_USE_CLASS_1:               equ 1   ; PUSH, POP & I/O access
    40  0002                    RAM_USE_CLASS_2:               equ 2   ; Indexed address mode on stack page
    41  0004                    RAM_USE_CLASS_3:               equ 4   ; Indexed address mode to any page
    42  0008                    RAM_USE_CLASS_4:               equ 8   ; Direct/Indirect address mode access
    43                          
    44                          ; ******* Hi Tech Specific *******
    45                          ; Turn on the expansion of all macros by default
    46                          IF (TOOLCHAIN & HITECH)
    47                          OPT EXPAND
    48                          ENDIF
    49                          ; ******* Page Pointer Manipulation Macros *******
    50                          ;
    51                          ;  ******* Page Pointer Manipulation Macros *******
    52                          ;
    53                          ;  Most of the following macros are conditionally compiled so they only
    54                          ;  produce code if the large memory model is selected.
    55                          
    56                             ;-----------------------------------------------
    57                             ;  Set Stack Page Macro
    58                             ;-----------------------------------------------
    59                             ;
    60                             ;  DESC: Modify STK_PP in the large or small memory Models.
    61                             ;
    62                             ; INPUT: Constant (e.g., SYSTEM_STACK_PAGE) that specifies the RAM page on
    63                             ;        which stack operations like PUSH and POP store and retrieve their
    64                             ;        data
    65                             ;
    66                             ;  COST: 8 instruction cycles (in LMM only)
    67                          
    68                             macro RAM_SETPAGE_STK( PG_NUMBER )
    69                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    70                                mov reg[STK_PP], @PG_NUMBER
    71                             ENDIF
    72  0000'                      endm
    73                          
    74                             ;-----------------------------------------------
    75                             ;  Set Current Page Macro
    76                             ;-----------------------------------------------
    77                             ;
    78                             ;  DESC: Modify CUR_PP in the large or small memory Models.
    79                             ;
    80                             ; INPUT: Constant value (e.g., >bFoo) for the RAM page number used in
    81                             ;        calculation of effective direct-mode address operands.
    82                             ;
    83                             ;  COST: 8 instruction cycles (in LMM only)
    84                          
    85                             macro RAM_SETPAGE_CUR( PG_NUMBER )
    86                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    87                                mov reg[CUR_PP], @PG_NUMBER
    88                             ENDIF
    89  0000'                      endm
    90                          
    91                             ;-----------------------------------------------
    92                             ;  Set Index Page Macro
    93                             ;-----------------------------------------------
    94                             ;
    95                             ;  DESC: Modify IDX_PP in the large or small emory Models.
    96                             ;
    97                             ; INPUT: Constant value (e.g., >caFoo) for the RAM page number used in
    98                             ;         calculation of effective index-mode address operands.
    99                             ;
   100                             ;  COST: 8 instruction cycles (in LMM only)
   101                          
   102                             macro RAM_SETPAGE_IDX( PG_NUMBER )
   103                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   104                                mov reg[IDX_PP], @PG_NUMBER
   105                             ENDIF
   106  0000'                      endm
   107                          
   108                             ;-----------------------------------------------
   109                             ;  Set MVI Read Page Macro
   110                             ;-----------------------------------------------
   111                             ;
   112                             ;  DESC: Modify MVR_PP in the large or small memory Models.
   113                             ;
   114                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   115                             ;        calculation of indirect address operands used in the
   116                             ;        "mvi A, [pFoo]" instructions.
   117                             ;
   118                             ;  COST: 8 instruction cycles (in LMM only)
   119                          
   120                             macro RAM_SETPAGE_MVR( PG_NUMBER )
   121                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   122                                mov reg[MVR_PP], @PG_NUMBER
   123                             ENDIF
   124  0000'                      endm
   125                          
   126                             ;-----------------------------------------------
   127                             ;  Set MVI Write Page Macro
   128                             ;-----------------------------------------------
   129                             ;
   130                             ;  DESC: Modify MVW_PP in the large or small memory Models.
   131                             ;
   132                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   133                             ;        calculation of indirect address operands used in the
   134                             ;        "mvi [pFoo], A" instructions.
   135                             ;
   136                             ;  COST: 8 instruction cycles (in LMM only)
   137                          
   138                             macro RAM_SETPAGE_MVW( PG_NUMBER )
   139                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   140                                mov reg[MVW_PP], @PG_NUMBER
   141                             ENDIF
   142  0000'                      endm
   143                          
   144                             ;-----------------------------------------------
   145                             ;  Force Index Page Pointer to Stack Page
   146                             ;-----------------------------------------------
   147                             ;
   148                             ;  DESC: Map index-mode operands onto the stack page by modifying IDX_PP.
   149                             ;        See also RAM_LOCK_INDEX_TO_STACKPAGE.
   150                             ;
   151                             ; INPUT: None
   152                             ;
   153                             ;  COST: 8 instruction cycles (in LMM only)
   154                          
   155                             macro RAM_SETPAGE_IDX2STK
   156                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   157                                IF ( SYSTEM_MULTIPAGE_STACK )
   158                                   mov   A, reg[STK_PP]
   159                                   mov   reg[IDX_PP], A
   160                                ELSE
   161                                   RAM_SETPAGE_IDX SYSTEM_STACK_PAGE
   162                                ENDIF
   163                             ENDIF
   164  0000'                      endm
   165                          
   166                             ;-----------------------------------------------
   167                             ;  Change Memory Mode
   168                             ;-----------------------------------------------
   169                             ;
   170                             ;  DESC: Modify FLAG_PAGEMODE bits in the large and small memory Models.
   171                             ;
   172                             ; INPUT: Constant value for PGMODE bitfield of CPU Flag register, F.
   173                             ;        See FLAG_PGMODE_{x} constants in M8C.INC.
   174                             ;
   175                             ;  COST: 8 instruction cycles (in LMM only)
   176                          
   177                             macro RAM_CHANGE_PAGE_MODE( MODE )
   178                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   179                                and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
   180                                or    F,  FLAG_PGMODE_MASK & @MODE
   181                             ENDIF
   182  0000'                      endm
   183                          
   184                             ;-----------------------------------------------
   185                             ;  Set Large Memory Model Native Paging Mode
   186                             ;-----------------------------------------------
   187                             ;
   188                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   189                             ;        paging mode *IFF* a simple "OR" is guaranteed to work---for
   190                             ;        example, in an ISR, when the PGMODE bits have been cleared
   191                             ;        to zero. If a simple "OR" is not guaranteed to work, use
   192                             ;        the slower RAM_RESTORE_NATIVE_PAGING instead.
   193                             ;
   194                             ; INPUT: none
   195                             ;
   196                             ;  COST: 4 instruction cycles (in LMM only)
   197                          
   198                             macro RAM_SET_NATIVE_PAGING
   199                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   200                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   201                                or    F,  FLAG_PGMODE_11b            ; LMM w/ IndexPage<==>StackPage
   202                             ENDIF ;  PGMODE LOCKED
   203                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   204                                or    F,  FLAG_PGMODE_10b            ; LMM with independent IndexPage
   205                             ENDIF ; PGMODE FREE
   206                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   207  0000'                      endm
   208                          
   209                             ;-----------------------------------------------
   210                             ; Restore Large Memory Model Native Paging Mode
   211                             ;-----------------------------------------------
   212                             ;
   213                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   214                             ;        paging mode. Always works because it clears the PGMODE bits
   215                             ;        before OR-ing in the new ones. See RAM_RESTORE_NATIVE_PAGING
   216                             ;        for a faster method.
   217                             ;
   218                             ; INPUT: none
   219                             ;
   220                             ;  COST: 8 instruction cycles (in LMM only)
   221                          
   222                             macro RAM_RESTORE_NATIVE_PAGING
   223                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   224                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   225                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_11b ; LMM w/ IndexPage<==>StackPage
   226                             ENDIF ;  PGMODE LOCKED
   227                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   228                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b ; LMM with independent IndexPage
   229                             ENDIF ; PGMODE FREE
   230                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   231  0000'                      endm
   232                          
   233                             ;-----------------------------------------------
   234                             ; Force indexed addr mode operands to Stack Pg
   235                             ;-----------------------------------------------
   236                             ;
   237                             ;  DESC: Force instructions that use indexed address mode to reference the
   238                             ;        stack page (as defined by STK_PP). This macro sets the "Indexed
   239                             ;        Stack Mode" bit (LSB) of the PGMODE bit field in the CPU Flag
   240                             ;        register, F. (See also RAM_SETPAGE_IDX2STK, above.)
   241                             ;
   242                             ; INPUT: none
   243                             ;
   244                             ;  COST: 4 instruction cycles (in LMM only)
   245                          
   246                             macro RAM_X_POINTS_TO_STACKPAGE
   247                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   248                                or   F, FLAG_PGMODE_01b
   249                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   250  0000'                      endm
   251                          
   252                             ;-----------------------------------------------
   253                             ;  Force indexed addr mode operands to Index Pg
   254                             ;-----------------------------------------------
   255                             ;
   256                             ;  DESC: Permit instructions that use indexed address mode to reference page
   257                             ;        zero or the page pointed to by the IDX_PP register, depending on the
   258                             ;        setting of the MSb (or "Direct Page Mode" bit) of the PGMODE bits
   259                             ;        in the CPU Flag register, F. (This macro clears the PGMODE LSb.)
   260                             ;
   261                             ; INPUT: none
   262                             ;
   263                             ;  COST: 4 instruction cycles (in LMM only)
   264                          
   265                             macro RAM_X_POINTS_TO_INDEXPAGE
   266                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   267                                and  F, ~FLAG_PGMODE_01b
   268                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   269  0000'                      endm
   270                          
   271                             ;-----------------------------------------------
   272                             ;  Function Prologue
   273                             ;-----------------------------------------------
   274                             ;
   275                             ;  Prologue for functions that run in the LMM and SMM.
   276                             ;
   277                          
   278                             macro RAM_PROLOGUE( ACTUAL_CLASS )
   279                          
   280                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   281                             ; Nothing to do
   282                             ENDIF ; RAM_USE_CLASS_1
   283                          
   284                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   285                                IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   286                                   RAM_X_POINTS_TO_STACKPAGE         ; exit native paging mode!
   287                                ENDIF
   288                             ENDIF ; RAM_USE_CLASS_2
   289                          
   290                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   291                                IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   292                                   RAM_X_POINTS_TO_INDEXPAGE         ; exit native paging mode!
   293                                ENDIF
   294                             ENDIF ; RAM_USE_CLASS_3
   295                          
   296                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   297                             ; Nothing to do
   298                             ENDIF ; RAM_USE_CLASS_4
   299                          
   300  0000'                      endm
   301                          
   302                             ;-----------------------------------------------
   303                             ;  Function Epilogue
   304                             ;-----------------------------------------------
   305                             ;
   306                             ;  Prologue for functions that run in the LMM and SMM.
   307                             ;
   308                          
   309                             macro RAM_EPILOGUE( ACTUAL_CLASS )
   310                          
   311                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   312                             ; Nothing to do
   313                             ENDIF ; RAM_USE_CLASS_1
   314                          
   315                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   316                                RAM_RESTORE_NATIVE_PAGING
   317                             ENDIF ; RAM_USE_CLASS_2
   318                          
   319                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   320                                RAM_RESTORE_NATIVE_PAGING
   321                             ENDIF ; RAM_USE_CLASS_3
   322                          
   323                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   324                             ; Nothing to do
   325                             ENDIF ; RAM_USE_CLASS_4
   326                          
   327  0000'                      endm
   328                          
   329                             ;-----------------------------------------------
   330                             ;  Preserve Register
   331                             ;-----------------------------------------------
   332                             ;
   333                             ;  DESC: Preserve a register value on the stack
   334                             ;
   335                             ; INPUT: Name or address of register in I/O Space
   336                             ;        The I/O bank is an implicit parameter. That is, this function will
   337                             ;        Access the I/O bank currently specified by the CPU Flag register.
   338                             ;
   339                             ;  USES: CPU 'A' register
   340                             ;
   341                             ;  COST: 9 instruction cycles
   342                          
   343                             macro REG_PRESERVE( IOReg )
   344                             mov   A, reg[ @IOReg ]
   345                             push  A
   346  0000'                      endm
   347                          
   348                             ;-----------------------------------------------
   349                             ;  Restore Register
   350                             ;-----------------------------------------------
   351                             ;
   352                             ;  DESC: Restore a register value from the stack
   353                             ;
   354                             ; INPUT: Name or address of register in I/O Space
   355                             ;        The I/O bank is an implicit parameter. That is, this function will
   356                             ;        Access the I/O bank currently specified by the CPU Flag register.
   357                             ;
   358                             ;  USES: CPU 'A' register
   359                             ;
   360                             ;  COST: 10 instruction cycles
   361                          
   362                             macro REG_RESTORE( IOReg )
   363                             pop   A
   364                             mov   reg[ @IOReg ], A
   365  0000'                      endm
   366                          
   367                             ;-----------------------------------------------
   368                             ;  Preserve Volatile Page Pointer Registers
   369                             ;-----------------------------------------------
   370                             ;
   371                             ;  DESC: Invoked by ISRs before switching to the LMM mode and calling
   372                             ;        functions that require on it.
   373                             ;
   374                             ; INPUT: none
   375                             ;
   376                             ;  USES: CPU 'A' register
   377                             ;
   378                             ;  COST: 45 instruction cycles (in LMM only)
   379                          
   380                             macro ISR_PRESERVE_PAGE_POINTERS
   381                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   382                                REG_PRESERVE CUR_PP
   383                                REG_PRESERVE IDX_PP
   384                                REG_PRESERVE MVR_PP
   385                                REG_PRESERVE MVW_PP
   386                             ENDIF
   387  0000'                      endm
   388                          
   389                             ;-----------------------------------------------
   390                             ;  Restore Volatile Page Pointer Registers
   391                             ;-----------------------------------------------
   392                             ;
   393                             ;  DESC: Undo for RAM_PRESERVE_PAGE_POINTERS macro. Invoked by ISRs after
   394                             ;        calling functions that run in the LMM mode and before executing
   395                             ;        the RETI instruction.
   396                             ;
   397                             ; INPUT: none
   398                             ;
   399                             ;  USES: CPU 'A' register
   400                             ;
   401                             ;  COST: 50 instruction cycles (in LMM only)
   402                          
   403                             macro ISR_RESTORE_PAGE_POINTERS
   404                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   405                                REG_RESTORE MVW_PP
   406                                REG_RESTORE MVR_PP
   407                                REG_RESTORE IDX_PP
   408                                REG_RESTORE CUR_PP
   409                             ENDIF
   410                             endm
      + 0000'                   
      + 0000'                   ; end of file Memory.inc
      + 0000'                   ;;*****************************************************************************
;;******************
      +                         ***********************************************************
;;  FILENAME: Timer16.inc
;;   Version: 
      +                         2.6, Updated on 2013/5/19 at 10:44:39
;;  Generated by PSoC Designer 5.4.2946
;;
;;  DESCRIPTION: As
      +                         sembler declarations for the Timer16 user module interface
;;---------------------------------------
      +                         --------------------------------------
;;  Copyright (c) Cypress Semiconductor 2013. All Rights Rese
      +                         rved.
;;*****************************************************************************
;;************
      +                         *****************************************************************
   824                          
   825                          ; end of file m8c.inc
    29  00C0                    FLAG_PGMODE_MASK:  equ 0C0h     ; Paging control for > 256 bytes of RAM
    30  0000                    FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
    31  0040                    FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
    32  0080                    FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
    33  00C0                    FLAG_PGMODE_3:     equ 0C0h       ; Direct to CUR_PP page, indexed to STK_PP page
    34  0000                    FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
    35  0040                    FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
    36  0080                    FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
    37  00C0                    FLAG_PGMODE_11b:   equ 0C0h       ; Same as PGMODE_3
    38  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    39  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    40  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    41  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    42  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    43                          
    44                          
    45                          ;;=============================================================================
    46                          ;;      Register Space, Bank 0
    47                          ;;=============================================================================
    48                          
    49                          ;------------------------------------------------
    50                          ;  Port Registers
    51                          ;  Note: Also see this address range in Bank 1.
    52                          ;------------------------------------------------
    53                          ; Port 0
    54  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    55  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    56  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    57  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    58                          ; Port 1
    59  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    60  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    61  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    62  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    63                          ; Port 2
    64  0008                    PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
    65  0009                    PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
    66  000A                    PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
    67  000B                    PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
    68                          ; Port 3
    69  000C                    PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
    70  000D                    PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
    71  000E                    PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
    72  000F                    PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
    73                          ; Port 4
    74  0010                    PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
    75  0011                    PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
    76  0012                    PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
    77  0013                    PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
    78                          
    79                          ;------------------------------------------------
    80                          ;  Digital PSoC(tm) block Registers
    81                          ;  Note: Also see this address range in Bank 1.
    82                          ;------------------------------------------------
    83                          ; Digital PSoC block 00, Basic Type C
    84  0020                    DBC00DR0:     equ 20h          ; data register 0                          (#)
    85  0021                    DBC00DR1:     equ 21h          ; data register 1                          (W)
    86  0022                    DBC00DR2:     equ 22h          ; data register 2                          (RW)
    87  0023                    DBC00CR0:     equ 23h          ; control & status register 0              (#)
    88                          
    89                          ; Digital PSoC block 01, Basic Type C
    90  0024                    DBC01DR0:     equ 24h          ; data register 0                          (#)
    91  0025                    DBC01DR1:     equ 25h          ; data register 1                          (W)
    92  0026                    DBC01DR2:     equ 26h          ; data register 2                          (RW)
    93  0027                    DBC01CR0:     equ 27h          ; control & status register 0              (#)
    94                          
    95                          ; Digital PSoC block 02, Communications Type C
    96  0028                    DCC02DR0:     equ 28h          ; data register 0                          (#)
    97  0029                    DCC02DR1:     equ 29h          ; data register 1                          (W)
    98  002A                    DCC02DR2:     equ 2Ah          ; data register 2                          (RW)
    99  002B                    DCC02CR0:     equ 2Bh          ; control & status register 0              (#)
   100                          
   101                          ; Digital PSoC block 03, Communications Type C
   102  002C                    DCC03DR0:     equ 2Ch          ; data register 0                          (#)
   103  002D                    DCC03DR1:     equ 2Dh          ; data register 1                          (W)
   104  002E                    DCC03DR2:     equ 2Eh          ; data register 2                          (RW)
   105  002F                    DCC03CR0:     equ 2Fh          ; control & status register 0              (#)
   106                          
   107                          ; Digital PSoC block 10, Basic Type C
   108  0030                    DBC10DR0:     equ 30h          ; data register 0                          (#)
   109  0031                    DBC10DR1:     equ 31h          ; data register 1                          (W)
   110  0032                    DBC10DR2:     equ 32h          ; data register 2                          (RW)
   111  0033                    DBC10CR0:     equ 33h          ; control & status register 0              (#)
   112                          
   113                          ; Digital PSoC block 11, Basic Type C
   114  0034                    DBC11DR0:     equ 34h          ; data register 0                          (#)
   115  0035                    DBC11DR1:     equ 35h          ; data register 1                          (W)
   116  0036                    DBC11DR2:     equ 36h          ; data register 2                          (RW)
   117  0037                    DBC11CR0:     equ 37h          ; control & status register 0              (#)
   118                          
   119                          ; Digital PSoC block 12, Communications Type C
   120  0038                    DCC12DR0:     equ 38h          ; data register 0                          (#)
   121  0039                    DCC12DR1:     equ 39h          ; data register 1                          (W)
   122  003A                    DCC12DR2:     equ 3Ah          ; data register 2                          (RW)
   123  003B                    DCC12CR0:     equ 3Bh          ; control & status register 0              (#)
   124                          
   125                          ; Digital PSoC block 13, Communications Type C
   126  003C                    DCC13DR0:     equ 3Ch          ; data register 0                          (#)
   127  003D                    DCC13DR1:     equ 3Dh          ; data register 1                          (W)
   128  003E                    DCC13DR2:     equ 3Eh          ; data register 2                          (RW)
   129  003F                    DCC13CR0:     equ 3Fh          ; control & status register 0              (#)
   130                          
   131                          ;-------------------------------------
   132                          ;  Analog Control Registers
   133                          ;-------------------------------------
   134  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
   135  00C0                    AMX_IN_ACI3:          equ C0h    ; MASK: column 3 input mux
   136  0030                    AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
   137  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
   138  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
   139                          
   140  0061                    AMUX_CFG:      equ 61h          ; Analog MUX Configuration
   141  0030                    AMUX_CFG_INTCAP:       equ 30h    ;
   142  000E                    AMUX_CFG_MUXCLK:  	  equ 0Eh	 ;
   143  0001                    AMUX_CFG_EN:		  	  equ 01h	 ;
   144                          
   145                          ; old declarations DO NOT USE
   146  0061                    AMUXCFG:      equ 61h          ; Analog MUX Configuration
   147  0030                    AMUXCFG_INTCAP:       equ 30h    ;
   148  000E                    AMUXCFG_MUXCLK:  	  equ 0Eh	 ;
   149  0001                    AMUXCFG_EN:		  	  equ 01h	 ;
   150                          
   151  0062                    PWM_CR:       equ 62h          ; Pulse-Width Modulator Control
   152  0038                    PWM_CR_HIGH:          equ 38h    ; MASK: PWM high time
   153  0006                    PWM_CR_LOW:           equ 06h	 ; MASK: PWM low time
   154  0001                    PWM_CR_EN:            equ 01h	 ; MASK: Enable/Disable PWM function
   155                          
   156  0063                    ARF_CR:       equ 63h          ; Analog Reference Control
   157                          
   158  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus Register           (#)
   159  0080                    CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
   160  0040                    CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
   161  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
   162  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
   163  0008                    CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
   164  0004                    CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
   165  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
   166  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   167                          
   168  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   169  0020                    CMP_CR1_CLDIS1:       equ 20h    ; MASK: Column 1 comparator output latch
   170  0010                    CMP_CR1_CLDIS0:	      equ 10h    ; MASK: Column 0 comparator output latch
   171                          
   172  0068                    ADC0_CR:      equ 68h          ; Analog Column 0 Configuration
   173  0080                    ADC0_CR_CMPST:        equ 80h    ;
   174  0040                    ADC0_CR_LOREN:        equ 40h    ;
   175  0020                    ADC0_CR_SHEN:         equ 20h    ;
   176  0008                    ADC0_CR_CBSRC:        equ 08h    ;
   177  0004                    ADC0_CR_ADCM:         equ 04h    ;
   178  0001                    ADC0_CR_EN:	          equ 01h    ;
   179                          
   180  0069                    ADC1_CR:      equ 69h          ; Analog Column 1 Configuration
   181  0080                    ADC1_CR_CMPST:        equ 80h    ;
   182  0040                    ADC1_CR_LOREN:        equ 40h    ;
   183  0020                    ADC1_CR_SHEN:         equ 20h    ;
   184  0008                    ADC1_CR_CBSRC:        equ 08h    ;
   185  0004                    ADC1_CR_ADCM:         equ 04h    ;
   186  0001                    ADC1_CR_EN:	          equ 01h    ;
   187                          
   188                          ; Continuous Time PSoC block Type E Row 0 Col 0
   189  0072                    ACE00CR1:     equ 72h          ; Control register 1                       (RW)
   190  0073                    ACE00CR2:     equ 73h          ; Control register 2                       (RW)
   191                          
   192                          ; Continuous Time PSoC block Type E Row 0 Col 1
   193  0076                    ACE01CR1:     equ 76h          ; Control register 1                       (RW)
   194  0077                    ACE01CR2:     equ 77h          ; Control register 2                       (RW)
   195                          
   196                          ; Switched Cap PSoC blockType E Row 1 Col 0
   197  0080                    ASE10CR0:     equ 80h          ; Control register 0                       (RW)
   198                          
   199                          ; Switched Cap PSoC blockType E Row 1 Col 1
   200  0084                    ASE11CR0:     equ 84h          ; Control register 0                       (RW)
   201                          
   202                          ;-----------------------------------------------
   203                          ;  Global General Purpose Data Registers
   204                          ;-----------------------------------------------
   205  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   206  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   207  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   208  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   209                          
   210                          ;------------------------------------------------
   211                          ;  Row Digital Interconnects
   212                          ;
   213                          ;  Note: the following registers are mapped into
   214                          ;  both register bank 0 AND register bank 1.
   215                          ;------------------------------------------------
   216                          
   217  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   218  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   219  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   220  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   221  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   222  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   223  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   224                          
   225  00B8                    RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
   226  00B9                    RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
   227  00BA                    RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
   228  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   229  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   230  00BD                    RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
   231  00BE                    RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
   232                          
   233                          ;-----------------------------------------------
   234                          ;  Ram Page Pointers
   235                          ;-----------------------------------------------
   236  00D0                    CUR_PP:      equ 0D0h           ; Current   Page Pointer
   237  00D1                    STK_PP:      equ 0D1h           ; Stack     Page Pointer
   238  00D3                    IDX_PP:      equ 0D3h           ; Index     Page Pointer
   239  00D4                    MVR_PP:      equ 0D4h           ; MVI Read  Page Pointer
   240  00D5                    MVW_PP:      equ 0D5h           ; MVI Write Page Pointer
   241                          
   242                          ;------------------------------------------------
   243                          ;  I2C Configuration Registers
   244                          ;------------------------------------------------
   245  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   246  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   247  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   248  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   249  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   250  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   251  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   252  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   253  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   254  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   255                          
   256  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   257  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   258  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   259  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   260  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   261  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   262  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   263  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   264  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   265                          
   266  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   267                          
   268  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   269  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   270  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   271  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   272  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   273                          
   274                          ;------------------------------------------------
   275                          ;  System and Global Resource Registers
   276                          ;------------------------------------------------
   277  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   278                                                         ; Use INT_MSK0 bit field masks
   279  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   280                                                         ; Use INT_MSK1 bit field masks
   281  00DC                    INT_CLR2:     equ 0DCh          ; Interrupt Clear Register 2               (RW)
   282                                                         ; Use INT_MSK2 bit field masks
   283  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   284                                                         ; Use INT_MSK3 bit field masks
   285                          
   286  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   287  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   288  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   289                          
   290  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   291  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   292  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   293  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   294  0010                    INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
   295  0008                    INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
   296  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   297  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   298  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   299                          
   300  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   301  0080                    INT_MSK1_DCC13:            equ 80h ; MASK: enable/disable DCC13 block interrupt
   302  0040                    INT_MSK1_DCC12:            equ 40h ; MASK: enable/disable DCC12 block interrupt
   303  0020                    INT_MSK1_DBC11:            equ 20h ; MASK: enable/disable DBC11 block interrupt
   304  0010                    INT_MSK1_DBC10:            equ 10h ; MASK: enable/disable DBC10 block interrupt
   305  0008                    INT_MSK1_DCC03:            equ 08h ; MASK: enable/disable DCC03 block interrupt
   306  0004                    INT_MSK1_DCC02:            equ 04h ; MASK: enable/disable DCC02 block interrupt
   307  0002                    INT_MSK1_DBC01:            equ 02h ; MASK: enable/disable DBC01 block interrupt
   308  0001                    INT_MSK1_DBC00:            equ 01h ; MASK: enable/disable DBC00 block interrupt
   309                          
   310  00DF                    INT_MSK2:     equ DFh			; Custom block Mask Register			   (RW)
   311  0010                    INT_MSK2_SARADC:           equ 10h ; MASK: enable/disable SARADC block interrupt
   312  0020                    INT_MSK2_CSD0:             equ 20h ; MASK: enable/disable CSD0 block interrupt
   313  0040                    INT_MSK2_CSD1:             equ 40h ; MASK: enable/disable CSD1 block interrupt
   314  0080                    INT_MSK2_RTC:              equ 80h ; MASK: enable/disable RTC block interrupt
   315                          
   316  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   317  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   318                          
   319                          ;------------------------------------------------------
   320                          ;  MAC Registers
   321                          ;------------------------------------------------------
   322                          
   323  00E8                    MUL0_X:       equ 0E8h          ; Multiply Input X Register                (W)
   324  00E9                    MUL0_Y:       equ 0E9h          ; Multiply Input Y Register                (W)
   325  00EA                    MUL0_DH:      equ 0EAh          ; Multiply Result High Byte Register       (R)
   326  00EB                    MUL0_DL:      equ 0EBh          ; Multiply Result Low Byte Register        (R)
   327                          
   328  00EC                    ACC0_DR1:     equ 0ECh          ; Accumulator Data Register 1              (RW)
   329  00ED                    ACC0_DR0:     equ 0EDh          ; Accumulator Data Register 0              (RW)
   330  00EE                    ACC0_DR3:     equ 0EEh          ; Accumulator Data Register 3              (RW)
   331  00EF                    ACC0_DR2:     equ 0EFh          ; Accumulator Data Register 2              (RW)
   332                          
   333                          ; DECIMATOR Control Registers
   334  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   335  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   336                          
   337                          ;------------------------------------------------------
   338                          ;  System Status and Control Registers
   339                          ;
   340                          ;  Note: The following registers are mapped into both
   341                          ;        register bank 0 AND register bank 1.
   342                          ;------------------------------------------------------
   343  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   344                                                             ; Use FLAG_ masks defined at top of file
   345                          
   346  00FD                    DAC_D:        equ 0FDh		   ; DAC Data Register                        (RW)
   347                          
   348  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   349  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: flag, Internal Reset Status bit
   350  0010                    CPU_SCR1_SLIMO:         equ 10h	   ; MASK: Slow IMO (internal main osc) enable
   351  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   352  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   353  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   354                          
   355  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   356  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   357  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   358  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   359  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   360  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   361                          
   362                          ;------------------------------------------------------
   363                          ;  Neon Capsense Digital Control Registers
   364                          ;------------------------------------------------------
   365  0050                    CSD0_DR0_L:				equ 50h		; Capsense 0 data low 0				(RW)
   366  0054                    CSD0_DR0_H:				equ 54h		; Capsense 0 data high 0			(RW)
   367  0058                    CSD1_DR0_L:				equ 58h		; Capsense 1 data low 0				(RW)
   368  005C                    CSD1_DR0_H:				equ 5Ch		; Capsense 1 data high 0			(RW)
   369  0051                    CSD0_DR1_L:				equ 51h		; Capsense 0 data low 1				(RW)
   370  0055                    CSD0_DR1_H:				equ 55h		; Capsense 0 data high 1			(RW)
   371  0059                    CSD1_DR1_L:				equ 59h		; Capsense 1 data low 1				(RW)
   372  005D                    CSD1_DR1_H:				equ 5Dh		; Capsense 1 data high 1			(RW)
   373  0052                    CSD0_CNT_L:				equ 52h		; Capsense 0 counter low			(RW)
   374  0056                    CSD0_CNT_H:				equ 56h		; Capsense 0 counter high			(RW)
   375  005A                    CSD1_CNT_L:				equ 5Ah		; Capsense 1 counter low			(RW)
   376  005E                    CSD1_CNT_H:				equ	5Eh		; Capsense 1 counter high			(RW)
   377  0053                    CSD0_CR0:				equ 53h		; Capsense 0 control 0				(RW)
   378  005B                    CSD1_CR0:				equ 5Bh		; Capsense 1 control 0				(RW)
   379  0057                    CSD0_CR1:				equ 57h		; Capsense 0 control 1				(RW)
   380  005F                    CSD1_CR1:				equ 5Fh		; Capsense 1 control 1				(RW)
   381                          
   382                          ;------------------------------------------------------
   383                          ;  Neon Analog Registers
   384                          ;------------------------------------------------------
   385  0065                    ASY_CR:					equ 65h		; Analog Synchronization Control	(RW)
   386  006A                    ADC_DH:					equ 6Ah		; ADC data high						(RW)
   387  006B                    ADC_DL:					equ 6Bh		; ADC data low						(RW)
   388  00C8                    PWMVREF0:				equ C8h		; PWM Voltage Reference 0			(RW)
   389  00C9                    PWMVREF1:				equ C9h		; PWM Voltage Reference 1			(RW)
   390  00CB                    PWMSRC:					equ CBh		; PWM Source						(RW)
   391  00CA                    IDACMODE:				equ CAh		; IDAC Mode							(RW)
   392  00FC                    IDACR_D:				equ FCh		; Analog Mux DAC data 0				(RW)
   393  00FD                    IDACL_D:				equ FDh		; Analog Mux DAC data 1				(RW)
   394                          
   395                          ;------------------------------------------------------
   396                          ;  Neon Digital Registers
   397                          ;------------------------------------------------------
   398  00B7                    RDI0DSM:				equ B7h		; Row Digital Interconnect input select 0	(RW)
   399  00BF                    RDI1DSM:				equ BFh		; Row Digital Interconnect input select 1	(RW)
   400                          
   401                          ;------------------------------------------------------
   402                          ;  Neon Test Registers
   403                          ;------------------------------------------------------
   404  00CC                    TSCR0:					equ CCh		; Tsource 0							(RW)
   405  00CD                    TSCMPH:					equ CDh		; TSCMP high						(RW)
   406  00CE                    TSCMPL:					equ CEh		; TSCMP low							(RW)
   407  00CF                    TSCR1:					equ CFh		; Tsource 1							(RW)
   408                          
   409                          ;;=============================================================================
   410                          ;;      Register Space, Bank 1
   411                          ;;=============================================================================
   412                          
   413                          ;------------------------------------------------
   414                          ;  Port Registers
   415                          ;  Note: Also see this address range in Bank 0.
   416                          ;------------------------------------------------
   417                          ; Port 0
   418  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   419  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   420  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   421  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   422                          
   423                          ; Port 1
   424  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   425  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   426  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   427  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   428                          
   429                          ; Port 2
   430  0008                    PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
   431  0009                    PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
   432  000A                    PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
   433  000B                    PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
   434                          
   435                          ; Port 3
   436  000C                    PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
   437  000D                    PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
   438  000E                    PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
   439  000F                    PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
   440                          
   441                          ; Port 4
   442  0010                    PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
   443  0011                    PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
   444  0012                    PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
   445  0013                    PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
   446                          
   447                          ;------------------------------------------------
   448                          ;  Digital PSoC(tm) block Registers
   449                          ;  Note: Also see this address range in Bank 0.
   450                          ;------------------------------------------------
   451                          
   452                          ; Digital PSoC block 00, Basic Type C
   453  0020                    DBC00FN:      equ 20h          ; Function Register                        (RW)
   454  0021                    DBC00IN:      equ 21h          ;    Input Register                        (RW)
   455  0022                    DBC00OU:      equ 22h          ;   Output Register                        (RW)
   456  0023                    DBC00CR1:     equ 23h          ;   control & status register 1            (RW)
   457                          
   458                          ; Digital PSoC block 01, Basic Type C
   459  0024                    DBC01FN:      equ 24h          ; Function Register                        (RW)
   460  0025                    DBC01IN:      equ 25h          ;    Input Register                        (RW)
   461  0026                    DBC01OU:      equ 26h          ;   Output Register                        (RW)
   462  0027                    DBC01CR1:     equ 27h          ;   control & status register 1            (RW)
   463                          
   464                          ; Digital PSoC block 02, Communications Type C
   465  0028                    DCC02FN:      equ 28h          ; Function Register                        (RW)
   466  0029                    DCC02IN:      equ 29h          ;    Input Register                        (RW)
   467  002A                    DCC02OU:      equ 2Ah          ;   Output Register                        (RW)
   468  002B                    DBC02CR1:     equ 2Bh          ;   control & status register 1            (RW)
   469                          
   470                          ; Digital PSoC block 03, Communications Type C
   471  002C                    DCC03FN:      equ 2Ch          ; Function Register                        (RW)
   472  002D                    DCC03IN:      equ 2Dh          ;    Input Register                        (RW)
   473  002E                    DCC03OU:      equ 2Eh          ;   Output Register                        (RW)
   474  0029                    DBC03CR1:     equ 29h          ;   control & status register 1            (RW)
   475                          
   476                          ; Digital PSoC block 10, Basic Type C
   477  0030                    DBC10FN:      equ 30h          ; Function Register                        (RW)
   478  0031                    DBC10IN:      equ 31h          ;    Input Register                        (RW)
   479  0032                    DBC10OU:      equ 32h          ;   Output Register                        (RW)
   480  0033                    DBC10CR1:     equ 33h          ;   control & status register 1            (RW)
   481                          
   482                          ; Digital PSoC block 11, Basic Type C
   483  0034                    DBC11FN:      equ 34h          ; Function Register                        (RW)
   484  0035                    DBC11IN:      equ 35h          ;    Input Register                        (RW)
   485  0036                    DBC11OU:      equ 36h          ;   Output Register                        (RW)
   486  0037                    DBC11CR1:     equ 37h          ;   control & status register 1            (RW)
   487                          
   488                          ; Digital PSoC block 12, Communications Type C
   489  0038                    DCC12FN:      equ 38h          ; Function Register                        (RW)
   490  0039                    DCC12IN:      equ 39h          ;    Input Register                        (RW)
   491  003A                    DCC12OU:      equ 3Ah          ;   Output Register                        (RW)
   492  003B                    DBC12CR1:     equ 3Bh          ;   control & status register 1            (RW)
   493                          
   494                          ; Digital PSoC block 13, Communications Type C
   495  003C                    DCC13FN:      equ 3Ch          ; Function Register                        (RW)
   496  003D                    DCC13IN:      equ 3Dh          ;    Input Register                        (RW)
   497  003E                    DCC13OU:      equ 3Eh          ;   Output Register                        (RW)
   498  003F                    DBC13CR1:     equ 3Fh          ;   control & status register 1            (RW)
   499                          
   500                          ;------------------------------------------------
   501                          ;  System and Global Resource Registers
   502                          ;  Note: Also see this address range in Bank 0.
   503                          ;------------------------------------------------
   504                          
   505  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   506  00C0                    CLK_CR0_ACOLUMN_3:    equ C0h    ; MASK: Specify clock for analog cloumn
   507  0030                    CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
   508  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   509  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   510                          
   511  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   512  0018                    CLK_CR1_ACLK1:        equ 18h    ; MASK: Digital PSoC block for analog source
   513  0003                    CLK_CR1_ACLK0:        equ 03h    ; MASK: Digital PSoC block for analog source
   514                          
   515  0003                    CLK_CR1_ACLK2:        equ 03h    ; Deprecated do not use
   516                          
   517  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   518  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   519                          
   520  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   521  000F                    AMD_CR0_AMOD0:        equ 0Fh    ; MASK: Modulation source for analog column 0
   522                          
   523  0064                    CMP_GO_EN:    equ 64h          ; Comparator Bus To Global Out Enable      (RW)
   524  0080                    CMP_GO_EN_GOO5:       equ 80h    ; MASK: Selected Col 1 signal to GOO5
   525  0040                    CMP_GO_EN_GOO1:       equ 40h    ; MASK: Selected Col 1 signal to GOO1
   526  0030                    CMP_GO_EN_SEL1:       equ 30h    ; MASK: Column 1 Signal Select
   527  0008                    CMP_GO_EN_GOO4:       equ 08h    ; MASK: Selected Col 0 signal to GOO4
   528  0004                    CMP_GO_EN_GOO0:       equ 04h    ; MASK: Selected Col 0 signal to GOO0
   529  0003                    CMP_GO_EN_SEL0:       equ 03h    ; MASK: Column 0 Signal Select
   530                          
   531  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   532  000F                    AMD_CR1_AMOD1:        equ 0Fh    ; MASK: Modulation ctrl for analog column 1
   533                          
   534  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   535  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   536  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   537                          
   538  006B                    CLK_CR3:      equ 6Bh          ; Analog Clock Source Control Register 3   (RW)
   539  0040                    CLK_CR3_SYS1:         equ 40h    ; MASK: Analog Clock 1 selection
   540  0030                    CLK_CR3_DIVCLK1:      equ 30h    ; MASK: Analog Clock 1 divider
   541  0004                    CLK_CR3_SYS0:         equ 04h    ; MASK: Analog Clock 0 selection
   542  0003                    CLK_CR3_DIVCLK0:      equ 03h    ; MASK: Analog Clock 0 divider
   543                          
   544                          ;------------------------------------------------
   545                          ;  Global Digital Interconnects
   546                          ;------------------------------------------------
   547                          
   548  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   549  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   550  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   551  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   552                          
   553  00A0                    GDI_O_IN_CR:  equ 0A0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   554  00A1                    GDI_E_IN_CR:  equ 0A1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   555  00A2                    GDI_O_OU_CR:  equ 0A2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   556  00A3                    GDI_E_OU_CR:  equ 0A3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   557                          
   558  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   559  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   560                          
   561                          ;------------------------------------------------
   562                          ;  Analog Mux Bus Port Enable Bits
   563                          ;------------------------------------------------
   564  00D8                    MUX_CR0:      equ 0D8h          ; Analog Mux Port 0 Bit Enables Register
   565  00D9                    MUX_CR1:      equ 0D9h          ; Analog Mux Port 1 Bit Enables Register
   566  00DA                    MUX_CR2:      equ 0DAh          ; Analog Mux Port 2 Bit Enables Register
   567  00DB                    MUX_CR3:      equ 0DBh          ; Analog Mux Port 3 Bit Enables Register
   568  00EC                    MUX_CR4:      equ 0ECh          ; Analog Mux Port 4 Bit Enables Register
   569                          
   570                          ;------------------------------------------------
   571                          ;  Clock and System Control Registers
   572                          ;------------------------------------------------
   573                          
   574  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   575  0080                    OSC_GO_EN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   576  0040                    OSC_GO_EN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   577  0020                    OSC_GO_EN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   578  0010                    OSC_GO_EN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   579  0008                    OSC_GO_EN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   580  0004                    OSC_GO_EN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   581  0002                    OSC_GO_EN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   582  0001                    OSC_GO_EN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   583                          
   584  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   585  0003                    OSC_CR4_VC3SEL:       equ 03h    ; MASK: System VC3 Clock source
   586                          
   587  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   588                          
   589  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   590  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   591  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   592  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   593  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   594  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   595  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   596  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   597  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   598  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   599  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   600  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   601  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   602  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   603  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   604  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   605  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   606  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   607                          
   608  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   609  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   610  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   611                          
   612  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   613  0080                    OSC_CR2_PLLGAIN:      equ 80h    ; MASK: High/Low gain
   614  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   615  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   616  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   617                          
   618  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   619  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   620  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   621  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   622  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   623  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   624  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   625  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   626                          
   627  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   628  0008                    VLT_CMP_NOWRITE:      equ 08h    ; MASK: Vcc below Flash Write level
   629  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   630  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   631  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   632                          
   633  00E5                    ADC0_TR:      equ 0E5h          ; ADC Column 0 Trim Register
   634  00E6                    ADC1_TR:      equ 0E6h          ; ADC Column 1 Trim Register
   635                          
   636  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   637  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   638  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   639  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   640                          
   641  00FA                    FLS_PR1:      equ 0FAh          ; Flash Program Register 1                 (RW)
   642  0003                    FLS_PR1_BANK:         equ 03h    ; MASK: Select Active Flash Bank
   643                          
   644  00FD                    DAC_CR0:       equ 0FDh          ; Analog Mux DAC Control Register 0
   645  00DC                    DAC_CR1:       equ 0DCh          ; Analog Mux DAC Control Register 1
   646  0008                    DAC_CR_IRANGE:        equ 08h    ; MASK: Sets the DAC Range low or high
   647  0006                    DAC_CR_OSCMODE:       equ 06h    ; MASK: Defines the reset mode for AMux
   648  0001                    DAC_CR_ENABLE:        equ 01h    ; MASK: Enable/Disable DAC function
   649                          
   650                          ;------------------------------------------------
   651                          ;  I2C Control Registers
   652                          ;------------------------------------------------
   653                          
   654  00AD                    I2C_ADDR:    equ 0ADh          ; I2C Address Register (RW)
   655                          
   656                          ;------------------------------------------------------
   657                          ;  Neon Analog Registers
   658                          ;------------------------------------------------------
   659  0053                    VDAC50CR0:		equ 53h			; V DAC5 control 0				(RW)
   660  0057                    VDAC51CR0:		equ 57h			; V DAC5 control 1				(RW)
   661  00A8                    ADC_CR0:		equ A8h			; ADC control 0					(RW)
   662  00A9                    ADC_CR1:		equ A9h			; ADC control 1					(RW)
   663  00AA                    ADC_CR2:		equ AAh			; ADC control 2					(RW)
   664  00AB                    ADC_CR3TRIM:	equ ABh			; ADC control 3					(RW)
   665  00AC                    ADC_CR4:		equ ACh			; ADC control 4					(RW)
   666  00E7                    VDAC_TRIM:		equ E7h			; V DAC trim					(RW)
   667                          
   668                          ;------------------------------------------------------
   669                          ;  Neon Current Sense CMP Registers
   670                          ;------------------------------------------------------
   671  0050                    CMP0CR1:		equ 50h			; CMP0 control 1				(RW)
   672  0051                    CMP0CR2:		equ 51h			; CMP0 control 2				(RW)
   673  0054                    CMP1CR1:		equ 54h			; CMP1 control 1				(RW)
   674  0055                    CMP1CR2:		equ 55h			; CMP1 control 2				(RW)
   675  0058                    CSCMPCR0:		equ 58h			; CSCMP control 0				(RW)
   676  0059                    CSCMPGOEN:		equ 59h			; CSCMO global out enable		(RW)
   677  005A                    CSLUTCR0:		equ 5Ah			; CSLUT control 0				(RW)
   678  005B                    CMPCOLMUX:		equ 5Bh			; CMP Column Mux				(RW)
   679  005C                    CMPPWMCR:		equ 5Ch			; CMP PWM control				(RW)
   680  005D                    CMPFLTCR:		equ 5Dh			; CMP filter control			(RW)
   681  005E                    CMPCLK1:		equ 5Eh			; CMP clock 1					(RW)
   682  005F                    CMPCLK0:		equ 5Fh			; CMP clock 0					(RW)
   683                          
   684                          ;------------------------------------------------------
   685                          ;  Neon Real Time Clock Registers
   686                          ;------------------------------------------------------
   687  00A4                    RTCH:			equ A4h			; Real time current hour		(RW)
   688  00A5                    RTCM:			equ A5h			; Real time current minute		(RW)
   689  00A6                    RTCS:			equ A6h			; Real time current second		(RW)
   690  00A7                    RTCCR:			equ A7h			; Real time clock control		(RW)
   691                          
   692                          ;------------------------------------------------------
   693                          ;  Analog MUX Config Registers
   694                          ;------------------------------------------------------
   695                          
   696  006A                    AMUX_CFG1:			equ 6Ah  ; Analog MUX Configuration 1
   697  0020                    AMUX_CFG1_GOINVR:	equ 20h  ;
   698  0010                    AMUX_CFG1_GOINVL:  	equ 10h	 ;
   699  000C                    AMUX_CFG1_AMUXMODR:	equ 0Ch	 ;
   700  0003                    AMUX_CFG1_AMUXMODL:	equ 03h	 ;
   701                          
   702                          ;;=============================================================================
   703                          ;;      M8C System Macros
   704                          ;;  These macros should be used when their functions are needed.
   705                          ;;=============================================================================
   706                          
   707                          ;----------------------------------------------------
   708                          ;  Swapping Register Banks
   709                          ;----------------------------------------------------
   710                              macro M8C_SetBank0
   711                              and   F, ~FLAG_XIO_MASK
   712  0000'                       endm
   713                          
   714                              macro M8C_SetBank1
   715                              or    F, FLAG_XIO_MASK
   716  0000'                       endm
   717                          
   718                          ;----------------------------------------------------
   719                          ;  Global Interrupt Enable/Disable
   720                          ;----------------------------------------------------
   721                              macro M8C_EnableGInt
   722                              or    F, FLAG_GLOBAL_IE
   723  0000'                       endm
   724                          
   725                              macro M8C_DisableGInt
   726                              and   F, ~FLAG_GLOBAL_IE
   727  0000'                       endm
   728                          
   729                          ;----------------------------------------------------
   730                          ;  Enable/Disable Interrupt Mask
   731                          ;
   732                          ;  Use the following macros to enable/disable
   733                          ;  bits in the Interrupt mask registers,
   734                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   735                          ;
   736                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   737                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   738                          ;
   739                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   740                          ;        and MASK is the bit set to enable or disable
   741                          ;----------------------------------------------------
   742                          ; Disable Interrupt Bit Mask(s)
   743                              macro M8C_DisableIntMask
   744                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   745  0000'                       endm
   746                          
   747                          ; Enable Interrupt Bit Mask(s)
   748                              macro M8C_EnableIntMask
   749                              or    reg[@0], @1               ; enable specified interrupt enable bit
   750  0000'                       endm
   751                          
   752                          ;----------------------------------------------------
   753                          ;  Clear Posted Interrupt Flag Mask
   754                          ;
   755                          ;  Use the following macros to clear the
   756                          ;  bits in the Interrupt Clear registers,
   757                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   758                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   759                          ;
   760                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   761                          ;        and MASK is the bit set to enable or disable
   762                          ;----------------------------------------------------
   763                              macro M8C_ClearIntFlag
   764                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   765  0000'                       endm
   766                          
   767                          ;----------------------------------------------------
   768                          ;  Power-On Reset & WatchDog Timer Functions
   769                          ;----------------------------------------------------
   770                              macro M8C_EnableWatchDog
   771                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   772  0000'                       endm
   773                          
   774                              macro M8C_ClearWDT
   775                              mov   reg[RES_WDT], 00h
   776  0000'                       endm
   777                          
   778                              macro M8C_ClearWDTAndSleep
   779                              mov   reg[RES_WDT], 38h
   780  0000'                       endm
   781                          
   782                          ;----------------------------------------------------
   783                          ;  Sleep, CPU Stop & Software Reset
   784                          ;----------------------------------------------------
   785                              macro M8C_Sleep
   786                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   787                              ; The next instruction to be executed depends on the state of the
   788                              ; various interrupt enable bits. If some interrupts are enabled
   789                              ; and the global interrupts are disabled, the next instruction will
   790                              ; be the one that follows the invocation of this macro. If global
   791                              ; interrupts are also enabled then the next instruction will be
   792                              ; from the interrupt vector table. If no interrupts are enabled
   793                              ; then the CPU sleeps forever.
   794  0000'                       endm
   795                          
   796                              macro M8C_Stop
   797                              ; In general, you probably don't want to do this, but here's how:
   798                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   799                              ; Next instruction to be executed is located in the interrupt
   800                              ; vector table entry for Power-On Reset.
   801  0000'                       endm
   802                          
   803                              macro M8C_Reset
   804                              ; Restore CPU to the power-on reset state.
   805                              mov A, 0
   806                              SSC
   807                              ; Next non-supervisor instruction will be at interrupt vector 0.
   808  0000'                       endm
   809                          
   810                          ;----------------------------------------------------
   811                          ; ImageCraft Code Compressor Actions
   812                          ;----------------------------------------------------
   813                              ; Suspend Code Compressor
   814                              ; Must not span a RET or RETI instruction
   815                              ; without resuming code compression
   816                              macro Suspend_CodeCompressor
   817                              or   F, 0
   818  0000'                       endm
   819                          
   820                              ; Resume Code Compression
   821                              macro Resume_CodeCompressor
   822                              add  SP, 0
   823  0000'                       endm
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  FILENAME: Timer16.inc
     4                          ;;   Version: 2.6, Updated on 2013/5/19 at 10:44:39
     5                          ;;  Generated by PSoC Designer 5.4.2946
     6                          ;;
     7                          ;;  DESCRIPTION: Assembler declarations for the Timer16 user module interface
     8                          ;;-----------------------------------------------------------------------------
     9                          ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
    10                          ;;*****************************************************************************
    11                          ;;*****************************************************************************
    12                          
    13                          include "m8c.inc"
    14                          
    15                          
    16                          ;--------------------------------------------------
    17                          ; Constants for Timer16 API's.
    18                          ;--------------------------------------------------
    19                          
    20  0001                    Timer16_CONTROL_REG_START_BIT:             equ 0x01    ; Control register start bit
    21  00E1                    Timer16_INT_REG:                           equ 0x0e1
    22  0002                    Timer16_INT_MASK:                          equ 0x02
    23                          
    24                          
    25                          ;--------------------------------------------------
    26                          ; Constants for Timer16 user defined values
    27                          ;--------------------------------------------------
    28                          
    29  2580                    Timer16_PERIOD:                            equ 0x2580
    30  2328                    Timer16_COMPARE_VALUE:                     equ 0x2328
    31                          
    32                          
    33                          ;--------------------------------------------------
    34                          ; Register Address Constants for Timer16
    35                          ;--------------------------------------------------
    36                          
    37  0020                    Timer16_COUNTER_LSB_REG:               equ 0x20   ; DR0 Counter register
    38  0024                    Timer16_COUNTER_MSB_REG:               equ 0x24
    39  0021                    Timer16_PERIOD_LSB_REG:                equ 0x21   ; DR1 Period register
    40  0025                    Timer16_PERIOD_MSB_REG:                equ 0x25
    41  0022                    Timer16_COMPARE_LSB_REG:               equ 0x22   ; DR2 CompareValue register
    42  0026                    Timer16_COMPARE_MSB_REG:               equ 0x26
    43  0023                    Timer16_CONTROL_LSB_REG:               equ 0x23   ; Control register
    44  0027                    Timer16_CONTROL_MSB_REG:               equ 0x27
    45  0020                    Timer16_FUNC_LSB_REG:                  equ 0x20   ; Function register
    46  0024                    Timer16_FUNC_MSB_REG:                  equ 0x24
    47  0021                    Timer16_INPUT_LSB_REG:                 equ 0x21   ; Input register
    48  0025                    Timer16_INPUT_MSB_REG:                 equ 0x25
    49  0022                    Timer16_OUTPUT_LSB_REG:                equ 0x22   ; Output register
    50  0026                    Timer16_OUTPUT_MSB_REG:                equ 0x26
    51                          
    52                          
    53                          ;--------------------------------------------------
    54                          ; Timer16 Macro 'Functions'
    55                          ;--------------------------------------------------
    56                          
    57                             macro Timer16_Start_M
    58                             or    reg[Timer16_CONTROL_LSB_REG],  Timer16_CONTROL_REG_START_BIT
    59  0000'                      endm
    60                          
    61                             macro Timer16_Stop_M
    62                             and   reg[Timer16_CONTROL_LSB_REG], ~Timer16_CONTROL_REG_START_BIT
    63  0000'                      endm
    64                          
    65                             macro Timer16_EnableInt_M
    66                             M8C_EnableIntMask Timer16_INT_REG, Timer16_INT_MASK
    67  0000'                      endm
    68                          
    69                             macro Timer16_DisableInt_M
    70                             M8C_DisableIntMask Timer16_INT_REG, Timer16_INT_MASK
    71  0000'                      endm
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  FILENAME: Timer16INT.asm
     4                          ;;   Version: 2.6, Updated on 2013/5/19 at 10:44:39
     5                          ;;  Generated by PSoC Designer 5.4.2946
     6                          ;;
     7                          ;;  DESCRIPTION: Timer16 Interrupt Service Routine
     8                          ;;-----------------------------------------------------------------------------
     9                          ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
    10                          ;;*****************************************************************************
    11                          ;;*****************************************************************************
    12                          
    13                          include "m8c.inc"
    14                          include "memory.inc"
    15                          include "Timer16.inc"
    16                          
    17                          
    18                          ;-----------------------------------------------
    19                          ;  Global Symbols
    20                          ;-----------------------------------------------
    21                          export  _Timer16_ISR
    22                          
    23                          
    24                          AREA InterruptRAM (RAM,REL,CON)
    25                          
    26                          ;@PSoC_UserCode_INIT@ (Do not change this line.)
    27                          ;---------------------------------------------------
    28                          ; Insert your custom declarations below this banner
    29                          ;---------------------------------------------------
    30                          
    31                          ;------------------------
    32                          ; Includes
    33                          ;------------------------
    34                          
    35                          	
    36                          ;------------------------
    37                          ;  Constant Definitions
    38                          ;------------------------
    39                          
    40                          
    41                          ;------------------------
    42                          ; Variable Allocation
    43                          ;------------------------
    44                          
    45                          
    46                          ;---------------------------------------------------
    47                          ; Insert your custom declarations above this banner
    48                          ;---------------------------------------------------
    49                          ;@PSoC_UserCode_END@ (Do not change this line.)
    50                          
    51                          
    52                          AREA UserModules (ROM, REL)
    53                          
    54                          ;-----------------------------------------------------------------------------
    55                          ;  FUNCTION NAME: _Timer16_ISR
    56                          ;
    57                          ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
    58                          ;
    59                          ;-----------------------------------------------------------------------------
    60                          ;
    61                          
    62  0000'                   _Timer16_ISR:
    63                          
    64                             ;@PSoC_UserCode_BODY@ (Do not change this line.)
    65                             ;---------------------------------------------------
    66                             ; Insert your custom assembly code below this banner
    67                             ;---------------------------------------------------
    68                             ;   NOTE: interrupt service routines must preserve
    69                             ;   the values of the A and X CPU registers.
    70                             
    71                             ;---------------------------------------------------
    72                             ; Insert your custom assembly code above this banner
    73                             ;---------------------------------------------------
    74                             
    75                             ;---------------------------------------------------
    76                             ; Insert a lcall to a C function below this banner
    77                             ; and un-comment the lines between these banners
    78                             ;---------------------------------------------------
    79                             
    80                             ;PRESERVE_CPU_CONTEXT
    81                             ;lcall _My_C_Function
    82                             ;RESTORE_CPU_CONTEXT
    83                             
    84                             ;---------------------------------------------------
    85                             ; Insert a lcall to a C function above this banner
    86                             ; and un-comment the lines between these banners
    87                             ;---------------------------------------------------
    88                             ;@PSoC_UserCode_END@ (Do not change this line.)
    89                          
    90  0000' 7E                   reti
HI-TECH Software Macro Assembler (PSoC MCU) V9.61
Symbol Table                                                                                               Thu Jul 09 11:34:30 2015
                 _Timer16_ISR 0000                         HITECH 0002                      TOOLCHAIN 0002  
HI-TECH Software Macro Assembler (PSoC MCU) V9.61
                                                                                                           Thu Jul 09 11:34:30 2015
     1                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     2                          ;;;
     3                          ;;;  M8C.INC -- Microcontroller Device System Declarations
     4                          ;;;
     5                          ;;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
     6                          ;;;
     7                          ;;;  This file provides address constants, bit field masks and a set of macro
     8                          ;;;  facilities for the Cypress Semiconductor CY8C22045 Microcontroller devices.
     9                          ;;;
    10                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    11                          
    12                          ;;=============================================================================
    13                          ;; Definition of abbreviations used in the descriptions below
    14                          ;;  (RW)   The register or bit supports reads and writes
    15                          ;;  (W)    The register or bit is write-only
    16                          ;;  (R)    The register or bit is read-only
    17                          ;;  (#)    Access to the register is bit specific (see the family datasheet)
    18                          ;;  (RC)   The register or bit can be read, but writing a 0 will clear it,
    19                          ;;         writing a 1 will have no effect.
    20                          ;;=============================================================================
    21                          
    22                          ;;=============================================================================
    23                          ;;      System Registers
    24                          ;;=============================================================================
    25                          
    26                          ;----------------------------
    27                          ;  Flag Register Bit Fields
    28                          ;----------------------------
    29  00C0                    FLAG_PGMODE_MASK:  equ 0C0h     ; Paging control for > 256 bytes of RAM
    30  0000                    FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
    31  0040                    FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
    32  0080                    FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
    33  00C0                    FLAG_PGMODE_3:     equ 0C0h       ; Direct to CUR_PP page, indexed to STK_PP page
    34  0000                    FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
    35  0040                    FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
    36  0080                    FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
    37  00C0                    FLAG_PGMODE_11b:   equ 0C0h       ; Same as PGMODE_3
    38  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    39  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    40  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    41  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    42  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    43                          
    44                          
    45                          ;;=============================================================================
    46                          ;;      Register Space, Bank 0
    47                          ;;=============================================================================
    48                          
    49                          ;------------------------------------------------
    50                          ;  Port Registers
    51                          ;  Note: Also see this address range in Bank 1.
    52                          ;------------------------------------------------
    53                          ; Port 0
    54  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    55  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    56  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    57  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    58                          ; Port 1
    59  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    60  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    61  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    62  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    63                          ; Port 2
    64  0008                    PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
    65  0009                    PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
    66  000A                    PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
    67  000B                    PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
    68                          ; Port 3
    69  000C                    PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
    70  000D                    PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
    71  000E                    PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
    72  000F                    PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
    73                          ; Port 4
    74  0010                    PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
    75  0011                    PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
    76  0012                    PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
    77  0013                    PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
    78                          
    79                          ;------------------------------------------------
    80                          ;  Digital PSoC(tm) block Registers
    81                          ;  Note: Also see this address range in Bank 1.
    82                          ;------------------------------------------------
    83                          ; Digital PSoC block 00, Basic Type C
    84  0020                    DBC00DR0:     equ 20h          ; data register 0                          (#)
    85  0021                    DBC00DR1:     equ 21h          ; data register 1                          (W)
    86  0022                    DBC00DR2:     equ 22h          ; data register 2                          (RW)
    87  0023                    DBC00CR0:     equ 23h          ; control & status register 0              (#)
    88                          
    89                          ; Digital PSoC block 01, Basic Type C
    90  0024                    DBC01DR0:     equ 24h          ; data register 0                          (#)
    91  0025                    DBC01DR1:     equ 25h          ; data register 1                          (W)
    92  0026                    DBC01DR2:     equ 26h          ; data register 2                          (RW)
    93  0027                    DBC01CR0:     equ 27h          ; control & status register 0              (#)
    94                          
    95                          ; Digital PSoC block 02, Communications Type C
    96  0028                    DCC02DR0:     equ 28h          ; data register 0                          (#)
    97  0029                    DCC02DR1:     equ 29h          ; data register 1                          (W)
    98  002A                    DCC02DR2:     equ 2Ah          ; data register 2                          (RW)
    99  002B                    DCC02CR0:     equ 2Bh          ; control & status register 0              (#)
   100                          
   101                          ; Digital PSoC block 03, Communications Type C
   102  002C                    DCC03DR0:     equ 2Ch          ; data register 0                          (#)
   103  002D                    DCC03DR1:     equ 2Dh          ; data register 1                          (W)
   104  002E                    DCC03DR2:     equ 2Eh          ; data register 2                          (RW)
   105  002F                    DCC03CR0:     equ 2Fh          ; control & status register 0              (#)
   106                          
   107                          ; Digital PSoC block 10, Basic Type C
   108  0030                    DBC10DR0:     equ 30h          ; data register 0                          (#)
   109  0031                    DBC10DR1:     equ 31h          ; data register 1                          (W)
   110  0032                    DBC10DR2:     equ 32h          ; data register 2                          (RW)
   111  0033                    DBC10CR0:     equ 33h          ; control & status register 0              (#)
   112                          
   113                          ; Digital PSoC block 11, Basic Type C
   114  0034                    DBC11DR0:     equ 34h          ; data register 0                          (#)
   115  0035                    DBC11DR1:     equ 35h          ; data register 1                          (W)
   116  0036                    DBC11DR2:     equ 36h          ; data register 2                          (RW)
   117  0037                    DBC11CR0:     equ 37h          ; control & status register 0              (#)
   118                          
   119                          ; Digital PSoC block 12, Communications Type C
   120  0038                    DCC12DR0:     equ 38h          ; data register 0                          (#)
   121  0039                    DCC12DR1:     equ 39h          ; data register 1                          (W)
   122  003A                    DCC12DR2:     equ 3Ah          ; data register 2                          (RW)
   123  003B                    DCC12CR0:     equ 3Bh          ; control & status register 0              (#)
   124                          
   125                          ; Digital PSoC block 13, Communications Type C
   126  003C                    DCC13DR0:     equ 3Ch          ; data register 0                          (#)
   127  003D                    DCC13DR1:     equ 3Dh          ; data register 1                          (W)
   128  003E                    DCC13DR2:     equ 3Eh          ; data register 2                          (RW)
   129  003F                    DCC13CR0:     equ 3Fh          ; control & status register 0              (#)
   130                          
   131                          ;-------------------------------------
   132                          ;  Analog Control Registers
   133                          ;-------------------------------------
   134  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
   135  00C0                    AMX_IN_ACI3:          equ C0h    ; MASK: column 3 input mux
   136  0030                    AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
   137  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
   138  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
   139                          
   140  0061                    AMUX_CFG:      equ 61h          ; Analog MUX Configuration
   141  0030                    AMUX_CFG_INTCAP:       equ 30h    ;
   142  000E                    AMUX_CFG_MUXCLK:  	  equ 0Eh	 ;
   143  0001                    AMUX_CFG_EN:		  	  equ 01h	 ;
   144                          
   145                          ; old declarations DO NOT USE
   146  0061                    AMUXCFG:      equ 61h          ; Analog MUX Configuration
   147  0030                    AMUXCFG_INTCAP:       equ 30h    ;
   148  000E                    AMUXCFG_MUXCLK:  	  equ 0Eh	 ;
   149  0001                    AMUXCFG_EN:		  	  equ 01h	 ;
   150                          
   151  0062                    PWM_CR:       equ 62h          ; Pulse-Width Modulator Control
   152  0038                    PWM_CR_HIGH:          equ 38h    ; MASK: PWM high time
   153  0006                    PWM_CR_LOW:           equ 06h	 ; MASK: PWM low time
   154  0001                    PWM_CR_EN:            equ 01h	 ; MASK: Enable/Disable PWM function
   155                          
   156  0063                    ARF_CR:       equ 63h          ; Analog Reference Control
   157                          
   158  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus Register           (#)
   159  0080                    CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
   160  0040                    CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
   161  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
   162  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
   163  0008                    CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
   164  0004                    CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
   165  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
   166  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   167                          
   168  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   169  0020                    CMP_CR1_CLDIS1:       equ 20h    ; MASK: Column 1 comparator output latch
   170  0010                    CMP_CR1_CLDIS0:	      equ 10h    ; MASK: Column 0 comparator output latch
   171                          
   172  0068                    ADC0_CR:      equ 68h          ; Analog Column 0 Configuration
   173  0080                    ADC0_CR_CMPST:        equ 80h    ;
   174  0040                    ADC0_CR_LOREN:        equ 40h    ;
   175  0020                    ADC0_CR_SHEN:         equ 20h    ;
   176  0008                    ADC0_CR_CBSRC:        equ 08h    ;
   177  0004                    ADC0_CR_ADCM:         equ 04h    ;
   178  0001                    ADC0_CR_EN:	          equ 01h    ;
   179                          
   180  0069                    ADC1_CR:      equ 69h          ; Analog Column 1 Configuration
   181  0080                    ADC1_CR_CMPST:        equ 80h    ;
   182  0040                    ADC1_CR_LOREN:        equ 40h    ;
   183  0020                    ADC1_CR_SHEN:         equ 20h    ;
   184  0008                    ADC1_CR_CBSRC:        equ 08h    ;
   185  0004                    ADC1_CR_ADCM:         equ 04h    ;
   186  0001                    ADC1_CR_EN:	          equ 01h    ;
   187                          
   188                          ; Continuous Time PSoC block Type E Row 0 Col 0
   189  0072                    ACE00CR1:     equ 72h          ; Control register 1                       (RW)
   190  0073                    ACE00CR2:     equ 73h          ; Control register 2                       (RW)
   191                          
   192                          ; Continuous Time PSoC block Type E Row 0 Col 1
   193  0076                    ACE01CR1:     equ 76h          ; Control register 1                       (RW)
   194  0077                    ACE01CR2:     equ 77h          ; Control register 2                       (RW)
   195                          
   196                          ; Switched Cap PSoC blockType E Row 1 Col 0
   197  0080                    ASE10CR0:     equ 80h          ; Control register 0                       (RW)
   198                          
   199                          ; Switched Cap PSoC blockType E Row 1 Col 1
   200  0084                    ASE11CR0:     equ 84h          ; Control register 0                       (RW)
   201                          
   202                          ;-----------------------------------------------
   203                          ;  Global General Purpose Data Registers
   204                          ;-----------------------------------------------
   205  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   206  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   207  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   208  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   209                          
   210                          ;------------------------------------------------
   211                          ;  Row Digital Interconnects
   212                          ;
   213                          ;  Note: the following registers are mapped into
   214                          ;  both register bank 0 AND register bank 1.
   215                          ;------------------------------------------------
   216                          
   217  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   218  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   219  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   220  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   221  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   222  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   223  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   224                          
   225  00B8                    RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
   226  00B9                    RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
   227  00BA                    RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
   228  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   229  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   230  00BD                    RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
   231  00BE                    RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
   232                          
   233                          ;-----------------------------------------------
   234                          ;  Ram Page Pointers
   235                          ;-----------------------------------------------
   236  00D0                    CUR_PP:      equ 0D0h           ; Current   Page Pointer
   237  00D1                    STK_PP:      equ 0D1h           ; Stack     Page Pointer
   238  00D3                    IDX_PP:      equ 0D3h           ; Index     Page Pointer
   239  00D4                    MVR_PP:      equ 0D4h           ; MVI Read  Page Pointer
   240  00D5                    MVW_PP:      equ 0D5h           ; MVI Write Page Pointer
   241                          
   242                          ;------------------------------------------------
   243                          ;  I2C Configuration Registers
   244                          ;------------------------------------------------
   245  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   246  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   247  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   248  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   249  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   250  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   251  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   252  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   253  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   254  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   255                          
   256  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   257  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   258  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   259  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   260  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   261  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   262  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   263  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   264  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   265                          
   266  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   267                          
   268  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   269  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   270  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   271  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   272  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   273                          
   274                          ;------------------------------------------------
   275                          ;  System and Global Resource Registers
   276                          ;------------------------------------------------
   277  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   278                                                         ; Use INT_MSK0 bit field masks
   279  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   280                                                         ; Use INT_MSK1 bit field masks
   281  00DC                    INT_CLR2:     equ 0DCh          ; Interrupt Clear Register 2               (RW)
   282                                                         ; Use INT_MSK2 bit field masks
   283  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   284                                                         ; Use INT_MSK3 bit field masks
   285                          
   286  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   287  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   288  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   289                          
   290  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   291  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   292  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   293  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   294  0010                    INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
   295  0008                    INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
   296  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   297  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   298  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   299                          
   300  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   301  0080                    INT_MSK1_DCC13:            equ 80h ; MASK: enable/disable DCC13 block interrupt
   302  0040                    INT_MSK1_DCC12:            equ 40h ; MASK: enable/disable DCC12 block interrupt
   303  0020                    INT_MSK1_DBC11:            equ 20h ; MASK: enable/disable DBC11 block interrupt
   304  0010                    INT_MSK1_DBC10:            equ 10h ; MASK: enable/disable DBC10 block interrupt
   305  0008                    INT_MSK1_DCC03:            equ 08h ; MASK: enable/disable DCC03 block interrupt
   306  0004                    INT_MSK1_DCC02:            equ 04h ; MASK: enable/disable DCC02 block interrupt
   307  0002                    INT_MSK1_DBC01:            equ 02h ; MASK: enable/disable DBC01 block interrupt
   308  0001                    INT_MSK1_DBC00:            equ 01h ; MASK: enable/disable DBC00 block interrupt
   309                          
   310  00DF                    INT_MSK2:     equ DFh			; Custom block Mask Register			   (RW)
   311  0010                    INT_MSK2_SARADC:           equ 10h ; MASK: enable/disable SARADC block interrupt
   312  0020                    INT_MSK2_CSD0:             equ 20h ; MASK: enable/disable CSD0 block interrupt
   313  0040                    INT_MSK2_CSD1:             equ 40h ; MASK: enable/disable CSD1 block interrupt
   314  0080                    INT_MSK2_RTC:              equ 80h ; MASK: enable/disable RTC block interrupt
   315                          
   316  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   317  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   318                          
   319                          ;------------------------------------------------------
   320                          ;  MAC Registers
   321                          ;------------------------------------------------------
   322                          
   323  00E8                    MUL0_X:       equ 0E8h          ; Multiply Input X Register                (W)
   324  00E9                    MUL0_Y:       equ 0E9h          ; Multiply Input Y Register                (W)
   325  00EA                    MUL0_DH:      equ 0EAh          ; Multiply Result High Byte Register       (R)
   326  00EB                    MUL0_DL:      equ 0EBh          ; Multiply Result Low Byte Register        (R)
   327                          
   328  00EC                    ACC0_DR1:     equ 0ECh          ; Accumulator Data Register 1              (RW)
   329  00ED                    ACC0_DR0:     equ 0EDh          ; Accumulator Data Register 0              (RW)
   330  00EE                    ACC0_DR3:     equ 0EEh          ; Accumulator Data Register 3              (RW)
   331  00EF                    ACC0_DR2:     equ 0EFh          ; Accumulator Data Register 2              (RW)
   332                          
   333                          ; DECIMATOR Control Registers
   334  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   335  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   336                          
   337                          ;------------------------------------------------------
   338                          ;  System Status and Control Registers
   339                          ;
   340                          ;  Note: The following registers are mapped into both
   341                          ;        register bank 0 AND register bank 1.
   342                          ;------------------------------------------------------
   343  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   344                                                             ; Use FLAG_ masks defined at top of file
   345                          
   346  00FD                    DAC_D:        equ 0FDh		   ; DAC Data Register                        (RW)
   347                          
   348  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   349  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: flag, Internal Reset Status bit
   350  0010                    CPU_SCR1_SLIMO:         equ 10h	   ; MASK: Slow IMO (internal main osc) enable
   351  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   352  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   353  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   354                          
   355  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   356  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   357  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   358  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   359  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   360  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   361                          
   362                          ;------------------------------------------------------
   363                          ;  Neon Capsense Digital Control Registers
   364                          ;------------------------------------------------------
   365  0050                    CSD0_DR0_L:				equ 50h		; Capsense 0 data low 0				(RW)
   366  0054                    CSD0_DR0_H:				equ 54h		; Capsense 0 data high 0			(RW)
   367  0058                    CSD1_DR0_L:				equ 58h		; Capsense 1 data low 0				(RW)
   368  005C                    CSD1_DR0_H:				equ 5Ch		; Capsense 1 data high 0			(RW)
   369  0051                    CSD0_DR1_L:				equ 51h		; Capsense 0 data low 1				(RW)
   370  0055                    CSD0_DR1_H:				equ 55h		; Capsense 0 data high 1			(RW)
   371  0059                    CSD1_DR1_L:				equ 59h		; Capsense 1 data low 1				(RW)
   372  005D                    CSD1_DR1_H:				equ 5Dh		; Capsense 1 data high 1			(RW)
   373  0052                    CSD0_CNT_L:				equ 52h		; Capsense 0 counter low			(RW)
   374  0056                    CSD0_CNT_H:				equ 56h		; Capsense 0 counter high			(RW)
   375  005A                    CSD1_CNT_L:				equ 5Ah		; Capsense 1 counter low			(RW)
   376  005E                    CSD1_CNT_H:				equ	5Eh		; Capsense 1 counter high			(RW)
   377  0053                    CSD0_CR0:				equ 53h		; Capsense 0 control 0				(RW)
   378  005B                    CSD1_CR0:				equ 5Bh		; Capsense 1 control 0				(RW)
   379  0057                    CSD0_CR1:				equ 57h		; Capsense 0 control 1				(RW)
   380  005F                    CSD1_CR1:				equ 5Fh		; Capsense 1 control 1				(RW)
   381                          
   382                          ;------------------------------------------------------
   383                          ;  Neon Analog Registers
   384                          ;------------------------------------------------------
   385  0065                    ASY_CR:					equ 65h		; Analog Synchronization Control	(RW)
   386  006A                    ADC_DH:					equ 6Ah		; ADC data high						(RW)
   387  006B                    ADC_DL:					equ 6Bh		; ADC data low						(RW)
   388  00C8                    PWMVREF0:				equ C8h		; PWM Voltage Reference 0			(RW)
   389  00C9                    PWMVREF1:				equ C9h		; PWM Voltage Reference 1			(RW)
   390  00CB                    PWMSRC:					equ CBh		; PWM Source						(RW)
   391  00CA                    IDACMODE:				equ CAh		; IDAC Mode							(RW)
   392  00FC                    IDACR_D:				equ FCh		; Analog Mux DAC data 0				(RW)
   393  00FD                    IDACL_D:				equ FDh		; Analog Mux DAC data 1				(RW)
   394                          
   395                          ;------------------------------------------------------
   396                          ;  Neon Digital Registers
   397                          ;------------------------------------------------------
   398  00B7                    RDI0DSM:				equ B7h		; Row Digital Interconnect input select 0	(RW)
   399  00BF                    RDI1DSM:				equ BFh		; Row Digital Interconnect input select 1	(RW)
   400                          
   401                          ;------------------------------------------------------
   402                          ;  Neon Test Registers
   403                          ;------------------------------------------------------
   404  00CC                    TSCR0:					equ CCh		; Tsource 0							(RW)
   405  00CD                    TSCMPH:					equ CDh		; TSCMP high						(RW)
   406  00CE                    TSCMPL:					equ CEh		; TSCMP low							(RW)
   407  00CF                    TSCR1:					equ CFh		; Tsource 1							(RW)
   408                          
   409                          ;;=============================================================================
   410                          ;;      Register Space, Bank 1
   411                          ;;=============================================================================
   412                          
   413                          ;------------------------------------------------
   414                          ;  Port Registers
   415                          ;  Note: Also see this address range in Bank 0.
   416                          ;------------------------------------------------
   417                          ; Port 0
   418  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   419  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   420  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   421  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   422                          
   423                          ; Port 1
   424  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   425  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   426  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   427  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   428                          
   429                          ; Port 2
   430  0008                    PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
   431  0009                    PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
   432  000A                    PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
   433  000B                    PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
   434                          
   435                          ; Port 3
   436  000C                    PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
   437  000D                    PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
   438  000E                    PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
   439  000F                    PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
   440                          
   441                          ; Port 4
   442  0010                    PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
   443  0011                    PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
   444  0012                    PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
   445  0013                    PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
   446                          
   447                          ;------------------------------------------------
   448                          ;  Digital PSoC(tm) block Registers
   449                          ;  Note: Also see this address range in Bank 0.
   450                          ;------------------------------------------------
   451                          
   452                          ; Digital PSoC block 00, Basic Type C
   453  0020                    DBC00FN:      equ 20h          ; Function Register                        (RW)
   454  0021                    DBC00IN:      equ 21h          ;    Input Register                        (RW)
   455  0022                    DBC00OU:      equ 22h          ;   Output Register                        (RW)
   456  0023                    DBC00CR1:     equ 23h          ;   control & status register 1            (RW)
   457                          
   458                          ; Digital PSoC block 01, Basic Type C
   459  0024                    DBC01FN:      equ 24h          ; Function Register                        (RW)
   460  0025                    DBC01IN:      equ 25h          ;    Input Register                        (RW)
   461  0026                    DBC01OU:      equ 26h          ;   Output Register                        (RW)
   462  0027                    DBC01CR1:     equ 27h          ;   control & status register 1            (RW)
   463                          
   464                          ; Digital PSoC block 02, Communications Type C
   465  0028                    DCC02FN:      equ 28h          ; Function Register                        (RW)
   466  0029                    DCC02IN:      equ 29h          ;    Input Register                        (RW)
   467  002A                    DCC02OU:      equ 2Ah          ;   Output Register                        (RW)
   468  002B                    DBC02CR1:     equ 2Bh          ;   control & status register 1            (RW)
   469                          
   470                          ; Digital PSoC block 03, Communications Type C
   471  002C                    DCC03FN:      equ 2Ch          ; Function Register                        (RW)
   472  002D                    DCC03IN:      equ 2Dh          ;    Input Register                        (RW)
   473  002E                    DCC03OU:      equ 2Eh          ;   Output Register                        (RW)
   474  0029                    DBC03CR1:     equ 29h          ;   control & status register 1            (RW)
   475                          
   476                          ; Digital PSoC block 10, Basic Type C
   477  0030                    DBC10FN:      equ 30h          ; Function Register                        (RW)
   478  0031                    DBC10IN:      equ 31h          ;    Input Register                        (RW)
   479  0032                    DBC10OU:      equ 32h          ;   Output Register                        (RW)
   480  0033                    DBC10CR1:     equ 33h          ;   control & status register 1            (RW)
   481                          
   482                          ; Digital PSoC block 11, Basic Type C
   483  0034                    DBC11FN:      equ 34h          ; Function Register                        (RW)
   484  0035                    DBC11IN:      equ 35h          ;    Input Register                        (RW)
   485  0036                    DBC11OU:      equ 36h          ;   Output Register                        (RW)
   486  0037                    DBC11CR1:     equ 37h          ;   control & status register 1            (RW)
   487                          
   488                          ; Digital PSoC block 12, Communications Type C
   489  0038                    DCC12FN:      equ 38h          ; Function Register                        (RW)
   490  0039                    DCC12IN:      equ 39h          ;    Input Register                        (RW)
   491  003A                    DCC12OU:      equ 3Ah          ;   Output Register                        (RW)
   492  003B                    DBC12CR1:     equ 3Bh          ;   control & status register 1            (RW)
   493                          
   494                          ; Digital PSoC block 13, Communications Type C
   495  003C                    DCC13FN:      equ 3Ch          ; Function Register                        (RW)
   496  003D                    DCC13IN:      equ 3Dh          ;    Input Register                        (RW)
   497  003E                    DCC13OU:      equ 3Eh          ;   Output Register                        (RW)
   498  003F                    DBC13CR1:     equ 3Fh          ;   control & status register 1            (RW)
   499                          
   500                          ;------------------------------------------------
   501                          ;  System and Global Resource Registers
   502                          ;  Note: Also see this address range in Bank 0.
   503                          ;------------------------------------------------
   504                          
   505  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   506  00C0                    CLK_CR0_ACOLUMN_3:    equ C0h    ; MASK: Specify clock for analog cloumn
   507  0030                    CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
   508  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   509  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   510                          
   511  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   512  0018                    CLK_CR1_ACLK1:        equ 18h    ; MASK: Digital PSoC block for analog source
   513  0003                    CLK_CR1_ACLK0:        equ 03h    ; MASK: Digital PSoC block for analog source
   514                          
   515  0003                    CLK_CR1_ACLK2:        equ 03h    ; Deprecated do not use
   516                          
   517  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   518  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   519                          
   520  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   521  000F                    AMD_CR0_AMOD0:        equ 0Fh    ; MASK: Modulation source for analog column 0
   522                          
   523  0064                    CMP_GO_EN:    equ 64h          ; Comparator Bus To Global Out Enable      (RW)
   524  0080                    CMP_GO_EN_GOO5:       equ 80h    ; MASK: Selected Col 1 signal to GOO5
   525  0040                    CMP_GO_EN_GOO1:       equ 40h    ; MASK: Selected Col 1 signal to GOO1
   526  0030                    CMP_GO_EN_SEL1:       equ 30h    ; MASK: Column 1 Signal Select
   527  0008                    CMP_GO_EN_GOO4:       equ 08h    ; MASK: Selected Col 0 signal to GOO4
   528  0004                    CMP_GO_EN_GOO0:       equ 04h    ; MASK: Selected Col 0 signal to GOO0
   529  0003                    CMP_GO_EN_SEL0:       equ 03h    ; MASK: Column 0 Signal Select
   530                          
   531  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   532  000F                    AMD_CR1_AMOD1:        equ 0Fh    ; MASK: Modulation ctrl for analog column 1
   533                          
   534  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   535  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   536  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   537                          
   538  006B                    CLK_CR3:      equ 6Bh          ; Analog Clock Source Control Register 3   (RW)
   539  0040                    CLK_CR3_SYS1:         equ 40h    ; MASK: Analog Clock 1 selection
   540  0030                    CLK_CR3_DIVCLK1:      equ 30h    ; MASK: Analog Clock 1 divider
   541  0004                    CLK_CR3_SYS0:         equ 04h    ; MASK: Analog Clock 0 selection
   542  0003                    CLK_CR3_DIVCLK0:      equ 03h    ; MASK: Analog Clock 0 divider
   543                          
   544                          ;------------------------------------------------
   545                          ;  Global Digital Interconnects
   546                          ;------------------------------------------------
   547                          
   548  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   549  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   550  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   551  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   552                          
   553  00A0                    GDI_O_IN_CR:  equ 0A0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   554  00A1                    GDI_E_IN_CR:  equ 0A1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   555  00A2                    GDI_O_OU_CR:  equ 0A2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   556  00A3                    GDI_E_OU_CR:  equ 0A3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   557                          
   558  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   559  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   560                          
   561                          ;------------------------------------------------
   562                          ;  Analog Mux Bus Port Enable Bits
   563                          ;------------------------------------------------
   564  00D8                    MUX_CR0:      equ 0D8h          ; Analog Mux Port 0 Bit Enables Register
   565  00D9                    MUX_CR1:      equ 0D9h          ; Analog Mux Port 1 Bit Enables Register
   566  00DA                    MUX_CR2:      equ 0DAh          ; Analog Mux Port 2 Bit Enables Register
   567  00DB                    MUX_CR3:      equ 0DBh          ; Analog Mux Port 3 Bit Enables Register
   568  00EC                    MUX_CR4:      equ 0ECh          ; Analog Mux Port 4 Bit Enables Register
   569                          
   570                          ;------------------------------------------------
   571                          ;  Clock and System Control Registers
   572                          ;------------------------------------------------
   573                          
   574  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   575  0080                    OSC_GO_EN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   576  0040                    OSC_GO_EN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   577  0020                    OSC_GO_EN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   578  0010                    OSC_GO_EN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   579  0008                    OSC_GO_EN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   580  0004                    OSC_GO_EN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   581  0002                    OSC_GO_EN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   582  0001                    OSC_GO_EN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   583                          
   584  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   585  0003                    OSC_CR4_VC3SEL:       equ 03h    ; MASK: System VC3 Clock source
   586                          
   587  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   588                          
   589  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   590  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   591  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   592  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   593  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   594  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   595  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   596  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   597  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   598  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   599  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   600  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   601  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   602  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   603  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   604  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   605  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   606  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   607                          
   608  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   609  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   610  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   611                          
   612  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   613  0080                    OSC_CR2_PLLGAIN:      equ 80h    ; MASK: High/Low gain
   614  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   615  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   616  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   617                          
   618  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   619  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   620  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   621  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   622  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   623  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   624  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   625  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   626                          
   627  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   628  0008                    VLT_CMP_NOWRITE:      equ 08h    ; MASK: Vcc below Flash Write level
   629  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   630  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   631  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   632                          
   633  00E5                    ADC0_TR:      equ 0E5h          ; ADC Column 0 Trim Register
   634  00E6                    ADC1_TR:      equ 0E6h          ; ADC Column 1 Trim Register
   635                          
   636  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   637  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   638  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   639  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   640                          
   641  00FA                    FLS_PR1:      equ 0FAh          ; Flash Program Register 1                 (RW)
   642  0003                    FLS_PR1_BANK:         equ 03h    ; MASK: Select Active Flash Bank
   643                          
   644  00FD                    DAC_CR0:       equ 0FDh          ; Analog Mux DAC Control Register 0
   645  00DC                    DAC_CR1:       equ 0DCh          ; Analog Mux DAC Control Register 1
   646  0008                    DAC_CR_IRANGE:        equ 08h    ; MASK: Sets the DAC Range low or high
   647  0006                    DAC_CR_OSCMODE:       equ 06h    ; MASK: Defines the reset mode for AMux
   648  0001                    DAC_CR_ENABLE:        equ 01h    ; MASK: Enable/Disable DAC function
   649                          
   650                          ;------------------------------------------------
   651                          ;  I2C Control Registers
   652                          ;------------------------------------------------
   653                          
   654  00AD                    I2C_ADDR:    equ 0ADh          ; I2C Address Register (RW)
   655                          
   656                          ;------------------------------------------------------
   657                          ;  Neon Analog Registers
   658                          ;------------------------------------------------------
   659  0053                    VDAC50CR0:		equ 53h			; V DAC5 control 0				(RW)
   660  0057                    VDAC51CR0:		equ 57h			; V DAC5 control 1				(RW)
   661  00A8                    ADC_CR0:		equ A8h			; ADC control 0					(RW)
   662  00A9                    ADC_CR1:		equ A9h			; ADC control 1					(RW)
   663  00AA                    ADC_CR2:		equ AAh			; ADC control 2					(RW)
   664  00AB                    ADC_CR3TRIM:	equ ABh			; ADC control 3					(RW)
   665  00AC                    ADC_CR4:		equ ACh			; ADC control 4					(RW)
   666  00E7                    VDAC_TRIM:		equ E7h			; V DAC trim					(RW)
   667                          
   668                          ;------------------------------------------------------
   669                          ;  Neon Current Sense CMP Registers
   670                          ;------------------------------------------------------
   671  0050                    CMP0CR1:		equ 50h			; CMP0 control 1				(RW)
   672  0051                    CMP0CR2:		equ 51h			; CMP0 control 2				(RW)
   673  0054                    CMP1CR1:		equ 54h			; CMP1 control 1				(RW)
   674  0055                    CMP1CR2:		equ 55h			; CMP1 control 2				(RW)
   675  0058                    CSCMPCR0:		equ 58h			; CSCMP control 0				(RW)
   676  0059                    CSCMPGOEN:		equ 59h			; CSCMO global out enable		(RW)
   677  005A                    CSLUTCR0:		equ 5Ah			; CSLUT control 0				(RW)
   678  005B                    CMPCOLMUX:		equ 5Bh			; CMP Column Mux				(RW)
   679  005C                    CMPPWMCR:		equ 5Ch			; CMP PWM control				(RW)
   680  005D                    CMPFLTCR:		equ 5Dh			; CMP filter control			(RW)
   681  005E                    CMPCLK1:		equ 5Eh			; CMP clock 1					(RW)
   682  005F                    CMPCLK0:		equ 5Fh			; CMP clock 0					(RW)
   683                          
   684                          ;------------------------------------------------------
   685                          ;  Neon Real Time Clock Registers
   686                          ;------------------------------------------------------
   687  00A4                    RTCH:			equ A4h			; Real time current hour		(RW)
   688  00A5                    RTCM:			equ A5h			; Real time current minute		(RW)
   689  00A6                    RTCS:			equ A6h			; Real time current second		(RW)
   690  00A7                    RTCCR:			equ A7h			; Real time clock control		(RW)
   691                          
   692                          ;------------------------------------------------------
   693                          ;  Analog MUX Config Registers
   694                          ;------------------------------------------------------
   695                          
   696  006A                    AMUX_CFG1:			equ 6Ah  ; Analog MUX Configuration 1
   697  0020                    AMUX_CFG1_GOINVR:	equ 20h  ;
   698  0010                    AMUX_CFG1_GOINVL:  	equ 10h	 ;
   699  000C                    AMUX_CFG1_AMUXMODR:	equ 0Ch	 ;
   700  0003                    AMUX_CFG1_AMUXMODL:	equ 03h	 ;
   701                          
   702                          ;;=============================================================================
   703                          ;;      M8C System Macros
   704                          ;;  These macros should be used when their functions are needed.
   705                          ;;=============================================================================
   706                          
   707                          ;----------------------------------------------------
   708                          ;  Swapping Register Banks
   709                          ;----------------------------------------------------
   710                              macro M8C_SetBank0
   711                              and   F, ~FLAG_XIO_MASK
   712  3D73                        endm
   713                          
   714                              macro M8C_SetBank1
   715                              or    F, FLAG_XIO_MASK
   716  3D73                        endm
   717                          
   718                          ;----------------------------------------------------
   719                          ;  Global Interrupt Enable/Disable
   720                          ;----------------------------------------------------
   721                              macro M8C_EnableGInt
   722                              or    F, FLAG_GLOBAL_IE
   723  3D73                        endm
   724                          
   725                              macro M8C_DisableGInt
   726                              and   F, ~FLAG_GLOBAL_IE
   727  3D73                        endm
   728                          
   729                          ;----------------------------------------------------
   730                          ;  Enable/Disable Interrupt Mask
   731                          ;
   732                          ;  Use the following macros to enable/disable
   733                          ;  bits in the Interrupt mask registers,
   734                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   735                          ;
   736                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   737                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   738                          ;
   739                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   740                          ;        and MASK is the bit set to enable or disable
   741                          ;----------------------------------------------------
   742                          ; Disable Interrupt Bit Mask(s)
   743                              macro M8C_DisableIntMask
   744                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   745  3D73                        endm
   746                          
   747                          ; Enable Interrupt Bit Mask(s)
   748                              macro M8C_EnableIntMask
   749                              or    reg[@0], @1               ; enable specified interrupt enable bit
   750  3D73                        endm
   751                          
   752                          ;----------------------------------------------------
   753                          ;  Clear Posted Interrupt Flag Mask
   754                          ;
   755                          ;  Use the following macros to clear the
   756                          ;  bits in the Interrupt Clear registers,
   757                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   758                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   759                          ;
   760                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   761                          ;        and MASK is the bit set to enable or disable
   762                          ;----------------------------------------------------
   763                              macro M8C_ClearIntFlag
   764                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   765  3D73                        endm
   766                          
   767                          ;----------------------------------------------------
   768                          ;  Power-On Reset & WatchDog Timer Functions
   769                          ;----------------------------------------------------
   770                              macro M8C_EnableWatchDog
   771                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   772  3D73                        endm
   773                          
   774                              macro M8C_ClearWDT
   775                              mov   reg[RES_WDT], 00h
   776  3D73                        endm
   777                          
   778                              macro M8C_ClearWDTAndSleep
   779                              mov   reg[RES_WDT], 38h
   780  3D73                        endm
   781                          
   782                          ;----------------------------------------------------
   783                          ;  Sleep, CPU Stop & Software Reset
   784                          ;----------------------------------------------------
   785                              macro M8C_Sleep
   786                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   787                              ; The next instruction to be executed depends on the state of the
   788                              ; various interrupt enable bits. If some interrupts are enabled
   789                              ; and the global interrupts are disabled, the next instruction will
   790                              ; be the one that follows the invocation of this macro. If global
   791                              ; interrupts are also enabled then the next instruction will be
   792                              ; from the interrupt vector table. If no interrupts are enabled
   793                              ; then the CPU sleeps forever.
   794  3D73                        endm
   795                          
   796                              macro M8C_Stop
   797                              ; In general, you probably don't want to do this, but here's how:
   798                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   799                              ; Next instruction to be executed is located in the interrupt
   800                              ; vector table entry for Power-On Reset.
   801  3D73                        endm
   802                          
   803                              macro M8C_Reset
   804                              ; Restore CPU to the power-on reset state.
   805                              mov A, 0
   806                              SSC
   807                              ; Next non-supervisor instruction will be at interrupt vector 0.
   808  3D73                        endm
   809                          
   810                          ;----------------------------------------------------
   811                          ; ImageCraft Code Compressor Actions
   812                          ;----------------------------------------------------
   813                              ; Suspend Code Compressor
   814                              ; Must not span a RET or RETI instruction
   815                              ; without resuming code compression
   816                              macro Suspend_CodeCompressor
   817                              or   F, 0
   818  3D73                        endm
   819                          
   820                              ; Resume Code Compression
   821                              macro Resume_CodeCompressor
   822                              add  SP, 0
   823                              endm
      + 3D73                    
      + 3D73                    ; end of file m8c.inc
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;
     4                          ;;       FILENAME: Memory.inc
     5                          ;;
     6                          ;;    DESCRIPTION: Memory Model and Stack Parameter Definitions for 
     7                          ;;                 CY8C22045 PSoC devices.
     8                          ;;
     9                          ;;  LAST MODIFIED: August 17, 2004
    10                          ;;
    11                          ;;-----------------------------------------------------------------------------
    12                          ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
    13                          ;;*****************************************************************************
    14                          ;;*****************************************************************************
    15                          ;
    16                          ;
    17                          ;  ******** Define Memory Model and Stack parameters ********
    18                          ;
    19  0001                    IMAGECRAFT: equ 1   
    20  0002                    HITECH: equ 2   
    21  0002                    TOOLCHAIN: equ HITECH   
    22  0001                    SYSTEM_LARGE_MEMORY_MODEL: equ 1   
    23  0000                    SYSTEM_SMALL_MEMORY_MODEL: equ 0   
    24  0003                    SYSTEM_STACK_PAGE: equ 3   
    25  0000                    SYSTEM_STACK_PAGE_OFFSET: equ 0   
    26  0002                    SYSTEM_TOOLS: equ 2   
    27  0000                    SYSTEM_IDXPG_TRACKS_STK_PP: equ 0   
    28  0001                    SYSTEM_IDXPG_TRACKS_IDX_PP: equ 1   
    29  0000                    SYSTEM_MULTIPAGE_STACK: equ 0 
    30                          
    31                          
    32                          ;  ******* Function Class Definitions *******
    33                          ;
    34                          ;  These definitions are used to describe RAM access patterns. They provide
    35                          ;  documentation and they control prologue and epilogue macros that perform
    36                          ;  the necessary housekeeping functions for large memory model devices like
    37                          ;  the CY8C22045.
    38                          
    39  0001                    RAM_USE_CLASS_1:               equ 1   ; PUSH, POP & I/O access
    40  0002                    RAM_USE_CLASS_2:               equ 2   ; Indexed address mode on stack page
    41  0004                    RAM_USE_CLASS_3:               equ 4   ; Indexed address mode to any page
    42  0008                    RAM_USE_CLASS_4:               equ 8   ; Direct/Indirect address mode access
    43                          
    44                          ; ******* Hi Tech Specific *******
    45                          ; Turn on the expansion of all macros by default
    46                          IF (TOOLCHAIN & HITECH)
    47                          OPT EXPAND
    48                          ENDIF
    49                          ; ******* Page Pointer Manipulation Macros *******
    50                          ;
    51                          ;  ******* Page Pointer Manipulation Macros *******
    52                          ;
    53                          ;  Most of the following macros are conditionally compiled so they only
    54                          ;  produce code if the large memory model is selected.
    55                          
    56                             ;-----------------------------------------------
    57                             ;  Set Stack Page Macro
    58                             ;-----------------------------------------------
    59                             ;
    60                             ;  DESC: Modify STK_PP in the large or small memory Models.
    61                             ;
    62                             ; INPUT: Constant (e.g., SYSTEM_STACK_PAGE) that specifies the RAM page on
    63                             ;        which stack operations like PUSH and POP store and retrieve their
    64                             ;        data
    65                             ;
    66                             ;  COST: 8 instruction cycles (in LMM only)
    67                          
    68                             macro RAM_SETPAGE_STK( PG_NUMBER )
    69                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    70                                mov reg[STK_PP], @PG_NUMBER
    71                             ENDIF
    72  3D73                       endm
    73                          
    74                             ;-----------------------------------------------
    75                             ;  Set Current Page Macro
    76                             ;-----------------------------------------------
    77                             ;
    78                             ;  DESC: Modify CUR_PP in the large or small memory Models.
    79                             ;
    80                             ; INPUT: Constant value (e.g., >bFoo) for the RAM page number used in
    81                             ;        calculation of effective direct-mode address operands.
    82                             ;
    83                             ;  COST: 8 instruction cycles (in LMM only)
    84                          
    85                             macro RAM_SETPAGE_CUR( PG_NUMBER )
    86                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    87                                mov reg[CUR_PP], @PG_NUMBER
    88                             ENDIF
    89  3D73                       endm
    90                          
    91                             ;-----------------------------------------------
    92                             ;  Set Index Page Macro
    93                             ;-----------------------------------------------
    94                             ;
    95                             ;  DESC: Modify IDX_PP in the large or small emory Models.
    96                             ;
    97                             ; INPUT: Constant value (e.g., >caFoo) for the RAM page number used in
    98                             ;         calculation of effective index-mode address operands.
    99                             ;
   100                             ;  COST: 8 instruction cycles (in LMM only)
   101                          
   102                             macro RAM_SETPAGE_IDX( PG_NUMBER )
   103                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   104                                mov reg[IDX_PP], @PG_NUMBER
   105                             ENDIF
   106  3D73                       endm
   107                          
   108                             ;-----------------------------------------------
   109                             ;  Set MVI Read Page Macro
   110                             ;-----------------------------------------------
   111                             ;
   112                             ;  DESC: Modify MVR_PP in the large or small memory Models.
   113                             ;
   114                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   115                             ;        calculation of indirect address operands used in the
   116                             ;        "mvi A, [pFoo]" instructions.
   117                             ;
   118                             ;  COST: 8 instruction cycles (in LMM only)
   119                          
   120                             macro RAM_SETPAGE_MVR( PG_NUMBER )
   121                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   122                                mov reg[MVR_PP], @PG_NUMBER
   123                             ENDIF
   124  3D73                       endm
   125                          
   126                             ;-----------------------------------------------
   127                             ;  Set MVI Write Page Macro
   128                             ;-----------------------------------------------
   129                             ;
   130                             ;  DESC: Modify MVW_PP in the large or small memory Models.
   131                             ;
   132                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   133                             ;        calculation of indirect address operands used in the
   134                             ;        "mvi [pFoo], A" instructions.
   135                             ;
   136                             ;  COST: 8 instruction cycles (in LMM only)
   137                          
   138                             macro RAM_SETPAGE_MVW( PG_NUMBER )
   139                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   140                                mov reg[MVW_PP], @PG_NUMBER
   141                             ENDIF
   142  3D73                       endm
   143                          
   144                             ;-----------------------------------------------
   145                             ;  Force Index Page Pointer to Stack Page
   146                             ;-----------------------------------------------
   147                             ;
   148                             ;  DESC: Map index-mode operands onto the stack page by modifying IDX_PP.
   149                             ;        See also RAM_LOCK_INDEX_TO_STACKPAGE.
   150                             ;
   151                             ; INPUT: None
   152                             ;
   153                             ;  COST: 8 instruction cycles (in LMM only)
   154                          
   155                             macro RAM_SETPAGE_IDX2STK
   156                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   157                                IF ( SYSTEM_MULTIPAGE_STACK )
   158                                   mov   A, reg[STK_PP]
   159                                   mov   reg[IDX_PP], A
   160                                ELSE
   161                                   RAM_SETPAGE_IDX SYSTEM_STACK_PAGE
   162                                ENDIF
   163                             ENDIF
   164  3D73                       endm
   165                          
   166                             ;-----------------------------------------------
   167                             ;  Change Memory Mode
   168                             ;-----------------------------------------------
   169                             ;
   170                             ;  DESC: Modify FLAG_PAGEMODE bits in the large and small memory Models.
   171                             ;
   172                             ; INPUT: Constant value for PGMODE bitfield of CPU Flag register, F.
   173                             ;        See FLAG_PGMODE_{x} constants in M8C.INC.
   174                             ;
   175                             ;  COST: 8 instruction cycles (in LMM only)
   176                          
   177                             macro RAM_CHANGE_PAGE_MODE( MODE )
   178                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   179                                and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
   180                                or    F,  FLAG_PGMODE_MASK & @MODE
   181                             ENDIF
   182  3D73                       endm
   183                          
   184                             ;-----------------------------------------------
   185                             ;  Set Large Memory Model Native Paging Mode
   186                             ;-----------------------------------------------
   187                             ;
   188                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   189                             ;        paging mode *IFF* a simple "OR" is guaranteed to work---for
   190                             ;        example, in an ISR, when the PGMODE bits have been cleared
   191                             ;        to zero. If a simple "OR" is not guaranteed to work, use
   192                             ;        the slower RAM_RESTORE_NATIVE_PAGING instead.
   193                             ;
   194                             ; INPUT: none
   195                             ;
   196                             ;  COST: 4 instruction cycles (in LMM only)
   197                          
   198                             macro RAM_SET_NATIVE_PAGING
   199                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   200                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   201                                or    F,  FLAG_PGMODE_11b            ; LMM w/ IndexPage<==>StackPage
   202                             ENDIF ;  PGMODE LOCKED
   203                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   204                                or    F,  FLAG_PGMODE_10b            ; LMM with independent IndexPage
   205                             ENDIF ; PGMODE FREE
   206                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   207  3D73                       endm
   208                          
   209                             ;-----------------------------------------------
   210                             ; Restore Large Memory Model Native Paging Mode
   211                             ;-----------------------------------------------
   212                             ;
   213                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   214                             ;        paging mode. Always works because it clears the PGMODE bits
   215                             ;        before OR-ing in the new ones. See RAM_RESTORE_NATIVE_PAGING
   216                             ;        for a faster method.
   217                             ;
   218                             ; INPUT: none
   219                             ;
   220                             ;  COST: 8 instruction cycles (in LMM only)
   221                          
   222                             macro RAM_RESTORE_NATIVE_PAGING
   223                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   224                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   225                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_11b ; LMM w/ IndexPage<==>StackPage
   226                             ENDIF ;  PGMODE LOCKED
   227                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   228                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b ; LMM with independent IndexPage
   229                             ENDIF ; PGMODE FREE
   230                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   231  3D73                       endm
   232                          
   233                             ;-----------------------------------------------
   234                             ; Force indexed addr mode operands to Stack Pg
   235                             ;-----------------------------------------------
   236                             ;
   237                             ;  DESC: Force instructions that use indexed address mode to reference the
   238                             ;        stack page (as defined by STK_PP). This macro sets the "Indexed
   239                             ;        Stack Mode" bit (LSB) of the PGMODE bit field in the CPU Flag
   240                             ;        register, F. (See also RAM_SETPAGE_IDX2STK, above.)
   241                             ;
   242                             ; INPUT: none
   243                             ;
   244                             ;  COST: 4 instruction cycles (in LMM only)
   245                          
   246                             macro RAM_X_POINTS_TO_STACKPAGE
   247                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   248                                or   F, FLAG_PGMODE_01b
   249                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   250  3D73                       endm
   251                          
   252                             ;-----------------------------------------------
   253                             ;  Force indexed addr mode operands to Index Pg
   254                             ;-----------------------------------------------
   255                             ;
   256                             ;  DESC: Permit instructions that use indexed address mode to reference page
   257                             ;        zero or the page pointed to by the IDX_PP register, depending on the
   258                             ;        setting of the MSb (or "Direct Page Mode" bit) of the PGMODE bits
   259                             ;        in the CPU Flag register, F. (This macro clears the PGMODE LSb.)
   260                             ;
   261                             ; INPUT: none
   262                             ;
   263                             ;  COST: 4 instruction cycles (in LMM only)
   264                          
   265                             macro RAM_X_POINTS_TO_INDEXPAGE
   266                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   267                                and  F, ~FLAG_PGMODE_01b
   268                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   269  3D73                       endm
   270                          
   271                             ;-----------------------------------------------
   272                             ;  Function Prologue
   273                             ;-----------------------------------------------
   274                             ;
   275                             ;  Prologue for functions that run in the LMM and SMM.
   276                             ;
   277                          
   278                             macro RAM_PROLOGUE( ACTUAL_CLASS )
   279                          
   280                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   281                             ; Nothing to do
   282                             ENDIF ; RAM_USE_CLASS_1
   283                          
   284                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   285                                IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   286                                   RAM_X_POINTS_TO_STACKPAGE         ; exit native paging mode!
   287                                ENDIF
   288                             ENDIF ; RAM_USE_CLASS_2
   289                          
   290                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   291                                IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   292                                   RAM_X_POINTS_TO_INDEXPAGE         ; exit native paging mode!
   293                                ENDIF
   294                             ENDIF ; RAM_USE_CLASS_3
   295                          
   296                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   297                             ; Nothing to do
   298                             ENDIF ; RAM_USE_CLASS_4
   299                          
   300  3D73                       endm
   301                          
   302                             ;-----------------------------------------------
   303                             ;  Function Epilogue
   304                             ;-----------------------------------------------
   305                             ;
   306                             ;  Prologue for functions that run in the LMM and SMM.
   307                             ;
   308                          
   309                             macro RAM_EPILOGUE( ACTUAL_CLASS )
   310                          
   311                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   312                             ; Nothing to do
   313                             ENDIF ; RAM_USE_CLASS_1
   314                          
   315                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   316                                RAM_RESTORE_NATIVE_PAGING
   317                             ENDIF ; RAM_USE_CLASS_2
   318                          
   319                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   320                                RAM_RESTORE_NATIVE_PAGING
   321                             ENDIF ; RAM_USE_CLASS_3
   322                          
   323                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   324                             ; Nothing to do
   325                             ENDIF ; RAM_USE_CLASS_4
   326                          
   327  3D73                       endm
   328                          
   329                             ;-----------------------------------------------
   330                             ;  Preserve Register
   331                             ;-----------------------------------------------
   332                             ;
   333                             ;  DESC: Preserve a register value on the stack
   334                             ;
   335                             ; INPUT: Name or address of register in I/O Space
   336                             ;        The I/O bank is an implicit parameter. That is, this function will
   337                             ;        Access the I/O bank currently specified by the CPU Flag register.
   338                             ;
   339                             ;  USES: CPU 'A' register
   340                             ;
   341                             ;  COST: 9 instruction cycles
   342                          
   343                             macro REG_PRESERVE( IOReg )
   344                             mov   A, reg[ @IOReg ]
   345                             push  A
   346  3D73                       endm
   347                          
   348                             ;-----------------------------------------------
   349                             ;  Restore Register
   350                             ;-----------------------------------------------
   351                             ;
   352                             ;  DESC: Restore a register value from the stack
   353                             ;
   354                             ; INPUT: Name or address of register in I/O Space
   355                             ;        The I/O bank is an implicit parameter. That is, this function will
   356                             ;        Access the I/O bank currently specified by the CPU Flag register.
   357                             ;
   358                             ;  USES: CPU 'A' register
   359                             ;
   360                             ;  COST: 10 instruction cycles
   361                          
   362                             macro REG_RESTORE( IOReg )
   363                             pop   A
   364                             mov   reg[ @IOReg ], A
   365  3D73                       endm
   366                          
   367                             ;-----------------------------------------------
   368                             ;  Preserve Volatile Page Pointer Registers
   369                             ;-----------------------------------------------
   370                             ;
   371                             ;  DESC: Invoked by ISRs before switching to the LMM mode and calling
   372                             ;        functions that require on it.
   373                             ;
   374                             ; INPUT: none
   375                             ;
   376                             ;  USES: CPU 'A' register
   377                             ;
   378                             ;  COST: 45 instruction cycles (in LMM only)
   379                          
   380                             macro ISR_PRESERVE_PAGE_POINTERS
   381                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   382                                REG_PRESERVE CUR_PP
   383                                REG_PRESERVE IDX_PP
   384                                REG_PRESERVE MVR_PP
   385                                REG_PRESERVE MVW_PP
   386                             ENDIF
   387  3D73                       endm
   388                          
   389                             ;-----------------------------------------------
   390                             ;  Restore Volatile Page Pointer Registers
   391                             ;-----------------------------------------------
   392                             ;
   393                             ;  DESC: Undo for RAM_PRESERVE_PAGE_POINTERS macro. Invoked by ISRs after
   394                             ;        calling functions that run in the LMM mode and before executing
   395                             ;        the RETI instruction.
   396                             ;
   397                             ; INPUT: none
   398                             ;
   399                             ;  USES: CPU 'A' register
   400                             ;
   401                             ;  COST: 50 instruction cycles (in LMM only)
   402                          
   403                             macro ISR_RESTORE_PAGE_POINTERS
   404                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   405                                REG_RESTORE MVW_PP
   406                                REG_RESTORE MVR_PP
   407                                REG_RESTORE IDX_PP
   408                                REG_RESTORE CUR_PP
   409                             ENDIF
   410                             endm
      + 3D73                    
      + 3D73                    ; end of file Memory.inc
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  FILENAME:   UART_Board.inc
     4                          ;;  Version: 5.3, Updated on 2013/5/19 at 10:44:49
     5                          ;;  Generated by PSoC Designer 5.4.2946
     6                          ;;
     7                          ;;  DESCRIPTION:  Assembler declarations for the UART user module.
     8                          ;;-----------------------------------------------------------------------------
     9                          ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
    10                          ;;*****************************************************************************
    11                          ;;*****************************************************************************
    12                          
    13                          ;--------------------------------------------------
    14                          ; Constants for UART_Board API's
    15                          ;--------------------------------------------------
    16                          
    17                          ;mask value for global int reg bit for TX instance
    18  0040                    UART_Board_TX_INT_MASK:                      equ 0x40
    19  00E1                    UART_Board_TX_INT_REG:                       equ 0x0e1  ;TX interrupt address
    20  0080                    UART_Board_RX_INT_MASK:                      equ 0x80  ;mask value for global int reg bit for RX ins
                                tance
    21  00E1                    UART_Board_RX_INT_REG:                       equ 0x0e1  ;RX interrupt address
    22                          
    23  0000                    UART_Board_RXBUF_ENABLE:                     equ 0
    24                          
    25                          ; Interrupt control masks
    26  0001                    UART_Board_ENABLE_RX_INT:                    equ 0x01
    27  0000                    UART_Board_DISABLE_RX_INT:                   equ 0x00
    28  0002                    UART_Board_ENABLE_TX_INT:                    equ 0x02
    29  0000                    UART_Board_DISABLE_TX_INT:                   equ 0x00
    30                          
    31  0000                    UART_Board_INT_MODE_TX_REG_EMPTY:            equ 0x00
    32  0001                    UART_Board_INT_MODE_TX_COMPLETE:             equ 0x01
    33                          
    34  0020                    UART_Board_RX_IGNORE_BELOW:                  equ 0x20
    35  0010                    UART_Board_RX_BUFFER_SIZE:                   equ 0x10
    36  000D                    UART_Board_CMD_TERM:                         equ 0xd
    37  0020                    UART_Board_DELIMITER:                        equ 0x20
    38  0000                    UART_Board_BACKSPACE_ENABLE:                 equ 0x0
    39                          
    40                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    41                          ;       WARNING WARNING WARNING
    42                          ; The following equates are for backwards
    43                          ; compatibility only and should not be used
    44                          ; for new designs.
    45                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    46                          
    47                          ;------------------------------------
    48                          ;  Parity masks
    49                          ;------------------------------------
    50  0000                    UART_PARITY_NONE:       equ   00h
    51  0002                    UART_PARITY_EVEN:       equ   02h
    52  0006                    UART_PARITY_ODD:        equ   06h
    53                          
    54                          ;------------------------------------
    55                          ;  TX Status Register masks
    56                          ;------------------------------------
    57  0020                    UART_TX_COMPLETE:       equ   20h
    58  0010                    UART_TX_BUFFER_EMPTY:   equ   10h
    59                          
    60                          ;------------------------------------
    61                          ;  RX Status Register masks
    62                          ;------------------------------------
    63  0010                    UART_RX_ACTIVE:         equ   10h
    64  0008                    UART_RX_COMPLETE:       equ   08h
    65  0080                    UART_RX_PARITY_ERROR:   equ   80h
    66  0040                    UART_RX_OVERRUN_ERROR:  equ   40h
    67  0020                    UART_RX_FRAMING_ERROR:  equ   20h
    68  00E0                    UART_RX_NO_ERROR:       equ   E0h
    69                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    70                          ;             END WARNING
    71                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    72                          
    73                          
    74                          
    75                          ;------------------------------------
    76                          ;  Parity masks
    77                          ;------------------------------------
    78  0000                    UART_Board_PARITY_NONE:                 equ   00h
    79  0002                    UART_Board_PARITY_EVEN:                 equ   02h
    80  0006                    UART_Board_PARITY_ODD:                  equ   06h
    81                          
    82                          ;------------------------------------
    83                          ;  TX Status Register masks
    84                          ;------------------------------------
    85  0020                    UART_Board_TX_COMPLETE:                 equ   20h
    86  0010                    UART_Board_TX_BUFFER_EMPTY:             equ   10h
    87                          
    88                          ;------------------------------------
    89                          ;  RX Status Register masks
    90                          ;------------------------------------
    91  0010                    UART_Board_RX_ACTIVE:                   equ   10h
    92  0008                    UART_Board_RX_COMPLETE:                 equ   08h
    93  0008                    UART_Board_RX_REG_FULL:                 equ   08h
    94  0080                    UART_Board_RX_PARITY_ERROR:             equ   80h
    95  0040                    UART_Board_RX_OVERRUN_ERROR:            equ   40h
    96  0020                    UART_Board_RX_FRAMING_ERROR:            equ   20h
    97  00E0                    UART_Board_RX_ERROR:                    equ   E0h
    98  0001                    UART_Board_RX_ENABLE:                   equ   01h
    99                          
   100  00F0                    UART_Board_RX_BUF_ERROR:                equ   F0h  ; Mask for any Rx that may occur.
   101  0010                    UART_Board_RX_BUF_OVERRUN:              equ   10h  ; This indicates the software buffer has
   102                                                                                  ; been over run.
   103  0001                    UART_Board_RX_BUF_CMDTERM:              equ   01h  ; Command terminator has been received.
   104                          
   105  0001                    UART_Board_RX_NO_DATA:                  equ   01h
   106  00E0                    UART_Board_RX_NO_ERROR:                 equ   E0h
   107                          
   108                          
   109                          ;--------------------------------------------------
   110                          ; Registers Address Constants for UART_Board
   111                          ;--------------------------------------------------
   112                          ;---------------------------------
   113                          ;  Registers used by TX
   114                          ;---------------------------------
   115  003B                    UART_Board_TX_CONTROL_REG:  equ 3bh            ; Control register
   116  0038                    UART_Board_TX_SHIFT_REG:    equ 38h               ; TX Shift Register register
   117  0039                    UART_Board_TX_BUFFER_REG:   equ 39h               ; TX Buffer Register
   118  0038                    UART_Board_TX_FUNC_REG: equ 38h         ; Function register
   119  0039                    UART_Board_TX_INPUT_REG:    equ 39h            ; Input register
   120  003A                    UART_Board_TX_OUTPUT_REG:   equ 3ah           ; Output register
   121                          
   122                          ;---------------------------------
   123                          ;  Registers used by RX
   124                          ;---------------------------------
   125  003F                    UART_Board_RX_CONTROL_REG:  equ 3fh            ; Control register
   126  003C                    UART_Board_RX_SHIFT_REG:    equ 3ch               ; RX Shift Register register
   127  003E                    UART_Board_RX_BUFFER_REG:   equ 3eh               ; RX Buffer Register
   128  003C                    UART_Board_RX_FUNC_REG: equ 3ch         ; Function register
   129  003D                    UART_Board_RX_INPUT_REG:    equ 3dh            ; Input register
   130  003E                    UART_Board_RX_OUTPUT_REG:   equ 3eh           ; Output register
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  Filename:   UART_Board.asm
     4                          ;;  Version: 5.3, Updated on 2013/5/19 at 10:44:49
     5                          ;;  Generated by PSoC Designer 5.4.2946
     6                          ;;
     7                          ;;  DESCRIPTION:  UART User Module software implementation file for the
     8                          ;;                22/24/25/26/27xxx families.
     9                          ;;
    10                          ;;
    11                          ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
    12                          ;;        arguments and observe the associated "Registers are volatile" policy.
    13                          ;;        This means it is the caller's responsibility to preserve any values
    14                          ;;        in the X and A registers that are still needed after the API functions
    15                          ;;        returns. For Large Memory Model devices it is also the caller's 
    16                          ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
    17                          ;;        MVW_PP registers. Even though some of these registers may not be modified
    18                          ;;        now, there is no guarantee that will remain the case in future releases.
    19                          ;;-----------------------------------------------------------------------------
    20                          ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
    21                          ;;*****************************************************************************
    22                          ;;*****************************************************************************
    23                          
    24                          
    25                          include "m8c.inc"
    26                          include "memory.inc"
    27                          include "UART_Board.inc"
    28                          
    29                          ;-----------------------------------------------
    30                          ;  Global Symbols
    31                          ;-----------------------------------------------
    32                          ;-------------------------------------------------------------------
    33                          ;  Declare the functions global for both assembler and C compiler.
    34                          ;
    35                          ;  Note that there are two names for each API. First name is
    36                          ;  assembler reference. Name with underscore is name refence for
    37                          ;  C compiler.  Calling function in C source code does not require
    38                          ;  the underscore.
    39                          ;-------------------------------------------------------------------
    40                          export  UART_Board_SetTxIntMode
    41                          export _UART_Board_SetTxIntMode
    42                          export  UART_Board_EnableInt
    43                          export _UART_Board_EnableInt
    44                          export  UART_Board_DisableInt
    45                          export _UART_Board_DisableInt
    46                          
    47                          export  UART_Board_Start
    48                          export _UART_Board_Start
    49                          export  UART_Board_Stop
    50                          export _UART_Board_Stop
    51                          export  UART_Board_SendData
    52                          export _UART_Board_SendData
    53                          export  UART_Board_bReadTxStatus
    54                          export _UART_Board_bReadTxStatus
    55                          export  UART_Board_bReadRxData
    56                          export _UART_Board_bReadRxData
    57                          export  UART_Board_bReadRxStatus
    58                          export _UART_Board_bReadRxStatus
    59                          
    60                          export  UART_Board_IntCntl
    61                          export _UART_Board_IntCntl
    62                          
    63                          export  UART_Board_TxIntMode
    64                          export _UART_Board_TxIntMode
    65                          
    66                          export  UART_Board_PutSHexByte
    67                          export _UART_Board_PutSHexByte
    68                          export  UART_Board_PutSHexInt
    69                          export _UART_Board_PutSHexInt
    70                          
    71                          export  UART_Board_CPutString
    72                          export _UART_Board_CPutString
    73                          export  UART_Board_PutString
    74                          export _UART_Board_PutString
    75                          export  UART_Board_PutChar
    76                          export _UART_Board_PutChar
    77                          export  UART_Board_Write
    78                          export _UART_Board_Write
    79                          export  UART_Board_CWrite
    80                          export _UART_Board_CWrite
    81                          
    82                          export  UART_Board_cGetChar
    83                          export _UART_Board_cGetChar
    84                          export  UART_Board_cReadChar
    85                          export _UART_Board_cReadChar
    86                          export  UART_Board_iReadChar
    87                          export _UART_Board_iReadChar
    88                          export  UART_Board_PutCRLF
    89                          export _UART_Board_PutCRLF
    90                          
    91                          IF (UART_Board_RXBUF_ENABLE)
    92                          export  UART_Board_CmdReset
    93                          export _UART_Board_CmdReset
    94                          export  UART_Board_bCmdCheck
    95                          export _UART_Board_bCmdCheck
    96                          export  UART_Board_bCmdLength
    97                          export _UART_Board_bCmdLength
    98                          export  UART_Board_bErrCheck
    99                          export _UART_Board_bErrCheck
   100                          
   101                          export  UART_Board_szGetParam
   102                          export _UART_Board_szGetParam
   103                          export  UART_Board_szGetRestOfParams
   104                          export _UART_Board_szGetRestOfParams
   105                          ENDIF
   106                          
   107                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   108                          ; WARNING WARNING WARNING
   109                          ; The following exports are for backwards compatibility only and should
   110                          ; not be used for new designs. They may be eliminated in a future release.
   111                          ; Their status is "NO FURTHER MAINTENANCE". 
   112                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   113                          export  bUART_Board_ReadTxStatus
   114                          export _bUART_Board_ReadTxStatus
   115                          export  bUART_Board_ReadRxData
   116                          export _bUART_Board_ReadRxData
   117                          export  bUART_Board_ReadRxStatus
   118                          export _bUART_Board_ReadRxStatus
   119                          	
   120                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   121                          ;             END WARNING
   122                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   123                          
   124                          ;-----------------------------------------------
   125                          ; Variable Allocation
   126                          ;-----------------------------------------------
   127                          IF (UART_Board_RXBUF_ENABLE)
   128                              
   129                          area UART_Board_RAM (RAM, REL, CON)
   130                              
   131                           ptrParam:   BLK  1
   132                          
   133                          ENDIF
   134                          
   135                          area text (ROM,REL)
   136                          
   137                          ;-----------------------------------------------
   138                          ;  EQUATES
   139                          ;-----------------------------------------------
   140  0001                    bfCONTROL_REG_START_BIT:        equ    1    ; Control register start bit
   141  0010                    bfFUNCTION_REG_TX_INT_MODE_BIT: equ 0x10    ; the TX Int Mode bit
   142                          
   143                          area UserModules (ROM, REL, CON)
   144                          
   145                          ;=============================================================================
   146                          ;=============================================================================
   147                          ;
   148                          ;     Low-Level Commands
   149                          ;
   150                          ;=============================================================================
   151                          ;=============================================================================
   152                          
   153                          .SECTION
   154                          ;-----------------------------------------------------------------------------
   155                          ;  FUNCTION NAME: UART_Board_EnableInt
   156                          ;
   157                          ;  DESCRIPTION:
   158                          ;     Enables this UART's interrupt by setting the interrupt enable mask
   159                          ;     bit associated with this User Module. Remember to call the global
   160                          ;     interrupt enable function by using the macro: M8C_EnableGInt.
   161                          ;-----------------------------------------------------------------------------
   162                          ;
   163                          ;  ARGUMENTS:
   164                          ;     none.
   165                          ;
   166                          ;  RETURNS:
   167                          ;     none.
   168                          ;
   169                          ;  SIDE EFFECTS:
   170                          ;    The A and X registers may be modified by this or future implementations
   171                          ;    of this function.  The same is true for all RAM page pointer registers in
   172                          ;    the Large Memory Model.  When necessary, it is the calling function's
   173                          ;    responsibility to perserve their values across calls to fastcall16 
   174                          ;    functions.
   175                          ;
   176  2D6A                     UART_Board_EnableInt:
   177  2D6A                    _UART_Board_EnableInt:
   178                             RAM_PROLOGUE RAM_USE_CLASS_1
   179  2D6A  43 E1 40             M8C_EnableIntMask UART_Board_TX_INT_REG, UART_Board_TX_INT_MASK
   180  2D6D  43 E1 80             M8C_EnableIntMask UART_Board_RX_INT_REG, UART_Board_RX_INT_MASK
   181                             RAM_EPILOGUE RAM_USE_CLASS_1
   182  2D70  7F                   ret
   183                          .ENDSECTION
   184                          
   185                              
   186                          .SECTION
   187                          ;-----------------------------------------------------------------------------
   188                          ;  FUNCTION NAME: UART_Board_DisableInt
   189                          ;
   190                          ;  DESCRIPTION:
   191                          ;     Disables this UART's interrupt by clearing the interrupt enable mask bit
   192                          ;     associated with this User Module.
   193                          ;-----------------------------------------------------------------------------
   194                          ;
   195                          ;  ARGUMENTS:
   196                          ;     none.
   197                          ;
   198                          ;  RETURNS:
   199                          ;     none.
   200                          ;
   201                          ;  SIDE EFFECTS:
   202                          ;    The A and X registers may be modified by this or future implementations
   203                          ;    of this function.  The same is true for all RAM page pointer registers in
   204                          ;    the Large Memory Model.  When necessary, it is the calling function's
   205                          ;    responsibility to perserve their values across calls to fastcall16 
   206                          ;    functions.
   207                          ;
   208  2D71                     UART_Board_DisableInt:
   209  2D71                    _UART_Board_DisableInt:
   210                             RAM_PROLOGUE RAM_USE_CLASS_1
   211  2D71  41 E1 BF             M8C_DisableIntMask UART_Board_TX_INT_REG, UART_Board_TX_INT_MASK
   212  2D74  41 E1 7F             M8C_DisableIntMask UART_Board_RX_INT_REG, UART_Board_RX_INT_MASK
   213                             RAM_EPILOGUE RAM_USE_CLASS_1
   214  2D77  7F                   ret
   215                          .ENDSECTION
   216                          
   217                          
   218                          .SECTION
   219                          ;-----------------------------------------------------------------------------
   220                          ;  FUNCTION NAME: UART_Board_SetTxIntMode(BYTE bTxIntMode)
   221                          ;
   222                          ;  DESCRIPTION:
   223                          ;     Sets the Tx Interrupt Mode bit in the Function Register.
   224                          ;-----------------------------------------------------------------------------
   225                          ;
   226                          ;  ARGUMENTS:
   227                          ;     BYTE bTxIntMode - The TX Interrupt mode setting. Use defined masks.
   228                          ;        Passed in the A register
   229                          ;
   230                          ;  RETURNS:
   231                          ;     none.
   232                          ;
   233                          ;  SIDE EFFECTS:
   234                          ;    The A and X registers may be modified by this or future implementations
   235                          ;    of this function.  The same is true for all RAM page pointer registers in
   236                          ;    the Large Memory Model.  When necessary, it is the calling function's
   237                          ;    responsibility to perserve their values across calls to fastcall16 
   238                          ;    functions.
   239                          ;
   240                          ;  THEORY of OPERATION OR PROCEDURE:
   241                          ;     Sets the TX interrupt mode bit to define whether the interrupt occurs
   242                          ;     on TX register empty or TX transmit complete
   243                          ;
   244  2D78                     UART_Board_SetTxIntMode:
   245  2D78                    _UART_Board_SetTxIntMode:
   246                             RAM_PROLOGUE RAM_USE_CLASS_1
   247  2D78  71 10                M8C_SetBank1
   248  2D7A  21 01                and   A, UART_Board_INT_MODE_TX_COMPLETE
   249  2D7C  A007                 jz    .SetModeRegEmpty
   250  2D7E  43 38 10             or    REG[UART_Board_TX_FUNC_REG], bfFUNCTION_REG_TX_INT_MODE_BIT
   251  2D81  70 EF                M8C_SetBank0
   252                             RAM_EPILOGUE RAM_USE_CLASS_1
   253  2D83  7F                   ret
   254                          
   255  2D84                    .SetModeRegEmpty:
   256  2D84  41 38 EF             and   REG[UART_Board_TX_FUNC_REG], ~bfFUNCTION_REG_TX_INT_MODE_BIT
   257  2D87  70 EF                M8C_SetBank0
   258                             RAM_EPILOGUE RAM_USE_CLASS_1
   259  2D89  7F                   ret
   260                          .ENDSECTION
   261                          
   262                          
   263                          .SECTION
   264                          ;-----------------------------------------------------------------------------
   265                          ;  FUNCTION NAME: UART_Board_Start(BYTE bParity)
   266                          ;
   267                          ;  DESCRIPTION:
   268                          ;     Sets the start bit and parity in the Control register of this user module.
   269                          ;-----------------------------------------------------------------------------
   270                          ;
   271                          ;  ARGUMENTS:
   272                          ;     BYTE bParity - parity setting for the Transmitter and receiver. Use defined masks.
   273                          ;        Passed in the A register.
   274                          ;
   275                          ;  RETURNS:
   276                          ;     none.
   277                          ;
   278                          ;  SIDE EFFECTS:
   279                          ;    The A and X registers may be modified by this or future implementations
   280                          ;    of this function.  The same is true for all RAM page pointer registers in
   281                          ;    the Large Memory Model.  When necessary, it is the calling function's
   282                          ;    responsibility to perserve their values across calls to fastcall16 
   283                          ;    functions.
   284                          ;
   285  2D8A                     UART_Board_Start:
   286  2D8A                    _UART_Board_Start:
   287                             RAM_PROLOGUE RAM_USE_CLASS_1
   288                             ; Note, Proxy Class 4 only if receive buffer used; otherwise Proxy Class 1.
   289                          
   290  2D8A  29 01                or    A, bfCONTROL_REG_START_BIT
   291  2D8C  60 3B                mov   REG[UART_Board_TX_CONTROL_REG], A
   292  2D8E  60 3F                mov   REG[UART_Board_RX_CONTROL_REG], A
   293                          IF ( UART_Board_RXBUF_ENABLE )
   294                             call  _UART_Board_CmdReset
   295                          ENDIF
   296                             RAM_EPILOGUE RAM_USE_CLASS_1
   297  2D90  7F                   ret
   298                          .ENDSECTION
   299                          
   300                          
   301                          .SECTION
   302                          ;-----------------------------------------------------------------------------
   303                          ;  FUNCTION NAME: UART_Board_Stop
   304                          ;
   305                          ;  DESCRIPTION:
   306                          ;     Disables UART operation.
   307                          ;-----------------------------------------------------------------------------
   308                          ;
   309                          ;  ARGUMENTS:
   310                          ;     none.
   311                          ;
   312                          ;  RETURNS:
   313                          ;     none.
   314                          ;
   315                          ;  SIDE EFFECTS:
   316                          ;    The A and X registers may be modified by this or future implementations
   317                          ;    of this function.  The same is true for all RAM page pointer registers in
   318                          ;    the Large Memory Model.  When necessary, it is the calling function's
   319                          ;    responsibility to perserve their values across calls to fastcall16 
   320                          ;    functions.
   321                          ;
   322  2D91                     UART_Board_Stop:
   323  2D91                    _UART_Board_Stop:
   324                             RAM_PROLOGUE RAM_USE_CLASS_1
   325  2D91  41 3B FE             and   REG[UART_Board_TX_CONTROL_REG], ~bfCONTROL_REG_START_BIT
   326  2D94  41 3F FE             and   REG[UART_Board_RX_CONTROL_REG], ~bfCONTROL_REG_START_BIT
   327                             RAM_EPILOGUE RAM_USE_CLASS_1
   328  2D97  7F                   ret
   329                          .ENDSECTION
   330                          
   331                          
   332                          .SECTION
   333                          ;-----------------------------------------------------------------------------
   334                          ;  FUNCTION NAME: UART_Board_SendData
   335                          ;
   336                          ;  DESCRIPTION:
   337                          ;     Initiates a transmission of data.
   338                          ;-----------------------------------------------------------------------------
   339                          ;
   340                          ;  ARGUMENTS:
   341                          ;     BYTE  TxData - data to transmit. PASSED in A register.
   342                          ;
   343                          ;  RETURNS:
   344                          ;     none.
   345                          ;
   346                          ;  SIDE EFFECTS:
   347                          ;    The A and X registers may be modified by this or future implementations
   348                          ;    of this function.  The same is true for all RAM page pointer registers in
   349                          ;    the Large Memory Model.  When necessary, it is the calling function's
   350                          ;    responsibility to perserve their values across calls to fastcall16 
   351                          ;    functions.
   352                          ;
   353  2D98                     UART_Board_SendData:
   354  2D98                    _UART_Board_SendData:
   355                             RAM_PROLOGUE RAM_USE_CLASS_1
   356  2D98  60 39                mov REG[UART_Board_TX_BUFFER_REG], A
   357                             RAM_EPILOGUE RAM_USE_CLASS_1
   358  2D9A  7F                   ret
   359                          .ENDSECTION
   360                          
   361                          
   362                          .SECTION
   363                          ;-----------------------------------------------------------------------------
   364                          ;  FUNCTION NAME: UART_Board_bReadTxStatus
   365                          ;
   366                          ;  DESCRIPTION:
   367                          ;     Reads the Tx Status bits in the Control/Status register.
   368                          ;-----------------------------------------------------------------------------
   369                          ;
   370                          ;  ARGUMENTS:
   371                          ;     none.
   372                          ;
   373                          ;  RETURNS:
   374                          ;     BYTE  bTxStatus - transmit status data.  Use defined masks for detecting
   375                          ;           status bits (returned in A)
   376                          ;
   377                          ;  SIDE EFFECTS:
   378                          ;    The A and X registers may be modified by this or future implementations
   379                          ;    of this function.  The same is true for all RAM page pointer registers in
   380                          ;    the Large Memory Model.  When necessary, it is the calling function's
   381                          ;    responsibility to perserve their values across calls to fastcall16 
   382                          ;    functions.
   383                          ;
   384  2D9B                     UART_Board_bReadTxStatus:
   385  2D9B                    _UART_Board_bReadTxStatus:
   386  2D9B                     bUART_Board_ReadTxStatus:                       ; For backwards compatibility only
   387  2D9B                    _bUART_Board_ReadTxStatus:                       ; For backwards compatibility only
   388                             RAM_PROLOGUE RAM_USE_CLASS_1
   389  2D9B  5D 3B                mov A,  REG[UART_Board_TX_CONTROL_REG]
   390                             RAM_EPILOGUE RAM_USE_CLASS_1
   391  2D9D  7F                   ret
   392                          .ENDSECTION
   393                          
   394                          
   395                          .SECTION
   396                          ;-----------------------------------------------------------------------------
   397                          ;  FUNCTION NAME: UART_Board_bReadRxData
   398                          ;
   399                          ;  DESCRIPTION:
   400                          ;     Reads the RX buffer register.  Should check the status regiser to make
   401                          ;     sure data is valid.
   402                          ;-----------------------------------------------------------------------------
   403                          ;
   404                          ;  ARGUMENTS:
   405                          ;     none.
   406                          ;
   407                          ;  RETURNS:
   408                          ;     bRxData - returned in A.
   409                          ;
   410                          ;  SIDE EFFECTS:
   411                          ;    The A and X registers may be modified by this or future implementations
   412                          ;    of this function.  The same is true for all RAM page pointer registers in
   413                          ;    the Large Memory Model.  When necessary, it is the calling function's
   414                          ;    responsibility to perserve their values across calls to fastcall16 
   415                          ;    functions.
   416                          ;
   417  2D9E                     UART_Board_bReadRxData:
   418  2D9E                    _UART_Board_bReadRxData:
   419  2D9E                     bUART_Board_ReadRxData:                         ; For backwards compatibility only
   420  2D9E                    _bUART_Board_ReadRxData:                         ; For backwards compatibility only
   421                             RAM_PROLOGUE RAM_USE_CLASS_1
   422  2D9E  5D 3E                mov A, REG[UART_Board_RX_BUFFER_REG]
   423                             RAM_EPILOGUE RAM_USE_CLASS_1
   424  2DA0  7F                   ret
   425                          .ENDSECTION
   426                          
   427                          
   428                          .SECTION
   429                          ;-----------------------------------------------------------------------------
   430                          ;  FUNCTION NAME: UART_Board_bReadRxStatus
   431                          ;
   432                          ;  DESCRIPTION:
   433                          ;     Reads the RX Status bits in the Control/Status register.
   434                          ;-----------------------------------------------------------------------------
   435                          ;
   436                          ;  ARGUMENTS:
   437                          ;     none.
   438                          ;
   439                          ;  RETURNS:
   440                          ;     BYTE  bRXStatus - receive status data.  Use the following defined bits
   441                          ;                       masks: RX_COMPLETE and RX_BUFFER_EMPTY
   442                          ;           returned in A.
   443                          ;
   444                          ;  SIDE EFFECTS:
   445                          ;    The A and X registers may be modified by this or future implementations
   446                          ;    of this function.  The same is true for all RAM page pointer registers in
   447                          ;    the Large Memory Model.  When necessary, it is the calling function's
   448                          ;    responsibility to perserve their values across calls to fastcall16 
   449                          ;    functions.
   450                          ;
   451  2DA1                     UART_Board_bReadRxStatus:
   452  2DA1                    _UART_Board_bReadRxStatus:
   453  2DA1                     bUART_Board_ReadRxStatus:                       ; For backwards compatibility only
   454  2DA1                    _bUART_Board_ReadRxStatus:                       ; For backwards compatibility only
   455                             RAM_PROLOGUE RAM_USE_CLASS_1
   456  2DA1  5D 3F                mov A,  REG[UART_Board_RX_CONTROL_REG]
   457                             RAM_EPILOGUE RAM_USE_CLASS_1
   458  2DA3  7F                   ret
   459                          .ENDSECTION
   460                          
   461                          
   462                          .SECTION
   463                          ;-----------------------------------------------------------------------------
   464                          ;  FUNCTION NAME: UART_Board_TxIntMode
   465                          ;
   466                          ;  DESCRIPTION:
   467                          ;     This function is used to change the TX Interrupt mode.
   468                          ;-----------------------------------------------------------------------------
   469                          ;
   470                          ;  ARGUMENTS:
   471                          ;     A => Tx Interrupt mode
   472                          ;             0 => Interrupt on TX_Reg_Empty  (Default)
   473                          ;             1 => Interrupt on TX Complete
   474                          ;
   475                          ;  RETURNS:
   476                          ;     none.
   477                          ;
   478                          ;  SIDE EFFECTS:
   479                          ;    The A and X registers may be modified by this or future implementations
   480                          ;    of this function.  The same is true for all RAM page pointer registers in
   481                          ;    the Large Memory Model.  When necessary, it is the calling function's
   482                          ;    responsibility to perserve their values across calls to fastcall16 
   483                          ;    functions.
   484                          ;
   485  2DA4                     UART_Board_TxIntMode:
   486  2DA4                    _UART_Board_TxIntMode:
   487                             RAM_PROLOGUE RAM_USE_CLASS_1
   488                          
   489  2DA4  21 01                and  A,UART_Board_INT_MODE_TX_COMPLETE
   490  2DA6  71 10                M8C_SetBank1
   491  2DA8  39 01                cmp  A,UART_Board_INT_MODE_TX_COMPLETE
   492  2DAA  A006                 jz   .SetTxCmpMode
   493                          
   494  2DAC  41 38 EF             and  reg[UART_Board_TX_FUNC_REG],0xEF         ; Set Interrupt on Tx_Reg_Empty
   495  2DAF  8004                 jmp  .TxIntMode_End
   496                          
   497  2DB1                    .SetTxCmpMode:                                       ; Set Interrupt on TX Complete
   498  2DB1  43 38 10             or   reg[UART_Board_TX_FUNC_REG],0x10
   499                          
   500  2DB4                    .TxIntMode_End:
   501  2DB4  70 EF                M8C_SetBank0
   502                             RAM_EPILOGUE RAM_USE_CLASS_1
   503  2DB6  7F                   ret
   504                          .ENDSECTION
   505                          
   506                              
   507                          .SECTION
   508                          ;-----------------------------------------------------------------------------
   509                          ;  FUNCTION NAME: UART_Board_IntCntl
   510                          ;
   511                          ;  DESCRIPTION:
   512                          ;     This function is used to enable/disable the Rx and Tx interrupt.
   513                          ;-----------------------------------------------------------------------------
   514                          ;
   515                          ;  ARGUMENTS:
   516                          ;     A => Interrupt mask
   517                          ;
   518                          ;  RETURNS:
   519                          ;     none.
   520                          ;
   521                          ;  SIDE EFFECTS:
   522                          ;    The A and X registers may be modified by this or future implementations
   523                          ;    of this function.  The same is true for all RAM page pointer registers in
   524                          ;    the Large Memory Model.  When necessary, it is the calling function's
   525                          ;    responsibility to perserve their values across calls to fastcall16 
   526                          ;    functions.
   527                          ;
   528                          ;  THEORY of OPERATION or PROCEDURE:
   529                          ;     Set or Clears the Tx/Rx user module interrupt enable mask bit in the TX
   530                          ;     and RX block.
   531                          ;
   532  2DB7                     UART_Board_IntCntl:
   533  2DB7                    _UART_Board_IntCntl:
   534                             RAM_PROLOGUE RAM_USE_CLASS_1
   535                          
   536  2DB7  08                   push A
   537  2DB8  21 01                and  A,UART_Board_ENABLE_RX_INT
   538  2DBA  A006                 jz   .DisRxInt
   539                               ; Enable Rx Interrupt
   540  2DBC  43 E1 80             M8C_EnableIntMask UART_Board_RX_INT_REG, UART_Board_RX_INT_MASK
   541  2DBF  8004                 jmp  .CheckTxInt
   542  2DC1                    .DisRxInt:
   543                               ; Disable Rx Interrupt
   544  2DC1  41 E1 7F             M8C_DisableIntMask UART_Board_RX_INT_REG, UART_Board_RX_INT_MASK
   545                          
   546  2DC4                    .CheckTxInt:
   547  2DC4  18                   pop  A
   548  2DC5  21 02                and  A,UART_Board_ENABLE_TX_INT
   549  2DC7  A006                 jz   .DisTxInt
   550                               ; Enable Tx Interrupt
   551  2DC9  43 E1 40             M8C_EnableIntMask UART_Board_TX_INT_REG, UART_Board_TX_INT_MASK
   552  2DCC  8004                 jmp  .End_IntCntl
   553  2DCE                    .DisTxInt:
   554                               ; Disable Tx Interrupt
   555  2DCE  41 E1 BF             M8C_DisableIntMask UART_Board_TX_INT_REG, UART_Board_TX_INT_MASK
   556                          
   557  2DD1                    .End_IntCntl:
   558                             RAM_EPILOGUE RAM_USE_CLASS_1
   559  2DD1  7F                   ret
   560                          .ENDSECTION
   561                          
   562                          
   563                          ;=============================================================================
   564                          ;=============================================================================
   565                          ;
   566                          ;     High-Level Commands
   567                          ;
   568                          ;=============================================================================
   569                          ;=============================================================================
   570                          
   571                          
   572                          ;-----------------------------------------------------------------------------
   573                          ;  FUNCTION NAME: UART_Board_PutSHexByte
   574                          ;
   575                          ;  DESCRIPTION:
   576                          ;     Print a byte in Hex (two characters) to the UART Tx
   577                          ;-----------------------------------------------------------------------------
   578                          ;
   579                          ;  ARGUMENTS:
   580                          ;     A  => (BYTE) Data/char to be printed
   581                          ;
   582                          ;  RETURNS:
   583                          ;     none.
   584                          ;
   585                          ;  SIDE EFFECTS:
   586                          ;    The A and X registers may be modified by this or future implementations
   587                          ;    of this function.  The same is true for all RAM page pointer registers in
   588                          ;    the Large Memory Model.  When necessary, it is the calling function's
   589                          ;    responsibility to perserve their values across calls to fastcall16 
   590                          ;    functions.
   591                          ;
   592                          .LITERAL
   593  2DD2                    UART_Board_HEX_STR:
   594  2DD2  30 31 32 33 34 35      DS    "0123456789ABCDEF"
              36 37 38 39 41 42 
              43 44 45 46       
   595                          .ENDLITERAL
   596                          
   597                          .SECTION
   598  2DE2                     UART_Board_PutSHexByte:
   599  2DE2                    _UART_Board_PutSHexByte:
   600                             RAM_PROLOGUE RAM_USE_CLASS_1
   601  2DE2  08                   push  A                             ; Save lower nibble
   602  2DE3  67                   asr   A                             ; Shift high nibble to right
   603  2DE4  67                   asr   A
   604  2DE5  67                   asr   A
   605  2DE6  67                   asr   A
   606  2DE7  21 0F                and   A,0Fh                         ; Mask off nibble
   607  2DE9  FFE7                 index UART_Board_HEX_STR            ; Get Hex value
   608  2DEB  900F                 call  UART_Board_PutChar            ; Write data to screen
   609  2DED  18                   pop   A                             ; Restore value
   610  2DEE  21 0F                and   A,0Fh                         ; Mask off lower nibble
   611  2DF0  FFE0                 index UART_Board_HEX_STR            ; Get Hex value
   612  2DF2  9008                 call  UART_Board_PutChar            ; Write data to screen
   613                             RAM_EPILOGUE RAM_USE_CLASS_1
   614  2DF4  7F                   ret
   615                          .ENDSECTION
   616                          
   617                          
   618                          .SECTION
   619                          ;-----------------------------------------------------------------------------
   620                          ;  FUNCTION NAME: UART_Board_PutSHexInt
   621                          ;
   622                          ;  DESCRIPTION:
   623                          ;     Print an Int in Hex (four characters) to UART Tx
   624                          ;-----------------------------------------------------------------------------
   625                          ;
   626                          ;  ARGUMENTS:
   627                          ;     Pointer to string
   628                          ;     A  => ASB of Int
   629                          ;     X  => MSB of Int
   630                          ;
   631                          ;  RETURNS:
   632                          ;     none.
   633                          ;
   634                          ;  SIDE EFFECTS:
   635                          ;    The A and X registers may be modified by this or future implementations
   636                          ;    of this function.  The same is true for all RAM page pointer registers in
   637                          ;    the Large Memory Model.  When necessary, it is the calling function's
   638                          ;    responsibility to perserve their values across calls to fastcall16 
   639                          ;    functions.
   640                          ;
   641                          
   642  2DF5                     UART_Board_PutSHexInt:
   643  2DF5                    _UART_Board_PutSHexInt:
   644                             RAM_PROLOGUE RAM_USE_CLASS_1
   645  2DF5  4B                   swap  A,X
   646  2DF6  9FEA                 call  UART_Board_PutSHexByte        ; Print MSB
   647  2DF8  5B                   mov   A,X                           ; Move LSB into position
   648  2DF9  9FE7                 call  UART_Board_PutSHexByte        ; Print LSB
   649                             RAM_EPILOGUE RAM_USE_CLASS_1
   650  2DFB  7F                   ret
   651                          .ENDSECTION
   652                          
   653                          
   654                          .SECTION
   655                          ;-----------------------------------------------------------------------------
   656                          ;  FUNCTION NAME: UART_Board_PutChar
   657                          ;
   658                          ;  DESCRIPTION:
   659                          ;     Send character out through UART TX port.
   660                          ;-----------------------------------------------------------------------------
   661                          ;
   662                          ;  ARGUMENTS:
   663                          ;     A has Character to send to UART Tx Port
   664                          ;
   665                          ;  RETURNS:
   666                          ;     none
   667                          ;
   668                          ;  SIDE EFFECTS:
   669                          ;    The A and X registers may be modified by this or future implementations
   670                          ;    of this function.  The same is true for all RAM page pointer registers in
   671                          ;    the Large Memory Model.  When necessary, it is the calling function's
   672                          ;    responsibility to perserve their values across calls to fastcall16 
   673                          ;    functions.
   674                          ;
   675                          
   676                             macro InLinePutChar( Source )
   677                          .BufEmptyWaitLoop:
   678                             tst REG[UART_Board_TX_CONTROL_REG], UART_Board_TX_BUFFER_EMPTY     ; Check Tx Status
   679                             jz  .BufEmptyWaitLoop
   680                             mov REG[UART_Board_TX_BUFFER_REG], @Source    ; Write data to Tx Port
   681  2DFC                       endm
   682                          
   683  2DFC                     UART_Board_PutChar:
   684  2DFC                    _UART_Board_PutChar:
   685                             RAM_PROLOGUE RAM_USE_CLASS_1
   686                             InLinePutChar A
      + 2DFC                    ; Nothing to do
??0000:
      + 2DFC  49 3B 10          	tst	reg[59], 16
      + 2DFF  AFFC              	jz	??0000
      + 2E01  60 39             	mov	reg[57], a
   687                             RAM_EPILOGUE RAM_USE_CLASS_1
   688  2E03  7F                   ret
   689                          .ENDSECTION
   690                          
   691                          
   692                          .SECTION
   693                          ;-----------------------------------------------------------------------------
   694                          ;  FUNCTION NAME: UART_Board_cGetChar
   695                          ;
   696                          ;  DESCRIPTION:
   697                          ;     Read character from UART RX port.
   698                          ;-----------------------------------------------------------------------------
   699                          ;
   700                          ;  ARGUMENTS:
   701                          ;      none
   702                          ;
   703                          ;  RETURNS:
   704                          ;     char that is returned from UART
   705                          ;
   706                          ;  SIDE EFFECTS:
   707                          ;    The A and X registers may be modified by this or future implementations
   708                          ;    of this function.  The same is true for all RAM page pointer registers in
   709                          ;    the Large Memory Model.  When necessary, it is the calling function's
   710                          ;    responsibility to perserve their values across calls to fastcall16 
   711                          ;    functions.
   712                          ;
   713                          ;    Program flow will stay in this function until a character is received.
   714                          ;    If the watchdog timer is used, care must be taken to make sure that
   715                          ;    the delay between characters is less than the watchdog timeout.
   716                          ;
   717  2E04                     UART_Board_cGetChar:
   718  2E04                    _UART_Board_cGetChar:
   719                             RAM_PROLOGUE RAM_USE_CLASS_1
   720  2E04  49 3F 08             tst REG[UART_Board_RX_CONTROL_REG],UART_Board_RX_REG_FULL    ; Check if a character is ready
   721  2E07  AFFC                 jz  UART_Board_cGetChar                              ; If not loop
   722  2E09  5D 3E                mov A, REG[UART_Board_RX_BUFFER_REG]                 ; Get character
   723                             RAM_EPILOGUE RAM_USE_CLASS_1
   724  2E0B  7F                   ret
   725                          .ENDSECTION
   726                          
   727                          
   728                          .SECTION
   729                          ;-----------------------------------------------------------------------------
   730                          ;  FUNCTION NAME: UART_Board_cReadChar
   731                          ;
   732                          ;  DESCRIPTION:
   733                          ;     Read character from UART RX port.
   734                          ;-----------------------------------------------------------------------------
   735                          ;
   736                          ;  ARGUMENTS:
   737                          ;      none
   738                          ;
   739                          ;  RETURNS:
   740                          ;     char that is returned from UART
   741                          ;
   742                          ;  SIDE EFFECTS:
   743                          ;    The A and X registers may be modified by this or future implementations
   744                          ;    of this function.  The same is true for all RAM page pointer registers in
   745                          ;    the Large Memory Model.  When necessary, it is the calling function's
   746                          ;    responsibility to perserve their values across calls to fastcall16 
   747                          ;    functions.
   748                          ;
   749                          ;    A valid 0x00 character will be ignored, since a 0x00 return value
   750                          ;    implies a valid character or an error condition occured.
   751                          ;
   752  2E0C                     UART_Board_cReadChar:
   753  2E0C                    _UART_Board_cReadChar:
   754                             RAM_PROLOGUE RAM_USE_CLASS_1
   755  2E0C  5D 3F                mov  A,REG[UART_Board_RX_CONTROL_REG]                   ; Get Status of RX
   756  2E0E  08                   push A
   757  2E0F  21 08                and  A,UART_Board_RX_COMPLETE                           ; Check if a character is ready
   758  2E11  B004                 jnz  .RX_DATA_RDY                                       ; Data Ready go read it.
   759  2E13  18                   pop  A
   760  2E14  800B                 jmp  .RX_NO_VALID_CHAR
   761                          
   762  2E16                    .RX_DATA_RDY:
   763  2E16  5D 3E                mov  A,REG[UART_Board_RX_BUFFER_REG ]          
   764  2E18  4B                   swap A,X                                                ; determine if data is valid
   765                          
   766  2E19  18                   pop  A                                                  ; Check for errors
   767  2E1A  21 A0                and  A,(UART_Board_RX_PARITY_ERROR | UART_Board_RX_FRAMING_ERROR)
   768  2E1C  B003                 jnz  .RX_NO_VALID_CHAR                                  ; No character, exit
   769  2E1E  4B                   swap A,X                                                ; Put data in A and exit
   770                             RAM_EPILOGUE RAM_USE_CLASS_1
   771  2E1F  7F                   ret
   772                          
   773  2E20                    .RX_NO_VALID_CHAR:
   774  2E20  50 00                mov A,0x00                                              ; Zero out character
   775                          
   776  2E22                     End_UART_Board_cReadChar:
   777                             RAM_EPILOGUE RAM_USE_CLASS_1
   778  2E22  7F                   ret
   779                          .ENDSECTION
   780                          
   781                          
   782                          .SECTION
   783                          ;-----------------------------------------------------------------------------
   784                          ;  FUNCTION NAME: UART_Board_iReadChar
   785                          ;
   786                          ;  WARNING WARNING WARNING  Negative return value not correct!!!!  We may want
   787                          ;  to just set a value in the upper byte if error conditions exists.
   788                          ;
   789                          ;  DESCRIPTION:
   790                          ;     Read character from UART RX port.
   791                          ;-----------------------------------------------------------------------------
   792                          ;
   793                          ;  ARGUMENTS:
   794                          ;      none
   795                          ;
   796                          ;  RETURNS:
   797                          ;     An integer value is returned.  A negative value inplies and error
   798                          ;     condition, a positive value between 0 and 255 is the return character.
   799                          ;
   800                          ;     Error Codes:
   801                          ;        0x80CC    Parity Error
   802                          ;        0x40CC    Overrun Error
   803                          ;        0x20CC    Framing Error
   804                          ;        0x01CC    No Data available
   805                          ;
   806                          ;  SIDE EFFECTS:
   807                          ;    The A and X registers may be modified by this or future implementations
   808                          ;    of this function.  The same is true for all RAM page pointer registers in
   809                          ;    the Large Memory Model.  When necessary, it is the calling function's
   810                          ;    responsibility to perserve their values across calls to fastcall16 
   811                          ;    functions.
   812                          ;
   813  2E23                     UART_Board_iReadChar:
   814  2E23                    _UART_Board_iReadChar:
   815                             RAM_PROLOGUE RAM_USE_CLASS_1
   816  2E23  5D 3F                mov  A,REG[UART_Board_RX_CONTROL_REG]                   ; Get Status of RX
   817                                                                                     ; Mask only errors and data ready
   818  2E25  21 E8                and  A,(UART_Board_RX_ERROR|UART_Board_RX_REG_FULL)
   819  2E27  08                   push A
   820  2E28  21 08                and  A,UART_Board_RX_COMPLETE                           ; Check if a character is ready
   821  2E2A  B007                 jnz  .RX_GET_DATA                                       ; Data Ready go read it.
   822  2E2C  18                   pop  A
   823  2E2D  29 01                or   A,UART_Board_RX_NO_DATA                            ; Add no data flag
   824  2E2F  4B                   swap A,X
   825  2E30  8007                 jmp  End_UART_Board_iReadChar
   826                          
   827  2E32                    .RX_GET_DATA:
   828  2E32  18                   pop  A
   829  2E33  21 E0                and  A,UART_Board_RX_ERROR
   830  2E35  4B                   swap A,X
   831  2E36  5D 3E                mov  A,REG[UART_Board_RX_BUFFER_REG ]                   ; Read data first, then
   832                                                                                     ; determine if data is valid
   833                          
   834  2E38                     End_UART_Board_iReadChar:
   835                             RAM_EPILOGUE RAM_USE_CLASS_1
   836  2E38  7F                   ret
   837                          .ENDSECTION
   838                          
   839                          
   840                          .SECTION
   841                          ;-----------------------------------------------------------------------------
   842                          ;  FUNCTION NAME: UART_Board_PutString
   843                          ;
   844                          ;  DESCRIPTION:
   845                          ;     Send String out through UART TX port.
   846                          ;-----------------------------------------------------------------------------
   847                          ;
   848                          ;  ARGUMENTS:
   849                          ;     Pointer to String
   850                          ;     A has MSB of string address
   851                          ;     X has LSB of string address
   852                          ;
   853                          ;  RETURNS:
   854                          ;     none
   855                          ;
   856                          ;  SIDE EFFECTS:
   857                          ;    The A and X registers may be modified by this or future implementations
   858                          ;    of this function.  The same is true for all RAM page pointer registers in
   859                          ;    the Large Memory Model.  When necessary, it is the calling function's
   860                          ;    responsibility to perserve their values across calls to fastcall16 
   861                          ;    functions.
   862                          ;          
   863                          ;    Currently only the page pointer registers listed below are modified: 
   864                          ;          IDX_PP
   865                          ;
   866  2E39                     UART_Board_PutString:
   867  2E39                    _UART_Board_PutString:
   868                             RAM_PROLOGUE RAM_USE_CLASS_3
   869  2E39  60 D3                RAM_SETPAGE_IDX A
   870  2E3B                    .PutStringLoop:
   871  2E3B  52 00                mov   A,[X]                                   ; Get value pointed to by X
   872  2E3D  A006                 jz    End_PutString                           ; Check for end of string
   873  2E3F  9FBB                 call  UART_Board_PutChar                      ; Send character to Tx port
   874  2E41  75                   inc   X                                       ; Advance pointer to next character
   875  2E42  8FF8                 jmp   .PutStringLoop                          ; Get next character
   876                          
   877  2E44                    End_PutString:
   878                             RAM_EPILOGUE RAM_USE_CLASS_3
      + 2E44  70 3F             	and	f, 0x3F
      + 2E46  71 80             	or	f, 0x80
   879  2E48  7F                   ret
   880                          .ENDSECTION
   881                              
   882                          .SECTION
   883                          ;-----------------------------------------------------------------------------
   884                          ;  FUNCTION NAME: UART_Board_Write
   885                          ;
   886                          ;  DESCRIPTION:
   887                          ;     Send String of length X to serial port
   888                          ;-----------------------------------------------------------------------------
   889                          ;
   890                          ;  ARGUMENTS:
   891                          ;     Pointer to String
   892                          ;     [SP-5] Count of characters to send
   893                          ;     [SP-4] has MSB of string address
   894                          ;     [SP-3] has LSB of string address
   895                          ;
   896                          ;  RETURNS:
   897                          ;     none
   898                          ;
   899                          ;  SIDE EFFECTS:
   900                          ;    The A and X registers may be modified by this or future implementations
   901                          ;    of this function.  The same is true for all RAM page pointer registers in
   902                          ;    the Large Memory Model.  When necessary, it is the calling function's
   903                          ;    responsibility to perserve their values across calls to fastcall16 
   904                          ;    functions.
   905                          ;          
   906                          ;    Currently only the page pointer registers listed below are modified: 
   907                          ;          IDX_PP
   908                          ;
   909  FFFFFFFB                    CNT_LEN:    equ -5                               ; Length of data to send
   910  FFFFFFFC                    STR_MSB:    equ -4                               ; MSB pointer of string 
   911  FFFFFFFD                    STR_LSB:    equ -3                               ; LSB pointer of string 
   912                          
   913  2E49                     UART_Board_Write:
   914  2E49                    _UART_Board_Write:
   915                             RAM_PROLOGUE RAM_USE_CLASS_3
   916  2E49  62 D3 03             RAM_SETPAGE_IDX2STK                           ; Refer indexed addrs to the stack
   917  2E4C  4F                   mov   X, SP                                   ; Establish the frame pointer 
   918                          
   919  2E4D                    .NextByteLoop:
   920  2E4D  52 FB                mov   A, [X+CNT_LEN]                          ; End of the string?
   921  2E4F  A01A                 jz    .End_Write                              ;   Yes, prepare to exit
   922  2E51  7B FB                dec   [X+CNT_LEN]                             ; Decrement counter
   923                          
   924                             IF SYSTEM_LARGE_MEMORY_MODEL
   925  2E53  52 FC                mov   A, [X+STR_MSB]                          ; Load pointer to char to send
   926                             ENDIF
   927                          
   928  2E55  59 FD                mov   X, [X+STR_LSB]                          ; Load pointer to char to send
   929  2E57  60 D3                RAM_SETPAGE_IDX A                             ; switch index pages
   930  2E59  52 00                mov   A, [X]                                  ; Grab the data
   931                             InLinePutChar A                               ; Put data in empty TX buf reg
      + 2E5B                    ??0001:
      + 2E5B  49 3B 10          	tst	reg[59], 16
      + 2E5E  AFFC              	jz	??0001
      + 2E60  60 39             	mov	reg[57], a
   932  2E62  4F                   mov   X, SP                                   ; Recover frame pointer
   933  2E63  62 D3 03             RAM_SETPAGE_IDX2STK                           ; Prepare for stack access
   934  2E66  77 FD                inc   [X+STR_LSB]                             ; Point to next byte, but do not
   935  2E68  8FE4                 jmp   .NextByteLoop                           ;    cross RAM page boundary!
   936                          
   937  2E6A                    .End_Write:
   938                             RAM_EPILOGUE RAM_USE_CLASS_3
      + 2E6A  70 3F             	and	f, 0x3F
      + 2E6C  71 80             	or	f, 0x80
   939  2E6E  7F                   ret
   940                          .ENDSECTION
   941                              
   942                          
   943                          .SECTION
   944                          ;-----------------------------------------------------------------------------
   945                          ;  FUNCTION NAME: UART_Board_CWrite
   946                          ;
   947                          ;             WARNING WARNING NOT COMPLETE
   948                          ;
   949                          ;  DESCRIPTION:
   950                          ;     Send String of length X to serial port
   951                          ;-----------------------------------------------------------------------------
   952                          ;
   953                          ;  ARGUMENTS:
   954                          ;     [SP-4] MSB of Count of character to send
   955                          ;     [SP-3] LSB of Count of character to send
   956                          ;     [SP-2] has MSB of string address
   957                          ;     [SP-1] has LSB of string address
   958                          ;
   959                          ;  RETURNS:
   960                          ;     none
   961                          ;
   962                          ;  SIDE EFFECTS:
   963                          ;    The A and X registers may be modified by this or future implementations
   964                          ;    of this function.  The same is true for all RAM page pointer registers in
   965                          ;    the Large Memory Model.  When necessary, it is the calling function's
   966                          ;    responsibility to perserve their values across calls to fastcall16 
   967                          ;    functions.
   968                          ;
   969  FFFFFFFA                    CLEN_MSB:   equ -6           ; MSB Length of data to send
   970  FFFFFFFB                    CLEN_LSB:   equ -5           ; LSB Length of data to send
   971  FFFFFFFC                    CSTR_MSB:   equ -4           ; MSB pointer of string
   972  FFFFFFFD                    CSTR_LSB:   equ -3           ; LSB pointer of string
   973                          
   974  2E6F                     UART_Board_CWrite:
   975  2E6F                    _UART_Board_CWrite:
   976  2E6F  71 40                RAM_PROLOGUE RAM_USE_CLASS_2
   977  2E71  4F                   mov   X,SP
   978  2E72                    .CW_Loop:
   979  2E72  3D FA 00             cmp   [X+CLEN_MSB],0x00                  ; Check for zero counter
   980  2E75  B006                 jnz   .CW_WRITEIT
   981  2E77  3D FB 00             cmp   [X+CLEN_LSB],0x00
   982  2E7A  A01D                 jz    .End_CWrite                        ; Leave if done
   983                          
   984  2E7C                    .CW_WRITEIT:                                
   985  2E7C  10                   push  X                                  ; Save frame pointer
   986  2E7D  52 FC                mov   A,[X+CSTR_MSB]
   987  2E7F  59 FD                mov   X,[X+CSTR_LSB]
   988  2E81  28                   romx                                     ; Get character from ROM
   989                             InLinePutChar A                          ; Put data in empty TX buf reg
      + 2E82                    ??0002:
      + 2E82  49 3B 10          	tst	reg[59], 16
      + 2E85  AFFC              	jz	??0002
      + 2E87  60 39             	mov	reg[57], a
   990  2E89  20                   pop   X                                  ; Restore frame pointer
   991  2E8A  07 FD 01             add   [X+CSTR_LSB],1                     ; Increment the string pointer
   992  2E8D  0F FC 00             adc   [X+CSTR_MSB],0
   993  2E90  17 FB 01             sub   [X+CLEN_LSB],0x01                  ; Dec the counter
   994  2E93  1F FA 00             sbb   [X+CLEN_MSB],0x00
   995  2E96  8FDB                 jmp   .CW_Loop
   996                          
   997  2E98                    .End_CWrite:
   998                             RAM_EPILOGUE RAM_USE_CLASS_2
      + 2E98  70 3F             	and	f, 0x3F
      + 2E9A  71 80             	or	f, 0x80
   999  2E9C  7F                   ret
  1000                          .ENDSECTION
  1001                          
  1002                          
  1003                          .SECTION
  1004                          ;-----------------------------------------------------------------------------
  1005                          ;  FUNCTION NAME: UART_Board_CPutString
  1006                          ;
  1007                          ;  DESCRIPTION:
  1008                          ;     Send String out through UART TX port.
  1009                          ;-----------------------------------------------------------------------------
  1010                          ;
  1011                          ;  ARGUMENTS:
  1012                          ;     Pointer to String
  1013                          ;     A has MSB of string address
  1014                          ;     X has LSB of string address
  1015                          ;
  1016                          ;  RETURNS:
  1017                          ;     none
  1018                          ;
  1019                          ;  SIDE EFFECTS:
  1020                          ;    The A and X registers may be modified by this or future implementations
  1021                          ;    of this function.  The same is true for all RAM page pointer registers in
  1022                          ;    the Large Memory Model.  When necessary, it is the calling function's
  1023                          ;    responsibility to perserve their values across calls to fastcall16 
  1024                          ;    functions.
  1025                          ;
  1026  2E9D                     UART_Board_CPutString:
  1027  2E9D                    _UART_Board_CPutString:
  1028                             RAM_PROLOGUE RAM_USE_CLASS_1
  1029  2E9D  08                   push  A                                       ; Store ROM pointer
  1030  2E9E  10                   push  X
  1031  2E9F  28                   romx                                          ; Get character from ROM
  1032  2EA0  A00B                 jz    .End_CPutString
  1033  2EA2  9F58                 call  UART_Board_PutChar                      ; Print character
  1034  2EA4  20                   pop   X
  1035  2EA5  18                   pop   A
  1036  2EA6  75                   inc   X                                       ; Inc LSB of pointer
  1037  2EA7  DFF5                 jnc   UART_Board_CPutString                   ; Check for carry
  1038  2EA9  74                   inc   A                                       ; Inc MSB of pointer
  1039  2EAA  8FF2                 jmp   UART_Board_CPutString
  1040                          
  1041                          
  1042  2EAC                    .End_CPutString:
  1043  2EAC  38 FE                add   SP, -2
  1044                             RAM_EPILOGUE RAM_USE_CLASS_1
  1045  2EAE  7F                   ret
  1046                          .ENDSECTION
  1047                          
  1048                          
  1049                          .SECTION
  1050                          ;-----------------------------------------------------------------------------
  1051                          ;  FUNCTION NAME: UART_Board_PutCRLF
  1052                          ;
  1053                          ;  DESCRIPTION:
  1054                          ;     Send a CR and LF
  1055                          ;-----------------------------------------------------------------------------
  1056                          ;
  1057                          ;  ARGUMENTS:
  1058                          ;     none.
  1059                          ;
  1060                          ;  RETURNS:
  1061                          ;     none.
  1062                          ;
  1063                          ;  SIDE EFFECTS:
  1064                          ;    The A and X registers may be modified by this or future implementations
  1065                          ;    of this function.  The same is true for all RAM page pointer registers in
  1066                          ;    the Large Memory Model.  When necessary, it is the calling function's
  1067                          ;    responsibility to perserve their values across calls to fastcall16 
  1068                          ;    functions.
  1069                          ;
  1070  2EAF                     UART_Board_PutCRLF:
  1071  2EAF                    _UART_Board_PutCRLF:
  1072                             RAM_PROLOGUE RAM_USE_CLASS_1
  1073  2EAF  50 0D                mov  A,0x0D                        ; Send CR
  1074  2EB1  9F49                 call UART_Board_PutChar
  1075  2EB3  50 0A                mov  A,0x0A                        ; Send LF
  1076  2EB5  9F45                 call UART_Board_PutChar
  1077                             RAM_EPILOGUE RAM_USE_CLASS_1
  1078  2EB7  7F                   ret
HI-TECH Software Macro Assembler (PSoC MCU) V9.61
Symbol Table                                                                                               Thu Jul 09 11:34:30 2015
            _UART_Board_SendData 2D98         UART_Board_TX_CONTROL_REG 003B              _UART_Board_cGetChar 2E04  
          UART_Board_RX_INT_MASK 0080        UART_Board_TX_BUFFER_EMPTY 0010            UART_Board_RX_REG_FULL 0008  
              UART_Board_IntCntl 2DB7        UART_Board_RX_PARITY_ERROR 0080             _UART_Board_cReadChar 2E0C  
           _UART_Board_TxIntMode 2DA4               UART_Board_RX_ERROR 00E0                UART_Board_PutCRLF 2EAF  
                        CLEN_LSB FFFFFFFB                          CLEN_MSB FFFFFFFA          End_UART_Board_cReadChar 2E22  
              UART_Board_PutChar 2DFC            bUART_Board_ReadRxData 2D9E             _UART_Board_PutString 2E39  
           UART_Board_PutSHexInt 2DF5            UART_Board_TX_FUNC_REG 0038         _bUART_Board_ReadRxStatus 2DA1  
          UART_Board_TX_INT_MASK 0040                  _UART_Board_Stop 2D91         _bUART_Board_ReadTxStatus 2D9B  
                        CSTR_LSB FFFFFFFD                          CSTR_MSB FFFFFFFC           bfCONTROL_REG_START_BIT 0001  
           _UART_Board_iReadChar 2E23            _UART_Board_PutSHexInt 2DF5                            ??0000 2DFC  
                          ??0001 2E5B                            ??0002 2E82          End_UART_Board_iReadChar 2E38  
        UART_Board_bReadRxStatus 2DA1                     End_PutString 2E44               UART_Board_SendData 2D98  
             UART_Board_cGetChar 2E04          UART_Board_bReadTxStatus 2D9B   UART_Board_INT_MODE_TX_COMPLETE 0001  
         _bUART_Board_ReadRxData 2D9E                  UART_Board_Start 2D8A                  UART_Board_Write 2E49  
                          HITECH 0002            UART_Board_bReadRxData 2D9E                   FLAG_PGMODE_01b 0040  
                 FLAG_PGMODE_10b 0080                            IDX_PP 00D3           UART_Board_SetTxIntMode 2D78  
         UART_Board_RXBUF_ENABLE 0000            UART_Board_PutSHexByte 2DE2              UART_Board_EnableInt 2D6A  
           UART_Board_CPutString 2E9D          UART_Board_ENABLE_RX_INT 0001          UART_Board_ENABLE_TX_INT 0002  
               _UART_Board_Start 2D8A                 _UART_Board_Write 2E49            _UART_Board_CPutString 2E9D  
         _UART_Board_bReadRxData 2D9E          UART_Board_TX_BUFFER_REG 0039           _UART_Board_PutSHexByte 2DE2  
             _UART_Board_IntCntl 2DB7         SYSTEM_LARGE_MEMORY_MODEL 0001               _UART_Board_PutCRLF 2EAF  
               UART_Board_CWrite 2E6F               _UART_Board_PutChar 2DFC             UART_Board_RX_INT_REG 00E1  
          SYSTEM_MULTIPAGE_STACK 0000             UART_Board_RX_NO_DATA 0001          _UART_Board_SetTxIntMode 2D78  
     UART_Board_RX_FRAMING_ERROR 0020                         TOOLCHAIN 0002              UART_Board_cReadChar 2E0C  
            UART_Board_TxIntMode 2DA4                           CNT_LEN FFFFFFFB             UART_Board_TX_INT_REG 00E1  
                FLAG_PGMODE_MASK 00C0              UART_Board_PutString 2E39                   RAM_USE_CLASS_1 0001  
                 RAM_USE_CLASS_2 0002                   RAM_USE_CLASS_3 0004                   RAM_USE_CLASS_4 0008  
                 UART_Board_Stop 2D91                           STR_LSB FFFFFFFD                           STR_MSB FFFFFFFC  
            UART_Board_iReadChar 2E23             UART_Board_DisableInt 2D71          bUART_Board_ReadRxStatus 2DA1  
  bfFUNCTION_REG_TX_INT_MODE_BIT 0010          bUART_Board_ReadTxStatus 2D9B                _UART_Board_CWrite 2E6F  
       _UART_Board_bReadRxStatus 2DA1            _UART_Board_DisableInt 2D71         _UART_Board_bReadTxStatus 2D9B  
           _UART_Board_EnableInt 2D6A                 SYSTEM_STACK_PAGE 0003                     FLAG_XIO_MASK 0010  
        UART_Board_RX_BUFFER_REG 003E        SYSTEM_IDXPG_TRACKS_IDX_PP 0001        SYSTEM_IDXPG_TRACKS_STK_PP 0000  
          UART_Board_RX_COMPLETE 0008                UART_Board_HEX_STR 2DD2         UART_Board_RX_CONTROL_REG 003F  
HI-TECH Software Macro Assembler (PSoC MCU) V9.61
                                                                                                           Thu Jul 09 11:34:31 2015
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  FILENAME:   UART_Board.inc
     4                          ;;  Version: 5.3, Updated on 2013/5/19 at 10:44:49
     5                          ;;  Generated by PSoC Designer 5.4.2946
     6                          ;;
     7                          ;;  DESCRIPTION:  Assembler declarations for the UART user module.
     8                          ;;-----------------------------------------------------------------------------
     9                          ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
    10                          ;;*****************************************************************************
    11                          ;;*****************************************************************************
    12                          
    13                          ;--------------------------------------------------
    14                          ; Constants for UART_Board API's
    15                          ;--------------------------------------------------
    16                          
    17                          ;mask value for global int reg bit for TX instance
    18  0040                    UART_Board_TX_INT_MASK:                      equ 0x40
    19  00E1                    UART_Board_TX_INT_REG:                       equ 0x0e1  ;TX interrupt address
    20  0080                    UART_Board_RX_INT_MASK:                      equ 0x80  ;mask value for global int reg bit for RX ins
                                tance
    21  00E1                    UART_Board_RX_INT_REG:                       equ 0x0e1  ;RX interrupt address
    22                          
    23  0000                    UART_Board_RXBUF_ENABLE:                     equ 0
    24                          
    25                          ; Interrupt control masks
    26  0001                    UART_Board_ENABLE_RX_INT:                    equ 0x01
    27  0000                    UART_Board_DISABLE_RX_INT:                   equ 0x00
    28  0002                    UART_Board_ENABLE_TX_INT:                    equ 0x02
    29  0000                    UART_Board_DISABLE_TX_INT:                   equ 0x00
    30                          
    31  0000                    UART_Board_INT_MODE_TX_REG_EMPTY:            equ 0x00
    32  0001                    UART_Board_INT_MODE_TX_COMPLETE:             equ 0x01
    33                          
    34  0020                    UART_Board_RX_IGNORE_BELOW:                  equ 0x20
    35  0010                    UART_Board_RX_BUFFER_SIZE:                   equ 0x10
    36  000D                    UART_Board_CMD_TERM:                         equ 0xd
    37  0020                    UART_Board_DELIMITER:                        equ 0x20
    38  0000                    UART_Board_BACKSPACE_ENABLE:                 equ 0x0
    39                          
    40                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    41                          ;       WARNING WARNING WARNING
    42                          ; The following equates are for backwards
    43                          ; compatibility only and should not be used
    44                          ; for new designs.
    45                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    46                          
    47                          ;------------------------------------
    48                          ;  Parity masks
    49                          ;------------------------------------
    50  0000                    UART_PARITY_NONE:       equ   00h
    51  0002                    UART_PARITY_EVEN:       equ   02h
    52  0006                    UART_PARITY_ODD:        equ   06h
    53                          
    54                          ;------------------------------------
    55                          ;  TX Status Register masks
    56                          ;------------------------------------
    57  0020                    UART_TX_COMPLETE:       equ   20h
    58  0010                    UART_TX_BUFFER_EMPTY:   equ   10h
    59                          
    60                          ;------------------------------------
    61                          ;  RX Status Register masks
    62                          ;------------------------------------
    63  0010                    UART_RX_ACTIVE:         equ   10h
    64  0008                    UART_RX_COMPLETE:       equ   08h
    65  0080                    UART_RX_PARITY_ERROR:   equ   80h
    66  0040                    UART_RX_OVERRUN_ERROR:  equ   40h
    67  0020                    UART_RX_FRAMING_ERROR:  equ   20h
    68  00E0                    UART_RX_NO_ERROR:       equ   E0h
    69                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    70                          ;             END WARNING
    71                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    72                          
    73                          
    74                          
    75                          ;------------------------------------
    76                          ;  Parity masks
    77                          ;------------------------------------
    78  0000                    UART_Board_PARITY_NONE:                 equ   00h
    79  0002                    UART_Board_PARITY_EVEN:                 equ   02h
    80  0006                    UART_Board_PARITY_ODD:                  equ   06h
    81                          
    82                          ;------------------------------------
    83                          ;  TX Status Register masks
    84                          ;------------------------------------
    85  0020                    UART_Board_TX_COMPLETE:                 equ   20h
    86  0010                    UART_Board_TX_BUFFER_EMPTY:             equ   10h
    87                          
    88                          ;------------------------------------
    89                          ;  RX Status Register masks
    90                          ;------------------------------------
    91  0010                    UART_Board_RX_ACTIVE:                   equ   10h
    92  0008                    UART_Board_RX_COMPLETE:                 equ   08h
    93  0008                    UART_Board_RX_REG_FULL:                 equ   08h
    94  0080                    UART_Board_RX_PARITY_ERROR:             equ   80h
    95  0040                    UART_Board_RX_OVERRUN_ERROR:            equ   40h
    96  0020                    UART_Board_RX_FRAMING_ERROR:            equ   20h
    97  00E0                    UART_Board_RX_ERROR:                    equ   E0h
    98  0001                    UART_Board_RX_ENABLE:                   equ   01h
    99                          
   100  00F0                    UART_Board_RX_BUF_ERROR:                equ   F0h  ; Mask for any Rx that may occur.
   101  0010                    UART_Board_RX_BUF_OVERRUN:              equ   10h  ; This indicates the software buffer has
   102                                                                                  ; been over run.
   103  0001                    UART_Board_RX_BUF_CMDTERM:              equ   01h  ; Command terminator has been received.
   104                          
   105  0001                    UART_Board_RX_NO_DATA:                  equ   01h
   106  00E0                    UART_Board_RX_NO_ERROR:                 equ   E0h
   107                          
   108                          
   109                          ;--------------------------------------------------
   110                          ; Registers Address Constants for UART_Board
   111                          ;--------------------------------------------------
   112                          ;---------------------------------
   113                          ;  Registers used by TX
   114                          ;---------------------------------
   115  003B                    UART_Board_TX_CONTROL_REG:  equ 3bh            ; Control register
   116  0038                    UART_Board_TX_SHIFT_REG:    equ 38h               ; TX Shift Register register
   117  0039                    UART_Board_TX_BUFFER_REG:   equ 39h               ; TX Buffer Register
   118  0038                    UART_Board_TX_FUNC_REG: equ 38h         ; Function register
   119  0039                    UART_Board_TX_INPUT_REG:    equ 39h            ; Input register
   120  003A                    UART_Board_TX_OUTPUT_REG:   equ 3ah           ; Output register
   121                          
   122                          ;---------------------------------
   123                          ;  Registers used by RX
   124                          ;---------------------------------
   125  003F                    UART_Board_RX_CONTROL_REG:  equ 3fh            ; Control register
   126  003C                    UART_Board_RX_SHIFT_REG:    equ 3ch               ; RX Shift Register register
   127  003E                    UART_Board_RX_BUFFER_REG:   equ 3eh               ; RX Buffer Register
   128  003C                    UART_Board_RX_FUNC_REG: equ 3ch         ; Function register
   129  003D                    UART_Board_RX_INPUT_REG:    equ 3dh            ; Input register
   130                          UART_Board_RX_OUTPUT_REG:   equ 3eh           ; Output register
      + 003E                    UART_Board_RX_OUTPUT_REG	equ	62
      + 3D73                    ; end of file UART_Board.inc
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;
     4                          ;;       FILENAME: Memory.inc
     5                          ;;
     6                          ;;    DESCRIPTION: Memory Model and Stack Parameter Definitions for 
     7                          ;;                 CY8C22045 PSoC devices.
     8                          ;;
     9                          ;;  LAST MODIFIED: August 17, 2004
    10                          ;;
    11                          ;;-----------------------------------------------------------------------------
    12                          ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
    13                          ;;*****************************************************************************
    14                          ;;*****************************************************************************
    15                          ;
    16                          ;
    17                          ;  ******** Define Memory Model and Stack parameters ********
    18                          ;
    19  0001                    IMAGECRAFT: equ 1   
    20  0002                    HITECH: equ 2   
    21  0002                    TOOLCHAIN: equ HITECH   
    22  0001                    SYSTEM_LARGE_MEMORY_MODEL: equ 1   
    23  0000                    SYSTEM_SMALL_MEMORY_MODEL: equ 0   
    24  0003                    SYSTEM_STACK_PAGE: equ 3   
    25  0000                    SYSTEM_STACK_PAGE_OFFSET: equ 0   
    26  0002                    SYSTEM_TOOLS: equ 2   
    27  0000                    SYSTEM_IDXPG_TRACKS_STK_PP: equ 0   
    28  0001                    SYSTEM_IDXPG_TRACKS_IDX_PP: equ 1   
    29  0000                    SYSTEM_MULTIPAGE_STACK: equ 0 
    30                          
    31                          
    32                          ;  ******* Function Class Definitions *******
    33                          ;
    34                          ;  These definitions are used to describe RAM access patterns. They provide
    35                          ;  documentation and they control prologue and epilogue macros that perform
    36                          ;  the necessary housekeeping functions for large memory model devices like
    37                          ;  the CY8C22045.
    38                          
    39  0001                    RAM_USE_CLASS_1:               equ 1   ; PUSH, POP & I/O access
    40  0002                    RAM_USE_CLASS_2:               equ 2   ; Indexed address mode on stack page
    41  0004                    RAM_USE_CLASS_3:               equ 4   ; Indexed address mode to any page
    42  0008                    RAM_USE_CLASS_4:               equ 8   ; Direct/Indirect address mode access
    43                          
    44                          ; ******* Hi Tech Specific *******
    45                          ; Turn on the expansion of all macros by default
    46                          IF (TOOLCHAIN & HITECH)
    47                          OPT EXPAND
    48                          ENDIF
    49                          ; ******* Page Pointer Manipulation Macros *******
    50                          ;
    51                          ;  ******* Page Pointer Manipulation Macros *******
    52                          ;
    53                          ;  Most of the following macros are conditionally compiled so they only
    54                          ;  produce code if the large memory model is selected.
    55                          
    56                             ;-----------------------------------------------
    57                             ;  Set Stack Page Macro
    58                             ;-----------------------------------------------
    59                             ;
    60                             ;  DESC: Modify STK_PP in the large or small memory Models.
    61                             ;
    62                             ; INPUT: Constant (e.g., SYSTEM_STACK_PAGE) that specifies the RAM page on
    63                             ;        which stack operations like PUSH and POP store and retrieve their
    64                             ;        data
    65                             ;
    66                             ;  COST: 8 instruction cycles (in LMM only)
    67                          
    68                             macro RAM_SETPAGE_STK( PG_NUMBER )
    69                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    70                                mov reg[STK_PP], @PG_NUMBER
    71                             ENDIF
    72  3D73                       endm
    73                          
    74                             ;-----------------------------------------------
    75                             ;  Set Current Page Macro
    76                             ;-----------------------------------------------
    77                             ;
    78                             ;  DESC: Modify CUR_PP in the large or small memory Models.
    79                             ;
    80                             ; INPUT: Constant value (e.g., >bFoo) for the RAM page number used in
    81                             ;        calculation of effective direct-mode address operands.
    82                             ;
    83                             ;  COST: 8 instruction cycles (in LMM only)
    84                          
    85                             macro RAM_SETPAGE_CUR( PG_NUMBER )
    86                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    87                                mov reg[CUR_PP], @PG_NUMBER
    88                             ENDIF
    89  3D73                       endm
    90                          
    91                             ;-----------------------------------------------
    92                             ;  Set Index Page Macro
    93                             ;-----------------------------------------------
    94                             ;
    95                             ;  DESC: Modify IDX_PP in the large or small emory Models.
    96                             ;
    97                             ; INPUT: Constant value (e.g., >caFoo) for the RAM page number used in
    98                             ;         calculation of effective index-mode address operands.
    99                             ;
   100                             ;  COST: 8 instruction cycles (in LMM only)
   101                          
   102                             macro RAM_SETPAGE_IDX( PG_NUMBER )
   103                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   104                                mov reg[IDX_PP], @PG_NUMBER
   105                             ENDIF
   106  3D73                       endm
   107                          
   108                             ;-----------------------------------------------
   109                             ;  Set MVI Read Page Macro
   110                             ;-----------------------------------------------
   111                             ;
   112                             ;  DESC: Modify MVR_PP in the large or small memory Models.
   113                             ;
   114                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   115                             ;        calculation of indirect address operands used in the
   116                             ;        "mvi A, [pFoo]" instructions.
   117                             ;
   118                             ;  COST: 8 instruction cycles (in LMM only)
   119                          
   120                             macro RAM_SETPAGE_MVR( PG_NUMBER )
   121                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   122                                mov reg[MVR_PP], @PG_NUMBER
   123                             ENDIF
   124  3D73                       endm
   125                          
   126                             ;-----------------------------------------------
   127                             ;  Set MVI Write Page Macro
   128                             ;-----------------------------------------------
   129                             ;
   130                             ;  DESC: Modify MVW_PP in the large or small memory Models.
   131                             ;
   132                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   133                             ;        calculation of indirect address operands used in the
   134                             ;        "mvi [pFoo], A" instructions.
   135                             ;
   136                             ;  COST: 8 instruction cycles (in LMM only)
   137                          
   138                             macro RAM_SETPAGE_MVW( PG_NUMBER )
   139                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   140                                mov reg[MVW_PP], @PG_NUMBER
   141                             ENDIF
   142  3D73                       endm
   143                          
   144                             ;-----------------------------------------------
   145                             ;  Force Index Page Pointer to Stack Page
   146                             ;-----------------------------------------------
   147                             ;
   148                             ;  DESC: Map index-mode operands onto the stack page by modifying IDX_PP.
   149                             ;        See also RAM_LOCK_INDEX_TO_STACKPAGE.
   150                             ;
   151                             ; INPUT: None
   152                             ;
   153                             ;  COST: 8 instruction cycles (in LMM only)
   154                          
   155                             macro RAM_SETPAGE_IDX2STK
   156                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   157                                IF ( SYSTEM_MULTIPAGE_STACK )
   158                                   mov   A, reg[STK_PP]
   159                                   mov   reg[IDX_PP], A
   160                                ELSE
   161                                   RAM_SETPAGE_IDX SYSTEM_STACK_PAGE
   162                                ENDIF
   163                             ENDIF
   164  3D73                       endm
   165                          
   166                             ;-----------------------------------------------
   167                             ;  Change Memory Mode
   168                             ;-----------------------------------------------
   169                             ;
   170                             ;  DESC: Modify FLAG_PAGEMODE bits in the large and small memory Models.
   171                             ;
   172                             ; INPUT: Constant value for PGMODE bitfield of CPU Flag register, F.
   173                             ;        See FLAG_PGMODE_{x} constants in M8C.INC.
   174                             ;
   175                             ;  COST: 8 instruction cycles (in LMM only)
   176                          
   177                             macro RAM_CHANGE_PAGE_MODE( MODE )
   178                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   179                                and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
   180                                or    F,  FLAG_PGMODE_MASK & @MODE
   181                             ENDIF
   182  3D73                       endm
   183                          
   184                             ;-----------------------------------------------
   185                             ;  Set Large Memory Model Native Paging Mode
   186                             ;-----------------------------------------------
   187                             ;
   188                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   189                             ;        paging mode *IFF* a simple "OR" is guaranteed to work---for
   190                             ;        example, in an ISR, when the PGMODE bits have been cleared
   191                             ;        to zero. If a simple "OR" is not guaranteed to work, use
   192                             ;        the slower RAM_RESTORE_NATIVE_PAGING instead.
   193                             ;
   194                             ; INPUT: none
   195                             ;
   196                             ;  COST: 4 instruction cycles (in LMM only)
   197                          
   198                             macro RAM_SET_NATIVE_PAGING
   199                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   200                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   201                                or    F,  FLAG_PGMODE_11b            ; LMM w/ IndexPage<==>StackPage
   202                             ENDIF ;  PGMODE LOCKED
   203                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   204                                or    F,  FLAG_PGMODE_10b            ; LMM with independent IndexPage
   205                             ENDIF ; PGMODE FREE
   206                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   207  3D73                       endm
   208                          
   209                             ;-----------------------------------------------
   210                             ; Restore Large Memory Model Native Paging Mode
   211                             ;-----------------------------------------------
   212                             ;
   213                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   214                             ;        paging mode. Always works because it clears the PGMODE bits
   215                             ;        before OR-ing in the new ones. See RAM_RESTORE_NATIVE_PAGING
   216                             ;        for a faster method.
   217                             ;
   218                             ; INPUT: none
   219                             ;
   220                             ;  COST: 8 instruction cycles (in LMM only)
   221                          
   222                             macro RAM_RESTORE_NATIVE_PAGING
   223                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   224                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   225                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_11b ; LMM w/ IndexPage<==>StackPage
   226                             ENDIF ;  PGMODE LOCKED
   227                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   228                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b ; LMM with independent IndexPage
   229                             ENDIF ; PGMODE FREE
   230                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   231  3D73                       endm
   232                          
   233                             ;-----------------------------------------------
   234                             ; Force indexed addr mode operands to Stack Pg
   235                             ;-----------------------------------------------
   236                             ;
   237                             ;  DESC: Force instructions that use indexed address mode to reference the
   238                             ;        stack page (as defined by STK_PP). This macro sets the "Indexed
   239                             ;        Stack Mode" bit (LSB) of the PGMODE bit field in the CPU Flag
   240                             ;        register, F. (See also RAM_SETPAGE_IDX2STK, above.)
   241                             ;
   242                             ; INPUT: none
   243                             ;
   244                             ;  COST: 4 instruction cycles (in LMM only)
   245                          
   246                             macro RAM_X_POINTS_TO_STACKPAGE
   247                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   248                                or   F, FLAG_PGMODE_01b
   249                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   250  3D73                       endm
   251                          
   252                             ;-----------------------------------------------
   253                             ;  Force indexed addr mode operands to Index Pg
   254                             ;-----------------------------------------------
   255                             ;
   256                             ;  DESC: Permit instructions that use indexed address mode to reference page
   257                             ;        zero or the page pointed to by the IDX_PP register, depending on the
   258                             ;        setting of the MSb (or "Direct Page Mode" bit) of the PGMODE bits
   259                             ;        in the CPU Flag register, F. (This macro clears the PGMODE LSb.)
   260                             ;
   261                             ; INPUT: none
   262                             ;
   263                             ;  COST: 4 instruction cycles (in LMM only)
   264                          
   265                             macro RAM_X_POINTS_TO_INDEXPAGE
   266                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   267                                and  F, ~FLAG_PGMODE_01b
   268                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   269  3D73                       endm
   270                          
   271                             ;-----------------------------------------------
   272                             ;  Function Prologue
   273                             ;-----------------------------------------------
   274                             ;
   275                             ;  Prologue for functions that run in the LMM and SMM.
   276                             ;
   277                          
   278                             macro RAM_PROLOGUE( ACTUAL_CLASS )
   279                          
   280                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   281                             ; Nothing to do
   282                             ENDIF ; RAM_USE_CLASS_1
   283                          
   284                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   285                                IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   286                                   RAM_X_POINTS_TO_STACKPAGE         ; exit native paging mode!
   287                                ENDIF
   288                             ENDIF ; RAM_USE_CLASS_2
   289                          
   290                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   291                                IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   292                                   RAM_X_POINTS_TO_INDEXPAGE         ; exit native paging mode!
   293                                ENDIF
   294                             ENDIF ; RAM_USE_CLASS_3
   295                          
   296                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   297                             ; Nothing to do
   298                             ENDIF ; RAM_USE_CLASS_4
   299                          
   300  3D73                       endm
   301                          
   302                             ;-----------------------------------------------
   303                             ;  Function Epilogue
   304                             ;-----------------------------------------------
   305                             ;
   306                             ;  Prologue for functions that run in the LMM and SMM.
   307                             ;
   308                          
   309                             macro RAM_EPILOGUE( ACTUAL_CLASS )
   310                          
   311                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   312                             ; Nothing to do
   313                             ENDIF ; RAM_USE_CLASS_1
   314                          
   315                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   316                                RAM_RESTORE_NATIVE_PAGING
   317                             ENDIF ; RAM_USE_CLASS_2
   318                          
   319                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   320                                RAM_RESTORE_NATIVE_PAGING
   321                             ENDIF ; RAM_USE_CLASS_3
   322                          
   323                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   324                             ; Nothing to do
   325                             ENDIF ; RAM_USE_CLASS_4
   326                          
   327  3D73                       endm
   328                          
   329                             ;-----------------------------------------------
   330                             ;  Preserve Register
   331                             ;-----------------------------------------------
   332                             ;
   333                             ;  DESC: Preserve a register value on the stack
   334                             ;
   335                             ; INPUT: Name or address of register in I/O Space
   336                             ;        The I/O bank is an implicit parameter. That is, this function will
   337                             ;        Access the I/O bank currently specified by the CPU Flag register.
   338                             ;
   339                             ;  USES: CPU 'A' register
   340                             ;
   341                             ;  COST: 9 instruction cycles
   342                          
   343                             macro REG_PRESERVE( IOReg )
   344                             mov   A, reg[ @IOReg ]
   345                             push  A
   346  3D73                       endm
   347                          
   348                             ;-----------------------------------------------
   349                             ;  Restore Register
   350                             ;-----------------------------------------------
   351                             ;
   352                             ;  DESC: Restore a register value from the stack
   353                             ;
   354                             ; INPUT: Name or address of register in I/O Space
   355                             ;        The I/O bank is an implicit parameter. That is, this function will
   356                             ;        Access the I/O bank currently specified by the CPU Flag register.
   357                             ;
   358                             ;  USES: CPU 'A' register
   359                             ;
   360                             ;  COST: 10 instruction cycles
   361                          
   362                             macro REG_RESTORE( IOReg )
   363                             pop   A
   364                             mov   reg[ @IOReg ], A
   365  3D73                       endm
   366                          
   367                             ;-----------------------------------------------
   368                             ;  Preserve Volatile Page Pointer Registers
   369                             ;-----------------------------------------------
   370                             ;
   371                             ;  DESC: Invoked by ISRs before switching to the LMM mode and calling
   372                             ;        functions that require on it.
   373                             ;
   374                             ; INPUT: none
   375                             ;
   376                             ;  USES: CPU 'A' register
   377                             ;
   378                             ;  COST: 45 instruction cycles (in LMM only)
   379                          
   380                             macro ISR_PRESERVE_PAGE_POINTERS
   381                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   382                                REG_PRESERVE CUR_PP
   383                                REG_PRESERVE IDX_PP
   384                                REG_PRESERVE MVR_PP
   385                                REG_PRESERVE MVW_PP
   386                             ENDIF
   387  3D73                       endm
   388                          
   389                             ;-----------------------------------------------
   390                             ;  Restore Volatile Page Pointer Registers
   391                             ;-----------------------------------------------
   392                             ;
   393                             ;  DESC: Undo for RAM_PRESERVE_PAGE_POINTERS macro. Invoked by ISRs after
   394                             ;        calling functions that run in the LMM mode and before executing
   395                             ;        the RETI instruction.
   396                             ;
   397                             ; INPUT: none
   398                             ;
   399                             ;  USES: CPU 'A' register
   400                             ;
   401                             ;  COST: 50 instruction cycles (in LMM only)
   402                          
   403                             macro ISR_RESTORE_PAGE_POINTERS
   404                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   405                                REG_RESTORE MVW_PP
   406                                REG_RESTORE MVR_PP
   407                                REG_RESTORE IDX_PP
   408                                REG_RESTORE CUR_PP
   409                             ENDIF
   410                             endm
      + 3D73                    
      + 3D73                    ; end of file Memory.inc
     1                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     2                          ;;;
     3                          ;;;  M8C.INC -- Microcontroller Device System Declarations
     4                          ;;;
     5                          ;;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
     6                          ;;;
     7                          ;;;  This file provides address constants, bit field masks and a set of macro
     8                          ;;;  facilities for the Cypress Semiconductor CY8C22045 Microcontroller devices.
     9                          ;;;
    10                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    11                          
    12                          ;;=============================================================================
    13                          ;; Definition of abbreviations used in the descriptions below
    14                          ;;  (RW)   The register or bit supports reads and writes
    15                          ;;  (W)    The register or bit is write-only
    16                          ;;  (R)    The register or bit is read-only
    17                          ;;  (#)    Access to the register is bit specific (see the family datasheet)
    18                          ;;  (RC)   The register or bit can be read, but writing a 0 will clear it,
    19                          ;;         writing a 1 will have no effect.
    20                          ;;=============================================================================
    21                          
    22                          ;;=============================================================================
    23                          ;;      System Registers
    24                          ;;=============================================================================
    25                          
    26                          ;----------------------------
    27                          ;  Flag Register Bit Fields
    28                          ;----------------------------
    29  00C0                    FLAG_PGMODE_MASK:  equ 0C0h     ; Paging control for > 256 bytes of RAM
    30  0000                    FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
    31  0040                    FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
    32  0080                    FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
    33  00C0                    FLAG_PGMODE_3:     equ 0C0h       ; Direct to CUR_PP page, indexed to STK_PP page
    34  0000                    FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
    35  0040                    FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
    36  0080                    FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
    37  00C0                    FLAG_PGMODE_11b:   equ 0C0h       ; Same as PGMODE_3
    38  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    39  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    40  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    41  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    42  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    43                          
    44                          
    45                          ;;=============================================================================
    46                          ;;      Register Space, Bank 0
    47                          ;;=============================================================================
    48                          
    49                          ;------------------------------------------------
    50                          ;  Port Registers
    51                          ;  Note: Also see this address range in Bank 1.
    52                          ;------------------------------------------------
    53                          ; Port 0
    54  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    55  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    56  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    57  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    58                          ; Port 1
    59  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    60  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    61  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    62  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    63                          ; Port 2
    64  0008                    PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
    65  0009                    PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
    66  000A                    PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
    67  000B                    PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
    68                          ; Port 3
    69  000C                    PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
    70  000D                    PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
    71  000E                    PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
    72  000F                    PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
    73                          ; Port 4
    74  0010                    PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
    75  0011                    PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
    76  0012                    PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
    77  0013                    PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
    78                          
    79                          ;------------------------------------------------
    80                          ;  Digital PSoC(tm) block Registers
    81                          ;  Note: Also see this address range in Bank 1.
    82                          ;------------------------------------------------
    83                          ; Digital PSoC block 00, Basic Type C
    84  0020                    DBC00DR0:     equ 20h          ; data register 0                          (#)
    85  0021                    DBC00DR1:     equ 21h          ; data register 1                          (W)
    86  0022                    DBC00DR2:     equ 22h          ; data register 2                          (RW)
    87  0023                    DBC00CR0:     equ 23h          ; control & status register 0              (#)
    88                          
    89                          ; Digital PSoC block 01, Basic Type C
    90  0024                    DBC01DR0:     equ 24h          ; data register 0                          (#)
    91  0025                    DBC01DR1:     equ 25h          ; data register 1                          (W)
    92  0026                    DBC01DR2:     equ 26h          ; data register 2                          (RW)
    93  0027                    DBC01CR0:     equ 27h          ; control & status register 0              (#)
    94                          
    95                          ; Digital PSoC block 02, Communications Type C
    96  0028                    DCC02DR0:     equ 28h          ; data register 0                          (#)
    97  0029                    DCC02DR1:     equ 29h          ; data register 1                          (W)
    98  002A                    DCC02DR2:     equ 2Ah          ; data register 2                          (RW)
    99  002B                    DCC02CR0:     equ 2Bh          ; control & status register 0              (#)
   100                          
   101                          ; Digital PSoC block 03, Communications Type C
   102  002C                    DCC03DR0:     equ 2Ch          ; data register 0                          (#)
   103  002D                    DCC03DR1:     equ 2Dh          ; data register 1                          (W)
   104  002E                    DCC03DR2:     equ 2Eh          ; data register 2                          (RW)
   105  002F                    DCC03CR0:     equ 2Fh          ; control & status register 0              (#)
   106                          
   107                          ; Digital PSoC block 10, Basic Type C
   108  0030                    DBC10DR0:     equ 30h          ; data register 0                          (#)
   109  0031                    DBC10DR1:     equ 31h          ; data register 1                          (W)
   110  0032                    DBC10DR2:     equ 32h          ; data register 2                          (RW)
   111  0033                    DBC10CR0:     equ 33h          ; control & status register 0              (#)
   112                          
   113                          ; Digital PSoC block 11, Basic Type C
   114  0034                    DBC11DR0:     equ 34h          ; data register 0                          (#)
   115  0035                    DBC11DR1:     equ 35h          ; data register 1                          (W)
   116  0036                    DBC11DR2:     equ 36h          ; data register 2                          (RW)
   117  0037                    DBC11CR0:     equ 37h          ; control & status register 0              (#)
   118                          
   119                          ; Digital PSoC block 12, Communications Type C
   120  0038                    DCC12DR0:     equ 38h          ; data register 0                          (#)
   121  0039                    DCC12DR1:     equ 39h          ; data register 1                          (W)
   122  003A                    DCC12DR2:     equ 3Ah          ; data register 2                          (RW)
   123  003B                    DCC12CR0:     equ 3Bh          ; control & status register 0              (#)
   124                          
   125                          ; Digital PSoC block 13, Communications Type C
   126  003C                    DCC13DR0:     equ 3Ch          ; data register 0                          (#)
   127  003D                    DCC13DR1:     equ 3Dh          ; data register 1                          (W)
   128  003E                    DCC13DR2:     equ 3Eh          ; data register 2                          (RW)
   129  003F                    DCC13CR0:     equ 3Fh          ; control & status register 0              (#)
   130                          
   131                          ;-------------------------------------
   132                          ;  Analog Control Registers
   133                          ;-------------------------------------
   134  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
   135  00C0                    AMX_IN_ACI3:          equ C0h    ; MASK: column 3 input mux
   136  0030                    AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
   137  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
   138  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
   139                          
   140  0061                    AMUX_CFG:      equ 61h          ; Analog MUX Configuration
   141  0030                    AMUX_CFG_INTCAP:       equ 30h    ;
   142  000E                    AMUX_CFG_MUXCLK:  	  equ 0Eh	 ;
   143  0001                    AMUX_CFG_EN:		  	  equ 01h	 ;
   144                          
   145                          ; old declarations DO NOT USE
   146  0061                    AMUXCFG:      equ 61h          ; Analog MUX Configuration
   147  0030                    AMUXCFG_INTCAP:       equ 30h    ;
   148  000E                    AMUXCFG_MUXCLK:  	  equ 0Eh	 ;
   149  0001                    AMUXCFG_EN:		  	  equ 01h	 ;
   150                          
   151  0062                    PWM_CR:       equ 62h          ; Pulse-Width Modulator Control
   152  0038                    PWM_CR_HIGH:          equ 38h    ; MASK: PWM high time
   153  0006                    PWM_CR_LOW:           equ 06h	 ; MASK: PWM low time
   154  0001                    PWM_CR_EN:            equ 01h	 ; MASK: Enable/Disable PWM function
   155                          
   156  0063                    ARF_CR:       equ 63h          ; Analog Reference Control
   157                          
   158  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus Register           (#)
   159  0080                    CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
   160  0040                    CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
   161  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
   162  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
   163  0008                    CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
   164  0004                    CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
   165  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
   166  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   167                          
   168  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   169+ 0020                    CMP_CR1_CLDIS1:       equ 20h    ; MASK: Column 1 comparator output latch
   170+ 0010                    CMP_CR1_CLDIS0:	      equ 10h    ; MASK: Column 0 comparator output latch
   171                          
   172  0068                    ADC0_CR:      equ 68h          ; Analog Column 0 Configuration
   173  0080                    ADC0_CR_CMPST:        equ 80h    ;
   174  0040                    ADC0_CR_LOREN:        equ 40h    ;
   175  0020                    ADC0_CR_SHEN:         equ 20h    ;
   176  0008                    ADC0_CR_CBSRC:        equ 08h    ;
   177  0004                    ADC0_CR_ADCM:         equ 04h    ;
   178  0001                    ADC0_CR_EN:	          equ 01h    ;
   179                          
   180  0069                    ADC1_CR:      equ 69h          ; Analog Column 1 Configuration
   181  0080                    ADC1_CR_CMPST:        equ 80h    ;
   182  0040                    ADC1_CR_LOREN:        equ 40h    ;
   183  0020                    ADC1_CR_SHEN:         equ 20h    ;
   184  0008                    ADC1_CR_CBSRC:        equ 08h    ;
   185  0004                    ADC1_CR_ADCM:         equ 04h    ;
   186  0001                    ADC1_CR_EN:	          equ 01h    ;
   187                          
   188                          ; Continuous Time PSoC block Type E Row 0 Col 0
   189  0072                    ACE00CR1:     equ 72h          ; Control register 1                       (RW)
   190  0073                    ACE00CR2:     equ 73h          ; Control register 2                       (RW)
   191                          
   192                          ; Continuous Time PSoC block Type E Row 0 Col 1
   193  0076                    ACE01CR1:     equ 76h          ; Control register 1                       (RW)
   194  0077                    ACE01CR2:     equ 77h          ; Control register 2                       (RW)
   195                          
   196                          ; Switched Cap PSoC blockType E Row 1 Col 0
   197  0080                    ASE10CR0:     equ 80h          ; Control register 0                       (RW)
   198                          
   199                          ; Switched Cap PSoC blockType E Row 1 Col 1
   200  0084                    ASE11CR0:     equ 84h          ; Control register 0                       (RW)
   201                          
   202                          ;-----------------------------------------------
   203                          ;  Global General Purpose Data Registers
   204                          ;-----------------------------------------------
   205  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   206  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   207  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   208  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   209                          
   210                          ;------------------------------------------------
   211                          ;  Row Digital Interconnects
   212                          ;
   213                          ;  Note: the following registers are mapped into
   214                          ;  both register bank 0 AND register bank 1.
   215                          ;------------------------------------------------
   216                          
   217  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   218  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   219  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   220  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   221  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   222  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   223  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   224                          
   225  00B8                    RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
   226  00B9                    RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
   227  00BA                    RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
   228  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   229  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   230  00BD                    RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
   231  00BE                    RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
   232                          
   233                          ;-----------------------------------------------
   234                          ;  Ram Page Pointers
   235                          ;-----------------------------------------------
   236  00D0                    CUR_PP:      equ 0D0h           ; Current   Page Pointer
   237  00D1                    STK_PP:      equ 0D1h           ; Stack     Page Pointer
   238  00D3                    IDX_PP:      equ 0D3h           ; Index     Page Pointer
   239  00D4                    MVR_PP:      equ 0D4h           ; MVI Read  Page Pointer
   240  00D5                    MVW_PP:      equ 0D5h           ; MVI Write Page Pointer
   241                          
   242                          ;------------------------------------------------
   243                          ;  I2C Configuration Registers
   244                          ;------------------------------------------------
   245  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   246  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   247  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   248  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   249  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   250  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   251  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   252  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   253  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   254  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   255                          
   256  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   257  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   258  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   259  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   260  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   261  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   262  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   263  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   264  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   265                          
   266  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   267                          
   268  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   269  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   270  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   271  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   272  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   273                          
   274                          ;------------------------------------------------
   275                          ;  System and Global Resource Registers
   276                          ;------------------------------------------------
   277  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   278                                                         ; Use INT_MSK0 bit field masks
   279  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   280                                                         ; Use INT_MSK1 bit field masks
   281  00DC                    INT_CLR2:     equ 0DCh          ; Interrupt Clear Register 2               (RW)
   282                                                         ; Use INT_MSK2 bit field masks
   283  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   284                                                         ; Use INT_MSK3 bit field masks
   285                          
   286  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   287  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   288  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   289                          
   290  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   291  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   292  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   293  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   294  0010                    INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
   295  0008                    INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
   296  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   297  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   298  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   299                          
   300  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   301  0080                    INT_MSK1_DCC13:            equ 80h ; MASK: enable/disable DCC13 block interrupt
   302  0040                    INT_MSK1_DCC12:            equ 40h ; MASK: enable/disable DCC12 block interrupt
   303  0020                    INT_MSK1_DBC11:            equ 20h ; MASK: enable/disable DBC11 block interrupt
   304  0010                    INT_MSK1_DBC10:            equ 10h ; MASK: enable/disable DBC10 block interrupt
   305  0008                    INT_MSK1_DCC03:            equ 08h ; MASK: enable/disable DCC03 block interrupt
   306  0004                    INT_MSK1_DCC02:            equ 04h ; MASK: enable/disable DCC02 block interrupt
   307  0002                    INT_MSK1_DBC01:            equ 02h ; MASK: enable/disable DBC01 block interrupt
   308  0001                    INT_MSK1_DBC00:            equ 01h ; MASK: enable/disable DBC00 block interrupt
   309                          
   310  00DF                    INT_MSK2:     equ DFh			; Custom block Mask Register			   (RW)
   311  0010                    INT_MSK2_SARADC:           equ 10h ; MASK: enable/disable SARADC block interrupt
   312  0020                    INT_MSK2_CSD0:             equ 20h ; MASK: enable/disable CSD0 block interrupt
   313  0040                    INT_MSK2_CSD1:             equ 40h ; MASK: enable/disable CSD1 block interrupt
   314  0080                    INT_MSK2_RTC:              equ 80h ; MASK: enable/disable RTC block interrupt
   315                          
   316  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   317  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   318                          
   319                          ;------------------------------------------------------
   320                          ;  MAC Registers
   321                          ;------------------------------------------------------
   322                          
   323  00E8                    MUL0_X:       equ 0E8h          ; Multiply Input X Register                (W)
   324  00E9                    MUL0_Y:       equ 0E9h          ; Multiply Input Y Register                (W)
   325  00EA                    MUL0_DH:      equ 0EAh          ; Multiply Result High Byte Register       (R)
   326  00EB                    MUL0_DL:      equ 0EBh          ; Multiply Result Low Byte Register        (R)
   327                          
   328  00EC                    ACC0_DR1:     equ 0ECh          ; Accumulator Data Register 1              (RW)
   329  00ED                    ACC0_DR0:     equ 0EDh          ; Accumulator Data Register 0              (RW)
   330  00EE                    ACC0_DR3:     equ 0EEh          ; Accumulator Data Register 3              (RW)
   331  00EF                    ACC0_DR2:     equ 0EFh          ; Accumulator Data Register 2              (RW)
   332                          
   333                          ; DECIMATOR Control Registers
   334  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   335  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   336                          
   337                          ;------------------------------------------------------
   338                          ;  System Status and Control Registers
   339                          ;
   340                          ;  Note: The following registers are mapped into both
   341                          ;        register bank 0 AND register bank 1.
   342                          ;------------------------------------------------------
   343  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   344                                                             ; Use FLAG_ masks defined at top of file
   345                          
   346  00FD                    DAC_D:        equ 0FDh		   ; DAC Data Register                        (RW)
   347                          
   348  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   349  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: flag, Internal Reset Status bit
   350  0010                    CPU_SCR1_SLIMO:         equ 10h	   ; MASK: Slow IMO (internal main osc) enable
   351  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   352  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   353  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   354                          
   355  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   356  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   357  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   358  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   359  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   360  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   361                          
   362                          ;------------------------------------------------------
   363                          ;  Neon Capsense Digital Control Registers
   364                          ;------------------------------------------------------
   365  0050                    CSD0_DR0_L:				equ 50h		; Capsense 0 data low 0				(RW)
   366  0054                    CSD0_DR0_H:				equ 54h		; Capsense 0 data high 0			(RW)
   367  0058                    CSD1_DR0_L:				equ 58h		; Capsense 1 data low 0				(RW)
   368  005C                    CSD1_DR0_H:				equ 5Ch		; Capsense 1 data high 0			(RW)
   369  0051                    CSD0_DR1_L:				equ 51h		; Capsense 0 data low 1				(RW)
   370  0055                    CSD0_DR1_H:				equ 55h		; Capsense 0 data high 1			(RW)
   371  0059                    CSD1_DR1_L:				equ 59h		; Capsense 1 data low 1				(RW)
   372  005D                    CSD1_DR1_H:				equ 5Dh		; Capsense 1 data high 1			(RW)
   373  0052                    CSD0_CNT_L:				equ 52h		; Capsense 0 counter low			(RW)
   374  0056                    CSD0_CNT_H:				equ 56h		; Capsense 0 counter high			(RW)
   375  005A                    CSD1_CNT_L:				equ 5Ah		; Capsense 1 counter low			(RW)
   376  005E                    CSD1_CNT_H:				equ	5Eh		; Capsense 1 counter high			(RW)
   377  0053                    CSD0_CR0:				equ 53h		; Capsense 0 control 0				(RW)
   378  005B                    CSD1_CR0:				equ 5Bh		; Capsense 1 control 0				(RW)
   379  0057                    CSD0_CR1:				equ 57h		; Capsense 0 control 1				(RW)
   380  005F                    CSD1_CR1:				equ 5Fh		; Capsense 1 control 1				(RW)
   381                          
   382                          ;------------------------------------------------------
   383                          ;  Neon Analog Registers
   384                          ;------------------------------------------------------
   385  0065                    ASY_CR:					equ 65h		; Analog Synchronization Control	(RW)
   386  006A                    ADC_DH:					equ 6Ah		; ADC data high						(RW)
   387  006B                    ADC_DL:					equ 6Bh		; ADC data low						(RW)
   388  00C8                    PWMVREF0:				equ C8h		; PWM Voltage Reference 0			(RW)
   389  00C9                    PWMVREF1:				equ C9h		; PWM Voltage Reference 1			(RW)
   390  00CB                    PWMSRC:					equ CBh		; PWM Source						(RW)
   391  00CA                    IDACMODE:				equ CAh		; IDAC Mode							(RW)
   392  00FC                    IDACR_D:				equ FCh		; Analog Mux DAC data 0				(RW)
   393  00FD                    IDACL_D:				equ FDh		; Analog Mux DAC data 1				(RW)
   394                          
   395                          ;------------------------------------------------------
   396                          ;  Neon Digital Registers
   397                          ;------------------------------------------------------
   398  00B7                    RDI0DSM:				equ B7h		; Row Digital Interconnect input select 0	(RW)
   399  00BF                    RDI1DSM:				equ BFh		; Row Digital Interconnect input select 1	(RW)
   400                          
   401                          ;------------------------------------------------------
   402                          ;  Neon Test Registers
   403                          ;------------------------------------------------------
   404  00CC                    TSCR0:					equ CCh		; Tsource 0							(RW)
   405  00CD                    TSCMPH:					equ CDh		; TSCMP high						(RW)
   406  00CE                    TSCMPL:					equ CEh		; TSCMP low							(RW)
   407  00CF                    TSCR1:					equ CFh		; Tsource 1							(RW)
   408                          
   409                          ;;=============================================================================
   410                          ;;      Register Space, Bank 1
   411                          ;;=============================================================================
   412                          
   413                          ;------------------------------------------------
   414                          ;  Port Registers
   415                          ;  Note: Also see this address range in Bank 0.
   416                          ;------------------------------------------------
   417                          ; Port 0
   418  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   419  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   420  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   421  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   422                          
   423                          ; Port 1
   424  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   425  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   426  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   427  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   428                          
   429                          ; Port 2
   430  0008                    PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
   431  0009                    PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
   432  000A                    PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
   433  000B                    PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
   434                          
   435                          ; Port 3
   436  000C                    PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
   437  000D                    PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
   438  000E                    PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
   439  000F                    PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
   440                          
   441                          ; Port 4
   442  0010                    PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
   443  0011                    PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
   444  0012                    PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
   445  0013                    PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
   446                          
   447                          ;------------------------------------------------
   448                          ;  Digital PSoC(tm) block Registers
   449                          ;  Note: Also see this address range in Bank 0.
   450                          ;------------------------------------------------
   451                          
   452                          ; Digital PSoC block 00, Basic Type C
   453  0020                    DBC00FN:      equ 20h          ; Function Register                        (RW)
   454  0021                    DBC00IN:      equ 21h          ;    Input Register                        (RW)
   455  0022                    DBC00OU:      equ 22h          ;   Output Register                        (RW)
   456  0023                    DBC00CR1:     equ 23h          ;   control & status register 1            (RW)
   457                          
   458                          ; Digital PSoC block 01, Basic Type C
   459  0024                    DBC01FN:      equ 24h          ; Function Register                        (RW)
   460  0025                    DBC01IN:      equ 25h          ;    Input Register                        (RW)
   461  0026                    DBC01OU:      equ 26h          ;   Output Register                        (RW)
   462  0027                    DBC01CR1:     equ 27h          ;   control & status register 1            (RW)
   463                          
   464                          ; Digital PSoC block 02, Communications Type C
   465  0028                    DCC02FN:      equ 28h          ; Function Register                        (RW)
   466  0029                    DCC02IN:      equ 29h          ;    Input Register                        (RW)
   467  002A                    DCC02OU:      equ 2Ah          ;   Output Register                        (RW)
   468  002B                    DBC02CR1:     equ 2Bh          ;   control & status register 1            (RW)
   469                          
   470                          ; Digital PSoC block 03, Communications Type C
   471  002C                    DCC03FN:      equ 2Ch          ; Function Register                        (RW)
   472  002D                    DCC03IN:      equ 2Dh          ;    Input Register                        (RW)
   473  002E                    DCC03OU:      equ 2Eh          ;   Output Register                        (RW)
   474  0029                    DBC03CR1:     equ 29h          ;   control & status register 1            (RW)
   475                          
   476                          ; Digital PSoC block 10, Basic Type C
   477  0030                    DBC10FN:      equ 30h          ; Function Register                        (RW)
   478  0031                    DBC10IN:      equ 31h          ;    Input Register                        (RW)
   479  0032                    DBC10OU:      equ 32h          ;   Output Register                        (RW)
   480  0033                    DBC10CR1:     equ 33h          ;   control & status register 1            (RW)
   481                          
   482                          ; Digital PSoC block 11, Basic Type C
   483  0034                    DBC11FN:      equ 34h          ; Function Register                        (RW)
   484  0035                    DBC11IN:      equ 35h          ;    Input Register                        (RW)
   485  0036                    DBC11OU:      equ 36h          ;   Output Register                        (RW)
   486  0037                    DBC11CR1:     equ 37h          ;   control & status register 1            (RW)
   487                          
   488                          ; Digital PSoC block 12, Communications Type C
   489  0038                    DCC12FN:      equ 38h          ; Function Register                        (RW)
   490  0039                    DCC12IN:      equ 39h          ;    Input Register                        (RW)
   491  003A                    DCC12OU:      equ 3Ah          ;   Output Register                        (RW)
   492  003B                    DBC12CR1:     equ 3Bh          ;   control & status register 1            (RW)
   493                          
   494                          ; Digital PSoC block 13, Communications Type C
   495  003C                    DCC13FN:      equ 3Ch          ; Function Register                        (RW)
   496  003D                    DCC13IN:      equ 3Dh          ;    Input Register                        (RW)
   497  003E                    DCC13OU:      equ 3Eh          ;   Output Register                        (RW)
   498  003F                    DBC13CR1:     equ 3Fh          ;   control & status register 1            (RW)
   499                          
   500                          ;------------------------------------------------
   501                          ;  System and Global Resource Registers
   502                          ;  Note: Also see this address range in Bank 0.
   503                          ;------------------------------------------------
   504                          
   505  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   506  00C0                    CLK_CR0_ACOLUMN_3:    equ C0h    ; MASK: Specify clock for analog cloumn
   507  0030                    CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
   508  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   509  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   510                          
   511  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   512  0018                    CLK_CR1_ACLK1:        equ 18h    ; MASK: Digital PSoC block for analog source
   513  0003                    CLK_CR1_ACLK0:        equ 03h    ; MASK: Digital PSoC block for analog source
   514                          
   515  0003                    CLK_CR1_ACLK2:        equ 03h    ; Deprecated do not use
   516                          
   517  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   518  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   519                          
   520  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   521  000F                    AMD_CR0_AMOD0:        equ 0Fh    ; MASK: Modulation source for analog column 0
   522                          
   523  0064                    CMP_GO_EN:    equ 64h          ; Comparator Bus To Global Out Enable      (RW)
   524  0080                    CMP_GO_EN_GOO5:       equ 80h    ; MASK: Selected Col 1 signal to GOO5
   525  0040                    CMP_GO_EN_GOO1:       equ 40h    ; MASK: Selected Col 1 signal to GOO1
   526  0030                    CMP_GO_EN_SEL1:       equ 30h    ; MASK: Column 1 Signal Select
   527  0008                    CMP_GO_EN_GOO4:       equ 08h    ; MASK: Selected Col 0 signal to GOO4
   528  0004                    CMP_GO_EN_GOO0:       equ 04h    ; MASK: Selected Col 0 signal to GOO0
   529  0003                    CMP_GO_EN_SEL0:       equ 03h    ; MASK: Column 0 Signal Select
   530                          
   531  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   532  000F                    AMD_CR1_AMOD1:        equ 0Fh    ; MASK: Modulation ctrl for analog column 1
   533                          
   534  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   535  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   536  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   537                          
   538  006B                    CLK_CR3:      equ 6Bh          ; Analog Clock Source Control Register 3   (RW)
   539  0040                    CLK_CR3_SYS1:         equ 40h    ; MASK: Analog Clock 1 selection
   540  0030                    CLK_CR3_DIVCLK1:      equ 30h    ; MASK: Analog Clock 1 divider
   541  0004                    CLK_CR3_SYS0:         equ 04h    ; MASK: Analog Clock 0 selection
   542  0003                    CLK_CR3_DIVCLK0:      equ 03h    ; MASK: Analog Clock 0 divider
   543                          
   544                          ;------------------------------------------------
   545                          ;  Global Digital Interconnects
   546                          ;------------------------------------------------
   547                          
   548  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   549  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   550  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   551  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   552                          
   553  00A0                    GDI_O_IN_CR:  equ 0A0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   554  00A1                    GDI_E_IN_CR:  equ 0A1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   555  00A2                    GDI_O_OU_CR:  equ 0A2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   556  00A3                    GDI_E_OU_CR:  equ 0A3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   557                          
   558  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   559  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   560                          
   561                          ;------------------------------------------------
   562                          ;  Analog Mux Bus Port Enable Bits
   563                          ;------------------------------------------------
   564  00D8                    MUX_CR0:      equ 0D8h          ; Analog Mux Port 0 Bit Enables Register
   565  00D9                    MUX_CR1:      equ 0D9h          ; Analog Mux Port 1 Bit Enables Register
   566  00DA                    MUX_CR2:      equ 0DAh          ; Analog Mux Port 2 Bit Enables Register
   567  00DB                    MUX_CR3:      equ 0DBh          ; Analog Mux Port 3 Bit Enables Register
   568  00EC                    MUX_CR4:      equ 0ECh          ; Analog Mux Port 4 Bit Enables Register
   569                          
   570                          ;------------------------------------------------
   571                          ;  Clock and System Control Registers
   572                          ;------------------------------------------------
   573                          
   574  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   575  0080                    OSC_GO_EN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   576  0040                    OSC_GO_EN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   577  0020                    OSC_GO_EN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   578  0010                    OSC_GO_EN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   579  0008                    OSC_GO_EN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   580  0004                    OSC_GO_EN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   581  0002                    OSC_GO_EN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   582  0001                    OSC_GO_EN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   583                          
   584  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   585  0003                    OSC_CR4_VC3SEL:       equ 03h    ; MASK: System VC3 Clock source
   586                          
   587  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   588                          
   589  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   590  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   591  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   592  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   593  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   594  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   595  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   596  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   597  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   598  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   599  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   600  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   601  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   602  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   603  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   604  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   605  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   606  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   607                          
   608  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   609  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   610  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   611                          
   612  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   613  0080                    OSC_CR2_PLLGAIN:      equ 80h    ; MASK: High/Low gain
   614  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   615  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   616  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   617                          
   618  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   619  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   620  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   621  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   622  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   623  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   624  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   625  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   626                          
   627  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   628  0008                    VLT_CMP_NOWRITE:      equ 08h    ; MASK: Vcc below Flash Write level
   629  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   630  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   631  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   632                          
   633  00E5                    ADC0_TR:      equ 0E5h          ; ADC Column 0 Trim Register
   634  00E6                    ADC1_TR:      equ 0E6h          ; ADC Column 1 Trim Register
   635                          
   636  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   637  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   638  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   639  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   640                          
   641  00FA                    FLS_PR1:      equ 0FAh          ; Flash Program Register 1                 (RW)
   642  0003                    FLS_PR1_BANK:         equ 03h    ; MASK: Select Active Flash Bank
   643                          
   644  00FD                    DAC_CR0:       equ 0FDh          ; Analog Mux DAC Control Register 0
   645  00DC                    DAC_CR1:       equ 0DCh          ; Analog Mux DAC Control Register 1
   646  0008                    DAC_CR_IRANGE:        equ 08h    ; MASK: Sets the DAC Range low or high
   647  0006                    DAC_CR_OSCMODE:       equ 06h    ; MASK: Defines the reset mode for AMux
   648  0001                    DAC_CR_ENABLE:        equ 01h    ; MASK: Enable/Disable DAC function
   649                          
   650                          ;------------------------------------------------
   651                          ;  I2C Control Registers
   652                          ;------------------------------------------------
   653                          
   654  00AD                    I2C_ADDR:    equ 0ADh          ; I2C Address Register (RW)
   655                          
   656                          ;------------------------------------------------------
   657                          ;  Neon Analog Registers
   658                          ;------------------------------------------------------
   659  0053                    VDAC50CR0:		equ 53h			; V DAC5 control 0				(RW)
   660  0057                    VDAC51CR0:		equ 57h			; V DAC5 control 1				(RW)
   661  00A8                    ADC_CR0:		equ A8h			; ADC control 0					(RW)
   662  00A9                    ADC_CR1:		equ A9h			; ADC control 1					(RW)
   663  00AA                    ADC_CR2:		equ AAh			; ADC control 2					(RW)
   664  00AB                    ADC_CR3TRIM:	equ ABh			; ADC control 3					(RW)
   665  00AC                    ADC_CR4:		equ ACh			; ADC control 4					(RW)
   666  00E7                    VDAC_TRIM:		equ E7h			; V DAC trim					(RW)
   667                          
   668                          ;------------------------------------------------------
   669                          ;  Neon Current Sense CMP Registers
   670                          ;------------------------------------------------------
   671  0050                    CMP0CR1:		equ 50h			; CMP0 control 1				(RW)
   672  0051                    CMP0CR2:		equ 51h			; CMP0 control 2				(RW)
   673  0054                    CMP1CR1:		equ 54h			; CMP1 control 1				(RW)
   674  0055                    CMP1CR2:		equ 55h			; CMP1 control 2				(RW)
   675  0058                    CSCMPCR0:		equ 58h			; CSCMP control 0				(RW)
   676  0059                    CSCMPGOEN:		equ 59h			; CSCMO global out enable		(RW)
   677  005A                    CSLUTCR0:		equ 5Ah			; CSLUT control 0				(RW)
   678  005B                    CMPCOLMUX:		equ 5Bh			; CMP Column Mux				(RW)
   679  005C                    CMPPWMCR:		equ 5Ch			; CMP PWM control				(RW)
   680  005D                    CMPFLTCR:		equ 5Dh			; CMP filter control			(RW)
   681  005E                    CMPCLK1:		equ 5Eh			; CMP clock 1					(RW)
   682  005F                    CMPCLK0:		equ 5Fh			; CMP clock 0					(RW)
   683                          
   684                          ;------------------------------------------------------
   685                          ;  Neon Real Time Clock Registers
   686                          ;------------------------------------------------------
   687  00A4                    RTCH:			equ A4h			; Real time current hour		(RW)
   688  00A5                    RTCM:			equ A5h			; Real time current minute		(RW)
   689  00A6                    RTCS:			equ A6h			; Real time current second		(RW)
   690  00A7                    RTCCR:			equ A7h			; Real time clock control		(RW)
   691                          
   692                          ;------------------------------------------------------
   693                          ;  Analog MUX Config Registers
   694                          ;------------------------------------------------------
   695                          
   696  006A                    AMUX_CFG1:			equ 6Ah  ; Analog MUX Configuration 1
   697  0020                    AMUX_CFG1_GOINVR:	equ 20h  ;
   698  0010                    AMUX_CFG1_GOINVL:  	equ 10h	 ;
   699  000C                    AMUX_CFG1_AMUXMODR:	equ 0Ch	 ;
   700  0003                    AMUX_CFG1_AMUXMODL:	equ 03h	 ;
   701                          
   702                          ;;=============================================================================
   703                          ;;      M8C System Macros
   704                          ;;  These macros should be used when their functions are needed.
   705                          ;;=============================================================================
   706                          
   707                          ;----------------------------------------------------
   708                          ;  Swapping Register Banks
   709                          ;----------------------------------------------------
   710                              macro M8C_SetBank0
   711                              and   F, ~FLAG_XIO_MASK
   712  3D73                        endm
   713                          
   714                              macro M8C_SetBank1
   715                              or    F, FLAG_XIO_MASK
   716  3D73                        endm
   717                          
   718                          ;----------------------------------------------------
   719                          ;  Global Interrupt Enable/Disable
   720                          ;----------------------------------------------------
   721                              macro M8C_EnableGInt
   722                              or    F, FLAG_GLOBAL_IE
   723  3D73                        endm
   724                          
   725                              macro M8C_DisableGInt
   726                              and   F, ~FLAG_GLOBAL_IE
   727  3D73                        endm
   728                          
   729                          ;----------------------------------------------------
   730                          ;  Enable/Disable Interrupt Mask
   731                          ;
   732                          ;  Use the following macros to enable/disable
   733                          ;  bits in the Interrupt mask registers,
   734                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   735                          ;
   736                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   737                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   738                          ;
   739                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   740                          ;        and MASK is the bit set to enable or disable
   741                          ;----------------------------------------------------
   742                          ; Disable Interrupt Bit Mask(s)
   743                              macro M8C_DisableIntMask
   744                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   745  3D73                        endm
   746                          
   747                          ; Enable Interrupt Bit Mask(s)
   748                              macro M8C_EnableIntMask
   749                              or    reg[@0], @1               ; enable specified interrupt enable bit
   750  3D73                        endm
   751                          
   752                          ;----------------------------------------------------
   753                          ;  Clear Posted Interrupt Flag Mask
   754                          ;
   755                          ;  Use the following macros to clear the
   756                          ;  bits in the Interrupt Clear registers,
   757                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   758                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   759                          ;
   760                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   761                          ;        and MASK is the bit set to enable or disable
   762                          ;----------------------------------------------------
   763                              macro M8C_ClearIntFlag
   764                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   765  3D73                        endm
   766                          
   767                          ;----------------------------------------------------
   768                          ;  Power-On Reset & WatchDog Timer Functions
   769                          ;----------------------------------------------------
   770                              macro M8C_EnableWatchDog
   771                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   772  3D73                        endm
   773                          
   774                              macro M8C_ClearWDT
   775                              mov   reg[RES_WDT], 00h
   776  3D73                        endm
   777                          
   778                              macro M8C_ClearWDTAndSleep
   779                              mov   reg[RES_WDT], 38h
   780  3D73                        endm
   781                          
   782                          ;----------------------------------------------------
   783                          ;  Sleep, CPU Stop & Software Reset
   784                          ;----------------------------------------------------
   785                              macro M8C_Sleep
   786                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   787                              ; The next instruction to be executed depends on the state of the
   788                              ; various interrupt enable bits. If some interrupts are enabled
   789                              ; and the global interrupts are disabled, the next instruction will
   790                              ; be the one that follows the invocation of this macro. If global
   791                              ; interrupts are also enabled then the next instruction will be
   792                              ; from the interrupt vector table. If no interrupts are enabled
   793                              ; then the CPU sleeps forever.
   794  3D73                        endm
   795                          
   796                              macro M8C_Stop
   797                              ; In general, you probably don't want to do this, but here's how:
   798                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   799                              ; Next instruction to be executed is located in the interrupt
   800                              ; vector table entry for Power-On Reset.
   801  3D73                        endm
   802                          
   803                              macro M8C_Reset
   804                              ; Restore CPU to the power-on reset state.
   805                              mov A, 0
   806                              SSC
   807                              ; Next non-supervisor instruction will be at interrupt vector 0.
   808  3D73                        endm
   809                          
   810                          ;----------------------------------------------------
   811                          ; ImageCraft Code Compressor Actions
   812                          ;----------------------------------------------------
   813                              ; Suspend Code Compressor
   814                              ; Must not span a RET or RETI instruction
   815                              ; without resuming code compression
   816                              macro Suspend_CodeCompressor
   817                              or   F, 0
   818  3D73                        endm
   819                          
   820                              ; Resume Code Compression
   821                              macro Resume_CodeCompressor
   822                              add  SP, 0
   823  3D73                        endm
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  FILENAME:   UART_BoardINT.asm
     4                          ;;  Version: 5.3, Updated on 2013/5/19 at 10:44:49
     5                          ;;  Generated by PSoC Designer 5.4.2946
     6                          ;;
     7                          ;;  DESCRIPTION:  UART Interrupt Service Routine.
     8                          ;;-----------------------------------------------------------------------------
     9                          ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
    10                          ;;*****************************************************************************
    11                          ;;*****************************************************************************
    12                          
    13                          
    14                          include "UART_Board.inc"
    15                          include "memory.inc"
    16                          include "m8c.inc"
    17                          
    18                          ;-----------------------------------------------
    19                          ;  Global Symbols
    20                          ;-----------------------------------------------
    21                          export  _UART_Board_TX_ISR
    22                          export  _UART_Board_RX_ISR
    23                          
    24                          IF (UART_Board_RXBUF_ENABLE)
    25                          export  UART_Board_aRxBuffer
    26                          export _UART_Board_aRxBuffer
    27                          export  UART_Board_bRxCnt
    28                          export _UART_Board_bRxCnt
    29                          export  UART_Board_fStatus
    30                          export _UART_Board_fStatus
    31                          ENDIF
    32                          
    33                          
    34                          ;-----------------------------------------------
    35                          ; Variable Allocation
    36                          ;-----------------------------------------------
    37                          AREA InterruptRAM (RAM, REL, CON)
    38                          
    39                          IF (UART_Board_RXBUF_ENABLE)
    40                           UART_Board_fStatus:
    41                          _UART_Board_fStatus:      BLK  1
    42                           UART_Board_bRxCnt:
    43                          _UART_Board_bRxCnt:       BLK  1
    44                          AREA UART_Board_RAM (RAM, REL, CON)
    45                           UART_Board_aRxBuffer:
    46                          _UART_Board_aRxBuffer:    BLK UART_Board_RX_BUFFER_SIZE
    47                          ENDIF
    48                          
    49                          AREA InterruptRAM (RAM, REL, CON)
    50                          
    51                          ;@PSoC_UserCode_INIT@ (Do not change this line.)
    52                          ;---------------------------------------------------
    53                          ; Insert your custom declarations below this banner
    54                          ;---------------------------------------------------
    55                          
    56                          ;------------------------
    57                          ;  Includes
    58                          ;------------------------
    59                          
    60                          
    61                          ;------------------------
    62                          ;  Constant Definitions
    63                          ;------------------------
    64                          
    65                          
    66                          ;------------------------
    67                          ; Variable Allocation
    68                          ;------------------------
    69                          
    70                          
    71                          ;---------------------------------------------------
    72                          ; Insert your custom declarations above this banner
    73                          ;---------------------------------------------------
    74                          ;@PSoC_UserCode_END@ (Do not change this line.)
    75                          
    76                          
    77                          AREA UserModules (ROM, REL, CON)
    78                          
    79                          ;-----------------------------------------------------------------------------
    80                          ;  FUNCTION NAME: _UART_Board_TX_ISR
    81                          ;
    82                          ;  DESCRIPTION:
    83                          ;     UART TX interrupt handler for instance UART_Board.
    84                          ;
    85                          ;     This is a place holder function.  If the user requires use of an interrupt
    86                          ;     handler for this function, then place code where specified.
    87                          ;-----------------------------------------------------------------------------
    88                          
    89  2EB8                    _UART_Board_TX_ISR:
    90                             ;@PSoC_UserCode_BODY_1@ (Do not change this line.)
    91                             ;---------------------------------------------------
    92                             ; Insert your custom assembly code below this banner
    93                             ;---------------------------------------------------
    94                             ;   NOTE: interrupt service routines must preserve
    95                             ;   the values of the A and X CPU registers.
    96                             
    97                             ;---------------------------------------------------
    98                             ; Insert your custom assembly code above this banner
    99                             ;---------------------------------------------------
   100                             
   101                             ;---------------------------------------------------
   102                             ; Insert a lcall to a C function below this banner
   103                             ; and un-comment the lines between these banners
   104                             ;---------------------------------------------------
   105                             
   106                             ;PRESERVE_CPU_CONTEXT
   107                             ;lcall _My_C_Function
   108                             ;RESTORE_CPU_CONTEXT
   109                             
   110                             ;---------------------------------------------------
   111                             ; Insert a lcall to a C function above this banner
   112                             ; and un-comment the lines between these banners
   113                             ;---------------------------------------------------
   114                             ;@PSoC_UserCode_END@ (Do not change this line.)
   115  2EB8  7E                   reti
   116                          
   117                          
   118                          ;-----------------------------------------------------------------------------
   119                          ;  FUNCTION NAME: _UART_Board_RX_ISR
   120                          ;
   121                          ;  DESCRIPTION:
   122                          ;     UART RX interrupt handler for instance UART_Board.
   123                          ;     This ISR handles the background processing of received characters if
   124                          ;     the buffer is enabled.
   125                          ;
   126                          ;
   127                          ;  The following assumes that the RX buffer feature has been enabled.
   128                          ;
   129                          ;  SIDE EFFECTS:
   130                          ;     There are 3 posible errors that may occur with the serial port.
   131                          ;      1) Parity Error
   132                          ;      2) Framing Error
   133                          ;      3) OverRun Error
   134                          ;
   135                          ;  This user module check for parity and framing error.  If either of these
   136                          ;  two errors are detected, the data is read and ignored.  When an overRun
   137                          ;  error occurs, the last byte was lost, but the current byte is valid.  For
   138                          ;  this reason this error is ignored at this time.  Code could be added to
   139                          ;  this ISR to set a flag if an error condition occurs.
   140                          ;
   141                          ;  THEORY of OPERATION:
   142                          ;     When using the RX buffer feature, the ISR collects received characters
   143                          ;     in a buffer until the user defined command terminator is detected.  After
   144                          ;     the command terminator is detected, the command bit is set and all other
   145                          ;     characters will be ignored until the command bit is reset.  Up to
   146                          ;     buffer_size - 1 characters will be collected waiting for a command
   147                          ;     terminator.  After that, the characters will be discarded, although
   148                          ;     a command determinator will still cause the command bit to be set.
   149                          ;
   150                          ;-----------------------------------------------------------------------------
   151  2EB9                    _UART_Board_RX_ISR:
   152                          
   153                             ;@PSoC_UserCode_BODY_2@ (Do not change this line.)
   154                             ;---------------------------------------------------
   155                             ; Insert your custom assembly code below this banner
   156                             ;---------------------------------------------------
   157                             ;   NOTE: interrupt service routines must preserve
   158                             ;   the values of the A and X CPU registers.
   159                             
   160                             ;---------------------------------------------------
   161                             ; Insert your custom assembly code above this banner
   162                             ;---------------------------------------------------
   163                             
   164                             ;---------------------------------------------------
   165                             ; Insert a lcall to a C function below this banner
   166                             ; and un-comment the lines between these banners
   167                             ;---------------------------------------------------
   168                             
   169                             ;PRESERVE_CPU_CONTEXT
   170                             ;lcall _My_C_Function
   171                             ;RESTORE_CPU_CONTEXT
   172                             
   173                             ;---------------------------------------------------
   174                             ; Insert a lcall to a C function above this banner
   175                             ; and un-comment the lines between these banners
   176                             ;---------------------------------------------------
   177                             ;@PSoC_UserCode_END@ (Do not change this line.)
   178                          
   179                          IF (UART_Board_RXBUF_ENABLE)
   180                             push A
   181                             push X
   182                             
   183                             IF SYSTEM_LARGE_MEMORY_MODEL
   184                                REG_PRESERVE IDX_PP
   185                             ENDIF
   186                             
   187                             mov  X,[UART_Board_bRxCnt]                              ; Load X with byte counter
   188                             mov  A,REG[UART_Board_RX_CONTROL_REG]                   ; Read the control register
   189                             push A                                                  ; Store copy for later test
   190                                                                                     ; IF real RX interrupt
   191                             and  A,UART_Board_RX_REG_FULL                           ; Did really really get an IRQ
   192                             jnz  .UARTRX_ReadRx                                     ; Data ready, go get it
   193                             pop  A                                                  ; Restore stack
   194                             jmp  .RESTORE_IDX_PP
   195                          
   196                          .UARTRX_ReadRx:
   197                             pop  A                                                  ; Restore status flags
   198                                                                                     ; IF there is no error, get data
   199                                                                                     ; Check for parity or framing error
   200                             and  A,UART_Board_RX_ERROR
   201                             jz   .UARTRX_NO_ERROR                                   ; If there is not an Error go read data
   202                          
   203                             or   [UART_Board_fStatus],A                             ; Set error flags (parity,framing,overrun
                                ) bits
   204                             tst  REG[UART_Board_RX_BUFFER_REG], 0x00                ; Read the data buffer to clear it.
   205                             and  A,UART_Board_RX_FRAMING_ERROR                      ; Check for framing error special case
   206                             jz   .RESTORE_IDX_PP                                    ; Not framing error, all done
   207                          
   208                                                                                     ; Disable and re-enable RX to reset after
   209                                                                                     ; framing error.
   210                             and   REG[UART_Board_RX_CONTROL_REG], ~UART_Board_RX_ENABLE   ; Disable RX
   211                             or    REG[UART_Board_RX_CONTROL_REG],  UART_Board_RX_ENABLE   ; Enable RX
   212                             jmp  .RESTORE_IDX_PP                                    ; Done with framing error, leave.
   213                          
   214                          
   215                          .UARTRX_NO_ERROR:
   216                             mov  A,REG[UART_Board_RX_BUFFER_REG ]                   ; Read the data buffer
   217                          
   218                                                                                     ; IF buffer not full
   219                             tst  [UART_Board_fStatus],UART_Board_RX_BUF_CMDTERM     ; Check for buffer full
   220                             jnz  .RESTORE_IDX_PP                                    ; All done
   221                          
   222                             cmp  A,UART_Board_CMD_TERM                              ; Check for End of command
   223                             jnz  .UARTRX_CHK_BACKSPACE
   224                             or   [UART_Board_fStatus],UART_Board_RX_BUF_CMDTERM     ; Set command ready bit
   225                          
   226                          
   227                          
   228                             RAM_SETPAGE_IDX >UART_Board_aRxBuffer
   229                             RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
   230                             mov  [X + UART_Board_aRxBuffer],00h                     ; Zero out last data
   231                             RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
   232                             jmp  .RESTORE_IDX_PP
   233                          
   234                          .UARTRX_CHK_BACKSPACE:                                     ; 
   235                          IF(UART_Board_BACKSPACE_ENABLE)                            ; Enable if backspace/delete mode
   236                             cmp  A,UART_Board_BACKSPACE_ENABLE                      ; Check for backspace character
   237                             jnz  .UARTRX_IGNORE                                     ; If not, skip the backspace stuff
   238                             cmp  [UART_Board_bRxCnt],00h                            ; Check if buffer empty
   239                             jz   .RESTORE_IDX_PP                                    ; 
   240                             dec  [UART_Board_bRxCnt]                                ; Decrement buffer count by one.
   241                             jmp  .RESTORE_IDX_PP
   242                          ENDIF                                                      ; 
   243                          
   244                          .UARTRX_IGNORE:
   245                          IF(UART_Board_RX_IGNORE_BELOW)                             ; Ignore charaters below this value
   246                             cmp  A,UART_Board_RX_IGNORE_BELOW                       ; If ignore char is set to 0x00, do not
   247                             jc   .RESTORE_IDX_PP                                    ; ignore any characters.
   248                          ENDIF
   249                          
   250                          .UARTRX_CHK_OVFL:                                          ; Check for MAX String here
   251                          	
   252                             RAM_SETPAGE_IDX >UART_Board_aRxBuffer                   ;   using idexed address mode
   253                             cmp  [UART_Board_bRxCnt],(UART_Board_RX_BUFFER_SIZE - 1)
   254                             jc   .UARTRX_ISR_GETDATA
   255                             RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
   256                             mov  [X + UART_Board_aRxBuffer],00h                     ; Zero out last data in the buffer
   257                             RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
   258                             or   [UART_Board_fStatus],UART_Board_RX_BUF_OVERRUN     ; Set error flags (parity,framing,overrun
                                ) bits
   259                             jmp  .RESTORE_IDX_PP
   260                          
   261                          .UARTRX_ISR_GETDATA:                                       ; IF input data == "CR", then end of comm
                                and
   262                                                                                     ; X is already loaded with pointer
   263                             RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
   264                             mov  [X+UART_Board_aRxBuffer],A                         ; store data in array
   265                             RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
   266                             inc  X                                                  ; Inc the pointer
   267                             mov  [UART_Board_bRxCnt],X                              ; Restore the pointer
   268                                                                                     ; ENDIF max string size
   269                          .RESTORE_IDX_PP:
   270                             IF SYSTEM_LARGE_MEMORY_MODEL
   271                                REG_RESTORE IDX_PP
   272                             ENDIF
   273                          
   274                          .END_UARTRX_ISR:
   275                             pop  X
   276                             pop  A
   277                          
   278                          ENDIF
   279                          
   280  2EB9                    UART_Board_RX_ISR_END:
   281  2EB9  7E                   reti
HI-TECH Software Macro Assembler (PSoC MCU) V9.61
Symbol Table                                                                                               Thu Jul 09 11:34:31 2015
                          HITECH 0002           UART_Board_RXBUF_ENABLE 0000             UART_Board_RX_ISR_END 2EB9  
                       TOOLCHAIN 0002                _UART_Board_RX_ISR 2EB9                _UART_Board_TX_ISR 2EB8  
HI-TECH Software Macro Assembler (PSoC MCU) V9.61
                                                                                                           Thu Jul 09 11:34:31 2015
     1                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     2                          ;;;
     3                          ;;;  M8C.INC -- Microcontroller Device System Declarations
     4                          ;;;
     5                          ;;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
     6                          ;;;
     7                          ;;;  This file provides address constants, bit field masks and a set of macro
     8                          ;;;  facilities for the Cypress Semiconductor CY8C22045 Microcontroller devices.
     9                          ;;;
    10                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    11                          
    12                          ;;=============================================================================
    13                          ;; Definition of abbreviations used in the descriptions below
    14                          ;;  (RW)   The register or bit supports reads and writes
    15                          ;;  (W)    The register or bit is write-only
    16                          ;;  (R)    The register or bit is read-only
    17                          ;;  (#)    Access to the register is bit specific (see the family datasheet)
    18                          ;;  (RC)   The register or bit can be read, but writing a 0 will clear it,
    19                          ;;         writing a 1 will have no effect.
    20                          ;;=============================================================================
    21                          
    22                          ;;=============================================================================
    23                          ;;      System Registers
    24                          ;;=============================================================================
    25                          
    26                          ;----------------------------
    27                          ;  Flag Register Bit Fields
    28                          ;----------------------------
    29  00C0                    FLAG_PGMODE_MASK:  equ 0C0h     ; Paging control for > 256 bytes of RAM
    30  0000                    FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
    31  0040                    FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
    32  0080                    FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
    33  00C0                    FLAG_PGMODE_3:     equ 0C0h       ; Direct to CUR_PP page, indexed to STK_PP page
    34  0000                    FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
    35  0040                    FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
    36  0080                    FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
    37  00C0                    FLAG_PGMODE_11b:   equ 0C0h       ; Same as PGMODE_3
    38  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    39  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    40  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    41  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    42  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    43                          
    44                          
    45                          ;;=============================================================================
    46                          ;;      Register Space, Bank 0
    47                          ;;=============================================================================
    48                          
    49                          ;------------------------------------------------
    50                          ;  Port Registers
    51                          ;  Note: Also see this address range in Bank 1.
    52                          ;------------------------------------------------
    53                          ; Port 0
    54  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    55  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    56  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    57  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    58                          ; Port 1
    59  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    60  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    61  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    62  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    63                          ; Port 2
    64  0008                    PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
    65  0009                    PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
    66  000A                    PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
    67  000B                    PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
    68                          ; Port 3
    69  000C                    PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
    70  000D                    PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
    71  000E                    PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
    72  000F                    PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
    73                          ; Port 4
    74  0010                    PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
    75  0011                    PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
    76  0012                    PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
    77  0013                    PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
    78                          
    79                          ;------------------------------------------------
    80                          ;  Digital PSoC(tm) block Registers
    81                          ;  Note: Also see this address range in Bank 1.
    82                          ;------------------------------------------------
    83                          ; Digital PSoC block 00, Basic Type C
    84  0020                    DBC00DR0:     equ 20h          ; data register 0                          (#)
    85  0021                    DBC00DR1:     equ 21h          ; data register 1                          (W)
    86  0022                    DBC00DR2:     equ 22h          ; data register 2                          (RW)
    87  0023                    DBC00CR0:     equ 23h          ; control & status register 0              (#)
    88                          
    89                          ; Digital PSoC block 01, Basic Type C
    90  0024                    DBC01DR0:     equ 24h          ; data register 0                          (#)
    91  0025                    DBC01DR1:     equ 25h          ; data register 1                          (W)
    92  0026                    DBC01DR2:     equ 26h          ; data register 2                          (RW)
    93  0027                    DBC01CR0:     equ 27h          ; control & status register 0              (#)
    94                          
    95                          ; Digital PSoC block 02, Communications Type C
    96  0028                    DCC02DR0:     equ 28h          ; data register 0                          (#)
    97  0029                    DCC02DR1:     equ 29h          ; data register 1                          (W)
    98  002A                    DCC02DR2:     equ 2Ah          ; data register 2                          (RW)
    99  002B                    DCC02CR0:     equ 2Bh          ; control & status register 0              (#)
   100                          
   101                          ; Digital PSoC block 03, Communications Type C
   102  002C                    DCC03DR0:     equ 2Ch          ; data register 0                          (#)
   103  002D                    DCC03DR1:     equ 2Dh          ; data register 1                          (W)
   104  002E                    DCC03DR2:     equ 2Eh          ; data register 2                          (RW)
   105  002F                    DCC03CR0:     equ 2Fh          ; control & status register 0              (#)
   106                          
   107                          ; Digital PSoC block 10, Basic Type C
   108  0030                    DBC10DR0:     equ 30h          ; data register 0                          (#)
   109  0031                    DBC10DR1:     equ 31h          ; data register 1                          (W)
   110  0032                    DBC10DR2:     equ 32h          ; data register 2                          (RW)
   111  0033                    DBC10CR0:     equ 33h          ; control & status register 0              (#)
   112                          
   113                          ; Digital PSoC block 11, Basic Type C
   114  0034                    DBC11DR0:     equ 34h          ; data register 0                          (#)
   115  0035                    DBC11DR1:     equ 35h          ; data register 1                          (W)
   116  0036                    DBC11DR2:     equ 36h          ; data register 2                          (RW)
   117  0037                    DBC11CR0:     equ 37h          ; control & status register 0              (#)
   118                          
   119                          ; Digital PSoC block 12, Communications Type C
   120  0038                    DCC12DR0:     equ 38h          ; data register 0                          (#)
   121  0039                    DCC12DR1:     equ 39h          ; data register 1                          (W)
   122  003A                    DCC12DR2:     equ 3Ah          ; data register 2                          (RW)
   123  003B                    DCC12CR0:     equ 3Bh          ; control & status register 0              (#)
   124                          
   125                          ; Digital PSoC block 13, Communications Type C
   126  003C                    DCC13DR0:     equ 3Ch          ; data register 0                          (#)
   127  003D                    DCC13DR1:     equ 3Dh          ; data register 1                          (W)
   128  003E                    DCC13DR2:     equ 3Eh          ; data register 2                          (RW)
   129  003F                    DCC13CR0:     equ 3Fh          ; control & status register 0              (#)
   130                          
   131                          ;-------------------------------------
   132                          ;  Analog Control Registers
   133                          ;-------------------------------------
   134  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
   135  00C0                    AMX_IN_ACI3:          equ C0h    ; MASK: column 3 input mux
   136  0030                    AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
   137  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
   138  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
   139                          
   140  0061                    AMUX_CFG:      equ 61h          ; Analog MUX Configuration
   141  0030                    AMUX_CFG_INTCAP:       equ 30h    ;
   142  000E                    AMUX_CFG_MUXCLK:  	  equ 0Eh	 ;
   143  0001                    AMUX_CFG_EN:		  	  equ 01h	 ;
   144                          
   145                          ; old declarations DO NOT USE
   146  0061                    AMUXCFG:      equ 61h          ; Analog MUX Configuration
   147  0030                    AMUXCFG_INTCAP:       equ 30h    ;
   148  000E                    AMUXCFG_MUXCLK:  	  equ 0Eh	 ;
   149  0001                    AMUXCFG_EN:		  	  equ 01h	 ;
   150                          
   151  0062                    PWM_CR:       equ 62h          ; Pulse-Width Modulator Control
   152  0038                    PWM_CR_HIGH:          equ 38h    ; MASK: PWM high time
   153  0006                    PWM_CR_LOW:           equ 06h	 ; MASK: PWM low time
   154  0001                    PWM_CR_EN:            equ 01h	 ; MASK: Enable/Disable PWM function
   155                          
   156  0063                    ARF_CR:       equ 63h          ; Analog Reference Control
   157                          
   158  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus Register           (#)
   159  0080                    CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
   160  0040                    CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
   161  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
   162  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
   163  0008                    CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
   164  0004                    CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
   165  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
   166  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   167                          
   168  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   169  0020                    CMP_CR1_CLDIS1:       equ 20h    ; MASK: Column 1 comparator output latch
   170  0010                    CMP_CR1_CLDIS0:	      equ 10h    ; MASK: Column 0 comparator output latch
   171                          
   172  0068                    ADC0_CR:      equ 68h          ; Analog Column 0 Configuration
   173  0080                    ADC0_CR_CMPST:        equ 80h    ;
   174  0040                    ADC0_CR_LOREN:        equ 40h    ;
   175  0020                    ADC0_CR_SHEN:         equ 20h    ;
   176  0008                    ADC0_CR_CBSRC:        equ 08h    ;
   177  0004                    ADC0_CR_ADCM:         equ 04h    ;
   178  0001                    ADC0_CR_EN:	          equ 01h    ;
   179                          
   180  0069                    ADC1_CR:      equ 69h          ; Analog Column 1 Configuration
   181  0080                    ADC1_CR_CMPST:        equ 80h    ;
   182  0040                    ADC1_CR_LOREN:        equ 40h    ;
   183  0020                    ADC1_CR_SHEN:         equ 20h    ;
   184  0008                    ADC1_CR_CBSRC:        equ 08h    ;
   185  0004                    ADC1_CR_ADCM:         equ 04h    ;
   186  0001                    ADC1_CR_EN:	          equ 01h    ;
   187                          
   188                          ; Continuous Time PSoC block Type E Row 0 Col 0
   189  0072                    ACE00CR1:     equ 72h          ; Control register 1                       (RW)
   190  0073                    ACE00CR2:     equ 73h          ; Control register 2                       (RW)
   191                          
   192                          ; Continuous Time PSoC block Type E Row 0 Col 1
   193  0076                    ACE01CR1:     equ 76h          ; Control register 1                       (RW)
   194  0077                    ACE01CR2:     equ 77h          ; Control register 2                       (RW)
   195                          
   196                          ; Switched Cap PSoC blockType E Row 1 Col 0
   197  0080                    ASE10CR0:     equ 80h          ; Control register 0                       (RW)
   198                          
   199                          ; Switched Cap PSoC blockType E Row 1 Col 1
   200  0084                    ASE11CR0:     equ 84h          ; Control register 0                       (RW)
   201                          
   202                          ;-----------------------------------------------
   203                          ;  Global General Purpose Data Registers
   204                          ;-----------------------------------------------
   205  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   206  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   207  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   208  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   209                          
   210                          ;------------------------------------------------
   211                          ;  Row Digital Interconnects
   212                          ;
   213                          ;  Note: the following registers are mapped into
   214                          ;  both register bank 0 AND register bank 1.
   215                          ;------------------------------------------------
   216                          
   217  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   218  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   219  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   220  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   221  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   222  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   223  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   224                          
   225  00B8                    RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
   226  00B9                    RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
   227  00BA                    RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
   228  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   229  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   230  00BD                    RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
   231  00BE                    RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
   232                          
   233                          ;-----------------------------------------------
   234                          ;  Ram Page Pointers
   235                          ;-----------------------------------------------
   236  00D0                    CUR_PP:      equ 0D0h           ; Current   Page Pointer
   237  00D1                    STK_PP:      equ 0D1h           ; Stack     Page Pointer
   238  00D3                    IDX_PP:      equ 0D3h           ; Index     Page Pointer
   239  00D4                    MVR_PP:      equ 0D4h           ; MVI Read  Page Pointer
   240  00D5                    MVW_PP:      equ 0D5h           ; MVI Write Page Pointer
   241                          
   242                          ;------------------------------------------------
   243                          ;  I2C Configuration Registers
   244                          ;------------------------------------------------
   245  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   246  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   247  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   248  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   249  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   250  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   251  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   252  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   253  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   254  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   255                          
   256  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   257  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   258  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   259  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   260  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   261  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   262  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   263  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   264  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   265                          
   266  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   267                          
   268  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   269  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   270  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   271  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   272  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   273                          
   274                          ;------------------------------------------------
   275                          ;  System and Global Resource Registers
   276                          ;------------------------------------------------
   277  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   278                                                         ; Use INT_MSK0 bit field masks
   279  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   280                                                         ; Use INT_MSK1 bit field masks
   281  00DC                    INT_CLR2:     equ 0DCh          ; Interrupt Clear Register 2               (RW)
   282                                                         ; Use INT_MSK2 bit field masks
   283  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   284                                                         ; Use INT_MSK3 bit field masks
   285                          
   286  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   287  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   288  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   289                          
   290  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   291  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   292  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   293  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   294  0010                    INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
   295  0008                    INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
   296  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   297  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   298  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   299                          
   300  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   301  0080                    INT_MSK1_DCC13:            equ 80h ; MASK: enable/disable DCC13 block interrupt
   302  0040                    INT_MSK1_DCC12:            equ 40h ; MASK: enable/disable DCC12 block interrupt
   303  0020                    INT_MSK1_DBC11:            equ 20h ; MASK: enable/disable DBC11 block interrupt
   304  0010                    INT_MSK1_DBC10:            equ 10h ; MASK: enable/disable DBC10 block interrupt
   305  0008                    INT_MSK1_DCC03:            equ 08h ; MASK: enable/disable DCC03 block interrupt
   306  0004                    INT_MSK1_DCC02:            equ 04h ; MASK: enable/disable DCC02 block interrupt
   307  0002                    INT_MSK1_DBC01:            equ 02h ; MASK: enable/disable DBC01 block interrupt
   308  0001                    INT_MSK1_DBC00:            equ 01h ; MASK: enable/disable DBC00 block interrupt
   309                          
   310  00DF                    INT_MSK2:     equ DFh			; Custom block Mask Register			   (RW)
   311  0010                    INT_MSK2_SARADC:           equ 10h ; MASK: enable/disable SARADC block interrupt
   312  0020                    INT_MSK2_CSD0:             equ 20h ; MASK: enable/disable CSD0 block interrupt
   313  0040                    INT_MSK2_CSD1:             equ 40h ; MASK: enable/disable CSD1 block interrupt
   314  0080                    INT_MSK2_RTC:              equ 80h ; MASK: enable/disable RTC block interrupt
   315                          
   316  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   317  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   318                          
   319                          ;------------------------------------------------------
   320                          ;  MAC Registers
   321                          ;------------------------------------------------------
   322                          
   323  00E8                    MUL0_X:       equ 0E8h          ; Multiply Input X Register                (W)
   324  00E9                    MUL0_Y:       equ 0E9h          ; Multiply Input Y Register                (W)
   325  00EA                    MUL0_DH:      equ 0EAh          ; Multiply Result High Byte Register       (R)
   326  00EB                    MUL0_DL:      equ 0EBh          ; Multiply Result Low Byte Register        (R)
   327                          
   328  00EC                    ACC0_DR1:     equ 0ECh          ; Accumulator Data Register 1              (RW)
   329  00ED                    ACC0_DR0:     equ 0EDh          ; Accumulator Data Register 0              (RW)
   330  00EE                    ACC0_DR3:     equ 0EEh          ; Accumulator Data Register 3              (RW)
   331  00EF                    ACC0_DR2:     equ 0EFh          ; Accumulator Data Register 2              (RW)
   332                          
   333                          ; DECIMATOR Control Registers
   334  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   335  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   336                          
   337                          ;------------------------------------------------------
   338                          ;  System Status and Control Registers
   339                          ;
   340                          ;  Note: The following registers are mapped into both
   341                          ;        register bank 0 AND register bank 1.
   342                          ;------------------------------------------------------
   343  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   344                                                             ; Use FLAG_ masks defined at top of file
   345                          
   346  00FD                    DAC_D:        equ 0FDh		   ; DAC Data Register                        (RW)
   347                          
   348  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   349  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: flag, Internal Reset Status bit
   350  0010                    CPU_SCR1_SLIMO:         equ 10h	   ; MASK: Slow IMO (internal main osc) enable
   351  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   352  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   353  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   354                          
   355  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   356  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   357  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   358  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   359  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   360  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   361                          
   362                          ;------------------------------------------------------
   363                          ;  Neon Capsense Digital Control Registers
   364                          ;------------------------------------------------------
   365  0050                    CSD0_DR0_L:				equ 50h		; Capsense 0 data low 0				(RW)
   366  0054                    CSD0_DR0_H:				equ 54h		; Capsense 0 data high 0			(RW)
   367  0058                    CSD1_DR0_L:				equ 58h		; Capsense 1 data low 0				(RW)
   368  005C                    CSD1_DR0_H:				equ 5Ch		; Capsense 1 data high 0			(RW)
   369  0051                    CSD0_DR1_L:				equ 51h		; Capsense 0 data low 1				(RW)
   370  0055                    CSD0_DR1_H:				equ 55h		; Capsense 0 data high 1			(RW)
   371  0059                    CSD1_DR1_L:				equ 59h		; Capsense 1 data low 1				(RW)
   372  005D                    CSD1_DR1_H:				equ 5Dh		; Capsense 1 data high 1			(RW)
   373  0052                    CSD0_CNT_L:				equ 52h		; Capsense 0 counter low			(RW)
   374  0056                    CSD0_CNT_H:				equ 56h		; Capsense 0 counter high			(RW)
   375  005A                    CSD1_CNT_L:				equ 5Ah		; Capsense 1 counter low			(RW)
   376  005E                    CSD1_CNT_H:				equ	5Eh		; Capsense 1 counter high			(RW)
   377  0053                    CSD0_CR0:				equ 53h		; Capsense 0 control 0				(RW)
   378  005B                    CSD1_CR0:				equ 5Bh		; Capsense 1 control 0				(RW)
   379  0057                    CSD0_CR1:				equ 57h		; Capsense 0 control 1				(RW)
   380  005F                    CSD1_CR1:				equ 5Fh		; Capsense 1 control 1				(RW)
   381                          
   382                          ;------------------------------------------------------
   383                          ;  Neon Analog Registers
   384                          ;------------------------------------------------------
   385  0065                    ASY_CR:					equ 65h		; Analog Synchronization Control	(RW)
   386  006A                    ADC_DH:					equ 6Ah		; ADC data high						(RW)
   387  006B                    ADC_DL:					equ 6Bh		; ADC data low						(RW)
   388  00C8                    PWMVREF0:				equ C8h		; PWM Voltage Reference 0			(RW)
   389  00C9                    PWMVREF1:				equ C9h		; PWM Voltage Reference 1			(RW)
   390  00CB                    PWMSRC:					equ CBh		; PWM Source						(RW)
   391  00CA                    IDACMODE:				equ CAh		; IDAC Mode							(RW)
   392  00FC                    IDACR_D:				equ FCh		; Analog Mux DAC data 0				(RW)
   393  00FD                    IDACL_D:				equ FDh		; Analog Mux DAC data 1				(RW)
   394                          
   395                          ;------------------------------------------------------
   396                          ;  Neon Digital Registers
   397                          ;------------------------------------------------------
   398  00B7                    RDI0DSM:				equ B7h		; Row Digital Interconnect input select 0	(RW)
   399  00BF                    RDI1DSM:				equ BFh		; Row Digital Interconnect input select 1	(RW)
   400                          
   401                          ;------------------------------------------------------
   402                          ;  Neon Test Registers
   403                          ;------------------------------------------------------
   404  00CC                    TSCR0:					equ CCh		; Tsource 0							(RW)
   405  00CD                    TSCMPH:					equ CDh		; TSCMP high						(RW)
   406  00CE                    TSCMPL:					equ CEh		; TSCMP low							(RW)
   407  00CF                    TSCR1:					equ CFh		; Tsource 1							(RW)
   408                          
   409                          ;;=============================================================================
   410                          ;;      Register Space, Bank 1
   411                          ;;=============================================================================
   412                          
   413                          ;------------------------------------------------
   414                          ;  Port Registers
   415                          ;  Note: Also see this address range in Bank 0.
   416                          ;------------------------------------------------
   417                          ; Port 0
   418  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   419  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   420  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   421  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   422                          
   423                          ; Port 1
   424  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   425  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   426  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   427  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   428                          
   429                          ; Port 2
   430  0008                    PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
   431  0009                    PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
   432  000A                    PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
   433  000B                    PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
   434                          
   435                          ; Port 3
   436  000C                    PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
   437  000D                    PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
   438  000E                    PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
   439  000F                    PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
   440                          
   441                          ; Port 4
   442  0010                    PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
   443  0011                    PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
   444  0012                    PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
   445  0013                    PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
   446                          
   447                          ;------------------------------------------------
   448                          ;  Digital PSoC(tm) block Registers
   449                          ;  Note: Also see this address range in Bank 0.
   450                          ;------------------------------------------------
   451                          
   452                          ; Digital PSoC block 00, Basic Type C
   453  0020                    DBC00FN:      equ 20h          ; Function Register                        (RW)
   454  0021                    DBC00IN:      equ 21h          ;    Input Register                        (RW)
   455  0022                    DBC00OU:      equ 22h          ;   Output Register                        (RW)
   456  0023                    DBC00CR1:     equ 23h          ;   control & status register 1            (RW)
   457                          
   458                          ; Digital PSoC block 01, Basic Type C
   459  0024                    DBC01FN:      equ 24h          ; Function Register                        (RW)
   460  0025                    DBC01IN:      equ 25h          ;    Input Register                        (RW)
   461  0026                    DBC01OU:      equ 26h          ;   Output Register                        (RW)
   462  0027                    DBC01CR1:     equ 27h          ;   control & status register 1            (RW)
   463                          
   464                          ; Digital PSoC block 02, Communications Type C
   465  0028                    DCC02FN:      equ 28h          ; Function Register                        (RW)
   466  0029                    DCC02IN:      equ 29h          ;    Input Register                        (RW)
   467  002A                    DCC02OU:      equ 2Ah          ;   Output Register                        (RW)
   468  002B                    DBC02CR1:     equ 2Bh          ;   control & status register 1            (RW)
   469                          
   470                          ; Digital PSoC block 03, Communications Type C
   471  002C                    DCC03FN:      equ 2Ch          ; Function Register                        (RW)
   472  002D                    DCC03IN:      equ 2Dh          ;    Input Register                        (RW)
   473  002E                    DCC03OU:      equ 2Eh          ;   Output Register                        (RW)
   474  0029                    DBC03CR1:     equ 29h          ;   control & status register 1            (RW)
   475                          
   476                          ; Digital PSoC block 10, Basic Type C
   477  0030                    DBC10FN:      equ 30h          ; Function Register                        (RW)
   478  0031                    DBC10IN:      equ 31h          ;    Input Register                        (RW)
   479  0032                    DBC10OU:      equ 32h          ;   Output Register                        (RW)
   480  0033                    DBC10CR1:     equ 33h          ;   control & status register 1            (RW)
   481                          
   482                          ; Digital PSoC block 11, Basic Type C
   483  0034                    DBC11FN:      equ 34h          ; Function Register                        (RW)
   484  0035                    DBC11IN:      equ 35h          ;    Input Register                        (RW)
   485  0036                    DBC11OU:      equ 36h          ;   Output Register                        (RW)
   486  0037                    DBC11CR1:     equ 37h          ;   control & status register 1            (RW)
   487                          
   488                          ; Digital PSoC block 12, Communications Type C
   489  0038                    DCC12FN:      equ 38h          ; Function Register                        (RW)
   490  0039                    DCC12IN:      equ 39h          ;    Input Register                        (RW)
   491  003A                    DCC12OU:      equ 3Ah          ;   Output Register                        (RW)
   492  003B                    DBC12CR1:     equ 3Bh          ;   control & status register 1            (RW)
   493                          
   494                          ; Digital PSoC block 13, Communications Type C
   495  003C                    DCC13FN:      equ 3Ch          ; Function Register                        (RW)
   496  003D                    DCC13IN:      equ 3Dh          ;    Input Register                        (RW)
   497  003E                    DCC13OU:      equ 3Eh          ;   Output Register                        (RW)
   498  003F                    DBC13CR1:     equ 3Fh          ;   control & status register 1            (RW)
   499                          
   500                          ;------------------------------------------------
   501                          ;  System and Global Resource Registers
   502                          ;  Note: Also see this address range in Bank 0.
   503                          ;------------------------------------------------
   504                          
   505  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   506  00C0                    CLK_CR0_ACOLUMN_3:    equ C0h    ; MASK: Specify clock for analog cloumn
   507  0030                    CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
   508  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   509  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   510                          
   511  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   512  0018                    CLK_CR1_ACLK1:        equ 18h    ; MASK: Digital PSoC block for analog source
   513  0003                    CLK_CR1_ACLK0:        equ 03h    ; MASK: Digital PSoC block for analog source
   514                          
   515  0003                    CLK_CR1_ACLK2:        equ 03h    ; Deprecated do not use
   516                          
   517  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   518  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   519                          
   520  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   521  000F                    AMD_CR0_AMOD0:        equ 0Fh    ; MASK: Modulation source for analog column 0
   522                          
   523  0064                    CMP_GO_EN:    equ 64h          ; Comparator Bus To Global Out Enable      (RW)
   524  0080                    CMP_GO_EN_GOO5:       equ 80h    ; MASK: Selected Col 1 signal to GOO5
   525  0040                    CMP_GO_EN_GOO1:       equ 40h    ; MASK: Selected Col 1 signal to GOO1
   526  0030                    CMP_GO_EN_SEL1:       equ 30h    ; MASK: Column 1 Signal Select
   527  0008                    CMP_GO_EN_GOO4:       equ 08h    ; MASK: Selected Col 0 signal to GOO4
   528  0004                    CMP_GO_EN_GOO0:       equ 04h    ; MASK: Selected Col 0 signal to GOO0
   529  0003                    CMP_GO_EN_SEL0:       equ 03h    ; MASK: Column 0 Signal Select
   530                          
   531  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   532  000F                    AMD_CR1_AMOD1:        equ 0Fh    ; MASK: Modulation ctrl for analog column 1
   533                          
   534  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   535  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   536  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   537                          
   538  006B                    CLK_CR3:      equ 6Bh          ; Analog Clock Source Control Register 3   (RW)
   539  0040                    CLK_CR3_SYS1:         equ 40h    ; MASK: Analog Clock 1 selection
   540  0030                    CLK_CR3_DIVCLK1:      equ 30h    ; MASK: Analog Clock 1 divider
   541  0004                    CLK_CR3_SYS0:         equ 04h    ; MASK: Analog Clock 0 selection
   542  0003                    CLK_CR3_DIVCLK0:      equ 03h    ; MASK: Analog Clock 0 divider
   543                          
   544                          ;------------------------------------------------
   545                          ;  Global Digital Interconnects
   546                          ;------------------------------------------------
   547                          
   548  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   549  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   550  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   551  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   552                          
   553  00A0                    GDI_O_IN_CR:  equ 0A0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   554  00A1                    GDI_E_IN_CR:  equ 0A1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   555  00A2                    GDI_O_OU_CR:  equ 0A2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   556  00A3                    GDI_E_OU_CR:  equ 0A3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   557                          
   558  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   559  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   560                          
   561                          ;------------------------------------------------
   562                          ;  Analog Mux Bus Port Enable Bits
   563                          ;------------------------------------------------
   564  00D8                    MUX_CR0:      equ 0D8h          ; Analog Mux Port 0 Bit Enables Register
   565  00D9                    MUX_CR1:      equ 0D9h          ; Analog Mux Port 1 Bit Enables Register
   566  00DA                    MUX_CR2:      equ 0DAh          ; Analog Mux Port 2 Bit Enables Register
   567  00DB                    MUX_CR3:      equ 0DBh          ; Analog Mux Port 3 Bit Enables Register
   568  00EC                    MUX_CR4:      equ 0ECh          ; Analog Mux Port 4 Bit Enables Register
   569                          
   570                          ;------------------------------------------------
   571                          ;  Clock and System Control Registers
   572                          ;------------------------------------------------
   573                          
   574  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   575  0080                    OSC_GO_EN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   576  0040                    OSC_GO_EN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   577  0020                    OSC_GO_EN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   578  0010                    OSC_GO_EN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   579  0008                    OSC_GO_EN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   580  0004                    OSC_GO_EN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   581  0002                    OSC_GO_EN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   582  0001                    OSC_GO_EN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   583                          
   584  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   585  0003                    OSC_CR4_VC3SEL:       equ 03h    ; MASK: System VC3 Clock source
   586                          
   587  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   588                          
   589  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   590  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   591  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   592  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   593  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   594  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   595  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   596  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   597  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   598  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   599  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   600  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   601  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   602  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   603  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   604  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   605  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   606  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   607                          
   608  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   609  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   610  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   611                          
   612  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   613  0080                    OSC_CR2_PLLGAIN:      equ 80h    ; MASK: High/Low gain
   614  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   615  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   616  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   617                          
   618  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   619  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   620  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   621  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   622  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   623  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   624  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   625  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   626                          
   627  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   628  0008                    VLT_CMP_NOWRITE:      equ 08h    ; MASK: Vcc below Flash Write level
   629  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   630  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   631  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   632                          
   633  00E5                    ADC0_TR:      equ 0E5h          ; ADC Column 0 Trim Register
   634  00E6                    ADC1_TR:      equ 0E6h          ; ADC Column 1 Trim Register
   635                          
   636  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   637  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   638  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   639  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   640                          
   641  00FA                    FLS_PR1:      equ 0FAh          ; Flash Program Register 1                 (RW)
   642  0003                    FLS_PR1_BANK:         equ 03h    ; MASK: Select Active Flash Bank
   643                          
   644  00FD                    DAC_CR0:       equ 0FDh          ; Analog Mux DAC Control Register 0
   645  00DC                    DAC_CR1:       equ 0DCh          ; Analog Mux DAC Control Register 1
   646  0008                    DAC_CR_IRANGE:        equ 08h    ; MASK: Sets the DAC Range low or high
   647  0006                    DAC_CR_OSCMODE:       equ 06h    ; MASK: Defines the reset mode for AMux
   648  0001                    DAC_CR_ENABLE:        equ 01h    ; MASK: Enable/Disable DAC function
   649                          
   650                          ;------------------------------------------------
   651                          ;  I2C Control Registers
   652                          ;------------------------------------------------
   653                          
   654  00AD                    I2C_ADDR:    equ 0ADh          ; I2C Address Register (RW)
   655                          
   656                          ;------------------------------------------------------
   657                          ;  Neon Analog Registers
   658                          ;------------------------------------------------------
   659  0053                    VDAC50CR0:		equ 53h			; V DAC5 control 0				(RW)
   660  0057                    VDAC51CR0:		equ 57h			; V DAC5 control 1				(RW)
   661  00A8                    ADC_CR0:		equ A8h			; ADC control 0					(RW)
   662  00A9                    ADC_CR1:		equ A9h			; ADC control 1					(RW)
   663  00AA                    ADC_CR2:		equ AAh			; ADC control 2					(RW)
   664  00AB                    ADC_CR3TRIM:	equ ABh			; ADC control 3					(RW)
   665  00AC                    ADC_CR4:		equ ACh			; ADC control 4					(RW)
   666  00E7                    VDAC_TRIM:		equ E7h			; V DAC trim					(RW)
   667                          
   668                          ;------------------------------------------------------
   669                          ;  Neon Current Sense CMP Registers
   670                          ;------------------------------------------------------
   671  0050                    CMP0CR1:		equ 50h			; CMP0 control 1				(RW)
   672  0051                    CMP0CR2:		equ 51h			; CMP0 control 2				(RW)
   673  0054                    CMP1CR1:		equ 54h			; CMP1 control 1				(RW)
   674  0055                    CMP1CR2:		equ 55h			; CMP1 control 2				(RW)
   675  0058                    CSCMPCR0:		equ 58h			; CSCMP control 0				(RW)
   676  0059                    CSCMPGOEN:		equ 59h			; CSCMO global out enable		(RW)
   677  005A                    CSLUTCR0:		equ 5Ah			; CSLUT control 0				(RW)
   678  005B                    CMPCOLMUX:		equ 5Bh			; CMP Column Mux				(RW)
   679  005C                    CMPPWMCR:		equ 5Ch			; CMP PWM control				(RW)
   680  005D                    CMPFLTCR:		equ 5Dh			; CMP filter control			(RW)
   681  005E                    CMPCLK1:		equ 5Eh			; CMP clock 1					(RW)
   682  005F                    CMPCLK0:		equ 5Fh			; CMP clock 0					(RW)
   683                          
   684                          ;------------------------------------------------------
   685                          ;  Neon Real Time Clock Registers
   686                          ;------------------------------------------------------
   687  00A4                    RTCH:			equ A4h			; Real time current hour		(RW)
   688  00A5                    RTCM:			equ A5h			; Real time current minute		(RW)
   689  00A6                    RTCS:			equ A6h			; Real time current second		(RW)
   690  00A7                    RTCCR:			equ A7h			; Real time clock control		(RW)
   691                          
   692                          ;------------------------------------------------------
   693                          ;  Analog MUX Config Registers
   694                          ;------------------------------------------------------
   695                          
   696  006A                    AMUX_CFG1:			equ 6Ah  ; Analog MUX Configuration 1
   697  0020                    AMUX_CFG1_GOINVR:	equ 20h  ;
   698  0010                    AMUX_CFG1_GOINVL:  	equ 10h	 ;
   699  000C                    AMUX_CFG1_AMUXMODR:	equ 0Ch	 ;
   700  0003                    AMUX_CFG1_AMUXMODL:	equ 03h	 ;
   701                          
   702                          ;;=============================================================================
   703                          ;;      M8C System Macros
   704                          ;;  These macros should be used when their functions are needed.
   705                          ;;=============================================================================
   706                          
   707                          ;----------------------------------------------------
   708                          ;  Swapping Register Banks
   709                          ;----------------------------------------------------
   710                              macro M8C_SetBank0
   711                              and   F, ~FLAG_XIO_MASK
   712  3D73                        endm
   713                          
   714                              macro M8C_SetBank1
   715                              or    F, FLAG_XIO_MASK
   716  3D73                        endm
   717                          
   718                          ;----------------------------------------------------
   719                          ;  Global Interrupt Enable/Disable
   720                          ;----------------------------------------------------
   721                              macro M8C_EnableGInt
   722                              or    F, FLAG_GLOBAL_IE
   723  3D73                        endm
   724                          
   725                              macro M8C_DisableGInt
   726                              and   F, ~FLAG_GLOBAL_IE
   727  3D73                        endm
   728                          
   729                          ;----------------------------------------------------
   730                          ;  Enable/Disable Interrupt Mask
   731                          ;
   732                          ;  Use the following macros to enable/disable
   733                          ;  bits in the Interrupt mask registers,
   734                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   735                          ;
   736                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   737                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   738                          ;
   739                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   740                          ;        and MASK is the bit set to enable or disable
   741                          ;----------------------------------------------------
   742                          ; Disable Interrupt Bit Mask(s)
   743                              macro M8C_DisableIntMask
   744                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   745  3D73                        endm
   746                          
   747                          ; Enable Interrupt Bit Mask(s)
   748                              macro M8C_EnableIntMask
   749                              or    reg[@0], @1               ; enable specified interrupt enable bit
   750  3D73                        endm
   751                          
   752                          ;----------------------------------------------------
   753                          ;  Clear Posted Interrupt Flag Mask
   754                          ;
   755                          ;  Use the following macros to clear the
   756                          ;  bits in the Interrupt Clear registers,
   757                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   758                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   759                          ;
   760                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   761                          ;        and MASK is the bit set to enable or disable
   762                          ;----------------------------------------------------
   763                              macro M8C_ClearIntFlag
   764                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   765  3D73                        endm
   766                          
   767                          ;----------------------------------------------------
   768                          ;  Power-On Reset & WatchDog Timer Functions
   769                          ;----------------------------------------------------
   770                              macro M8C_EnableWatchDog
   771                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   772  3D73                        endm
   773                          
   774                              macro M8C_ClearWDT
   775                              mov   reg[RES_WDT], 00h
   776  3D73                        endm
   777                          
   778                              macro M8C_ClearWDTAndSleep
   779                              mov   reg[RES_WDT], 38h
   780  3D73                        endm
   781                          
   782                          ;----------------------------------------------------
   783                          ;  Sleep, CPU Stop & Software Reset
   784                          ;----------------------------------------------------
   785                              macro M8C_Sleep
   786                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   787                              ; The next instruction to be executed depends on the state of the
   788                              ; various interrupt enable bits. If some interrupts are enabled
   789                              ; and the global interrupts are disabled, the next instruction will
   790                              ; be the one that follows the invocation of this macro. If global
   791                              ; interrupts are also enabled then the next instruction will be
   792                              ; from the interrupt vector table. If no interrupts are enabled
   793                              ; then the CPU sleeps forever.
   794  3D73                        endm
   795                          
   796                              macro M8C_Stop
   797                              ; In general, you probably don't want to do this, but here's how:
   798                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   799                              ; Next instruction to be executed is located in the interrupt
   800                              ; vector table entry for Power-On Reset.
   801  3D73                        endm
   802                          
   803                              macro M8C_Reset
   804                              ; Restore CPU to the power-on reset state.
   805                              mov A, 0
   806                              SSC
   807                              ; Next non-supervisor instruction will be at interrupt vector 0.
   808  3D73                        endm
   809                          
   810                          ;----------------------------------------------------
   811                          ; ImageCraft Code Compressor Actions
   812                          ;----------------------------------------------------
   813                              ; Suspend Code Compressor
   814                              ; Must not span a RET or RETI instruction
   815                              ; without resuming code compression
   816                              macro Suspend_CodeCompressor
   817                              or   F, 0
   818  3D73                        endm
   819                          
   820                              ; Resume Code Compression
   821                              macro Resume_CodeCompressor
   822                              add  SP, 0
   823                              endm
      + 3D73                    
      + 3D73                    ; end of file m8c.inc
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;
     4                          ;;       FILENAME: Memory.inc
     5                          ;;
     6                          ;;    DESCRIPTION: Memory Model and Stack Parameter Definitions for 
     7                          ;;                 CY8C22045 PSoC devices.
     8                          ;;
     9                          ;;  LAST MODIFIED: August 17, 2004
    10                          ;;
    11                          ;;-----------------------------------------------------------------------------
    12                          ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
    13                          ;;*****************************************************************************
    14                          ;;*****************************************************************************
    15                          ;
    16                          ;
    17                          ;  ******** Define Memory Model and Stack parameters ********
    18                          ;
    19  0001                    IMAGECRAFT: equ 1   
    20  0002                    HITECH: equ 2   
    21  0002                    TOOLCHAIN: equ HITECH   
    22  0001                    SYSTEM_LARGE_MEMORY_MODEL: equ 1   
    23  0000                    SYSTEM_SMALL_MEMORY_MODEL: equ 0   
    24  0003                    SYSTEM_STACK_PAGE: equ 3   
    25  0000                    SYSTEM_STACK_PAGE_OFFSET: equ 0   
    26  0002                    SYSTEM_TOOLS: equ 2   
    27  0000                    SYSTEM_IDXPG_TRACKS_STK_PP: equ 0   
    28  0001                    SYSTEM_IDXPG_TRACKS_IDX_PP: equ 1   
    29  0000                    SYSTEM_MULTIPAGE_STACK: equ 0 
    30                          
    31                          
    32                          ;  ******* Function Class Definitions *******
    33                          ;
    34                          ;  These definitions are used to describe RAM access patterns. They provide
    35                          ;  documentation and they control prologue and epilogue macros that perform
    36                          ;  the necessary housekeeping functions for large memory model devices like
    37                          ;  the CY8C22045.
    38                          
    39  0001                    RAM_USE_CLASS_1:               equ 1   ; PUSH, POP & I/O access
    40  0002                    RAM_USE_CLASS_2:               equ 2   ; Indexed address mode on stack page
    41  0004                    RAM_USE_CLASS_3:               equ 4   ; Indexed address mode to any page
    42  0008                    RAM_USE_CLASS_4:               equ 8   ; Direct/Indirect address mode access
    43                          
    44                          ; ******* Hi Tech Specific *******
    45                          ; Turn on the expansion of all macros by default
    46                          IF (TOOLCHAIN & HITECH)
    47                          OPT EXPAND
    48                          ENDIF
    49                          ; ******* Page Pointer Manipulation Macros *******
    50                          ;
    51                          ;  ******* Page Pointer Manipulation Macros *******
    52                          ;
    53                          ;  Most of the following macros are conditionally compiled so they only
    54                          ;  produce code if the large memory model is selected.
    55                          
    56                             ;-----------------------------------------------
    57                             ;  Set Stack Page Macro
    58                             ;-----------------------------------------------
    59                             ;
    60                             ;  DESC: Modify STK_PP in the large or small memory Models.
    61                             ;
    62                             ; INPUT: Constant (e.g., SYSTEM_STACK_PAGE) that specifies the RAM page on
    63                             ;        which stack operations like PUSH and POP store and retrieve their
    64                             ;        data
    65                             ;
    66                             ;  COST: 8 instruction cycles (in LMM only)
    67                          
    68                             macro RAM_SETPAGE_STK( PG_NUMBER )
    69                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    70                                mov reg[STK_PP], @PG_NUMBER
    71                             ENDIF
    72  3D73                       endm
    73                          
    74                             ;-----------------------------------------------
    75                             ;  Set Current Page Macro
    76                             ;-----------------------------------------------
    77                             ;
    78                             ;  DESC: Modify CUR_PP in the large or small memory Models.
    79                             ;
    80                             ; INPUT: Constant value (e.g., >bFoo) for the RAM page number used in
    81                             ;        calculation of effective direct-mode address operands.
    82                             ;
    83                             ;  COST: 8 instruction cycles (in LMM only)
    84                          
    85                             macro RAM_SETPAGE_CUR( PG_NUMBER )
    86                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    87                                mov reg[CUR_PP], @PG_NUMBER
    88                             ENDIF
    89  3D73                       endm
    90                          
    91                             ;-----------------------------------------------
    92                             ;  Set Index Page Macro
    93                             ;-----------------------------------------------
    94                             ;
    95                             ;  DESC: Modify IDX_PP in the large or small emory Models.
    96                             ;
    97                             ; INPUT: Constant value (e.g., >caFoo) for the RAM page number used in
    98                             ;         calculation of effective index-mode address operands.
    99                             ;
   100                             ;  COST: 8 instruction cycles (in LMM only)
   101                          
   102                             macro RAM_SETPAGE_IDX( PG_NUMBER )
   103                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   104                                mov reg[IDX_PP], @PG_NUMBER
   105                             ENDIF
   106  3D73                       endm
   107                          
   108                             ;-----------------------------------------------
   109                             ;  Set MVI Read Page Macro
   110                             ;-----------------------------------------------
   111                             ;
   112                             ;  DESC: Modify MVR_PP in the large or small memory Models.
   113                             ;
   114                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   115                             ;        calculation of indirect address operands used in the
   116                             ;        "mvi A, [pFoo]" instructions.
   117                             ;
   118                             ;  COST: 8 instruction cycles (in LMM only)
   119                          
   120                             macro RAM_SETPAGE_MVR( PG_NUMBER )
   121                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   122                                mov reg[MVR_PP], @PG_NUMBER
   123                             ENDIF
   124  3D73                       endm
   125                          
   126                             ;-----------------------------------------------
   127                             ;  Set MVI Write Page Macro
   128                             ;-----------------------------------------------
   129                             ;
   130                             ;  DESC: Modify MVW_PP in the large or small memory Models.
   131                             ;
   132                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   133                             ;        calculation of indirect address operands used in the
   134                             ;        "mvi [pFoo], A" instructions.
   135                             ;
   136                             ;  COST: 8 instruction cycles (in LMM only)
   137                          
   138                             macro RAM_SETPAGE_MVW( PG_NUMBER )
   139                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   140                                mov reg[MVW_PP], @PG_NUMBER
   141                             ENDIF
   142  3D73                       endm
   143                          
   144                             ;-----------------------------------------------
   145                             ;  Force Index Page Pointer to Stack Page
   146                             ;-----------------------------------------------
   147                             ;
   148                             ;  DESC: Map index-mode operands onto the stack page by modifying IDX_PP.
   149                             ;        See also RAM_LOCK_INDEX_TO_STACKPAGE.
   150                             ;
   151                             ; INPUT: None
   152                             ;
   153                             ;  COST: 8 instruction cycles (in LMM only)
   154                          
   155                             macro RAM_SETPAGE_IDX2STK
   156                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   157                                IF ( SYSTEM_MULTIPAGE_STACK )
   158                                   mov   A, reg[STK_PP]
   159                                   mov   reg[IDX_PP], A
   160                                ELSE
   161                                   RAM_SETPAGE_IDX SYSTEM_STACK_PAGE
   162                                ENDIF
   163                             ENDIF
   164  3D73                       endm
   165                          
   166                             ;-----------------------------------------------
   167                             ;  Change Memory Mode
   168                             ;-----------------------------------------------
   169                             ;
   170                             ;  DESC: Modify FLAG_PAGEMODE bits in the large and small memory Models.
   171                             ;
   172                             ; INPUT: Constant value for PGMODE bitfield of CPU Flag register, F.
   173                             ;        See FLAG_PGMODE_{x} constants in M8C.INC.
   174                             ;
   175                             ;  COST: 8 instruction cycles (in LMM only)
   176                          
   177                             macro RAM_CHANGE_PAGE_MODE( MODE )
   178                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   179                                and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
   180                                or    F,  FLAG_PGMODE_MASK & @MODE
   181                             ENDIF
   182  3D73                       endm
   183                          
   184                             ;-----------------------------------------------
   185                             ;  Set Large Memory Model Native Paging Mode
   186                             ;-----------------------------------------------
   187                             ;
   188                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   189                             ;        paging mode *IFF* a simple "OR" is guaranteed to work---for
   190                             ;        example, in an ISR, when the PGMODE bits have been cleared
   191                             ;        to zero. If a simple "OR" is not guaranteed to work, use
   192                             ;        the slower RAM_RESTORE_NATIVE_PAGING instead.
   193                             ;
   194                             ; INPUT: none
   195                             ;
   196                             ;  COST: 4 instruction cycles (in LMM only)
   197                          
   198                             macro RAM_SET_NATIVE_PAGING
   199                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   200                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   201                                or    F,  FLAG_PGMODE_11b            ; LMM w/ IndexPage<==>StackPage
   202                             ENDIF ;  PGMODE LOCKED
   203                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   204                                or    F,  FLAG_PGMODE_10b            ; LMM with independent IndexPage
   205                             ENDIF ; PGMODE FREE
   206                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   207  3D73                       endm
   208                          
   209                             ;-----------------------------------------------
   210                             ; Restore Large Memory Model Native Paging Mode
   211                             ;-----------------------------------------------
   212                             ;
   213                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   214                             ;        paging mode. Always works because it clears the PGMODE bits
   215                             ;        before OR-ing in the new ones. See RAM_RESTORE_NATIVE_PAGING
   216                             ;        for a faster method.
   217                             ;
   218                             ; INPUT: none
   219                             ;
   220                             ;  COST: 8 instruction cycles (in LMM only)
   221                          
   222                             macro RAM_RESTORE_NATIVE_PAGING
   223                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   224                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   225                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_11b ; LMM w/ IndexPage<==>StackPage
   226                             ENDIF ;  PGMODE LOCKED
   227                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   228                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b ; LMM with independent IndexPage
   229                             ENDIF ; PGMODE FREE
   230                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   231  3D73                       endm
   232                          
   233                             ;-----------------------------------------------
   234                             ; Force indexed addr mode operands to Stack Pg
   235                             ;-----------------------------------------------
   236                             ;
   237                             ;  DESC: Force instructions that use indexed address mode to reference the
   238                             ;        stack page (as defined by STK_PP). This macro sets the "Indexed
   239                             ;        Stack Mode" bit (LSB) of the PGMODE bit field in the CPU Flag
   240                             ;        register, F. (See also RAM_SETPAGE_IDX2STK, above.)
   241                             ;
   242                             ; INPUT: none
   243                             ;
   244                             ;  COST: 4 instruction cycles (in LMM only)
   245                          
   246                             macro RAM_X_POINTS_TO_STACKPAGE
   247                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   248                                or   F, FLAG_PGMODE_01b
   249                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   250  3D73                       endm
   251                          
   252                             ;-----------------------------------------------
   253                             ;  Force indexed addr mode operands to Index Pg
   254                             ;-----------------------------------------------
   255                             ;
   256                             ;  DESC: Permit instructions that use indexed address mode to reference page
   257                             ;        zero or the page pointed to by the IDX_PP register, depending on the
   258                             ;        setting of the MSb (or "Direct Page Mode" bit) of the PGMODE bits
   259                             ;        in the CPU Flag register, F. (This macro clears the PGMODE LSb.)
   260                             ;
   261                             ; INPUT: none
   262                             ;
   263                             ;  COST: 4 instruction cycles (in LMM only)
   264                          
   265                             macro RAM_X_POINTS_TO_INDEXPAGE
   266                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   267                                and  F, ~FLAG_PGMODE_01b
   268                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   269  3D73                       endm
   270                          
   271                             ;-----------------------------------------------
   272                             ;  Function Prologue
   273                             ;-----------------------------------------------
   274                             ;
   275                             ;  Prologue for functions that run in the LMM and SMM.
   276                             ;
   277                          
   278                             macro RAM_PROLOGUE( ACTUAL_CLASS )
   279                          
   280                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   281                             ; Nothing to do
   282                             ENDIF ; RAM_USE_CLASS_1
   283                          
   284                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   285                                IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   286                                   RAM_X_POINTS_TO_STACKPAGE         ; exit native paging mode!
   287                                ENDIF
   288                             ENDIF ; RAM_USE_CLASS_2
   289                          
   290                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   291                                IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   292                                   RAM_X_POINTS_TO_INDEXPAGE         ; exit native paging mode!
   293                                ENDIF
   294                             ENDIF ; RAM_USE_CLASS_3
   295                          
   296                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   297                             ; Nothing to do
   298                             ENDIF ; RAM_USE_CLASS_4
   299                          
   300  3D73                       endm
   301                          
   302                             ;-----------------------------------------------
   303                             ;  Function Epilogue
   304                             ;-----------------------------------------------
   305                             ;
   306                             ;  Prologue for functions that run in the LMM and SMM.
   307                             ;
   308                          
   309                             macro RAM_EPILOGUE( ACTUAL_CLASS )
   310                          
   311                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   312                             ; Nothing to do
   313                             ENDIF ; RAM_USE_CLASS_1
   314                          
   315                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   316                                RAM_RESTORE_NATIVE_PAGING
   317                             ENDIF ; RAM_USE_CLASS_2
   318                          
   319                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   320                                RAM_RESTORE_NATIVE_PAGING
   321                             ENDIF ; RAM_USE_CLASS_3
   322                          
   323                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   324                             ; Nothing to do
   325                             ENDIF ; RAM_USE_CLASS_4
   326                          
   327  3D73                       endm
   328                          
   329                             ;-----------------------------------------------
   330                             ;  Preserve Register
   331                             ;-----------------------------------------------
   332                             ;
   333                             ;  DESC: Preserve a register value on the stack
   334                             ;
   335                             ; INPUT: Name or address of register in I/O Space
   336                             ;        The I/O bank is an implicit parameter. That is, this function will
   337                             ;        Access the I/O bank currently specified by the CPU Flag register.
   338                             ;
   339                             ;  USES: CPU 'A' register
   340                             ;
   341                             ;  COST: 9 instruction cycles
   342                          
   343                             macro REG_PRESERVE( IOReg )
   344                             mov   A, reg[ @IOReg ]
   345                             push  A
   346  3D73                       endm
   347                          
   348                             ;-----------------------------------------------
   349                             ;  Restore Register
   350                             ;-----------------------------------------------
   351                             ;
   352                             ;  DESC: Restore a register value from the stack
   353                             ;
   354                             ; INPUT: Name or address of register in I/O Space
   355                             ;        The I/O bank is an implicit parameter. That is, this function will
   356                             ;        Access the I/O bank currently specified by the CPU Flag register.
   357                             ;
   358                             ;  USES: CPU 'A' register
   359                             ;
   360                             ;  COST: 10 instruction cycles
   361                          
   362                             macro REG_RESTORE( IOReg )
   363                             pop   A
   364                             mov   reg[ @IOReg ], A
   365  3D73                       endm
   366                          
   367                             ;-----------------------------------------------
   368                             ;  Preserve Volatile Page Pointer Registers
   369                             ;-----------------------------------------------
   370                             ;
   371                             ;  DESC: Invoked by ISRs before switching to the LMM mode and calling
   372                             ;        functions that require on it.
   373                             ;
   374                             ; INPUT: none
   375                             ;
   376                             ;  USES: CPU 'A' register
   377                             ;
   378                             ;  COST: 45 instruction cycles (in LMM only)
   379                          
   380                             macro ISR_PRESERVE_PAGE_POINTERS
   381                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   382                                REG_PRESERVE CUR_PP
   383                                REG_PRESERVE IDX_PP
   384                                REG_PRESERVE MVR_PP
   385                                REG_PRESERVE MVW_PP
   386                             ENDIF
   387  3D73                       endm
   388                          
   389                             ;-----------------------------------------------
   390                             ;  Restore Volatile Page Pointer Registers
   391                             ;-----------------------------------------------
   392                             ;
   393                             ;  DESC: Undo for RAM_PRESERVE_PAGE_POINTERS macro. Invoked by ISRs after
   394                             ;        calling functions that run in the LMM mode and before executing
   395                             ;        the RETI instruction.
   396                             ;
   397                             ; INPUT: none
   398                             ;
   399                             ;  USES: CPU 'A' register
   400                             ;
   401                             ;  COST: 50 instruction cycles (in LMM only)
   402                          
   403                             macro ISR_RESTORE_PAGE_POINTERS
   404                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   405                                REG_RESTORE MVW_PP
   406                                REG_RESTORE MVR_PP
   407                                REG_RESTORE IDX_PP
   408                                REG_RESTORE CUR_PP
   409                             ENDIF
   410                             endm
      + 3D73                    
      + 3D73                    ; end of file Memory.inc
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  FILENAME:   UART_Sensor.inc
     4                          ;;  Version: 5.3, Updated on 2013/5/19 at 10:44:49
     5                          ;;  Generated by PSoC Designer 5.4.2946
     6                          ;;
     7                          ;;  DESCRIPTION:  Assembler declarations for the UART user module.
     8                          ;;-----------------------------------------------------------------------------
     9                          ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
    10                          ;;*****************************************************************************
    11                          ;;*****************************************************************************
    12                          
    13                          ;--------------------------------------------------
    14                          ; Constants for UART_Sensor API's
    15                          ;--------------------------------------------------
    16                          
    17                          ;mask value for global int reg bit for TX instance
    18  0004                    UART_Sensor_TX_INT_MASK:                     equ 0x04
    19  00E1                    UART_Sensor_TX_INT_REG:                      equ 0x0e1  ;TX interrupt address
    20  0008                    UART_Sensor_RX_INT_MASK:                     equ 0x08  ;mask value for global int reg bit for RX ins
                                tance
    21  00E1                    UART_Sensor_RX_INT_REG:                      equ 0x0e1  ;RX interrupt address
    22                          
    23  0000                    UART_Sensor_RXBUF_ENABLE:                    equ 0
    24                          
    25                          ; Interrupt control masks
    26  0001                    UART_Sensor_ENABLE_RX_INT:                   equ 0x01
    27  0000                    UART_Sensor_DISABLE_RX_INT:                  equ 0x00
    28  0002                    UART_Sensor_ENABLE_TX_INT:                   equ 0x02
    29  0000                    UART_Sensor_DISABLE_TX_INT:                  equ 0x00
    30                          
    31  0000                    UART_Sensor_INT_MODE_TX_REG_EMPTY:           equ 0x00
    32  0001                    UART_Sensor_INT_MODE_TX_COMPLETE:            equ 0x01
    33                          
    34  0020                    UART_Sensor_RX_IGNORE_BELOW:                 equ 0x20
    35  0010                    UART_Sensor_RX_BUFFER_SIZE:                  equ 0x10
    36  000D                    UART_Sensor_CMD_TERM:                        equ 0xd
    37  0020                    UART_Sensor_DELIMITER:                       equ 0x20
    38  0000                    UART_Sensor_BACKSPACE_ENABLE:                equ 0x0
    39                          
    40                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    41                          ;       WARNING WARNING WARNING
    42                          ; The following equates are for backwards
    43                          ; compatibility only and should not be used
    44                          ; for new designs.
    45                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    46                          
    47                          ;------------------------------------
    48                          ;  Parity masks
    49                          ;------------------------------------
    50  0000                    UART_PARITY_NONE:       equ   00h
    51  0002                    UART_PARITY_EVEN:       equ   02h
    52  0006                    UART_PARITY_ODD:        equ   06h
    53                          
    54                          ;------------------------------------
    55                          ;  TX Status Register masks
    56                          ;------------------------------------
    57  0020                    UART_TX_COMPLETE:       equ   20h
    58  0010                    UART_TX_BUFFER_EMPTY:   equ   10h
    59                          
    60                          ;------------------------------------
    61                          ;  RX Status Register masks
    62                          ;------------------------------------
    63  0010                    UART_RX_ACTIVE:         equ   10h
    64  0008                    UART_RX_COMPLETE:       equ   08h
    65  0080                    UART_RX_PARITY_ERROR:   equ   80h
    66  0040                    UART_RX_OVERRUN_ERROR:  equ   40h
    67  0020                    UART_RX_FRAMING_ERROR:  equ   20h
    68  00E0                    UART_RX_NO_ERROR:       equ   E0h
    69                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    70                          ;             END WARNING
    71                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    72                          
    73                          
    74                          
    75                          ;------------------------------------
    76                          ;  Parity masks
    77                          ;------------------------------------
    78  0000                    UART_Sensor_PARITY_NONE:                equ   00h
    79  0002                    UART_Sensor_PARITY_EVEN:                equ   02h
    80  0006                    UART_Sensor_PARITY_ODD:                 equ   06h
    81                          
    82                          ;------------------------------------
    83                          ;  TX Status Register masks
    84                          ;------------------------------------
    85  0020                    UART_Sensor_TX_COMPLETE:                equ   20h
    86  0010                    UART_Sensor_TX_BUFFER_EMPTY:            equ   10h
    87                          
    88                          ;------------------------------------
    89                          ;  RX Status Register masks
    90                          ;------------------------------------
    91  0010                    UART_Sensor_RX_ACTIVE:                  equ   10h
    92  0008                    UART_Sensor_RX_COMPLETE:                equ   08h
    93  0008                    UART_Sensor_RX_REG_FULL:                equ   08h
    94  0080                    UART_Sensor_RX_PARITY_ERROR:            equ   80h
    95  0040                    UART_Sensor_RX_OVERRUN_ERROR:           equ   40h
    96  0020                    UART_Sensor_RX_FRAMING_ERROR:           equ   20h
    97  00E0                    UART_Sensor_RX_ERROR:                   equ   E0h
    98  0001                    UART_Sensor_RX_ENABLE:                  equ   01h
    99                          
   100  00F0                    UART_Sensor_RX_BUF_ERROR:               equ   F0h  ; Mask for any Rx that may occur.
   101  0010                    UART_Sensor_RX_BUF_OVERRUN:             equ   10h  ; This indicates the software buffer has
   102                                                                                  ; been over run.
   103  0001                    UART_Sensor_RX_BUF_CMDTERM:             equ   01h  ; Command terminator has been received.
   104                          
   105  0001                    UART_Sensor_RX_NO_DATA:                 equ   01h
   106  00E0                    UART_Sensor_RX_NO_ERROR:                equ   E0h
   107                          
   108                          
   109                          ;--------------------------------------------------
   110                          ; Registers Address Constants for UART_Sensor
   111                          ;--------------------------------------------------
   112                          ;---------------------------------
   113                          ;  Registers used by TX
   114                          ;---------------------------------
   115  002B                    UART_Sensor_TX_CONTROL_REG: equ 2bh            ; Control register
   116  0028                    UART_Sensor_TX_SHIFT_REG:   equ 28h               ; TX Shift Register register
   117  0029                    UART_Sensor_TX_BUFFER_REG:  equ 29h               ; TX Buffer Register
   118  0028                    UART_Sensor_TX_FUNC_REG:    equ 28h     ; Function register
   119  0029                    UART_Sensor_TX_INPUT_REG:   equ 29h            ; Input register
   120  002A                    UART_Sensor_TX_OUTPUT_REG:  equ 2ah           ; Output register
   121                          
   122                          ;---------------------------------
   123                          ;  Registers used by RX
   124                          ;---------------------------------
   125  002F                    UART_Sensor_RX_CONTROL_REG: equ 2fh            ; Control register
   126  002C                    UART_Sensor_RX_SHIFT_REG:   equ 2ch               ; RX Shift Register register
   127  002E                    UART_Sensor_RX_BUFFER_REG:  equ 2eh               ; RX Buffer Register
   128  002C                    UART_Sensor_RX_FUNC_REG:    equ 2ch     ; Function register
   129  002D                    UART_Sensor_RX_INPUT_REG:   equ 2dh            ; Input register
   130  002E                    UART_Sensor_RX_OUTPUT_REG:  equ 2eh           ; Output register
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  Filename:   UART_Sensor.asm
     4                          ;;  Version: 5.3, Updated on 2013/5/19 at 10:44:49
     5                          ;;  Generated by PSoC Designer 5.4.2946
     6                          ;;
     7                          ;;  DESCRIPTION:  UART User Module software implementation file for the
     8                          ;;                22/24/25/26/27xxx families.
     9                          ;;
    10                          ;;
    11                          ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
    12                          ;;        arguments and observe the associated "Registers are volatile" policy.
    13                          ;;        This means it is the caller's responsibility to preserve any values
    14                          ;;        in the X and A registers that are still needed after the API functions
    15                          ;;        returns. For Large Memory Model devices it is also the caller's 
    16                          ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
    17                          ;;        MVW_PP registers. Even though some of these registers may not be modified
    18                          ;;        now, there is no guarantee that will remain the case in future releases.
    19                          ;;-----------------------------------------------------------------------------
    20                          ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
    21                          ;;*****************************************************************************
    22                          ;;*****************************************************************************
    23                          
    24                          
    25                          include "m8c.inc"
    26                          include "memory.inc"
    27                          include "UART_Sensor.inc"
    28                          
    29                          ;-----------------------------------------------
    30                          ;  Global Symbols
    31                          ;-----------------------------------------------
    32                          ;-------------------------------------------------------------------
    33                          ;  Declare the functions global for both assembler and C compiler.
    34                          ;
    35                          ;  Note that there are two names for each API. First name is
    36                          ;  assembler reference. Name with underscore is name refence for
    37                          ;  C compiler.  Calling function in C source code does not require
    38                          ;  the underscore.
    39                          ;-------------------------------------------------------------------
    40                          export  UART_Sensor_SetTxIntMode
    41                          export _UART_Sensor_SetTxIntMode
    42                          export  UART_Sensor_EnableInt
    43                          export _UART_Sensor_EnableInt
    44                          export  UART_Sensor_DisableInt
    45                          export _UART_Sensor_DisableInt
    46                          
    47                          export  UART_Sensor_Start
    48                          export _UART_Sensor_Start
    49                          export  UART_Sensor_Stop
    50                          export _UART_Sensor_Stop
    51                          export  UART_Sensor_SendData
    52                          export _UART_Sensor_SendData
    53                          export  UART_Sensor_bReadTxStatus
    54                          export _UART_Sensor_bReadTxStatus
    55                          export  UART_Sensor_bReadRxData
    56                          export _UART_Sensor_bReadRxData
    57                          export  UART_Sensor_bReadRxStatus
    58                          export _UART_Sensor_bReadRxStatus
    59                          
    60                          export  UART_Sensor_IntCntl
    61                          export _UART_Sensor_IntCntl
    62                          
    63                          export  UART_Sensor_TxIntMode
    64                          export _UART_Sensor_TxIntMode
    65                          
    66                          export  UART_Sensor_PutSHexByte
    67                          export _UART_Sensor_PutSHexByte
    68                          export  UART_Sensor_PutSHexInt
    69                          export _UART_Sensor_PutSHexInt
    70                          
    71                          export  UART_Sensor_CPutString
    72                          export _UART_Sensor_CPutString
    73                          export  UART_Sensor_PutString
    74                          export _UART_Sensor_PutString
    75                          export  UART_Sensor_PutChar
    76                          export _UART_Sensor_PutChar
    77                          export  UART_Sensor_Write
    78                          export _UART_Sensor_Write
    79                          export  UART_Sensor_CWrite
    80                          export _UART_Sensor_CWrite
    81                          
    82                          export  UART_Sensor_cGetChar
    83                          export _UART_Sensor_cGetChar
    84                          export  UART_Sensor_cReadChar
    85                          export _UART_Sensor_cReadChar
    86                          export  UART_Sensor_iReadChar
    87                          export _UART_Sensor_iReadChar
    88                          export  UART_Sensor_PutCRLF
    89                          export _UART_Sensor_PutCRLF
    90                          
    91                          IF (UART_Sensor_RXBUF_ENABLE)
    92                          export  UART_Sensor_CmdReset
    93                          export _UART_Sensor_CmdReset
    94                          export  UART_Sensor_bCmdCheck
    95                          export _UART_Sensor_bCmdCheck
    96                          export  UART_Sensor_bCmdLength
    97                          export _UART_Sensor_bCmdLength
    98                          export  UART_Sensor_bErrCheck
    99                          export _UART_Sensor_bErrCheck
   100                          
   101                          export  UART_Sensor_szGetParam
   102                          export _UART_Sensor_szGetParam
   103                          export  UART_Sensor_szGetRestOfParams
   104                          export _UART_Sensor_szGetRestOfParams
   105                          ENDIF
   106                          
   107                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   108                          ; WARNING WARNING WARNING
   109                          ; The following exports are for backwards compatibility only and should
   110                          ; not be used for new designs. They may be eliminated in a future release.
   111                          ; Their status is "NO FURTHER MAINTENANCE". 
   112                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   113                          export  bUART_Sensor_ReadTxStatus
   114                          export _bUART_Sensor_ReadTxStatus
   115                          export  bUART_Sensor_ReadRxData
   116                          export _bUART_Sensor_ReadRxData
   117                          export  bUART_Sensor_ReadRxStatus
   118                          export _bUART_Sensor_ReadRxStatus
   119                          	
   120                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   121                          ;             END WARNING
   122                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   123                          
   124                          ;-----------------------------------------------
   125                          ; Variable Allocation
   126                          ;-----------------------------------------------
   127                          IF (UART_Sensor_RXBUF_ENABLE)
   128                              
   129                          area UART_Sensor_RAM (RAM, REL, CON)
   130                              
   131                           ptrParam:   BLK  1
   132                          
   133                          ENDIF
   134                          
   135                          area text (ROM,REL)
   136                          
   137                          ;-----------------------------------------------
   138                          ;  EQUATES
   139                          ;-----------------------------------------------
   140  0001                    bfCONTROL_REG_START_BIT:        equ    1    ; Control register start bit
   141  0010                    bfFUNCTION_REG_TX_INT_MODE_BIT: equ 0x10    ; the TX Int Mode bit
   142                          
   143                          area UserModules (ROM, REL, CON)
   144                          
   145                          ;=============================================================================
   146                          ;=============================================================================
   147                          ;
   148                          ;     Low-Level Commands
   149                          ;
   150                          ;=============================================================================
   151                          ;=============================================================================
   152                          
   153                          .SECTION
   154                          ;-----------------------------------------------------------------------------
   155                          ;  FUNCTION NAME: UART_Sensor_EnableInt
   156                          ;
   157                          ;  DESCRIPTION:
   158                          ;     Enables this UART's interrupt by setting the interrupt enable mask
   159                          ;     bit associated with this User Module. Remember to call the global
   160                          ;     interrupt enable function by using the macro: M8C_EnableGInt.
   161                          ;-----------------------------------------------------------------------------
   162                          ;
   163                          ;  ARGUMENTS:
   164                          ;     none.
   165                          ;
   166                          ;  RETURNS:
   167                          ;     none.
   168                          ;
   169                          ;  SIDE EFFECTS:
   170                          ;    The A and X registers may be modified by this or future implementations
   171                          ;    of this function.  The same is true for all RAM page pointer registers in
   172                          ;    the Large Memory Model.  When necessary, it is the calling function's
   173                          ;    responsibility to perserve their values across calls to fastcall16 
   174                          ;    functions.
   175                          ;
   176  2EBA                     UART_Sensor_EnableInt:
   177  2EBA                    _UART_Sensor_EnableInt:
   178                             RAM_PROLOGUE RAM_USE_CLASS_1
   179  2EBA  43 E1 04             M8C_EnableIntMask UART_Sensor_TX_INT_REG, UART_Sensor_TX_INT_MASK
   180  2EBD  43 E1 08             M8C_EnableIntMask UART_Sensor_RX_INT_REG, UART_Sensor_RX_INT_MASK
   181                             RAM_EPILOGUE RAM_USE_CLASS_1
   182  2EC0  7F                   ret
   183                          .ENDSECTION
   184                          
   185                              
   186                          .SECTION
   187                          ;-----------------------------------------------------------------------------
   188                          ;  FUNCTION NAME: UART_Sensor_DisableInt
   189                          ;
   190                          ;  DESCRIPTION:
   191                          ;     Disables this UART's interrupt by clearing the interrupt enable mask bit
   192                          ;     associated with this User Module.
   193                          ;-----------------------------------------------------------------------------
   194                          ;
   195                          ;  ARGUMENTS:
   196                          ;     none.
   197                          ;
   198                          ;  RETURNS:
   199                          ;     none.
   200                          ;
   201                          ;  SIDE EFFECTS:
   202                          ;    The A and X registers may be modified by this or future implementations
   203                          ;    of this function.  The same is true for all RAM page pointer registers in
   204                          ;    the Large Memory Model.  When necessary, it is the calling function's
   205                          ;    responsibility to perserve their values across calls to fastcall16 
   206                          ;    functions.
   207                          ;
   208  2EC1                     UART_Sensor_DisableInt:
   209  2EC1                    _UART_Sensor_DisableInt:
   210                             RAM_PROLOGUE RAM_USE_CLASS_1
   211  2EC1  41 E1 FB             M8C_DisableIntMask UART_Sensor_TX_INT_REG, UART_Sensor_TX_INT_MASK
   212  2EC4  41 E1 F7             M8C_DisableIntMask UART_Sensor_RX_INT_REG, UART_Sensor_RX_INT_MASK
   213                             RAM_EPILOGUE RAM_USE_CLASS_1
   214  2EC7  7F                   ret
   215                          .ENDSECTION
   216                          
   217                          
   218                          .SECTION
   219                          ;-----------------------------------------------------------------------------
   220                          ;  FUNCTION NAME: UART_Sensor_SetTxIntMode(BYTE bTxIntMode)
   221                          ;
   222                          ;  DESCRIPTION:
   223                          ;     Sets the Tx Interrupt Mode bit in the Function Register.
   224                          ;-----------------------------------------------------------------------------
   225                          ;
   226                          ;  ARGUMENTS:
   227                          ;     BYTE bTxIntMode - The TX Interrupt mode setting. Use defined masks.
   228                          ;        Passed in the A register
   229                          ;
   230                          ;  RETURNS:
   231                          ;     none.
   232                          ;
   233                          ;  SIDE EFFECTS:
   234                          ;    The A and X registers may be modified by this or future implementations
   235                          ;    of this function.  The same is true for all RAM page pointer registers in
   236                          ;    the Large Memory Model.  When necessary, it is the calling function's
   237                          ;    responsibility to perserve their values across calls to fastcall16 
   238                          ;    functions.
   239                          ;
   240                          ;  THEORY of OPERATION OR PROCEDURE:
   241                          ;     Sets the TX interrupt mode bit to define whether the interrupt occurs
   242                          ;     on TX register empty or TX transmit complete
   243                          ;
   244  2EC8                     UART_Sensor_SetTxIntMode:
   245  2EC8                    _UART_Sensor_SetTxIntMode:
   246                             RAM_PROLOGUE RAM_USE_CLASS_1
   247  2EC8  71 10                M8C_SetBank1
   248  2ECA  21 01                and   A, UART_Sensor_INT_MODE_TX_COMPLETE
   249  2ECC  A007                 jz    .SetModeRegEmpty
   250  2ECE  43 28 10             or    REG[UART_Sensor_TX_FUNC_REG], bfFUNCTION_REG_TX_INT_MODE_BIT
   251  2ED1  70 EF                M8C_SetBank0
   252                             RAM_EPILOGUE RAM_USE_CLASS_1
   253  2ED3  7F                   ret
   254                          
   255  2ED4                    .SetModeRegEmpty:
   256  2ED4  41 28 EF             and   REG[UART_Sensor_TX_FUNC_REG], ~bfFUNCTION_REG_TX_INT_MODE_BIT
   257  2ED7  70 EF                M8C_SetBank0
   258                             RAM_EPILOGUE RAM_USE_CLASS_1
   259  2ED9  7F                   ret
   260                          .ENDSECTION
   261                          
   262                          
   263                          .SECTION
   264                          ;-----------------------------------------------------------------------------
   265                          ;  FUNCTION NAME: UART_Sensor_Start(BYTE bParity)
   266                          ;
   267                          ;  DESCRIPTION:
   268                          ;     Sets the start bit and parity in the Control register of this user module.
   269                          ;-----------------------------------------------------------------------------
   270                          ;
   271                          ;  ARGUMENTS:
   272                          ;     BYTE bParity - parity setting for the Transmitter and receiver. Use defined masks.
   273                          ;        Passed in the A register.
   274                          ;
   275                          ;  RETURNS:
   276                          ;     none.
   277                          ;
   278                          ;  SIDE EFFECTS:
   279                          ;    The A and X registers may be modified by this or future implementations
   280                          ;    of this function.  The same is true for all RAM page pointer registers in
   281                          ;    the Large Memory Model.  When necessary, it is the calling function's
   282                          ;    responsibility to perserve their values across calls to fastcall16 
   283                          ;    functions.
   284                          ;
   285  2EDA                     UART_Sensor_Start:
   286  2EDA                    _UART_Sensor_Start:
   287                             RAM_PROLOGUE RAM_USE_CLASS_1
   288                             ; Note, Proxy Class 4 only if receive buffer used; otherwise Proxy Class 1.
   289                          
   290  2EDA  29 01                or    A, bfCONTROL_REG_START_BIT
   291  2EDC  60 2B                mov   REG[UART_Sensor_TX_CONTROL_REG], A
   292  2EDE  60 2F                mov   REG[UART_Sensor_RX_CONTROL_REG], A
   293                          IF ( UART_Sensor_RXBUF_ENABLE )
   294                             call  _UART_Sensor_CmdReset
   295                          ENDIF
   296                             RAM_EPILOGUE RAM_USE_CLASS_1
   297  2EE0  7F                   ret
   298                          .ENDSECTION
   299                          
   300                          
   301                          .SECTION
   302                          ;-----------------------------------------------------------------------------
   303                          ;  FUNCTION NAME: UART_Sensor_Stop
   304                          ;
   305                          ;  DESCRIPTION:
   306                          ;     Disables UART operation.
   307                          ;-----------------------------------------------------------------------------
   308                          ;
   309                          ;  ARGUMENTS:
   310                          ;     none.
   311                          ;
   312                          ;  RETURNS:
   313                          ;     none.
   314                          ;
   315                          ;  SIDE EFFECTS:
   316                          ;    The A and X registers may be modified by this or future implementations
   317                          ;    of this function.  The same is true for all RAM page pointer registers in
   318                          ;    the Large Memory Model.  When necessary, it is the calling function's
   319                          ;    responsibility to perserve their values across calls to fastcall16 
   320                          ;    functions.
   321                          ;
   322  2EE1                     UART_Sensor_Stop:
   323  2EE1                    _UART_Sensor_Stop:
   324                             RAM_PROLOGUE RAM_USE_CLASS_1
   325  2EE1  41 2B FE             and   REG[UART_Sensor_TX_CONTROL_REG], ~bfCONTROL_REG_START_BIT
   326  2EE4  41 2F FE             and   REG[UART_Sensor_RX_CONTROL_REG], ~bfCONTROL_REG_START_BIT
   327                             RAM_EPILOGUE RAM_USE_CLASS_1
   328  2EE7  7F                   ret
   329                          .ENDSECTION
   330                          
   331                          
   332                          .SECTION
   333                          ;-----------------------------------------------------------------------------
   334                          ;  FUNCTION NAME: UART_Sensor_SendData
   335                          ;
   336                          ;  DESCRIPTION:
   337                          ;     Initiates a transmission of data.
   338                          ;-----------------------------------------------------------------------------
   339                          ;
   340                          ;  ARGUMENTS:
   341                          ;     BYTE  TxData - data to transmit. PASSED in A register.
   342                          ;
   343                          ;  RETURNS:
   344                          ;     none.
   345                          ;
   346                          ;  SIDE EFFECTS:
   347                          ;    The A and X registers may be modified by this or future implementations
   348                          ;    of this function.  The same is true for all RAM page pointer registers in
   349                          ;    the Large Memory Model.  When necessary, it is the calling function's
   350                          ;    responsibility to perserve their values across calls to fastcall16 
   351                          ;    functions.
   352                          ;
   353  2EE8                     UART_Sensor_SendData:
   354  2EE8                    _UART_Sensor_SendData:
   355                             RAM_PROLOGUE RAM_USE_CLASS_1
   356  2EE8  60 29                mov REG[UART_Sensor_TX_BUFFER_REG], A
   357                             RAM_EPILOGUE RAM_USE_CLASS_1
   358  2EEA  7F                   ret
   359                          .ENDSECTION
   360                          
   361                          
   362                          .SECTION
   363                          ;-----------------------------------------------------------------------------
   364                          ;  FUNCTION NAME: UART_Sensor_bReadTxStatus
   365                          ;
   366                          ;  DESCRIPTION:
   367                          ;     Reads the Tx Status bits in the Control/Status register.
   368                          ;-----------------------------------------------------------------------------
   369                          ;
   370                          ;  ARGUMENTS:
   371                          ;     none.
   372                          ;
   373                          ;  RETURNS:
   374                          ;     BYTE  bTxStatus - transmit status data.  Use defined masks for detecting
   375                          ;           status bits (returned in A)
   376                          ;
   377                          ;  SIDE EFFECTS:
   378                          ;    The A and X registers may be modified by this or future implementations
   379                          ;    of this function.  The same is true for all RAM page pointer registers in
   380                          ;    the Large Memory Model.  When necessary, it is the calling function's
   381                          ;    responsibility to perserve their values across calls to fastcall16 
   382                          ;    functions.
   383                          ;
   384  2EEB                     UART_Sensor_bReadTxStatus:
   385  2EEB                    _UART_Sensor_bReadTxStatus:
   386  2EEB                     bUART_Sensor_ReadTxStatus:                      ; For backwards compatibility only
   387  2EEB                    _bUART_Sensor_ReadTxStatus:                      ; For backwards compatibility only
   388                             RAM_PROLOGUE RAM_USE_CLASS_1
   389  2EEB  5D 2B                mov A,  REG[UART_Sensor_TX_CONTROL_REG]
   390                             RAM_EPILOGUE RAM_USE_CLASS_1
   391  2EED  7F                   ret
   392                          .ENDSECTION
   393                          
   394                          
   395                          .SECTION
   396                          ;-----------------------------------------------------------------------------
   397                          ;  FUNCTION NAME: UART_Sensor_bReadRxData
   398                          ;
   399                          ;  DESCRIPTION:
   400                          ;     Reads the RX buffer register.  Should check the status regiser to make
   401                          ;     sure data is valid.
   402                          ;-----------------------------------------------------------------------------
   403                          ;
   404                          ;  ARGUMENTS:
   405                          ;     none.
   406                          ;
   407                          ;  RETURNS:
   408                          ;     bRxData - returned in A.
   409                          ;
   410                          ;  SIDE EFFECTS:
   411                          ;    The A and X registers may be modified by this or future implementations
   412                          ;    of this function.  The same is true for all RAM page pointer registers in
   413                          ;    the Large Memory Model.  When necessary, it is the calling function's
   414                          ;    responsibility to perserve their values across calls to fastcall16 
   415                          ;    functions.
   416                          ;
   417  2EEE                     UART_Sensor_bReadRxData:
   418  2EEE                    _UART_Sensor_bReadRxData:
   419  2EEE                     bUART_Sensor_ReadRxData:                        ; For backwards compatibility only
   420  2EEE                    _bUART_Sensor_ReadRxData:                        ; For backwards compatibility only
   421                             RAM_PROLOGUE RAM_USE_CLASS_1
   422  2EEE  5D 2E                mov A, REG[UART_Sensor_RX_BUFFER_REG]
   423                             RAM_EPILOGUE RAM_USE_CLASS_1
   424  2EF0  7F                   ret
   425                          .ENDSECTION
   426                          
   427                          
   428                          .SECTION
   429                          ;-----------------------------------------------------------------------------
   430                          ;  FUNCTION NAME: UART_Sensor_bReadRxStatus
   431                          ;
   432                          ;  DESCRIPTION:
   433                          ;     Reads the RX Status bits in the Control/Status register.
   434                          ;-----------------------------------------------------------------------------
   435                          ;
   436                          ;  ARGUMENTS:
   437                          ;     none.
   438                          ;
   439                          ;  RETURNS:
   440                          ;     BYTE  bRXStatus - receive status data.  Use the following defined bits
   441                          ;                       masks: RX_COMPLETE and RX_BUFFER_EMPTY
   442                          ;           returned in A.
   443                          ;
   444                          ;  SIDE EFFECTS:
   445                          ;    The A and X registers may be modified by this or future implementations
   446                          ;    of this function.  The same is true for all RAM page pointer registers in
   447                          ;    the Large Memory Model.  When necessary, it is the calling function's
   448                          ;    responsibility to perserve their values across calls to fastcall16 
   449                          ;    functions.
   450                          ;
   451  2EF1                     UART_Sensor_bReadRxStatus:
   452  2EF1                    _UART_Sensor_bReadRxStatus:
   453  2EF1                     bUART_Sensor_ReadRxStatus:                      ; For backwards compatibility only
   454  2EF1                    _bUART_Sensor_ReadRxStatus:                      ; For backwards compatibility only
   455                             RAM_PROLOGUE RAM_USE_CLASS_1
   456  2EF1  5D 2F                mov A,  REG[UART_Sensor_RX_CONTROL_REG]
   457                             RAM_EPILOGUE RAM_USE_CLASS_1
   458  2EF3  7F                   ret
   459                          .ENDSECTION
   460                          
   461                          
   462                          .SECTION
   463                          ;-----------------------------------------------------------------------------
   464                          ;  FUNCTION NAME: UART_Sensor_TxIntMode
   465                          ;
   466                          ;  DESCRIPTION:
   467                          ;     This function is used to change the TX Interrupt mode.
   468                          ;-----------------------------------------------------------------------------
   469                          ;
   470                          ;  ARGUMENTS:
   471                          ;     A => Tx Interrupt mode
   472                          ;             0 => Interrupt on TX_Reg_Empty  (Default)
   473                          ;             1 => Interrupt on TX Complete
   474                          ;
   475                          ;  RETURNS:
   476                          ;     none.
   477                          ;
   478                          ;  SIDE EFFECTS:
   479                          ;    The A and X registers may be modified by this or future implementations
   480                          ;    of this function.  The same is true for all RAM page pointer registers in
   481                          ;    the Large Memory Model.  When necessary, it is the calling function's
   482                          ;    responsibility to perserve their values across calls to fastcall16 
   483                          ;    functions.
   484                          ;
   485  2EF4                     UART_Sensor_TxIntMode:
   486  2EF4                    _UART_Sensor_TxIntMode:
   487                             RAM_PROLOGUE RAM_USE_CLASS_1
   488                          
   489  2EF4  21 01                and  A,UART_Sensor_INT_MODE_TX_COMPLETE
   490  2EF6  71 10                M8C_SetBank1
   491  2EF8  39 01                cmp  A,UART_Sensor_INT_MODE_TX_COMPLETE
   492  2EFA  A006                 jz   .SetTxCmpMode
   493                          
   494  2EFC  41 28 EF             and  reg[UART_Sensor_TX_FUNC_REG],0xEF        ; Set Interrupt on Tx_Reg_Empty
   495  2EFF  8004                 jmp  .TxIntMode_End
   496                          
   497  2F01                    .SetTxCmpMode:                                       ; Set Interrupt on TX Complete
   498  2F01  43 28 10             or   reg[UART_Sensor_TX_FUNC_REG],0x10
   499                          
   500  2F04                    .TxIntMode_End:
   501  2F04  70 EF                M8C_SetBank0
   502                             RAM_EPILOGUE RAM_USE_CLASS_1
   503  2F06  7F                   ret
   504                          .ENDSECTION
   505                          
   506                              
   507                          .SECTION
   508                          ;-----------------------------------------------------------------------------
   509                          ;  FUNCTION NAME: UART_Sensor_IntCntl
   510                          ;
   511                          ;  DESCRIPTION:
   512                          ;     This function is used to enable/disable the Rx and Tx interrupt.
   513                          ;-----------------------------------------------------------------------------
   514                          ;
   515                          ;  ARGUMENTS:
   516                          ;     A => Interrupt mask
   517                          ;
   518                          ;  RETURNS:
   519                          ;     none.
   520                          ;
   521                          ;  SIDE EFFECTS:
   522                          ;    The A and X registers may be modified by this or future implementations
   523                          ;    of this function.  The same is true for all RAM page pointer registers in
   524                          ;    the Large Memory Model.  When necessary, it is the calling function's
   525                          ;    responsibility to perserve their values across calls to fastcall16 
   526                          ;    functions.
   527                          ;
   528                          ;  THEORY of OPERATION or PROCEDURE:
   529                          ;     Set or Clears the Tx/Rx user module interrupt enable mask bit in the TX
   530                          ;     and RX block.
   531                          ;
   532  2F07                     UART_Sensor_IntCntl:
   533  2F07                    _UART_Sensor_IntCntl:
   534                             RAM_PROLOGUE RAM_USE_CLASS_1
   535                          
   536  2F07  08                   push A
   537  2F08  21 01                and  A,UART_Sensor_ENABLE_RX_INT
   538  2F0A  A006                 jz   .DisRxInt
   539                               ; Enable Rx Interrupt
   540  2F0C  43 E1 08             M8C_EnableIntMask UART_Sensor_RX_INT_REG, UART_Sensor_RX_INT_MASK
   541  2F0F  8004                 jmp  .CheckTxInt
   542  2F11                    .DisRxInt:
   543                               ; Disable Rx Interrupt
   544  2F11  41 E1 F7             M8C_DisableIntMask UART_Sensor_RX_INT_REG, UART_Sensor_RX_INT_MASK
   545                          
   546  2F14                    .CheckTxInt:
   547  2F14  18                   pop  A
   548  2F15  21 02                and  A,UART_Sensor_ENABLE_TX_INT
   549  2F17  A006                 jz   .DisTxInt
   550                               ; Enable Tx Interrupt
   551  2F19  43 E1 04             M8C_EnableIntMask UART_Sensor_TX_INT_REG, UART_Sensor_TX_INT_MASK
   552  2F1C  8004                 jmp  .End_IntCntl
   553  2F1E                    .DisTxInt:
   554                               ; Disable Tx Interrupt
   555  2F1E  41 E1 FB             M8C_DisableIntMask UART_Sensor_TX_INT_REG, UART_Sensor_TX_INT_MASK
   556                          
   557  2F21                    .End_IntCntl:
   558                             RAM_EPILOGUE RAM_USE_CLASS_1
   559  2F21  7F                   ret
   560                          .ENDSECTION
   561                          
   562                          
   563                          ;=============================================================================
   564                          ;=============================================================================
   565                          ;
   566                          ;     High-Level Commands
   567                          ;
   568                          ;=============================================================================
   569                          ;=============================================================================
   570                          
   571                          
   572                          ;-----------------------------------------------------------------------------
   573                          ;  FUNCTION NAME: UART_Sensor_PutSHexByte
   574                          ;
   575                          ;  DESCRIPTION:
   576                          ;     Print a byte in Hex (two characters) to the UART Tx
   577                          ;-----------------------------------------------------------------------------
   578                          ;
   579                          ;  ARGUMENTS:
   580                          ;     A  => (BYTE) Data/char to be printed
   581                          ;
   582                          ;  RETURNS:
   583                          ;     none.
   584                          ;
   585                          ;  SIDE EFFECTS:
   586                          ;    The A and X registers may be modified by this or future implementations
   587                          ;    of this function.  The same is true for all RAM page pointer registers in
   588                          ;    the Large Memory Model.  When necessary, it is the calling function's
   589                          ;    responsibility to perserve their values across calls to fastcall16 
   590                          ;    functions.
   591                          ;
   592                          .LITERAL
   593  2F22                    UART_Sensor_HEX_STR:
   594  2F22  30 31 32 33 34 35      DS    "0123456789ABCDEF"
              36 37 38 39 41 42 
              43 44 45 46       
   595                          .ENDLITERAL
   596                          
   597                          .SECTION
   598  2F32                     UART_Sensor_PutSHexByte:
   599  2F32                    _UART_Sensor_PutSHexByte:
   600                             RAM_PROLOGUE RAM_USE_CLASS_1
   601  2F32  08                   push  A                             ; Save lower nibble
   602  2F33  67                   asr   A                             ; Shift high nibble to right
   603  2F34  67                   asr   A
   604  2F35  67                   asr   A
   605  2F36  67                   asr   A
   606  2F37  21 0F                and   A,0Fh                         ; Mask off nibble
   607  2F39  FFE7                 index UART_Sensor_HEX_STR           ; Get Hex value
   608  2F3B  900F                 call  UART_Sensor_PutChar           ; Write data to screen
   609  2F3D  18                   pop   A                             ; Restore value
   610  2F3E  21 0F                and   A,0Fh                         ; Mask off lower nibble
   611  2F40  FFE0                 index UART_Sensor_HEX_STR           ; Get Hex value
   612  2F42  9008                 call  UART_Sensor_PutChar           ; Write data to screen
   613                             RAM_EPILOGUE RAM_USE_CLASS_1
   614  2F44  7F                   ret
   615                          .ENDSECTION
   616                          
   617                          
   618                          .SECTION
   619                          ;-----------------------------------------------------------------------------
   620                          ;  FUNCTION NAME: UART_Sensor_PutSHexInt
   621                          ;
   622                          ;  DESCRIPTION:
   623                          ;     Print an Int in Hex (four characters) to UART Tx
   624                          ;-----------------------------------------------------------------------------
   625                          ;
   626                          ;  ARGUMENTS:
   627                          ;     Pointer to string
   628                          ;     A  => ASB of Int
   629                          ;     X  => MSB of Int
   630                          ;
   631                          ;  RETURNS:
   632                          ;     none.
   633                          ;
   634                          ;  SIDE EFFECTS:
   635                          ;    The A and X registers may be modified by this or future implementations
   636                          ;    of this function.  The same is true for all RAM page pointer registers in
   637                          ;    the Large Memory Model.  When necessary, it is the calling function's
   638                          ;    responsibility to perserve their values across calls to fastcall16 
   639                          ;    functions.
   640                          ;
   641                          
   642  2F45                     UART_Sensor_PutSHexInt:
   643  2F45                    _UART_Sensor_PutSHexInt:
   644                             RAM_PROLOGUE RAM_USE_CLASS_1
   645  2F45  4B                   swap  A,X
   646  2F46  9FEA                 call  UART_Sensor_PutSHexByte       ; Print MSB
   647  2F48  5B                   mov   A,X                           ; Move LSB into position
   648  2F49  9FE7                 call  UART_Sensor_PutSHexByte       ; Print LSB
   649                             RAM_EPILOGUE RAM_USE_CLASS_1
   650  2F4B  7F                   ret
   651                          .ENDSECTION
   652                          
   653                          
   654                          .SECTION
   655                          ;-----------------------------------------------------------------------------
   656                          ;  FUNCTION NAME: UART_Sensor_PutChar
   657                          ;
   658                          ;  DESCRIPTION:
   659                          ;     Send character out through UART TX port.
   660                          ;-----------------------------------------------------------------------------
   661                          ;
   662                          ;  ARGUMENTS:
   663                          ;     A has Character to send to UART Tx Port
   664                          ;
   665                          ;  RETURNS:
   666                          ;     none
   667                          ;
   668                          ;  SIDE EFFECTS:
   669                          ;    The A and X registers may be modified by this or future implementations
   670                          ;    of this function.  The same is true for all RAM page pointer registers in
   671                          ;    the Large Memory Model.  When necessary, it is the calling function's
   672                          ;    responsibility to perserve their values across calls to fastcall16 
   673                          ;    functions.
   674                          ;
   675                          
   676                             macro InLinePutChar( Source )
   677                          .BufEmptyWaitLoop:
   678                             tst REG[UART_Sensor_TX_CONTROL_REG], UART_Sensor_TX_BUFFER_EMPTY     ; Check Tx Status
   679                             jz  .BufEmptyWaitLoop
   680                             mov REG[UART_Sensor_TX_BUFFER_REG], @Source     ; Write data to Tx Port
   681  2F4C                       endm
   682                          
   683  2F4C                     UART_Sensor_PutChar:
   684  2F4C                    _UART_Sensor_PutChar:
   685                             RAM_PROLOGUE RAM_USE_CLASS_1
   686                             InLinePutChar A
      + 2F4C                    ; Nothing to do
??0000:
      + 2F4C  49 2B 10          	tst	reg[43], 16
      + 2F4F  AFFC              	jz	??0000
      + 2F51  60 29             	mov	reg[41], a
   687                             RAM_EPILOGUE RAM_USE_CLASS_1
   688  2F53  7F                   ret
   689                          .ENDSECTION
   690                          
   691                          
   692                          .SECTION
   693                          ;-----------------------------------------------------------------------------
   694                          ;  FUNCTION NAME: UART_Sensor_cGetChar
   695                          ;
   696                          ;  DESCRIPTION:
   697                          ;     Read character from UART RX port.
   698                          ;-----------------------------------------------------------------------------
   699                          ;
   700                          ;  ARGUMENTS:
   701                          ;      none
   702                          ;
   703                          ;  RETURNS:
   704                          ;     char that is returned from UART
   705                          ;
   706                          ;  SIDE EFFECTS:
   707                          ;    The A and X registers may be modified by this or future implementations
   708                          ;    of this function.  The same is true for all RAM page pointer registers in
   709                          ;    the Large Memory Model.  When necessary, it is the calling function's
   710                          ;    responsibility to perserve their values across calls to fastcall16 
   711                          ;    functions.
   712                          ;
   713                          ;    Program flow will stay in this function until a character is received.
   714                          ;    If the watchdog timer is used, care must be taken to make sure that
   715                          ;    the delay between characters is less than the watchdog timeout.
   716                          ;
   717  2F54                     UART_Sensor_cGetChar:
   718  2F54                    _UART_Sensor_cGetChar:
   719                             RAM_PROLOGUE RAM_USE_CLASS_1
   720  2F54  49 2F 08             tst REG[UART_Sensor_RX_CONTROL_REG],UART_Sensor_RX_REG_FULL    ; Check if a character is ready
   721  2F57  AFFC                 jz  UART_Sensor_cGetChar                              ; If not loop
   722  2F59  5D 2E                mov A, REG[UART_Sensor_RX_BUFFER_REG]                 ; Get character
   723                             RAM_EPILOGUE RAM_USE_CLASS_1
   724  2F5B  7F                   ret
   725                          .ENDSECTION
   726                          
   727                          
   728                          .SECTION
   729                          ;-----------------------------------------------------------------------------
   730                          ;  FUNCTION NAME: UART_Sensor_cReadChar
   731                          ;
   732                          ;  DESCRIPTION:
   733                          ;     Read character from UART RX port.
   734                          ;-----------------------------------------------------------------------------
   735                          ;
   736                          ;  ARGUMENTS:
   737                          ;      none
   738                          ;
   739                          ;  RETURNS:
   740                          ;     char that is returned from UART
   741                          ;
   742                          ;  SIDE EFFECTS:
   743                          ;    The A and X registers may be modified by this or future implementations
   744                          ;    of this function.  The same is true for all RAM page pointer registers in
   745                          ;    the Large Memory Model.  When necessary, it is the calling function's
   746                          ;    responsibility to perserve their values across calls to fastcall16 
   747                          ;    functions.
   748                          ;
   749                          ;    A valid 0x00 character will be ignored, since a 0x00 return value
   750                          ;    implies a valid character or an error condition occured.
   751                          ;
   752  2F5C                     UART_Sensor_cReadChar:
   753  2F5C                    _UART_Sensor_cReadChar:
   754                             RAM_PROLOGUE RAM_USE_CLASS_1
   755  2F5C  5D 2F                mov  A,REG[UART_Sensor_RX_CONTROL_REG]                  ; Get Status of RX
   756  2F5E  08                   push A
   757  2F5F  21 08                and  A,UART_Sensor_RX_COMPLETE                          ; Check if a character is ready
   758  2F61  B004                 jnz  .RX_DATA_RDY                                       ; Data Ready go read it.
   759  2F63  18                   pop  A
   760  2F64  800B                 jmp  .RX_NO_VALID_CHAR
   761                          
   762  2F66                    .RX_DATA_RDY:
   763  2F66  5D 2E                mov  A,REG[UART_Sensor_RX_BUFFER_REG ]          
   764  2F68  4B                   swap A,X                                                ; determine if data is valid
   765                          
   766  2F69  18                   pop  A                                                  ; Check for errors
   767  2F6A  21 A0                and  A,(UART_Sensor_RX_PARITY_ERROR | UART_Sensor_RX_FRAMING_ERROR)
   768  2F6C  B003                 jnz  .RX_NO_VALID_CHAR                                  ; No character, exit
   769  2F6E  4B                   swap A,X                                                ; Put data in A and exit
   770                             RAM_EPILOGUE RAM_USE_CLASS_1
   771  2F6F  7F                   ret
   772                          
   773  2F70                    .RX_NO_VALID_CHAR:
   774  2F70  50 00                mov A,0x00                                              ; Zero out character
   775                          
   776  2F72                     End_UART_Sensor_cReadChar:
   777                             RAM_EPILOGUE RAM_USE_CLASS_1
   778  2F72  7F                   ret
   779                          .ENDSECTION
   780                          
   781                          
   782                          .SECTION
   783                          ;-----------------------------------------------------------------------------
   784                          ;  FUNCTION NAME: UART_Sensor_iReadChar
   785                          ;
   786                          ;  WARNING WARNING WARNING  Negative return value not correct!!!!  We may want
   787                          ;  to just set a value in the upper byte if error conditions exists.
   788                          ;
   789                          ;  DESCRIPTION:
   790                          ;     Read character from UART RX port.
   791                          ;-----------------------------------------------------------------------------
   792                          ;
   793                          ;  ARGUMENTS:
   794                          ;      none
   795                          ;
   796                          ;  RETURNS:
   797                          ;     An integer value is returned.  A negative value inplies and error
   798                          ;     condition, a positive value between 0 and 255 is the return character.
   799                          ;
   800                          ;     Error Codes:
   801                          ;        0x80CC    Parity Error
   802                          ;        0x40CC    Overrun Error
   803                          ;        0x20CC    Framing Error
   804                          ;        0x01CC    No Data available
   805                          ;
   806                          ;  SIDE EFFECTS:
   807                          ;    The A and X registers may be modified by this or future implementations
   808                          ;    of this function.  The same is true for all RAM page pointer registers in
   809                          ;    the Large Memory Model.  When necessary, it is the calling function's
   810                          ;    responsibility to perserve their values across calls to fastcall16 
   811                          ;    functions.
   812                          ;
   813  2F73                     UART_Sensor_iReadChar:
   814  2F73                    _UART_Sensor_iReadChar:
   815                             RAM_PROLOGUE RAM_USE_CLASS_1
   816  2F73  5D 2F                mov  A,REG[UART_Sensor_RX_CONTROL_REG]                  ; Get Status of RX
   817                                                                                     ; Mask only errors and data ready
   818  2F75  21 E8                and  A,(UART_Sensor_RX_ERROR|UART_Sensor_RX_REG_FULL)
   819  2F77  08                   push A
   820  2F78  21 08                and  A,UART_Sensor_RX_COMPLETE                          ; Check if a character is ready
   821  2F7A  B007                 jnz  .RX_GET_DATA                                       ; Data Ready go read it.
   822  2F7C  18                   pop  A
   823  2F7D  29 01                or   A,UART_Sensor_RX_NO_DATA                           ; Add no data flag
   824  2F7F  4B                   swap A,X
   825  2F80  8007                 jmp  End_UART_Sensor_iReadChar
   826                          
   827  2F82                    .RX_GET_DATA:
   828  2F82  18                   pop  A
   829  2F83  21 E0                and  A,UART_Sensor_RX_ERROR
   830  2F85  4B                   swap A,X
   831  2F86  5D 2E                mov  A,REG[UART_Sensor_RX_BUFFER_REG ]                  ; Read data first, then
   832                                                                                     ; determine if data is valid
   833                          
   834  2F88                     End_UART_Sensor_iReadChar:
   835                             RAM_EPILOGUE RAM_USE_CLASS_1
   836  2F88  7F                   ret
   837                          .ENDSECTION
   838                          
   839                          
   840                          .SECTION
   841                          ;-----------------------------------------------------------------------------
   842                          ;  FUNCTION NAME: UART_Sensor_PutString
   843                          ;
   844                          ;  DESCRIPTION:
   845                          ;     Send String out through UART TX port.
   846                          ;-----------------------------------------------------------------------------
   847                          ;
   848                          ;  ARGUMENTS:
   849                          ;     Pointer to String
   850                          ;     A has MSB of string address
   851                          ;     X has LSB of string address
   852                          ;
   853                          ;  RETURNS:
   854                          ;     none
   855                          ;
   856                          ;  SIDE EFFECTS:
   857                          ;    The A and X registers may be modified by this or future implementations
   858                          ;    of this function.  The same is true for all RAM page pointer registers in
   859                          ;    the Large Memory Model.  When necessary, it is the calling function's
   860                          ;    responsibility to perserve their values across calls to fastcall16 
   861                          ;    functions.
   862                          ;          
   863                          ;    Currently only the page pointer registers listed below are modified: 
   864                          ;          IDX_PP
   865                          ;
   866  2F89                     UART_Sensor_PutString:
   867  2F89                    _UART_Sensor_PutString:
   868                             RAM_PROLOGUE RAM_USE_CLASS_3
   869  2F89  60 D3                RAM_SETPAGE_IDX A
   870  2F8B                    .PutStringLoop:
   871  2F8B  52 00                mov   A,[X]                                   ; Get value pointed to by X
   872  2F8D  A006                 jz    End_PutString                           ; Check for end of string
   873  2F8F  9FBB                 call  UART_Sensor_PutChar                     ; Send character to Tx port
   874  2F91  75                   inc   X                                       ; Advance pointer to next character
   875  2F92  8FF8                 jmp   .PutStringLoop                          ; Get next character
   876                          
   877  2F94                    End_PutString:
   878                             RAM_EPILOGUE RAM_USE_CLASS_3
      + 2F94  70 3F             	and	f, 0x3F
      + 2F96  71 80             	or	f, 0x80
   879  2F98  7F                   ret
   880                          .ENDSECTION
   881                              
   882                          .SECTION
   883                          ;-----------------------------------------------------------------------------
   884                          ;  FUNCTION NAME: UART_Sensor_Write
   885                          ;
   886                          ;  DESCRIPTION:
   887                          ;     Send String of length X to serial port
   888                          ;-----------------------------------------------------------------------------
   889                          ;
   890                          ;  ARGUMENTS:
   891                          ;     Pointer to String
   892                          ;     [SP-5] Count of characters to send
   893                          ;     [SP-4] has MSB of string address
   894                          ;     [SP-3] has LSB of string address
   895                          ;
   896                          ;  RETURNS:
   897                          ;     none
   898                          ;
   899                          ;  SIDE EFFECTS:
   900                          ;    The A and X registers may be modified by this or future implementations
   901                          ;    of this function.  The same is true for all RAM page pointer registers in
   902                          ;    the Large Memory Model.  When necessary, it is the calling function's
   903                          ;    responsibility to perserve their values across calls to fastcall16 
   904                          ;    functions.
   905                          ;          
   906                          ;    Currently only the page pointer registers listed below are modified: 
   907                          ;          IDX_PP
   908                          ;
   909  FFFFFFFB                    CNT_LEN:    equ -5                               ; Length of data to send
   910  FFFFFFFC                    STR_MSB:    equ -4                               ; MSB pointer of string 
   911  FFFFFFFD                    STR_LSB:    equ -3                               ; LSB pointer of string 
   912                          
   913  2F99                     UART_Sensor_Write:
   914  2F99                    _UART_Sensor_Write:
   915                             RAM_PROLOGUE RAM_USE_CLASS_3
   916  2F99  62 D3 03             RAM_SETPAGE_IDX2STK                           ; Refer indexed addrs to the stack
   917  2F9C  4F                   mov   X, SP                                   ; Establish the frame pointer 
   918                          
   919  2F9D                    .NextByteLoop:
   920  2F9D  52 FB                mov   A, [X+CNT_LEN]                          ; End of the string?
   921  2F9F  A01A                 jz    .End_Write                              ;   Yes, prepare to exit
   922  2FA1  7B FB                dec   [X+CNT_LEN]                             ; Decrement counter
   923                          
   924                             IF SYSTEM_LARGE_MEMORY_MODEL
   925  2FA3  52 FC                mov   A, [X+STR_MSB]                          ; Load pointer to char to send
   926                             ENDIF
   927                          
   928  2FA5  59 FD                mov   X, [X+STR_LSB]                          ; Load pointer to char to send
   929  2FA7  60 D3                RAM_SETPAGE_IDX A                             ; switch index pages
   930  2FA9  52 00                mov   A, [X]                                  ; Grab the data
   931                             InLinePutChar A                               ; Put data in empty TX buf reg
      + 2FAB                    ??0001:
      + 2FAB  49 2B 10          	tst	reg[43], 16
      + 2FAE  AFFC              	jz	??0001
      + 2FB0  60 29             	mov	reg[41], a
   932  2FB2  4F                   mov   X, SP                                   ; Recover frame pointer
   933  2FB3  62 D3 03             RAM_SETPAGE_IDX2STK                           ; Prepare for stack access
   934  2FB6  77 FD                inc   [X+STR_LSB]                             ; Point to next byte, but do not
   935  2FB8  8FE4                 jmp   .NextByteLoop                           ;    cross RAM page boundary!
   936                          
   937  2FBA                    .End_Write:
   938                             RAM_EPILOGUE RAM_USE_CLASS_3
      + 2FBA  70 3F             	and	f, 0x3F
      + 2FBC  71 80             	or	f, 0x80
   939  2FBE  7F                   ret
   940                          .ENDSECTION
   941                              
   942                          
   943                          .SECTION
   944                          ;-----------------------------------------------------------------------------
   945                          ;  FUNCTION NAME: UART_Sensor_CWrite
   946                          ;
   947                          ;             WARNING WARNING NOT COMPLETE
   948                          ;
   949                          ;  DESCRIPTION:
   950                          ;     Send String of length X to serial port
   951                          ;-----------------------------------------------------------------------------
   952                          ;
   953                          ;  ARGUMENTS:
   954                          ;     [SP-4] MSB of Count of character to send
   955                          ;     [SP-3] LSB of Count of character to send
   956                          ;     [SP-2] has MSB of string address
   957                          ;     [SP-1] has LSB of string address
   958                          ;
   959                          ;  RETURNS:
   960                          ;     none
   961                          ;
   962                          ;  SIDE EFFECTS:
   963                          ;    The A and X registers may be modified by this or future implementations
   964                          ;    of this function.  The same is true for all RAM page pointer registers in
   965                          ;    the Large Memory Model.  When necessary, it is the calling function's
   966                          ;    responsibility to perserve their values across calls to fastcall16 
   967                          ;    functions.
   968                          ;
   969  FFFFFFFA                    CLEN_MSB:   equ -6           ; MSB Length of data to send
   970  FFFFFFFB                    CLEN_LSB:   equ -5           ; LSB Length of data to send
   971  FFFFFFFC                    CSTR_MSB:   equ -4           ; MSB pointer of string
   972  FFFFFFFD                    CSTR_LSB:   equ -3           ; LSB pointer of string
   973                          
   974  2FBF                     UART_Sensor_CWrite:
   975  2FBF                    _UART_Sensor_CWrite:
   976  2FBF  71 40                RAM_PROLOGUE RAM_USE_CLASS_2
   977  2FC1  4F                   mov   X,SP
   978  2FC2                    .CW_Loop:
   979  2FC2  3D FA 00             cmp   [X+CLEN_MSB],0x00                  ; Check for zero counter
   980  2FC5  B006                 jnz   .CW_WRITEIT
   981  2FC7  3D FB 00             cmp   [X+CLEN_LSB],0x00
   982  2FCA  A01D                 jz    .End_CWrite                        ; Leave if done
   983                          
   984  2FCC                    .CW_WRITEIT:                                
   985  2FCC  10                   push  X                                  ; Save frame pointer
   986  2FCD  52 FC                mov   A,[X+CSTR_MSB]
   987  2FCF  59 FD                mov   X,[X+CSTR_LSB]
   988  2FD1  28                   romx                                     ; Get character from ROM
   989                             InLinePutChar A                          ; Put data in empty TX buf reg
      + 2FD2                    ??0002:
      + 2FD2  49 2B 10          	tst	reg[43], 16
      + 2FD5  AFFC              	jz	??0002
      + 2FD7  60 29             	mov	reg[41], a
   990  2FD9  20                   pop   X                                  ; Restore frame pointer
   991  2FDA  07 FD 01             add   [X+CSTR_LSB],1                     ; Increment the string pointer
   992  2FDD  0F FC 00             adc   [X+CSTR_MSB],0
   993  2FE0  17 FB 01             sub   [X+CLEN_LSB],0x01                  ; Dec the counter
   994  2FE3  1F FA 00             sbb   [X+CLEN_MSB],0x00
   995  2FE6  8FDB                 jmp   .CW_Loop
   996                          
   997  2FE8                    .End_CWrite:
   998                             RAM_EPILOGUE RAM_USE_CLASS_2
      + 2FE8  70 3F             	and	f, 0x3F
      + 2FEA  71 80             	or	f, 0x80
   999  2FEC  7F                   ret
  1000                          .ENDSECTION
  1001                          
  1002                          
  1003                          .SECTION
  1004                          ;-----------------------------------------------------------------------------
  1005                          ;  FUNCTION NAME: UART_Sensor_CPutString
  1006                          ;
  1007                          ;  DESCRIPTION:
  1008                          ;     Send String out through UART TX port.
  1009                          ;-----------------------------------------------------------------------------
  1010                          ;
  1011                          ;  ARGUMENTS:
  1012                          ;     Pointer to String
  1013                          ;     A has MSB of string address
  1014                          ;     X has LSB of string address
  1015                          ;
  1016                          ;  RETURNS:
  1017                          ;     none
  1018                          ;
  1019                          ;  SIDE EFFECTS:
  1020                          ;    The A and X registers may be modified by this or future implementations
  1021                          ;    of this function.  The same is true for all RAM page pointer registers in
  1022                          ;    the Large Memory Model.  When necessary, it is the calling function's
  1023                          ;    responsibility to perserve their values across calls to fastcall16 
  1024                          ;    functions.
  1025                          ;
  1026  2FED                     UART_Sensor_CPutString:
  1027  2FED                    _UART_Sensor_CPutString:
  1028                             RAM_PROLOGUE RAM_USE_CLASS_1
  1029  2FED  08                   push  A                                       ; Store ROM pointer
  1030  2FEE  10                   push  X
  1031  2FEF  28                   romx                                          ; Get character from ROM
  1032  2FF0  A00B                 jz    .End_CPutString
  1033  2FF2  9F58                 call  UART_Sensor_PutChar                     ; Print character
  1034  2FF4  20                   pop   X
  1035  2FF5  18                   pop   A
  1036  2FF6  75                   inc   X                                       ; Inc LSB of pointer
  1037  2FF7  DFF5                 jnc   UART_Sensor_CPutString                  ; Check for carry
  1038  2FF9  74                   inc   A                                       ; Inc MSB of pointer
  1039  2FFA  8FF2                 jmp   UART_Sensor_CPutString
  1040                          
  1041                          
  1042  2FFC                    .End_CPutString:
  1043  2FFC  38 FE                add   SP, -2
  1044                             RAM_EPILOGUE RAM_USE_CLASS_1
  1045  2FFE  7F                   ret
  1046                          .ENDSECTION
  1047                          
  1048                          
  1049                          .SECTION
  1050                          ;-----------------------------------------------------------------------------
  1051                          ;  FUNCTION NAME: UART_Sensor_PutCRLF
  1052                          ;
  1053                          ;  DESCRIPTION:
  1054                          ;     Send a CR and LF
  1055                          ;-----------------------------------------------------------------------------
  1056                          ;
  1057                          ;  ARGUMENTS:
  1058                          ;     none.
  1059                          ;
  1060                          ;  RETURNS:
  1061                          ;     none.
  1062                          ;
  1063                          ;  SIDE EFFECTS:
  1064                          ;    The A and X registers may be modified by this or future implementations
  1065                          ;    of this function.  The same is true for all RAM page pointer registers in
  1066                          ;    the Large Memory Model.  When necessary, it is the calling function's
  1067                          ;    responsibility to perserve their values across calls to fastcall16 
  1068                          ;    functions.
  1069                          ;
  1070  2FFF                     UART_Sensor_PutCRLF:
  1071  2FFF                    _UART_Sensor_PutCRLF:
  1072                             RAM_PROLOGUE RAM_USE_CLASS_1
  1073  2FFF  50 0D                mov  A,0x0D                        ; Send CR
  1074  3001  9F49                 call UART_Sensor_PutChar
  1075  3003  50 0A                mov  A,0x0A                        ; Send LF
  1076  3005  9F45                 call UART_Sensor_PutChar
  1077                             RAM_EPILOGUE RAM_USE_CLASS_1
  1078  3007  7F                   ret
HI-TECH Software Macro Assembler (PSoC MCU) V9.61
Symbol Table                                                                                               Thu Jul 09 11:34:31 2015
          UART_Sensor_TX_FUNC_REG 0028             UART_Sensor_TX_INT_REG 00E1            UART_Sensor_TX_INT_MASK 0004  
            UART_Sensor_EnableInt 2EBA         UART_Sensor_RX_CONTROL_REG 002F           _bUART_Sensor_ReadRxData 2EEE  
       UART_Sensor_TX_CONTROL_REG 002B             _UART_Sensor_EnableInt 2EBA             UART_Sensor_DisableInt 2EC1  
            _UART_Sensor_SendData 2EE8            UART_Sensor_bReadRxData 2EEE                           CLEN_LSB FFFFFFFB  
                         CLEN_MSB FFFFFFFA              _UART_Sensor_cGetChar 2F54            UART_Sensor_PutSHexByte 2F32  
                         CSTR_LSB FFFFFFFD                           CSTR_MSB FFFFFFFC            bfCONTROL_REG_START_BIT 0001  
          _UART_Sensor_DisableInt 2EC1                             ??0000 2F4C                             ??0001 2FAB  
                           ??0002 2FD2                      End_PutString 2F94              UART_Sensor_cReadChar 2F5C  
            UART_Sensor_TxIntMode 2EF4                             HITECH 0002          UART_Sensor_RX_BUFFER_REG 002E  
                  FLAG_PGMODE_01b 0040                    FLAG_PGMODE_10b 0080                             IDX_PP 00D3  
            UART_Sensor_PutString 2F89             _UART_Sensor_cReadChar 2F5C                   UART_Sensor_Stop 2EE1  
           _UART_Sensor_TxIntMode 2EF4                 UART_Sensor_CWrite 2FBF          bUART_Sensor_ReadRxStatus 2EF1  
         _UART_Sensor_bReadRxData 2EEE              UART_Sensor_iReadChar 2F73          bUART_Sensor_ReadTxStatus 2EEB  
           _UART_Sensor_PutString 2F89          End_UART_Sensor_cReadChar 2F72           _UART_Sensor_PutSHexByte 2F32  
                _UART_Sensor_Stop 2EE1             _UART_Sensor_iReadChar 2F73       UART_Sensor_RX_FRAMING_ERROR 0020  
             UART_Sensor_RX_ERROR 00E0          _UART_Sensor_SetTxIntMode 2EC8          SYSTEM_LARGE_MEMORY_MODEL 0001  
        End_UART_Sensor_iReadChar 2F88             SYSTEM_MULTIPAGE_STACK 0000               _UART_Sensor_IntCntl 2F07  
             _UART_Sensor_PutCRLF 2FFF                          TOOLCHAIN 0002             UART_Sensor_PutSHexInt 2F45  
             _UART_Sensor_PutChar 2F4C                            CNT_LEN FFFFFFFB               UART_Sensor_SendData 2EE8  
             UART_Sensor_cGetChar 2F54          UART_Sensor_bReadRxStatus 2EF1                   FLAG_PGMODE_MASK 00C0  
        UART_Sensor_bReadTxStatus 2EEB                    RAM_USE_CLASS_1 0001                    RAM_USE_CLASS_2 0002  
                  RAM_USE_CLASS_3 0004                    RAM_USE_CLASS_4 0008   UART_Sensor_INT_MODE_TX_COMPLETE 0001  
                          STR_LSB FFFFFFFD                            STR_MSB FFFFFFFC                UART_Sensor_HEX_STR 2F22  
   bfFUNCTION_REG_TX_INT_MODE_BIT 0010         _bUART_Sensor_ReadRxStatus 2EF1            _UART_Sensor_PutSHexInt 2F45  
       _bUART_Sensor_ReadTxStatus 2EEB                  UART_Sensor_Start 2EDA                  UART_Sensor_Write 2F99  
              _UART_Sensor_CWrite 2FBF          UART_Sensor_ENABLE_RX_INT 0001          UART_Sensor_ENABLE_TX_INT 0002  
           UART_Sensor_CPutString 2FED                UART_Sensor_IntCntl 2F07          UART_Sensor_TX_BUFFER_REG 0029  
              UART_Sensor_PutCRLF 2FFF                UART_Sensor_PutChar 2F4C            UART_Sensor_RX_COMPLETE 0008  
          bUART_Sensor_ReadRxData 2EEE        UART_Sensor_TX_BUFFER_EMPTY 0010            _UART_Sensor_CPutString 2FED  
               _UART_Sensor_Start 2EDA            UART_Sensor_RX_INT_MASK 0008                 _UART_Sensor_Write 2F99  
                SYSTEM_STACK_PAGE 0003        UART_Sensor_RX_PARITY_ERROR 0080            UART_Sensor_RX_REG_FULL 0008  
                    FLAG_XIO_MASK 0010         _UART_Sensor_bReadRxStatus 2EF1         SYSTEM_IDXPG_TRACKS_IDX_PP 0001  
       _UART_Sensor_bReadTxStatus 2EEB             UART_Sensor_RX_INT_REG 00E1         SYSTEM_IDXPG_TRACKS_STK_PP 0000  
           UART_Sensor_RX_NO_DATA 0001           UART_Sensor_SetTxIntMode 2EC8           UART_Sensor_RXBUF_ENABLE 0000  
HI-TECH Software Macro Assembler (PSoC MCU) V9.61
                                                                                                           Thu Jul 09 11:34:32 2015
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  FILENAME:   UART_Sensor.inc
     4                          ;;  Version: 5.3, Updated on 2013/5/19 at 10:44:49
     5                          ;;  Generated by PSoC Designer 5.4.2946
     6                          ;;
     7                          ;;  DESCRIPTION:  Assembler declarations for the UART user module.
     8                          ;;-----------------------------------------------------------------------------
     9                          ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
    10                          ;;*****************************************************************************
    11                          ;;*****************************************************************************
    12                          
    13                          ;--------------------------------------------------
    14                          ; Constants for UART_Sensor API's
    15                          ;--------------------------------------------------
    16                          
    17                          ;mask value for global int reg bit for TX instance
    18  0004                    UART_Sensor_TX_INT_MASK:                     equ 0x04
    19  00E1                    UART_Sensor_TX_INT_REG:                      equ 0x0e1  ;TX interrupt address
    20  0008                    UART_Sensor_RX_INT_MASK:                     equ 0x08  ;mask value for global int reg bit for RX ins
                                tance
    21  00E1                    UART_Sensor_RX_INT_REG:                      equ 0x0e1  ;RX interrupt address
    22                          
    23  0000                    UART_Sensor_RXBUF_ENABLE:                    equ 0
    24                          
    25                          ; Interrupt control masks
    26  0001                    UART_Sensor_ENABLE_RX_INT:                   equ 0x01
    27  0000                    UART_Sensor_DISABLE_RX_INT:                  equ 0x00
    28  0002                    UART_Sensor_ENABLE_TX_INT:                   equ 0x02
    29  0000                    UART_Sensor_DISABLE_TX_INT:                  equ 0x00
    30                          
    31  0000                    UART_Sensor_INT_MODE_TX_REG_EMPTY:           equ 0x00
    32  0001                    UART_Sensor_INT_MODE_TX_COMPLETE:            equ 0x01
    33                          
    34  0020                    UART_Sensor_RX_IGNORE_BELOW:                 equ 0x20
    35  0010                    UART_Sensor_RX_BUFFER_SIZE:                  equ 0x10
    36  000D                    UART_Sensor_CMD_TERM:                        equ 0xd
    37  0020                    UART_Sensor_DELIMITER:                       equ 0x20
    38  0000                    UART_Sensor_BACKSPACE_ENABLE:                equ 0x0
    39                          
    40                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    41                          ;       WARNING WARNING WARNING
    42                          ; The following equates are for backwards
    43                          ; compatibility only and should not be used
    44                          ; for new designs.
    45                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    46                          
    47                          ;------------------------------------
    48                          ;  Parity masks
    49                          ;------------------------------------
    50  0000                    UART_PARITY_NONE:       equ   00h
    51  0002                    UART_PARITY_EVEN:       equ   02h
    52  0006                    UART_PARITY_ODD:        equ   06h
    53                          
    54                          ;------------------------------------
    55                          ;  TX Status Register masks
    56                          ;------------------------------------
    57  0020                    UART_TX_COMPLETE:       equ   20h
    58  0010                    UART_TX_BUFFER_EMPTY:   equ   10h
    59                          
    60                          ;------------------------------------
    61                          ;  RX Status Register masks
    62                          ;------------------------------------
    63  0010                    UART_RX_ACTIVE:         equ   10h
    64  0008                    UART_RX_COMPLETE:       equ   08h
    65  0080                    UART_RX_PARITY_ERROR:   equ   80h
    66  0040                    UART_RX_OVERRUN_ERROR:  equ   40h
    67  0020                    UART_RX_FRAMING_ERROR:  equ   20h
    68  00E0                    UART_RX_NO_ERROR:       equ   E0h
    69                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    70                          ;             END WARNING
    71                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    72                          
    73                          
    74                          
    75                          ;------------------------------------
    76                          ;  Parity masks
    77                          ;------------------------------------
    78  0000                    UART_Sensor_PARITY_NONE:                equ   00h
    79  0002                    UART_Sensor_PARITY_EVEN:                equ   02h
    80  0006                    UART_Sensor_PARITY_ODD:                 equ   06h
    81                          
    82                          ;------------------------------------
    83                          ;  TX Status Register masks
    84                          ;------------------------------------
    85  0020                    UART_Sensor_TX_COMPLETE:                equ   20h
    86  0010                    UART_Sensor_TX_BUFFER_EMPTY:            equ   10h
    87                          
    88                          ;------------------------------------
    89                          ;  RX Status Register masks
    90                          ;------------------------------------
    91  0010                    UART_Sensor_RX_ACTIVE:                  equ   10h
    92  0008                    UART_Sensor_RX_COMPLETE:                equ   08h
    93  0008                    UART_Sensor_RX_REG_FULL:                equ   08h
    94  0080                    UART_Sensor_RX_PARITY_ERROR:            equ   80h
    95  0040                    UART_Sensor_RX_OVERRUN_ERROR:           equ   40h
    96  0020                    UART_Sensor_RX_FRAMING_ERROR:           equ   20h
    97  00E0                    UART_Sensor_RX_ERROR:                   equ   E0h
    98  0001                    UART_Sensor_RX_ENABLE:                  equ   01h
    99                          
   100  00F0                    UART_Sensor_RX_BUF_ERROR:               equ   F0h  ; Mask for any Rx that may occur.
   101  0010                    UART_Sensor_RX_BUF_OVERRUN:             equ   10h  ; This indicates the software buffer has
   102                                                                                  ; been over run.
   103  0001                    UART_Sensor_RX_BUF_CMDTERM:             equ   01h  ; Command terminator has been received.
   104                          
   105  0001                    UART_Sensor_RX_NO_DATA:                 equ   01h
   106  00E0                    UART_Sensor_RX_NO_ERROR:                equ   E0h
   107                          
   108                          
   109                          ;--------------------------------------------------
   110                          ; Registers Address Constants for UART_Sensor
   111                          ;--------------------------------------------------
   112                          ;---------------------------------
   113                          ;  Registers used by TX
   114                          ;---------------------------------
   115  002B                    UART_Sensor_TX_CONTROL_REG: equ 2bh            ; Control register
   116  0028                    UART_Sensor_TX_SHIFT_REG:   equ 28h               ; TX Shift Register register
   117  0029                    UART_Sensor_TX_BUFFER_REG:  equ 29h               ; TX Buffer Register
   118  0028                    UART_Sensor_TX_FUNC_REG:    equ 28h     ; Function register
   119  0029                    UART_Sensor_TX_INPUT_REG:   equ 29h            ; Input register
   120  002A                    UART_Sensor_TX_OUTPUT_REG:  equ 2ah           ; Output register
   121                          
   122                          ;---------------------------------
   123                          ;  Registers used by RX
   124                          ;---------------------------------
   125  002F                    UART_Sensor_RX_CONTROL_REG: equ 2fh            ; Control register
   126  002C                    UART_Sensor_RX_SHIFT_REG:   equ 2ch               ; RX Shift Register register
   127  002E                    UART_Sensor_RX_BUFFER_REG:  equ 2eh               ; RX Buffer Register
   128  002C                    UART_Sensor_RX_FUNC_REG:    equ 2ch     ; Function register
   129  002D                    UART_Sensor_RX_INPUT_REG:   equ 2dh            ; Input register
   130                          UART_Sensor_RX_OUTPUT_REG:  equ 2eh           ; Output register
      + 002E                    UART_Sensor_RX_OUTPUT_REG	equ	46
      + 3D73                    ; end of file UART_Sensor.inc
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;
     4                          ;;       FILENAME: Memory.inc
     5                          ;;
     6                          ;;    DESCRIPTION: Memory Model and Stack Parameter Definitions for 
     7                          ;;                 CY8C22045 PSoC devices.
     8                          ;;
     9                          ;;  LAST MODIFIED: August 17, 2004
    10                          ;;
    11                          ;;-----------------------------------------------------------------------------
    12                          ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
    13                          ;;*****************************************************************************
    14                          ;;*****************************************************************************
    15                          ;
    16                          ;
    17                          ;  ******** Define Memory Model and Stack parameters ********
    18                          ;
    19  0001                    IMAGECRAFT: equ 1   
    20  0002                    HITECH: equ 2   
    21  0002                    TOOLCHAIN: equ HITECH   
    22  0001                    SYSTEM_LARGE_MEMORY_MODEL: equ 1   
    23  0000                    SYSTEM_SMALL_MEMORY_MODEL: equ 0   
    24  0003                    SYSTEM_STACK_PAGE: equ 3   
    25  0000                    SYSTEM_STACK_PAGE_OFFSET: equ 0   
    26  0002                    SYSTEM_TOOLS: equ 2   
    27  0000                    SYSTEM_IDXPG_TRACKS_STK_PP: equ 0   
    28  0001                    SYSTEM_IDXPG_TRACKS_IDX_PP: equ 1   
    29  0000                    SYSTEM_MULTIPAGE_STACK: equ 0 
    30                          
    31                          
    32                          ;  ******* Function Class Definitions *******
    33                          ;
    34                          ;  These definitions are used to describe RAM access patterns. They provide
    35                          ;  documentation and they control prologue and epilogue macros that perform
    36                          ;  the necessary housekeeping functions for large memory model devices like
    37                          ;  the CY8C22045.
    38                          
    39  0001                    RAM_USE_CLASS_1:               equ 1   ; PUSH, POP & I/O access
    40  0002                    RAM_USE_CLASS_2:               equ 2   ; Indexed address mode on stack page
    41  0004                    RAM_USE_CLASS_3:               equ 4   ; Indexed address mode to any page
    42  0008                    RAM_USE_CLASS_4:               equ 8   ; Direct/Indirect address mode access
    43                          
    44                          ; ******* Hi Tech Specific *******
    45                          ; Turn on the expansion of all macros by default
    46                          IF (TOOLCHAIN & HITECH)
    47                          OPT EXPAND
    48                          ENDIF
    49                          ; ******* Page Pointer Manipulation Macros *******
    50                          ;
    51                          ;  ******* Page Pointer Manipulation Macros *******
    52                          ;
    53                          ;  Most of the following macros are conditionally compiled so they only
    54                          ;  produce code if the large memory model is selected.
    55                          
    56                             ;-----------------------------------------------
    57                             ;  Set Stack Page Macro
    58                             ;-----------------------------------------------
    59                             ;
    60                             ;  DESC: Modify STK_PP in the large or small memory Models.
    61                             ;
    62                             ; INPUT: Constant (e.g., SYSTEM_STACK_PAGE) that specifies the RAM page on
    63                             ;        which stack operations like PUSH and POP store and retrieve their
    64                             ;        data
    65                             ;
    66                             ;  COST: 8 instruction cycles (in LMM only)
    67                          
    68                             macro RAM_SETPAGE_STK( PG_NUMBER )
    69                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    70                                mov reg[STK_PP], @PG_NUMBER
    71                             ENDIF
    72  3D73                       endm
    73                          
    74                             ;-----------------------------------------------
    75                             ;  Set Current Page Macro
    76                             ;-----------------------------------------------
    77                             ;
    78                             ;  DESC: Modify CUR_PP in the large or small memory Models.
    79                             ;
    80                             ; INPUT: Constant value (e.g., >bFoo) for the RAM page number used in
    81                             ;        calculation of effective direct-mode address operands.
    82                             ;
    83                             ;  COST: 8 instruction cycles (in LMM only)
    84                          
    85                             macro RAM_SETPAGE_CUR( PG_NUMBER )
    86                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    87                                mov reg[CUR_PP], @PG_NUMBER
    88                             ENDIF
    89  3D73                       endm
    90                          
    91                             ;-----------------------------------------------
    92                             ;  Set Index Page Macro
    93                             ;-----------------------------------------------
    94                             ;
    95                             ;  DESC: Modify IDX_PP in the large or small emory Models.
    96                             ;
    97                             ; INPUT: Constant value (e.g., >caFoo) for the RAM page number used in
    98                             ;         calculation of effective index-mode address operands.
    99                             ;
   100                             ;  COST: 8 instruction cycles (in LMM only)
   101                          
   102                             macro RAM_SETPAGE_IDX( PG_NUMBER )
   103                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   104                                mov reg[IDX_PP], @PG_NUMBER
   105                             ENDIF
   106  3D73                       endm
   107                          
   108                             ;-----------------------------------------------
   109                             ;  Set MVI Read Page Macro
   110                             ;-----------------------------------------------
   111                             ;
   112                             ;  DESC: Modify MVR_PP in the large or small memory Models.
   113                             ;
   114                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   115                             ;        calculation of indirect address operands used in the
   116                             ;        "mvi A, [pFoo]" instructions.
   117                             ;
   118                             ;  COST: 8 instruction cycles (in LMM only)
   119                          
   120                             macro RAM_SETPAGE_MVR( PG_NUMBER )
   121                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   122                                mov reg[MVR_PP], @PG_NUMBER
   123                             ENDIF
   124  3D73                       endm
   125                          
   126                             ;-----------------------------------------------
   127                             ;  Set MVI Write Page Macro
   128                             ;-----------------------------------------------
   129                             ;
   130                             ;  DESC: Modify MVW_PP in the large or small memory Models.
   131                             ;
   132                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   133                             ;        calculation of indirect address operands used in the
   134                             ;        "mvi [pFoo], A" instructions.
   135                             ;
   136                             ;  COST: 8 instruction cycles (in LMM only)
   137                          
   138                             macro RAM_SETPAGE_MVW( PG_NUMBER )
   139                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   140                                mov reg[MVW_PP], @PG_NUMBER
   141                             ENDIF
   142  3D73                       endm
   143                          
   144                             ;-----------------------------------------------
   145                             ;  Force Index Page Pointer to Stack Page
   146                             ;-----------------------------------------------
   147                             ;
   148                             ;  DESC: Map index-mode operands onto the stack page by modifying IDX_PP.
   149                             ;        See also RAM_LOCK_INDEX_TO_STACKPAGE.
   150                             ;
   151                             ; INPUT: None
   152                             ;
   153                             ;  COST: 8 instruction cycles (in LMM only)
   154                          
   155                             macro RAM_SETPAGE_IDX2STK
   156                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   157                                IF ( SYSTEM_MULTIPAGE_STACK )
   158                                   mov   A, reg[STK_PP]
   159                                   mov   reg[IDX_PP], A
   160                                ELSE
   161                                   RAM_SETPAGE_IDX SYSTEM_STACK_PAGE
   162                                ENDIF
   163                             ENDIF
   164  3D73                       endm
   165                          
   166                             ;-----------------------------------------------
   167                             ;  Change Memory Mode
   168                             ;-----------------------------------------------
   169                             ;
   170                             ;  DESC: Modify FLAG_PAGEMODE bits in the large and small memory Models.
   171                             ;
   172                             ; INPUT: Constant value for PGMODE bitfield of CPU Flag register, F.
   173                             ;        See FLAG_PGMODE_{x} constants in M8C.INC.
   174                             ;
   175                             ;  COST: 8 instruction cycles (in LMM only)
   176                          
   177                             macro RAM_CHANGE_PAGE_MODE( MODE )
   178                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   179                                and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
   180                                or    F,  FLAG_PGMODE_MASK & @MODE
   181                             ENDIF
   182  3D73                       endm
   183                          
   184                             ;-----------------------------------------------
   185                             ;  Set Large Memory Model Native Paging Mode
   186                             ;-----------------------------------------------
   187                             ;
   188                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   189                             ;        paging mode *IFF* a simple "OR" is guaranteed to work---for
   190                             ;        example, in an ISR, when the PGMODE bits have been cleared
   191                             ;        to zero. If a simple "OR" is not guaranteed to work, use
   192                             ;        the slower RAM_RESTORE_NATIVE_PAGING instead.
   193                             ;
   194                             ; INPUT: none
   195                             ;
   196                             ;  COST: 4 instruction cycles (in LMM only)
   197                          
   198                             macro RAM_SET_NATIVE_PAGING
   199                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   200                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   201                                or    F,  FLAG_PGMODE_11b            ; LMM w/ IndexPage<==>StackPage
   202                             ENDIF ;  PGMODE LOCKED
   203                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   204                                or    F,  FLAG_PGMODE_10b            ; LMM with independent IndexPage
   205                             ENDIF ; PGMODE FREE
   206                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   207  3D73                       endm
   208                          
   209                             ;-----------------------------------------------
   210                             ; Restore Large Memory Model Native Paging Mode
   211                             ;-----------------------------------------------
   212                             ;
   213                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   214                             ;        paging mode. Always works because it clears the PGMODE bits
   215                             ;        before OR-ing in the new ones. See RAM_RESTORE_NATIVE_PAGING
   216                             ;        for a faster method.
   217                             ;
   218                             ; INPUT: none
   219                             ;
   220                             ;  COST: 8 instruction cycles (in LMM only)
   221                          
   222                             macro RAM_RESTORE_NATIVE_PAGING
   223                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   224                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   225                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_11b ; LMM w/ IndexPage<==>StackPage
   226                             ENDIF ;  PGMODE LOCKED
   227                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   228                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b ; LMM with independent IndexPage
   229                             ENDIF ; PGMODE FREE
   230                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   231  3D73                       endm
   232                          
   233                             ;-----------------------------------------------
   234                             ; Force indexed addr mode operands to Stack Pg
   235                             ;-----------------------------------------------
   236                             ;
   237                             ;  DESC: Force instructions that use indexed address mode to reference the
   238                             ;        stack page (as defined by STK_PP). This macro sets the "Indexed
   239                             ;        Stack Mode" bit (LSB) of the PGMODE bit field in the CPU Flag
   240                             ;        register, F. (See also RAM_SETPAGE_IDX2STK, above.)
   241                             ;
   242                             ; INPUT: none
   243                             ;
   244                             ;  COST: 4 instruction cycles (in LMM only)
   245                          
   246                             macro RAM_X_POINTS_TO_STACKPAGE
   247                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   248                                or   F, FLAG_PGMODE_01b
   249                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   250  3D73                       endm
   251                          
   252                             ;-----------------------------------------------
   253                             ;  Force indexed addr mode operands to Index Pg
   254                             ;-----------------------------------------------
   255                             ;
   256                             ;  DESC: Permit instructions that use indexed address mode to reference page
   257                             ;        zero or the page pointed to by the IDX_PP register, depending on the
   258                             ;        setting of the MSb (or "Direct Page Mode" bit) of the PGMODE bits
   259                             ;        in the CPU Flag register, F. (This macro clears the PGMODE LSb.)
   260                             ;
   261                             ; INPUT: none
   262                             ;
   263                             ;  COST: 4 instruction cycles (in LMM only)
   264                          
   265                             macro RAM_X_POINTS_TO_INDEXPAGE
   266                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   267                                and  F, ~FLAG_PGMODE_01b
   268                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   269  3D73                       endm
   270                          
   271                             ;-----------------------------------------------
   272                             ;  Function Prologue
   273                             ;-----------------------------------------------
   274                             ;
   275                             ;  Prologue for functions that run in the LMM and SMM.
   276                             ;
   277                          
   278                             macro RAM_PROLOGUE( ACTUAL_CLASS )
   279                          
   280                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   281                             ; Nothing to do
   282                             ENDIF ; RAM_USE_CLASS_1
   283                          
   284                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   285                                IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   286                                   RAM_X_POINTS_TO_STACKPAGE         ; exit native paging mode!
   287                                ENDIF
   288                             ENDIF ; RAM_USE_CLASS_2
   289                          
   290                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   291                                IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   292                                   RAM_X_POINTS_TO_INDEXPAGE         ; exit native paging mode!
   293                                ENDIF
   294                             ENDIF ; RAM_USE_CLASS_3
   295                          
   296                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   297                             ; Nothing to do
   298                             ENDIF ; RAM_USE_CLASS_4
   299                          
   300  3D73                       endm
   301                          
   302                             ;-----------------------------------------------
   303                             ;  Function Epilogue
   304                             ;-----------------------------------------------
   305                             ;
   306                             ;  Prologue for functions that run in the LMM and SMM.
   307                             ;
   308                          
   309                             macro RAM_EPILOGUE( ACTUAL_CLASS )
   310                          
   311                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   312                             ; Nothing to do
   313                             ENDIF ; RAM_USE_CLASS_1
   314                          
   315                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   316                                RAM_RESTORE_NATIVE_PAGING
   317                             ENDIF ; RAM_USE_CLASS_2
   318                          
   319                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   320                                RAM_RESTORE_NATIVE_PAGING
   321                             ENDIF ; RAM_USE_CLASS_3
   322                          
   323                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   324                             ; Nothing to do
   325                             ENDIF ; RAM_USE_CLASS_4
   326                          
   327  3D73                       endm
   328                          
   329                             ;-----------------------------------------------
   330                             ;  Preserve Register
   331                             ;-----------------------------------------------
   332                             ;
   333                             ;  DESC: Preserve a register value on the stack
   334                             ;
   335                             ; INPUT: Name or address of register in I/O Space
   336                             ;        The I/O bank is an implicit parameter. That is, this function will
   337                             ;        Access the I/O bank currently specified by the CPU Flag register.
   338                             ;
   339                             ;  USES: CPU 'A' register
   340                             ;
   341                             ;  COST: 9 instruction cycles
   342                          
   343                             macro REG_PRESERVE( IOReg )
   344                             mov   A, reg[ @IOReg ]
   345                             push  A
   346  3D73                       endm
   347                          
   348                             ;-----------------------------------------------
   349                             ;  Restore Register
   350                             ;-----------------------------------------------
   351                             ;
   352                             ;  DESC: Restore a register value from the stack
   353                             ;
   354                             ; INPUT: Name or address of register in I/O Space
   355                             ;        The I/O bank is an implicit parameter. That is, this function will
   356                             ;        Access the I/O bank currently specified by the CPU Flag register.
   357                             ;
   358                             ;  USES: CPU 'A' register
   359                             ;
   360                             ;  COST: 10 instruction cycles
   361                          
   362                             macro REG_RESTORE( IOReg )
   363                             pop   A
   364                             mov   reg[ @IOReg ], A
   365  3D73                       endm
   366                          
   367                             ;-----------------------------------------------
   368                             ;  Preserve Volatile Page Pointer Registers
   369                             ;-----------------------------------------------
   370                             ;
   371                             ;  DESC: Invoked by ISRs before switching to the LMM mode and calling
   372                             ;        functions that require on it.
   373                             ;
   374                             ; INPUT: none
   375                             ;
   376                             ;  USES: CPU 'A' register
   377                             ;
   378                             ;  COST: 45 instruction cycles (in LMM only)
   379                          
   380                             macro ISR_PRESERVE_PAGE_POINTERS
   381                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   382                                REG_PRESERVE CUR_PP
   383                                REG_PRESERVE IDX_PP
   384                                REG_PRESERVE MVR_PP
   385                                REG_PRESERVE MVW_PP
   386                             ENDIF
   387  3D73                       endm
   388                          
   389                             ;-----------------------------------------------
   390                             ;  Restore Volatile Page Pointer Registers
   391                             ;-----------------------------------------------
   392                             ;
   393                             ;  DESC: Undo for RAM_PRESERVE_PAGE_POINTERS macro. Invoked by ISRs after
   394                             ;        calling functions that run in the LMM mode and before executing
   395                             ;        the RETI instruction.
   396                             ;
   397                             ; INPUT: none
   398                             ;
   399                             ;  USES: CPU 'A' register
   400                             ;
   401                             ;  COST: 50 instruction cycles (in LMM only)
   402                          
   403                             macro ISR_RESTORE_PAGE_POINTERS
   404                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   405                                REG_RESTORE MVW_PP
   406                                REG_RESTORE MVR_PP
   407                                REG_RESTORE IDX_PP
   408                                REG_RESTORE CUR_PP
   409                             ENDIF
   410                             endm
      + 3D73                    
      + 3D73                    ; end of file Memory.inc
     1                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     2                          ;;;
     3                          ;;;  M8C.INC -- Microcontroller Device System Declarations
     4                          ;;;
     5                          ;;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
     6                          ;;;
     7                          ;;;  This file provides address constants, bit field masks and a set of macro
     8                          ;;;  facilities for the Cypress Semiconductor CY8C22045 Microcontroller devices.
     9                          ;;;
    10                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    11                          
    12                          ;;=============================================================================
    13                          ;; Definition of abbreviations used in the descriptions below
    14                          ;;  (RW)   The register or bit supports reads and writes
    15                          ;;  (W)    The register or bit is write-only
    16                          ;;  (R)    The register or bit is read-only
    17                          ;;  (#)    Access to the register is bit specific (see the family datasheet)
    18                          ;;  (RC)   The register or bit can be read, but writing a 0 will clear it,
    19                          ;;         writing a 1 will have no effect.
    20                          ;;=============================================================================
    21                          
    22                          ;;=============================================================================
    23                          ;;      System Registers
    24                          ;;=============================================================================
    25                          
    26                          ;----------------------------
    27                          ;  Flag Register Bit Fields
    28                          ;----------------------------
    29  00C0                    FLAG_PGMODE_MASK:  equ 0C0h     ; Paging control for > 256 bytes of RAM
    30  0000                    FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
    31  0040                    FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
    32  0080                    FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
    33  00C0                    FLAG_PGMODE_3:     equ 0C0h       ; Direct to CUR_PP page, indexed to STK_PP page
    34  0000                    FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
    35  0040                    FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
    36  0080                    FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
    37  00C0                    FLAG_PGMODE_11b:   equ 0C0h       ; Same as PGMODE_3
    38  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    39  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    40  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    41  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    42  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    43                          
    44                          
    45                          ;;=============================================================================
    46                          ;;      Register Space, Bank 0
    47                          ;;=============================================================================
    48                          
    49                          ;------------------------------------------------
    50                          ;  Port Registers
    51                          ;  Note: Also see this address range in Bank 1.
    52                          ;------------------------------------------------
    53                          ; Port 0
    54  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    55  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    56  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    57  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    58                          ; Port 1
    59  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    60  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    61  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    62  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    63                          ; Port 2
    64  0008                    PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
    65  0009                    PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
    66  000A                    PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
    67  000B                    PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
    68                          ; Port 3
    69  000C                    PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
    70  000D                    PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
    71  000E                    PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
    72  000F                    PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
    73                          ; Port 4
    74  0010                    PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
    75  0011                    PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
    76  0012                    PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
    77  0013                    PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
    78                          
    79                          ;------------------------------------------------
    80                          ;  Digital PSoC(tm) block Registers
    81                          ;  Note: Also see this address range in Bank 1.
    82                          ;------------------------------------------------
    83                          ; Digital PSoC block 00, Basic Type C
    84  0020                    DBC00DR0:     equ 20h          ; data register 0                          (#)
    85  0021                    DBC00DR1:     equ 21h          ; data register 1                          (W)
    86  0022                    DBC00DR2:     equ 22h          ; data register 2                          (RW)
    87  0023                    DBC00CR0:     equ 23h          ; control & status register 0              (#)
    88                          
    89                          ; Digital PSoC block 01, Basic Type C
    90  0024                    DBC01DR0:     equ 24h          ; data register 0                          (#)
    91  0025                    DBC01DR1:     equ 25h          ; data register 1                          (W)
    92  0026                    DBC01DR2:     equ 26h          ; data register 2                          (RW)
    93  0027                    DBC01CR0:     equ 27h          ; control & status register 0              (#)
    94                          
    95                          ; Digital PSoC block 02, Communications Type C
    96  0028                    DCC02DR0:     equ 28h          ; data register 0                          (#)
    97  0029                    DCC02DR1:     equ 29h          ; data register 1                          (W)
    98  002A                    DCC02DR2:     equ 2Ah          ; data register 2                          (RW)
    99  002B                    DCC02CR0:     equ 2Bh          ; control & status register 0              (#)
   100                          
   101                          ; Digital PSoC block 03, Communications Type C
   102  002C                    DCC03DR0:     equ 2Ch          ; data register 0                          (#)
   103  002D                    DCC03DR1:     equ 2Dh          ; data register 1                          (W)
   104  002E                    DCC03DR2:     equ 2Eh          ; data register 2                          (RW)
   105  002F                    DCC03CR0:     equ 2Fh          ; control & status register 0              (#)
   106                          
   107                          ; Digital PSoC block 10, Basic Type C
   108  0030                    DBC10DR0:     equ 30h          ; data register 0                          (#)
   109  0031                    DBC10DR1:     equ 31h          ; data register 1                          (W)
   110  0032                    DBC10DR2:     equ 32h          ; data register 2                          (RW)
   111  0033                    DBC10CR0:     equ 33h          ; control & status register 0              (#)
   112                          
   113                          ; Digital PSoC block 11, Basic Type C
   114  0034                    DBC11DR0:     equ 34h          ; data register 0                          (#)
   115  0035                    DBC11DR1:     equ 35h          ; data register 1                          (W)
   116  0036                    DBC11DR2:     equ 36h          ; data register 2                          (RW)
   117  0037                    DBC11CR0:     equ 37h          ; control & status register 0              (#)
   118                          
   119                          ; Digital PSoC block 12, Communications Type C
   120  0038                    DCC12DR0:     equ 38h          ; data register 0                          (#)
   121  0039                    DCC12DR1:     equ 39h          ; data register 1                          (W)
   122  003A                    DCC12DR2:     equ 3Ah          ; data register 2                          (RW)
   123  003B                    DCC12CR0:     equ 3Bh          ; control & status register 0              (#)
   124                          
   125                          ; Digital PSoC block 13, Communications Type C
   126  003C                    DCC13DR0:     equ 3Ch          ; data register 0                          (#)
   127  003D                    DCC13DR1:     equ 3Dh          ; data register 1                          (W)
   128  003E                    DCC13DR2:     equ 3Eh          ; data register 2                          (RW)
   129  003F                    DCC13CR0:     equ 3Fh          ; control & status register 0              (#)
   130                          
   131                          ;-------------------------------------
   132                          ;  Analog Control Registers
   133                          ;-------------------------------------
   134  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
   135  00C0                    AMX_IN_ACI3:          equ C0h    ; MASK: column 3 input mux
   136  0030                    AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
   137  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
   138  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
   139                          
   140  0061                    AMUX_CFG:      equ 61h          ; Analog MUX Configuration
   141  0030                    AMUX_CFG_INTCAP:       equ 30h    ;
   142  000E                    AMUX_CFG_MUXCLK:  	  equ 0Eh	 ;
   143  0001                    AMUX_CFG_EN:		  	  equ 01h	 ;
   144+                         
   145+                         ; old declarations DO NOT USE
   146+ 0061                    AMUXCFG:      equ 61h          ; Analog MUX Configuration
   147+ 0030                    AMUXCFG_INTCAP:       equ 30h    ;
   148  000E                    AMUXCFG_MUXCLK:  	  equ 0Eh	 ;
   149  0001                    AMUXCFG_EN:		  	  equ 01h	 ;
   150                          
   151  0062                    PWM_CR:       equ 62h          ; Pulse-Width Modulator Control
   152  0038                    PWM_CR_HIGH:          equ 38h    ; MASK: PWM high time
   153  0006                    PWM_CR_LOW:           equ 06h	 ; MASK: PWM low time
   154  0001                    PWM_CR_EN:            equ 01h	 ; MASK: Enable/Disable PWM function
   155                          
   156  0063                    ARF_CR:       equ 63h          ; Analog Reference Control
   157                          
   158  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus Register           (#)
   159  0080                    CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
   160  0040                    CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
   161  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
   162  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
   163  0008                    CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
   164  0004                    CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
   165  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
   166  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   167                          
   168  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   169  0020                    CMP_CR1_CLDIS1:       equ 20h    ; MASK: Column 1 comparator output latch
   170  0010                    CMP_CR1_CLDIS0:	      equ 10h    ; MASK: Column 0 comparator output latch
   171                          
   172  0068                    ADC0_CR:      equ 68h          ; Analog Column 0 Configuration
   173  0080                    ADC0_CR_CMPST:        equ 80h    ;
   174  0040                    ADC0_CR_LOREN:        equ 40h    ;
   175  0020                    ADC0_CR_SHEN:         equ 20h    ;
   176  0008                    ADC0_CR_CBSRC:        equ 08h    ;
   177  0004                    ADC0_CR_ADCM:         equ 04h    ;
   178  0001                    ADC0_CR_EN:	          equ 01h    ;
   179                          
   180  0069                    ADC1_CR:      equ 69h          ; Analog Column 1 Configuration
   181  0080                    ADC1_CR_CMPST:        equ 80h    ;
   182  0040                    ADC1_CR_LOREN:        equ 40h    ;
   183  0020                    ADC1_CR_SHEN:         equ 20h    ;
   184  0008                    ADC1_CR_CBSRC:        equ 08h    ;
   185  0004                    ADC1_CR_ADCM:         equ 04h    ;
   186  0001                    ADC1_CR_EN:	          equ 01h    ;
   187                          
   188                          ; Continuous Time PSoC block Type E Row 0 Col 0
   189  0072                    ACE00CR1:     equ 72h          ; Control register 1                       (RW)
   190  0073                    ACE00CR2:     equ 73h          ; Control register 2                       (RW)
   191                          
   192                          ; Continuous Time PSoC block Type E Row 0 Col 1
   193  0076                    ACE01CR1:     equ 76h          ; Control register 1                       (RW)
   194  0077                    ACE01CR2:     equ 77h          ; Control register 2                       (RW)
   195                          
   196                          ; Switched Cap PSoC blockType E Row 1 Col 0
   197  0080                    ASE10CR0:     equ 80h          ; Control register 0                       (RW)
   198                          
   199                          ; Switched Cap PSoC blockType E Row 1 Col 1
   200  0084                    ASE11CR0:     equ 84h          ; Control register 0                       (RW)
   201                          
   202                          ;-----------------------------------------------
   203                          ;  Global General Purpose Data Registers
   204                          ;-----------------------------------------------
   205  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   206  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   207  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   208  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   209                          
   210                          ;------------------------------------------------
   211                          ;  Row Digital Interconnects
   212                          ;
   213                          ;  Note: the following registers are mapped into
   214                          ;  both register bank 0 AND register bank 1.
   215                          ;------------------------------------------------
   216                          
   217  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   218  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   219  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   220  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   221  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   222  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   223  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   224                          
   225  00B8                    RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
   226  00B9                    RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
   227  00BA                    RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
   228+ 00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   229+ 00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   230  00BD                    RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
   231  00BE                    RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
   232                          
   233                          ;-----------------------------------------------
   234                          ;  Ram Page Pointers
   235                          ;-----------------------------------------------
   236  00D0                    CUR_PP:      equ 0D0h           ; Current   Page Pointer
   237  00D1                    STK_PP:      equ 0D1h           ; Stack     Page Pointer
   238  00D3                    IDX_PP:      equ 0D3h           ; Index     Page Pointer
   239  00D4                    MVR_PP:      equ 0D4h           ; MVI Read  Page Pointer
   240  00D5                    MVW_PP:      equ 0D5h           ; MVI Write Page Pointer
   241                          
   242                          ;------------------------------------------------
   243                          ;  I2C Configuration Registers
   244                          ;------------------------------------------------
   245  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   246  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   247  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   248  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   249  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   250  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   251  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   252  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   253  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   254  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   255                          
   256  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   257  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   258  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   259  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   260  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   261  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   262  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   263  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   264  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   265                          
   266  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   267                          
   268  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   269  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   270  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   271  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   272  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   273                          
   274                          ;------------------------------------------------
   275                          ;  System and Global Resource Registers
   276                          ;------------------------------------------------
   277  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   278                                                         ; Use INT_MSK0 bit field masks
   279  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   280                                                         ; Use INT_MSK1 bit field masks
   281  00DC                    INT_CLR2:     equ 0DCh          ; Interrupt Clear Register 2               (RW)
   282                                                         ; Use INT_MSK2 bit field masks
   283  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   284                                                         ; Use INT_MSK3 bit field masks
   285                          
   286  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   287  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   288  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   289                          
   290  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   291  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   292  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   293  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   294  0010                    INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
   295  0008                    INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
   296  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   297  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   298  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   299                          
   300  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   301  0080                    INT_MSK1_DCC13:            equ 80h ; MASK: enable/disable DCC13 block interrupt
   302  0040                    INT_MSK1_DCC12:            equ 40h ; MASK: enable/disable DCC12 block interrupt
   303  0020                    INT_MSK1_DBC11:            equ 20h ; MASK: enable/disable DBC11 block interrupt
   304  0010                    INT_MSK1_DBC10:            equ 10h ; MASK: enable/disable DBC10 block interrupt
   305  0008                    INT_MSK1_DCC03:            equ 08h ; MASK: enable/disable DCC03 block interrupt
   306  0004                    INT_MSK1_DCC02:            equ 04h ; MASK: enable/disable DCC02 block interrupt
   307  0002                    INT_MSK1_DBC01:            equ 02h ; MASK: enable/disable DBC01 block interrupt
   308  0001                    INT_MSK1_DBC00:            equ 01h ; MASK: enable/disable DBC00 block interrupt
   309                          
   310  00DF                    INT_MSK2:     equ DFh			; Custom block Mask Register			   (RW)
   311  0010                    INT_MSK2_SARADC:           equ 10h ; MASK: enable/disable SARADC block interrupt
   312  0020                    INT_MSK2_CSD0:             equ 20h ; MASK: enable/disable CSD0 block interrupt
   313  0040                    INT_MSK2_CSD1:             equ 40h ; MASK: enable/disable CSD1 block interrupt
   314  0080                    INT_MSK2_RTC:              equ 80h ; MASK: enable/disable RTC block interrupt
   315                          
   316  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   317  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   318                          
   319                          ;------------------------------------------------------
   320                          ;  MAC Registers
   321                          ;------------------------------------------------------
   322                          
   323  00E8                    MUL0_X:       equ 0E8h          ; Multiply Input X Register                (W)
   324  00E9                    MUL0_Y:       equ 0E9h          ; Multiply Input Y Register                (W)
   325  00EA                    MUL0_DH:      equ 0EAh          ; Multiply Result High Byte Register       (R)
   326  00EB                    MUL0_DL:      equ 0EBh          ; Multiply Result Low Byte Register        (R)
   327                          
   328  00EC                    ACC0_DR1:     equ 0ECh          ; Accumulator Data Register 1              (RW)
   329  00ED                    ACC0_DR0:     equ 0EDh          ; Accumulator Data Register 0              (RW)
   330  00EE                    ACC0_DR3:     equ 0EEh          ; Accumulator Data Register 3              (RW)
   331  00EF                    ACC0_DR2:     equ 0EFh          ; Accumulator Data Register 2              (RW)
   332                          
   333                          ; DECIMATOR Control Registers
   334  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   335  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   336                          
   337                          ;------------------------------------------------------
   338                          ;  System Status and Control Registers
   339                          ;
   340                          ;  Note: The following registers are mapped into both
   341                          ;        register bank 0 AND register bank 1.
   342                          ;------------------------------------------------------
   343  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   344                                                             ; Use FLAG_ masks defined at top of file
   345                          
   346  00FD                    DAC_D:        equ 0FDh		   ; DAC Data Register                        (RW)
   347                          
   348  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   349  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: flag, Internal Reset Status bit
   350  0010                    CPU_SCR1_SLIMO:         equ 10h	   ; MASK: Slow IMO (internal main osc) enable
   351  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   352  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   353  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   354                          
   355  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   356  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   357  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   358  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   359  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   360  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   361                          
   362                          ;------------------------------------------------------
   363                          ;  Neon Capsense Digital Control Registers
   364                          ;------------------------------------------------------
   365  0050                    CSD0_DR0_L:				equ 50h		; Capsense 0 data low 0				(RW)
   366  0054                    CSD0_DR0_H:				equ 54h		; Capsense 0 data high 0			(RW)
   367  0058                    CSD1_DR0_L:				equ 58h		; Capsense 1 data low 0				(RW)
   368  005C                    CSD1_DR0_H:				equ 5Ch		; Capsense 1 data high 0			(RW)
   369  0051                    CSD0_DR1_L:				equ 51h		; Capsense 0 data low 1				(RW)
   370  0055                    CSD0_DR1_H:				equ 55h		; Capsense 0 data high 1			(RW)
   371  0059                    CSD1_DR1_L:				equ 59h		; Capsense 1 data low 1				(RW)
   372  005D                    CSD1_DR1_H:				equ 5Dh		; Capsense 1 data high 1			(RW)
   373  0052                    CSD0_CNT_L:				equ 52h		; Capsense 0 counter low			(RW)
   374  0056                    CSD0_CNT_H:				equ 56h		; Capsense 0 counter high			(RW)
   375  005A                    CSD1_CNT_L:				equ 5Ah		; Capsense 1 counter low			(RW)
   376  005E                    CSD1_CNT_H:				equ	5Eh		; Capsense 1 counter high			(RW)
   377  0053                    CSD0_CR0:				equ 53h		; Capsense 0 control 0				(RW)
   378  005B                    CSD1_CR0:				equ 5Bh		; Capsense 1 control 0				(RW)
   379  0057                    CSD0_CR1:				equ 57h		; Capsense 0 control 1				(RW)
   380  005F                    CSD1_CR1:				equ 5Fh		; Capsense 1 control 1				(RW)
   381                          
   382                          ;------------------------------------------------------
   383                          ;  Neon Analog Registers
   384                          ;------------------------------------------------------
   385  0065                    ASY_CR:					equ 65h		; Analog Synchronization Control	(RW)
   386  006A                    ADC_DH:					equ 6Ah		; ADC data high						(RW)
   387  006B                    ADC_DL:					equ 6Bh		; ADC data low						(RW)
   388  00C8                    PWMVREF0:				equ C8h		; PWM Voltage Reference 0			(RW)
   389  00C9                    PWMVREF1:				equ C9h		; PWM Voltage Reference 1			(RW)
   390  00CB                    PWMSRC:					equ CBh		; PWM Source						(RW)
   391  00CA                    IDACMODE:				equ CAh		; IDAC Mode							(RW)
   392  00FC                    IDACR_D:				equ FCh		; Analog Mux DAC data 0				(RW)
   393  00FD                    IDACL_D:				equ FDh		; Analog Mux DAC data 1				(RW)
   394                          
   395                          ;------------------------------------------------------
   396                          ;  Neon Digital Registers
   397                          ;------------------------------------------------------
   398  00B7                    RDI0DSM:				equ B7h		; Row Digital Interconnect input select 0	(RW)
   399  00BF                    RDI1DSM:				equ BFh		; Row Digital Interconnect input select 1	(RW)
   400                          
   401                          ;------------------------------------------------------
   402                          ;  Neon Test Registers
   403                          ;------------------------------------------------------
   404  00CC                    TSCR0:					equ CCh		; Tsource 0							(RW)
   405  00CD                    TSCMPH:					equ CDh		; TSCMP high						(RW)
   406  00CE                    TSCMPL:					equ CEh		; TSCMP low							(RW)
   407  00CF                    TSCR1:					equ CFh		; Tsource 1							(RW)
   408                          
   409                          ;;=============================================================================
   410                          ;;      Register Space, Bank 1
   411                          ;;=============================================================================
   412                          
   413                          ;------------------------------------------------
   414                          ;  Port Registers
   415                          ;  Note: Also see this address range in Bank 0.
   416                          ;------------------------------------------------
   417                          ; Port 0
   418  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   419  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   420  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   421  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   422                          
   423                          ; Port 1
   424  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   425  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   426  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   427  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   428                          
   429                          ; Port 2
   430  0008                    PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
   431  0009                    PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
   432  000A                    PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
   433  000B                    PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
   434                          
   435                          ; Port 3
   436  000C                    PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
   437  000D                    PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
   438  000E                    PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
   439  000F                    PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
   440                          
   441                          ; Port 4
   442  0010                    PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
   443  0011                    PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
   444  0012                    PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
   445  0013                    PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
   446                          
   447                          ;------------------------------------------------
   448                          ;  Digital PSoC(tm) block Registers
   449                          ;  Note: Also see this address range in Bank 0.
   450                          ;------------------------------------------------
   451                          
   452                          ; Digital PSoC block 00, Basic Type C
   453  0020                    DBC00FN:      equ 20h          ; Function Register                        (RW)
   454  0021                    DBC00IN:      equ 21h          ;    Input Register                        (RW)
   455  0022                    DBC00OU:      equ 22h          ;   Output Register                        (RW)
   456  0023                    DBC00CR1:     equ 23h          ;   control & status register 1            (RW)
   457                          
   458                          ; Digital PSoC block 01, Basic Type C
   459  0024                    DBC01FN:      equ 24h          ; Function Register                        (RW)
   460  0025                    DBC01IN:      equ 25h          ;    Input Register                        (RW)
   461  0026                    DBC01OU:      equ 26h          ;   Output Register                        (RW)
   462  0027                    DBC01CR1:     equ 27h          ;   control & status register 1            (RW)
   463                          
   464                          ; Digital PSoC block 02, Communications Type C
   465  0028                    DCC02FN:      equ 28h          ; Function Register                        (RW)
   466  0029                    DCC02IN:      equ 29h          ;    Input Register                        (RW)
   467  002A                    DCC02OU:      equ 2Ah          ;   Output Register                        (RW)
   468  002B                    DBC02CR1:     equ 2Bh          ;   control & status register 1            (RW)
   469                          
   470                          ; Digital PSoC block 03, Communications Type C
   471  002C                    DCC03FN:      equ 2Ch          ; Function Register                        (RW)
   472  002D                    DCC03IN:      equ 2Dh          ;    Input Register                        (RW)
   473  002E                    DCC03OU:      equ 2Eh          ;   Output Register                        (RW)
   474  0029                    DBC03CR1:     equ 29h          ;   control & status register 1            (RW)
   475                          
   476                          ; Digital PSoC block 10, Basic Type C
   477  0030                    DBC10FN:      equ 30h          ; Function Register                        (RW)
   478  0031                    DBC10IN:      equ 31h          ;    Input Register                        (RW)
   479  0032                    DBC10OU:      equ 32h          ;   Output Register                        (RW)
   480  0033                    DBC10CR1:     equ 33h          ;   control & status register 1            (RW)
   481                          
   482                          ; Digital PSoC block 11, Basic Type C
   483  0034                    DBC11FN:      equ 34h          ; Function Register                        (RW)
   484  0035                    DBC11IN:      equ 35h          ;    Input Register                        (RW)
   485  0036                    DBC11OU:      equ 36h          ;   Output Register                        (RW)
   486  0037                    DBC11CR1:     equ 37h          ;   control & status register 1            (RW)
   487                          
   488                          ; Digital PSoC block 12, Communications Type C
   489  0038                    DCC12FN:      equ 38h          ; Function Register                        (RW)
   490  0039                    DCC12IN:      equ 39h          ;    Input Register                        (RW)
   491  003A                    DCC12OU:      equ 3Ah          ;   Output Register                        (RW)
   492  003B                    DBC12CR1:     equ 3Bh          ;   control & status register 1            (RW)
   493                          
   494                          ; Digital PSoC block 13, Communications Type C
   495  003C                    DCC13FN:      equ 3Ch          ; Function Register                        (RW)
   496  003D                    DCC13IN:      equ 3Dh          ;    Input Register                        (RW)
   497  003E                    DCC13OU:      equ 3Eh          ;   Output Register                        (RW)
   498  003F                    DBC13CR1:     equ 3Fh          ;   control & status register 1            (RW)
   499                          
   500                          ;------------------------------------------------
   501                          ;  System and Global Resource Registers
   502                          ;  Note: Also see this address range in Bank 0.
   503                          ;------------------------------------------------
   504                          
   505  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   506  00C0                    CLK_CR0_ACOLUMN_3:    equ C0h    ; MASK: Specify clock for analog cloumn
   507  0030                    CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
   508  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   509  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   510                          
   511  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   512  0018                    CLK_CR1_ACLK1:        equ 18h    ; MASK: Digital PSoC block for analog source
   513  0003                    CLK_CR1_ACLK0:        equ 03h    ; MASK: Digital PSoC block for analog source
   514                          
   515  0003                    CLK_CR1_ACLK2:        equ 03h    ; Deprecated do not use
   516                          
   517  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   518  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   519                          
   520  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   521  000F                    AMD_CR0_AMOD0:        equ 0Fh    ; MASK: Modulation source for analog column 0
   522                          
   523  0064                    CMP_GO_EN:    equ 64h          ; Comparator Bus To Global Out Enable      (RW)
   524  0080                    CMP_GO_EN_GOO5:       equ 80h    ; MASK: Selected Col 1 signal to GOO5
   525  0040                    CMP_GO_EN_GOO1:       equ 40h    ; MASK: Selected Col 1 signal to GOO1
   526  0030                    CMP_GO_EN_SEL1:       equ 30h    ; MASK: Column 1 Signal Select
   527  0008                    CMP_GO_EN_GOO4:       equ 08h    ; MASK: Selected Col 0 signal to GOO4
   528  0004                    CMP_GO_EN_GOO0:       equ 04h    ; MASK: Selected Col 0 signal to GOO0
   529  0003                    CMP_GO_EN_SEL0:       equ 03h    ; MASK: Column 0 Signal Select
   530                          
   531  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   532  000F                    AMD_CR1_AMOD1:        equ 0Fh    ; MASK: Modulation ctrl for analog column 1
   533                          
   534  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   535  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   536  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   537                          
   538  006B                    CLK_CR3:      equ 6Bh          ; Analog Clock Source Control Register 3   (RW)
   539  0040                    CLK_CR3_SYS1:         equ 40h    ; MASK: Analog Clock 1 selection
   540  0030                    CLK_CR3_DIVCLK1:      equ 30h    ; MASK: Analog Clock 1 divider
   541  0004                    CLK_CR3_SYS0:         equ 04h    ; MASK: Analog Clock 0 selection
   542  0003                    CLK_CR3_DIVCLK0:      equ 03h    ; MASK: Analog Clock 0 divider
   543                          
   544                          ;------------------------------------------------
   545                          ;  Global Digital Interconnects
   546                          ;------------------------------------------------
   547                          
   548  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   549  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   550  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   551  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   552                          
   553  00A0                    GDI_O_IN_CR:  equ 0A0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   554  00A1                    GDI_E_IN_CR:  equ 0A1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   555  00A2                    GDI_O_OU_CR:  equ 0A2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   556  00A3                    GDI_E_OU_CR:  equ 0A3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   557                          
   558  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   559  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   560                          
   561                          ;------------------------------------------------
   562                          ;  Analog Mux Bus Port Enable Bits
   563                          ;------------------------------------------------
   564  00D8                    MUX_CR0:      equ 0D8h          ; Analog Mux Port 0 Bit Enables Register
   565  00D9                    MUX_CR1:      equ 0D9h          ; Analog Mux Port 1 Bit Enables Register
   566  00DA                    MUX_CR2:      equ 0DAh          ; Analog Mux Port 2 Bit Enables Register
   567  00DB                    MUX_CR3:      equ 0DBh          ; Analog Mux Port 3 Bit Enables Register
   568  00EC                    MUX_CR4:      equ 0ECh          ; Analog Mux Port 4 Bit Enables Register
   569                          
   570                          ;------------------------------------------------
   571                          ;  Clock and System Control Registers
   572                          ;------------------------------------------------
   573                          
   574  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   575  0080                    OSC_GO_EN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   576  0040                    OSC_GO_EN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   577  0020                    OSC_GO_EN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   578  0010                    OSC_GO_EN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   579  0008                    OSC_GO_EN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   580  0004                    OSC_GO_EN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   581  0002                    OSC_GO_EN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   582  0001                    OSC_GO_EN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   583                          
   584  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   585  0003                    OSC_CR4_VC3SEL:       equ 03h    ; MASK: System VC3 Clock source
   586                          
   587  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   588                          
   589  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   590  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   591  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   592  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   593  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   594  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   595  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   596  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   597  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   598  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   599  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   600  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   601  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   602  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   603  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   604  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   605  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   606  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   607                          
   608  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   609  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   610  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   611                          
   612  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   613  0080                    OSC_CR2_PLLGAIN:      equ 80h    ; MASK: High/Low gain
   614  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   615  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   616  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   617                          
   618  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   619  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   620  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   621  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   622  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   623  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   624  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   625  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   626                          
   627  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   628  0008                    VLT_CMP_NOWRITE:      equ 08h    ; MASK: Vcc below Flash Write level
   629  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   630  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   631  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   632                          
   633  00E5                    ADC0_TR:      equ 0E5h          ; ADC Column 0 Trim Register
   634  00E6                    ADC1_TR:      equ 0E6h          ; ADC Column 1 Trim Register
   635                          
   636  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   637  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   638  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   639  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   640                          
   641  00FA                    FLS_PR1:      equ 0FAh          ; Flash Program Register 1                 (RW)
   642  0003                    FLS_PR1_BANK:         equ 03h    ; MASK: Select Active Flash Bank
   643                          
   644  00FD                    DAC_CR0:       equ 0FDh          ; Analog Mux DAC Control Register 0
   645  00DC                    DAC_CR1:       equ 0DCh          ; Analog Mux DAC Control Register 1
   646  0008                    DAC_CR_IRANGE:        equ 08h    ; MASK: Sets the DAC Range low or high
   647  0006                    DAC_CR_OSCMODE:       equ 06h    ; MASK: Defines the reset mode for AMux
   648  0001                    DAC_CR_ENABLE:        equ 01h    ; MASK: Enable/Disable DAC function
   649                          
   650                          ;------------------------------------------------
   651                          ;  I2C Control Registers
   652                          ;------------------------------------------------
   653                          
   654  00AD                    I2C_ADDR:    equ 0ADh          ; I2C Address Register (RW)
   655                          
   656                          ;------------------------------------------------------
   657                          ;  Neon Analog Registers
   658                          ;------------------------------------------------------
   659  0053                    VDAC50CR0:		equ 53h			; V DAC5 control 0				(RW)
   660  0057                    VDAC51CR0:		equ 57h			; V DAC5 control 1				(RW)
   661  00A8                    ADC_CR0:		equ A8h			; ADC control 0					(RW)
   662  00A9                    ADC_CR1:		equ A9h			; ADC control 1					(RW)
   663  00AA                    ADC_CR2:		equ AAh			; ADC control 2					(RW)
   664  00AB                    ADC_CR3TRIM:	equ ABh			; ADC control 3					(RW)
   665  00AC                    ADC_CR4:		equ ACh			; ADC control 4					(RW)
   666  00E7                    VDAC_TRIM:		equ E7h			; V DAC trim					(RW)
   667                          
   668                          ;------------------------------------------------------
   669                          ;  Neon Current Sense CMP Registers
   670                          ;------------------------------------------------------
   671  0050                    CMP0CR1:		equ 50h			; CMP0 control 1				(RW)
   672  0051                    CMP0CR2:		equ 51h			; CMP0 control 2				(RW)
   673  0054                    CMP1CR1:		equ 54h			; CMP1 control 1				(RW)
   674  0055                    CMP1CR2:		equ 55h			; CMP1 control 2				(RW)
   675  0058                    CSCMPCR0:		equ 58h			; CSCMP control 0				(RW)
   676  0059                    CSCMPGOEN:		equ 59h			; CSCMO global out enable		(RW)
   677  005A                    CSLUTCR0:		equ 5Ah			; CSLUT control 0				(RW)
   678  005B                    CMPCOLMUX:		equ 5Bh			; CMP Column Mux				(RW)
   679  005C                    CMPPWMCR:		equ 5Ch			; CMP PWM control				(RW)
   680  005D                    CMPFLTCR:		equ 5Dh			; CMP filter control			(RW)
   681  005E                    CMPCLK1:		equ 5Eh			; CMP clock 1					(RW)
   682  005F                    CMPCLK0:		equ 5Fh			; CMP clock 0					(RW)
   683                          
   684                          ;------------------------------------------------------
   685                          ;  Neon Real Time Clock Registers
   686                          ;------------------------------------------------------
   687  00A4                    RTCH:			equ A4h			; Real time current hour		(RW)
   688  00A5                    RTCM:			equ A5h			; Real time current minute		(RW)
   689  00A6                    RTCS:			equ A6h			; Real time current second		(RW)
   690  00A7                    RTCCR:			equ A7h			; Real time clock control		(RW)
   691                          
   692                          ;------------------------------------------------------
   693                          ;  Analog MUX Config Registers
   694                          ;------------------------------------------------------
   695                          
   696  006A                    AMUX_CFG1:			equ 6Ah  ; Analog MUX Configuration 1
   697  0020                    AMUX_CFG1_GOINVR:	equ 20h  ;
   698  0010                    AMUX_CFG1_GOINVL:  	equ 10h	 ;
   699  000C                    AMUX_CFG1_AMUXMODR:	equ 0Ch	 ;
   700  0003                    AMUX_CFG1_AMUXMODL:	equ 03h	 ;
   701                          
   702                          ;;=============================================================================
   703                          ;;      M8C System Macros
   704                          ;;  These macros should be used when their functions are needed.
   705                          ;;=============================================================================
   706                          
   707                          ;----------------------------------------------------
   708                          ;  Swapping Register Banks
   709                          ;----------------------------------------------------
   710                              macro M8C_SetBank0
   711                              and   F, ~FLAG_XIO_MASK
   712  3D73                        endm
   713                          
   714                              macro M8C_SetBank1
   715                              or    F, FLAG_XIO_MASK
   716  3D73                        endm
   717                          
   718                          ;----------------------------------------------------
   719                          ;  Global Interrupt Enable/Disable
   720                          ;----------------------------------------------------
   721                              macro M8C_EnableGInt
   722                              or    F, FLAG_GLOBAL_IE
   723  3D73                        endm
   724                          
   725                              macro M8C_DisableGInt
   726                              and   F, ~FLAG_GLOBAL_IE
   727  3D73                        endm
   728                          
   729                          ;----------------------------------------------------
   730                          ;  Enable/Disable Interrupt Mask
   731                          ;
   732                          ;  Use the following macros to enable/disable
   733                          ;  bits in the Interrupt mask registers,
   734                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   735                          ;
   736                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   737                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   738                          ;
   739                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   740                          ;        and MASK is the bit set to enable or disable
   741                          ;----------------------------------------------------
   742                          ; Disable Interrupt Bit Mask(s)
   743                              macro M8C_DisableIntMask
   744                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   745  3D73                        endm
   746                          
   747                          ; Enable Interrupt Bit Mask(s)
   748                              macro M8C_EnableIntMask
   749                              or    reg[@0], @1               ; enable specified interrupt enable bit
   750  3D73                        endm
   751                          
   752                          ;----------------------------------------------------
   753                          ;  Clear Posted Interrupt Flag Mask
   754                          ;
   755                          ;  Use the following macros to clear the
   756                          ;  bits in the Interrupt Clear registers,
   757                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   758                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   759                          ;
   760                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   761                          ;        and MASK is the bit set to enable or disable
   762                          ;----------------------------------------------------
   763                              macro M8C_ClearIntFlag
   764                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   765  3D73                        endm
   766                          
   767                          ;----------------------------------------------------
   768                          ;  Power-On Reset & WatchDog Timer Functions
   769                          ;----------------------------------------------------
   770                              macro M8C_EnableWatchDog
   771                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   772  3D73                        endm
   773                          
   774                              macro M8C_ClearWDT
   775                              mov   reg[RES_WDT], 00h
   776  3D73                        endm
   777                          
   778                              macro M8C_ClearWDTAndSleep
   779                              mov   reg[RES_WDT], 38h
   780  3D73                        endm
   781                          
   782                          ;----------------------------------------------------
   783                          ;  Sleep, CPU Stop & Software Reset
   784                          ;----------------------------------------------------
   785                              macro M8C_Sleep
   786                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   787                              ; The next instruction to be executed depends on the state of the
   788                              ; various interrupt enable bits. If some interrupts are enabled
   789                              ; and the global interrupts are disabled, the next instruction will
   790                              ; be the one that follows the invocation of this macro. If global
   791                              ; interrupts are also enabled then the next instruction will be
   792                              ; from the interrupt vector table. If no interrupts are enabled
   793                              ; then the CPU sleeps forever.
   794  3D73                        endm
   795                          
   796                              macro M8C_Stop
   797                              ; In general, you probably don't want to do this, but here's how:
   798                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   799                              ; Next instruction to be executed is located in the interrupt
   800                              ; vector table entry for Power-On Reset.
   801  3D73                        endm
   802                          
   803                              macro M8C_Reset
   804                              ; Restore CPU to the power-on reset state.
   805                              mov A, 0
   806                              SSC
   807                              ; Next non-supervisor instruction will be at interrupt vector 0.
   808  3D73                        endm
   809                          
   810                          ;----------------------------------------------------
   811                          ; ImageCraft Code Compressor Actions
   812                          ;----------------------------------------------------
   813                              ; Suspend Code Compressor
   814                              ; Must not span a RET or RETI instruction
   815                              ; without resuming code compression
   816                              macro Suspend_CodeCompressor
   817                              or   F, 0
   818  3D73                        endm
   819                          
   820                              ; Resume Code Compression
   821                              macro Resume_CodeCompressor
   822                              add  SP, 0
   823  3D73                        endm
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  FILENAME:   UART_SensorINT.asm
     4                          ;;  Version: 5.3, Updated on 2013/5/19 at 10:44:49
     5                          ;;  Generated by PSoC Designer 5.4.2946
     6                          ;;
     7                          ;;  DESCRIPTION:  UART Interrupt Service Routine.
     8                          ;;-----------------------------------------------------------------------------
     9                          ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
    10                          ;;*****************************************************************************
    11                          ;;*****************************************************************************
    12                          
    13                          
    14                          include "UART_Sensor.inc"
    15                          include "memory.inc"
    16                          include "m8c.inc"
    17                          
    18                          ;-----------------------------------------------
    19                          ;  Global Symbols
    20                          ;-----------------------------------------------
    21                          export  _UART_Sensor_TX_ISR
    22                          export  _UART_Sensor_RX_ISR
    23                          
    24                          IF (UART_Sensor_RXBUF_ENABLE)
    25                          export  UART_Sensor_aRxBuffer
    26                          export _UART_Sensor_aRxBuffer
    27                          export  UART_Sensor_bRxCnt
    28                          export _UART_Sensor_bRxCnt
    29                          export  UART_Sensor_fStatus
    30                          export _UART_Sensor_fStatus
    31                          ENDIF
    32                          
    33                          
    34                          ;-----------------------------------------------
    35                          ; Variable Allocation
    36                          ;-----------------------------------------------
    37                          AREA InterruptRAM (RAM, REL, CON)
    38                          
    39                          IF (UART_Sensor_RXBUF_ENABLE)
    40                           UART_Sensor_fStatus:
    41                          _UART_Sensor_fStatus:      BLK  1
    42                           UART_Sensor_bRxCnt:
    43                          _UART_Sensor_bRxCnt:       BLK  1
    44                          AREA UART_Sensor_RAM (RAM, REL, CON)
    45                           UART_Sensor_aRxBuffer:
    46                          _UART_Sensor_aRxBuffer:    BLK UART_Sensor_RX_BUFFER_SIZE
    47                          ENDIF
    48                          
    49                          AREA InterruptRAM (RAM, REL, CON)
    50                          
    51                          ;@PSoC_UserCode_INIT@ (Do not change this line.)
    52                          ;---------------------------------------------------
    53                          ; Insert your custom declarations below this banner
    54                          ;---------------------------------------------------
    55                          
    56                          ;------------------------
    57                          ;  Includes
    58                          ;------------------------
    59                          
    60                          
    61                          ;------------------------
    62                          ;  Constant Definitions
    63                          ;------------------------
    64                          
    65                          
    66                          ;------------------------
    67                          ; Variable Allocation
    68                          ;------------------------
    69                          
    70                          
    71                          ;---------------------------------------------------
    72                          ; Insert your custom declarations above this banner
    73                          ;---------------------------------------------------
    74                          ;@PSoC_UserCode_END@ (Do not change this line.)
    75                          
    76                          
    77                          AREA UserModules (ROM, REL, CON)
    78                          
    79                          ;-----------------------------------------------------------------------------
    80                          ;  FUNCTION NAME: _UART_Sensor_TX_ISR
    81                          ;
    82                          ;  DESCRIPTION:
    83                          ;     UART TX interrupt handler for instance UART_Sensor.
    84                          ;
    85                          ;     This is a place holder function.  If the user requires use of an interrupt
    86                          ;     handler for this function, then place code where specified.
    87                          ;-----------------------------------------------------------------------------
    88                          
    89  3008                    _UART_Sensor_TX_ISR:
    90                             ;@PSoC_UserCode_BODY_1@ (Do not change this line.)
    91                             ;---------------------------------------------------
    92                             ; Insert your custom assembly code below this banner
    93                             ;---------------------------------------------------
    94                             ;   NOTE: interrupt service routines must preserve
    95                             ;   the values of the A and X CPU registers.
    96                             
    97                             ;---------------------------------------------------
    98                             ; Insert your custom assembly code above this banner
    99                             ;---------------------------------------------------
   100                             
   101                             ;---------------------------------------------------
   102                             ; Insert a lcall to a C function below this banner
   103                             ; and un-comment the lines between these banners
   104                             ;---------------------------------------------------
   105                             
   106                             ;PRESERVE_CPU_CONTEXT
   107                             ;lcall _My_C_Function
   108                             ;RESTORE_CPU_CONTEXT
   109                             
   110                             ;---------------------------------------------------
   111                             ; Insert a lcall to a C function above this banner
   112                             ; and un-comment the lines between these banners
   113                             ;---------------------------------------------------
   114                             ;@PSoC_UserCode_END@ (Do not change this line.)
   115  3008  7E                   reti
   116                          
   117                          
   118                          ;-----------------------------------------------------------------------------
   119                          ;  FUNCTION NAME: _UART_Sensor_RX_ISR
   120                          ;
   121                          ;  DESCRIPTION:
   122                          ;     UART RX interrupt handler for instance UART_Sensor.
   123                          ;     This ISR handles the background processing of received characters if
   124                          ;     the buffer is enabled.
   125                          ;
   126                          ;
   127                          ;  The following assumes that the RX buffer feature has been enabled.
   128                          ;
   129                          ;  SIDE EFFECTS:
   130                          ;     There are 3 posible errors that may occur with the serial port.
   131                          ;      1) Parity Error
   132                          ;      2) Framing Error
   133                          ;      3) OverRun Error
   134                          ;
   135                          ;  This user module check for parity and framing error.  If either of these
   136                          ;  two errors are detected, the data is read and ignored.  When an overRun
   137                          ;  error occurs, the last byte was lost, but the current byte is valid.  For
   138                          ;  this reason this error is ignored at this time.  Code could be added to
   139                          ;  this ISR to set a flag if an error condition occurs.
   140                          ;
   141                          ;  THEORY of OPERATION:
   142                          ;     When using the RX buffer feature, the ISR collects received characters
   143                          ;     in a buffer until the user defined command terminator is detected.  After
   144                          ;     the command terminator is detected, the command bit is set and all other
   145                          ;     characters will be ignored until the command bit is reset.  Up to
   146                          ;     buffer_size - 1 characters will be collected waiting for a command
   147                          ;     terminator.  After that, the characters will be discarded, although
   148                          ;     a command determinator will still cause the command bit to be set.
   149                          ;
   150                          ;-----------------------------------------------------------------------------
   151  3009                    _UART_Sensor_RX_ISR:
   152                          
   153                             ;@PSoC_UserCode_BODY_2@ (Do not change this line.)
   154                             ;---------------------------------------------------
   155                             ; Insert your custom assembly code below this banner
   156                             ;---------------------------------------------------
   157                             ;   NOTE: interrupt service routines must preserve
   158                             ;   the values of the A and X CPU registers.
   159                             
   160                             ;---------------------------------------------------
   161                             ; Insert your custom assembly code above this banner
   162                             ;---------------------------------------------------
   163                             
   164                             ;---------------------------------------------------
   165                             ; Insert a lcall to a C function below this banner
   166                             ; and un-comment the lines between these banners
   167                             ;---------------------------------------------------
   168                             
   169                             ;PRESERVE_CPU_CONTEXT
   170                             ;lcall _My_C_Function
   171                             ;RESTORE_CPU_CONTEXT
   172                             
   173                             ;---------------------------------------------------
   174                             ; Insert a lcall to a C function above this banner
   175                             ; and un-comment the lines between these banners
   176                             ;---------------------------------------------------
   177                             ;@PSoC_UserCode_END@ (Do not change this line.)
   178                          
   179                          IF (UART_Sensor_RXBUF_ENABLE)
   180                             push A
   181                             push X
   182                             
   183                             IF SYSTEM_LARGE_MEMORY_MODEL
   184                                REG_PRESERVE IDX_PP
   185                             ENDIF
   186                             
   187                             mov  X,[UART_Sensor_bRxCnt]                             ; Load X with byte counter
   188                             mov  A,REG[UART_Sensor_RX_CONTROL_REG]                  ; Read the control register
   189                             push A                                                  ; Store copy for later test
   190                                                                                     ; IF real RX interrupt
   191                             and  A,UART_Sensor_RX_REG_FULL                          ; Did really really get an IRQ
   192                             jnz  .UARTRX_ReadRx                                     ; Data ready, go get it
   193                             pop  A                                                  ; Restore stack
   194                             jmp  .RESTORE_IDX_PP
   195                          
   196                          .UARTRX_ReadRx:
   197                             pop  A                                                  ; Restore status flags
   198                                                                                     ; IF there is no error, get data
   199                                                                                     ; Check for parity or framing error
   200                             and  A,UART_Sensor_RX_ERROR
   201                             jz   .UARTRX_NO_ERROR                                   ; If there is not an Error go read data
   202                          
   203                             or   [UART_Sensor_fStatus],A                            ; Set error flags (parity,framing,overrun
                                ) bits
   204                             tst  REG[UART_Sensor_RX_BUFFER_REG], 0x00               ; Read the data buffer to clear it.
   205                             and  A,UART_Sensor_RX_FRAMING_ERROR                     ; Check for framing error special case
   206                             jz   .RESTORE_IDX_PP                                    ; Not framing error, all done
   207                          
   208                                                                                     ; Disable and re-enable RX to reset after
   209                                                                                     ; framing error.
   210                             and   REG[UART_Sensor_RX_CONTROL_REG], ~UART_Sensor_RX_ENABLE   ; Disable RX
   211                             or    REG[UART_Sensor_RX_CONTROL_REG],  UART_Sensor_RX_ENABLE   ; Enable RX
   212                             jmp  .RESTORE_IDX_PP                                    ; Done with framing error, leave.
   213                          
   214                          
   215                          .UARTRX_NO_ERROR:
   216                             mov  A,REG[UART_Sensor_RX_BUFFER_REG ]                  ; Read the data buffer
   217                          
   218                                                                                     ; IF buffer not full
   219                             tst  [UART_Sensor_fStatus],UART_Sensor_RX_BUF_CMDTERM     ; Check for buffer full
   220                             jnz  .RESTORE_IDX_PP                                    ; All done
   221                          
   222                             cmp  A,UART_Sensor_CMD_TERM                             ; Check for End of command
   223                             jnz  .UARTRX_CHK_BACKSPACE
   224                             or   [UART_Sensor_fStatus],UART_Sensor_RX_BUF_CMDTERM   ; Set command ready bit
   225                          
   226                          
   227                          
   228                             RAM_SETPAGE_IDX >UART_Sensor_aRxBuffer
   229                             RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
   230                             mov  [X + UART_Sensor_aRxBuffer],00h                    ; Zero out last data
   231                             RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
   232                             jmp  .RESTORE_IDX_PP
   233                          
   234                          .UARTRX_CHK_BACKSPACE:                                     ; 
   235                          IF(UART_Sensor_BACKSPACE_ENABLE)                           ; Enable if backspace/delete mode
   236                             cmp  A,UART_Sensor_BACKSPACE_ENABLE                     ; Check for backspace character
   237                             jnz  .UARTRX_IGNORE                                     ; If not, skip the backspace stuff
   238                             cmp  [UART_Sensor_bRxCnt],00h                           ; Check if buffer empty
   239                             jz   .RESTORE_IDX_PP                                    ; 
   240                             dec  [UART_Sensor_bRxCnt]                               ; Decrement buffer count by one.
   241                             jmp  .RESTORE_IDX_PP
   242                          ENDIF                                                      ; 
   243                          
   244                          .UARTRX_IGNORE:
   245                          IF(UART_Sensor_RX_IGNORE_BELOW)                            ; Ignore charaters below this value
   246                             cmp  A,UART_Sensor_RX_IGNORE_BELOW                      ; If ignore char is set to 0x00, do not
   247                             jc   .RESTORE_IDX_PP                                    ; ignore any characters.
   248                          ENDIF
   249                          
   250                          .UARTRX_CHK_OVFL:                                          ; Check for MAX String here
   251                          	
   252                             RAM_SETPAGE_IDX >UART_Sensor_aRxBuffer                  ;   using idexed address mode
   253                             cmp  [UART_Sensor_bRxCnt],(UART_Sensor_RX_BUFFER_SIZE - 1)
   254                             jc   .UARTRX_ISR_GETDATA
   255                             RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
   256                             mov  [X + UART_Sensor_aRxBuffer],00h                    ; Zero out last data in the buffer
   257                             RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
   258                             or   [UART_Sensor_fStatus],UART_Sensor_RX_BUF_OVERRUN   ; Set error flags (parity,framing,overrun
                                ) bits
   259                             jmp  .RESTORE_IDX_PP
   260                          
   261                          .UARTRX_ISR_GETDATA:                                       ; IF input data == "CR", then end of comm
                                and
   262                                                                                     ; X is already loaded with pointer
   263                             RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
   264                             mov  [X+UART_Sensor_aRxBuffer],A                        ; store data in array
   265                             RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
   266                             inc  X                                                  ; Inc the pointer
   267                             mov  [UART_Sensor_bRxCnt],X                             ; Restore the pointer
   268                                                                                     ; ENDIF max string size
   269                          .RESTORE_IDX_PP:
   270                             IF SYSTEM_LARGE_MEMORY_MODEL
   271                                REG_RESTORE IDX_PP
   272                             ENDIF
   273                          
   274                          .END_UARTRX_ISR:
   275                             pop  X
   276                             pop  A
   277                          
   278                          ENDIF
   279                          
   280  3009                    UART_Sensor_RX_ISR_END:
   281  3009  7E                   reti
HI-TECH Software Macro Assembler (PSoC MCU) V9.61
Symbol Table                                                                                               Thu Jul 09 11:34:32 2015
                           HITECH 0002                          TOOLCHAIN 0002                _UART_Sensor_RX_ISR 3009  
              _UART_Sensor_TX_ISR 3008             UART_Sensor_RX_ISR_END 3009           UART_Sensor_RXBUF_ENABLE 0000  
HI-TECH Software Macro Assembler (PSoC MCU) V9.61
                                                                                                           Thu Jul 09 11:34:34 2015
     1                          ;  Generated by PSoC Designer 5.4.2946
     2                          ;
     3                          ;=============================================================================
     4                          ;  FILENAME:   GlobalParams.inc
     5                          ;  DATE:       27 September 2004
     6                          ;
     7                          ;  DESCRIPTION:
     8                          ;  Constants describing many of the global parameter settings.
     9                          ;  This file contains equates to support oscillator register initialization
    10                          ;  for the CY8C22345
    11                          ;
    12                          ;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
    13                          ;
    14                          ; NOTES:
    15                          ; Do not modify this file. It is generated by PSoC Designer each time the
    16                          ; generate application function is run. The values of the parameters in this
    17                          ; file can be modified by changing the values of the global parameters in the
    18                          ; device editor.
    19                          ;=============================================================================
    20                          ;
    21                          
    22  0003                    CPU_CLOCK:				equ	3h	;CPU clock value
    23  0007                    CPU_CLOCK_MASK:			equ	7h	;CPU clock mask
    24  0003                    CPU_CLOCK_JUST:			equ	3h	;CPU clock value justified
    25  0000                    SELECT_32K:				equ	0h		;32K select value
    26  0080                    SELECT_32K_MASK:		equ	80h		;32K select mask
    27  0000                    SELECT_32K_JUST:		equ	0h		;32K select value justified
    28  0000                    PLL_MODE:				equ	0h		;PLL mode value
    29  0040                    PLL_MODE_MASK:			equ	40h		;PLL mode mask
    30  0000                    PLL_MODE_JUST:			equ	0h		;PLL mode value justified
    31                          
    32  0002                    SLEEP_TIMER:			equ	2h		;Sleep Timer value
    33  0018                    SLEEP_TIMER_MASK:		equ	18h		;Sleep Timer mask
    34  0010                    SLEEP_TIMER_JUST:		equ	10h		;Sleep Timer value justified
    35                          
    36  0000                    SLEEP_TIMER2:			equ	0h		;Sleep Extend value
    37  0010                    SLEEP_TIMER_MASK2:		equ	10h		;Sleep Extend mask
    38  0000                    SLEEP_TIMER_JUST2:		equ	0h		;Sleep Extend value justified
    39                          
    40  0001                    SWITCH_MODE_PUMP:		equ	1h	;Switch Mode Pump setting
    41  0080                    SWITCH_MODE_PUMP_MASK:	equ	80h	;Switch Mode Pump mask
    42  0080                    SWITCH_MODE_PUMP_JUST:	equ	80h	;Switch Mode Pump justified
    43  0000                    LVD_TBEN:               equ 0   ; Low Voltage Throttle-back enable value
    44  0008                    LVD_TBEN_MASK:          equ 8  ; Low Voltage Throttle-back enable mask
    45  0000                    LVD_TBEN_JUST:          equ 0  ; Low Voltage Throttle-back enable justified
    46  0007                    TRIP_VOLTAGE:			equ	7h   ;Trip Voltage value
    47  0007                    TRIP_VOLTAGE_MASK:      equ 7h  ;Trip Voltage mask
    48  0007                    TRIP_VOLTAGE_JUST:      equ 7h  ;Trip Voltage justified
    49                                                        
    50  0010                    POWER_SETTING:			equ	10h
    51  0010                    POWER_SET_5V0:          equ 10h  ; MASK for 5.0V operation, fast and slow 
    52  0010                    POWER_SET_5V0_24MHZ:    equ 10h  ; Power Setting value for 5.0V fast      
    53  0011                    POWER_SET_5V0_6MHZ:     equ 11h  ; Power Setting value for 5.0V slow      
    54  0008                    POWER_SET_3V3:          equ 08h  ; MASK for 3.3V operation, fast and slow 
    55  0008                    POWER_SET_3V3_24MHZ:    equ 08h	 ; Power Setting value for 3.3V fast      
    56  0009                    POWER_SET_3V3_6MHZ:     equ 09h	 ; Power Setting value for 3.3V slow      
    57  0006                    POWER_SET_2V7:          equ 06h  ; MASK for 2.7V operation, fast and slow
    58  0004                    POWER_SET_2V7_12MHZ:    equ 04h	 ; MASK for 2.7V, 12MHZ operation
    59  0002                    POWER_SET_2V7_6MHZ:     equ 02h	 ; MASK for 2.7V,  6MHZ operation
    60  0001                    POWER_SET_SLOW_IMO:     equ 01h  ; MASK for slow Internal Main Oscillator (IMO) 
    61                          
    62  0001                    COMM_RX_PRESENT:		equ	1	;1 = TRUE
    63  0001                    WATCHDOG_ENABLE:		equ 1	;Watchdog Enable 1 = Enable
    64                          
    65  0007                    CLOCK_DIV_VC1:			equ	7h	;VC1 clock divider
    66  00F0                    CLOCK_DIV_VC1_MASK:		equ	f0h	;VC1 clock divider mask
    67  0070                    CLOCK_DIV_VC1_JUST:		equ	70h	;VC1 clock divider justified
    68  000F                    CLOCK_DIV_VC2:			equ	fh	;VC2 clock divider
    69  000F                    CLOCK_DIV_VC2_MASK:		equ	fh	;VC2 clock divider mask
    70  000F                    CLOCK_DIV_VC2_JUST:		equ	fh	;VC2 clock divider justified
    71  0001                    CLOCK_INPUT_VC3:		equ	1h	;VC3 clock source
    72  0003                    CLOCK_INPUT_VC3_MASK:	equ	3h	;VC3 clock source mask
    73  0001                    CLOCK_INPUT_VC3_JUST:	equ	1h	;VC3 clock source justified
    74  0026                    CLOCK_DIV_VC3:			equ	26h	;VC3 clock divider
    75  00FF                    CLOCK_DIV_VC3_MASK:		equ	ffh	;VC3 clock divider mask
    76  0026                    CLOCK_DIV_VC3_JUST:		equ	26h	;VC3 clock divider justified
    77  0000                    SYSCLK_SOURCE:				equ	(0h | 0h)	;SysClk Source setting
    78  0006                    SYSCLK_SOURCE_MASK:			equ	(4h | 2h)	;SysClk Source setting mask
    79  0000                    SYSCLK_SOURCE_JUST:			equ	(0h | 0h)	;SysClk Source setting justified
    80  0000                    SYSCLK_2_DISABLE:				equ	0h	;SysClk*2 Disable setting
    81  0001                    SYSCLK_2_DISABLE_MASK:			equ	1h	;SysClk*2 Disable setting mask
    82  0000                    SYSCLK_2_DISABLE_JUST:			equ	0h	;SysClk*2 Disable setting justified
    83                          ;
    84                          ; register initial values
    85                          ;
    86  0000                    ANALOG_IO_CONTROL:		equ 0h	;Analog IO Control register (ABF_CR)
    87  0011                    PORT_0_GLOBAL_SELECT:	equ 11h	;Port 0 global select register (PRT0GS)
    88  00FE                    PORT_0_DRIVE_0:			equ feh	;Port 0 drive mode 0 register (PRT0DM0)
    89  0001                    PORT_0_DRIVE_1:			equ 1h	;Port 0 drive mode 1 register (PRT0DM1)
    90  0000                    PORT_0_DRIVE_2:			equ 0h	;Port 0 drive mode 2 register (PRT0DM2)
    91  0000                    PORT_0_INTENABLE:		equ 0h	;Port 0 interrupt enable register (PRT0IE)
    92  0000                    PORT_0_INTCTRL_0:		equ 0h	;Port 0 interrupt control 0 register (PRT0IC0)
    93  0000                    PORT_0_INTCTRL_1:		equ 0h	;Port 0 interrupt control 1 register (PRT0IC1)
    94  0000                    PORT_1_GLOBAL_SELECT:	equ 0h	;Port 1 global select register (PRT1GS)
    95  00A0                    PORT_1_DRIVE_0:			equ a0h	;Port 1 drive mode 0 register (PRT1DM0)
    96  00FF                    PORT_1_DRIVE_1:			equ ffh	;Port 1 drive mode 1 register (PRT1DM1)
    97  00EF                    PORT_1_DRIVE_2:			equ efh	;Port 1 drive mode 2 register (PRT1DM2)
    98  0000                    PORT_1_INTENABLE:		equ 0h	;Port 1 interrupt enable register (PRT1IE)
    99  0000                    PORT_1_INTCTRL_0:		equ 0h	;Port 1 interrupt control 0 register (PRT1IC0)
   100  0000                    PORT_1_INTCTRL_1:		equ 0h	;Port 1 interrupt control 1 register (PRT1IC1)
   101  0019                    PORT_2_GLOBAL_SELECT:	equ 19h	;Port 2 global select register (PRT2GS)
   102  0029                    PORT_2_DRIVE_0:			equ 29h	;Port 2 drive mode 0 register (PRT2DM0)
   103  00D6                    PORT_2_DRIVE_1:			equ d6h	;Port 2 drive mode 1 register (PRT2DM1)
   104  00C6                    PORT_2_DRIVE_2:			equ c6h	;Port 2 drive mode 2 register (PRT2DM2)
   105  0000                    PORT_2_INTENABLE:		equ 0h	;Port 2 interrupt enable register (PRT2IE)
   106  0000                    PORT_2_INTCTRL_0:		equ 0h	;Port 2 interrupt control 0 register (PRT2IC0)
   107  0000                    PORT_2_INTCTRL_1:		equ 0h	;Port 2 interrupt control 1 register (PRT2IC1)
   108  0000                    PORT_3_GLOBAL_SELECT:	equ 0h	;Port 3 global select register (PRT3GS)
   109  0000                    PORT_3_DRIVE_0:			equ 0h	;Port 3 drive mode 0 register (PRT3DM0)
   110  0000                    PORT_3_DRIVE_1:			equ 0h	;Port 3 drive mode 1 register (PRT3DM1)
   111  0000                    PORT_3_DRIVE_2:			equ 0h	;Port 3 drive mode 2 register (PRT3DM2)
   112  0000                    PORT_3_INTENABLE:		equ 0h	;Port 3 interrupt enable register (PRT3IE)
   113  0000                    PORT_3_INTCTRL_0:		equ 0h	;Port 3 interrupt control 0 register (PRT3IC0)
   114                          PORT_3_INTCTRL_1:		equ 0h	;Port 3 interrupt control 1 register (PRT3IC1)
      + 0000                    PORT_3_INTCTRL_1	equ	0
      + 3D73                    ; end of file GlobalParams.inc
     1                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     2                          ;;;
     3                          ;;;  M8C.INC -- Microcontroller Device System Declarations
     4                          ;;;
     5                          ;;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
     6                          ;;;
     7                          ;;;  This file provides address constants, bit field masks and a set of macro
     8                          ;;;  facilities for the Cypress Semiconductor CY8C22045 Microcontroller devices.
     9                          ;;;
    10                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    11                          
    12                          ;;=============================================================================
    13                          ;; Definition of abbreviations used in the descriptions below
    14                          ;;  (RW)   The register or bit supports reads and writes
    15                          ;;  (W)    The register or bit is write-only
    16                          ;;  (R)    The register or bit is read-only
    17                          ;;  (#)    Access to the register is bit specific (see the family datasheet)
    18                          ;;  (RC)   The register or bit can be read, but writing a 0 will clear it,
    19                          ;;         writing a 1 will have no effect.
    20                          ;;=============================================================================
    21                          
    22                          ;;=============================================================================
    23                          ;;      System Registers
    24                          ;;=============================================================================
    25                          
    26                          ;----------------------------
    27                          ;  Flag Register Bit Fields
    28                          ;----------------------------
    29  00C0                    FLAG_PGMODE_MASK:  equ 0C0h     ; Paging control for > 256 bytes of RAM
    30  0000                    FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
    31  0040                    FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
    32  0080                    FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
    33  00C0                    FLAG_PGMODE_3:     equ 0C0h       ; Direct to CUR_PP page, indexed to STK_PP page
    34  0000                    FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
    35  0040                    FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
    36  0080                    FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
    37  00C0                    FLAG_PGMODE_11b:   equ 0C0h       ; Same as PGMODE_3
    38  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    39  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    40  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    41  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    42  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    43                          
    44                          
    45                          ;;=============================================================================
    46                          ;;      Register Space, Bank 0
    47                          ;;=============================================================================
    48                          
    49                          ;------------------------------------------------
    50                          ;  Port Registers
    51                          ;  Note: Also see this address range in Bank 1.
    52                          ;------------------------------------------------
    53                          ; Port 0
    54  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    55  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    56  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    57  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    58                          ; Port 1
    59  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    60  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    61  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    62  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    63                          ; Port 2
    64  0008                    PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
    65  0009                    PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
    66  000A                    PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
    67  000B                    PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
    68                          ; Port 3
    69  000C                    PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
    70  000D                    PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
    71  000E                    PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
    72  000F                    PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
    73                          ; Port 4
    74  0010                    PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
    75  0011                    PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
    76  0012                    PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
    77  0013                    PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
    78                          
    79                          ;------------------------------------------------
    80                          ;  Digital PSoC(tm) block Registers
    81                          ;  Note: Also see this address range in Bank 1.
    82                          ;------------------------------------------------
    83                          ; Digital PSoC block 00, Basic Type C
    84  0020                    DBC00DR0:     equ 20h          ; data register 0                          (#)
    85  0021                    DBC00DR1:     equ 21h          ; data register 1                          (W)
    86  0022                    DBC00DR2:     equ 22h          ; data register 2                          (RW)
    87  0023                    DBC00CR0:     equ 23h          ; control & status register 0              (#)
    88                          
    89                          ; Digital PSoC block 01, Basic Type C
    90  0024                    DBC01DR0:     equ 24h          ; data register 0                          (#)
    91  0025                    DBC01DR1:     equ 25h          ; data register 1                          (W)
    92  0026                    DBC01DR2:     equ 26h          ; data register 2                          (RW)
    93  0027                    DBC01CR0:     equ 27h          ; control & status register 0              (#)
    94                          
    95                          ; Digital PSoC block 02, Communications Type C
    96  0028                    DCC02DR0:     equ 28h          ; data register 0                          (#)
    97  0029                    DCC02DR1:     equ 29h          ; data register 1                          (W)
    98  002A                    DCC02DR2:     equ 2Ah          ; data register 2                          (RW)
    99  002B                    DCC02CR0:     equ 2Bh          ; control & status register 0              (#)
   100                          
   101                          ; Digital PSoC block 03, Communications Type C
   102  002C                    DCC03DR0:     equ 2Ch          ; data register 0                          (#)
   103  002D                    DCC03DR1:     equ 2Dh          ; data register 1                          (W)
   104  002E                    DCC03DR2:     equ 2Eh          ; data register 2                          (RW)
   105  002F                    DCC03CR0:     equ 2Fh          ; control & status register 0              (#)
   106                          
   107                          ; Digital PSoC block 10, Basic Type C
   108  0030                    DBC10DR0:     equ 30h          ; data register 0                          (#)
   109  0031                    DBC10DR1:     equ 31h          ; data register 1                          (W)
   110  0032                    DBC10DR2:     equ 32h          ; data register 2                          (RW)
   111  0033                    DBC10CR0:     equ 33h          ; control & status register 0              (#)
   112                          
   113                          ; Digital PSoC block 11, Basic Type C
   114  0034                    DBC11DR0:     equ 34h          ; data register 0                          (#)
   115  0035                    DBC11DR1:     equ 35h          ; data register 1                          (W)
   116  0036                    DBC11DR2:     equ 36h          ; data register 2                          (RW)
   117  0037                    DBC11CR0:     equ 37h          ; control & status register 0              (#)
   118                          
   119                          ; Digital PSoC block 12, Communications Type C
   120  0038                    DCC12DR0:     equ 38h          ; data register 0                          (#)
   121  0039                    DCC12DR1:     equ 39h          ; data register 1                          (W)
   122  003A                    DCC12DR2:     equ 3Ah          ; data register 2                          (RW)
   123  003B                    DCC12CR0:     equ 3Bh          ; control & status register 0              (#)
   124                          
   125                          ; Digital PSoC block 13, Communications Type C
   126  003C                    DCC13DR0:     equ 3Ch          ; data register 0                          (#)
   127  003D                    DCC13DR1:     equ 3Dh          ; data register 1                          (W)
   128  003E                    DCC13DR2:     equ 3Eh          ; data register 2                          (RW)
   129  003F                    DCC13CR0:     equ 3Fh          ; control & status register 0              (#)
   130                          
   131                          ;-------------------------------------
   132                          ;  Analog Control Registers
   133                          ;-------------------------------------
   134  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
   135  00C0                    AMX_IN_ACI3:          equ C0h    ; MASK: column 3 input mux
   136  0030                    AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
   137  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
   138  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
   139                          
   140  0061                    AMUX_CFG:      equ 61h          ; Analog MUX Configuration
   141  0030                    AMUX_CFG_INTCAP:       equ 30h    ;
   142  000E                    AMUX_CFG_MUXCLK:  	  equ 0Eh	 ;
   143  0001                    AMUX_CFG_EN:		  	  equ 01h	 ;
   144                          
   145                          ; old declarations DO NOT USE
   146  0061                    AMUXCFG:      equ 61h          ; Analog MUX Configuration
   147  0030                    AMUXCFG_INTCAP:       equ 30h    ;
   148  000E                    AMUXCFG_MUXCLK:  	  equ 0Eh	 ;
   149  0001                    AMUXCFG_EN:		  	  equ 01h	 ;
   150                          
   151  0062                    PWM_CR:       equ 62h          ; Pulse-Width Modulator Control
   152  0038                    PWM_CR_HIGH:          equ 38h    ; MASK: PWM high time
   153  0006                    PWM_CR_LOW:           equ 06h	 ; MASK: PWM low time
   154  0001                    PWM_CR_EN:            equ 01h	 ; MASK: Enable/Disable PWM function
   155                          
   156  0063                    ARF_CR:       equ 63h          ; Analog Reference Control
   157                          
   158  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus Register           (#)
   159  0080                    CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
   160  0040                    CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
   161  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
   162  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
   163  0008                    CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
   164  0004                    CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
   165  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
   166  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   167                          
   168  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   169  0020                    CMP_CR1_CLDIS1:       equ 20h    ; MASK: Column 1 comparator output latch
   170  0010                    CMP_CR1_CLDIS0:	      equ 10h    ; MASK: Column 0 comparator output latch
   171                          
   172  0068                    ADC0_CR:      equ 68h          ; Analog Column 0 Configuration
   173  0080                    ADC0_CR_CMPST:        equ 80h    ;
   174  0040                    ADC0_CR_LOREN:        equ 40h    ;
   175  0020                    ADC0_CR_SHEN:         equ 20h    ;
   176  0008                    ADC0_CR_CBSRC:        equ 08h    ;
   177  0004                    ADC0_CR_ADCM:         equ 04h    ;
   178  0001                    ADC0_CR_EN:	          equ 01h    ;
   179                          
   180  0069                    ADC1_CR:      equ 69h          ; Analog Column 1 Configuration
   181  0080                    ADC1_CR_CMPST:        equ 80h    ;
   182  0040                    ADC1_CR_LOREN:        equ 40h    ;
   183  0020                    ADC1_CR_SHEN:         equ 20h    ;
   184  0008                    ADC1_CR_CBSRC:        equ 08h    ;
   185  0004                    ADC1_CR_ADCM:         equ 04h    ;
   186  0001                    ADC1_CR_EN:	          equ 01h    ;
   187                          
   188                          ; Continuous Time PSoC block Type E Row 0 Col 0
   189  0072                    ACE00CR1:     equ 72h          ; Control register 1                       (RW)
   190  0073                    ACE00CR2:     equ 73h          ; Control register 2                       (RW)
   191                          
   192                          ; Continuous Time PSoC block Type E Row 0 Col 1
   193  0076                    ACE01CR1:     equ 76h          ; Control register 1                       (RW)
   194  0077                    ACE01CR2:     equ 77h          ; Control register 2                       (RW)
   195                          
   196                          ; Switched Cap PSoC blockType E Row 1 Col 0
   197  0080                    ASE10CR0:     equ 80h          ; Control register 0                       (RW)
   198                          
   199                          ; Switched Cap PSoC blockType E Row 1 Col 1
   200  0084                    ASE11CR0:     equ 84h          ; Control register 0                       (RW)
   201                          
   202                          ;-----------------------------------------------
   203                          ;  Global General Purpose Data Registers
   204                          ;-----------------------------------------------
   205  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   206  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   207  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   208  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   209                          
   210                          ;------------------------------------------------
   211                          ;  Row Digital Interconnects
   212                          ;
   213                          ;  Note: the following registers are mapped into
   214                          ;  both register bank 0 AND register bank 1.
   215                          ;------------------------------------------------
   216                          
   217  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   218  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   219  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   220  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   221  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   222  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   223  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   224                          
   225  00B8                    RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
   226  00B9                    RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
   227  00BA                    RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
   228  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   229  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   230  00BD                    RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
   231  00BE                    RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
   232                          
   233                          ;-----------------------------------------------
   234                          ;  Ram Page Pointers
   235                          ;-----------------------------------------------
   236  00D0                    CUR_PP:      equ 0D0h           ; Current   Page Pointer
   237  00D1                    STK_PP:      equ 0D1h           ; Stack     Page Pointer
   238  00D3                    IDX_PP:      equ 0D3h           ; Index     Page Pointer
   239  00D4                    MVR_PP:      equ 0D4h           ; MVI Read  Page Pointer
   240  00D5                    MVW_PP:      equ 0D5h           ; MVI Write Page Pointer
   241                          
   242                          ;------------------------------------------------
   243                          ;  I2C Configuration Registers
   244                          ;------------------------------------------------
   245  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   246  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   247  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   248  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   249  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   250  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   251  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   252  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   253  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   254  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   255                          
   256  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   257  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   258  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   259  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   260  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   261  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   262  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   263  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   264  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   265                          
   266  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   267                          
   268  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   269  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   270  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   271  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   272  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   273                          
   274                          ;------------------------------------------------
   275                          ;  System and Global Resource Registers
   276                          ;------------------------------------------------
   277  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   278                                                         ; Use INT_MSK0 bit field masks
   279  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   280                                                         ; Use INT_MSK1 bit field masks
   281  00DC                    INT_CLR2:     equ 0DCh          ; Interrupt Clear Register 2               (RW)
   282                                                         ; Use INT_MSK2 bit field masks
   283  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   284                                                         ; Use INT_MSK3 bit field masks
   285                          
   286  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   287  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   288  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   289                          
   290  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   291  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   292  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   293  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   294  0010                    INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
   295  0008                    INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
   296  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   297  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   298  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   299                          
   300  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   301  0080                    INT_MSK1_DCC13:            equ 80h ; MASK: enable/disable DCC13 block interrupt
   302  0040                    INT_MSK1_DCC12:            equ 40h ; MASK: enable/disable DCC12 block interrupt
   303  0020                    INT_MSK1_DBC11:            equ 20h ; MASK: enable/disable DBC11 block interrupt
   304  0010                    INT_MSK1_DBC10:            equ 10h ; MASK: enable/disable DBC10 block interrupt
   305  0008                    INT_MSK1_DCC03:            equ 08h ; MASK: enable/disable DCC03 block interrupt
   306  0004                    INT_MSK1_DCC02:            equ 04h ; MASK: enable/disable DCC02 block interrupt
   307  0002                    INT_MSK1_DBC01:            equ 02h ; MASK: enable/disable DBC01 block interrupt
   308  0001                    INT_MSK1_DBC00:            equ 01h ; MASK: enable/disable DBC00 block interrupt
   309                          
   310  00DF                    INT_MSK2:     equ DFh			; Custom block Mask Register			   (RW)
   311  0010                    INT_MSK2_SARADC:           equ 10h ; MASK: enable/disable SARADC block interrupt
   312  0020                    INT_MSK2_CSD0:             equ 20h ; MASK: enable/disable CSD0 block interrupt
   313  0040                    INT_MSK2_CSD1:             equ 40h ; MASK: enable/disable CSD1 block interrupt
   314  0080                    INT_MSK2_RTC:              equ 80h ; MASK: enable/disable RTC block interrupt
   315                          
   316  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   317  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   318                          
   319                          ;------------------------------------------------------
   320                          ;  MAC Registers
   321                          ;------------------------------------------------------
   322                          
   323  00E8                    MUL0_X:       equ 0E8h          ; Multiply Input X Register                (W)
   324  00E9                    MUL0_Y:       equ 0E9h          ; Multiply Input Y Register                (W)
   325  00EA                    MUL0_DH:      equ 0EAh          ; Multiply Result High Byte Register       (R)
   326  00EB                    MUL0_DL:      equ 0EBh          ; Multiply Result Low Byte Register        (R)
   327                          
   328  00EC                    ACC0_DR1:     equ 0ECh          ; Accumulator Data Register 1              (RW)
   329  00ED                    ACC0_DR0:     equ 0EDh          ; Accumulator Data Register 0              (RW)
   330  00EE                    ACC0_DR3:     equ 0EEh          ; Accumulator Data Register 3              (RW)
   331  00EF                    ACC0_DR2:     equ 0EFh          ; Accumulator Data Register 2              (RW)
   332                          
   333                          ; DECIMATOR Control Registers
   334  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   335  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   336                          
   337                          ;------------------------------------------------------
   338                          ;  System Status and Control Registers
   339                          ;
   340                          ;  Note: The following registers are mapped into both
   341                          ;        register bank 0 AND register bank 1.
   342                          ;------------------------------------------------------
   343  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   344                                                             ; Use FLAG_ masks defined at top of file
   345                          
   346  00FD                    DAC_D:        equ 0FDh		   ; DAC Data Register                        (RW)
   347                          
   348  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   349  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: flag, Internal Reset Status bit
   350  0010                    CPU_SCR1_SLIMO:         equ 10h	   ; MASK: Slow IMO (internal main osc) enable
   351  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   352  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   353  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   354                          
   355  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   356  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   357  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   358  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   359  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   360  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   361                          
   362                          ;------------------------------------------------------
   363                          ;  Neon Capsense Digital Control Registers
   364                          ;------------------------------------------------------
   365  0050                    CSD0_DR0_L:				equ 50h		; Capsense 0 data low 0				(RW)
   366  0054                    CSD0_DR0_H:				equ 54h		; Capsense 0 data high 0			(RW)
   367  0058                    CSD1_DR0_L:				equ 58h		; Capsense 1 data low 0				(RW)
   368  005C                    CSD1_DR0_H:				equ 5Ch		; Capsense 1 data high 0			(RW)
   369  0051                    CSD0_DR1_L:				equ 51h		; Capsense 0 data low 1				(RW)
   370  0055                    CSD0_DR1_H:				equ 55h		; Capsense 0 data high 1			(RW)
   371  0059                    CSD1_DR1_L:				equ 59h		; Capsense 1 data low 1				(RW)
   372  005D                    CSD1_DR1_H:				equ 5Dh		; Capsense 1 data high 1			(RW)
   373  0052                    CSD0_CNT_L:				equ 52h		; Capsense 0 counter low			(RW)
   374  0056                    CSD0_CNT_H:				equ 56h		; Capsense 0 counter high			(RW)
   375  005A                    CSD1_CNT_L:				equ 5Ah		; Capsense 1 counter low			(RW)
   376  005E                    CSD1_CNT_H:				equ	5Eh		; Capsense 1 counter high			(RW)
   377  0053                    CSD0_CR0:				equ 53h		; Capsense 0 control 0				(RW)
   378  005B                    CSD1_CR0:				equ 5Bh		; Capsense 1 control 0				(RW)
   379  0057                    CSD0_CR1:				equ 57h		; Capsense 0 control 1				(RW)
   380  005F                    CSD1_CR1:				equ 5Fh		; Capsense 1 control 1				(RW)
   381                          
   382                          ;------------------------------------------------------
   383                          ;  Neon Analog Registers
   384                          ;------------------------------------------------------
   385  0065                    ASY_CR:					equ 65h		; Analog Synchronization Control	(RW)
   386  006A                    ADC_DH:					equ 6Ah		; ADC data high						(RW)
   387  006B                    ADC_DL:					equ 6Bh		; ADC data low						(RW)
   388  00C8                    PWMVREF0:				equ C8h		; PWM Voltage Reference 0			(RW)
   389  00C9                    PWMVREF1:				equ C9h		; PWM Voltage Reference 1			(RW)
   390  00CB                    PWMSRC:					equ CBh		; PWM Source						(RW)
   391  00CA                    IDACMODE:				equ CAh		; IDAC Mode							(RW)
   392  00FC                    IDACR_D:				equ FCh		; Analog Mux DAC data 0				(RW)
   393  00FD                    IDACL_D:				equ FDh		; Analog Mux DAC data 1				(RW)
   394                          
   395                          ;------------------------------------------------------
   396                          ;  Neon Digital Registers
   397                          ;------------------------------------------------------
   398  00B7                    RDI0DSM:				equ B7h		; Row Digital Interconnect input select 0	(RW)
   399  00BF                    RDI1DSM:				equ BFh		; Row Digital Interconnect input select 1	(RW)
   400                          
   401                          ;------------------------------------------------------
   402                          ;  Neon Test Registers
   403                          ;------------------------------------------------------
   404  00CC                    TSCR0:					equ CCh		; Tsource 0							(RW)
   405  00CD                    TSCMPH:					equ CDh		; TSCMP high						(RW)
   406  00CE                    TSCMPL:					equ CEh		; TSCMP low							(RW)
   407  00CF                    TSCR1:					equ CFh		; Tsource 1							(RW)
   408                          
   409                          ;;=============================================================================
   410                          ;;      Register Space, Bank 1
   411                          ;;=============================================================================
   412                          
   413                          ;------------------------------------------------
   414                          ;  Port Registers
   415                          ;  Note: Also see this address range in Bank 0.
   416                          ;------------------------------------------------
   417                          ; Port 0
   418  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   419  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   420  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   421  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   422                          
   423                          ; Port 1
   424  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   425  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   426  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   427  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   428                          
   429                          ; Port 2
   430  0008                    PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
   431  0009                    PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
   432  000A                    PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
   433  000B                    PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
   434                          
   435                          ; Port 3
   436  000C                    PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
   437  000D                    PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
   438  000E                    PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
   439  000F                    PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
   440                          
   441                          ; Port 4
   442  0010                    PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
   443  0011                    PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
   444  0012                    PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
   445  0013                    PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
   446                          
   447                          ;------------------------------------------------
   448                          ;  Digital PSoC(tm) block Registers
   449                          ;  Note: Also see this address range in Bank 0.
   450                          ;------------------------------------------------
   451                          
   452                          ; Digital PSoC block 00, Basic Type C
   453  0020                    DBC00FN:      equ 20h          ; Function Register                        (RW)
   454  0021                    DBC00IN:      equ 21h          ;    Input Register                        (RW)
   455  0022                    DBC00OU:      equ 22h          ;   Output Register                        (RW)
   456  0023                    DBC00CR1:     equ 23h          ;   control & status register 1            (RW)
   457                          
   458                          ; Digital PSoC block 01, Basic Type C
   459  0024                    DBC01FN:      equ 24h          ; Function Register                        (RW)
   460  0025                    DBC01IN:      equ 25h          ;    Input Register                        (RW)
   461  0026                    DBC01OU:      equ 26h          ;   Output Register                        (RW)
   462  0027                    DBC01CR1:     equ 27h          ;   control & status register 1            (RW)
   463                          
   464                          ; Digital PSoC block 02, Communications Type C
   465  0028                    DCC02FN:      equ 28h          ; Function Register                        (RW)
   466  0029                    DCC02IN:      equ 29h          ;    Input Register                        (RW)
   467  002A                    DCC02OU:      equ 2Ah          ;   Output Register                        (RW)
   468  002B                    DBC02CR1:     equ 2Bh          ;   control & status register 1            (RW)
   469                          
   470                          ; Digital PSoC block 03, Communications Type C
   471  002C                    DCC03FN:      equ 2Ch          ; Function Register                        (RW)
   472  002D                    DCC03IN:      equ 2Dh          ;    Input Register                        (RW)
   473  002E                    DCC03OU:      equ 2Eh          ;   Output Register                        (RW)
   474  0029                    DBC03CR1:     equ 29h          ;   control & status register 1            (RW)
   475                          
   476                          ; Digital PSoC block 10, Basic Type C
   477  0030                    DBC10FN:      equ 30h          ; Function Register                        (RW)
   478  0031                    DBC10IN:      equ 31h          ;    Input Register                        (RW)
   479  0032                    DBC10OU:      equ 32h          ;   Output Register                        (RW)
   480  0033                    DBC10CR1:     equ 33h          ;   control & status register 1            (RW)
   481                          
   482                          ; Digital PSoC block 11, Basic Type C
   483  0034                    DBC11FN:      equ 34h          ; Function Register                        (RW)
   484  0035                    DBC11IN:      equ 35h          ;    Input Register                        (RW)
   485  0036                    DBC11OU:      equ 36h          ;   Output Register                        (RW)
   486  0037                    DBC11CR1:     equ 37h          ;   control & status register 1            (RW)
   487                          
   488                          ; Digital PSoC block 12, Communications Type C
   489  0038                    DCC12FN:      equ 38h          ; Function Register                        (RW)
   490  0039                    DCC12IN:      equ 39h          ;    Input Register                        (RW)
   491  003A                    DCC12OU:      equ 3Ah          ;   Output Register                        (RW)
   492  003B                    DBC12CR1:     equ 3Bh          ;   control & status register 1            (RW)
   493                          
   494                          ; Digital PSoC block 13, Communications Type C
   495  003C                    DCC13FN:      equ 3Ch          ; Function Register                        (RW)
   496  003D                    DCC13IN:      equ 3Dh          ;    Input Register                        (RW)
   497  003E                    DCC13OU:      equ 3Eh          ;   Output Register                        (RW)
   498  003F                    DBC13CR1:     equ 3Fh          ;   control & status register 1            (RW)
   499                          
   500                          ;------------------------------------------------
   501                          ;  System and Global Resource Registers
   502                          ;  Note: Also see this address range in Bank 0.
   503                          ;------------------------------------------------
   504                          
   505  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   506  00C0                    CLK_CR0_ACOLUMN_3:    equ C0h    ; MASK: Specify clock for analog cloumn
   507  0030                    CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
   508  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   509  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   510                          
   511  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   512  0018                    CLK_CR1_ACLK1:        equ 18h    ; MASK: Digital PSoC block for analog source
   513  0003                    CLK_CR1_ACLK0:        equ 03h    ; MASK: Digital PSoC block for analog source
   514                          
   515  0003                    CLK_CR1_ACLK2:        equ 03h    ; Deprecated do not use
   516                          
   517  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   518  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   519                          
   520  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   521  000F                    AMD_CR0_AMOD0:        equ 0Fh    ; MASK: Modulation source for analog column 0
   522                          
   523  0064                    CMP_GO_EN:    equ 64h          ; Comparator Bus To Global Out Enable      (RW)
   524  0080                    CMP_GO_EN_GOO5:       equ 80h    ; MASK: Selected Col 1 signal to GOO5
   525  0040                    CMP_GO_EN_GOO1:       equ 40h    ; MASK: Selected Col 1 signal to GOO1
   526  0030                    CMP_GO_EN_SEL1:       equ 30h    ; MASK: Column 1 Signal Select
   527  0008                    CMP_GO_EN_GOO4:       equ 08h    ; MASK: Selected Col 0 signal to GOO4
   528  0004                    CMP_GO_EN_GOO0:       equ 04h    ; MASK: Selected Col 0 signal to GOO0
   529  0003                    CMP_GO_EN_SEL0:       equ 03h    ; MASK: Column 0 Signal Select
   530                          
   531  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   532  000F                    AMD_CR1_AMOD1:        equ 0Fh    ; MASK: Modulation ctrl for analog column 1
   533                          
   534  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   535  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   536  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   537                          
   538  006B                    CLK_CR3:      equ 6Bh          ; Analog Clock Source Control Register 3   (RW)
   539  0040                    CLK_CR3_SYS1:         equ 40h    ; MASK: Analog Clock 1 selection
   540  0030                    CLK_CR3_DIVCLK1:      equ 30h    ; MASK: Analog Clock 1 divider
   541  0004                    CLK_CR3_SYS0:         equ 04h    ; MASK: Analog Clock 0 selection
   542  0003                    CLK_CR3_DIVCLK0:      equ 03h    ; MASK: Analog Clock 0 divider
   543                          
   544                          ;------------------------------------------------
   545                          ;  Global Digital Interconnects
   546                          ;------------------------------------------------
   547                          
   548  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   549  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   550  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   551  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   552                          
   553  00A0                    GDI_O_IN_CR:  equ 0A0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   554  00A1                    GDI_E_IN_CR:  equ 0A1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   555  00A2                    GDI_O_OU_CR:  equ 0A2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   556  00A3                    GDI_E_OU_CR:  equ 0A3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   557                          
   558  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   559  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   560                          
   561                          ;------------------------------------------------
   562                          ;  Analog Mux Bus Port Enable Bits
   563                          ;------------------------------------------------
   564  00D8                    MUX_CR0:      equ 0D8h          ; Analog Mux Port 0 Bit Enables Register
   565  00D9                    MUX_CR1:      equ 0D9h          ; Analog Mux Port 1 Bit Enables Register
   566  00DA                    MUX_CR2:      equ 0DAh          ; Analog Mux Port 2 Bit Enables Register
   567  00DB                    MUX_CR3:      equ 0DBh          ; Analog Mux Port 3 Bit Enables Register
   568  00EC                    MUX_CR4:      equ 0ECh          ; Analog Mux Port 4 Bit Enables Register
   569                          
   570                          ;------------------------------------------------
   571                          ;  Clock and System Control Registers
   572                          ;------------------------------------------------
   573                          
   574  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   575  0080                    OSC_GO_EN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   576  0040                    OSC_GO_EN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   577  0020                    OSC_GO_EN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   578  0010                    OSC_GO_EN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   579  0008                    OSC_GO_EN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   580  0004                    OSC_GO_EN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   581  0002                    OSC_GO_EN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   582  0001                    OSC_GO_EN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   583                          
   584  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   585  0003                    OSC_CR4_VC3SEL:       equ 03h    ; MASK: System VC3 Clock source
   586                          
   587  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   588                          
   589  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   590  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   591  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   592  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   593  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   594  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   595  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   596  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   597  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   598  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   599  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   600  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   601  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   602  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   603  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   604  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   605  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   606  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   607                          
   608  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   609  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   610  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   611                          
   612  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   613  0080                    OSC_CR2_PLLGAIN:      equ 80h    ; MASK: High/Low gain
   614  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   615  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   616  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   617                          
   618  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   619  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   620  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   621  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   622  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   623  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   624  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   625  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   626                          
   627  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   628  0008                    VLT_CMP_NOWRITE:      equ 08h    ; MASK: Vcc below Flash Write level
   629  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   630  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   631  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   632                          
   633  00E5                    ADC0_TR:      equ 0E5h          ; ADC Column 0 Trim Register
   634  00E6                    ADC1_TR:      equ 0E6h          ; ADC Column 1 Trim Register
   635                          
   636  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   637  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   638  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   639  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   640                          
   641  00FA                    FLS_PR1:      equ 0FAh          ; Flash Program Register 1                 (RW)
   642  0003                    FLS_PR1_BANK:         equ 03h    ; MASK: Select Active Flash Bank
   643                          
   644  00FD                    DAC_CR0:       equ 0FDh          ; Analog Mux DAC Control Register 0
   645  00DC                    DAC_CR1:       equ 0DCh          ; Analog Mux DAC Control Register 1
   646  0008                    DAC_CR_IRANGE:        equ 08h    ; MASK: Sets the DAC Range low or high
   647  0006                    DAC_CR_OSCMODE:       equ 06h    ; MASK: Defines the reset mode for AMux
   648  0001                    DAC_CR_ENABLE:        equ 01h    ; MASK: Enable/Disable DAC function
   649                          
   650                          ;------------------------------------------------
   651                          ;  I2C Control Registers
   652                          ;------------------------------------------------
   653                          
   654  00AD                    I2C_ADDR:    equ 0ADh          ; I2C Address Register (RW)
   655                          
   656                          ;------------------------------------------------------
   657                          ;  Neon Analog Registers
   658                          ;------------------------------------------------------
   659  0053                    VDAC50CR0:		equ 53h			; V DAC5 control 0				(RW)
   660  0057                    VDAC51CR0:		equ 57h			; V DAC5 control 1				(RW)
   661  00A8                    ADC_CR0:		equ A8h			; ADC control 0					(RW)
   662  00A9                    ADC_CR1:		equ A9h			; ADC control 1					(RW)
   663  00AA                    ADC_CR2:		equ AAh			; ADC control 2					(RW)
   664  00AB                    ADC_CR3TRIM:	equ ABh			; ADC control 3					(RW)
   665  00AC                    ADC_CR4:		equ ACh			; ADC control 4					(RW)
   666  00E7                    VDAC_TRIM:		equ E7h			; V DAC trim					(RW)
   667                          
   668                          ;------------------------------------------------------
   669                          ;  Neon Current Sense CMP Registers
   670                          ;------------------------------------------------------
   671  0050                    CMP0CR1:		equ 50h			; CMP0 control 1				(RW)
   672  0051                    CMP0CR2:		equ 51h			; CMP0 control 2				(RW)
   673  0054                    CMP1CR1:		equ 54h			; CMP1 control 1				(RW)
   674  0055                    CMP1CR2:		equ 55h			; CMP1 control 2				(RW)
   675  0058                    CSCMPCR0:		equ 58h			; CSCMP control 0				(RW)
   676  0059                    CSCMPGOEN:		equ 59h			; CSCMO global out enable		(RW)
   677  005A                    CSLUTCR0:		equ 5Ah			; CSLUT control 0				(RW)
   678  005B                    CMPCOLMUX:		equ 5Bh			; CMP Column Mux				(RW)
   679  005C                    CMPPWMCR:		equ 5Ch			; CMP PWM control				(RW)
   680  005D                    CMPFLTCR:		equ 5Dh			; CMP filter control			(RW)
   681  005E                    CMPCLK1:		equ 5Eh			; CMP clock 1					(RW)
   682  005F                    CMPCLK0:		equ 5Fh			; CMP clock 0					(RW)
   683                          
   684                          ;------------------------------------------------------
   685                          ;  Neon Real Time Clock Registers
   686                          ;------------------------------------------------------
   687  00A4                    RTCH:			equ A4h			; Real time current hour		(RW)
   688  00A5                    RTCM:			equ A5h			; Real time current minute		(RW)
   689  00A6                    RTCS:			equ A6h			; Real time current second		(RW)
   690  00A7                    RTCCR:			equ A7h			; Real time clock control		(RW)
   691                          
   692                          ;------------------------------------------------------
   693                          ;  Analog MUX Config Registers
   694                          ;------------------------------------------------------
   695                          
   696  006A                    AMUX_CFG1:			equ 6Ah  ; Analog MUX Configuration 1
   697  0020                    AMUX_CFG1_GOINVR:	equ 20h  ;
   698  0010                    AMUX_CFG1_GOINVL:  	equ 10h	 ;
   699  000C                    AMUX_CFG1_AMUXMODR:	equ 0Ch	 ;
   700  0003                    AMUX_CFG1_AMUXMODL:	equ 03h	 ;
   701                          
   702                          ;;=============================================================================
   703                          ;;      M8C System Macros
   704                          ;;  These macros should be used when their functions are needed.
   705                          ;;=============================================================================
   706                          
   707                          ;----------------------------------------------------
   708                          ;  Swapping Register Banks
   709                          ;----------------------------------------------------
   710                              macro M8C_SetBank0
   711                              and   F, ~FLAG_XIO_MASK
   712  3D73                        endm
   713                          
   714                              macro M8C_SetBank1
   715                              or    F, FLAG_XIO_MASK
   716  3D73                        endm
   717                          
   718                          ;----------------------------------------------------
   719                          ;  Global Interrupt Enable/Disable
   720                          ;----------------------------------------------------
   721                              macro M8C_EnableGInt
   722                              or    F, FLAG_GLOBAL_IE
   723  3D73                        endm
   724                          
   725                              macro M8C_DisableGInt
   726                              and   F, ~FLAG_GLOBAL_IE
   727  3D73                        endm
   728                          
   729                          ;----------------------------------------------------
   730                          ;  Enable/Disable Interrupt Mask
   731                          ;
   732                          ;  Use the following macros to enable/disable
   733                          ;  bits in the Interrupt mask registers,
   734                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   735                          ;
   736                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   737                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   738                          ;
   739                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   740                          ;        and MASK is the bit set to enable or disable
   741                          ;----------------------------------------------------
   742                          ; Disable Interrupt Bit Mask(s)
   743                              macro M8C_DisableIntMask
   744                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   745  3D73                        endm
   746                          
   747                          ; Enable Interrupt Bit Mask(s)
   748                              macro M8C_EnableIntMask
   749                              or    reg[@0], @1               ; enable specified interrupt enable bit
   750  3D73                        endm
   751                          
   752                          ;----------------------------------------------------
   753                          ;  Clear Posted Interrupt Flag Mask
   754                          ;
   755                          ;  Use the following macros to clear the
   756                          ;  bits in the Interrupt Clear registers,
   757                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   758                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   759                          ;
   760                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   761                          ;        and MASK is the bit set to enable or disable
   762                          ;----------------------------------------------------
   763                              macro M8C_ClearIntFlag
   764                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   765  3D73                        endm
   766                          
   767                          ;----------------------------------------------------
   768                          ;  Power-On Reset & WatchDog Timer Functions
   769                          ;----------------------------------------------------
   770                              macro M8C_EnableWatchDog
   771                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   772  3D73                        endm
   773                          
   774                              macro M8C_ClearWDT
   775                              mov   reg[RES_WDT], 00h
   776  3D73                        endm
   777                          
   778                              macro M8C_ClearWDTAndSleep
   779                              mov   reg[RES_WDT], 38h
   780  3D73                        endm
   781                          
   782                          ;----------------------------------------------------
   783                          ;  Sleep, CPU Stop & Software Reset
   784                          ;----------------------------------------------------
   785                              macro M8C_Sleep
   786                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   787                              ; The next instruction to be executed depends on the state of the
   788                              ; various interrupt enable bits. If some interrupts are enabled
   789                              ; and the global interrupts are disabled, the next instruction will
   790                              ; be the one that follows the invocation of this macro. If global
   791                              ; interrupts are also enabled then the next instruction will be
   792                              ; from the interrupt vector table. If no interrupts are enabled
   793                              ; then the CPU sleeps forever.
   794  3D73                        endm
   795                          
   796                              macro M8C_Stop
   797                              ; In general, you probably don't want to do this, but here's how:
   798                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   799                              ; Next instruction to be executed is located in the interrupt
   800                              ; vector table entry for Power-On Reset.
   801  3D73                        endm
   802                          
   803                              macro M8C_Reset
   804                              ; Restore CPU to the power-on reset state.
   805                              mov A, 0
   806                              SSC
   807                              ; Next non-supervisor instruction will be at interrupt vector 0.
   808  3D73                        endm
   809                          
   810                          ;----------------------------------------------------
   811                          ; ImageCraft Code Compressor Actions
   812                          ;----------------------------------------------------
   813                              ; Suspend Code Compressor
   814                              ; Must not span a RET or RETI instruction
   815                              ; without resuming code compression
   816                              macro Suspend_CodeCompressor
   817                              or   F, 0
   818  3D73                        endm
   819                          
   820                              ; Resume Code Compression
   821                              macro Resume_CodeCompressor
   822                              add  SP, 0
   823                              endm
      + 3D73                    
      + 3D73                    ; end of file m8c.inc
     1                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     2                          ;;;
     3                          ;;;  M8SSC.INC -- CY8C22045 Microcontroller Device SSC Declarations
     4                          ;;;
     5                          ;;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
     6                          ;;;
     7                          ;;;
     8                          ;;;  This file provides address constants, bit field masks and a set of macro
     9                          ;;;  facilities for the Cypress MicroSystems CY8C22045 Microcontroller family.
    10                          ;;;
    11                          ;;;  Last Modified: August 17, 2004
    12                          ;;;
    13                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    14                          
    15                          ;----------------------------------
    16                          ; Common Supervisory Code Variables
    17                          ;----------------------------------
    18  00F8                    bSSC_KEY1:                          equ      0F8h   ; supervisory key
    19  00F9                    bSSC_KEYSP:                         equ      0F9h   ; supervisory stack ptr key
    20  00FA                    bSSC_TABLE_TableId:                 equ      0FAh   ; table ID
    21                          
    22  003A                    OPER_KEY:                           equ      3Ah   ; operation key
    23                          
    24                          ;----------------------------------
    25                          ; SSC_Action macro command codes
    26                          ;----------------------------------
    27  0001                    FLASH_READ:                         equ      1     ; flash read command
    28  0002                    FLASH_WRITE:                        equ      2     ; flash write command
    29  0003                    FLASH_ERASE:                        equ      3     ; flash erase command
    30  0004                    PROTECT_BLOCK:                      equ      4     ; flash protect block command
    31  0006                    TABLE_READ:                         equ      6     ; table read command
    32  0007                    FLASH_CHECKSUM:                     equ      7     ; flash checksum calculation command
    33  0008                    CALIBRATE0:                         equ      8     ; Calibrate without checksum
    34  0009                    CALIBRATE1:                         equ      9     ; Calibrate with checksum
    35                          
    36                          ;----------------------------------
    37                          ; SSC_Action Flash table addresses
    38                          ;----------------------------------
    39                          ; Table 0 Values
    40  00F8                    SILICON_ID_1:                       equ      0F8h   ; Table 0 first byte of silicon ID
    41  00F9                    SILICON_ID_0:                       equ      0F9h   ; Table 0 second byte of silicon ID
    42                          
    43                          ; Table 1 Values
    44  00F8                    SSCTBL1_TRIM_BGR_3V:                equ      0F8h   ; 3.3V bandgap ref voltage trim
    45  00F9                    SSCTBL1_TRIM_IMO_3V_24MHZ:          equ      0F9h   ; 3.3V internal main oscillator trim (24MHz)
    46  00FA                    SSCTBL1_CAL_ROOM_3V:                equ      0FAh   ; 3.3V Room Temp Calibration
    47  00FB                    SSCTBL1_CAL_HOT_3V:                 equ      0FBh   ; 3.3V Hot  Temp Calibration
    48  00FC                    SSCTBL1_TRIM_BGR_5V:                equ      0FCh   ; 5.0V bandgap ref voltage trim
    49  00FD                    SSCTBL1_TRIM_IMO_5V_24MHZ:          equ      0FDh   ; 5.0V internal main oscillator trim (24MHz)
    50  00FE                    SSCTBL1_CAL_ROOM_5V:                equ      0FEh   ; 5.0V Room Temp Calibration
    51  00FF                    SSCTBL1_CAL_HOT_5V:                 equ      0FFh   ; 5.0V Hot  Temp Calibration
    52                              ; legacy names:
    53  00F8                        VOLTAGE_TRIM_3V:                equ      0F8h   ; Table 1 3.3V bandgap ref voltage trim value
    54  00F9                        OSCILLATOR_TRIM_3V:             equ      0F9h   ; Table 1 3.3V internal main oscillator trim val
                                ue
    55  00FC                        VOLTAGE_TRIM_5V:                equ      0FCh   ; Table 1 5.0V bandgap ref voltage trim value
    56  00FD                        OSCILLATOR_TRIM_5V:             equ      0FDh   ; Table 1 5.0V internal main oscillator trim val
                                ue
    57                          
    58                          ; Table 2 Values
    59  00F8                    SSCTBL2_TRIM_BGR_2V:                equ      0F8h   ; 2.7V bandgap ref voltage trim
    60  00F9                    SSCTBL2_TRIM_IMO_2V_12MHZ:          equ      0F9h   ; 2.7V internal main oscillator trim (12MHz)
    61  00FA                    SSCTBL2_CAL_ROOM_2V:                equ      0FAh   ; 2.7V Room Temp Calibration
    62  00FB                    SSCTBL2_CAL_HOT_2V:                 equ      0FBh   ; 2.7V Hot  Temp Calibration
    63  00FC                    SSCTBL2_TRIM_IMO_3V_6MHZ:           equ      0FCh   ; 3.3V IMO Trim for SLOWIMO 6MHz operation
    64  00FD                    SSCTBL2_TRIM_IMO_2V_6MHZ:           equ      0FDh   ; 2.7V IMO Trim for SLOWIMO 6MHz operation
    65  00FE                    SSCTBL2_TRIM_IMO_5V_6MHZ:           equ      0FEh   ; 5.0V IMO Trim for SLOWIMO 6MHz operation
    66                          
    67                          
    68                          ;-----------------------------------------------------------------------------
    69                          ;  MACRO SSC_Action( OpCode )
    70                          ;
    71                          ;  DESCRIPTION:
    72                          ;     Performs supervisory operations defined in Supervisory ROM (SROM)
    73                          ;     section of Technical Reference Manual and/or Datasheet.
    74                          ;-----------------------------------------------------------------------------
    75                          ;
    76                          ;  ARGUMENTS:
    77                          ;     BYTE  OpCode   - specified supervisory operation - defined operations
    78                          ;                      are:  FLASH_WRITE, FLASH_ERASE, FLASH_READ, TABLE_READ,
    79                          ;                            FLASH_CHECKSUM, PROTECT_BLOCK
    80                          ;  RETURNS:
    81                          ;     Nothing
    82                          ;
    83                          ;  SIDE EFFECTS:
    84                          ;     The values of the A and X registers are modified
    85                          ;
    86                          ;  PROCEDURE:
    87                          ;     1) specify a 3 byte stack frame.  Save in [KEYSP]
    88                          ;     2) insert the flash Supervisory key in [KEY1]
    89                          ;     3) store function code in A
    90                          ;     4) call the supervisory code
    91                          ;
    92                              macro SSC_Action( OpCode )
    93                          ;   !!! DO NOT CHANGE THIS CODE !!!
    94                          ;       This sequence of opcodes provides a
    95                          ;       signature for the debugger and ICE.
    96                              mov   X, SP                            ; copy SP into X
    97                              mov   A, X                             ; mov to A
    98                              add   A, 3                             ; create 3 byte stack frame
    99                              mov   [bSSC_KEYSP], A                  ; save stack frame for supervisory code
   100                              mov   [bSSC_KEY1], OPER_KEY            ; load the code for supervisory operations
   101                              mov   A, @OpCode                       ; load A with specific Flash operation
   102                              SSC                                    ; SSC call the supervisory code
   103                          ;   !!! DO NOT CHANGE THIS CODE !!!
   104  3D73                        endm
   105                          
   106                          
   107                          ;-----------------------------------------------------------------------------
   108                          ;  MACRO M8SSC_SetTableTrims( Table, IMO_Trim, Volt_Trim )
   109                          ;
   110                          ;  DESCRIPTION:
   111                          ;     Loads Bandgap Voltage and Internal Main Oscillator (IMO) Trim
   112                          ;     registers with values from from the specified flash System Parameter
   113                          ;     table entries. Note that both trim values must come from the same table.
   114                          ;     Also, see M8SSC_Set2TableTrims below.
   115                          ;-----------------------------------------------------------------------------
   116                          ;
   117                          ;  ARGUMENTS:
   118                          ;     BYTE Table     - 0..3 for the desired system parameter table
   119                          ;     BYTE Volt_Trim - Address (F8 - FF) of the voltage trim value desired
   120                          ;     BYTE IMP_Trim  - Address (F8 - FF) of the IMO trim value desired
   121                          ;
   122                          ;  RETURNS:
   123                          ;     Nothing
   124                          ;
   125                          ;  SIDE EFFECTS:
   126                          ;     The values of the A and X registers are modified
   127                          ;
   128                              macro M8SSC_SetTableTrims( Table, IMO_Trim, Volt_Trim )
   129                              mov A, reg[0xD0]  ; CUR_PP
   130                          	push A
   131                          	mov reg[0xD0], 0
   132                              mov   [bSSC_TABLE_TableId], @Table     ; Point to requested Flash Table
   133                              SSC_Action TABLE_READ                  ; Perform a table read supervisor call
   134                              M8C_SetBank1
   135                              mov   A, [@IMO_Trim]
   136                              mov   reg[IMO_TR], A                   ; Load the 3V trim oscillator setting
   137                              mov   A, [@Volt_Trim]
   138                              mov   reg[BDG_TR], A                   ; Load the bandgap trim setting for 3V
   139                              M8C_SetBank0
   140                          	pop A
   141                          	mov reg[0xD0], A
   142  3D73                        endm
   143                          
   144                          
   145                          ;-----------------------------------------------------------------------------
   146                          ;  MACRO M8SSC_Set2TableTrims( TableA, IMO_Trim, TableB, Volt_Trim )
   147                          ;
   148                          ;  DESCRIPTION:
   149                          ;     Loads Bandgap Voltage and Internal Main Oscillator (IMO) Trim
   150                          ;     registers with values from from the specified flash System Parameter
   151                          ;     table entries. Each trim value comes from a different table.
   152                          ;     Also, see M8SSC_SetTableTrims above.
   153                          ;-----------------------------------------------------------------------------
   154                          ;
   155                          ;  ARGUMENTS:
   156                          ;     BYTE TableA    - 0..3 for the parameter table holding the Volt Trim
   157                          ;     BYTE Volt_Trim - Address (F8 - FF) of the voltage trim value desired
   158                          ;     BYTE TableB    - 0..3 for the parameter table holding the IMO Trim
   159                          ;     BYTE IMP_Trim  - Address (F8 - FF) of the IMO trim value desired
   160                          ;
   161                          ;  RETURNS:
   162                          ;     Nothing
   163                          ;
   164                          ;  SIDE EFFECTS:
   165                          ;     The values of the A and X registers are modified
   166                          ;
   167                              macro M8SSC_Set2TableTrims( TableA, IMO_Trim, TableB, Volt_Trim )
   168                              mov A, reg[0xD0]  ; CUR_PP
   169                          	push A
   170                          	mov reg[0xD0], 0
   171                              mov   [bSSC_TABLE_TableId], @TableA    ; Point to Flash Table for IMO Trim
   172                              SSC_Action TABLE_READ                  ; Copy table data to RAM F8-FF
   173                              M8C_SetBank1                           ; (Note, preserved across next SSC!)
   174                              mov   A, [@IMO_Trim]                   ; Set the main oscillator trim
   175                              mov   reg[IMO_TR], A
   176                              mov   [bSSC_TABLE_TableId], @TableB    ; Point to Flash Table for Volt Trim
   177                              SSC_Action TABLE_READ                  ; Copy table data to RAM F8-FF
   178                              mov   A, [@Volt_Trim]                  ; Set the bandgap voltage trim
   179                              mov   reg[BDG_TR], A                   ; Load the bandgap trim setting for 3V
   180                              M8C_SetBank0
   181                          	pop A
   182                          	mov reg[0xD0], A
   183  3D73                        endm
   184                          
   185                          
   186                          ;-----------------------------------------------------------------------------
   187                          ;  MACRO M8SSC_SetTableVoltageTrim( Table, Volt_Trim )
   188                          ;
   189                          ;  DESCRIPTION:
   190                          ;     Loads Bandgap Voltage Trim register with values from from the
   191                          ;     specified flash System Parameter table entry.
   192                          ;-----------------------------------------------------------------------------
   193                          ;
   194                          ;  ARGUMENTS:
   195                          ;     BYTE Table     - 0..3 for the parameter table holding the Volt Trim
   196                          ;     BYTE Volt_Trim - Address (F8 - FF) of the voltage trim value desired
   197                          ;
   198                          ;  RETURNS:
   199                          ;     Nothing
   200                          ;
   201                          ;  SIDE EFFECTS:
   202                          ;     The values of the A and X registers are modified
   203                          ;
   204                              macro M8SSC_SetTableVoltageTrim( Table, Volt_Trim )
   205                              mov A, reg[0xD0]  ; CUR_PP
   206                          	push A
   207                          	mov reg[0xD0], 0
   208                              mov   [bSSC_TABLE_TableId], @Table     ; Point to Flash Table
   209                              SSC_Action TABLE_READ                  ; Perform a table read supervisor call
   210                              M8C_SetBank1
   211                              mov   A, [@Volt_Trim]                  ; Get the bandgap trim seting
   212                              mov   reg[BDG_TR], A                   ; Update the register value
   213                              M8C_SetBank0
   214                          	pop A
   215                          	mov reg[0xD0], A
   216  3D73                        endm
   217                          
   218                          
   219                          ;-----------------------------------------------------------------------------
   220                          ;  MACRO M8SSC_SetTableIMOTrim( Table, IMO_Trim )
   221                          ;
   222                          ;  DESCRIPTION:
   223                          ;     Loads Internal Main Oscillator (IMO) Trim register with values from
   224                          ;     from the specified flash System Parameter table entry.
   225                          ;-----------------------------------------------------------------------------
   226                          ;
   227                          ;  ARGUMENTS:
   228                          ;     BYTE Table     - 0..3 for the parameter table holding the IMO Trim
   229                          ;     BYTE IMO_Trim  - Address (F8 - FF) of the voltage trim value desired
   230                          ;
   231                          ;  RETURNS:
   232                          ;     Nothing
   233                          ;
   234                          ;  SIDE EFFECTS:
   235                          ;     The values of the A and X registers are modified
   236                          ;
   237                              macro M8SSC_SetTableIMOTrim( Table, IMO_Trim )
   238                              mov A, reg[0xD0]  ; CUR_PP
   239                          	push A
   240                          	mov reg[0xD0], 0
   241                              mov   [bSSC_TABLE_TableId], @Table ; Point to Flash Table 1
   242                              SSC_Action TABLE_READ              ; Perform a table read supervisor call
   243                              M8C_SetBank1
   244                              mov   A, [@IMO_Trim]               ; Get the IMO trim seting
   245                              mov   reg[IMO_TR], A               ; Update the register value
   246                              M8C_SetBank0
   247                          	pop A
   248                          	mov reg[0xD0], A
   249                              endm
      + 3D73                    
      + 3D73                    ; end of file m8ssc.inc
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;
     4                          ;;       FILENAME: Memory.inc
     5                          ;;
     6                          ;;    DESCRIPTION: Memory Model and Stack Parameter Definitions for 
     7                          ;;                 CY8C22045 PSoC devices.
     8                          ;;
     9                          ;;  LAST MODIFIED: August 17, 2004
    10                          ;;
    11                          ;;-----------------------------------------------------------------------------
    12                          ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
    13                          ;;*****************************************************************************
    14                          ;;*****************************************************************************
    15                          ;
    16                          ;
    17                          ;  ******** Define Memory Model and Stack parameters ********
    18                          ;
    19  0001                    IMAGECRAFT: equ 1   
    20  0002                    HITECH: equ 2   
    21  0002                    TOOLCHAIN: equ HITECH   
    22  0001                    SYSTEM_LARGE_MEMORY_MODEL: equ 1   
    23  0000                    SYSTEM_SMALL_MEMORY_MODEL: equ 0   
    24  0003                    SYSTEM_STACK_PAGE: equ 3   
    25  0000                    SYSTEM_STACK_PAGE_OFFSET: equ 0   
    26  0002                    SYSTEM_TOOLS: equ 2   
    27  0000                    SYSTEM_IDXPG_TRACKS_STK_PP: equ 0   
    28  0001                    SYSTEM_IDXPG_TRACKS_IDX_PP: equ 1   
    29  0000                    SYSTEM_MULTIPAGE_STACK: equ 0 
    30                          
    31                          
    32                          ;  ******* Function Class Definitions *******
    33                          ;
    34                          ;  These definitions are used to describe RAM access patterns. They provide
    35                          ;  documentation and they control prologue and epilogue macros that perform
    36                          ;  the necessary housekeeping functions for large memory model devices like
    37                          ;  the CY8C22045.
    38                          
    39  0001                    RAM_USE_CLASS_1:               equ 1   ; PUSH, POP & I/O access
    40  0002                    RAM_USE_CLASS_2:               equ 2   ; Indexed address mode on stack page
    41  0004                    RAM_USE_CLASS_3:               equ 4   ; Indexed address mode to any page
    42  0008                    RAM_USE_CLASS_4:               equ 8   ; Direct/Indirect address mode access
    43                          
    44                          ; ******* Hi Tech Specific *******
    45                          ; Turn on the expansion of all macros by default
    46                          IF (TOOLCHAIN & HITECH)
    47                          OPT EXPAND
    48                          ENDIF
    49                          ; ******* Page Pointer Manipulation Macros *******
    50                          ;
    51                          ;  ******* Page Pointer Manipulation Macros *******
    52                          ;
    53                          ;  Most of the following macros are conditionally compiled so they only
    54                          ;  produce code if the large memory model is selected.
    55                          
    56                             ;-----------------------------------------------
    57                             ;  Set Stack Page Macro
    58                             ;-----------------------------------------------
    59                             ;
    60                             ;  DESC: Modify STK_PP in the large or small memory Models.
    61                             ;
    62                             ; INPUT: Constant (e.g., SYSTEM_STACK_PAGE) that specifies the RAM page on
    63                             ;        which stack operations like PUSH and POP store and retrieve their
    64                             ;        data
    65                             ;
    66                             ;  COST: 8 instruction cycles (in LMM only)
    67                          
    68                             macro RAM_SETPAGE_STK( PG_NUMBER )
    69                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    70                                mov reg[STK_PP], @PG_NUMBER
    71                             ENDIF
    72  3D73                       endm
    73                          
    74                             ;-----------------------------------------------
    75                             ;  Set Current Page Macro
    76                             ;-----------------------------------------------
    77                             ;
    78                             ;  DESC: Modify CUR_PP in the large or small memory Models.
    79                             ;
    80                             ; INPUT: Constant value (e.g., >bFoo) for the RAM page number used in
    81                             ;        calculation of effective direct-mode address operands.
    82                             ;
    83                             ;  COST: 8 instruction cycles (in LMM only)
    84                          
    85                             macro RAM_SETPAGE_CUR( PG_NUMBER )
    86                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    87                                mov reg[CUR_PP], @PG_NUMBER
    88                             ENDIF
    89  3D73                       endm
    90                          
    91                             ;-----------------------------------------------
    92                             ;  Set Index Page Macro
    93                             ;-----------------------------------------------
    94                             ;
    95                             ;  DESC: Modify IDX_PP in the large or small emory Models.
    96                             ;
    97                             ; INPUT: Constant value (e.g., >caFoo) for the RAM page number used in
    98                             ;         calculation of effective index-mode address operands.
    99                             ;
   100                             ;  COST: 8 instruction cycles (in LMM only)
   101                          
   102                             macro RAM_SETPAGE_IDX( PG_NUMBER )
   103                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   104                                mov reg[IDX_PP], @PG_NUMBER
   105                             ENDIF
   106  3D73                       endm
   107                          
   108                             ;-----------------------------------------------
   109                             ;  Set MVI Read Page Macro
   110                             ;-----------------------------------------------
   111                             ;
   112                             ;  DESC: Modify MVR_PP in the large or small memory Models.
   113                             ;
   114                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   115                             ;        calculation of indirect address operands used in the
   116                             ;        "mvi A, [pFoo]" instructions.
   117                             ;
   118                             ;  COST: 8 instruction cycles (in LMM only)
   119                          
   120                             macro RAM_SETPAGE_MVR( PG_NUMBER )
   121                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   122                                mov reg[MVR_PP], @PG_NUMBER
   123                             ENDIF
   124  3D73                       endm
   125                          
   126                             ;-----------------------------------------------
   127                             ;  Set MVI Write Page Macro
   128                             ;-----------------------------------------------
   129                             ;
   130                             ;  DESC: Modify MVW_PP in the large or small memory Models.
   131                             ;
   132                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   133                             ;        calculation of indirect address operands used in the
   134                             ;        "mvi [pFoo], A" instructions.
   135                             ;
   136                             ;  COST: 8 instruction cycles (in LMM only)
   137                          
   138                             macro RAM_SETPAGE_MVW( PG_NUMBER )
   139                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   140                                mov reg[MVW_PP], @PG_NUMBER
   141                             ENDIF
   142  3D73                       endm
   143                          
   144                             ;-----------------------------------------------
   145                             ;  Force Index Page Pointer to Stack Page
   146                             ;-----------------------------------------------
   147                             ;
   148                             ;  DESC: Map index-mode operands onto the stack page by modifying IDX_PP.
   149                             ;        See also RAM_LOCK_INDEX_TO_STACKPAGE.
   150                             ;
   151                             ; INPUT: None
   152                             ;
   153                             ;  COST: 8 instruction cycles (in LMM only)
   154                          
   155                             macro RAM_SETPAGE_IDX2STK
   156                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   157                                IF ( SYSTEM_MULTIPAGE_STACK )
   158                                   mov   A, reg[STK_PP]
   159                                   mov   reg[IDX_PP], A
   160                                ELSE
   161                                   RAM_SETPAGE_IDX SYSTEM_STACK_PAGE
   162                                ENDIF
   163                             ENDIF
   164  3D73                       endm
   165                          
   166                             ;-----------------------------------------------
   167                             ;  Change Memory Mode
   168                             ;-----------------------------------------------
   169                             ;
   170                             ;  DESC: Modify FLAG_PAGEMODE bits in the large and small memory Models.
   171                             ;
   172                             ; INPUT: Constant value for PGMODE bitfield of CPU Flag register, F.
   173                             ;        See FLAG_PGMODE_{x} constants in M8C.INC.
   174                             ;
   175                             ;  COST: 8 instruction cycles (in LMM only)
   176                          
   177                             macro RAM_CHANGE_PAGE_MODE( MODE )
   178                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   179                                and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
   180                                or    F,  FLAG_PGMODE_MASK & @MODE
   181                             ENDIF
   182  3D73                       endm
   183                          
   184                             ;-----------------------------------------------
   185                             ;  Set Large Memory Model Native Paging Mode
   186                             ;-----------------------------------------------
   187                             ;
   188                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   189                             ;        paging mode *IFF* a simple "OR" is guaranteed to work---for
   190                             ;        example, in an ISR, when the PGMODE bits have been cleared
   191                             ;        to zero. If a simple "OR" is not guaranteed to work, use
   192                             ;        the slower RAM_RESTORE_NATIVE_PAGING instead.
   193                             ;
   194                             ; INPUT: none
   195                             ;
   196                             ;  COST: 4 instruction cycles (in LMM only)
   197                          
   198                             macro RAM_SET_NATIVE_PAGING
   199                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   200                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   201                                or    F,  FLAG_PGMODE_11b            ; LMM w/ IndexPage<==>StackPage
   202                             ENDIF ;  PGMODE LOCKED
   203                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   204                                or    F,  FLAG_PGMODE_10b            ; LMM with independent IndexPage
   205                             ENDIF ; PGMODE FREE
   206                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   207  3D73                       endm
   208                          
   209                             ;-----------------------------------------------
   210                             ; Restore Large Memory Model Native Paging Mode
   211                             ;-----------------------------------------------
   212                             ;
   213                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   214                             ;        paging mode. Always works because it clears the PGMODE bits
   215                             ;        before OR-ing in the new ones. See RAM_RESTORE_NATIVE_PAGING
   216                             ;        for a faster method.
   217                             ;
   218                             ; INPUT: none
   219                             ;
   220                             ;  COST: 8 instruction cycles (in LMM only)
   221                          
   222                             macro RAM_RESTORE_NATIVE_PAGING
   223                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   224                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   225                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_11b ; LMM w/ IndexPage<==>StackPage
   226                             ENDIF ;  PGMODE LOCKED
   227                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   228                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b ; LMM with independent IndexPage
   229                             ENDIF ; PGMODE FREE
   230                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   231  3D73                       endm
   232                          
   233                             ;-----------------------------------------------
   234                             ; Force indexed addr mode operands to Stack Pg
   235                             ;-----------------------------------------------
   236                             ;
   237                             ;  DESC: Force instructions that use indexed address mode to reference the
   238                             ;        stack page (as defined by STK_PP). This macro sets the "Indexed
   239                             ;        Stack Mode" bit (LSB) of the PGMODE bit field in the CPU Flag
   240                             ;        register, F. (See also RAM_SETPAGE_IDX2STK, above.)
   241                             ;
   242                             ; INPUT: none
   243                             ;
   244                             ;  COST: 4 instruction cycles (in LMM only)
   245                          
   246                             macro RAM_X_POINTS_TO_STACKPAGE
   247                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   248                                or   F, FLAG_PGMODE_01b
   249                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   250  3D73                       endm
   251                          
   252                             ;-----------------------------------------------
   253                             ;  Force indexed addr mode operands to Index Pg
   254                             ;-----------------------------------------------
   255                             ;
   256                             ;  DESC: Permit instructions that use indexed address mode to reference page
   257                             ;        zero or the page pointed to by the IDX_PP register, depending on the
   258                             ;        setting of the MSb (or "Direct Page Mode" bit) of the PGMODE bits
   259                             ;        in the CPU Flag register, F. (This macro clears the PGMODE LSb.)
   260                             ;
   261                             ; INPUT: none
   262                             ;
   263                             ;  COST: 4 instruction cycles (in LMM only)
   264                          
   265                             macro RAM_X_POINTS_TO_INDEXPAGE
   266                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   267                                and  F, ~FLAG_PGMODE_01b
   268                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   269  3D73                       endm
   270                          
   271                             ;-----------------------------------------------
   272                             ;  Function Prologue
   273                             ;-----------------------------------------------
   274                             ;
   275                             ;  Prologue for functions that run in the LMM and SMM.
   276                             ;
   277                          
   278                             macro RAM_PROLOGUE( ACTUAL_CLASS )
   279                          
   280                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   281                             ; Nothing to do
   282                             ENDIF ; RAM_USE_CLASS_1
   283                          
   284                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   285                                IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   286                                   RAM_X_POINTS_TO_STACKPAGE         ; exit native paging mode!
   287                                ENDIF
   288                             ENDIF ; RAM_USE_CLASS_2
   289                          
   290                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   291                                IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   292                                   RAM_X_POINTS_TO_INDEXPAGE         ; exit native paging mode!
   293                                ENDIF
   294                             ENDIF ; RAM_USE_CLASS_3
   295                          
   296                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   297                             ; Nothing to do
   298                             ENDIF ; RAM_USE_CLASS_4
   299                          
   300  3D73                       endm
   301                          
   302                             ;-----------------------------------------------
   303                             ;  Function Epilogue
   304                             ;-----------------------------------------------
   305                             ;
   306                             ;  Prologue for functions that run in the LMM and SMM.
   307                             ;
   308                          
   309                             macro RAM_EPILOGUE( ACTUAL_CLASS )
   310                          
   311                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   312                             ; Nothing to do
   313                             ENDIF ; RAM_USE_CLASS_1
   314                          
   315                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   316                                RAM_RESTORE_NATIVE_PAGING
   317                             ENDIF ; RAM_USE_CLASS_2
   318                          
   319                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   320                                RAM_RESTORE_NATIVE_PAGING
   321                             ENDIF ; RAM_USE_CLASS_3
   322                          
   323                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   324                             ; Nothing to do
   325                             ENDIF ; RAM_USE_CLASS_4
   326                          
   327  3D73                       endm
   328                          
   329                             ;-----------------------------------------------
   330                             ;  Preserve Register
   331                             ;-----------------------------------------------
   332                             ;
   333                             ;  DESC: Preserve a register value on the stack
   334                             ;
   335                             ; INPUT: Name or address of register in I/O Space
   336                             ;        The I/O bank is an implicit parameter. That is, this function will
   337                             ;        Access the I/O bank currently specified by the CPU Flag register.
   338                             ;
   339                             ;  USES: CPU 'A' register
   340                             ;
   341                             ;  COST: 9 instruction cycles
   342                          
   343                             macro REG_PRESERVE( IOReg )
   344                             mov   A, reg[ @IOReg ]
   345                             push  A
   346  3D73                       endm
   347                          
   348                             ;-----------------------------------------------
   349                             ;  Restore Register
   350                             ;-----------------------------------------------
   351                             ;
   352                             ;  DESC: Restore a register value from the stack
   353                             ;
   354                             ; INPUT: Name or address of register in I/O Space
   355                             ;        The I/O bank is an implicit parameter. That is, this function will
   356                             ;        Access the I/O bank currently specified by the CPU Flag register.
   357                             ;
   358                             ;  USES: CPU 'A' register
   359                             ;
   360                             ;  COST: 10 instruction cycles
   361                          
   362                             macro REG_RESTORE( IOReg )
   363                             pop   A
   364                             mov   reg[ @IOReg ], A
   365  3D73                       endm
   366                          
   367                             ;-----------------------------------------------
   368                             ;  Preserve Volatile Page Pointer Registers
   369                             ;-----------------------------------------------
   370                             ;
   371                             ;  DESC: Invoked by ISRs before switching to the LMM mode and calling
   372                             ;        functions that require on it.
   373                             ;
   374                             ; INPUT: none
   375                             ;
   376                             ;  USES: CPU 'A' register
   377                             ;
   378                             ;  COST: 45 instruction cycles (in LMM only)
   379                          
   380                             macro ISR_PRESERVE_PAGE_POINTERS
   381                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   382                                REG_PRESERVE CUR_PP
   383                                REG_PRESERVE IDX_PP
   384                                REG_PRESERVE MVR_PP
   385                                REG_PRESERVE MVW_PP
   386                             ENDIF
   387  3D73                       endm
   388                          
   389                             ;-----------------------------------------------
   390                             ;  Restore Volatile Page Pointer Registers
   391                             ;-----------------------------------------------
   392                             ;
   393                             ;  DESC: Undo for RAM_PRESERVE_PAGE_POINTERS macro. Invoked by ISRs after
   394                             ;        calling functions that run in the LMM mode and before executing
   395                             ;        the RETI instruction.
   396                             ;
   397                             ; INPUT: none
   398                             ;
   399                             ;  USES: CPU 'A' register
   400                             ;
   401                             ;  COST: 50 instruction cycles (in LMM only)
   402                          
   403                             macro ISR_RESTORE_PAGE_POINTERS
   404                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   405                                REG_RESTORE MVW_PP
   406                                REG_RESTORE MVR_PP
   407                                REG_RESTORE IDX_PP
   408                                REG_RESTORE CUR_PP
   409                             ENDIF
   410  3D73                       endm
     1                          ;  Generated by PSoC Designer 5.4.2946
     2                          ;
     3                          ;@Id: boot.tpl#904 @
     4                          ;=============================================================================
     5                          ;  FILENAME:   boot.asm
     6                          ;  Version:    1.50
     7                          ;
     8                          ;  DESCRIPTION:
     9                          ;  M8C Boot Code for CY8C22x45 microcontroller devices.
    10                          ;
    11                          ;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
    12                          ;
    13                          ; NOTES:
    14                          ; PSoC Designer's Device Editor uses a template file, BOOT.TPL, located in
    15                          ; the project's root directory to create BOOT.ASM. Any changes made to
    16                          ; BOOT.ASM will be  overwritten every time the project is generated; therefore
    17                          ; changes should be made to BOOT.TPL not BOOT.ASM. Care must be taken when
    18                          ; modifying BOOT.TPL so that replacement strings (such as @PROJECT_NAME)
    19                          ; are not accidentally modified.
    20                          ;
    21                          ;=============================================================================
    22                          
    23                          include ".\lib\GlobalParams.inc"	;File generated by PSoC Designer (Project dependent)
    24                          include "m8c.inc"			;Part specific file
    25                          include "m8ssc.inc"			;Part specific file
    26                          include "memory.inc"			;File generated by PSoC Designer (Project dependent)
    27                          
    28                          ;--------------------------------------
    29                          ; Export Declarations
    30                          ;--------------------------------------
    31                          
    32                          export __Start
    33                          IF	(TOOLCHAIN & HITECH)
    34                          ELSE
    35                          export __bss_start
    36                          export __data_start
    37                          export __idata_start
    38                          export __func_lit_start
    39                          export __text_start
    40                          ENDIF
    41                          export  _bGetPowerSetting
    42                          export   bGetPowerSetting
    43                          
    44                          
    45                          ;--------------------------------------
    46                          ; Optimization flags
    47                          ;--------------------------------------
    48                          ;
    49                          ; To change the value of these flags, modify the file boot.tpl, not
    50                          ; boot.asm. See the notes in the banner comment at the beginning of
    51                          ; this file.
    52                          
    53                          ; Optimization for Assembly language (only) projects and C-language projects
    54                          ; that do not depend on the C compiler to initialize the values of RAM variables.
    55                          ;   Set to 1: Support for C Run-time Environment initialization
    56                          ;   Set to 0: Support for C not included. Faster start up, smaller code space.
    57                          ;
    58                          IF	(TOOLCHAIN & HITECH)
    59                          ; The C compiler will customize the startup code - it's not required here
    60                          
    61  0000                    C_LANGUAGE_SUPPORT:              equ 0
    62                          ELSE
    63                          C_LANGUAGE_SUPPORT:              equ 1
    64                          ENDIF
    65                          
    66                          
    67                          ; For historical reasons, by default the boot code uses an lcall instruction
    68                          ; to invoke the user's _main code. If _main executes a return instruction,
    69                          ; boot provides an infinite loop. By changing the following equate from zero
    70                          ; to 1, boot's lcall will be replaced by a ljmp instruction, saving two
    71                          ; bytes on the stack which are otherwise required for the return address. If
    72                          ; this option is enabled, _main must not return. (Beginning with the 4.2
    73                          ; release, the C compiler automatically places an infinite loop at the end
    74                          ; of main, rather than a return instruction.)
    75                          ;
    76  0000                    ENABLE_LJMP_TO_MAIN:             equ 0
    77                          
    78                          ; The following equate is required for proper operation. Reseting its value
    79                          ; is discouraged.  WAIT_FOR_32K is effective only if the crystal oscillator is
    80                          ; selected.  If the designer chooses to not wait then stabilization of the ECO
    81                          ; and PLL_Lock must take place within user code. See the family data sheet for
    82                          ; the requirements of starting the ECO and PLL lock mode.
    83                          ;
    84                          ;   Set to 1: Wait for XTAL (& PLL if selected) to stabilize before
    85                          ;                invoking main
    86                          ;   Set to 0: Boot code does not wait; clock may not have stabilized by
    87                          ;               the time code in main starts executing.
    88                          ;
    89  0001                    WAIT_FOR_32K:                    equ 1
    90                          
    91                          ;-----------------------------------------------------------------------------
    92                          ; Interrupt Vector Table
    93                          ;-----------------------------------------------------------------------------
    94                          ;
    95                          ; Interrupt vector table entries are 4 bytes long.  Each one contains
    96                          ; a jump instruction to an ISR (Interrupt Service Routine), although
    97                          ; very short ISRs could be encoded within the table itself. Normally,
    98                          ; vector jump targets are modified automatically according to the user
    99                          ; modules selected. This occurs when the 'Generate Application' opera-
   100                          ; tion is run causing PSoC Designer to create boot.asm and the other
   101                          ; configuration files. If you need to hard code a vector, update the
   102                          ; file boot.tpl, not boot.asm. See the banner comment at the beginning
   103                          ; of this file.
   104                          ;-----------------------------------------------------------------------------
   105                          
   106                              AREA TOP (ROM, ABS, CON)
   107                          
   108  0000                        org   0                        ;Reset Interrupt Vector
   109                          IF	(TOOLCHAIN & HITECH)
   110                          ;   jmp   __Start                  ;C compiler fills in this vector
   111                          ELSE
   112                              jmp   __Start                  ;First instruction executed following a Reset
   113                          ENDIF
   114                              ;@PSoC_BOOT_ISR_UserCode_START@
   115                              ;---------------------------------------------------
   116                              ; Insert your custom code below this banner
   117                              ;---------------------------------------------------
   118                          
   119  0004                        org   04h                      ;Low Voltage Detect (LVD) Interrupt Vector
   120  0004  30                    halt                           ;Stop execution if power falls too low
   121                          
   122  0008                        org   08h                      ;Analog Column 0 Interrupt Vector
   123                              // call	void_handler
   124  0008  7E                    reti
   125                          
   126  000C                        org   0Ch                      ;Analog Column 1 Interrupt Vector
   127                              // call	void_handler
   128  000C  7E                    reti
   129                          
   130  0010                        org   10h                      ;Analog Column 2 Interrupt Vector
   131                              // call	void_handler
   132  0010  7E                    reti
   133                          
   134  0014                        org   14h                      ;Analog Column 3 Interrupt Vector
   135                              // call	void_handler
   136  0014  7E                    reti
   137                              
   138  0018                        org   18h                      ;VC3 Interrupt Vector
   139                              // call	void_handler
   140  0018  7E                    reti
   141                          
   142  001C                        org   1Ch                      ;GPIO Interrupt Vector
   143                              // call	void_handler
   144  001C  7E                    reti
   145                          
   146  0020                        org   20h                      ;PSoC Block DBC00 Interrupt Vector
   147                              // call	void_handler
   148  0020  7E                    reti
   149                          
   150  0024                        org   24h                      ;PSoC Block DBC01 Interrupt Vector
   151  0024  7C 3C68               lcall _Timer16ISR
   152  0027  7E                    reti
   153                          
   154  0028                        org   28h                      ;PSoC Block DCC02 Interrupt Vector
   155  0028  7D 3008               ljmp	_UART_Sensor_TX_ISR
   156  002B  7E                    reti
   157                          
   158  002C                        org   2Ch                      ;PSoC Block DCC03 Interrupt Vector
   159  002C  7C 3CE6               lcall _SensorUART
   160  002F  7E                    reti
   161                              
   162  0030                        org   30h                      ;PSoC Block DBC10 Interrupt Vector
   163  0030  7D 2C48               ljmp	_PWM8_BL_ISR
   164  0033  7E                    reti
   165                          
   166  0034                        org   34h                      ;PSoC Block DBC11 Interrupt Vector
   167                              // call	void_handler
   168  0034  7E                    reti
   169                          
   170  0038                        org   38h                      ;PSoC Block DCC12 Interrupt Vector
   171  0038  7D 2EB8               ljmp	_UART_Board_TX_ISR
   172  003B  7E                    reti
   173                          
   174  003C                        org   3Ch                      ;PSoC Block DCC13 Interrupt Vector
   175  003C  7C 3BE1               lcall _BoardUART
   176  003F  7E                    reti
   177                          
   178  0050                        org   50h                      ;SARADC Interrupt Vector
   179  0050  7D 2D07               ljmp	_SAR10_ISR
   180  0053  7E                    reti
   181                          
   182  0054                        org   54h                      ;CSD0 Interrupt Vector
   183                              // call	void_handler
   184  0054  7E                    reti
   185                          
   186  0058                        org   58h                      ;CSD1 Interrupt Vector
   187                              // call	void_handler
   188  0058  7E                    reti
   189                          
   190  005C                        org   5Ch                      ;RTC Interrupt Vector
   191                              // call	void_handler
   192  005C  7E                    reti
   193                              
   194  0050                        org 50h                        ;SAR10 Interrupt Vector
   195  0050  7D 2D07               ljmp	_SAR10_ISR
   196  0053  7E                    reti
   197                          
   198  0060                        org   60h                      ;PSoC I2C Interrupt Vector
   199                              // call	void_handler
   200  0060  7E                    reti
   201                          
   202  0064                        org   64h                      ;Sleep Timer Interrupt Vector
   203                              // call	void_handler
   204  0064  7E                    reti
   205                              ;---------------------------------------------------
   206                              ; Insert your custom code above this banner
   207                              ;---------------------------------------------------
   208                              ;@PSoC_BOOT_ISR_UserCode_END@
   209                          
   210                          ;-----------------------------------------------------------------------------
   211                          ;  Start of Execution.
   212                          ;-----------------------------------------------------------------------------
   213                          ;  The Supervisory ROM SWBootReset function has already completed the
   214                          ;  calibrate1 process, loading trim values for 5 volt operation.
   215                          ;
   216                          
   217                          IF	(TOOLCHAIN & HITECH)
   218                           	AREA PD_startup(CODE, REL, CON)
   219                          ELSE
   220                              org 68h
   221                          ENDIF
   222  3F1C                    __Start:
   223                          
   224                              ; initialize SMP values for voltage stabilization, if required,
   225                              ; leaving power-on reset (POR) level at the default (low) level, at
   226                              ; least for now. 
   227                              ;
   228  3F1C  71 10                 M8C_SetBank1
   229  3F1E  62 E3 87              mov   reg[VLT_CR], SWITCH_MODE_PUMP_JUST | LVD_TBEN_JUST | TRIP_VOLTAGE_JUST
   230  3F21  70 EF                 M8C_SetBank0
   231                          
   232  3F23  62 E3 38          M8C_ClearWDTAndSleep			   ; Clear WDT before enabling it.
   233                          IF ( WATCHDOG_ENABLE )             ; WDT selected in Global Params
   234  3F26  41 FF EF              M8C_EnableWatchDog
   235                          ENDIF
   236                          
   237  3F29  43 FE 04              or reg[CPU_SCR1], CPU_SCR1_ECO_ALLOWED ; Allow ECO being enabled
   238                          
   239                              ;---------------------------
   240                              ; Set up the Temporary stack
   241                              ;---------------------------
   242                              ; A temporary stack is set up for the SSC instructions.
   243                              ; The real stack start will be assigned later.
   244                              ;
   245  0080                    _stack_start:          equ 80h
   246  3F2C  50 80                 mov   A, _stack_start          ; Set top of stack to end of used RAM
   247  3F2E  4E                    swap  SP, A                    ; This is only temporary if going to LMM
   248                          
   249                              ;------------------------
   250                              ; Set Power-related Trim 
   251                              ;------------------------
   252  3F2F  62 E3 38          M8C_ClearWDTAndSleep ; Clear WDT before enabling it.
   253                          IF ( POWER_SETTING & POWER_SET_5V0)            ; *** 5.0 Volt operation   ***
   254                           IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
   255                              or  reg[CPU_SCR1], CPU_SCR1_SLIMO
   256                              M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_5V_6MHZ, 1, SSCTBL1_TRIM_BGR_5V
   257                           ENDIF
   258                          ENDIF ; 5.0 V Operation
   259                          
   260                          IF ( POWER_SETTING & POWER_SET_3V3)            ; *** 3.3 Volt operation   ***
   261                           IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
   262                              or  reg[CPU_SCR1], CPU_SCR1_SLIMO
   263                              M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_3V_6MHZ, 1, SSCTBL1_TRIM_BGR_3V
   264                           ELSE                                          ; *** 12MHZ Main Oscillator ***
   265                              M8SSC_SetTableTrims  1, SSCTBL1_TRIM_IMO_3V_24MHZ, SSCTBL1_TRIM_BGR_3V
   266                           ENDIF
   267                          ENDIF ; 3.3 Volt Operation
   268                          
   269                          IF ( POWER_SETTING & POWER_SET_2V7_12MHZ)      ; *** 2.7 Volts / 12MHZ operation ***
   270                              or  reg[CPU_SCR1], CPU_SCR1_SLIMO
   271                              M8SSC_SetTableTrims  2, SSCTBL2_TRIM_IMO_2V_12MHZ, SSCTBL2_TRIM_BGR_2V
   272                          ENDIF ; *** 2.7 Volts / 12MHZ operation ***
   273                          
   274                          IF ( POWER_SETTING & POWER_SET_2V7_6MHZ)       ; *** 2.7 Volts /  6MHZ operation ***
   275                              or  reg[CPU_SCR1], CPU_SCR1_SLIMO
   276                              M8SSC_SetTableTrims  2, SSCTBL2_TRIM_IMO_2V_6MHZ,  SSCTBL2_TRIM_BGR_2V
   277                          ENDIF ; *** 2.7 Volts /  6MHZ operation ***
   278                          
   279  3F32  55 F8 00              mov  [bSSC_KEY1],  0           ; Lock out Flash and Supervisiory operations
   280  3F35  55 F9 00              mov  [bSSC_KEYSP], 0
   281                          
   282                              ;---------------------------------------
   283                              ; Initialize Crystal Oscillator and PLL
   284                              ;---------------------------------------
   285                          IF ( SELECT_32K & WAIT_FOR_32K )
   286                              ; If the user has requested the External Crystal Oscillator (ECO) then turn it
   287                              ; on and wait for it to stabilize and the system to switch over to it. The PLL
   288                              ; is left off.  The SleepTimer period is set to 1 sec to time the wait for
   289                              ; the ECO to stabilize.
   290                              ;
   291                              M8C_SetBank1
   292                              mov   reg[OSC_CR0], (SELECT_32K_JUST | OSC_CR0_SLEEP_1Hz | OSC_CR0_CPU_12MHz)
   293                              M8C_SetBank0
   294                              M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get a full second
   295                              or    reg[INT_MSK0], INT_MSK0_SLEEP   ; Enable latching of SleepTimer interrupt
   296                              mov   reg[INT_VC],   0                ; Clear all pending interrupts
   297                          .WaitFor1s:
   298                              tst   reg[INT_CLR0], INT_MSK0_SLEEP   ; Test the SleepTimer Interrupt Status
   299                              jz   .WaitFor1s                       ; Interrupt will latch but will not dispatch
   300                                                                    ;  since interrupts are not globally enabled
   301                          ELSE ; !( SELECT_32K & WAIT_FOR_32K )
   302                              ; Either no ECO, or waiting for stable clock is to be done in main
   303  3F38  71 10                 M8C_SetBank1
   304  3F3A  62 E0 12              mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | OSC_CR0_CPU_12MHz)
   305  3F3D  70 EF                 M8C_SetBank0
   306  3F3F  62 E3 38              M8C_ClearWDTAndSleep           ; Reset the watch dog
   307                          
   308                          ENDIF ;( SELECT_32K & WAIT_FOR_32K )
   309                          
   310                          IF ( PLL_MODE )
   311                              ; Crystal is now fully operational (assuming WAIT_FOR_32K was enabled).
   312                              ; Now start up PLL if selected, and wait 16 msec for it to stabilize.
   313                              ;
   314                              M8C_SetBank1
   315                              mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_3MHz)
   316                              M8C_SetBank0
   317                              M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get full period
   318                              mov   reg[INT_VC], 0                  ; Clear all pending interrupts
   319                          
   320                          .WaitFor16ms:
   321                              tst   reg[INT_CLR0],INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
   322                              jz   .WaitFor16ms
   323                              M8C_SetBank1                          ; continue boot at CPU Speed of SYSCLK/2
   324                              mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_12MHz)
   325                              M8C_SetBank0
   326                          
   327                          IF      ( WAIT_FOR_32K )
   328                          ELSE ; !( WAIT_FOR_32K )
   329                              ; Option settings (PLL-Yes, ECO-No) are incompatible - force a syntax error
   330                              ERROR_PSoC Disabling WAIT_FOR_32K requires that the PLL_Lock must be enabled in user code.
   331                          ENDIF ;(WAIT_FOR_32K)
   332                          ENDIF ;(PLL_MODE)
   333                          
   334                          	;-------------------------------------------------------
   335                              ; Initialize Proper Drive Mode for External Clock Pin
   336                              ;-------------------------------------------------------
   337                          
   338                              ; Change EXTCLK pin from Hi-Z Analog (110b) drive mode to Hi-Z (010b) drive mode
   339                          
   340                          IF (SYSCLK_SOURCE)
   341                              and reg[PRT1DM2],  ~0x10        ; Clear bit 4 of EXTCLK pin's DM2 register 
   342                          ENDIF
   343                              ; EXTCLK pin is now in proper drive mode to input the external clock signal
   344                          
   345                          IF	(TOOLCHAIN & HITECH)
   346                              ;---------------------------------------------
   347                              ; HI-TECH initialization: Enter the Large Memory Model, if applicable
   348                              ;---------------------------------------------
   349                          	global		__Lstackps
   350  3F42  50 00             	mov     a,low __Lstackps
   351  3F44  4E                	swap    a,sp
   352                          
   353                          IF ( SYSTEM_LARGE_MEMORY_MODEL )
   354  3F45  62 D1 03              RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
   355  3F48  62 D3 03              RAM_SETPAGE_IDX2STK            ; initialize other page pointers
   356  3F4B  62 D0 00              RAM_SETPAGE_CUR 0
   357  3F4E  62 D5 00              RAM_SETPAGE_MVW 0
   358  3F51  62 D4 00              RAM_SETPAGE_MVR 0
   359                              IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
   360                                or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
   361                              ELSE
   362  3F54  71 80                   or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
   363                              ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
   364                          ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   365                          ELSE
   366                              ;---------------------------------------------
   367                              ; ImageCraft Enter the Large Memory Model, if applicable
   368                              ;---------------------------------------------
   369                          IF ( SYSTEM_LARGE_MEMORY_MODEL )
   370                              RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
   371                              mov   A, SYSTEM_STACK_BASE_ADDR        ;   and offset, if any
   372                              swap  A, SP
   373                              RAM_SETPAGE_IDX2STK            ; initialize other page pointers
   374                              RAM_SETPAGE_CUR 0
   375                              RAM_SETPAGE_MVW 0
   376                              RAM_SETPAGE_MVR 0
   377                          
   378                            IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
   379                              or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
   380                            ELSE
   381                              or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
   382                            ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
   383                          ELSE
   384                              mov   A, __ramareas_end        ; Set top of stack to end of used RAM
   385                              swap  SP, A
   386                          ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   387                          ENDIF ;	TOOLCHAIN
   388                          
   389                              ;@PSoC_BOOT_LOADCFG_UserCode_START@
   390                              ;---------------------------------------------------
   391                              ; Insert your custom code below this banner
   392                              ;---------------------------------------------------
   393                          
   394                              ;---------------------------------------------------
   395                              ; Insert your custom code above this banner
   396                              ;---------------------------------------------------
   397                              ;@PSoC_BOOT_LOADCFG_UserCode_END@ 
   398                          
   399                              ;-------------------------
   400                              ; Load Base Configuration
   401                              ;-------------------------
   402                              ; Load global parameter settings and load the user modules in the
   403                              ; base configuration. Exceptions: (1) Leave CPU Speed fast as possible
   404                              ; to minimize start up time; (2) We may still need to play with the
   405                              ; Sleep Timer.
   406                              ;
   407  3F56  7C 29C5               lcall LoadConfigInit
   408                          
   409                              ;-----------------------------------
   410                              ; Initialize C Run-Time Environment
   411                              ;-----------------------------------
   412                          IF ( C_LANGUAGE_SUPPORT )
   413                          IF ( SYSTEM_SMALL_MEMORY_MODEL )
   414                              mov  A,0                           ; clear the 'bss' segment to zero
   415                              mov  [__r0],<__bss_start
   416                          BssLoop:
   417                              cmp  [__r0],<__bss_end
   418                              jz   BssDone
   419                              mvi  [__r0],A
   420                              jmp  BssLoop
   421                          BssDone:
   422                              mov  A,>__idata_start              ; copy idata to data segment
   423                              mov  X,<__idata_start
   424                              mov  [__r0],<__data_start
   425                          IDataLoop:
   426                              cmp  [__r0],<__data_end
   427                              jz   C_RTE_Done
   428                              push A
   429                              romx
   430                              mvi  [__r0],A
   431                              pop  A
   432                              inc  X
   433                              adc  A,0
   434                              jmp  IDataLoop
   435                          
   436                          ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
   437                          
   438                          IF ( SYSTEM_LARGE_MEMORY_MODEL )
   439                              mov   reg[CUR_PP], >__r0           ; force direct addr mode instructions
   440                                                                 ; to use the Virtual Register page.
   441                          
   442                              ; Dereference the constant (flash) pointer pXIData to access the start
   443                              ; of the extended idata area, "xidata." Xidata follows the end of the
   444                              ; text segment and may have been relocated by the Code Compressor.
   445                              ;
   446                              mov   A, >__pXIData                ; Get the address of the flash
   447                              mov   X, <__pXIData                ;   pointer to the xidata area.
   448                              push  A
   449                              romx                               ; get the MSB of xidata's address
   450                              mov   [__r0], A
   451                              pop   A
   452                              inc   X
   453                              adc   A, 0
   454                              romx                               ; get the LSB of xidata's address
   455                              swap  A, X
   456                              mov   A, [__r0]                    ; pXIData (in [A,X]) points to the
   457                                                                 ;   XIData structure list in flash
   458                              jmp   .AccessStruct
   459                          
   460                              ; Unpack one element in the xidata "structure list" that specifies the
   461                              ; values of C variables. Each structure contains 3 member elements.
   462                              ; The first is a pointer to a contiguous block of RAM to be initial-
   463                              ; ized. Blocks are always 255 bytes or less in length and never cross
   464                              ; RAM page boundaries. The list terminates when the MSB of the pointer
   465                              ; contains 0xFF. There are two formats for the struct depending on the
   466                              ; value in the second member element, an unsigned byte:
   467                              ; (1) If the value of the second element is non-zero, it represents
   468                              ; the 'size' of the block of RAM to be initialized. In this case, the
   469                              ; third member of the struct is an array of bytes of length 'size' and
   470                              ; the bytes are copied to the block of RAM.
   471                              ; (2) If the value of the second element is zero, the block of RAM is
   472                              ; to be cleared to zero. In this case, the third member of the struct
   473                              ; is an unsigned byte containing the number of bytes to clear.
   474                          
   475                          .AccessNextStructLoop:
   476                              inc   X                            ; pXIData++
   477                              adc   A, 0
   478                          .AccessStruct:                         ; Entry point for first block
   479                              ;
   480                              ; Assert: pXIData in [A,X] points to the beginning of an XIData struct.
   481                              ;
   482                              M8C_ClearWDT                       ; Clear the watchdog for long inits
   483                              push  A
   484                              romx                               ; MSB of RAM addr (CPU.A <- *pXIData)
   485                              mov   reg[MVW_PP], A               ;   for use with MVI write operations
   486                              inc   A                            ; End of Struct List? (MSB==0xFF?)
   487                              jz    .C_RTE_WrapUp                ;   Yes, C runtime environment complete
   488                              pop   A                            ; restore pXIData to [A,X]
   489                              inc   X                            ; pXIData++
   490                              adc   A, 0
   491                              push  A
   492                              romx                               ; LSB of RAM addr (CPU.A <- *pXIData)
   493                              mov   [__r0], A                    ; RAM Addr now in [reg[MVW_PP],[__r0]]
   494                              pop   A                            ; restore pXIData to [A,X]
   495                              inc   X                            ; pXIData++ (point to size)
   496                              adc   A, 0
   497                              push  A
   498                              romx                               ; Get the size (CPU.A <- *pXIData)
   499                              jz    .ClearRAMBlockToZero         ; If Size==0, then go clear RAM
   500                              mov   [__r1], A                    ;             else downcount in __r1
   501                              pop   A                            ; restore pXIData to [A,X]
   502                          
   503                          .CopyNextByteLoop:
   504                              ; For each byte in the structure's array member, copy from flash to RAM.
   505                              ; Assert: pXIData in [A,X] points to previous byte of flash source;
   506                              ;         [reg[MVW_PP],[__r0]] points to next RAM destination;
   507                              ;         __r1 holds a non-zero count of the number of bytes remaining.
   508                              ;
   509                              inc   X                            ; pXIData++ (point to next data byte)
   510                              adc   A, 0
   511                              push  A
   512                              romx                               ; Get the data value (CPU.A <- *pXIData)
   513                              mvi   [__r0], A                    ; Transfer the data to RAM
   514                              tst   [__r0], 0xff                 ; Check for page crossing
   515                              jnz   .CopyLoopTail                ;   No crossing, keep going
   516                              mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
   517                              inc   A
   518                              mov   reg[ MVW_PP], A
   519                          .CopyLoopTail:
   520                              pop   A                            ; restore pXIData to [A,X]
   521                              dec   [__r1]                       ; End of this array in flash?
   522                              jnz   .CopyNextByteLoop            ;   No,  more bytes to copy
   523                              jmp   .AccessNextStructLoop        ;   Yes, initialize another RAM block
   524                          
   525                          .ClearRAMBlockToZero:
   526                              pop   A                            ; restore pXIData to [A,X]
   527                              inc   X                            ; pXIData++ (point to next data byte)
   528                              adc   A, 0
   529                              push  A
   530                              romx                               ; Get the run length (CPU.A <- *pXIData)
   531                              mov   [__r1], A                    ; Initialize downcounter
   532                              mov   A, 0                         ; Initialize source data
   533                          
   534                          .ClearRAMBlockLoop:
   535                              ; Assert: [reg[MVW_PP],[__r0]] points to next RAM destination and
   536                              ;         __r1 holds a non-zero count of the number of bytes remaining.
   537                              ;
   538                              mvi   [__r0], A                    ; Clear a byte
   539                              tst   [__r0], 0xff                 ; Check for page crossing
   540                              jnz   .ClearLoopTail               ;   No crossing, keep going
   541                              mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
   542                              inc   A
   543                              mov   reg[ MVW_PP], A
   544                              mov   A, 0                         ; Restore the zero used for clearing
   545                          .ClearLoopTail:
   546                              dec   [__r1]                       ; Was this the last byte?
   547                              jnz   .ClearRAMBlockLoop           ;   No,  continue
   548                              pop   A                            ;   Yes, restore pXIData to [A,X] and
   549                              jmp   .AccessNextStructLoop        ;        initialize another RAM block
   550                          
   551                          .C_RTE_WrapUp:
   552                              pop   A                            ; balance stack
   553                          
   554                          ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   555                          
   556                          C_RTE_Done:
   557                          
   558                          ENDIF ; C_LANGUAGE_SUPPORT
   559                          
   560                              ;-------------------------------
   561                              ; Voltage Stabilization for SMP
   562                              ;-------------------------------
   563                          
   564                          IF ( POWER_SETTING & POWER_SET_5V0)    ; 5.0V Operation
   565                          IF ( SWITCH_MODE_PUMP ^ 1 )            ; SMP is operational
   566                              ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   567                              ; When using the SMP at 5V, we must wait for Vdd to slew from 3.1V to
   568                              ; 5V before enabling the Precision Power-On Reset (PPOR).
   569                              ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   570                              or   reg[INT_MSK0],INT_MSK0_SLEEP
   571                              M8C_SetBank1
   572                              and   reg[OSC_CR0], ~OSC_CR0_SLEEP
   573                              or    reg[OSC_CR0],  OSC_CR0_SLEEP_512Hz
   574                              M8C_SetBank0
   575                              M8C_ClearWDTAndSleep                   ; Restart the sleep timer
   576                              mov   reg[INT_VC], 0                   ; Clear all pending interrupts
   577                          .WaitFor2ms:
   578                              tst   reg[INT_CLR0], INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
   579                              jz   .WaitFor2ms                       ; Branch fails when 2 msec has passed
   580                          ENDIF ; SMP is operational
   581                          ENDIF ; 5.0V Operation
   582                          
   583                              ;-------------------------------
   584                              ; Set Power-On Reset (POR) Level
   585                              ;-------------------------------
   586                          
   587                              ; This checks for improper selection of CPU voltage and processer speed ratings. If an improper 
                                selection 
   588                              ; is made (in the global resources section of the device editor), a compilation error is created
                                , disallowing
   589                              ; this selection. If the selection is valid, the POR level is then set.
   590                              ; Invalid cases checked: 
   591                              ;   -At 3.3 volt operation, the cpu rate must be at or below 12 MHz
   592                              ;   -At 2.7 volt operation, the cpu rate must be at or below 3 MHz
   593                          
   594                          
   595                          IF (POWER_SETTING & POWER_SET_3V3)		; 3.3V Operation?
   596                           IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** SLIMO = 6MHZ, Do Nothing ***
   597                           ELSE
   598                             IF (CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz)	; Not 24 MHz, Do Nothing...
   599                             ELSE						; Otherwise, 24 MHz is selected... raise error
   600                          	ERROR_PSoC SEE COMMENTS			; Error - cannot use 24 MHz w/ 3.3V operation (Clock <= 12 MHz)
   601                             ENDIF
   602                           ENDIF
   603                          ELSE
   604                          IF (POWER_SETTING & POWER_SET_2V7_12MHZ)	; 2.7V Operation with 12 MHz SLIMO?
   605                             IF(CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz)	; Not 12 MHz, do nothing. ("OSC_CR0_CPU_24MHz" setting is 
                                actually IMO/1)
   606                             ELSE						; Otherwise, 12 MHz is selected... raise error
   607                                ERROR_PSoC SEE COMMENTS			; Error - cannot use 12 MHz w/ 2.7V operation (Clock <= 3 MHz)
   608                             ENDIF;
   609                             IF(CPU_CLOCK_JUST ^ OSC_CR0_CPU_12MHz)	; Not 6 MHz, do nothing. ("OSC_CR0_CPU_12MHz" setting is a
                                ctually IMO/2)
   610                             ELSE						; Otherwise, 6 MHz is selected... raise error
   611                                ERROR_PSoC SEE COMMENTS			; Error - Cannot use 6 MHz w/ 2.7V operation (Clock <= 3 MHz)
   612                             ENDIF;CPU_12MHz
   613                          ELSE
   614                          IF (POWER_SETTING & POWER_SET_2V7_6MHZ)		; 2.7V Operation with 6 MHz SLIMO?
   615                             IF(CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz)	; Not 6 MHz, do nothing. ("OSC_CR0_CPU_24MHz" setting is a
                                ctually IMO/1)
   616                             ELSE						; Otherwise, 6 MHz is selected... raise error
   617                          	ERROR_PSoC SEE COMMENTS			; Error - cannot use 6 MHz w/ 2.7V operation (Clock <= 3 MHz)
   618                             ENDIF
   619                          ENDIF ; 2.7v w/ 6 MHz
   620                          ENDIF ; 2.7v w/ 12 MHz
   621                          ENDIF ; 3.3V w/ 24 MHz
   622                              ;  The writes to the VLT_CR register below include setting the POR to VLT_CR_POR_HIGH, 
   623                              ;  VLT_CR_POR_MID or VLT_CR_POR_LOW. Correctly setting this value is critical to the proper 
   624                              ;  operation of the PSoC. The POR protects the M8C from mis-executing when Vdd falls low. 
   625                              ;  These values should not be changed from the settings here. See Section "POR and LVD" of 
   626                              ;  Technical Reference Manual #001-48461 for more information.
   627                          
   628  3F59  71 10                 M8C_SetBank1
   629                          
   630                          IF (POWER_SETTING & POWER_SET_2V7)             ; 2.7V Operation?
   631                                                                         ;  Yes, lowest trip already set
   632                          ELSE                                           ;   No, must adjust POR...
   633                          IF (POWER_SETTING & POWER_SET_3V3)             ; 3.3V Operation?
   634                              or   reg[VLT_CR], VLT_CR_POR_MID           ;   Yes, change to midpoint trip
   635                          ELSE
   636                          IF (POWER_SETTING & POWER_SET_5V0)             ; 5.0V Operation?
   637                           IF (POWER_SETTING & POWER_SET_SLOW_IMO)       ; and Slow Mode?
   638                              or   reg[VLT_CR], VLT_CR_POR_MID           ;   Yes, set to midpoint trip
   639                           ELSE                                          ;    No, fast mode
   640                            IF ( CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz )    ;      As fast as 24MHz?
   641                              or   reg[VLT_CR], VLT_CR_POR_MID           ;         No, change to midpoint trip
   642                            ELSE ; 24HMz                                 ;
   643  3F5B  43 E3 20              or    reg[VLT_CR], VLT_CR_POR_HIGH         ;        Yes, switch to	highest setting
   644                            ENDIF ; 24MHz
   645                           ENDIF ; Slow Mode
   646                          ENDIF ; 5.0V Operation
   647                          ENDIF ; 3.3V Operation
   648                          ENDIF ; 2.7V Operation
   649                          
   650  3F5E  70 EF                 M8C_SetBank0
   651                          
   652                              ;----------------------------
   653                              ; Wrap up and invoke "main"
   654                              ;----------------------------
   655                          
   656                              ; Disable the Sleep interrupt that was used for timing above.  In fact,
   657                              ; no interrupts should be enabled now, so may as well clear the register.
   658                              ;
   659  3F60  62 E0 00              mov  reg[INT_MSK0],0
   660                          
   661                              ; Everything has started OK. Now select requested CPU & sleep frequency.
   662                              ;
   663  3F63  71 10                 M8C_SetBank1
   664  3F65  62 E0 13              mov reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | CPU_CLOCK_JUST)
   665  3F68  43 E2 00              or  reg[OSC_CR2], (SLEEP_TIMER_JUST2)
   666  3F6B  70 EF                 M8C_SetBank0
   667                          
   668                              ; Global Interrupt are NOT enabled, this should be done in main().
   669                              ; LVD is set but will not occur unless Global Interrupts are enabled.
   670                              ; Global Interrupts should be enabled as soon as possible in main().
   671                              ;
   672  3F6D  62 E2 00              mov  reg[INT_VC],0             ; Clear any pending interrupts which may
   673                                                             ; have been set during the boot process.
   674                          IF	(TOOLCHAIN & HITECH)
   675  3F70  7D 3F76           	ljmp  startup                  ; Jump to C compiler startup code
   676                          ELSE
   677                          IF ENABLE_LJMP_TO_MAIN
   678                              ljmp  _main                    ; goto main (no return)
   679                          ELSE
   680                              lcall _main                    ; call main
   681                          .Exit:
   682                              jmp  .Exit                     ; Wait here after return till power-off or reset
   683                          ENDIF
   684                          ENDIF ; TOOLCHAIN
   685                          
   686                              ;---------------------------------
   687                              ; Library Access to Global Parms
   688                              ;---------------------------------
   689                              ;
   690  3F73                     bGetPowerSetting:
   691  3F73                    _bGetPowerSetting:
   692                              ; Returns value of POWER_SETTING in the A register.
   693                              ; No inputs. No Side Effects.
   694                              ;
   695                          IF (POWER_SETTING & POWER_SET_2V7)
   696                              mov   A, POWER_SETTING | POWER_SET_SLOW_IMO
   697                          ELSE
   698  3F73  50 10                 mov   A, POWER_SETTING          ; Supply voltage and internal main osc
   699                          ENDIF
   700  3F75  7F                    ret
HI-TECH Software Macro Assembler (PSoC MCU) V9.61
Symbol Table                                                                                               Thu Jul 09 11:34:34 2015
           SELECT_32K_JUST 0000                  __Lstackps 0300          C_LANGUAGE_SUPPORT 0000                 _Timer16ISR 3C68  
             POWER_SET_2V7 0006               POWER_SET_3V3 0008               POWER_SETTING 0010               POWER_SET_5V0 0010  
               _SensorUART 3CE6            SLEEP_TIMER_JUST 0010                    CPU_SCR0 00FF                    CPU_SCR1 00FE  
          bGetPowerSetting 3F73                    INT_MSK0 00E0          POWER_SET_2V7_6MHZ 0002                    PLL_MODE 0000  
                    HITECH 0002             FLAG_PGMODE_10b 0080                      IDX_PP 00D3                      CUR_PP 00D0  
                    INT_VC 00E2              CPU_CLOCK_JUST 0003                      MVR_PP 00D4                      MVW_PP 00D5  
         _bGetPowerSetting 3F73                WAIT_FOR_32K 0001                      STK_PP 00D1               LVD_TBEN_JUST 0000  
                    VLT_CR 00E3             VLT_CR_POR_HIGH 0020       SWITCH_MODE_PUMP_JUST 0080           SLEEP_TIMER_JUST2 0000  
              _stack_start 0080                _PWM8_BL_ISR 2C48                  _SAR10_ISR 2D07   SYSTEM_LARGE_MEMORY_MODEL 0001  
       POWER_SET_2V7_12MHZ 0004      SYSTEM_MULTIPAGE_STACK 0000          POWER_SET_SLOW_IMO 0001               PLL_MODE_JUST 0000  
                 TOOLCHAIN 0002            SWITCH_MODE_PUMP 0001               SYSCLK_SOURCE 0000                     OSC_CR0 00E0  
                   OSC_CR2 00E2                     RES_WDT 00E3          CPU_SCR0_PORS_MASK 0010             WATCHDOG_ENABLE 0001  
        _UART_Board_TX_ISR 2EB8                  bSSC_KEYSP 00F9        CPU_SCR1_ECO_ALLOWED 0004              LoadConfigInit 29C5  
       _UART_Sensor_TX_ISR 3008                     __Start 3F1C                  _BoardUART 3BE1                   bSSC_KEY1 00F8  
         OSC_CR0_CPU_12MHz 0002           OSC_CR0_CPU_24MHz 0003                     startup 3F76           SYSTEM_STACK_PAGE 0003  
             FLAG_XIO_MASK 0010                  SELECT_32K 0000           TRIP_VOLTAGE_JUST 0007  SYSTEM_IDXPG_TRACKS_STK_PP 0000  
HI-TECH Software Macro Assembler (PSoC MCU) V9.61
                                                                                                           Thu Jul 09 16:18:16 2015
     1                          
     2                          	; HI-TECH C COMPILER (Cypress PSOC) V9.61
     3                          	; Copyright (C) 1984-2008 HI-TECH Software
     4                          	;Serial no. HCPSOC-679591
     5                          
     6                          	; Auto-generated runtime startup code for final link stage.
     7                          
     8                          	;
     9                          	; Compiler options:
    10                          	;
    11                          	; --asmlist --errformat --chip=CY8C22345 --WARN=0 --OPT=asm,9 \
    12                          	; -OLCD_display -Moutput/LCD_display.mp --OUTDIR=./output \
    13                          	; ./obj/boot.obj ./obj/boardcommunication.p1 ./obj/ht1621b.p1 \
    14                          	; ./obj/humichipii.p1 ./obj/lcd.p1 ./obj/main.p1 \
    15                          	; ./obj/particlesensor.p1 ./obj/si7020.p1 ./obj/software_iic.p1 \
    16                          	; lib/libpsoc.lib lib/libpsoc.lpp \
    17                          	; D:/Cypress/PSOCDE~1/5.4/Common/CY110F~1/tools/lib/CY8C22045/cms.lib
    18                          	;
    19                          
    20                          
    21                          	processor	CY8C22345
    22                          	macro	M8C_ClearWDT
    23                          	mov reg[0xE3],0x38
    24  300A                    	endm
    25                          
    26                          	psect	PD_startup,class=CODE
    27                          	psect	init,class=CODE
    28                          	psect	end_init,class=CODE
    29                          	psect	powerup,class=CODE
    30                          	psect	vectors,ovrld,class=CODE
    31                          	psect	text,class=CODE
    32                          	psect	maintext,class=CODE
    33                          	psect	intrtext,class=CODE
    34                          	psect	fnauto,class=RAM,space=1
    35                          	psect	bss,class=RAM,space=1
    36                          	psect	InterruptRAM,class=RAM,space=1
    37                          	psect	cdata,class=ROM,space=0,reloc=256
    38                          	psect	psoc_config,class=ROM
    39                          	psect	UserModules,class=ROM
    40                          	psect	strings,class=ROM
    41                          	psect	SSCParmBlk,abs,ovrld,class=RAM,space=1
    42  00F8                    	org	0xF8
    43  00F8                    	blk	8
    44                          
    45                          	psect	stackps,class=RAM
    46                          	global	__Lstackps, __stack_start__
    47  0300                    __stack_start__:
    48                          	psect	bss0,class=RAM,space=1
    49                          	psect	nvram0,class=RAM,space=1
    50                          	psect	rbit0,bit,class=RAM,space=1
    51                          	psect	nvbit0,bit,class=RAM,space=1
    52                          	psect	ramdata0,class=RAM,space=1
    53                          	psect	romdata0,class=BANKROM,space=0
    54                          	psect	bss1,class=RAM,space=1
    55                          	psect	nvram1,class=RAM,space=1
    56                          	psect	rbit1,bit,class=RAM,space=1
    57                          	psect	nvbit1,bit,class=RAM,space=1
    58                          	psect	ramdata1,class=RAM,space=1
    59                          	psect	romdata1,class=BANKROM,space=0
    60                          	psect	bss2,class=RAM,space=1
    61                          	psect	nvram2,class=RAM,space=1
    62                          	psect	rbit2,bit,class=RAM,space=1
    63                          	psect	nvbit2,bit,class=RAM,space=1
    64                          	psect	ramdata2,class=RAM,space=1
    65                          	psect	romdata2,class=BANKROM,space=0
    66                          	psect	bss3,class=RAM,space=1
    67                          	psect	nvram3,class=RAM,space=1
    68                          	psect	rbit3,bit,class=RAM,space=1
    69                          	psect	nvbit3,bit,class=RAM,space=1
    70                          	psect	ramdata3,class=RAM,space=1
    71                          	psect	romdata3,class=BANKROM,space=0
    72                          
    73                          	global	start,startup,_main
    74                          	global	reset_vec,intlevel0,intlevel1,intlevel2
    75  0003                    intlevel0:
    76  0003                    intlevel1:
    77  0003                    intlevel2:		; for C funcs called from assembler
    78                          
    79                          	fnconf	fnauto,??,?
    80                          	fnroot	_main
    81  006C                    TMP_DR0	equ	108
    82  006D                    TMP_DR1	equ	109
    83  006E                    TMP_DR2	equ	110
    84  006F                    TMP_DR3	equ	111
    85  00D0                    CUR_PP	equ	208
    86  00D1                    STK_PP	equ	209
    87  00D3                    IDX_PP	equ	211
    88  00D4                    MVR_PP	equ	212
    89  00D5                    MVW_PP	equ	213
    90  00F7                    CPU_F	equ	247
    91                          	psect	vectors
    92  0000                    reset_vec:
    93  0000                    start:
    94                          	global	__Start
    95  0000  7D 3F1C           	ljmp	__Start
    96                          
    97                          	psect	init
    98  3F76                    startup:
    99  3F76  62 E3 38          	M8C_ClearWDT
   100  3F79  71 80             	or	f, 0x80	;select multiple RAM page mode
   101  3F7B  70 BF             	and	f, 0xBF
   102                          
   103                          ;	Clear uninitialized variables in bank 0
   104                          	global	__Lbss0
   105  3F7D  62 D1 00          	mov	reg[STK_PP],0
   106  3F80  50 00             	mov	a,low __Lbss0
   107  3F82  4E                	swap	a,sp
   108  3F83  50 00             	mov	a,0
   109  3F85  57 83             	mov	x,131
   110  3F87                    bssloop0:
   111  3F87  08                	push	a
   112  3F88  79                	dec	x
   113  3F89  BFFD              	jnz	bssloop0
   114                          
   115                          ;	Copy initialized data into bank 0
   116                          	global	__Lromdata0,__Lramdata0
   117  3F8B  57 65             	mov	x,low __Lromdata0
   118  3F8D  50 83             	mov	a,low __Lramdata0
   119  3F8F  4E                	swap	a,sp
   120  3F90                    dataloop0:
   121  3F90  50 00             	mov	a,high __Lromdata0
   122  3F92  28                	romx
   123  3F93  08                	push	a
   124  3F94  75                	inc	x
   125  3F95  5B                		mov	a,x
   126  3F96  39 6D             cmp	a,low (__Lromdata0+8)
   127  3F98  BFF7              	jnz	dataloop0
   128  3F9A  62 D0 00          	mov	reg[CUR_PP],0
   129  3F9D  62 D1 03          	mov	reg[STK_PP],3
   130  3FA0  50 00             	mov	a,low __Lstackps
   131  3FA2  4E                	swap	a,sp
   132                          
   133  3FA3  7D 3D73           	ljmp	_main
HI-TECH Software Macro Assembler (PSoC MCU) V9.61
Symbol Table                                                                                               Thu Jul 09 16:18:16 2015
    __Lramdata0 0083       __Lstackps 0300      __Lromdata0 0065            _main 3D73            start 0000        dataloop0 3F90  
         CUR_PP 00D0           STK_PP 00D1        intlevel0 0003        intlevel1 0003        intlevel2 0003        reset_vec 0000  
       bssloop0 3F87          __Lbss0 0000          __Start 3F1C          startup 3F76  __stack_start__ 0300  
