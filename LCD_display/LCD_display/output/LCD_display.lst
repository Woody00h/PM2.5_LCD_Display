

HI-TECH Software Macro Assembler (PSoC MCU) V9.61
                                                                                                           Fri Jun 12 10:41:26 2015


     1                          	opt	pw 132
     2                          	psect	text,global,class=CODE,delta=1
     3                          	psect	maintext,global,class=CODE,delta=1
     4                          	psect	ramdata0,global,class=RAM,space=1,delta=1
     5                          	psect	romdata0,global,class=BANKROM,delta=1
     6                          	psect	cdata,global,reloc=256,class=ROM,delta=1
     7                          	psect	bss0,global,class=RAM,space=1,delta=1
     8                          	psect	strings,global,reloc=256,class=ROM,delta=1
     9                          
    10                          	psect	text
    11  006C                    TMP_DR0	equ	108
    12  006D                    TMP_DR1	equ	109
    13  006E                    TMP_DR2	equ	110
    14  006F                    TMP_DR3	equ	111
    15  00D0                    CUR_PP	equ	208
    16  00D1                    STK_PP	equ	209
    17  00D3                    IDX_PP	equ	211
    18  00D4                    MVR_PP	equ	212
    19  00D5                    MVW_PP	equ	213
    20  00E8                    MUL0_X	equ	232
    21  00E9                    MUL0_Y	equ	233
    22  00EA                    MUL0_DH	equ	234
    23  00EB                    MUL0_DL	equ	235
    24  00A8                    MUL1_X	equ	168
    25  00A9                    MUL1_Y	equ	169
    26  00AA                    MUL1_DH	equ	170
    27  00AB                    MUL1_DL	equ	171
    28                          ;stack_size is 28 bss 90
    29                          ; Stacksize: 28; Bank 0 TOTAL: 125 (0x7D); Other banks TOTAL: 0 (0x0)
    30  0061                    main@ret	equ	??_main
    31  0063                    FrameCheck@checksum	equ	??_FrameCheck
    32  0065                    FrameCheck@i	equ	??_FrameCheck+2
    33  0063                    Si7020Init@my_data	equ	??_Si7020Init
    34  0063                    Si7020Read_RH_NHM@buffer	equ	??_Si7020Read_RH_NHM
    35  0064                    Si7020Read_RH_NHM@ret	equ	??_Si7020Read_RH_NHM+1
    36  0063                    Si7020CalcRH@data	equ	??_Si7020CalcRH
    37  0065                    Si7020CalcRH@temp	equ	??_Si7020CalcRH+2
    38  0069                    Si7020CalcRH@result	equ	??_Si7020CalcRH+6
    39  0063                    Si7020Read_Temp_after_RHM@buffer	equ	??_Si7020Read_Temp_after_RHM
    40  0064                    Si7020Read_Temp_after_RHM@ret	equ	??_Si7020Read_Temp_after_RHM+1
    41  0063                    Si7020CalcTemp@data	equ	??_Si7020CalcTemp
    42  0065                    Si7020CalcTemp@temp	equ	??_Si7020CalcTemp+2
    43  0069                    Si7020CalcTemp@result	equ	??_Si7020CalcTemp+6
    44  0063                    LCDOuputAll@k	equ	??_LCDOuputAll
    45  0065                    WriteAll_1621@p	equ	??_WriteAll_1621
    46  0066                    WriteAll_1621@addr	equ	??_WriteAll_1621+1
    47  0067                    WriteAll_1621@i	equ	??_WriteAll_1621+2
    48  0064                    WriteAll_1621@cnt	equ	?_WriteAll_1621
    49  0063                    LeftRotate@k	equ	??_LeftRotate
    50  0064                    _LeftRotate$3386	equ	??_LeftRotate+1
    51  0076                    ___lmul@product	equ	??___lmul
    52  006E                    ___lmul@multiplier	equ	?___lmul
    53  0072                    ___lmul@multiplicand	equ	?___lmul+4
    54  0070                    ___wmul@multiplier	equ	??___wmul
    55  0072                    ___wmul@product	equ	??___wmul+2
    56  006E                    ___wmul@multiplicand	equ	?___wmul
    57  0064                    DisplayPMxx@pm	equ	??_DisplayPMxx
    58  0066                    DisplayPMxx@temp	equ	??_DisplayPMxx+2
    59  0068                    DisplayPMxx@index	equ	??_DisplayPMxx+4
    60  006A                    DisplayPMxx@k	equ	??_DisplayPMxx+6
    61  0064                    ShowHumiTemp@value	equ	??_ShowHumiTemp
    62  0065                    ShowHumiTemp@temp	equ	??_ShowHumiTemp+1
    63  0066                    ShowHumiTemp@index	equ	??_ShowHumiTemp+2
    64  0064                    ShowLife@life	equ	??_ShowLife
    65  0065                    ShowLife@index	equ	??_ShowLife+1
    66  0066                    ShowLife@temp	equ	??_ShowLife+2
    67  0063                    SendCmd@command	equ	??_SendCmd
    68  0065                    Si7020SendCommand@cmd	equ	??_Si7020SendCommand
    69  0066                    IRcvBytes@s	equ	??_IRcvBytes
    70  0067                    IRcvBytes@sla	equ	??_IRcvBytes+1
    71  0068                    IRcvBytes@i	equ	??_IRcvBytes+2
    72  0065                    IRcvBytes@no	equ	?_IRcvBytes
    73  0068                    SendBit_1621@cnt	equ	??_SendBit_1621
    74  0069                    SendBit_1621@data	equ	??_SendBit_1621+1
    75  006A                    SendBit_1621@i	equ	??_SendBit_1621+2
    76  0067                    ___lbdiv@divisor	equ	??___lbdiv
    77  0068                    ___lbdiv@dividend	equ	??___lbdiv+1
    78  0069                    ___lbdiv@quotient	equ	??___lbdiv+2
    79  006A                    ___lbdiv@counter	equ	??___lbdiv+3
    80  006D                    ___lwmod@dividend	equ	??___lwmod
    81  006F                    ___lwmod@counter	equ	??___lwmod+2
    82  006B                    ___lwmod@divisor	equ	?___lwmod
    83  0068                    SendDataBit_1621@cnt	equ	??_SendDataBit_1621
    84  0069                    SendDataBit_1621@data	equ	??_SendDataBit_1621+1
    85  006A                    SendDataBit_1621@i	equ	??_SendDataBit_1621+2
    86  0069                    abs@a	equ	??_abs
    87  006B                    ___awdiv@dividend	equ	??___awdiv
    88  006D                    ___awdiv@quotient	equ	??___awdiv+2
    89  006F                    ___awdiv@sign	equ	??___awdiv+4
    90  0070                    ___awdiv@counter	equ	??___awdiv+5
    91  0069                    ___awdiv@divisor	equ	?___awdiv
    92  0067                    ___lbmod@divisor	equ	??___lbmod
    93  0068                    ___lbmod@dividend	equ	??___lbmod+1
    94  0069                    ___lbmod@rem	equ	??___lbmod+2
    95  006A                    ___lbmod@counter	equ	??___lbmod+3
    96  006B                    ___awmod@dividend	equ	??___awmod
    97  006D                    ___awmod@sign	equ	??___awmod+2
    98  006E                    ___awmod@counter	equ	??___awmod+3
    99  0069                    ___awmod@divisor	equ	?___awmod
   100  006B                    Ack_I2c@a	equ	??_Ack_I2c
   101  006B                    RcvByte@retc	equ	??_RcvByte
   102  006C                    RcvByte@BitCnt	equ	??_RcvByte+1
   103  006D                    ___lwdiv@dividend	equ	??___lwdiv
   104  006F                    ___lwdiv@quotient	equ	??___lwdiv+2
   105  0071                    ___lwdiv@counter	equ	??___lwdiv+4
   106  006B                    ___lwdiv@divisor	equ	?___lwdiv
   107  0066                    ISendByte@c	equ	??_ISendByte
   108  0067                    ISendByte@sla	equ	??_ISendByte+1
   109  006B                    SendByte@c	equ	??_SendByte
   110  006C                    SendByte@BitCnt	equ	??_SendByte+1
   111  006E                    delay_us@us	equ	??_delay_us
   112  007A                    BoardUART@rxdata	equ	??_BoardUART
   113  007A                    SensorUART@rxdata	equ	??_SensorUART
   114                          ; =============== function _main ends ============
   115  308C                    ___start_of_c_program_code:
   116                          ; *************** function _FrameCheck *****************
   117                          ; Defined at:
   118                          ;		line 80 in file "./particlesensor.c"
   119                          ; Parameters:
   120                          ;		None
   121                          ; Auto variables:
   122                          ;		checksum    	       	type: unsigned int 
   123                          ;		i           	       	type: unsigned char 
   124                          ; Return value:
   125                          ;		type: unsigned char 
   126                          ;		size: 1
   127                          ; Registers used:
   128                          ;		a, x, CUR_PP
   129                          ; Tracked objects:
   130                          ;		On entry : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
   131                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
   132                          ;		Unchanged: MVR_PP MVW_PP 
   133                          ; Data sizes:
   134                          ;		Autos:    3
   135                          ;		Params:   0
   136                          ;		Temp:     3
   137                          ;		Total:    6
   138                          ; This function calls:
   139                          ;		Nothing
   140                          ; This function is called by:
   141                          ;		_main
   142                          ; This function uses a non-reentrant model
   143                          ; 
   144  004D                    __size_of_FrameCheck	equ	__end_of_FrameCheck-_FrameCheck
   145                          ;particlesensor.c: 79: unsigned char FrameCheck(void)
   146                          ;particlesensor.c: 80: {
   147                          ;			CUR_PP=0 XIO=0 PG=2 
   148  308C                    _FrameCheck:
   149                          ;particlesensor.c: 81: unsigned int checksum = 0;
   150  308C  55 63  00         	mov	[??_FrameCheck^0], 0
   151  308F  55 64  00         	mov	[(??_FrameCheck^0+1)], 0
   152                          ;particlesensor.c: 82: unsigned char i = 0;
   153                          ;particlesensor.c: 84: for (i = 0; i < (MyPMSUnion.MyPMFrame.Length+2); i++)
   154  3092  57 00             	mov	x, 0
   155  3094  7D 30A2           	jmp	l155
   156                          ;			CUR_PP=0 XIO=0 
   157  3097                    l152:
   158                          ;particlesensor.c: 85: {
   159                          ;particlesensor.c: 86: checksum += MyPMSUnion.PMRxBuf[i];
   160  3097  62 D3 00          	mov	reg[211], 0
   161  309A  52 00             	mov	a, [x+_MyPMSUnion]
   162  309C  04 64             	add	[(??_FrameCheck^0+1)], a
   163  309E  0E 63  00         	adc	[??_FrameCheck^0], 0
   164  30A1  75                	inc	x
   165                          ;			CUR_PP=0 XIO=0 
   166  30A2                    l155:
   167  30A2  5F 66  02         	mov	[(??_FrameCheck^0+3)], [(_MyPMSUnion+2)^0]
   168  30A5  5F 67  03         	mov	[(??_FrameCheck^0+4)], [(_MyPMSUnion+3)^0]
   169  30A8  06 67  02         	add	[(??_FrameCheck^0+4)], 2
   170  30AB  0E 66  00         	adc	[(??_FrameCheck^0+3)], 0
   171  30AE  5B                	mov	a, x
   172  30AF  53 68             	mov	[(??_FrameCheck^0+5)], a
   173  30B1  51 68             	mov	a, [(??_FrameCheck^0+5)]
   174  30B3  3A 67             	cmp	a, [(??_FrameCheck^0+4)]
   175  30B5  50 00             	mov	a, 0
   176  30B7  1A 66             	sbb	a, [(??_FrameCheck^0+3)]
   177  30B9  CFDD              	jc	l152
   178                          ;			CUR_PP=0 XIO=0 
   179                          ;particlesensor.c: 87: }
   180                          ;particlesensor.c: 89: MyPMSUnion.MyPMFrame.Length = 0;
   181  30BB  55 02  00         	mov	[(_MyPMSUnion+2)^0], 0
   182  30BE  55 03  00         	mov	[((_MyPMSUnion+2)^0+1)], 0
   183                          ;particlesensor.c: 90: MyPMSUnion.MyPMFrame.Head = 0;
   184  30C1  55 00  00         	mov	[_MyPMSUnion^0], 0
   185  30C4  55 01  00         	mov	[(_MyPMSUnion^0+1)], 0
   186                          ;particlesensor.c: 92: if (checksum == MyPMSUnion.MyPMFrame.checksum)
   187  30C7  51 16             	mov	a, [(_MyPMSUnion+22)^0]
   188  30C9  3A 63             	cmp	a, [??_FrameCheck^0]
   189  30CB  B00A              	jnz	l156
   190  30CD  51 17             	mov	a, [((_MyPMSUnion+22)^0+1)]
   191  30CF  3A 64             	cmp	a, [(??_FrameCheck^0+1)]
   192  30D1  B004              	jnz	l156
   193                          ;particlesensor.c: 93: {
   194                          ;particlesensor.c: 94: return 1;
   195  30D3  50 01             	mov	a, 1
   196  30D5  7F                	ret
   197                          ;			CUR_PP=0 XIO=0 
   198  30D6                    l156:
   199                          ;particlesensor.c: 96: else
   200                          ;particlesensor.c: 97: {
   201                          ;particlesensor.c: 109: return 0;
   202  30D6  50 00             	mov	a, 0
   203                          ;particlesensor.c: 110: }
   204                          ;particlesensor.c: 111: }
   205                          ;			CUR_PP=0 XIO=0 
   206  30D8  7F                	ret
   207  30D9                    __end_of_FrameCheck:
   208                          ; =============== function _FrameCheck ends ============
   209                          ; *************** function _LCD_Init *****************
   210                          ; Defined at:
   211                          ;		line 353 in file "./lcd.c"
   212                          ; Parameters:
   213                          ;		None
   214                          ; Auto variables:
   215                          ;		None
   216                          ; Return value:
   217                          ;		type: void 
   218                          ;		size: 0
   219                          ; Registers used:
   220                          ;		CUR_PP
   221                          ; Tracked objects:
   222                          ;		On entry : CUR_PP=0 IDX_PP? XIO=0 PG=2 MVR_PP? MVW_PP? 
   223                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG=2 MVR_PP? MVW_PP? 
   224                          ;		Unchanged: IDX_PP MVR_PP MVW_PP 
   225                          ; Data sizes:
   226                          ;		Autos:    0
   227                          ;		Params:   0
   228                          ;		Temp:     0
   229                          ;		Total:    0
   230                          ; This function calls:
   231                          ;		Nothing
   232                          ; This function is called by:
   233                          ;		_main
   234                          ; This function uses a non-reentrant model
   235                          ; 
   236  001F                    __size_of_LCD_Init	equ	__end_of_LCD_Init-_LCD_Init
   237                          ;lcd.c: 352: void LCD_Init()
   238                          ;lcd.c: 353: {
   239                          ;			CUR_PP=0 XIO=0 PG=2 
   240  30D9                    _LCD_Init:
   241                          ;lcd.c: 354: LifeFlag = 0;
   242  30D9  55 39  00         	mov	[_LifeFlag^0], 0
   243                          ;lcd.c: 355: RH_T_Flag = 1;
   244  30DC  55 41  01         	mov	[_RH_T_Flag^0], 1
   245                          ;lcd.c: 356: mode = 0;
   246  30DF  55 48  00         	mov	[_mode^0], 0
   247                          ;lcd.c: 357: LockStatus = 1;
   248  30E2  55 3A  01         	mov	[_LockStatus^0], 1
   249                          ;lcd.c: 358: Plasma = 1;
   250  30E5  55 3E  01         	mov	[_Plasma^0], 1
   251                          ;lcd.c: 359: Odor = 3;
   252  30E8  55 3B  03         	mov	[_Odor^0], 3
   253                          ;lcd.c: 360: SpeedLvl = 1;
   254  30EB  55 43  01         	mov	[_SpeedLvl^0], 1
   255                          ;lcd.c: 361: PM_Flag = 0;
   256  30EE  55 3D  00         	mov	[_PM_Flag^0], 0
   257                          ;lcd.c: 362: HeapLife = 85;
   258  30F1  55 36  55         	mov	[_HeapLife^0], 85
   259                          ;lcd.c: 363: CarbonLife = 73;
   260  30F4  55 31  49         	mov	[_CarbonLife^0], 73
   261                          ;lcd.c: 364: }
   262                          ;			CUR_PP=0 XIO=0 PG=2 
   263  30F7  7F                	ret
   264  30F8                    __end_of_LCD_Init:
   265                          ; =============== function _LCD_Init ends ============
   266                          ; *************** function _Si7020Init *****************
   267                          ; Defined at:
   268                          ;		line 105 in file "./si7020.c"
   269                          ; Parameters:
   270                          ;		None
   271                          ; Auto variables:
   272                          ;		my_data     	       	type: unsigned char [2]
   273                          ; Return value:
   274                          ;		type: void 
   275                          ;		size: 0
   276                          ; Registers used:
   277                          ;		CUR_PP
   278                          ; Tracked objects:
   279                          ;		On entry : CUR_PP? IDX_PP? XIO=0 PG=2 MVR_PP? MVW_PP? 
   280                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG=2 MVR_PP? MVW_PP? 
   281                          ;		Unchanged: IDX_PP MVR_PP MVW_PP 
   282                          ; Data sizes:
   283                          ;		Autos:    2
   284                          ;		Params:   0
   285                          ;		Temp:     0
   286                          ;		Total:    2
   287                          ; This function calls:
   288                          ;		Nothing
   289                          ; This function is called by:
   290                          ;		_main
   291                          ; This function uses a non-reentrant model
   292                          ; 
   293  000D                    __size_of_Si7020Init	equ	__end_of_Si7020Init-_Si7020Init
   294                          ;si7020.c: 104: void Si7020Init()
   295                          ;si7020.c: 105: {
   296                          ;			XIO=0 PG=2 
   297  30F8                    _Si7020Init:
   298                          ;si7020.c: 106: unsigned char my_data[2];
   299                          ;si7020.c: 107: my_data[0] = 0xE6;
   300  30F8  62 D0 00          	mov	reg[208], 0
   301  30FB  55 63  E6         	mov	[??_Si7020Init^0], 230
   302                          ;si7020.c: 109: ISendStr[0x80,my_data,2];
   303  30FE  55 64  00         	mov	[(??_Si7020Init+1)^0], 0
   304                          ;si7020.c: 110: data_length = 24;
   305  3101  55 47  18         	mov	[_data_length^0], 24
   306                          ;si7020.c: 111: }
   307                          ;			CUR_PP=0 XIO=0 PG=2 
   308  3104  7F                	ret
   309  3105                    __end_of_Si7020Init:
   310                          ; =============== function _Si7020Init ends ============
   311                          ; *************** function _Si7020Read_RH_NHM *****************
   312                          ; Defined at:
   313                          ;		line 18 in file "./si7020.c"
   314                          ; Parameters:
   315                          ;		buffer      	reg:    a	type: PTR unsigned char ; Largest target is 5
   316                          ;		 -> RecBuf(5), 
   317                          ; Auto variables:
   318                          ;		buffer      	       	type: PTR unsigned char ; Largest target is 5
   319                          ;		 -> RecBuf(5), 
   320                          ;		ret         	       	type: unsigned char 
   321                          ; Return value:
   322                          ;		type: void 
   323                          ;		size: 0
   324                          ; Registers used:
   325                          ;		a, x, CUR_PP
   326                          ; Tracked objects:
   327                          ;		On entry : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
   328                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
   329                          ;		Unchanged: MVR_PP MVW_PP 
   330                          ; Data sizes:
   331                          ;		Autos:    2
   332                          ;		Params:   0
   333                          ;		Temp:     0
   334                          ;		Total:    2
   335                          ; This function calls:
   336                          ;		_IRcvBytes
   337                          ; This function is called by:
   338                          ;		_main
   339                          ; This function uses a non-reentrant model
   340                          ; 
   341  001C                    __size_of_Si7020Read_RH_NHM	equ	__end_of_Si7020Read_RH_NHM-_Si7020Read_RH_NHM
   342                          ;si7020.c: 17: void Si7020Read_RH_NHM(unsigned char * buffer)
   343                          ;si7020.c: 18: {
   344                          ;			CUR_PP=0 XIO=0 PG=2 
   345  3105                    _Si7020Read_RH_NHM:
   346                          ;Si7020Read_RH_NHM@buffer stored from a
   347  3105  53 63             	mov	[??_Si7020Read_RH_NHM^0], a
   348                          ;si7020.c: 19: char ret;
   349                          ;si7020.c: 20: IICTimeOutTimer = 2;
   350  3107  55 38  02         	mov	[_IICTimeOutTimer^0], 2
   351                          ;si7020.c: 21: while (1)
   352                          ;			CUR_PP=0 XIO=0 
   353  310A                    l161:
   354                          ;si7020.c: 22: {
   355                          ;si7020.c: 23: ret = IRcvBytes(0x80,buffer,3);
   356  310A  55 65  03         	mov	[?_IRcvBytes^0], 3
   357  310D  50 80             	mov	a, 128
   358  310F  58 63             	mov	x, [??_Si7020Read_RH_NHM^0]
   359  3111  71 80             	or	f, 0x80	;select multiple RAM page mode
   360  3113  7C 3716           	call	_IRcvBytes
   361  3116  53 64             	mov	[(??_Si7020Read_RH_NHM+1)^0], a
   362                          ;si7020.c: 24: if (ret || !IICTimeOutTimer)
   363  3118  51 64             	mov	a, [(??_Si7020Read_RH_NHM+1)^0]
   364  311A  B005              	jnz	l162
   365  311C  51 38             	mov	a, [_IICTimeOutTimer^0]
   366  311E  BFEB              	jnz	l161
   367                          ;			CUR_PP=0 XIO=0 
   368                          ;si7020.c: 25: break;
   369                          ;			CUR_PP=0 XIO=0 
   370                          ;			CUR_PP=0 XIO=0 
   371  3120                    l162:
   372                          ;si7020.c: 26: }
   373                          ;si7020.c: 27: }
   374                          ;			CUR_PP=0 XIO=0 
   375  3120  7F                	ret
   376  3121                    __end_of_Si7020Read_RH_NHM:
   377                          ; =============== function _Si7020Read_RH_NHM ends ============
   378                          ; *************** function _CRC8Check *****************
   379                          ; Defined at:
   380                          ;		line 128 in file "./si7020.c"
   381                          ; Parameters:
   382                          ;		None
   383                          ; Auto variables:
   384                          ;		None
   385                          ; Return value:
   386                          ;		type: unsigned char 
   387                          ;		size: 1
   388                          ; Registers used:
   389                          ;		a, x, CUR_PP
   390                          ; Tracked objects:
   391                          ;		On entry : CUR_PP=0 IDX_PP=0 XIO=0 PG? MVR_PP? MVW_PP? 
   392                          ;		On exit  : CUR_PP=0 IDX_PP=0 XIO=0 PG? MVR_PP? MVW_PP? 
   393                          ;		Unchanged: MVR_PP MVW_PP 
   394                          ; Data sizes:
   395                          ;		Autos:    0
   396                          ;		Params:   0
   397                          ;		Temp:     0
   398                          ;		Total:    0
   399                          ; This function calls:
   400                          ;		_LeftRotate
   401                          ; This function is called by:
   402                          ;		_main
   403                          ; This function uses a non-reentrant model
   404                          ; 
   405  002A                    __size_of_CRC8Check	equ	__end_of_CRC8Check-_CRC8Check
   406                          ;si7020.c: 127: unsigned char CRC8Check()
   407                          ;si7020.c: 128: {
   408                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
   409  3121                    _CRC8Check:
   410                          ;si7020.c: 129: while(1)
   411                          ;			CUR_PP=0 IDX_PP=0 XIO=0 PG=2 
   412  3121                    l182:
   413                          ;si7020.c: 130: {
   414                          ;si7020.c: 131: if(RecBuf[0]&0x80)
   415  3121  3C 55  80         	cmp	[_RecBuf^0], 128
   416  3124  C00F              	jc	l184
   417                          ;si7020.c: 132: {
   418                          ;si7020.c: 133: RecBuf[0] ^= poly_h;
   419  3126  36 55  98         	xor	[_RecBuf^0], 0x98
   420                          ;si7020.c: 134: RecBuf[1] ^= poly_l;
   421  3129  36 56  80         	xor	[(_RecBuf+1)^0], 0x80
   422                          ;si7020.c: 135: LeftRotate();
   423  312C  71 80             	or	f, 0x80	;select multiple RAM page mode
   424  312E  7C 34BD           	call	_LeftRotate
   425                          ;si7020.c: 136: }
   426  3131  7D 3139           	jmp	l185
   427                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
   428  3134                    l184:
   429                          ;si7020.c: 137: else
   430                          ;si7020.c: 138: {
   431                          ;si7020.c: 139: LeftRotate();
   432  3134  71 80             	or	f, 0x80	;select multiple RAM page mode
   433  3136  7C 34BD           	call	_LeftRotate
   434                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
   435  3139                    l185:
   436                          ;si7020.c: 140: }
   437                          ;si7020.c: 142: if(data_length <= 8)
   438  3139  3C 47  09         	cmp	[_data_length^0], 9
   439  313C  DFE4              	jnc	l182
   440                          ;si7020.c: 143: break;
   441                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
   442                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
   443                          ;si7020.c: 144: }
   444                          ;si7020.c: 146: data_length = 24;
   445  313E  55 47  18         	mov	[_data_length^0], 24
   446                          ;si7020.c: 148: if(!RecBuf[0])
   447  3141  51 55             	mov	a, [_RecBuf^0]
   448  3143  B004              	jnz	l187
   449                          ;si7020.c: 149: {
   450                          ;si7020.c: 150: return 1;
   451  3145  50 01             	mov	a, 1
   452  3147  7F                	ret
   453                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
   454  3148                    l187:
   455                          ;si7020.c: 152: else
   456                          ;si7020.c: 153: {
   457                          ;si7020.c: 154: return 0;
   458  3148  50 00             	mov	a, 0
   459                          ;si7020.c: 155: }
   460                          ;si7020.c: 156: }
   461                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
   462  314A  7F                	ret
   463  314B                    __end_of_CRC8Check:
   464                          ; =============== function _CRC8Check ends ============
   465                          ; *************** function _Si7020CalcRH *****************
   466                          ; Defined at:
   467                          ;		line 77 in file "./si7020.c"
   468                          ; Parameters:
   469                          ;		data        	reg:   xa	type: unsigned int 
   470                          ; Auto variables:
   471                          ;		data        	       	type: unsigned int 
   472                          ;		temp        	       	type: unsigned long 
   473                          ;		result      	       	type: unsigned char 
   474                          ; Return value:
   475                          ;		type: unsigned char 
   476                          ;		size: 1
   477                          ; Registers used:
   478                          ;		a, x, CUR_PP, mret
   479                          ; Tracked objects:
   480                          ;		On entry : CUR_PP=0 IDX_PP? XIO=0 PG=2 MVR_PP? MVW_PP? 
   481                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
   482                          ;		Unchanged: IDX_PP MVR_PP MVW_PP 
   483                          ; Data sizes:
   484                          ;		Autos:    7
   485                          ;		Params:   0
   486                          ;		Temp:     0
   487                          ;		Total:    7
   488                          ; This function calls:
   489                          ;		___lmul
   490                          ; This function is called by:
   491                          ;		_main
   492                          ; This function uses a non-reentrant model
   493                          ; 
   494  0093                    __size_of_Si7020CalcRH	equ	__end_of_Si7020CalcRH-_Si7020CalcRH
   495                          ;si7020.c: 76: unsigned char Si7020CalcRH(unsigned int data)
   496                          ;si7020.c: 77: {
   497                          ;			CUR_PP=0 XIO=0 PG=2 
   498  314B                    _Si7020CalcRH:
   499                          ;Si7020CalcRH@data stored from xa
   500  314B  53 64             	mov	[(??_Si7020CalcRH^0+1)], a
   501  314D  5A 63             	mov	[??_Si7020CalcRH^0], x
   502                          ;si7020.c: 78: unsigned long temp;
   503                          ;si7020.c: 79: unsigned char result;
   504                          ;si7020.c: 80: temp = data;
   505  314F  5F 68  64         	mov	[(??_Si7020CalcRH+5)^0], [(??_Si7020CalcRH+1)^0]
   506  3152  5F 67  63         	mov	[(??_Si7020CalcRH+4)^0], [??_Si7020CalcRH^0]
   507  3155  55 66  00         	mov	[(??_Si7020CalcRH+3)^0], 0
   508  3158  55 65  00         	mov	[(??_Si7020CalcRH+2)^0], 0
   509                          ;si7020.c: 81: temp = 125*temp;
   510  315B  5F 6E  65         	mov	[?___lmul^0], [(??_Si7020CalcRH+2)^0]
   511  315E  5F 6F  66         	mov	[(?___lmul+1)^0], [(??_Si7020CalcRH+3)^0]
   512  3161  5F 70  67         	mov	[(?___lmul+2)^0], [(??_Si7020CalcRH+4)^0]
   513  3164  5F 71  68         	mov	[(?___lmul+3)^0], [(??_Si7020CalcRH+5)^0]
   514  3167  55 72  00         	mov	[(?___lmul+4)^0], 0
   515  316A  55 73  00         	mov	[((?___lmul+4)^0+1)], 0
   516  316D  55 74  00         	mov	[((?___lmul+4)^0+2)], 0
   517  3170  55 75  7D         	mov	[((?___lmul+4)^0+3)], 125
   518  3173  7C 34E9           	call	___lmul
   519  3176  5F 65  6E         	mov	[(??_Si7020CalcRH+2)^0], [?___lmul^0]
   520  3179  5F 66  6F         	mov	[(??_Si7020CalcRH+3)^0], [(?___lmul+1)^0]
   521  317C  5F 67  70         	mov	[(??_Si7020CalcRH+4)^0], [(?___lmul+2)^0]
   522  317F  5F 68  71         	mov	[(??_Si7020CalcRH+5)^0], [(?___lmul+3)^0]
   523                          ;si7020.c: 82: temp >>= 16;
   524  3182  50 10             	mov	a, 16
   525  3184  70 FB             	and	f, 0xFB
   526  3186                    u324:
   527  3186  6E 65             	rrc	[(??_Si7020CalcRH+2)^0]
   528  3188  6E 66             	rrc	[((??_Si7020CalcRH+2)^0+1)]
   529  318A  6E 67             	rrc	[((??_Si7020CalcRH+2)^0+2)]
   530  318C  6E 68             	rrc	[((??_Si7020CalcRH+2)^0+3)]
   531  318E  78                	dec	a
   532  318F  BFF6              	jnz	u324
   533                          ;si7020.c: 83: if (temp >= 6)
   534  3191  3C 68  06         	cmp	[((??_Si7020CalcRH+2)^0+3)], 6
   535  3194  51 67             	mov	a, [((??_Si7020CalcRH+2)^0+2)]
   536  3196  19 00             	sbb	a, 0
   537  3198  51 66             	mov	a, [((??_Si7020CalcRH+2)^0+1)]
   538  319A  19 00             	sbb	a, 0
   539  319C  51 65             	mov	a, [(??_Si7020CalcRH+2)^0]
   540  319E  19 00             	sbb	a, 0
   541  31A0  C030              	jc	l170
   542                          ;si7020.c: 84: {
   543                          ;si7020.c: 85: if (temp >= 106)
   544  31A2  3C 68  6A         	cmp	[((??_Si7020CalcRH+2)^0+3)], 106
   545  31A5  51 67             	mov	a, [((??_Si7020CalcRH+2)^0+2)]
   546  31A7  19 00             	sbb	a, 0
   547  31A9  51 66             	mov	a, [((??_Si7020CalcRH+2)^0+1)]
   548  31AB  19 00             	sbb	a, 0
   549  31AD  51 65             	mov	a, [(??_Si7020CalcRH+2)^0]
   550  31AF  19 00             	sbb	a, 0
   551  31B1  C010              	jc	l171
   552                          ;si7020.c: 86: {
   553                          ;si7020.c: 87: temp = 100;
   554  31B3  55 65  00         	mov	[(??_Si7020CalcRH+2)^0], 0
   555  31B6  55 66  00         	mov	[((??_Si7020CalcRH+2)^0+1)], 0
   556  31B9  55 67  00         	mov	[((??_Si7020CalcRH+2)^0+2)], 0
   557  31BC  55 68  64         	mov	[((??_Si7020CalcRH+2)^0+3)], 100
   558                          ;si7020.c: 88: }
   559  31BF  7D 31DB           	jmp	l173
   560                          ;			CUR_PP=0 XIO=0 
   561  31C2                    l171:
   562                          ;si7020.c: 89: else
   563                          ;si7020.c: 90: {
   564                          ;si7020.c: 91: temp -= 6;
   565  31C2  16 68  06         	sub	[((??_Si7020CalcRH+2)^0+3)], 6
   566  31C5  1E 67  00         	sbb	[((??_Si7020CalcRH+2)^0+2)], 0
   567  31C8  1E 66  00         	sbb	[((??_Si7020CalcRH+2)^0+1)], 0
   568  31CB  1E 65  00         	sbb	[(??_Si7020CalcRH+2)^0], 0
   569                          ;			CUR_PP=0 XIO=0 
   570                          ;si7020.c: 92: }
   571                          ;si7020.c: 93: }
   572  31CE  7D 31DB           	jmp	l173
   573                          ;			CUR_PP=0 XIO=0 
   574  31D1                    l170:
   575                          ;si7020.c: 94: else
   576                          ;si7020.c: 95: {
   577                          ;si7020.c: 96: temp = 0;
   578  31D1  50 00             	mov	a, 0
   579  31D3  53 65             	mov	[(??_Si7020CalcRH+2)^0], a
   580  31D5  53 66             	mov	[((??_Si7020CalcRH+2)^0+1)], a
   581  31D7  53 67             	mov	[((??_Si7020CalcRH+2)^0+2)], a
   582  31D9  53 68             	mov	[((??_Si7020CalcRH+2)^0+3)], a
   583                          ;			CUR_PP=0 XIO=0 
   584  31DB                    l173:
   585                          ;si7020.c: 97: }
   586                          ;si7020.c: 99: result = temp;
   587  31DB  51 68             	mov	a, [(??_Si7020CalcRH+5)^0]
   588                          ;si7020.c: 100: return result;
   589                          ;si7020.c: 101: }
   590                          ;			CUR_PP=0 XIO=0 
   591  31DD  7F                	ret
   592  31DE                    __end_of_Si7020CalcRH:
   593                          ; =============== function _Si7020CalcRH ends ============
   594                          ; *************** function _Si7020Read_Temp_after_RHM *****************
   595                          ; Defined at:
   596                          ;		line 33 in file "./si7020.c"
   597                          ; Parameters:
   598                          ;		buffer      	reg:    a	type: PTR unsigned char ; Largest target is 5
   599                          ;		 -> RecBuf(5), 
   600                          ; Auto variables:
   601                          ;		buffer      	       	type: PTR unsigned char ; Largest target is 5
   602                          ;		 -> RecBuf(5), 
   603                          ;		ret         	       	type: unsigned char 
   604                          ; Return value:
   605                          ;		type: unsigned char 
   606                          ;		size: 1
   607                          ; Registers used:
   608                          ;		a, x, CUR_PP
   609                          ; Tracked objects:
   610                          ;		On entry : CUR_PP? IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
   611                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
   612                          ;		Unchanged: MVR_PP MVW_PP 
   613                          ; Data sizes:
   614                          ;		Autos:    2
   615                          ;		Params:   0
   616                          ;		Temp:     0
   617                          ;		Total:    2
   618                          ; This function calls:
   619                          ;		_Si7020SendCommand
   620                          ;		_IRcvBytes
   621                          ; This function is called by:
   622                          ;		_main
   623                          ; This function uses a non-reentrant model
   624                          ; 
   625  0021                    __size_of_Si7020Read_Temp_after_RHM	equ	__end_of_Si7020Read_Temp_after_RHM-_Si7020Read_Temp_after_RH
      +                         M
   626                          ;si7020.c: 32: unsigned char Si7020Read_Temp_after_RHM(unsigned char * buffer)
   627                          ;si7020.c: 33: {
   628                          ;			CUR_PP=0 XIO=0 PG=2 
   629  31DE                    _Si7020Read_Temp_after_RHM:
   630                          ;Si7020Read_Temp_after_RHM@buffer stored from a
   631  31DE  62 D0 00          	mov	reg[208], 0
   632  31E1  53 63             	mov	[??_Si7020Read_Temp_after_RHM^0], a
   633                          ;si7020.c: 34: char ret;
   634                          ;si7020.c: 35: ret = Si7020SendCommand(0xE0);
   635  31E3  50 E0             	mov	a, 224
   636  31E5  7C 370D           	call	_Si7020SendCommand
   637  31E8  53 64             	mov	[(??_Si7020Read_Temp_after_RHM+1)^0], a
   638                          ;si7020.c: 37: if (!ret)
   639  31EA  51 64             	mov	a, [(??_Si7020Read_Temp_after_RHM+1)^0]
   640                          ;si7020.c: 38: {
   641                          ;si7020.c: 39: return 0;
   642                          ;	Return value of _Si7020Read_Temp_after_RHM is never used
   643  31EC  A011              	jz	l164
   644                          ;			CUR_PP=0 XIO=0 
   645                          ;si7020.c: 40: }
   646                          ;si7020.c: 42: ret = IRcvBytes(0x80,buffer,2);
   647  31EE  55 65  02         	mov	[?_IRcvBytes^0], 2
   648  31F1  50 80             	mov	a, 128
   649  31F3  58 63             	mov	x, [??_Si7020Read_Temp_after_RHM^0]
   650  31F5  71 80             	or	f, 0x80	;select multiple RAM page mode
   651  31F7  7C 3716           	call	_IRcvBytes
   652  31FA  53 64             	mov	[(??_Si7020Read_Temp_after_RHM+1)^0], a
   653                          ;si7020.c: 44: if (!ret)
   654  31FC  51 64             	mov	a, [(??_Si7020Read_Temp_after_RHM+1)^0]
   655                          ;si7020.c: 45: {
   656                          ;si7020.c: 46: return 0;
   657                          ;	Return value of _Si7020Read_Temp_after_RHM is never used
   658                          ;			CUR_PP=0 XIO=0 
   659                          ;si7020.c: 47: }
   660                          ;si7020.c: 49: return 1;
   661                          ;	Return value of _Si7020Read_Temp_after_RHM is never used
   662                          ;si7020.c: 50: }
   663  31FE                    l164:
   664                          ;			CUR_PP=0 XIO=0 
   665  31FE  7F                	ret
   666  31FF                    __end_of_Si7020Read_Temp_after_RHM:
   667                          ; =============== function _Si7020Read_Temp_after_RHM ends ============
   668                          ; *************** function _Si7020CalcTemp *****************
   669                          ; Defined at:
   670                          ;		line 57 in file "./si7020.c"
   671                          ; Parameters:
   672                          ;		data        	reg:   xa	type: unsigned int 
   673                          ; Auto variables:
   674                          ;		data        	       	type: unsigned int 
   675                          ;		temp        	       	type: long 
   676                          ;		result      	       	type: char 
   677                          ; Return value:
   678                          ;		type: char 
   679                          ;		size: 1
   680                          ; Registers used:
   681                          ;		a, x, CUR_PP, mret
   682                          ; Tracked objects:
   683                          ;		On entry : CUR_PP=0 IDX_PP? XIO=0 PG=2 MVR_PP? MVW_PP? 
   684                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
   685                          ;		Unchanged: IDX_PP MVR_PP MVW_PP 
   686                          ; Data sizes:
   687                          ;		Autos:    7
   688                          ;		Params:   0
   689                          ;		Temp:     4
   690                          ;		Total:   11
   691                          ; This function calls:
   692                          ;		___lmul
   693                          ;		___wmul
   694                          ; This function is called by:
   695                          ;		_main
   696                          ; This function uses a non-reentrant model
   697                          ; 
   698  00A4                    __size_of_Si7020CalcTemp	equ	__end_of_Si7020CalcTemp-_Si7020CalcTemp
   699                          ;si7020.c: 56: signed char Si7020CalcTemp(unsigned int data)
   700                          ;si7020.c: 57: {
   701                          ;			CUR_PP=0 XIO=0 PG=2 
   702  31FF                    _Si7020CalcTemp:
   703                          ;Si7020CalcTemp@data stored from xa
   704  31FF  53 64             	mov	[(??_Si7020CalcTemp^0+1)], a
   705  3201  5A 63             	mov	[??_Si7020CalcTemp^0], x
   706                          ;si7020.c: 58: signed long temp;
   707                          ;si7020.c: 59: signed char result;
   708                          ;si7020.c: 60: temp = data;
   709  3203  5F 68  64         	mov	[(??_Si7020CalcTemp+5)^0], [(??_Si7020CalcTemp+1)^0]
   710  3206  5F 67  63         	mov	[(??_Si7020CalcTemp+4)^0], [??_Si7020CalcTemp^0]
   711  3209  55 66  00         	mov	[(??_Si7020CalcTemp+3)^0], 0
   712  320C  55 65  00         	mov	[(??_Si7020CalcTemp+2)^0], 0
   713                          ;si7020.c: 61: temp = temp*175;
   714  320F  5F 6E  65         	mov	[?___lmul^0], [(??_Si7020CalcTemp+2)^0]
   715  3212  5F 6F  66         	mov	[(?___lmul+1)^0], [(??_Si7020CalcTemp+3)^0]
   716  3215  5F 70  67         	mov	[(?___lmul+2)^0], [(??_Si7020CalcTemp+4)^0]
   717  3218  5F 71  68         	mov	[(?___lmul+3)^0], [(??_Si7020CalcTemp+5)^0]
   718  321B  55 72  00         	mov	[(?___lmul+4)^0], 0
   719  321E  55 73  00         	mov	[((?___lmul+4)^0+1)], 0
   720  3221  55 74  00         	mov	[((?___lmul+4)^0+2)], 0
   721  3224  55 75  AF         	mov	[((?___lmul+4)^0+3)], 175
   722  3227  7C 34E9           	call	___lmul
   723  322A  5F 65  6E         	mov	[(??_Si7020CalcTemp+2)^0], [?___lmul^0]
   724  322D  5F 66  6F         	mov	[(??_Si7020CalcTemp+3)^0], [(?___lmul+1)^0]
   725  3230  5F 67  70         	mov	[(??_Si7020CalcTemp+4)^0], [(?___lmul+2)^0]
   726  3233  5F 68  71         	mov	[(??_Si7020CalcTemp+5)^0], [(?___lmul+3)^0]
   727                          ;si7020.c: 62: temp += (data>>2)*3;
   728  3236  55 6E  00         	mov	[?___wmul^0], 0
   729  3239  55 6F  03         	mov	[(?___wmul^0+1)], 3
   730  323C  50 02             	mov	a, 2
   731  323E  5F 6A  63         	mov	[(??_Si7020CalcTemp^0+7)], [??_Si7020CalcTemp^0]
   732  3241  5F 6B  64         	mov	[(??_Si7020CalcTemp^0+8)], [(??_Si7020CalcTemp+1)^0]
   733  3244  70 FB             	and	f, 0xFB
   734  3246                    u304:
   735  3246  6E 6A             	rrc	[(??_Si7020CalcTemp^0+7)]
   736  3248  6E 6B             	rrc	[(??_Si7020CalcTemp^0+8)]
   737  324A  78                	dec	a
   738  324B  BFFA              	jnz	u304
   739  324D  51 6B             	mov	a, [(??_Si7020CalcTemp^0+8)]
   740  324F  58 6A             	mov	x, [(??_Si7020CalcTemp^0+7)]
   741  3251  71 80             	or	f, 0x80	;select multiple RAM page mode
   742  3253  7C 3531           	call	___wmul
   743  3256  5A 6C             	mov	[(??_Si7020CalcTemp^0+9)], x
   744  3258  53 6D             	mov	[(??_Si7020CalcTemp^0+10)], a
   745  325A  51 6D             	mov	a, [(??_Si7020CalcTemp^0+10)]
   746  325C  04 68             	add	[((??_Si7020CalcTemp+2)^0+3)], a
   747  325E  51 6C             	mov	a, [(??_Si7020CalcTemp^0+9)]
   748  3260  0C 67             	adc	[((??_Si7020CalcTemp+2)^0+2)], a
   749  3262  50 00             	mov	a, 0
   750  3264  0C 66             	adc	[((??_Si7020CalcTemp+2)^0+1)], a
   751  3266  0C 65             	adc	[(??_Si7020CalcTemp+2)^0], a
   752                          ;si7020.c: 63: temp >>= 16;
   753  3268  50 10             	mov	a, 16
   754  326A                    u314:
   755  326A  68 65             	asr	[(??_Si7020CalcTemp+2)^0]
   756  326C  6E 66             	rrc	[((??_Si7020CalcTemp+2)^0+1)]
   757  326E  6E 67             	rrc	[((??_Si7020CalcTemp+2)^0+2)]
   758  3270  6E 68             	rrc	[((??_Si7020CalcTemp+2)^0+3)]
   759  3272  78                	dec	a
   760  3273  BFF6              	jnz	u314
   761                          ;si7020.c: 64: temp -= 47;
   762  3275  06 68  D1         	add	[((??_Si7020CalcTemp+2)^0+3)], 209
   763  3278  0E 67  FF         	adc	[((??_Si7020CalcTemp+2)^0+2)], 255
   764  327B  0E 66  FF         	adc	[((??_Si7020CalcTemp+2)^0+1)], 255
   765  327E  0E 65  FF         	adc	[(??_Si7020CalcTemp+2)^0], 255
   766                          ;si7020.c: 65: if (temp < -9)
   767  3281  3C 68  F7         	cmp	[((??_Si7020CalcTemp+2)^0+3)], 247
   768  3284  51 67             	mov	a, [((??_Si7020CalcTemp+2)^0+2)]
   769  3286  19 FF             	sbb	a, 255
   770  3288  51 66             	mov	a, [((??_Si7020CalcTemp+2)^0+1)]
   771  328A  19 FF             	sbb	a, 255
   772  328C  51 65             	mov	a, [(??_Si7020CalcTemp+2)^0]
   773  328E  31 80             	xor	a, 0x80
   774  3290  19 7F             	sbb	a, 127
   775  3292  D00D              	jnc	l168
   776                          ;si7020.c: 66: temp = -9;
   777  3294  55 65  FF         	mov	[(??_Si7020CalcTemp+2)^0], 255
   778  3297  55 66  FF         	mov	[((??_Si7020CalcTemp+2)^0+1)], 255
   779  329A  55 67  FF         	mov	[((??_Si7020CalcTemp+2)^0+2)], 255
   780  329D  55 68  F7         	mov	[((??_Si7020CalcTemp+2)^0+3)], 247
   781                          ;			CUR_PP=0 XIO=0 
   782  32A0                    l168:
   783                          ;si7020.c: 68: result = temp;
   784  32A0  51 68             	mov	a, [(??_Si7020CalcTemp+5)^0]
   785                          ;si7020.c: 69: return result;
   786                          ;si7020.c: 70: }
   787                          ;			CUR_PP=0 XIO=0 
   788  32A2  7F                	ret
   789  32A3                    __end_of_Si7020CalcTemp:
   790                          ; =============== function _Si7020CalcTemp ends ============
   791                          ; *************** function _LCDOuputAll *****************
   792                          ; Defined at:
   793                          ;		line 114 in file "./lcd.c"
   794                          ; Parameters:
   795                          ;		None
   796                          ; Auto variables:
   797                          ;		k           	       	type: unsigned char 
   798                          ; Return value:
   799                          ;		type: void 
   800                          ;		size: 0
   801                          ; Registers used:
   802                          ;		a, x, CUR_PP
   803                          ; Tracked objects:
   804                          ;		On entry : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
   805                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
   806                          ;		Unchanged: MVR_PP MVW_PP 
   807                          ; Data sizes:
   808                          ;		Autos:    1
   809                          ;		Params:   0
   810                          ;		Temp:     0
   811                          ;		Total:    1
   812                          ; This function calls:
   813                          ;		_DisplayPMxx
   814                          ;		_ShowLife
   815                          ;		_ShowHumiTemp
   816                          ;		_WriteAll_1621
   817                          ; This function is called by:
   818                          ;		_main
   819                          ; This function uses a non-reentrant model
   820                          ; 
   821  01B3                    __size_of_LCDOuputAll	equ	__end_of_LCDOuputAll-_LCDOuputAll
   822                          ;lcd.c: 113: void LCDOuputAll(void)
   823                          ;lcd.c: 114: {
   824                          ;			CUR_PP=0 XIO=0 PG=2 
   825  32A3                    _LCDOuputAll:
   826                          ;lcd.c: 115: char k = 0;
   827                          ;lcd.c: 117: for (k=0;k<12;k++)
   828  32A3  57 00             	mov	x, 0
   829                          ;			XIO=0 
   830  32A5                    l63:
   831                          ;lcd.c: 118: {
   832                          ;lcd.c: 119: DisplayBuf[k] = 0;
   833  32A5  62 D3 00          	mov	reg[211], 0
   834  32A8  56 49  00         	mov	[x+_DisplayBuf], 0
   835  32AB  75                	inc	x
   836  32AC  5B                	mov	a, x
   837  32AD  39 0C             	cmp	a, 12
   838  32AF  CFF5              	jc	l63
   839                          ;			IDX_PP=0 XIO=0 
   840                          ;lcd.c: 120: }
   841                          ;lcd.c: 125: if (PM_Flag == 0)
   842  32B1  62 D0 00          	mov	reg[208], 0
   843  32B4  51 3D             	mov	a, [_PM_Flag^0]
   844  32B6  B010              	jnz	l66
   845                          ;lcd.c: 126: {
   846                          ;lcd.c: 127: DisplayPMxx(data_pm2_5);
   847  32B8  51 30             	mov	a, [(_data_pm2_5^0+1)]
   848  32BA  58 2F             	mov	x, [_data_pm2_5^0]
   849  32BC  71 80             	or	f, 0x80	;select multiple RAM page mode
   850  32BE  7C 355D           	call	_DisplayPMxx
   851                          ;lcd.c: 128: DisplayBuf[0] |= 0x8;
   852  32C1  2E 49  08         	or	[_DisplayBuf^0], 8
   853                          ;lcd.c: 129: }
   854  32C4  7D 32D3           	jmp	l67
   855                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
   856  32C7                    l66:
   857                          ;lcd.c: 130: else
   858                          ;lcd.c: 131: {
   859                          ;lcd.c: 132: DisplayPMxx(data_pm1_0);
   860  32C7  51 2E             	mov	a, [(_data_pm1_0^0+1)]
   861  32C9  58 2D             	mov	x, [_data_pm1_0^0]
   862  32CB  71 80             	or	f, 0x80	;select multiple RAM page mode
   863  32CD  7C 355D           	call	_DisplayPMxx
   864                          ;lcd.c: 133: DisplayBuf[1] |= 0x8;
   865  32D0  2E 4A  08         	or	[(_DisplayBuf+1)^0], 8
   866                          ;			CUR_PP=0 XIO=0 
   867  32D3                    l67:
   868                          ;lcd.c: 134: }
   869                          ;lcd.c: 135: DisplayBuf[2] |= 0x8;
   870  32D3  2E 4B  08         	or	[(_DisplayBuf+2)^0], 8
   871                          ;lcd.c: 140: if (LifeFlag == 0)
   872  32D6  51 39             	mov	a, [_LifeFlag^0]
   873  32D8  B00E              	jnz	l68
   874                          ;lcd.c: 141: {
   875                          ;lcd.c: 142: ShowLife(HeapLife);
   876  32DA  51 36             	mov	a, [_HeapLife^0]
   877  32DC  71 80             	or	f, 0x80	;select multiple RAM page mode
   878  32DE  7C 36AC           	call	_ShowLife
   879                          ;lcd.c: 143: DisplayBuf[3] |= 0x8;
   880  32E1  2E 4C  08         	or	[(_DisplayBuf+3)^0], 8
   881                          ;lcd.c: 145: }
   882  32E4  7D 32F1           	jmp	l69
   883                          ;			CUR_PP=0 XIO=0 
   884  32E7                    l68:
   885                          ;lcd.c: 146: else
   886                          ;lcd.c: 147: {
   887                          ;lcd.c: 148: ShowLife(CarbonLife);
   888  32E7  51 31             	mov	a, [_CarbonLife^0]
   889  32E9  71 80             	or	f, 0x80	;select multiple RAM page mode
   890  32EB  7C 36AC           	call	_ShowLife
   891                          ;lcd.c: 149: DisplayBuf[4] |= 0x8;
   892  32EE  2E 4D  08         	or	[(_DisplayBuf+4)^0], 8
   893                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
   894  32F1                    l69:
   895                          ;lcd.c: 151: }
   896                          ;lcd.c: 156: if (SpeedLvl > 8)
   897  32F1  3C 43  09         	cmp	[_SpeedLvl^0], 9
   898  32F4  C004              	jc	l70
   899                          ;lcd.c: 157: {
   900                          ;lcd.c: 158: SpeedLvl = 8;
   901  32F6  55 43  08         	mov	[_SpeedLvl^0], 8
   902                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
   903  32F9                    l70:
   904                          ;lcd.c: 159: }
   905                          ;lcd.c: 160: DisplayBuf[5] = DigitSeg[SpeedLvl];
   906  32F9  51 43             	mov	a, [_SpeedLvl^0]
   907  32FB  01 00             	add	a, <_DigitSeg
   908  32FD  5C                	mov	x, a
   909  32FE  50 3E             	mov	a, >_DigitSeg
   910  3300  28                	romx
   911  3301  53 4E             	mov	[(_DisplayBuf+5)^0], a
   912                          ; _RH_T_Flag loaded to a
   913  3303  51 41             	mov	a, [_RH_T_Flag^0]
   914                          ;lcd.c: 162: if(!FanUpdateTimer)
   915  3305  3C 5A  00         	cmp	[_FanUpdateTimer^0], 0
   916  3308  B007              	jnz	l71
   917                          ;lcd.c: 163: {
   918                          ;lcd.c: 164: FanUpdateTimer = FanUpdateTimeReload;
   919  330A  55 5A  00         	mov	[_FanUpdateTimer^0], 0
   920                          ;lcd.c: 165: FanFlag ^= 1;
   921  330D  36 33  01         	xor	[_FanFlag^0], 1
   922                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
   923  3310                    l71:
   924                          ;lcd.c: 166: }
   925                          ;lcd.c: 167: if (FanFlag)
   926  3310  3C 33  00         	cmp	[_FanFlag^0], 0
   927  3313  A007              	jz	l72
   928                          ;lcd.c: 168: {
   929                          ;lcd.c: 169: DisplayBuf[6] |= 0x1;
   930  3315  2E 4F  01         	or	[(_DisplayBuf+6)^0], 1
   931                          ;lcd.c: 171: }
   932  3318  7D 331E           	jmp	l73
   933                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
   934  331B                    l72:
   935                          ;lcd.c: 172: else
   936                          ;lcd.c: 173: {
   937                          ;lcd.c: 174: DisplayBuf[6] |= 0x2;
   938  331B  2E 4F  02         	or	[(_DisplayBuf+6)^0], 2
   939                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
   940  331E                    l73:
   941                          ;lcd.c: 176: }
   942                          ;lcd.c: 181: if (RH_T_Flag == 0)
   943  331E  39 00             	cmp	a, 0
   944  3320  B00B              	jnz	l74
   945                          ;lcd.c: 182: {
   946                          ;lcd.c: 183: ShowHumiTemp(Humidity);
   947  3322  51 37             	mov	a, [_Humidity^0]
   948  3324  71 80             	or	f, 0x80	;select multiple RAM page mode
   949  3326  7C 3614           	call	_ShowHumiTemp
   950                          ;lcd.c: 187: }
   951  3329  7D 334A           	jmp	l75
   952                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
   953  332C                    l74:
   954                          ;lcd.c: 188: else
   955                          ;lcd.c: 189: {
   956                          ;lcd.c: 190: if (RH_T_Flag == 1)
   957  332C  39 01             	cmp	a, 1
   958  332E  B00E              	jnz	l76
   959                          ;lcd.c: 191: {
   960                          ;lcd.c: 192: ShowHumiTemp(Temperature);
   961  3330  51 44             	mov	a, [_Temperature^0]
   962  3332  71 80             	or	f, 0x80	;select multiple RAM page mode
   963  3334  7C 3614           	call	_ShowHumiTemp
   964                          ;lcd.c: 195: DisplayBuf[7] |= 0x20;
   965  3337  2E 50  20         	or	[(_DisplayBuf+7)^0], 0x20
   966                          ;lcd.c: 196: }
   967  333A  7D 334A           	jmp	l75
   968                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
   969  333D                    l76:
   970                          ;lcd.c: 197: else
   971                          ;lcd.c: 198: {
   972                          ;lcd.c: 199: ShowHumiTemp(Timer);
   973  333D  50 00             	mov	a, 0
   974  333F  71 80             	or	f, 0x80	;select multiple RAM page mode
   975  3341  7C 3614           	call	_ShowHumiTemp
   976                          ;lcd.c: 200: DisplayBuf[9] |= 0x80;
   977  3344  2E 52  80         	or	[(_DisplayBuf+9)^0], 0x80
   978                          ;lcd.c: 201: DisplayBuf[7] |= 0x10;
   979  3347  2E 50  10         	or	[(_DisplayBuf+7)^0], 0x10
   980                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
   981                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
   982  334A                    l75:
   983                          ; _PlasmaFlag loaded to a
   984  334A  51 3F             	mov	a, [_PlasmaFlag^0]
   985                          ;lcd.c: 203: }
   986                          ;lcd.c: 204: }
   987                          ;lcd.c: 209: if (mode == 0)
   988  334C  3C 48  00         	cmp	[_mode^0], 0
   989  334F  B007              	jnz	l78
   990                          ;lcd.c: 210: {
   991                          ;lcd.c: 211: DisplayBuf[7] |= 0x2;
   992  3351  2E 50  02         	or	[(_DisplayBuf+7)^0], 2
   993                          ;lcd.c: 213: }
   994  3354  7D 335A           	jmp	l79
   995                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
   996  3357                    l78:
   997                          ;lcd.c: 214: else
   998                          ;lcd.c: 215: {
   999                          ;lcd.c: 216: DisplayBuf[7] |= 0x4;
  1000  3357  2E 50  04         	or	[(_DisplayBuf+7)^0], 4
  1001                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
  1002  335A                    l79:
  1003                          ;lcd.c: 218: }
  1004                          ;lcd.c: 223: if (LockStatus)
  1005  335A  3C 3A  00         	cmp	[_LockStatus^0], 0
  1006  335D  A004              	jz	l80
  1007                          ;lcd.c: 224: {
  1008                          ;lcd.c: 225: DisplayBuf[7] |= 0x1;
  1009  335F  2E 50  01         	or	[(_DisplayBuf+7)^0], 1
  1010                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
  1011  3362                    l80:
  1012                          ;lcd.c: 226: }
  1013                          ;lcd.c: 235: if (Plasma)
  1014  3362  3C 3E  00         	cmp	[_Plasma^0], 0
  1015  3365  A020              	jz	l81
  1016                          ;lcd.c: 236: {
  1017                          ;lcd.c: 237: DisplayBuf[6] |= 0x10;
  1018  3367  2E 4F  10         	or	[(_DisplayBuf+6)^0], 0x10
  1019                          ;lcd.c: 238: if (!PlasmaTimer)
  1020  336A  3C 5C  00         	cmp	[_PlasmaTimer^0], 0
  1021  336D  B018              	jnz	l81
  1022                          ;lcd.c: 239: {
  1023                          ;lcd.c: 240: PlasmaTimer = 8;
  1024  336F  55 5C  08         	mov	[_PlasmaTimer^0], 8
  1025                          ;lcd.c: 241: if (PlasmaFlag == 0)
  1026  3372  39 00             	cmp	a, 0
  1027  3374  B006              	jnz	l83
  1028                          ;lcd.c: 242: {
  1029                          ;lcd.c: 243: PlasmaFlag = 1;
  1030  3376  50 01             	mov	a, 1
  1031                          ;lcd.c: 244: }
  1032  3378  7D 3386           	jmp	l81
  1033                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
  1034  337B                    l83:
  1035                          ;lcd.c: 245: else
  1036                          ;lcd.c: 246: {
  1037                          ;lcd.c: 247: if (PlasmaFlag == 1)
  1038  337B  39 01             	cmp	a, 1
  1039  337D  B006              	jnz	l85
  1040                          ;lcd.c: 248: {
  1041                          ;lcd.c: 249: PlasmaFlag = 2;
  1042  337F  50 02             	mov	a, 2
  1043                          ;lcd.c: 250: }
  1044  3381  7D 3386           	jmp	l81
  1045                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
  1046  3384                    l85:
  1047                          ;lcd.c: 251: else
  1048                          ;lcd.c: 252: {
  1049                          ;lcd.c: 253: PlasmaFlag = 0;
  1050  3384  50 00             	mov	a, 0
  1051                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
  1052                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
  1053                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
  1054                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
  1055  3386                    l81:
  1056                          ;lcd.c: 254: }
  1057                          ;lcd.c: 255: }
  1058                          ;lcd.c: 256: }
  1059                          ;lcd.c: 257: }
  1060                          ;lcd.c: 258: if (PlasmaFlag == 1)
  1061  3386  39 01             	cmp	a, 1
  1062  3388  B007              	jnz	l87
  1063                          ;lcd.c: 259: {
  1064                          ;lcd.c: 260: DisplayBuf[6] |= 0x40;
  1065  338A  2E 4F  40         	or	[(_DisplayBuf+6)^0], 0x40
  1066                          ;lcd.c: 261: }
  1067  338D  7D 3397           	jmp	l88
  1068                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
  1069  3390                    l87:
  1070                          ;lcd.c: 262: else if (PlasmaFlag == 2)
  1071  3390  39 02             	cmp	a, 2
  1072  3392  B004              	jnz	l88
  1073                          ;lcd.c: 263: {
  1074                          ;lcd.c: 264: DisplayBuf[6] |= 0x20 + 0x40;
  1075  3394  2E 4F  60         	or	[(_DisplayBuf+6)^0], 0x60
  1076                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
  1077                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
  1078  3397                    l88:
  1079                          ;lcd.c: 265: }
  1080                          ;lcd.c: 271: if (MyPMSUnion.MyPMFrame.PM2_5_US > 150)
  1081  3397  3C 06  00         	cmp	[(_MyPMSUnion+6)^0], 0
  1082  339A  B004              	jnz	u213
  1083  339C  3C 07  97         	cmp	[((_MyPMSUnion+6)^0+1)], 151
  1084  339F                    u213:
  1085  339F  C00A              	jc	l90
  1086                          ;lcd.c: 272: {
  1087                          ;lcd.c: 273: DisplayBuf[11] |= 0x20 + 0x10;
  1088  33A1  2E 54  30         	or	[(_DisplayBuf+0xB)^0], 0x30
  1089                          ;lcd.c: 274: DisplayBuf[10] |= 0x1 + 0x2 + 0x4 + 0x8;
  1090  33A4  2E 53  0F         	or	[(_DisplayBuf+0xA)^0], 0xF
  1091                          ;lcd.c: 275: }
  1092  33A7  7D 33F6           	jmp	l91
  1093                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
  1094  33AA                    l90:
  1095                          ;lcd.c: 276: else
  1096                          ;lcd.c: 277: {
  1097                          ;lcd.c: 278: if (MyPMSUnion.MyPMFrame.PM2_5_US > 100)
  1098  33AA  3C 06  00         	cmp	[(_MyPMSUnion+6)^0], 0
  1099  33AD  B004              	jnz	u223
  1100  33AF  3C 07  65         	cmp	[((_MyPMSUnion+6)^0+1)], 101
  1101  33B2                    u223:
  1102  33B2  C00A              	jc	l92
  1103                          ;lcd.c: 279: {
  1104                          ;lcd.c: 280: DisplayBuf[11] |= 0x20 + 0x10;
  1105  33B4  2E 54  30         	or	[(_DisplayBuf+0xB)^0], 0x30
  1106                          ;lcd.c: 281: DisplayBuf[10] |= 0x1 + 0x2 + 0x4;
  1107  33B7  2E 53  07         	or	[(_DisplayBuf+0xA)^0], 7
  1108                          ;lcd.c: 282: }
  1109  33BA  7D 33F6           	jmp	l91
  1110                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
  1111  33BD                    l92:
  1112                          ;lcd.c: 283: else
  1113                          ;lcd.c: 284: {
  1114                          ;lcd.c: 285: if (MyPMSUnion.MyPMFrame.PM2_5_US > 75)
  1115  33BD  3C 06  00         	cmp	[(_MyPMSUnion+6)^0], 0
  1116  33C0  B004              	jnz	u233
  1117  33C2  3C 07  4C         	cmp	[((_MyPMSUnion+6)^0+1)], 76
  1118  33C5                    u233:
  1119  33C5  C00A              	jc	l94
  1120                          ;lcd.c: 286: {
  1121                          ;lcd.c: 287: DisplayBuf[11] |= 0x20 + 0x10;
  1122  33C7  2E 54  30         	or	[(_DisplayBuf+0xB)^0], 0x30
  1123                          ;lcd.c: 288: DisplayBuf[10] |= 0x1 + 0x2;
  1124  33CA  2E 53  03         	or	[(_DisplayBuf+0xA)^0], 3
  1125                          ;lcd.c: 289: }
  1126  33CD  7D 33F6           	jmp	l91
  1127                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
  1128  33D0                    l94:
  1129                          ;lcd.c: 290: else
  1130                          ;lcd.c: 291: {
  1131                          ;lcd.c: 292: if (MyPMSUnion.MyPMFrame.PM2_5_US > 50)
  1132  33D0  3C 06  00         	cmp	[(_MyPMSUnion+6)^0], 0
  1133  33D3  B004              	jnz	u243
  1134  33D5  3C 07  33         	cmp	[((_MyPMSUnion+6)^0+1)], 51
  1135  33D8                    u243:
  1136  33D8  C00A              	jc	l96
  1137                          ;lcd.c: 293: {
  1138                          ;lcd.c: 294: DisplayBuf[11] |= 0x20 + 0x10;
  1139  33DA  2E 54  30         	or	[(_DisplayBuf+0xB)^0], 0x30
  1140                          ;lcd.c: 295: DisplayBuf[10] |= 0x1;
  1141  33DD  2E 53  01         	or	[(_DisplayBuf+0xA)^0], 1
  1142                          ;lcd.c: 296: }
  1143  33E0  7D 33F6           	jmp	l91
  1144                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
  1145  33E3                    l96:
  1146                          ;lcd.c: 297: else
  1147                          ;lcd.c: 298: {
  1148                          ;lcd.c: 299: if (MyPMSUnion.MyPMFrame.PM2_5_US > 25)
  1149  33E3  3C 06  00         	cmp	[(_MyPMSUnion+6)^0], 0
  1150  33E6  B004              	jnz	u253
  1151  33E8  3C 07  1A         	cmp	[((_MyPMSUnion+6)^0+1)], 26
  1152  33EB                    u253:
  1153  33EB  C007              	jc	l98
  1154                          ;lcd.c: 300: DisplayBuf[11] |= 0x20 + 0x10;
  1155  33ED  2E 54  30         	or	[(_DisplayBuf+0xB)^0], 0x30
  1156  33F0  7D 33F6           	jmp	l91
  1157                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
  1158  33F3                    l98:
  1159                          ;lcd.c: 301: else
  1160                          ;lcd.c: 302: DisplayBuf[11] |= 0x20;
  1161  33F3  2E 54  20         	or	[(_DisplayBuf+0xB)^0], 0x20
  1162                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
  1163                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
  1164                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
  1165                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
  1166                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
  1167  33F6                    l91:
  1168                          ;lcd.c: 303: }
  1169                          ;lcd.c: 304: }
  1170                          ;lcd.c: 305: }
  1171                          ;lcd.c: 306: }
  1172                          ;lcd.c: 308: if (Odor > 4)
  1173  33F6  3C 3B  05         	cmp	[_Odor^0], 5
  1174  33F9  C00A              	jc	l100
  1175                          ;lcd.c: 309: {
  1176                          ;lcd.c: 310: DisplayBuf[11] |= 0x1 + 0x2;
  1177  33FB  2E 54  03         	or	[(_DisplayBuf+0xB)^0], 3
  1178                          ;lcd.c: 311: DisplayBuf[10] |= 0x10 + 0x20 + 0x40 + 0x80;
  1179  33FE  2E 53  F0         	or	[(_DisplayBuf+0xA)^0], 0xF0
  1180                          ;lcd.c: 312: }
  1181  3401  7D 343C           	jmp	l101
  1182                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
  1183  3404                    l100:
  1184                          ;lcd.c: 313: else
  1185                          ;lcd.c: 314: {
  1186                          ;lcd.c: 315: if (Odor > 3)
  1187  3404  3C 3B  04         	cmp	[_Odor^0], 4
  1188  3407  C00A              	jc	l102
  1189                          ;lcd.c: 316: {
  1190                          ;lcd.c: 317: DisplayBuf[11] |= 0x1 + 0x2;
  1191  3409  2E 54  03         	or	[(_DisplayBuf+0xB)^0], 3
  1192                          ;lcd.c: 318: DisplayBuf[10] |= 0x10 + 0x20 + 0x40;
  1193  340C  2E 53  70         	or	[(_DisplayBuf+0xA)^0], 0x70
  1194                          ;lcd.c: 319: }
  1195  340F  7D 343C           	jmp	l101
  1196                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
  1197  3412                    l102:
  1198                          ;lcd.c: 320: else
  1199                          ;lcd.c: 321: {
  1200                          ;lcd.c: 322: if (Odor > 2)
  1201  3412  3C 3B  03         	cmp	[_Odor^0], 3
  1202  3415  C00A              	jc	l104
  1203                          ;lcd.c: 323: {
  1204                          ;lcd.c: 324: DisplayBuf[11] |= 0x1 + 0x2;
  1205  3417  2E 54  03         	or	[(_DisplayBuf+0xB)^0], 3
  1206                          ;lcd.c: 325: DisplayBuf[10] |= 0x10 + 0x20;
  1207  341A  2E 53  30         	or	[(_DisplayBuf+0xA)^0], 0x30
  1208                          ;lcd.c: 326: }
  1209  341D  7D 343C           	jmp	l101
  1210                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
  1211  3420                    l104:
  1212                          ;lcd.c: 327: else
  1213                          ;lcd.c: 328: {
  1214                          ;lcd.c: 329: if (Odor > 1)
  1215  3420  3C 3B  02         	cmp	[_Odor^0], 2
  1216  3423  C00A              	jc	l106
  1217                          ;lcd.c: 330: {
  1218                          ;lcd.c: 331: DisplayBuf[11] |= 0x1 + 0x2;
  1219  3425  2E 54  03         	or	[(_DisplayBuf+0xB)^0], 3
  1220                          ;lcd.c: 332: DisplayBuf[10] |= 0x10;
  1221  3428  2E 53  10         	or	[(_DisplayBuf+0xA)^0], 0x10
  1222                          ;lcd.c: 333: }
  1223  342B  7D 343C           	jmp	l101
  1224                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
  1225  342E                    l106:
  1226                          ;lcd.c: 334: else
  1227                          ;lcd.c: 335: {
  1228                          ;lcd.c: 336: if (Odor > 0)
  1229  342E  3C 3B  00         	cmp	[_Odor^0], 0
  1230  3431  A007              	jz	l108
  1231                          ;lcd.c: 337: DisplayBuf[11] |= 0x1 + 0x2;
  1232  3433  2E 54  03         	or	[(_DisplayBuf+0xB)^0], 3
  1233  3436  7D 343C           	jmp	l101
  1234                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
  1235  3439                    l108:
  1236                          ;lcd.c: 338: else
  1237                          ;lcd.c: 339: DisplayBuf[11] |= 0x2;
  1238  3439  2E 54  02         	or	[(_DisplayBuf+0xB)^0], 2
  1239                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
  1240                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
  1241                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
  1242                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
  1243                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
  1244  343C                    l101:
  1245                          ;lcd.c: 340: }
  1246                          ;lcd.c: 341: }
  1247                          ;lcd.c: 342: }
  1248                          ;lcd.c: 343: }
  1249                          ;lcd.c: 345: DisplayBuf[5] |= 0x8;
  1250  343C  2E 4E  08         	or	[(_DisplayBuf+5)^0], 8
  1251                          ;lcd.c: 346: DisplayBuf[6] |= 0x4 + 0x8;
  1252  343F  2E 4F  0C         	or	[(_DisplayBuf+6)^0], 0xC
  1253                          ;lcd.c: 347: DisplayBuf[7] |= 0x40 + 0x80;
  1254  3442  2E 50  C0         	or	[(_DisplayBuf+7)^0], 0xC0
  1255                          ;lcd.c: 348: DisplayBuf[11] |= 0x4 + 0x40;
  1256  3445  2E 54  44         	or	[(_DisplayBuf+0xB)^0], 0x44
  1257                          ;_PlasmaFlag stored from a
  1258  3448  53 3F             	mov	[_PlasmaFlag^0], a
  1259                          ;lcd.c: 349: WriteAll_1621(0,DisplayBuf,12);
  1260  344A  55 64  0C         	mov	[?_WriteAll_1621^0], 12
  1261  344D  50 00             	mov	a, 0
  1262  344F  57 49             	mov	x, <(<_DisplayBuf)
  1263  3451  71 80             	or	f, 0x80	;select multiple RAM page mode
  1264  3453  7D 347A           	jmp	_WriteAll_1621
  1265                          ;lcd.c: 350: }
  1266                          ;			CUR_PP=0 XIO=0 
  1267  3456                    __end_of_LCDOuputAll:
  1268                          ; =============== function _LCDOuputAll ends ============
  1269                          ; *************** function _Init_IIC *****************
  1270                          ; Defined at:
  1271                          ;		line 8 in file "./software_iic.c"
  1272                          ; Parameters:
  1273                          ;		None
  1274                          ; Auto variables:
  1275                          ;		None
  1276                          ; Return value:
  1277                          ;		type: void 
  1278                          ;		size: 0
  1279                          ; Registers used:
  1280                          ;		None
  1281                          ; Tracked objects:
  1282                          ;		On entry : CUR_PP=0 IDX_PP? XIO=0 PG=2 MVR_PP? MVW_PP? 
  1283                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG=2 MVR_PP? MVW_PP? 
  1284                          ;		Unchanged: IDX_PP MVR_PP MVW_PP 
  1285                          ; Data sizes:
  1286                          ;		Autos:    0
  1287                          ;		Params:   0
  1288                          ;		Temp:     0
  1289                          ;		Total:    0
  1290                          ; This function calls:
  1291                          ;		Nothing
  1292                          ; This function is called by:
  1293                          ;		_main
  1294                          ; This function uses a non-reentrant model
  1295                          ; 
  1296  0011                    __size_of_Init_IIC	equ	__end_of_Init_IIC-_Init_IIC
  1297                          ;software_iic.c: 7: void Init_IIC(void)
  1298                          ;software_iic.c: 8: {
  1299                          ;			CUR_PP=0 XIO=0 PG=2 
  1300  3456                    _Init_IIC:
  1301                          ;software_iic.c: 10: PRT1DM2 |= (0x20 + 0x80);
  1302  3456  43 07 A0          	or	reg[7], 0xA0
  1303                          ;software_iic.c: 11: PRT1DM1 |= (0x20 + 0x80);
  1304  3459  71 10             	or	f, 0x10	; select config register space
  1305  345B  43 05 A0          	or	reg[5], 0xA0
  1306                          ;software_iic.c: 12: PRT1DM0 |= (0x20 + 0x80);
  1307  345E  43 04 A0          	or	reg[4], 0xA0
  1308                          ;software_iic.c: 13: PRT1DR |= (0x20 + 0x80);
  1309  3461  70 CF             	and	f, 0xCF	;select user reg space
  1310  3463  43 04 A0          	or	reg[4], 0xA0
  1311                          ;software_iic.c: 14: }
  1312                          ;			CUR_PP=0 XIO=0 PG=2 
  1313  3466  7F                	ret
  1314  3467                    __end_of_Init_IIC:
  1315                          ; =============== function _Init_IIC ends ============
  1316                          ; *************** function _HT1621B_Init *****************
  1317                          ; Defined at:
  1318                          ;		line 99 in file "./ht1621b.c"
  1319                          ; Parameters:
  1320                          ;		None
  1321                          ; Auto variables:
  1322                          ;		None
  1323                          ; Return value:
  1324                          ;		type: void 
  1325                          ;		size: 0
  1326                          ; Registers used:
  1327                          ;		a, x, CUR_PP
  1328                          ; Tracked objects:
  1329                          ;		On entry : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  1330                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  1331                          ;		Unchanged: IDX_PP MVR_PP MVW_PP 
  1332                          ; Data sizes:
  1333                          ;		Autos:    0
  1334                          ;		Params:   0
  1335                          ;		Temp:     0
  1336                          ;		Total:    0
  1337                          ; This function calls:
  1338                          ;		_SendCmd
  1339                          ; This function is called by:
  1340                          ;		_main
  1341                          ; This function uses a non-reentrant model
  1342                          ; 
  1343  0013                    __size_of_HT1621B_Init	equ	__end_of_HT1621B_Init-_HT1621B_Init
  1344                          ;ht1621b.c: 98: void HT1621B_Init(void)
  1345                          ;ht1621b.c: 99: {
  1346                          ;			CUR_PP=0 XIO=0 PG=2 
  1347  3467                    _HT1621B_Init:
  1348                          ;ht1621b.c: 100: SendCmd(0x29);
  1349  3467  50 29             	mov	a, 41
  1350  3469  7C 36EC           	call	_SendCmd
  1351                          ;ht1621b.c: 101: SendCmd(0x01);
  1352  346C  50 01             	mov	a, 1
  1353  346E  71 80             	or	f, 0x80	;select multiple RAM page mode
  1354  3470  7C 36EC           	call	_SendCmd
  1355                          ;ht1621b.c: 102: SendCmd(0x03);
  1356  3473  50 03             	mov	a, 3
  1357  3475  71 80             	or	f, 0x80	;select multiple RAM page mode
  1358  3477  7D 36EC           	jmp	_SendCmd
  1359                          ;ht1621b.c: 104: }
  1360                          ;			CUR_PP=0 XIO=0 
  1361  347A                    __end_of_HT1621B_Init:
  1362                          ; =============== function _HT1621B_Init ends ============
  1363                          ; *************** function _WriteAll_1621 *****************
  1364                          ; Defined at:
  1365                          ;		line 85 in file "./ht1621b.c"
  1366                          ; Parameters:
  1367                          ;		addr        	reg:    a	type: unsigned char 
  1368                          ;		p           	reg:    x	type: PTR unsigned char ; Largest target is 12
  1369                          ;		 -> DisplayBuf(12), 
  1370                          ;		cnt         	offs:   0	type: unsigned char 
  1371                          ; Auto variables:
  1372                          ;		p           	       	type: PTR unsigned char ; Largest target is 12
  1373                          ;		 -> DisplayBuf(12), 
  1374                          ;		addr        	       	type: unsigned char 
  1375                          ;		i           	       	type: unsigned char 
  1376                          ; Return value:
  1377                          ;		type: void 
  1378                          ;		size: 0
  1379                          ; Registers used:
  1380                          ;		a, x, CUR_PP
  1381                          ; Tracked objects:
  1382                          ;		On entry : CUR_PP=0 IDX_PP=0 XIO=0 PG? MVR_PP? MVW_PP? 
  1383                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  1384                          ;		Unchanged: MVR_PP MVW_PP 
  1385                          ; Data sizes:
  1386                          ;		Autos:    3
  1387                          ;		Params:   1
  1388                          ;		Temp:     0
  1389                          ;		Total:    4
  1390                          ; This function calls:
  1391                          ;		_SendBit_1621
  1392                          ;		_SendDataBit_1621
  1393                          ;		_delay_us
  1394                          ; This function is called by:
  1395                          ;		_LCDOuputAll
  1396                          ; This function uses a non-reentrant model
  1397                          ; 
  1398  0043                    __size_of_WriteAll_1621	equ	__end_of_WriteAll_1621-_WriteAll_1621
  1399                          ;ht1621b.c: 84: void WriteAll_1621(unsigned char addr,unsigned char *p,unsigned char cnt)
  1400                          ;ht1621b.c: 85: {
  1401                          ;			CUR_PP=0 IDX_PP=0 XIO=0 PG=2 
  1402  347A                    _WriteAll_1621:
  1403                          ;WriteAll_1621@addr stored from a
  1404  347A  53 66             	mov	[(??_WriteAll_1621+1)^0], a
  1405                          ;WriteAll_1621@p stored from x
  1406  347C  5A 65             	mov	[??_WriteAll_1621^0], x
  1407                          ;ht1621b.c: 86: unsigned char i;
  1408                          ;ht1621b.c: 87: (PRT0DR &= ~0x80);
  1409  347E  41 00 7F          	and	reg[0], 0x7F
  1410                          ;ht1621b.c: 88: SendBit_1621(0xa0,3);
  1411  3481  50 A0             	mov	a, 160
  1412  3483  57 03             	mov	x, 3
  1413  3485  7C 3786           	call	_SendBit_1621
  1414                          ;ht1621b.c: 89: SendBit_1621(addr<<2,6);
  1415  3488  51 66             	mov	a, [(??_WriteAll_1621+1)^0]
  1416  348A  64                	asl	a
  1417  348B  64                	asl	a
  1418  348C  57 06             	mov	x, 6
  1419  348E  71 80             	or	f, 0x80	;select multiple RAM page mode
  1420  3490  7C 3786           	call	_SendBit_1621
  1421                          ;ht1621b.c: 90: for(i =0; i <cnt; i ++,p++)
  1422  3493  50 00             	mov	a, 0
  1423  3495  7D 34AB           	jmp	l33
  1424                          ;			CUR_PP=0 XIO=0 
  1425  3498                    l30:
  1426                          ;ht1621b.c: 91: {
  1427                          ;ht1621b.c: 92: SendDataBit_1621(*p,8);
  1428  3498  58 65             	mov	x, [??_WriteAll_1621^0]
  1429  349A  62 D3 00          	mov	reg[211], 0
  1430  349D  52 00             	mov	a, [x+0]
  1431  349F  57 08             	mov	x, 8
  1432  34A1  71 80             	or	f, 0x80	;select multiple RAM page mode
  1433  34A3  7C 382D           	call	_SendDataBit_1621
  1434                          ; WriteAll_1621@i loaded to a
  1435  34A6  51 67             	mov	a, [(??_WriteAll_1621+2)^0]
  1436  34A8  74                	inc	a
  1437  34A9  76 65             	inc	[??_WriteAll_1621^0]
  1438                          ;			CUR_PP=0 XIO=0 
  1439  34AB                    l33:
  1440                          ;WriteAll_1621@i stored from a
  1441  34AB  53 67             	mov	[(??_WriteAll_1621+2)^0], a
  1442  34AD  3A 64             	cmp	a, [?_WriteAll_1621^0]
  1443  34AF  CFE8              	jc	l30
  1444                          ;			CUR_PP=0 XIO=0 
  1445                          ;ht1621b.c: 93: }
  1446                          ;ht1621b.c: 94: (PRT0DR |= 0x80);
  1447  34B1  43 00 80          	or	reg[0], 0x80
  1448                          ;ht1621b.c: 95: delay_us(4);
  1449  34B4  50 04             	mov	a, 4
  1450  34B6  57 00             	mov	x, 0
  1451  34B8  71 80             	or	f, 0x80	;select multiple RAM page mode
  1452  34BA  7D 3B6C           	jmp	_delay_us
  1453                          ;ht1621b.c: 96: }
  1454                          ;			CUR_PP=0 XIO=0 
  1455  34BD                    __end_of_WriteAll_1621:
  1456                          ; =============== function _WriteAll_1621 ends ============
  1457                          ; *************** function _LeftRotate *****************
  1458                          ; Defined at:
  1459                          ;		line 114 in file "./si7020.c"
  1460                          ; Parameters:
  1461                          ;		None
  1462                          ; Auto variables:
  1463                          ;		k           	       	type: unsigned char 
  1464                          ; Return value:
  1465                          ;		type: void 
  1466                          ;		size: 0
  1467                          ; Registers used:
  1468                          ;		a, x, CUR_PP
  1469                          ; Tracked objects:
  1470                          ;		On entry : CUR_PP=0 IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  1471                          ;		On exit  : CUR_PP=0 IDX_PP=0 XIO=0 PG? MVR_PP? MVW_PP? 
  1472                          ;		Unchanged: MVR_PP MVW_PP 
  1473                          ; Data sizes:
  1474                          ;		Autos:    2
  1475                          ;		Params:   0
  1476                          ;		Temp:     0
  1477                          ;		Total:    2
  1478                          ; This function calls:
  1479                          ;		Nothing
  1480                          ; This function is called by:
  1481                          ;		_CRC8Check
  1482                          ; This function uses a non-reentrant model
  1483                          ; 
  1484  002C                    __size_of_LeftRotate	equ	__end_of_LeftRotate-_LeftRotate
  1485                          ;si7020.c: 113: void LeftRotate()
  1486                          ;si7020.c: 114: {
  1487                          ;			CUR_PP=0 PG=2 
  1488  34BD                    _LeftRotate:
  1489                          ;si7020.c: 115: unsigned char k;
  1490                          ;si7020.c: 116: for(k=0;k<3;k++)
  1491  34BD  57 00             	mov	x, 0
  1492                          ;			
  1493  34BF                    l176:
  1494                          ;si7020.c: 117: {
  1495                          ;si7020.c: 118: RecBuf[k] <<= 1;
  1496  34BF  70 CF             	and	f, 0xCF	;select user reg space
  1497  34C1  62 D3 00          	mov	reg[211], 0
  1498  34C4  66 55             	asl	[x+_RecBuf]
  1499                          ;si7020.c: 119: if(k < 2)
  1500  34C6  5B                	mov	a, x
  1501  34C7  39 02             	cmp	a, 2
  1502  34C9  D013              	jnc	l179
  1503                          ;si7020.c: 120: {
  1504                          ;si7020.c: 121: RecBuf[k] |= (RecBuf[k+1]&0x80)?1:0;
  1505  34CB  62 D0 00          	mov	reg[208], 0
  1506  34CE  55 64  00         	mov	[(??_LeftRotate+1)^0], 0
  1507  34D1  3D 56  80         	cmp	[x+_RecBuf+1], 128
  1508  34D4  C004              	jc	l500002322
  1509  34D6  55 64  01         	mov	[(??_LeftRotate+1)^0], 1
  1510                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
  1511  34D9                    l500002322:
  1512  34D9  51 64             	mov	a, [(??_LeftRotate+1)^0]
  1513  34DB  2D 55             	or	[x+_RecBuf], a
  1514                          ;			IDX_PP=0 XIO=0 
  1515  34DD                    l179:
  1516  34DD  75                	inc	x
  1517  34DE  5B                	mov	a, x
  1518  34DF  39 03             	cmp	a, 3
  1519  34E1  CFDD              	jc	l176
  1520                          ;			IDX_PP=0 XIO=0 
  1521                          ;si7020.c: 122: }
  1522                          ;si7020.c: 123: }
  1523                          ;si7020.c: 124: data_length --;
  1524  34E3  62 D0 00          	mov	reg[208], 0
  1525  34E6  7A 47             	dec	[_data_length^0]
  1526                          ;si7020.c: 125: }
  1527                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
  1528  34E8  7F                	ret
  1529  34E9                    __end_of_LeftRotate:
  1530                          ; =============== function _LeftRotate ends ============
  1531                          ; *************** function ___lmul *****************
  1532                          ; Defined at:
  1533                          ;		line 3 in file "C:\Program Files (x86)\HI-TECH Software\HCPSOC\PRO\9.61\sources\lmul.c"
  1534                          ; Parameters:
  1535                          ;		multiplier  	offs:   0	type: unsigned long 
  1536                          ;		multiplicand	offs:   4	type: unsigned long 
  1537                          ; Auto variables:
  1538                          ;		product     	       	type: unsigned long 
  1539                          ; Return value:
  1540                          ;		type: unsigned long 
  1541                          ;		size: 4
  1542                          ; Registers used:
  1543                          ;		a, CUR_PP
  1544                          ; Tracked objects:
  1545                          ;		On entry : CUR_PP=0 IDX_PP? XIO=0 PG=2 MVR_PP? MVW_PP? 
  1546                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  1547                          ;		Unchanged: IDX_PP MVR_PP MVW_PP 
  1548                          ; Data sizes:
  1549                          ;		Autos:    4
  1550                          ;		Params:   8
  1551                          ;		Temp:     0
  1552                          ;		Total:   12
  1553                          ; This function calls:
  1554                          ;		Nothing
  1555                          ; This function is called by:
  1556                          ;		_Si7020CalcTemp
  1557                          ;		_Si7020CalcRH
  1558                          ; This function uses a non-reentrant model
  1559                          ; 
  1560  0048                    __size_of___lmul	equ	__end_of___lmul-___lmul
  1561                          ;lmul.c: 1: unsigned long
  1562                          ;lmul.c: 2: __lmul(unsigned long multiplier, unsigned long multiplicand)
  1563                          ;lmul.c: 3: {
  1564                          ;			CUR_PP=0 XIO=0 PG=2 
  1565  34E9                    ___lmul:
  1566                          ;lmul.c: 4: unsigned long product = 0;
  1567  34E9  50 00             	mov	a, 0
  1568  34EB  53 76             	mov	[??___lmul^0], a
  1569  34ED  53 77             	mov	[(??___lmul^0+1)], a
  1570  34EF  53 78             	mov	[(??___lmul^0+2)], a
  1571  34F1  53 79             	mov	[(??___lmul^0+3)], a
  1572                          ;lmul.c: 6: do {
  1573                          ;			CUR_PP=0 XIO=0 
  1574  34F3                    l330:
  1575                          ;lmul.c: 7: if(multiplier & 1)
  1576  34F3  47 71  01         	tst	[(?___lmul+3)^0], 1
  1577  34F6  A011              	jz	l331
  1578                          ;lmul.c: 8: product += multiplicand;
  1579  34F8  51 75             	mov	a, [((?___lmul+4)^0+3)]
  1580  34FA  04 79             	add	[(??___lmul^0+3)], a
  1581  34FC  51 74             	mov	a, [((?___lmul+4)^0+2)]
  1582  34FE  0C 78             	adc	[(??___lmul^0+2)], a
  1583  3500  51 73             	mov	a, [((?___lmul+4)^0+1)]
  1584  3502  0C 77             	adc	[(??___lmul^0+1)], a
  1585  3504  51 72             	mov	a, [(?___lmul+4)^0]
  1586  3506  0C 76             	adc	[??___lmul^0], a
  1587                          ;			CUR_PP=0 XIO=0 
  1588  3508                    l331:
  1589                          ;lmul.c: 9: multiplicand <<= 1;
  1590  3508  65 75             	asl	[((?___lmul+4)^0+3)]
  1591  350A  6B 74             	rlc	[((?___lmul+4)^0+2)]
  1592  350C  6B 73             	rlc	[((?___lmul+4)^0+1)]
  1593  350E  6B 72             	rlc	[(?___lmul+4)^0]
  1594                          ;lmul.c: 10: multiplier >>= 1;
  1595  3510  70 FB             	and	f, 0xFB
  1596  3512  6E 6E             	rrc	[?___lmul^0]
  1597  3514  6E 6F             	rrc	[(?___lmul^0+1)]
  1598  3516  6E 70             	rrc	[(?___lmul^0+2)]
  1599  3518  6E 71             	rrc	[(?___lmul^0+3)]
  1600                          ;lmul.c: 11: } while(multiplier != 0);
  1601  351A  51 6E             	mov	a, [?___lmul^0]
  1602  351C  2A 6F             	or	a, [(?___lmul^0+1)]
  1603  351E  2A 70             	or	a, [(?___lmul^0+2)]
  1604  3520  2A 71             	or	a, [(?___lmul^0+3)]
  1605  3522  BFD0              	jnz	l330
  1606                          ;			CUR_PP=0 XIO=0 
  1607  3524  5F 6E  76         	mov	[?___lmul^0], [??___lmul^0]
  1608  3527  5F 6F  77         	mov	[(?___lmul+1)^0], [(??___lmul+1)^0]
  1609  352A  5F 70  78         	mov	[(?___lmul+2)^0], [(??___lmul+2)^0]
  1610  352D  5F 71  79         	mov	[(?___lmul+3)^0], [(??___lmul+3)^0]
  1611                          ;lmul.c: 13: }
  1612                          ;			CUR_PP=0 XIO=0 
  1613  3530  7F                	ret
  1614  3531                    __end_of___lmul:
  1615                          ; =============== function ___lmul ends ============
  1616                          ; *************** function ___wmul *****************
  1617                          ; Defined at:
  1618                          ;		line 3 in file "C:\Program Files (x86)\HI-TECH Software\HCPSOC\PRO\9.61\sources\wmul.c"
  1619                          ; Parameters:
  1620                          ;		multiplier  	reg:   xa	type: unsigned int 
  1621                          ;		multiplicand	offs:   0	type: unsigned int 
  1622                          ; Auto variables:
  1623                          ;		multiplier  	       	type: unsigned int 
  1624                          ;		product     	       	type: unsigned int 
  1625                          ; Return value:
  1626                          ;		type: unsigned int 
  1627                          ;		size: 2
  1628                          ; Registers used:
  1629                          ;		a, x, CUR_PP
  1630                          ; Tracked objects:
  1631                          ;		On entry : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  1632                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  1633                          ;		Unchanged: IDX_PP MVR_PP MVW_PP 
  1634                          ; Data sizes:
  1635                          ;		Autos:    4
  1636                          ;		Params:   2
  1637                          ;		Temp:     0
  1638                          ;		Total:    6
  1639                          ; This function calls:
  1640                          ;		Nothing
  1641                          ; This function is called by:
  1642                          ;		_Si7020CalcTemp
  1643                          ; This function uses a non-reentrant model
  1644                          ; 
  1645  002C                    __size_of___wmul	equ	__end_of___wmul-___wmul
  1646                          ;wmul.c: 1: unsigned int
  1647                          ;wmul.c: 2: __wmul(unsigned int multiplier, unsigned int multiplicand)
  1648                          ;wmul.c: 3: {
  1649                          ;			CUR_PP=0 XIO=0 PG=2 
  1650  3531                    ___wmul:
  1651                          ;___wmul@multiplier stored from xa
  1652  3531  53 71             	mov	[(??___wmul^0+1)], a
  1653  3533  5A 70             	mov	[??___wmul^0], x
  1654                          ;wmul.c: 4: unsigned int product = 0;
  1655  3535  55 72  00         	mov	[(??___wmul+2)^0], 0
  1656  3538  55 73  00         	mov	[((??___wmul+2)^0+1)], 0
  1657                          ;wmul.c: 6: do {
  1658                          ;			CUR_PP=0 XIO=0 
  1659  353B                    l251:
  1660                          ;wmul.c: 7: if(multiplier & 1)
  1661  353B  47 71  01         	tst	[(??___wmul+1)^0], 1
  1662  353E  A009              	jz	l252
  1663                          ;wmul.c: 8: product += multiplicand;
  1664  3540  51 6F             	mov	a, [(?___wmul^0+1)]
  1665  3542  04 73             	add	[((??___wmul+2)^0+1)], a
  1666  3544  51 6E             	mov	a, [?___wmul^0]
  1667  3546  0C 72             	adc	[(??___wmul+2)^0], a
  1668                          ;			CUR_PP=0 XIO=0 
  1669  3548                    l252:
  1670                          ;wmul.c: 9: multiplicand <<= 1;
  1671  3548  65 6F             	asl	[(?___wmul^0+1)]
  1672  354A  6B 6E             	rlc	[?___wmul^0]
  1673                          ;wmul.c: 10: multiplier >>= 1;
  1674  354C  70 FB             	and	f, 0xFB
  1675  354E  6E 70             	rrc	[??___wmul^0]
  1676  3550  6E 71             	rrc	[(??___wmul^0+1)]
  1677                          ;wmul.c: 11: } while(multiplier != 0);
  1678  3552  51 70             	mov	a, [??___wmul^0]
  1679  3554  2A 71             	or	a, [(??___wmul^0+1)]
  1680  3556  BFE4              	jnz	l251
  1681                          ;			CUR_PP=0 XIO=0 
  1682                          ;wmul.c: 12: return product;
  1683  3558  51 73             	mov	a, [((??___wmul+2)^0+1)]
  1684  355A  58 72             	mov	x, [(??___wmul+2)^0]
  1685                          ;wmul.c: 13: }
  1686                          ;			CUR_PP=0 XIO=0 
  1687  355C  7F                	ret
  1688  355D                    __end_of___wmul:
  1689                          ; =============== function ___wmul ends ============
  1690                          ; *************** function _DisplayPMxx *****************
  1691                          ; Defined at:
  1692                          ;		line 12 in file "./lcd.c"
  1693                          ; Parameters:
  1694                          ;		pm          	reg:   xa	type: unsigned int 
  1695                          ; Auto variables:
  1696                          ;		pm          	       	type: unsigned int 
  1697                          ;		temp        	       	type: unsigned int 
  1698                          ;		index       	       	type: unsigned int 
  1699                          ;		k           	       	type: unsigned char 
  1700                          ; Return value:
  1701                          ;		type: void 
  1702                          ;		size: 0
  1703                          ; Registers used:
  1704                          ;		a, x, CUR_PP
  1705                          ; Tracked objects:
  1706                          ;		On entry : CUR_PP=0 IDX_PP=0 XIO=0 PG? MVR_PP? MVW_PP? 
  1707                          ;		On exit  : CUR_PP=0 IDX_PP=0 XIO=0 PG? MVR_PP? MVW_PP? 
  1708                          ;		Unchanged: MVR_PP MVW_PP 
  1709                          ; Data sizes:
  1710                          ;		Autos:    7
  1711                          ;		Params:   0
  1712                          ;		Temp:     0
  1713                          ;		Total:    7
  1714                          ; This function calls:
  1715                          ;		___lwdiv
  1716                          ;		___lwmod
  1717                          ; This function is called by:
  1718                          ;		_LCDOuputAll
  1719                          ; This function uses a non-reentrant model
  1720                          ; 
  1721  00B7                    __size_of_DisplayPMxx	equ	__end_of_DisplayPMxx-_DisplayPMxx
  1722                          ;lcd.c: 11: void DisplayPMxx(unsigned int pm)
  1723                          ;lcd.c: 12: {
  1724                          ;			CUR_PP=0 IDX_PP=0 XIO=0 PG=2 
  1725  355D                    _DisplayPMxx:
  1726                          ;lcd.c: 13: char k = 0;
  1727  355D  55 6A  00         	mov	[(??_DisplayPMxx+6)^0], 0
  1728                          ;lcd.c: 14: unsigned int index;
  1729                          ;lcd.c: 15: unsigned int temp;
  1730                          ;lcd.c: 17: temp = pm;
  1731  3560  53 67             	mov	[((??_DisplayPMxx+2)^0+1)], a
  1732  3562  5A 66             	mov	[(??_DisplayPMxx+2)^0], x
  1733                          ;lcd.c: 18: if(temp > 999)
  1734  3564  3C 66  03         	cmp	[(??_DisplayPMxx+2)^0], 3
  1735  3567  B004              	jnz	u203
  1736  3569  3C 67  E8         	cmp	[((??_DisplayPMxx+2)^0+1)], 232
  1737  356C                    u203:
  1738  356C  C007              	jc	l42
  1739                          ;lcd.c: 19: {
  1740                          ;lcd.c: 20: temp = 999;
  1741  356E  55 66  03         	mov	[(??_DisplayPMxx+2)^0], 3
  1742  3571  55 67  E7         	mov	[((??_DisplayPMxx+2)^0+1)], 231
  1743                          ;			CUR_PP=0 IDX_PP=0 XIO=0 PG=2 
  1744  3574                    l42:
  1745                          ;lcd.c: 21: }
  1746                          ;lcd.c: 23: index = temp/100;
  1747  3574  55 6B  00         	mov	[?___lwdiv^0], 0
  1748  3577  55 6C  64         	mov	[(?___lwdiv^0+1)], 100
  1749  357A  51 67             	mov	a, [((??_DisplayPMxx+2)^0+1)]
  1750  357C  58 66             	mov	x, [(??_DisplayPMxx+2)^0]
  1751  357E  7C 3A0C           	call	___lwdiv
  1752  3581  5A 68             	mov	[(??_DisplayPMxx+4)^0], x
  1753  3583  53 69             	mov	[(??_DisplayPMxx+5)^0], a
  1754                          ;lcd.c: 24: DisplayNum[0] = index;
  1755  3585  5F 28  69         	mov	[_DisplayNum^0], [(??_DisplayPMxx+5)^0]
  1756                          ;lcd.c: 26: temp = temp%100;
  1757  3588  55 6B  00         	mov	[?___lwmod^0], 0
  1758  358B  55 6C  64         	mov	[(?___lwmod^0+1)], 100
  1759  358E  51 67             	mov	a, [((??_DisplayPMxx+2)^0+1)]
  1760  3590  58 66             	mov	x, [(??_DisplayPMxx+2)^0]
  1761  3592  71 80             	or	f, 0x80	;select multiple RAM page mode
  1762  3594  7C 37F1           	call	___lwmod
  1763  3597  5A 66             	mov	[(??_DisplayPMxx+2)^0], x
  1764  3599  53 67             	mov	[(??_DisplayPMxx+3)^0], a
  1765                          ;lcd.c: 27: index = temp/10;
  1766  359B  55 6B  00         	mov	[?___lwdiv^0], 0
  1767  359E  55 6C  0A         	mov	[(?___lwdiv^0+1)], 10
  1768  35A1  51 67             	mov	a, [((??_DisplayPMxx+2)^0+1)]
  1769  35A3  58 66             	mov	x, [(??_DisplayPMxx+2)^0]
  1770  35A5  71 80             	or	f, 0x80	;select multiple RAM page mode
  1771  35A7  7C 3A0C           	call	___lwdiv
  1772  35AA  5A 68             	mov	[(??_DisplayPMxx+4)^0], x
  1773  35AC  53 69             	mov	[(??_DisplayPMxx+5)^0], a
  1774                          ;lcd.c: 28: DisplayNum[1] = index;
  1775  35AE  5F 29  69         	mov	[(_DisplayNum+1)^0], [(??_DisplayPMxx+5)^0]
  1776                          ;lcd.c: 30: index = temp%10;
  1777  35B1  55 6B  00         	mov	[?___lwmod^0], 0
  1778  35B4  55 6C  0A         	mov	[(?___lwmod^0+1)], 10
  1779  35B7  51 67             	mov	a, [((??_DisplayPMxx+2)^0+1)]
  1780  35B9  58 66             	mov	x, [(??_DisplayPMxx+2)^0]
  1781  35BB  71 80             	or	f, 0x80	;select multiple RAM page mode
  1782  35BD  7C 37F1           	call	___lwmod
  1783  35C0  5A 68             	mov	[(??_DisplayPMxx+4)^0], x
  1784  35C2  53 69             	mov	[(??_DisplayPMxx+5)^0], a
  1785                          ;lcd.c: 31: DisplayNum[2] = index;
  1786  35C4  5F 2A  69         	mov	[(_DisplayNum+2)^0], [(??_DisplayPMxx+5)^0]
  1787                          ;lcd.c: 33: k = 0;
  1788  35C7  57 00             	mov	x, 0
  1789                          ;lcd.c: 34: while (k<2)
  1790  35C9  7D 35EF           	jmp	l43
  1791                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
  1792  35CC                    l44:
  1793                          ;DisplayPMxx@k stored from x
  1794  35CC  5A 6A             	mov	[(??_DisplayPMxx+6)^0], x
  1795                          ;lcd.c: 35: {
  1796                          ;lcd.c: 36: if (DisplayNum[k])
  1797  35CE  52 28             	mov	a, [x+_DisplayNum]
  1798  35D0  A018              	jz	l46
  1799                          ;lcd.c: 37: {
  1800                          ;lcd.c: 38: DisplayBuf[k] = DigitSeg[DisplayNum[k]];
  1801  35D2  51 6A             	mov	a, [(??_DisplayPMxx+6)^0]
  1802  35D4  01 28             	add	a, <(<_DisplayNum)
  1803  35D6  5C                	mov	x, a
  1804  35D7  52 00             	mov	a, [x+0]
  1805  35D9  01 00             	add	a, <_DigitSeg
  1806  35DB  5C                	mov	x, a
  1807  35DC  50 3E             	mov	a, >_DigitSeg
  1808  35DE  28                	romx
  1809  35DF  58 6A             	mov	x, [(??_DisplayPMxx+6)^0]
  1810  35E1  54 49             	mov	[x+_DisplayBuf], a
  1811                          ; DisplayPMxx@k loaded to x
  1812  35E3  58 6A             	mov	x, [(??_DisplayPMxx+6)^0]
  1813                          ;lcd.c: 39: k++;
  1814  35E5  75                	inc	x
  1815                          ;lcd.c: 40: break;
  1816  35E6  7D 35F4           	jmp	l45
  1817                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
  1818  35E9                    l46:
  1819                          ; DisplayPMxx@k loaded to x
  1820  35E9  58 6A             	mov	x, [(??_DisplayPMxx+6)^0]
  1821                          ;lcd.c: 42: else
  1822                          ;lcd.c: 43: {
  1823                          ;lcd.c: 44: DisplayBuf[k] = 0;
  1824  35EB  56 49  00         	mov	[x+_DisplayBuf], 0
  1825                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
  1826                          ;lcd.c: 45: }
  1827                          ;lcd.c: 46: k++;
  1828  35EE  75                	inc	x
  1829                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
  1830  35EF                    l43:
  1831  35EF  5B                	mov	a, x
  1832  35F0  39 02             	cmp	a, 2
  1833  35F2  CFD9              	jc	l44
  1834                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
  1835  35F4                    l45:
  1836                          ;DisplayPMxx@k stored from x
  1837  35F4  5A 6A             	mov	[(??_DisplayPMxx+6)^0], x
  1838                          ;lcd.c: 47: }
  1839                          ;lcd.c: 49: for (;k<3;k++)
  1840  35F6  5B                	mov	a, x
  1841  35F7  39 03             	cmp	a, 3
  1842  35F9  D019              	jnc	l49
  1843                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
  1844  35FB                    l48:
  1845                          ;lcd.c: 50: {
  1846                          ;lcd.c: 51: DisplayBuf[k] = DigitSeg[DisplayNum[k]];
  1847  35FB  51 6A             	mov	a, [(??_DisplayPMxx+6)^0]
  1848  35FD  01 28             	add	a, <(<_DisplayNum)
  1849  35FF  5C                	mov	x, a
  1850  3600  52 00             	mov	a, [x+0]
  1851  3602  01 00             	add	a, <_DigitSeg
  1852  3604  5C                	mov	x, a
  1853  3605  50 3E             	mov	a, >_DigitSeg
  1854  3607  28                	romx
  1855  3608  58 6A             	mov	x, [(??_DisplayPMxx+6)^0]
  1856  360A  54 49             	mov	[x+_DisplayBuf], a
  1857  360C  76 6A             	inc	[(??_DisplayPMxx+6)^0]
  1858  360E  3C 6A  03         	cmp	[(??_DisplayPMxx+6)^0], 3
  1859  3611  CFE9              	jc	l48
  1860                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
  1861  3613                    l49:
  1862                          ;lcd.c: 52: }
  1863                          ;lcd.c: 53: }
  1864                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
  1865  3613  7F                	ret
  1866  3614                    __end_of_DisplayPMxx:
  1867                          ; =============== function _DisplayPMxx ends ============
  1868                          ; *************** function _ShowHumiTemp *****************
  1869                          ; Defined at:
  1870                          ;		line 78 in file "./lcd.c"
  1871                          ; Parameters:
  1872                          ;		value       	reg:    a	type: char 
  1873                          ; Auto variables:
  1874                          ;		value       	       	type: char 
  1875                          ;		temp        	       	type: char 
  1876                          ;		index       	       	type: unsigned char 
  1877                          ; Return value:
  1878                          ;		type: void 
  1879                          ;		size: 0
  1880                          ; Registers used:
  1881                          ;		a, x, CUR_PP
  1882                          ; Tracked objects:
  1883                          ;		On entry : CUR_PP=0 IDX_PP=0 XIO=0 PG? MVR_PP? MVW_PP? 
  1884                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  1885                          ;		Unchanged: MVR_PP MVW_PP 
  1886                          ; Data sizes:
  1887                          ;		Autos:    3
  1888                          ;		Params:   0
  1889                          ;		Temp:     2
  1890                          ;		Total:    5
  1891                          ; This function calls:
  1892                          ;		_abs
  1893                          ;		___awdiv
  1894                          ;		___awmod
  1895                          ; This function is called by:
  1896                          ;		_LCDOuputAll
  1897                          ; This function uses a non-reentrant model
  1898                          ; 
  1899  0098                    __size_of_ShowHumiTemp	equ	__end_of_ShowHumiTemp-_ShowHumiTemp
  1900                          ;lcd.c: 77: void ShowHumiTemp(signed char value)
  1901                          ;lcd.c: 78: {
  1902                          ;			CUR_PP=0 IDX_PP=0 XIO=0 PG=2 
  1903  3614                    _ShowHumiTemp:
  1904                          ;ShowHumiTemp@value stored from a
  1905  3614  53 64             	mov	[??_ShowHumiTemp^0], a
  1906                          ;lcd.c: 79: signed char temp = value;
  1907  3616  58 64             	mov	x, [??_ShowHumiTemp^0]
  1908                          ;lcd.c: 80: unsigned char index;
  1909                          ;lcd.c: 81: if (temp > 99)
  1910  3618  5B                	mov	a, x
  1911  3619  31 80             	xor	a, 0x80
  1912  361B  39 E4             	cmp	a, 228
  1913  361D  C003              	jc	l56
  1914                          ;lcd.c: 82: {
  1915                          ;lcd.c: 83: temp = 99;
  1916  361F  57 63             	mov	x, 99
  1917                          ;			CUR_PP=0 IDX_PP=0 XIO=0 PG=2 
  1918  3621                    l56:
  1919                          ;ShowHumiTemp@temp stored from x
  1920  3621  5A 65             	mov	[(??_ShowHumiTemp+1)^0], x
  1921                          ;lcd.c: 84: }
  1922                          ;lcd.c: 86: if (temp < 0)
  1923  3623  5B                	mov	a, x
  1924  3624  31 80             	xor	a, 0x80
  1925  3626  39 80             	cmp	a, 128
  1926  3628  D02E              	jnc	l57
  1927                          ;lcd.c: 87: {
  1928                          ;lcd.c: 88: DisplayBuf[9] = 0x20;
  1929  362A  55 52  20         	mov	[(_DisplayBuf+9)^0], 32
  1930                          ;lcd.c: 89: temp = abs(temp);
  1931  362D  51 65             	mov	a, [(??_ShowHumiTemp+1)^0]
  1932  362F  53 68             	mov	[(??_ShowHumiTemp^0+4)], a
  1933  3631  55 67  00         	mov	[(??_ShowHumiTemp^0+3)], 0
  1934  3634  6A                	rlc	a
  1935  3635  1E 67  00         	sbb	[(??_ShowHumiTemp^0+3)], 0
  1936  3638  51 68             	mov	a, [(??_ShowHumiTemp^0+4)]
  1937  363A  58 67             	mov	x, [(??_ShowHumiTemp^0+3)]
  1938  363C  7C 386A           	call	_abs
  1939  363F  53 65             	mov	[(??_ShowHumiTemp+1)^0], a
  1940                          ;lcd.c: 90: if (temp > 9)
  1941  3641  51 65             	mov	a, [(??_ShowHumiTemp+1)^0]
  1942  3643  31 80             	xor	a, 0x80
  1943  3645  39 8A             	cmp	a, 138
  1944  3647  C004              	jc	l58
  1945                          ;lcd.c: 91: {
  1946                          ;lcd.c: 92: temp = 9;
  1947  3649  55 65  09         	mov	[(??_ShowHumiTemp+1)^0], 9
  1948                          ;			CUR_PP=0 IDX_PP=0 XIO=0 PG=2 
  1949  364C                    l58:
  1950                          ;lcd.c: 93: }
  1951                          ;lcd.c: 94: DisplayBuf[8] = DigitSegSwap[temp];
  1952  364C  51 65             	mov	a, [(??_ShowHumiTemp+1)^0]
  1953  364E  01 0A             	add	a, <_DigitSegSwap
  1954  3650  5C                	mov	x, a
  1955  3651  50 3E             	mov	a, >_DigitSegSwap
  1956  3653  28                	romx
  1957  3654  53 51             	mov	[(_DisplayBuf+8)^0], a
  1958                          ;lcd.c: 95: }
  1959  3656  7F                	ret
  1960                          ;			CUR_PP=0 IDX_PP=0 XIO=0 PG=2 
  1961  3657                    l57:
  1962                          ;lcd.c: 96: else
  1963                          ;lcd.c: 97: {
  1964                          ;lcd.c: 98: index = temp/10;
  1965  3657  55 69  00         	mov	[?___awdiv^0], 0
  1966  365A  55 6A  0A         	mov	[(?___awdiv^0+1)], 10
  1967  365D  51 65             	mov	a, [(??_ShowHumiTemp+1)^0]
  1968  365F  53 68             	mov	[(??_ShowHumiTemp^0+4)], a
  1969  3661  55 67  00         	mov	[(??_ShowHumiTemp^0+3)], 0
  1970  3664  6A                	rlc	a
  1971  3665  1E 67  00         	sbb	[(??_ShowHumiTemp^0+3)], 0
  1972  3668  51 68             	mov	a, [(??_ShowHumiTemp^0+4)]
  1973  366A  58 67             	mov	x, [(??_ShowHumiTemp^0+3)]
  1974  366C  7C 3883           	call	___awdiv
  1975  366F  53 66             	mov	[(??_ShowHumiTemp+2)^0], a
  1976                          ;lcd.c: 99: if(index)
  1977  3671  51 66             	mov	a, [(??_ShowHumiTemp+2)^0]
  1978  3673  A00E              	jz	l60
  1979                          ;lcd.c: 100: {
  1980                          ;lcd.c: 101: DisplayBuf[9] = DigitSegSwap[index];
  1981  3675  51 66             	mov	a, [(??_ShowHumiTemp+2)^0]
  1982  3677  01 0A             	add	a, <_DigitSegSwap
  1983  3679  5C                	mov	x, a
  1984  367A  50 3E             	mov	a, >_DigitSegSwap
  1985  367C  28                	romx
  1986  367D  53 52             	mov	[(_DisplayBuf+9)^0], a
  1987                          ;lcd.c: 102: }
  1988  367F  7D 3685           	jmp	l61
  1989                          ;			CUR_PP=0 XIO=0 
  1990  3682                    l60:
  1991                          ;lcd.c: 103: else
  1992                          ;lcd.c: 104: {
  1993                          ;lcd.c: 105: DisplayBuf[9] = 0;
  1994  3682  55 52  00         	mov	[(_DisplayBuf+9)^0], 0
  1995                          ;			CUR_PP=0 XIO=0 
  1996  3685                    l61:
  1997                          ;lcd.c: 106: }
  1998                          ;lcd.c: 108: index = temp%10;
  1999  3685  55 69  00         	mov	[?___awmod^0], 0
  2000  3688  55 6A  0A         	mov	[(?___awmod^0+1)], 10
  2001  368B  51 65             	mov	a, [(??_ShowHumiTemp+1)^0]
  2002  368D  53 68             	mov	[(??_ShowHumiTemp^0+4)], a
  2003  368F  55 67  00         	mov	[(??_ShowHumiTemp^0+3)], 0
  2004  3692  6A                	rlc	a
  2005  3693  1E 67  00         	sbb	[(??_ShowHumiTemp^0+3)], 0
  2006  3696  51 68             	mov	a, [(??_ShowHumiTemp^0+4)]
  2007  3698  58 67             	mov	x, [(??_ShowHumiTemp^0+3)]
  2008  369A  71 80             	or	f, 0x80	;select multiple RAM page mode
  2009  369C  7C 3925           	call	___awmod
  2010  369F  53 66             	mov	[(??_ShowHumiTemp+2)^0], a
  2011                          ;lcd.c: 109: DisplayBuf[8] = DigitSegSwap[index];
  2012  36A1  51 66             	mov	a, [(??_ShowHumiTemp+2)^0]
  2013  36A3  01 0A             	add	a, <_DigitSegSwap
  2014  36A5  5C                	mov	x, a
  2015  36A6  50 3E             	mov	a, >_DigitSegSwap
  2016  36A8  28                	romx
  2017  36A9  53 51             	mov	[(_DisplayBuf+8)^0], a
  2018                          ;			CUR_PP=0 XIO=0 
  2019                          ;lcd.c: 110: }
  2020                          ;lcd.c: 111: }
  2021                          ;			CUR_PP=0 XIO=0 
  2022  36AB  7F                	ret
  2023  36AC                    __end_of_ShowHumiTemp:
  2024                          ; =============== function _ShowHumiTemp ends ============
  2025                          ; *************** function _ShowLife *****************
  2026                          ; Defined at:
  2027                          ;		line 56 in file "./lcd.c"
  2028                          ; Parameters:
  2029                          ;		life        	reg:    a	type: unsigned char 
  2030                          ; Auto variables:
  2031                          ;		life        	       	type: unsigned char 
  2032                          ;		temp        	       	type: unsigned char 
  2033                          ;		index       	       	type: unsigned char 
  2034                          ; Return value:
  2035                          ;		type: void 
  2036                          ;		size: 0
  2037                          ; Registers used:
  2038                          ;		a, x, CUR_PP
  2039                          ; Tracked objects:
  2040                          ;		On entry : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  2041                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  2042                          ;		Unchanged: MVR_PP MVW_PP 
  2043                          ; Data sizes:
  2044                          ;		Autos:    3
  2045                          ;		Params:   0
  2046                          ;		Temp:     0
  2047                          ;		Total:    3
  2048                          ; This function calls:
  2049                          ;		___lbdiv
  2050                          ;		___lbmod
  2051                          ; This function is called by:
  2052                          ;		_LCDOuputAll
  2053                          ; This function uses a non-reentrant model
  2054                          ; 
  2055  0040                    __size_of_ShowLife	equ	__end_of_ShowLife-_ShowLife
  2056                          ;lcd.c: 55: void ShowLife(unsigned char life)
  2057                          ;lcd.c: 56: {
  2058                          ;			CUR_PP=0 XIO=0 PG=2 
  2059  36AC                    _ShowLife:
  2060                          ;ShowLife@life stored from a
  2061  36AC  53 64             	mov	[??_ShowLife^0], a
  2062                          ;lcd.c: 57: unsigned char temp = life;
  2063  36AE  51 64             	mov	a, [??_ShowLife^0]
  2064                          ;ShowLife@temp stored from a
  2065  36B0  53 66             	mov	[(??_ShowLife+2)^0], a
  2066                          ;lcd.c: 58: unsigned char index;
  2067                          ;lcd.c: 59: if (temp > 99)
  2068  36B2  39 64             	cmp	a, 100
  2069  36B4  C004              	jc	l52
  2070                          ;lcd.c: 60: {
  2071                          ;lcd.c: 61: temp = 99;
  2072  36B6  55 66  63         	mov	[(??_ShowLife+2)^0], 99
  2073                          ;			CUR_PP=0 XIO=0 PG=2 
  2074  36B9                    l52:
  2075                          ;lcd.c: 62: }
  2076                          ;lcd.c: 64: index = temp/10;
  2077  36B9  51 66             	mov	a, [(??_ShowLife+2)^0]
  2078  36BB  57 0A             	mov	x, 10
  2079  36BD  7C 37C1           	call	___lbdiv
  2080  36C0  53 65             	mov	[(??_ShowLife+1)^0], a
  2081                          ;lcd.c: 65: if(index)
  2082  36C2  51 65             	mov	a, [(??_ShowLife+1)^0]
  2083  36C4  A00E              	jz	l53
  2084                          ;lcd.c: 66: {
  2085                          ;lcd.c: 67: DisplayBuf[3] = DigitSeg[index];
  2086  36C6  51 65             	mov	a, [(??_ShowLife+1)^0]
  2087  36C8  01 00             	add	a, <_DigitSeg
  2088  36CA  5C                	mov	x, a
  2089  36CB  50 3E             	mov	a, >_DigitSeg
  2090  36CD  28                	romx
  2091  36CE  53 4C             	mov	[(_DisplayBuf+3)^0], a
  2092                          ;lcd.c: 68: }
  2093  36D0  7D 36D6           	jmp	l54
  2094                          ;			CUR_PP=0 XIO=0 
  2095  36D3                    l53:
  2096                          ;lcd.c: 69: else
  2097                          ;lcd.c: 70: {
  2098                          ;lcd.c: 71: DisplayBuf[3] = 0;
  2099  36D3  55 4C  00         	mov	[(_DisplayBuf+3)^0], 0
  2100                          ;			CUR_PP=0 XIO=0 
  2101  36D6                    l54:
  2102                          ;lcd.c: 72: }
  2103                          ;lcd.c: 74: index = temp%10;
  2104  36D6  51 66             	mov	a, [(??_ShowLife+2)^0]
  2105  36D8  57 0A             	mov	x, 10
  2106  36DA  71 80             	or	f, 0x80	;select multiple RAM page mode
  2107  36DC  7C 3901           	call	___lbmod
  2108  36DF  53 65             	mov	[(??_ShowLife+1)^0], a
  2109                          ;lcd.c: 75: DisplayBuf[4] = DigitSeg[index];
  2110  36E1  51 65             	mov	a, [(??_ShowLife+1)^0]
  2111  36E3  01 00             	add	a, <_DigitSeg
  2112  36E5  5C                	mov	x, a
  2113  36E6  50 3E             	mov	a, >_DigitSeg
  2114  36E8  28                	romx
  2115  36E9  53 4D             	mov	[(_DisplayBuf+4)^0], a
  2116                          ;lcd.c: 76: }
  2117                          ;			CUR_PP=0 XIO=0 
  2118  36EB  7F                	ret
  2119  36EC                    __end_of_ShowLife:
  2120                          ; =============== function _ShowLife ends ============
  2121                          ; *************** function _SendCmd *****************
  2122                          ; Defined at:
  2123                          ;		line 68 in file "./ht1621b.c"
  2124                          ; Parameters:
  2125                          ;		command     	reg:    a	type: unsigned char 
  2126                          ; Auto variables:
  2127                          ;		command     	       	type: unsigned char 
  2128                          ; Return value:
  2129                          ;		type: void 
  2130                          ;		size: 0
  2131                          ; Registers used:
  2132                          ;		a, x, CUR_PP
  2133                          ; Tracked objects:
  2134                          ;		On entry : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  2135                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  2136                          ;		Unchanged: IDX_PP MVR_PP MVW_PP 
  2137                          ; Data sizes:
  2138                          ;		Autos:    1
  2139                          ;		Params:   0
  2140                          ;		Temp:     0
  2141                          ;		Total:    1
  2142                          ; This function calls:
  2143                          ;		_SendBit_1621
  2144                          ;		_delay_us
  2145                          ; This function is called by:
  2146                          ;		_HT1621B_Init
  2147                          ; This function uses a non-reentrant model
  2148                          ; 
  2149  0021                    __size_of_SendCmd	equ	__end_of_SendCmd-_SendCmd
  2150                          ;ht1621b.c: 67: void SendCmd(unsigned char command)
  2151                          ;ht1621b.c: 68: {
  2152                          ;			CUR_PP=0 XIO=0 PG=2 
  2153  36EC                    _SendCmd:
  2154                          ;SendCmd@command stored from a
  2155  36EC  53 63             	mov	[??_SendCmd^0], a
  2156                          ;ht1621b.c: 69: (PRT0DR &= ~0x80);
  2157  36EE  41 00 7F          	and	reg[0], 0x7F
  2158                          ;ht1621b.c: 70: SendBit_1621(0x80,3);
  2159  36F1  50 80             	mov	a, 128
  2160  36F3  57 03             	mov	x, 3
  2161  36F5  7C 3786           	call	_SendBit_1621
  2162                          ;ht1621b.c: 71: SendBit_1621(command,9);
  2163  36F8  51 63             	mov	a, [??_SendCmd^0]
  2164  36FA  57 09             	mov	x, 9
  2165  36FC  71 80             	or	f, 0x80	;select multiple RAM page mode
  2166  36FE  7C 3786           	call	_SendBit_1621
  2167                          ;ht1621b.c: 72: (PRT0DR |= 0x80);
  2168  3701  43 00 80          	or	reg[0], 0x80
  2169                          ;ht1621b.c: 73: delay_us(4);
  2170  3704  50 04             	mov	a, 4
  2171  3706  57 00             	mov	x, 0
  2172  3708  71 80             	or	f, 0x80	;select multiple RAM page mode
  2173  370A  7D 3B6C           	jmp	_delay_us
  2174                          ;ht1621b.c: 74: }
  2175                          ;			CUR_PP=0 XIO=0 
  2176  370D                    __end_of_SendCmd:
  2177                          ; =============== function _SendCmd ends ============
  2178                          ; *************** function _Si7020SendCommand *****************
  2179                          ; Defined at:
  2180                          ;		line 10 in file "./si7020.c"
  2181                          ; Parameters:
  2182                          ;		cmd         	reg:    a	type: unsigned char 
  2183                          ; Auto variables:
  2184                          ;		cmd         	       	type: unsigned char 
  2185                          ; Return value:
  2186                          ;		type: unsigned char 
  2187                          ;		size: 1
  2188                          ; Registers used:
  2189                          ;		a, x, CUR_PP
  2190                          ; Tracked objects:
  2191                          ;		On entry : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  2192                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  2193                          ;		Unchanged: IDX_PP MVR_PP MVW_PP 
  2194                          ; Data sizes:
  2195                          ;		Autos:    1
  2196                          ;		Params:   0
  2197                          ;		Temp:     0
  2198                          ;		Total:    1
  2199                          ; This function calls:
  2200                          ;		_ISendByte
  2201                          ; This function is called by:
  2202                          ;		_main
  2203                          ;		_Si7020Read_Temp_after_RHM
  2204                          ; This function uses a non-reentrant model
  2205                          ; 
  2206  0009                    __size_of_Si7020SendCommand	equ	__end_of_Si7020SendCommand-_Si7020SendCommand
  2207                          ;si7020.c: 9: unsigned char Si7020SendCommand(char cmd)
  2208                          ;si7020.c: 10: {
  2209                          ;			CUR_PP=0 XIO=0 PG=2 
  2210  370D                    _Si7020SendCommand:
  2211                          ;Si7020SendCommand@cmd stored from a
  2212  370D  53 65             	mov	[??_Si7020SendCommand^0], a
  2213                          ;si7020.c: 11: return(ISendByte(0x80,cmd));
  2214  370F  50 80             	mov	a, 128
  2215  3711  58 65             	mov	x, [??_Si7020SendCommand^0]
  2216  3713  7D 3A56           	jmp	_ISendByte
  2217                          ;si7020.c: 12: }
  2218                          ;			CUR_PP=0 XIO=0 
  2219  3716                    __end_of_Si7020SendCommand:
  2220                          ; =============== function _Si7020SendCommand ends ============
  2221                          ; *************** function _IRcvBytes *****************
  2222                          ; Defined at:
  2223                          ;		line 301 in file "./software_iic.c"
  2224                          ; Parameters:
  2225                          ;		sla         	reg:    a	type: unsigned char 
  2226                          ;		s           	reg:    x	type: PTR unsigned char ; Largest target is 5
  2227                          ;		 -> RecBuf(5), 
  2228                          ;		no          	offs:   0	type: unsigned char 
  2229                          ; Auto variables:
  2230                          ;		s           	       	type: PTR unsigned char ; Largest target is 5
  2231                          ;		 -> RecBuf(5), 
  2232                          ;		sla         	       	type: unsigned char 
  2233                          ;		i           	       	type: unsigned char 
  2234                          ; Return value:
  2235                          ;		type: unsigned char 
  2236                          ;		size: 1
  2237                          ; Registers used:
  2238                          ;		a, x, CUR_PP
  2239                          ; Tracked objects:
  2240                          ;		On entry : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  2241                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  2242                          ;		Unchanged: MVR_PP MVW_PP 
  2243                          ; Data sizes:
  2244                          ;		Autos:    3
  2245                          ;		Params:   1
  2246                          ;		Temp:     2
  2247                          ;		Total:    6
  2248                          ; This function calls:
  2249                          ;		_Start_I2c
  2250                          ;		_SendByte
  2251                          ;		_Stop_I2c
  2252                          ;		_RcvByte
  2253                          ;		_Ack_I2c
  2254                          ; This function is called by:
  2255                          ;		_Si7020Read_RH_NHM
  2256                          ;		_Si7020Read_Temp_after_RHM
  2257                          ; This function uses a non-reentrant model
  2258                          ; 
  2259  0070                    __size_of_IRcvBytes	equ	__end_of_IRcvBytes-_IRcvBytes
  2260                          ;software_iic.c: 300: unsigned char IRcvBytes(unsigned char sla,unsigned char *s,unsigned char no)
  2261                          ;software_iic.c: 301: {
  2262                          ;			CUR_PP=0 XIO=0 PG=2 
  2263  3716                    _IRcvBytes:
  2264                          ;IRcvBytes@sla stored from a
  2265  3716  53 67             	mov	[(??_IRcvBytes+1)^0], a
  2266                          ;IRcvBytes@s stored from x
  2267  3718  5A 66             	mov	[??_IRcvBytes^0], x
  2268                          ;software_iic.c: 302: unsigned char i;
  2269                          ;software_iic.c: 304: Start_I2c();
  2270  371A  7C 3AAD           	call	_Start_I2c
  2271                          ;software_iic.c: 305: SendByte(sla+1);
  2272  371D  50 01             	mov	a, 1
  2273  371F  02 67             	add	a, [(??_IRcvBytes+1)^0]
  2274  3721  71 80             	or	f, 0x80	;select multiple RAM page mode
  2275  3723  7C 3AD2           	call	_SendByte
  2276                          ;software_iic.c: 306: if(ack==0)
  2277  3726  51 46             	mov	a, [_ack^0]
  2278  3728  B009              	jnz	l232
  2279                          ;software_iic.c: 307: {
  2280                          ;software_iic.c: 308: Stop_I2c();
  2281  372A  71 80             	or	f, 0x80	;select multiple RAM page mode
  2282  372C  7C 3A8B           	call	_Stop_I2c
  2283                          ;software_iic.c: 309: return(0);
  2284  372F  50 00             	mov	a, 0
  2285  3731  7F                	ret
  2286                          ;			CUR_PP=0 XIO=0 
  2287  3732                    l232:
  2288                          ;software_iic.c: 310: }
  2289                          ;software_iic.c: 311: for(i=0;i<no-1;i++)
  2290  3732  55 68  00         	mov	[(??_IRcvBytes+2)^0], 0
  2291  3735  7D 374F           	jmp	l236
  2292                          ;			CUR_PP=0 XIO=0 
  2293  3738                    l233:
  2294                          ;software_iic.c: 312: {
  2295                          ;software_iic.c: 313: *s=RcvByte();
  2296  3738  71 80             	or	f, 0x80	;select multiple RAM page mode
  2297  373A  7C 39C4           	call	_RcvByte
  2298  373D  58 66             	mov	x, [??_IRcvBytes^0]
  2299  373F  62 D3 00          	mov	reg[211], 0
  2300  3742  54 00             	mov	[x+0], a
  2301                          ;software_iic.c: 314: Ack_I2c(0);
  2302  3744  50 00             	mov	a, 0
  2303  3746  71 80             	or	f, 0x80	;select multiple RAM page mode
  2304  3748  7C 3998           	call	_Ack_I2c
  2305                          ;software_iic.c: 315: s++;
  2306  374B  76 66             	inc	[??_IRcvBytes^0]
  2307  374D  76 68             	inc	[(??_IRcvBytes+2)^0]
  2308                          ;			CUR_PP=0 XIO=0 
  2309  374F                    l236:
  2310  374F  5F 6A  65         	mov	[(??_IRcvBytes^0+4)], [?_IRcvBytes^0]
  2311  3752  55 69  00         	mov	[(??_IRcvBytes^0+3)], 0
  2312  3755  06 6A  FF         	add	[(??_IRcvBytes^0+4)], 255
  2313  3758  0E 69  FF         	adc	[(??_IRcvBytes^0+3)], 255
  2314  375B  51 69             	mov	a, [(??_IRcvBytes^0+3)]
  2315  375D  31 80             	xor	a, 0x80
  2316  375F  39 80             	cmp	a, 128
  2317  3761  72 04             	xor	f, 4
  2318  3763  B005              	jnz	u343
  2319  3765  51 68             	mov	a, [(??_IRcvBytes+2)^0]
  2320  3767  3A 6A             	cmp	a, [(??_IRcvBytes^0+4)]
  2321  3769                    u343:
  2322  3769  CFCE              	jc	l233
  2323                          ;			CUR_PP=0 XIO=0 
  2324                          ;software_iic.c: 316: }
  2325                          ;software_iic.c: 317: *s=RcvByte();
  2326  376B  71 80             	or	f, 0x80	;select multiple RAM page mode
  2327  376D  7C 39C4           	call	_RcvByte
  2328  3770  58 66             	mov	x, [??_IRcvBytes^0]
  2329  3772  62 D3 00          	mov	reg[211], 0
  2330  3775  54 00             	mov	[x+0], a
  2331                          ;software_iic.c: 318: Ack_I2c(1);
  2332  3777  50 01             	mov	a, 1
  2333  3779  71 80             	or	f, 0x80	;select multiple RAM page mode
  2334  377B  7C 3998           	call	_Ack_I2c
  2335                          ;software_iic.c: 319: Stop_I2c();
  2336  377E  71 80             	or	f, 0x80	;select multiple RAM page mode
  2337  3780  7C 3A8B           	call	_Stop_I2c
  2338                          ;software_iic.c: 320: return(1);
  2339  3783  50 01             	mov	a, 1
  2340                          ;software_iic.c: 321: }
  2341                          ;			CUR_PP=0 XIO=0 
  2342  3785  7F                	ret
  2343  3786                    __end_of_IRcvBytes:
  2344                          ; =============== function _IRcvBytes ends ============
  2345                          ; *************** function _SendBit_1621 *****************
  2346                          ; Defined at:
  2347                          ;		line 28 in file "./ht1621b.c"
  2348                          ; Parameters:
  2349                          ;		data        	reg:    a	type: unsigned char 
  2350                          ;		cnt         	reg:    x	type: unsigned char 
  2351                          ; Auto variables:
  2352                          ;		cnt         	       	type: unsigned char 
  2353                          ;		data        	       	type: unsigned char 
  2354                          ;		i           	       	type: unsigned char 
  2355                          ; Return value:
  2356                          ;		type: void 
  2357                          ;		size: 0
  2358                          ; Registers used:
  2359                          ;		a, x, CUR_PP
  2360                          ; Tracked objects:
  2361                          ;		On entry : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  2362                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  2363                          ;		Unchanged: IDX_PP MVR_PP MVW_PP 
  2364                          ; Data sizes:
  2365                          ;		Autos:    3
  2366                          ;		Params:   0
  2367                          ;		Temp:     0
  2368                          ;		Total:    3
  2369                          ; This function calls:
  2370                          ;		_delay_us
  2371                          ; This function is called by:
  2372                          ;		_SendCmd
  2373                          ;		_WriteAll_1621
  2374                          ; This function uses a non-reentrant model
  2375                          ; 
  2376  003B                    __size_of_SendBit_1621	equ	__end_of_SendBit_1621-_SendBit_1621
  2377                          ;ht1621b.c: 27: void SendBit_1621(unsigned char data,unsigned char cnt)
  2378                          ;ht1621b.c: 28: {
  2379                          ;			CUR_PP=0 XIO=0 PG=2 
  2380  3786                    _SendBit_1621:
  2381                          ;SendBit_1621@data stored from a
  2382  3786  53 69             	mov	[(??_SendBit_1621+1)^0], a
  2383                          ;SendBit_1621@cnt stored from x
  2384  3788  5A 68             	mov	[??_SendBit_1621^0], x
  2385                          ;ht1621b.c: 29: unsigned char i;
  2386                          ;ht1621b.c: 30: for(i =0; i <cnt; i ++)
  2387  378A  50 00             	mov	a, 0
  2388  378C  7D 37BA           	jmp	l17
  2389                          ;			CUR_PP=0 XIO=0 
  2390  378F                    l14:
  2391                          ;ht1621b.c: 31: {
  2392                          ;ht1621b.c: 32: if((data&0x80)==0)
  2393  378F  3C 69  80         	cmp	[(??_SendBit_1621+1)^0], 128
  2394  3792  D007              	jnc	l18
  2395                          ;ht1621b.c: 33: {
  2396                          ;ht1621b.c: 34: (PRT0DR &= ~0x02);
  2397  3794  41 00 FD          	and	reg[0], 0xFD
  2398                          ;ht1621b.c: 35: }
  2399  3797  7D 379D           	jmp	l19
  2400                          ;			CUR_PP=0 XIO=0 
  2401  379A                    l18:
  2402                          ;ht1621b.c: 36: else
  2403                          ;ht1621b.c: 37: {
  2404                          ;ht1621b.c: 38: (PRT0DR |= 0x02);
  2405  379A  43 00 02          	or	reg[0], 2
  2406                          ;			CUR_PP=0 XIO=0 
  2407  379D                    l19:
  2408                          ;ht1621b.c: 39: }
  2409                          ;ht1621b.c: 40: delay_us(4);
  2410  379D  50 04             	mov	a, 4
  2411  379F  57 00             	mov	x, 0
  2412  37A1  71 80             	or	f, 0x80	;select multiple RAM page mode
  2413  37A3  7C 3B6C           	call	_delay_us
  2414                          ;ht1621b.c: 41: (PRT0DR &= ~0x08);
  2415  37A6  41 00 F7          	and	reg[0], 0xF7
  2416                          ;ht1621b.c: 42: delay_us(4);
  2417  37A9  50 04             	mov	a, 4
  2418  37AB  57 00             	mov	x, 0
  2419  37AD  71 80             	or	f, 0x80	;select multiple RAM page mode
  2420  37AF  7C 3B6C           	call	_delay_us
  2421                          ;ht1621b.c: 43: (PRT0DR |= 0x08);
  2422  37B2  43 00 08          	or	reg[0], 8
  2423                          ;ht1621b.c: 44: data<<=1;
  2424  37B5  65 69             	asl	[(??_SendBit_1621+1)^0]
  2425                          ; SendBit_1621@i loaded to a
  2426  37B7  51 6A             	mov	a, [(??_SendBit_1621+2)^0]
  2427  37B9  74                	inc	a
  2428                          ;			CUR_PP=0 XIO=0 
  2429  37BA                    l17:
  2430                          ;SendBit_1621@i stored from a
  2431  37BA  53 6A             	mov	[(??_SendBit_1621+2)^0], a
  2432  37BC  3A 68             	cmp	a, [??_SendBit_1621^0]
  2433  37BE  CFD0              	jc	l14
  2434                          ;			CUR_PP=0 XIO=0 
  2435                          ;ht1621b.c: 45: }
  2436                          ;ht1621b.c: 46: }
  2437                          ;			CUR_PP=0 XIO=0 
  2438  37C0  7F                	ret
  2439  37C1                    __end_of_SendBit_1621:
  2440                          ; =============== function _SendBit_1621 ends ============
  2441                          ; *************** function ___lbdiv *****************
  2442                          ; Defined at:
  2443                          ;		line 5 in file "C:\Program Files (x86)\HI-TECH Software\HCPSOC\PRO\9.61\sources\lbdiv.c"
  2444                          ; Parameters:
  2445                          ;		dividend    	reg:    a	type: unsigned char 
  2446                          ;		divisor     	reg:    x	type: unsigned char 
  2447                          ; Auto variables:
  2448                          ;		divisor     	       	type: unsigned char 
  2449                          ;		dividend    	       	type: unsigned char 
  2450                          ;		quotient    	       	type: unsigned char 
  2451                          ;		counter     	       	type: unsigned char 
  2452                          ; Return value:
  2453                          ;		type: unsigned char 
  2454                          ;		size: 1
  2455                          ; Registers used:
  2456                          ;		a, x, CUR_PP
  2457                          ; Tracked objects:
  2458                          ;		On entry : CUR_PP=0 IDX_PP? XIO=0 PG=2 MVR_PP? MVW_PP? 
  2459                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  2460                          ;		Unchanged: MVR_PP MVW_PP 
  2461                          ; Data sizes:
  2462                          ;		Autos:    4
  2463                          ;		Params:   0
  2464                          ;		Temp:     0
  2465                          ;		Total:    4
  2466                          ; This function calls:
  2467                          ;		Nothing
  2468                          ; This function is called by:
  2469                          ;		_ShowLife
  2470                          ; This function uses a non-reentrant model
  2471                          ; 
  2472  0030                    __size_of___lbdiv	equ	__end_of___lbdiv-___lbdiv
  2473                          ;lbdiv.c: 3: unsigned char
  2474                          ;lbdiv.c: 4: __lbdiv(unsigned char dividend, unsigned char divisor)
  2475                          ;lbdiv.c: 5: {
  2476                          ;			CUR_PP=0 IDX_PP=0 XIO=0 PG=2 
  2477  37C1                    ___lbdiv:
  2478                          ;___lbdiv@dividend stored from a
  2479  37C1  53 68             	mov	[(??___lbdiv+1)^0], a
  2480                          ; ___lbdiv@divisor loaded to a
  2481  37C3  5B                	mov	a, x
  2482                          ;lbdiv.c: 6: unsigned char quotient;
  2483                          ;lbdiv.c: 7: unsigned char counter;
  2484                          ;lbdiv.c: 9: quotient = 0;
  2485  37C4  55 69  00         	mov	[(??___lbdiv+2)^0], 0
  2486                          ;lbdiv.c: 10: if(divisor != 0) {
  2487  37C7  39 00             	cmp	a, 0
  2488  37C9  A024              	jz	l272
  2489                          ;lbdiv.c: 11: counter = 1;
  2490  37CB  55 6A  01         	mov	[(??___lbdiv+3)^0], 1
  2491                          ;lbdiv.c: 12: while((divisor & 0x80) == 0) {
  2492  37CE  7D 37D4           	jmp	l273
  2493                          ;			CUR_PP=0 XIO=0 
  2494  37D1                    l274:
  2495                          ;lbdiv.c: 13: divisor <<= 1;
  2496  37D1  64                	asl	a
  2497                          ;lbdiv.c: 14: counter++;
  2498  37D2  76 6A             	inc	[(??___lbdiv+3)^0]
  2499                          ;			CUR_PP=0 XIO=0 
  2500  37D4                    l273:
  2501  37D4  39 80             	cmp	a, 128
  2502  37D6  CFFA              	jc	l274
  2503                          ;			CUR_PP=0 XIO=0 
  2504                          ;lbdiv.c: 15: }
  2505                          ;lbdiv.c: 16: do {
  2506                          ;			CUR_PP=0 XIO=0 
  2507  37D8                    l278:
  2508                          ;lbdiv.c: 17: quotient <<= 1;
  2509  37D8  65 69             	asl	[(??___lbdiv+2)^0]
  2510                          ;lbdiv.c: 18: if(divisor <= dividend) {
  2511  37DA  3A 68             	cmp	a, [(??___lbdiv+1)^0]
  2512  37DC  A003              	jz	u413
  2513  37DE  72 04             	xor	f, 4
  2514  37E0                    u413:
  2515  37E0  C006              	jc	l279
  2516                          ;lbdiv.c: 19: dividend -= divisor;
  2517  37E2  14 68             	sub	[(??___lbdiv+1)^0], a
  2518                          ;lbdiv.c: 20: quotient |= 1;
  2519  37E4  2E 69  01         	or	[(??___lbdiv+2)^0], 1
  2520                          ;			CUR_PP=0 XIO=0 
  2521  37E7                    l279:
  2522                          ;lbdiv.c: 21: }
  2523                          ;lbdiv.c: 22: divisor >>= 1;
  2524  37E7  70 FB             	and	f, 0xFB
  2525  37E9  6D                	rrc	a
  2526                          ;lbdiv.c: 23: } while(--counter != 0);
  2527  37EA  7A 6A             	dec	[(??___lbdiv+3)^0]
  2528  37EC  BFEB              	jnz	l278
  2529                          ;			CUR_PP=0 XIO=0 
  2530                          ;			CUR_PP=0 XIO=0 
  2531  37EE                    l272:
  2532                          ;lbdiv.c: 24: }
  2533                          ;lbdiv.c: 25: return quotient;
  2534  37EE  51 69             	mov	a, [(??___lbdiv+2)^0]
  2535                          ;lbdiv.c: 26: }
  2536                          ;			CUR_PP=0 XIO=0 
  2537  37F0  7F                	ret
  2538  37F1                    __end_of___lbdiv:
  2539                          ; =============== function ___lbdiv ends ============
  2540                          ; *************** function ___lwmod *****************
  2541                          ; Defined at:
  2542                          ;		line 5 in file "C:\Program Files (x86)\HI-TECH Software\HCPSOC\PRO\9.61\sources\lwmod.c"
  2543                          ; Parameters:
  2544                          ;		dividend    	reg:   xa	type: unsigned int 
  2545                          ;		divisor     	offs:   0	type: unsigned int 
  2546                          ; Auto variables:
  2547                          ;		dividend    	       	type: unsigned int 
  2548                          ;		counter     	       	type: unsigned char 
  2549                          ; Return value:
  2550                          ;		type: unsigned int 
  2551                          ;		size: 2
  2552                          ; Registers used:
  2553                          ;		a, x, CUR_PP
  2554                          ; Tracked objects:
  2555                          ;		On entry : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  2556                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  2557                          ;		Unchanged: IDX_PP MVR_PP MVW_PP 
  2558                          ; Data sizes:
  2559                          ;		Autos:    3
  2560                          ;		Params:   2
  2561                          ;		Temp:     0
  2562                          ;		Total:    5
  2563                          ; This function calls:
  2564                          ;		Nothing
  2565                          ; This function is called by:
  2566                          ;		_DisplayPMxx
  2567                          ; This function uses a non-reentrant model
  2568                          ; 
  2569  003C                    __size_of___lwmod	equ	__end_of___lwmod-___lwmod
  2570                          ;lwmod.c: 3: unsigned int
  2571                          ;lwmod.c: 4: __lwmod(unsigned int dividend, unsigned int divisor)
  2572                          ;lwmod.c: 5: {
  2573                          ;			CUR_PP=0 XIO=0 PG=2 
  2574  37F1                    ___lwmod:
  2575                          ;___lwmod@dividend stored from xa
  2576  37F1  53 6E             	mov	[(??___lwmod^0+1)], a
  2577  37F3  5A 6D             	mov	[??___lwmod^0], x
  2578                          ;lwmod.c: 6: unsigned char counter;
  2579                          ;lwmod.c: 8: if(divisor != 0) {
  2580  37F5  51 6B             	mov	a, [?___lwmod^0]
  2581  37F7  2A 6C             	or	a, [(?___lwmod^0+1)]
  2582  37F9  A02E              	jz	l263
  2583                          ;lwmod.c: 9: counter = 1;
  2584  37FB  55 6F  01         	mov	[(??___lwmod+2)^0], 1
  2585                          ;lwmod.c: 10: while((divisor & 0x8000) == 0) {
  2586  37FE  7D 3807           	jmp	l264
  2587                          ;			CUR_PP=0 XIO=0 
  2588  3801                    l265:
  2589                          ;lwmod.c: 11: divisor <<= 1;
  2590  3801  65 6C             	asl	[(?___lwmod^0+1)]
  2591  3803  6B 6B             	rlc	[?___lwmod^0]
  2592                          ;lwmod.c: 12: counter++;
  2593  3805  76 6F             	inc	[(??___lwmod+2)^0]
  2594                          ;			CUR_PP=0 XIO=0 
  2595  3807                    l264:
  2596  3807  47 6B  80         	tst	[?___lwmod^0], 128
  2597  380A  AFF6              	jz	l265
  2598                          ;			CUR_PP=0 XIO=0 
  2599                          ;lwmod.c: 13: }
  2600                          ;lwmod.c: 14: do {
  2601                          ;			CUR_PP=0 XIO=0 
  2602  380C                    l269:
  2603                          ;lwmod.c: 15: if(divisor <= dividend)
  2604  380C  51 6E             	mov	a, [(??___lwmod^0+1)]
  2605  380E  3A 6C             	cmp	a, [(?___lwmod^0+1)]
  2606  3810  51 6D             	mov	a, [??___lwmod^0]
  2607  3812  1A 6B             	sbb	a, [?___lwmod^0]
  2608  3814  C009              	jc	l270
  2609                          ;lwmod.c: 16: dividend -= divisor;
  2610  3816  51 6C             	mov	a, [(?___lwmod^0+1)]
  2611  3818  14 6E             	sub	[(??___lwmod^0+1)], a
  2612  381A  51 6B             	mov	a, [?___lwmod^0]
  2613  381C  1C 6D             	sbb	[??___lwmod^0], a
  2614                          ;			CUR_PP=0 XIO=0 
  2615  381E                    l270:
  2616                          ;lwmod.c: 17: divisor >>= 1;
  2617  381E  70 FB             	and	f, 0xFB
  2618  3820  6E 6B             	rrc	[?___lwmod^0]
  2619  3822  6E 6C             	rrc	[(?___lwmod^0+1)]
  2620                          ;lwmod.c: 18: } while(--counter != 0);
  2621  3824  7A 6F             	dec	[(??___lwmod+2)^0]
  2622  3826  BFE5              	jnz	l269
  2623                          ;			CUR_PP=0 XIO=0 
  2624                          ;			CUR_PP=0 XIO=0 
  2625  3828                    l263:
  2626                          ;lwmod.c: 19: }
  2627                          ;lwmod.c: 20: return dividend;
  2628  3828  51 6E             	mov	a, [(??___lwmod^0+1)]
  2629  382A  58 6D             	mov	x, [??___lwmod^0]
  2630                          ;lwmod.c: 21: }
  2631                          ;			CUR_PP=0 XIO=0 
  2632  382C  7F                	ret
  2633  382D                    __end_of___lwmod:
  2634                          ; =============== function ___lwmod ends ============
  2635                          ; *************** function _SendDataBit_1621 *****************
  2636                          ; Defined at:
  2637                          ;		line 48 in file "./ht1621b.c"
  2638                          ; Parameters:
  2639                          ;		data        	reg:    a	type: unsigned char 
  2640                          ;		cnt         	reg:    x	type: unsigned char 
  2641                          ; Auto variables:
  2642                          ;		cnt         	       	type: unsigned char 
  2643                          ;		data        	       	type: unsigned char 
  2644                          ;		i           	       	type: unsigned char 
  2645                          ; Return value:
  2646                          ;		type: void 
  2647                          ;		size: 0
  2648                          ; Registers used:
  2649                          ;		a, x, CUR_PP
  2650                          ; Tracked objects:
  2651                          ;		On entry : CUR_PP=0 IDX_PP=0 XIO=0 PG? MVR_PP? MVW_PP? 
  2652                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  2653                          ;		Unchanged: MVR_PP MVW_PP 
  2654                          ; Data sizes:
  2655                          ;		Autos:    3
  2656                          ;		Params:   0
  2657                          ;		Temp:     0
  2658                          ;		Total:    3
  2659                          ; This function calls:
  2660                          ;		_delay_us
  2661                          ; This function is called by:
  2662                          ;		_WriteAll_1621
  2663                          ; This function uses a non-reentrant model
  2664                          ; 
  2665  003D                    __size_of_SendDataBit_1621	equ	__end_of_SendDataBit_1621-_SendDataBit_1621
  2666                          ;ht1621b.c: 47: void SendDataBit_1621(unsigned char data,unsigned char cnt)
  2667                          ;ht1621b.c: 48: {
  2668                          ;			CUR_PP=0 IDX_PP=0 XIO=0 PG=2 
  2669  382D                    _SendDataBit_1621:
  2670                          ;SendDataBit_1621@data stored from a
  2671  382D  53 69             	mov	[(??_SendDataBit_1621+1)^0], a
  2672                          ;SendDataBit_1621@cnt stored from x
  2673  382F  5A 68             	mov	[??_SendDataBit_1621^0], x
  2674                          ;ht1621b.c: 49: unsigned char i;
  2675                          ;ht1621b.c: 50: for(i =0; i <cnt; i ++)
  2676  3831  50 00             	mov	a, 0
  2677  3833  7D 3863           	jmp	l24
  2678                          ;			CUR_PP=0 XIO=0 
  2679  3836                    l21:
  2680                          ;ht1621b.c: 51: {
  2681                          ;ht1621b.c: 52: if((data&0x01)==0)
  2682  3836  47 69  01         	tst	[(??_SendDataBit_1621+1)^0], 1
  2683  3839  B007              	jnz	l25
  2684                          ;ht1621b.c: 53: {
  2685                          ;ht1621b.c: 54: (PRT0DR &= ~0x02);
  2686  383B  41 00 FD          	and	reg[0], 0xFD
  2687                          ;ht1621b.c: 55: }
  2688  383E  7D 3844           	jmp	l26
  2689                          ;			CUR_PP=0 XIO=0 
  2690  3841                    l25:
  2691                          ;ht1621b.c: 56: else
  2692                          ;ht1621b.c: 57: {
  2693                          ;ht1621b.c: 58: (PRT0DR |= 0x02);
  2694  3841  43 00 02          	or	reg[0], 2
  2695                          ;			CUR_PP=0 XIO=0 
  2696  3844                    l26:
  2697                          ;ht1621b.c: 59: }
  2698                          ;ht1621b.c: 60: delay_us(4);
  2699  3844  50 04             	mov	a, 4
  2700  3846  57 00             	mov	x, 0
  2701  3848  71 80             	or	f, 0x80	;select multiple RAM page mode
  2702  384A  7C 3B6C           	call	_delay_us
  2703                          ;ht1621b.c: 61: (PRT0DR &= ~0x08);
  2704  384D  41 00 F7          	and	reg[0], 0xF7
  2705                          ;ht1621b.c: 62: delay_us(4);
  2706  3850  50 04             	mov	a, 4
  2707  3852  57 00             	mov	x, 0
  2708  3854  71 80             	or	f, 0x80	;select multiple RAM page mode
  2709  3856  7C 3B6C           	call	_delay_us
  2710                          ;ht1621b.c: 63: (PRT0DR |= 0x08);
  2711  3859  43 00 08          	or	reg[0], 8
  2712                          ;ht1621b.c: 64: data>>=1;
  2713  385C  70 FB             	and	f, 0xFB
  2714  385E  6E 69             	rrc	[(??_SendDataBit_1621+1)^0]
  2715                          ; SendDataBit_1621@i loaded to a
  2716  3860  51 6A             	mov	a, [(??_SendDataBit_1621+2)^0]
  2717  3862  74                	inc	a
  2718                          ;			CUR_PP=0 XIO=0 
  2719  3863                    l24:
  2720                          ;SendDataBit_1621@i stored from a
  2721  3863  53 6A             	mov	[(??_SendDataBit_1621+2)^0], a
  2722  3865  3A 68             	cmp	a, [??_SendDataBit_1621^0]
  2723  3867  CFCE              	jc	l21
  2724                          ;			CUR_PP=0 XIO=0 
  2725                          ;ht1621b.c: 65: }
  2726                          ;ht1621b.c: 66: }
  2727                          ;			CUR_PP=0 XIO=0 
  2728  3869  7F                	ret
  2729  386A                    __end_of_SendDataBit_1621:
  2730                          ; =============== function _SendDataBit_1621 ends ============
  2731                          ; *************** function _abs *****************
  2732                          ; Defined at:
  2733                          ;		line 5 in file "../common/abs.c"
  2734                          ; Parameters:
  2735                          ;		a           	reg:   xa	type: int 
  2736                          ; Auto variables:
  2737                          ;		a           	       	type: int 
  2738                          ; Return value:
  2739                          ;		type: int 
  2740                          ;		size: 2
  2741                          ; Registers used:
  2742                          ;		a, x, CUR_PP
  2743                          ; Tracked objects:
  2744                          ;		On entry : CUR_PP=0 IDX_PP=0 XIO=0 PG=2 MVR_PP? MVW_PP? 
  2745                          ;		On exit  : CUR_PP=0 IDX_PP=0 XIO=0 PG=2 MVR_PP? MVW_PP? 
  2746                          ;		Unchanged: MVR_PP MVW_PP 
  2747                          ; Data sizes:
  2748                          ;		Autos:    2
  2749                          ;		Params:   0
  2750                          ;		Temp:     0
  2751                          ;		Total:    2
  2752                          ; This function calls:
  2753                          ;		Nothing
  2754                          ; This function is called by:
  2755                          ;		_ShowHumiTemp
  2756                          ; This function uses a non-reentrant model
  2757                          ; 
  2758  0019                    __size_of_abs	equ	__end_of_abs-_abs
  2759                          ;abs.c: 3: int
  2760                          ;abs.c: 4: abs(int a)
  2761                          ;abs.c: 5: {
  2762                          ;			CUR_PP=0 IDX_PP=0 XIO=0 PG=2 
  2763  386A                    _abs:
  2764                          ;abs@a stored from xa
  2765  386A  53 6A             	mov	[(??_abs^0+1)], a
  2766  386C  5A 69             	mov	[??_abs^0], x
  2767                          ;abs.c: 6: if(a < 0)
  2768  386E  47 69  80         	tst	[??_abs^0], 128
  2769  3871  A00C              	jz	l242
  2770                          ;abs.c: 7: return -a;
  2771  3873  50 00             	mov	a, 0
  2772  3875  12 6A             	sub	a, [(??_abs^0+1)]
  2773  3877  5C                	mov	x, a
  2774  3878  50 00             	mov	a, 0
  2775  387A  1A 69             	sbb	a, [??_abs^0]
  2776  387C  4B                	swap	a, x
  2777  387D  7F                	ret
  2778                          ;			CUR_PP=0 IDX_PP=0 XIO=0 PG=2 
  2779  387E                    l242:
  2780                          ;abs.c: 8: return a;
  2781  387E  51 6A             	mov	a, [(??_abs^0+1)]
  2782  3880  58 69             	mov	x, [??_abs^0]
  2783                          ;abs.c: 9: }
  2784                          ;			CUR_PP=0 IDX_PP=0 XIO=0 PG=2 
  2785  3882  7F                	ret
  2786  3883                    __end_of_abs:
  2787                          ; =============== function _abs ends ============
  2788                          ; *************** function ___awdiv *****************
  2789                          ; Defined at:
  2790                          ;		line 5 in file "C:\Program Files (x86)\HI-TECH Software\HCPSOC\PRO\9.61\sources\awdiv.c"
  2791                          ; Parameters:
  2792                          ;		dividend    	reg:   xa	type: int 
  2793                          ;		divisor     	offs:   0	type: int 
  2794                          ; Auto variables:
  2795                          ;		dividend    	       	type: int 
  2796                          ;		quotient    	       	type: int 
  2797                          ;		sign        	       	type: unsigned char 
  2798                          ;		counter     	       	type: unsigned char 
  2799                          ; Return value:
  2800                          ;		type: int 
  2801                          ;		size: 2
  2802                          ; Registers used:
  2803                          ;		a, x, CUR_PP
  2804                          ; Tracked objects:
  2805                          ;		On entry : CUR_PP=0 IDX_PP=0 XIO=0 PG=2 MVR_PP? MVW_PP? 
  2806                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  2807                          ;		Unchanged: MVR_PP MVW_PP 
  2808                          ; Data sizes:
  2809                          ;		Autos:    6
  2810                          ;		Params:   2
  2811                          ;		Temp:     0
  2812                          ;		Total:    8
  2813                          ; This function calls:
  2814                          ;		Nothing
  2815                          ; This function is called by:
  2816                          ;		_ShowHumiTemp
  2817                          ; This function uses a non-reentrant model
  2818                          ; 
  2819  007E                    __size_of___awdiv	equ	__end_of___awdiv-___awdiv
  2820                          ;awdiv.c: 3: signed int
  2821                          ;awdiv.c: 4: __awdiv(signed int dividend, signed int divisor)
  2822                          ;awdiv.c: 5: {
  2823                          ;			CUR_PP=0 IDX_PP=0 XIO=0 PG=2 
  2824  3883                    ___awdiv:
  2825                          ;___awdiv@dividend stored from xa
  2826  3883  53 6C             	mov	[(??___awdiv^0+1)], a
  2827  3885  5A 6B             	mov	[??___awdiv^0], x
  2828                          ;awdiv.c: 6: signed int quotient;
  2829                          ;awdiv.c: 7: unsigned char counter, sign;
  2830                          ;awdiv.c: 9: sign = 0;
  2831  3887  50 00             	mov	a, 0
  2832                          ;awdiv.c: 10: if(divisor < 0) {
  2833  3889  47 69  80         	tst	[?___awdiv^0], 128
  2834  388C  A00E              	jz	l444
  2835                          ;awdiv.c: 11: divisor = -divisor;
  2836  388E  36 69  FF         	xor	[?___awdiv^0], 0xFF
  2837  3891  36 6A  FF         	xor	[(?___awdiv^0+1)], 0xFF
  2838  3894  76 6A             	inc	[(?___awdiv^0+1)]
  2839  3896  0E 69  00         	adc	[?___awdiv^0], 0
  2840                          ;awdiv.c: 12: sign = 1;
  2841  3899  50 01             	mov	a, 1
  2842                          ;			CUR_PP=0 IDX_PP=0 XIO=0 PG=2 
  2843  389B                    l444:
  2844                          ;awdiv.c: 13: }
  2845                          ;awdiv.c: 14: if(dividend < 0) {
  2846  389B  47 6B  80         	tst	[??___awdiv^0], 128
  2847  389E  A00E              	jz	l445
  2848                          ;awdiv.c: 15: dividend = -dividend;
  2849  38A0  36 6B  FF         	xor	[??___awdiv^0], 0xFF
  2850  38A3  36 6C  FF         	xor	[(??___awdiv^0+1)], 0xFF
  2851  38A6  76 6C             	inc	[(??___awdiv^0+1)]
  2852  38A8  0E 6B  00         	adc	[??___awdiv^0], 0
  2853                          ;awdiv.c: 16: sign ^= 1;
  2854  38AB  31 01             	xor	a, 1
  2855                          ;			CUR_PP=0 IDX_PP=0 XIO=0 PG=2 
  2856  38AD                    l445:
  2857                          ;awdiv.c: 17: }
  2858                          ;awdiv.c: 18: quotient = 0;
  2859  38AD  55 6D  00         	mov	[(??___awdiv+2)^0], 0
  2860  38B0  55 6E  00         	mov	[((??___awdiv+2)^0+1)], 0
  2861                          ;___awdiv@sign stored from a
  2862  38B3  53 6F             	mov	[(??___awdiv+4)^0], a
  2863                          ;awdiv.c: 19: if(divisor != 0) {
  2864  38B5  51 69             	mov	a, [?___awdiv^0]
  2865  38B7  2A 6A             	or	a, [(?___awdiv^0+1)]
  2866  38B9  A036              	jz	l446
  2867                          ;awdiv.c: 20: counter = 1;
  2868  38BB  50 01             	mov	a, 1
  2869                          ;awdiv.c: 21: while((divisor & 0x8000U) == 0) {
  2870  38BD  7D 38C5           	jmp	l447
  2871                          ;			CUR_PP=0 XIO=0 
  2872  38C0                    l448:
  2873                          ;awdiv.c: 22: divisor <<= 1;
  2874  38C0  65 6A             	asl	[(?___awdiv^0+1)]
  2875  38C2  6B 69             	rlc	[?___awdiv^0]
  2876                          ;awdiv.c: 23: counter++;
  2877  38C4  74                	inc	a
  2878                          ;			CUR_PP=0 XIO=0 
  2879  38C5                    l447:
  2880  38C5  47 69  80         	tst	[?___awdiv^0], 128
  2881  38C8  AFF7              	jz	l448
  2882                          ;			CUR_PP=0 XIO=0 
  2883                          ;awdiv.c: 24: }
  2884                          ;awdiv.c: 25: do {
  2885                          ;			CUR_PP=0 XIO=0 
  2886  38CA                    l452:
  2887                          ;awdiv.c: 26: quotient <<= 1;
  2888  38CA  65 6E             	asl	[((??___awdiv+2)^0+1)]
  2889  38CC  6B 6D             	rlc	[(??___awdiv+2)^0]
  2890                          ;___awdiv@counter stored from a
  2891  38CE  53 70             	mov	[(??___awdiv+5)^0], a
  2892                          ;awdiv.c: 27: if((unsigned int)divisor <= (unsigned int)dividend) {
  2893  38D0  51 6C             	mov	a, [(??___awdiv^0+1)]
  2894  38D2  3A 6A             	cmp	a, [(?___awdiv^0+1)]
  2895  38D4  51 6B             	mov	a, [??___awdiv^0]
  2896  38D6  1A 69             	sbb	a, [?___awdiv^0]
  2897  38D8  C00C              	jc	l453
  2898                          ;awdiv.c: 28: dividend -= divisor;
  2899  38DA  51 6A             	mov	a, [(?___awdiv^0+1)]
  2900  38DC  14 6C             	sub	[(??___awdiv^0+1)], a
  2901  38DE  51 69             	mov	a, [?___awdiv^0]
  2902  38E0  1C 6B             	sbb	[??___awdiv^0], a
  2903                          ;awdiv.c: 29: quotient |= 1;
  2904  38E2  2E 6E  01         	or	[((??___awdiv+2)^0+1)], 1
  2905                          ;			CUR_PP=0 XIO=0 
  2906  38E5                    l453:
  2907                          ;awdiv.c: 30: }
  2908                          ;awdiv.c: 31: *(unsigned int *)&divisor >>= 1;
  2909  38E5  70 FB             	and	f, 0xFB
  2910  38E7  6E 69             	rrc	[?___awdiv^0]
  2911  38E9  6E 6A             	rrc	[(?___awdiv^0+1)]
  2912                          ; ___awdiv@counter loaded to a
  2913  38EB  51 70             	mov	a, [(??___awdiv+5)^0]
  2914                          ;awdiv.c: 32: } while(--counter != 0);
  2915  38ED  78                	dec	a
  2916  38EE  BFDB              	jnz	l452
  2917                          ;			CUR_PP=0 XIO=0 
  2918                          ;			CUR_PP=0 XIO=0 
  2919  38F0                    l446:
  2920                          ; ___awdiv@quotient loaded to xa
  2921  38F0  51 6E             	mov	a, [((??___awdiv+2)^0+1)]
  2922  38F2  58 6D             	mov	x, [(??___awdiv+2)^0]
  2923                          ;awdiv.c: 33: }
  2924                          ;awdiv.c: 34: if(sign)
  2925  38F4  3C 6F  00         	cmp	[(??___awdiv+4)^0], 0
  2926  38F7  A008              	jz	l443
  2927                          ;awdiv.c: 35: quotient = -quotient;
  2928  38F9  73                	cpl	a
  2929  38FA  74                	inc	a
  2930  38FB  4B                	swap	a, x
  2931  38FC  73                	cpl	a
  2932  38FD  09 00             	adc	a, 0
  2933  38FF  4B                	swap	a, x
  2934                          ;			CUR_PP=0 XIO=0 
  2935                          ;awdiv.c: 36: return quotient;
  2936                          ;awdiv.c: 37: }
  2937  3900                    l443:
  2938                          ;			CUR_PP=0 XIO=0 
  2939  3900  7F                	ret
  2940  3901                    __end_of___awdiv:
  2941                          ; =============== function ___awdiv ends ============
  2942                          ; *************** function ___lbmod *****************
  2943                          ; Defined at:
  2944                          ;		line 5 in file "C:\Program Files (x86)\HI-TECH Software\HCPSOC\PRO\9.61\sources\lbmod.c"
  2945                          ; Parameters:
  2946                          ;		dividend    	reg:    a	type: unsigned char 
  2947                          ;		divisor     	reg:    x	type: unsigned char 
  2948                          ; Auto variables:
  2949                          ;		divisor     	       	type: unsigned char 
  2950                          ;		dividend    	       	type: unsigned char 
  2951                          ;		rem         	       	type: unsigned char 
  2952                          ;		counter     	       	type: unsigned char 
  2953                          ; Return value:
  2954                          ;		type: unsigned char 
  2955                          ;		size: 1
  2956                          ; Registers used:
  2957                          ;		a, x, CUR_PP
  2958                          ; Tracked objects:
  2959                          ;		On entry : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  2960                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  2961                          ;		Unchanged: MVR_PP MVW_PP 
  2962                          ; Data sizes:
  2963                          ;		Autos:    4
  2964                          ;		Params:   0
  2965                          ;		Temp:     0
  2966                          ;		Total:    4
  2967                          ; This function calls:
  2968                          ;		Nothing
  2969                          ; This function is called by:
  2970                          ;		_ShowLife
  2971                          ; This function uses a non-reentrant model
  2972                          ; 
  2973  0024                    __size_of___lbmod	equ	__end_of___lbmod-___lbmod
  2974                          ;lbmod.c: 3: unsigned char
  2975                          ;lbmod.c: 4: __lbmod(unsigned char dividend, unsigned char divisor)
  2976                          ;lbmod.c: 5: {
  2977                          ;			CUR_PP=0 IDX_PP=0 XIO=0 PG=2 
  2978  3901                    ___lbmod:
  2979                          ;___lbmod@dividend stored from a
  2980  3901  53 68             	mov	[(??___lbmod+1)^0], a
  2981                          ;___lbmod@divisor stored from x
  2982  3903  5A 67             	mov	[??___lbmod^0], x
  2983                          ;lbmod.c: 6: unsigned char rem;
  2984                          ;lbmod.c: 7: unsigned char counter;
  2985                          ;lbmod.c: 9: counter = 8;
  2986  3905  55 6A  08         	mov	[(??___lbmod+3)^0], 8
  2987                          ;lbmod.c: 10: rem = 0;
  2988  3908  55 69  00         	mov	[(??___lbmod+2)^0], 0
  2989                          ;lbmod.c: 11: do {
  2990                          ;			CUR_PP=0 XIO=0 
  2991  390B                    l283:
  2992                          ;lbmod.c: 12: rem = (rem << 1) | (dividend >> 7);
  2993  390B  51 68             	mov	a, [(??___lbmod+1)^0]
  2994  390D  6A                	rlc	a
  2995  390E  6B 69             	rlc	[(??___lbmod+2)^0]
  2996                          ;lbmod.c: 13: dividend <<= 1;
  2997  3910  65 68             	asl	[(??___lbmod+1)^0]
  2998                          ; ___lbmod@divisor loaded to a
  2999  3912  51 67             	mov	a, [??___lbmod^0]
  3000                          ;lbmod.c: 14: if(divisor <= rem)
  3001  3914  3A 69             	cmp	a, [(??___lbmod+2)^0]
  3002  3916  A003              	jz	u403
  3003  3918  72 04             	xor	f, 4
  3004  391A                    u403:
  3005  391A  C003              	jc	l284
  3006                          ;lbmod.c: 15: rem -= divisor;
  3007  391C  14 69             	sub	[(??___lbmod+2)^0], a
  3008                          ;			CUR_PP=0 XIO=0 
  3009  391E                    l284:
  3010                          ;lbmod.c: 16: } while(--counter != 0);
  3011  391E  7A 6A             	dec	[(??___lbmod+3)^0]
  3012  3920  BFEA              	jnz	l283
  3013                          ;			CUR_PP=0 XIO=0 
  3014                          ;lbmod.c: 17: return rem;
  3015  3922  51 69             	mov	a, [(??___lbmod+2)^0]
  3016                          ;lbmod.c: 18: }
  3017                          ;			CUR_PP=0 XIO=0 
  3018  3924  7F                	ret
  3019  3925                    __end_of___lbmod:
  3020                          ; =============== function ___lbmod ends ============
  3021                          ; *************** function ___awmod *****************
  3022                          ; Defined at:
  3023                          ;		line 5 in file "C:\Program Files (x86)\HI-TECH Software\HCPSOC\PRO\9.61\sources\awmod.c"
  3024                          ; Parameters:
  3025                          ;		dividend    	reg:   xa	type: int 
  3026                          ;		divisor     	offs:   0	type: int 
  3027                          ; Auto variables:
  3028                          ;		dividend    	       	type: int 
  3029                          ;		counter     	       	type: unsigned char 
  3030                          ;		sign        	       	type: unsigned char 
  3031                          ; Return value:
  3032                          ;		type: int 
  3033                          ;		size: 2
  3034                          ; Registers used:
  3035                          ;		a, x, CUR_PP
  3036                          ; Tracked objects:
  3037                          ;		On entry : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  3038                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  3039                          ;		Unchanged: MVR_PP MVW_PP 
  3040                          ; Data sizes:
  3041                          ;		Autos:    4
  3042                          ;		Params:   2
  3043                          ;		Temp:     0
  3044                          ;		Total:    6
  3045                          ; This function calls:
  3046                          ;		Nothing
  3047                          ; This function is called by:
  3048                          ;		_ShowHumiTemp
  3049                          ; This function uses a non-reentrant model
  3050                          ; 
  3051  0073                    __size_of___awmod	equ	__end_of___awmod-___awmod
  3052                          ;awmod.c: 3: signed int
  3053                          ;awmod.c: 4: __awmod(signed int dividend, signed int divisor)
  3054                          ;awmod.c: 5: {
  3055                          ;			CUR_PP=0 IDX_PP=0 XIO=0 PG=2 
  3056  3925                    ___awmod:
  3057                          ;awmod.c: 6: unsigned char counter, sign;
  3058                          ;awmod.c: 8: sign = 0;
  3059  3925  55 6D  00         	mov	[(??___awmod+2)^0], 0
  3060                          ;awmod.c: 9: if(dividend < 0) {
  3061  3928  4B                	swap	a, x
  3062  3929  39 80             	cmp	a, 128
  3063  392B  4B                	swap	a, x
  3064  392C  C00B              	jc	l524
  3065                          ;awmod.c: 10: dividend = -dividend;
  3066  392E  73                	cpl	a
  3067  392F  74                	inc	a
  3068  3930  4B                	swap	a, x
  3069  3931  73                	cpl	a
  3070  3932  09 00             	adc	a, 0
  3071  3934  4B                	swap	a, x
  3072                          ;awmod.c: 11: sign = 1;
  3073  3935  55 6D  01         	mov	[(??___awmod+2)^0], 1
  3074                          ;			CUR_PP=0 IDX_PP=0 XIO=0 PG=2 
  3075  3938                    l524:
  3076                          ;awmod.c: 12: }
  3077                          ;awmod.c: 13: if(divisor < 0)
  3078  3938  47 69  80         	tst	[?___awmod^0], 128
  3079  393B  A00C              	jz	l525
  3080                          ;awmod.c: 14: divisor = -divisor;
  3081  393D  36 69  FF         	xor	[?___awmod^0], 0xFF
  3082  3940  36 6A  FF         	xor	[(?___awmod^0+1)], 0xFF
  3083  3943  76 6A             	inc	[(?___awmod^0+1)]
  3084  3945  0E 69  00         	adc	[?___awmod^0], 0
  3085                          ;			CUR_PP=0 IDX_PP=0 XIO=0 PG=2 
  3086  3948                    l525:
  3087                          ;awmod.c: 15: if(divisor != 0) {
  3088  3948  3C 69  00         	cmp	[?___awmod^0], 0
  3089  394B  B006              	jnz	L1
  3090  394D  3C 6A  00         	cmp	[(?___awmod^0+1)], 0
  3091  3950  A03A              	jz	l526
  3092  3952                    L1:
  3093                          ;awmod.c: 16: counter = 1;
  3094  3952  55 6E  01         	mov	[(??___awmod+3)^0], 1
  3095                          ;awmod.c: 17: while(((unsigned int)divisor & 0x8000U) == 0) {
  3096  3955  7D 3962           	jmp	l527
  3097                          ;			CUR_PP=0 XIO=0 
  3098  3958                    l528:
  3099                          ; ___awmod@dividend loaded to xa
  3100  3958  51 6C             	mov	a, [(??___awmod^0+1)]
  3101  395A  58 6B             	mov	x, [??___awmod^0]
  3102                          ;awmod.c: 18: divisor <<= 1;
  3103  395C  65 6A             	asl	[(?___awmod^0+1)]
  3104  395E  6B 69             	rlc	[?___awmod^0]
  3105                          ;awmod.c: 19: counter++;
  3106  3960  76 6E             	inc	[(??___awmod+3)^0]
  3107                          ;			CUR_PP=0 XIO=0 
  3108  3962                    l527:
  3109                          ;___awmod@dividend stored from xa
  3110  3962  53 6C             	mov	[(??___awmod^0+1)], a
  3111  3964  5A 6B             	mov	[??___awmod^0], x
  3112  3966  47 69  80         	tst	[?___awmod^0], 128
  3113  3969  AFEE              	jz	l528
  3114                          ;			CUR_PP=0 XIO=0 
  3115                          ;awmod.c: 20: }
  3116                          ;awmod.c: 21: do {
  3117                          ;			CUR_PP=0 XIO=0 
  3118  396B                    l532:
  3119                          ;awmod.c: 22: if((unsigned int)divisor <= (unsigned int)dividend)
  3120  396B  51 6C             	mov	a, [(??___awmod^0+1)]
  3121  396D  3A 6A             	cmp	a, [(?___awmod^0+1)]
  3122  396F  51 6B             	mov	a, [??___awmod^0]
  3123  3971  1A 69             	sbb	a, [?___awmod^0]
  3124  3973  C009              	jc	l533
  3125                          ;awmod.c: 23: dividend -= divisor;
  3126  3975  51 6A             	mov	a, [(?___awmod^0+1)]
  3127  3977  14 6C             	sub	[(??___awmod^0+1)], a
  3128  3979  51 69             	mov	a, [?___awmod^0]
  3129  397B  1C 6B             	sbb	[??___awmod^0], a
  3130                          ;			CUR_PP=0 XIO=0 
  3131  397D                    l533:
  3132                          ;awmod.c: 24: *(unsigned int *)&divisor >>= 1;
  3133  397D  70 FB             	and	f, 0xFB
  3134  397F  6E 69             	rrc	[?___awmod^0]
  3135  3981  6E 6A             	rrc	[(?___awmod^0+1)]
  3136                          ;awmod.c: 25: } while(--counter != 0);
  3137  3983  7A 6E             	dec	[(??___awmod+3)^0]
  3138  3985  BFE5              	jnz	l532
  3139                          ;			CUR_PP=0 XIO=0 
  3140                          ; ___awmod@dividend loaded to xa
  3141  3987  51 6C             	mov	a, [(??___awmod^0+1)]
  3142  3989  58 6B             	mov	x, [??___awmod^0]
  3143                          ;			CUR_PP=0 XIO=0 
  3144  398B                    l526:
  3145                          ;awmod.c: 26: }
  3146                          ;awmod.c: 27: if(sign)
  3147  398B  3C 6D  00         	cmp	[(??___awmod+2)^0], 0
  3148  398E  A008              	jz	l523
  3149                          ;awmod.c: 28: dividend = -dividend;
  3150  3990  73                	cpl	a
  3151  3991  74                	inc	a
  3152  3992  4B                	swap	a, x
  3153  3993  73                	cpl	a
  3154  3994  09 00             	adc	a, 0
  3155  3996  4B                	swap	a, x
  3156                          ;			CUR_PP=0 XIO=0 
  3157                          ;awmod.c: 29: return dividend;
  3158                          ;awmod.c: 30: }
  3159  3997                    l523:
  3160                          ;			CUR_PP=0 XIO=0 
  3161  3997  7F                	ret
  3162  3998                    __end_of___awmod:
  3163                          ; =============== function ___awmod ends ============
  3164                          ; *************** function _Ack_I2c *****************
  3165                          ; Defined at:
  3166                          ;		line 149 in file "./software_iic.c"
  3167                          ; Parameters:
  3168                          ;		a           	reg:    a	type: unsigned char 
  3169                          ; Auto variables:
  3170                          ;		a           	       	type: unsigned char 
  3171                          ; Return value:
  3172                          ;		type: void 
  3173                          ;		size: 0
  3174                          ; Registers used:
  3175                          ;		a, x, CUR_PP
  3176                          ; Tracked objects:
  3177                          ;		On entry : CUR_PP=0 IDX_PP=0 XIO=0 PG? MVR_PP? MVW_PP? 
  3178                          ;		On exit  : CUR_PP=0 IDX_PP=0 XIO=0 PG? MVR_PP? MVW_PP? 
  3179                          ;		Unchanged: MVR_PP MVW_PP 
  3180                          ; Data sizes:
  3181                          ;		Autos:    1
  3182                          ;		Params:   0
  3183                          ;		Temp:     0
  3184                          ;		Total:    1
  3185                          ; This function calls:
  3186                          ;		_delay_us
  3187                          ; This function is called by:
  3188                          ;		_IRcvBytes
  3189                          ; This function uses a non-reentrant model
  3190                          ; 
  3191  002C                    __size_of_Ack_I2c	equ	__end_of_Ack_I2c-_Ack_I2c
  3192                          ;software_iic.c: 148: void Ack_I2c(unsigned char a)
  3193                          ;software_iic.c: 149: {
  3194                          ;			CUR_PP=0 IDX_PP=0 XIO=0 PG=2 
  3195  3998                    _Ack_I2c:
  3196                          ;software_iic.c: 150: if(a==0)
  3197  3998  39 00             	cmp	a, 0
  3198  399A  B007              	jnz	l208
  3199                          ;software_iic.c: 151: {
  3200                          ;software_iic.c: 152: PRT1DR &= ~0x20;
  3201  399C  41 04 DF          	and	reg[4], 0xDF
  3202                          ;software_iic.c: 153: }
  3203  399F  7D 39A5           	jmp	l209
  3204                          ;			CUR_PP=0 IDX_PP=0 XIO=0 PG=2 
  3205  39A2                    l208:
  3206                          ;software_iic.c: 154: else
  3207                          ;software_iic.c: 155: {
  3208                          ;software_iic.c: 156: PRT1DR |= 0x20;
  3209  39A2  43 04 20          	or	reg[4], 0x20
  3210                          ;			CUR_PP=0 IDX_PP=0 XIO=0 PG=2 
  3211  39A5                    l209:
  3212                          ;software_iic.c: 157: }
  3213                          ;software_iic.c: 158: delay_us(1);
  3214  39A5  50 01             	mov	a, 1
  3215  39A7  57 00             	mov	x, 0
  3216  39A9  7C 3B6C           	call	_delay_us
  3217                          ;software_iic.c: 159: PRT1DR |= 0x80;
  3218  39AC  43 04 80          	or	reg[4], 0x80
  3219                          ;software_iic.c: 160: delay_us(1);
  3220  39AF  50 01             	mov	a, 1
  3221  39B1  57 00             	mov	x, 0
  3222  39B3  71 80             	or	f, 0x80	;select multiple RAM page mode
  3223  39B5  7C 3B6C           	call	_delay_us
  3224                          ;software_iic.c: 161: PRT1DR &= ~0x80;
  3225  39B8  41 04 7F          	and	reg[4], 0x7F
  3226                          ;software_iic.c: 162: delay_us(1);
  3227  39BB  50 01             	mov	a, 1
  3228  39BD  57 00             	mov	x, 0
  3229  39BF  71 80             	or	f, 0x80	;select multiple RAM page mode
  3230  39C1  7D 3B6C           	jmp	_delay_us
  3231                          ;software_iic.c: 163: }
  3232                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
  3233  39C4                    __end_of_Ack_I2c:
  3234                          ; =============== function _Ack_I2c ends ============
  3235                          ; *************** function _RcvByte *****************
  3236                          ; Defined at:
  3237                          ;		line 117 in file "./software_iic.c"
  3238                          ; Parameters:
  3239                          ;		None
  3240                          ; Auto variables:
  3241                          ;		retc        	       	type: unsigned char 
  3242                          ;		BitCnt      	       	type: unsigned char 
  3243                          ; Return value:
  3244                          ;		type: unsigned char 
  3245                          ;		size: 1
  3246                          ; Registers used:
  3247                          ;		a, x, CUR_PP
  3248                          ; Tracked objects:
  3249                          ;		On entry : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  3250                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  3251                          ;		Unchanged: IDX_PP MVR_PP MVW_PP 
  3252                          ; Data sizes:
  3253                          ;		Autos:    2
  3254                          ;		Params:   0
  3255                          ;		Temp:     0
  3256                          ;		Total:    2
  3257                          ; This function calls:
  3258                          ;		_ChangeToRead
  3259                          ;		_delay_us
  3260                          ;		_ChangeToOD
  3261                          ; This function is called by:
  3262                          ;		_IRcvBytes
  3263                          ; This function uses a non-reentrant model
  3264                          ; 
  3265  0048                    __size_of_RcvByte	equ	__end_of_RcvByte-_RcvByte
  3266                          ;software_iic.c: 116: unsigned char RcvByte(void)
  3267                          ;software_iic.c: 117: {
  3268                          ;			CUR_PP=0 XIO=0 PG=2 
  3269  39C4                    _RcvByte:
  3270                          ;software_iic.c: 118: unsigned char retc;
  3271                          ;software_iic.c: 119: unsigned char BitCnt;
  3272                          ;software_iic.c: 121: retc=0;
  3273  39C4  55 6B  00         	mov	[??_RcvByte^0], 0
  3274                          ;software_iic.c: 122: ChangeToRead();
  3275  39C7  7C 3B4C           	call	_ChangeToRead
  3276                          ;software_iic.c: 123: for(BitCnt=0;BitCnt<8;BitCnt++)
  3277  39CA  55 6C  00         	mov	[(??_RcvByte+1)^0], 0
  3278                          ;			CUR_PP=0 XIO=0 
  3279  39CD                    l203:
  3280                          ;software_iic.c: 124: {
  3281                          ;software_iic.c: 125: delay_us(1);
  3282  39CD  50 01             	mov	a, 1
  3283  39CF  57 00             	mov	x, 0
  3284  39D1  71 80             	or	f, 0x80	;select multiple RAM page mode
  3285  39D3  7C 3B6C           	call	_delay_us
  3286                          ;software_iic.c: 126: PRT1DR &= ~0x80;
  3287  39D6  41 04 7F          	and	reg[4], 0x7F
  3288                          ;software_iic.c: 127: delay_us(1);
  3289  39D9  50 01             	mov	a, 1
  3290  39DB  57 00             	mov	x, 0
  3291  39DD  71 80             	or	f, 0x80	;select multiple RAM page mode
  3292  39DF  7C 3B6C           	call	_delay_us
  3293                          ;software_iic.c: 128: PRT1DR |= 0x80;
  3294  39E2  43 04 80          	or	reg[4], 0x80
  3295                          ;software_iic.c: 129: delay_us(1);
  3296  39E5  50 01             	mov	a, 1
  3297  39E7  57 00             	mov	x, 0
  3298  39E9  71 80             	or	f, 0x80	;select multiple RAM page mode
  3299  39EB  7C 3B6C           	call	_delay_us
  3300                          ;software_iic.c: 130: retc=retc<<1;
  3301  39EE  65 6B             	asl	[??_RcvByte^0]
  3302                          ;software_iic.c: 131: if(PRT1DR&0x20)
  3303  39F0  49 04 20          	tst	reg[4], 32
  3304  39F3  A004              	jz	l206
  3305                          ;software_iic.c: 132: {
  3306                          ;software_iic.c: 133: retc |= 1;
  3307  39F5  2E 6B  01         	or	[??_RcvByte^0], 1
  3308                          ;			CUR_PP=0 XIO=0 
  3309  39F8                    l206:
  3310  39F8  76 6C             	inc	[(??_RcvByte+1)^0]
  3311  39FA  3C 6C  08         	cmp	[(??_RcvByte+1)^0], 8
  3312  39FD  CFCF              	jc	l203
  3313                          ;			CUR_PP=0 XIO=0 
  3314                          ;software_iic.c: 134: }
  3315                          ;software_iic.c: 135: }
  3316                          ;software_iic.c: 136: PRT1DR &= ~0x80;
  3317  39FF  41 04 7F          	and	reg[4], 0x7F
  3318  3A02  40                	nop	;#
  3319  3A03  40                	nop	;#
  3320                          ;software_iic.c: 137: asm("nop");
  3321                          ;software_iic.c: 138: asm("nop");
  3322                          ;software_iic.c: 139: ChangeToOD();
  3323  3A04  71 80             	or	f, 0x80	;select multiple RAM page mode
  3324  3A06  7C 3B5D           	call	_ChangeToOD
  3325                          ;software_iic.c: 140: return(retc);
  3326  3A09  51 6B             	mov	a, [??_RcvByte^0]
  3327                          ;software_iic.c: 141: }
  3328                          ;			CUR_PP=0 XIO=0 
  3329  3A0B  7F                	ret
  3330  3A0C                    __end_of_RcvByte:
  3331                          ; =============== function _RcvByte ends ============
  3332                          ; *************** function ___lwdiv *****************
  3333                          ; Defined at:
  3334                          ;		line 5 in file "C:\Program Files (x86)\HI-TECH Software\HCPSOC\PRO\9.61\sources\lwdiv.c"
  3335                          ; Parameters:
  3336                          ;		dividend    	reg:   xa	type: unsigned int 
  3337                          ;		divisor     	offs:   0	type: unsigned int 
  3338                          ; Auto variables:
  3339                          ;		dividend    	       	type: unsigned int 
  3340                          ;		quotient    	       	type: unsigned int 
  3341                          ;		counter     	       	type: unsigned char 
  3342                          ; Return value:
  3343                          ;		type: unsigned int 
  3344                          ;		size: 2
  3345                          ; Registers used:
  3346                          ;		a, x, CUR_PP
  3347                          ; Tracked objects:
  3348                          ;		On entry : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  3349                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  3350                          ;		Unchanged: IDX_PP MVR_PP MVW_PP 
  3351                          ; Data sizes:
  3352                          ;		Autos:    5
  3353                          ;		Params:   2
  3354                          ;		Temp:     0
  3355                          ;		Total:    7
  3356                          ; This function calls:
  3357                          ;		Nothing
  3358                          ; This function is called by:
  3359                          ;		_DisplayPMxx
  3360                          ; This function uses a non-reentrant model
  3361                          ; 
  3362  004A                    __size_of___lwdiv	equ	__end_of___lwdiv-___lwdiv
  3363                          ;lwdiv.c: 3: unsigned int
  3364                          ;lwdiv.c: 4: __lwdiv(unsigned int dividend, unsigned int divisor)
  3365                          ;lwdiv.c: 5: {
  3366                          ;			CUR_PP=0 XIO=0 PG=2 
  3367  3A0C                    ___lwdiv:
  3368                          ;___lwdiv@dividend stored from xa
  3369  3A0C  53 6E             	mov	[(??___lwdiv^0+1)], a
  3370  3A0E  5A 6D             	mov	[??___lwdiv^0], x
  3371                          ;lwdiv.c: 6: unsigned int quotient;
  3372                          ;lwdiv.c: 7: unsigned char counter;
  3373                          ;lwdiv.c: 9: quotient = 0;
  3374  3A10  55 6F  00         	mov	[(??___lwdiv+2)^0], 0
  3375  3A13  55 70  00         	mov	[((??___lwdiv+2)^0+1)], 0
  3376                          ;lwdiv.c: 10: if(divisor != 0) {
  3377  3A16  51 6B             	mov	a, [?___lwdiv^0]
  3378  3A18  2A 6C             	or	a, [(?___lwdiv^0+1)]
  3379  3A1A  A036              	jz	l254
  3380                          ;lwdiv.c: 11: counter = 1;
  3381  3A1C  50 01             	mov	a, 1
  3382                          ;lwdiv.c: 12: while((divisor & 0x8000) == 0) {
  3383  3A1E  7D 3A26           	jmp	l255
  3384                          ;			CUR_PP=0 XIO=0 
  3385  3A21                    l256:
  3386                          ;lwdiv.c: 13: divisor <<= 1;
  3387  3A21  65 6C             	asl	[(?___lwdiv^0+1)]
  3388  3A23  6B 6B             	rlc	[?___lwdiv^0]
  3389                          ;lwdiv.c: 14: counter++;
  3390  3A25  74                	inc	a
  3391                          ;			CUR_PP=0 XIO=0 
  3392  3A26                    l255:
  3393  3A26  47 6B  80         	tst	[?___lwdiv^0], 128
  3394  3A29  AFF7              	jz	l256
  3395                          ;			CUR_PP=0 XIO=0 
  3396                          ;lwdiv.c: 15: }
  3397                          ;lwdiv.c: 16: do {
  3398                          ;			CUR_PP=0 XIO=0 
  3399  3A2B                    l260:
  3400                          ;lwdiv.c: 17: quotient <<= 1;
  3401  3A2B  65 70             	asl	[((??___lwdiv+2)^0+1)]
  3402  3A2D  6B 6F             	rlc	[(??___lwdiv+2)^0]
  3403                          ;___lwdiv@counter stored from a
  3404  3A2F  53 71             	mov	[(??___lwdiv+4)^0], a
  3405                          ;lwdiv.c: 18: if(divisor <= dividend) {
  3406  3A31  51 6E             	mov	a, [(??___lwdiv^0+1)]
  3407  3A33  3A 6C             	cmp	a, [(?___lwdiv^0+1)]
  3408  3A35  51 6D             	mov	a, [??___lwdiv^0]
  3409  3A37  1A 6B             	sbb	a, [?___lwdiv^0]
  3410  3A39  C00C              	jc	l261
  3411                          ;lwdiv.c: 19: dividend -= divisor;
  3412  3A3B  51 6C             	mov	a, [(?___lwdiv^0+1)]
  3413  3A3D  14 6E             	sub	[(??___lwdiv^0+1)], a
  3414  3A3F  51 6B             	mov	a, [?___lwdiv^0]
  3415  3A41  1C 6D             	sbb	[??___lwdiv^0], a
  3416                          ;lwdiv.c: 20: quotient |= 1;
  3417  3A43  2E 70  01         	or	[((??___lwdiv+2)^0+1)], 1
  3418                          ;			CUR_PP=0 XIO=0 
  3419  3A46                    l261:
  3420                          ;lwdiv.c: 21: }
  3421                          ;lwdiv.c: 22: divisor >>= 1;
  3422  3A46  70 FB             	and	f, 0xFB
  3423  3A48  6E 6B             	rrc	[?___lwdiv^0]
  3424  3A4A  6E 6C             	rrc	[(?___lwdiv^0+1)]
  3425                          ; ___lwdiv@counter loaded to a
  3426  3A4C  51 71             	mov	a, [(??___lwdiv+4)^0]
  3427                          ;lwdiv.c: 23: } while(--counter != 0);
  3428  3A4E  78                	dec	a
  3429  3A4F  BFDB              	jnz	l260
  3430                          ;			CUR_PP=0 XIO=0 
  3431                          ;			CUR_PP=0 XIO=0 
  3432  3A51                    l254:
  3433                          ;lwdiv.c: 24: }
  3434                          ;lwdiv.c: 25: return quotient;
  3435  3A51  51 70             	mov	a, [((??___lwdiv+2)^0+1)]
  3436  3A53  58 6F             	mov	x, [(??___lwdiv+2)^0]
  3437                          ;lwdiv.c: 26: }
  3438                          ;			CUR_PP=0 XIO=0 
  3439  3A55  7F                	ret
  3440  3A56                    __end_of___lwdiv:
  3441                          ; =============== function ___lwdiv ends ============
  3442                          ; *************** function _ISendByte *****************
  3443                          ; Defined at:
  3444                          ;		line 172 in file "./software_iic.c"
  3445                          ; Parameters:
  3446                          ;		sla         	reg:    a	type: unsigned char 
  3447                          ;		c           	reg:    x	type: unsigned char 
  3448                          ; Auto variables:
  3449                          ;		c           	       	type: unsigned char 
  3450                          ;		sla         	       	type: unsigned char 
  3451                          ; Return value:
  3452                          ;		type: unsigned char 
  3453                          ;		size: 1
  3454                          ; Registers used:
  3455                          ;		a, x, CUR_PP
  3456                          ; Tracked objects:
  3457                          ;		On entry : CUR_PP=0 IDX_PP? XIO=0 PG=2 MVR_PP? MVW_PP? 
  3458                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  3459                          ;		Unchanged: IDX_PP MVR_PP MVW_PP 
  3460                          ; Data sizes:
  3461                          ;		Autos:    2
  3462                          ;		Params:   0
  3463                          ;		Temp:     0
  3464                          ;		Total:    2
  3465                          ; This function calls:
  3466                          ;		_Start_I2c
  3467                          ;		_SendByte
  3468                          ;		_Stop_I2c
  3469                          ; This function is called by:
  3470                          ;		_Si7020SendCommand
  3471                          ; This function uses a non-reentrant model
  3472                          ; 
  3473  0035                    __size_of_ISendByte	equ	__end_of_ISendByte-_ISendByte
  3474                          ;software_iic.c: 171: unsigned char ISendByte(unsigned char sla,unsigned char c)
  3475                          ;software_iic.c: 172: {
  3476                          ;			CUR_PP=0 XIO=0 PG=2 
  3477  3A56                    _ISendByte:
  3478                          ;ISendByte@sla stored from a
  3479  3A56  53 67             	mov	[(??_ISendByte+1)^0], a
  3480                          ;ISendByte@c stored from x
  3481  3A58  5A 66             	mov	[??_ISendByte^0], x
  3482                          ;software_iic.c: 173: Start_I2c();
  3483  3A5A  7C 3AAD           	call	_Start_I2c
  3484                          ;software_iic.c: 174: SendByte(sla);
  3485  3A5D  51 67             	mov	a, [(??_ISendByte+1)^0]
  3486  3A5F  71 80             	or	f, 0x80	;select multiple RAM page mode
  3487  3A61  7C 3AD2           	call	_SendByte
  3488                          ;software_iic.c: 175: if(ack==0)
  3489  3A64  51 46             	mov	a, [_ack^0]
  3490  3A66  B009              	jnz	l211
  3491                          ;software_iic.c: 176: {
  3492                          ;software_iic.c: 177: Stop_I2c();
  3493  3A68  71 80             	or	f, 0x80	;select multiple RAM page mode
  3494  3A6A  7C 3A8B           	call	_Stop_I2c
  3495                          ;software_iic.c: 178: return(0);
  3496  3A6D  50 00             	mov	a, 0
  3497  3A6F  7F                	ret
  3498                          ;			CUR_PP=0 XIO=0 
  3499  3A70                    l211:
  3500                          ;software_iic.c: 179: }
  3501                          ;software_iic.c: 180: SendByte(c);
  3502  3A70  51 66             	mov	a, [??_ISendByte^0]
  3503  3A72  71 80             	or	f, 0x80	;select multiple RAM page mode
  3504  3A74  7C 3AD2           	call	_SendByte
  3505                          ;software_iic.c: 181: if(ack==0)
  3506  3A77  51 46             	mov	a, [_ack^0]
  3507  3A79  B009              	jnz	l212
  3508                          ;software_iic.c: 182: {
  3509                          ;software_iic.c: 183: Stop_I2c();
  3510  3A7B  71 80             	or	f, 0x80	;select multiple RAM page mode
  3511  3A7D  7C 3A8B           	call	_Stop_I2c
  3512                          ;software_iic.c: 184: return(0);
  3513  3A80  50 00             	mov	a, 0
  3514  3A82  7F                	ret
  3515                          ;			CUR_PP=0 XIO=0 
  3516  3A83                    l212:
  3517                          ;software_iic.c: 185: }
  3518                          ;software_iic.c: 186: Stop_I2c();
  3519  3A83  71 80             	or	f, 0x80	;select multiple RAM page mode
  3520  3A85  7C 3A8B           	call	_Stop_I2c
  3521                          ;software_iic.c: 187: return(1);
  3522  3A88  50 01             	mov	a, 1
  3523                          ;software_iic.c: 188: }
  3524                          ;			CUR_PP=0 XIO=0 
  3525  3A8A  7F                	ret
  3526  3A8B                    __end_of_ISendByte:
  3527                          ; =============== function _ISendByte ends ============
  3528                          ; *************** function _Stop_I2c *****************
  3529                          ; Defined at:
  3530                          ;		line 58 in file "./software_iic.c"
  3531                          ; Parameters:
  3532                          ;		None
  3533                          ; Auto variables:
  3534                          ;		None
  3535                          ; Return value:
  3536                          ;		type: void 
  3537                          ;		size: 0
  3538                          ; Registers used:
  3539                          ;		a, x, CUR_PP
  3540                          ; Tracked objects:
  3541                          ;		On entry : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  3542                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  3543                          ;		Unchanged: IDX_PP MVR_PP MVW_PP 
  3544                          ; Data sizes:
  3545                          ;		Autos:    0
  3546                          ;		Params:   0
  3547                          ;		Temp:     0
  3548                          ;		Total:    0
  3549                          ; This function calls:
  3550                          ;		_delay_us
  3551                          ; This function is called by:
  3552                          ;		_ISendByte
  3553                          ;		_IRcvBytes
  3554                          ; This function uses a non-reentrant model
  3555                          ; 
  3556  0022                    __size_of_Stop_I2c	equ	__end_of_Stop_I2c-_Stop_I2c
  3557                          ;software_iic.c: 57: void Stop_I2c(void)
  3558                          ;software_iic.c: 58: {
  3559                          ;			CUR_PP=0 XIO=0 PG=2 
  3560  3A8B                    _Stop_I2c:
  3561                          ;software_iic.c: 59: PRT1DR &= ~0x20;
  3562  3A8B  41 04 DF          	and	reg[4], 0xDF
  3563                          ;software_iic.c: 60: delay_us(1);
  3564  3A8E  50 01             	mov	a, 1
  3565  3A90  57 00             	mov	x, 0
  3566  3A92  7C 3B6C           	call	_delay_us
  3567                          ;software_iic.c: 61: PRT1DR |= 0x80;
  3568  3A95  43 04 80          	or	reg[4], 0x80
  3569                          ;software_iic.c: 62: delay_us(1);
  3570  3A98  50 01             	mov	a, 1
  3571  3A9A  57 00             	mov	x, 0
  3572  3A9C  71 80             	or	f, 0x80	;select multiple RAM page mode
  3573  3A9E  7C 3B6C           	call	_delay_us
  3574                          ;software_iic.c: 63: PRT1DR |= 0x20;
  3575  3AA1  43 04 20          	or	reg[4], 0x20
  3576                          ;software_iic.c: 64: delay_us(1);
  3577  3AA4  50 01             	mov	a, 1
  3578  3AA6  57 00             	mov	x, 0
  3579  3AA8  71 80             	or	f, 0x80	;select multiple RAM page mode
  3580  3AAA  7D 3B6C           	jmp	_delay_us
  3581                          ;software_iic.c: 65: }
  3582                          ;			CUR_PP=0 XIO=0 
  3583  3AAD                    __end_of_Stop_I2c:
  3584                          ; =============== function _Stop_I2c ends ============
  3585                          ; *************** function _Start_I2c *****************
  3586                          ; Defined at:
  3587                          ;		line 42 in file "./software_iic.c"
  3588                          ; Parameters:
  3589                          ;		None
  3590                          ; Auto variables:
  3591                          ;		None
  3592                          ; Return value:
  3593                          ;		type: void 
  3594                          ;		size: 0
  3595                          ; Registers used:
  3596                          ;		a, x, CUR_PP
  3597                          ; Tracked objects:
  3598                          ;		On entry : CUR_PP=0 IDX_PP? XIO=0 PG=2 MVR_PP? MVW_PP? 
  3599                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  3600                          ;		Unchanged: IDX_PP MVR_PP MVW_PP 
  3601                          ; Data sizes:
  3602                          ;		Autos:    0
  3603                          ;		Params:   0
  3604                          ;		Temp:     0
  3605                          ;		Total:    0
  3606                          ; This function calls:
  3607                          ;		_delay_us
  3608                          ; This function is called by:
  3609                          ;		_ISendByte
  3610                          ;		_IRcvBytes
  3611                          ; This function uses a non-reentrant model
  3612                          ; 
  3613  0025                    __size_of_Start_I2c	equ	__end_of_Start_I2c-_Start_I2c
  3614                          ;software_iic.c: 41: void Start_I2c(void)
  3615                          ;software_iic.c: 42: {
  3616                          ;			CUR_PP=0 XIO=0 PG=2 
  3617  3AAD                    _Start_I2c:
  3618                          ;software_iic.c: 43: PRT1DR |= 0x20;
  3619  3AAD  43 04 20          	or	reg[4], 0x20
  3620                          ;software_iic.c: 44: PRT1DR |= 0x80;
  3621  3AB0  43 04 80          	or	reg[4], 0x80
  3622                          ;software_iic.c: 45: delay_us(2);
  3623  3AB3  50 02             	mov	a, 2
  3624  3AB5  57 00             	mov	x, 0
  3625  3AB7  7C 3B6C           	call	_delay_us
  3626                          ;software_iic.c: 46: PRT1DR &= ~0x20;
  3627  3ABA  41 04 DF          	and	reg[4], 0xDF
  3628                          ;software_iic.c: 47: delay_us(1);
  3629  3ABD  50 01             	mov	a, 1
  3630  3ABF  57 00             	mov	x, 0
  3631  3AC1  71 80             	or	f, 0x80	;select multiple RAM page mode
  3632  3AC3  7C 3B6C           	call	_delay_us
  3633                          ;software_iic.c: 48: PRT1DR &= ~0x80;
  3634  3AC6  41 04 7F          	and	reg[4], 0x7F
  3635                          ;software_iic.c: 49: delay_us(1);
  3636  3AC9  50 01             	mov	a, 1
  3637  3ACB  57 00             	mov	x, 0
  3638  3ACD  71 80             	or	f, 0x80	;select multiple RAM page mode
  3639  3ACF  7D 3B6C           	jmp	_delay_us
  3640                          ;software_iic.c: 50: }
  3641                          ;			CUR_PP=0 XIO=0 
  3642  3AD2                    __end_of_Start_I2c:
  3643                          ; =============== function _Start_I2c ends ============
  3644                          ; *************** function _SendByte *****************
  3645                          ; Defined at:
  3646                          ;		line 74 in file "./software_iic.c"
  3647                          ; Parameters:
  3648                          ;		c           	reg:    a	type: unsigned char 
  3649                          ; Auto variables:
  3650                          ;		c           	       	type: unsigned char 
  3651                          ;		BitCnt      	       	type: unsigned char 
  3652                          ; Return value:
  3653                          ;		type: void 
  3654                          ;		size: 0
  3655                          ; Registers used:
  3656                          ;		a, x, CUR_PP
  3657                          ; Tracked objects:
  3658                          ;		On entry : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  3659                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  3660                          ;		Unchanged: IDX_PP MVR_PP MVW_PP 
  3661                          ; Data sizes:
  3662                          ;		Autos:    2
  3663                          ;		Params:   0
  3664                          ;		Temp:     1
  3665                          ;		Total:    3
  3666                          ; This function calls:
  3667                          ;		_delay_us
  3668                          ;		_ChangeToRead
  3669                          ;		_ChangeToOD
  3670                          ; This function is called by:
  3671                          ;		_ISendByte
  3672                          ;		_IRcvBytes
  3673                          ; This function uses a non-reentrant model
  3674                          ; 
  3675  007A                    __size_of_SendByte	equ	__end_of_SendByte-_SendByte
  3676                          ;software_iic.c: 73: void SendByte(unsigned char c)
  3677                          ;software_iic.c: 74: {
  3678                          ;			CUR_PP=0 XIO=0 PG=2 
  3679  3AD2                    _SendByte:
  3680                          ;SendByte@c stored from a
  3681  3AD2  53 6B             	mov	[??_SendByte^0], a
  3682                          ;software_iic.c: 75: unsigned char BitCnt;
  3683                          ;software_iic.c: 77: for(BitCnt=0;BitCnt<8;BitCnt++)
  3684  3AD4  55 6C  00         	mov	[(??_SendByte+1)^0], 0
  3685                          ;			CUR_PP=0 XIO=0 
  3686  3AD7                    l195:
  3687                          ;software_iic.c: 78: {
  3688                          ;software_iic.c: 79: if((c<<BitCnt)&0x80)
  3689  3AD7  5F 6D  6C         	mov	[(??_SendByte^0+2)], [(??_SendByte+1)^0]
  3690  3ADA  51 6B             	mov	a, [??_SendByte^0]
  3691  3ADC  7D 3AE0           	jmp	u333
  3692  3ADF                    u334:
  3693  3ADF  64                	asl	a
  3694  3AE0                    u333:
  3695  3AE0  7A 6D             	dec	[(??_SendByte^0+2)]
  3696  3AE2  DFFC              	jnc	u334
  3697  3AE4  21 80             	and	a, 0x80
  3698  3AE6  A007              	jz	l198
  3699                          ;software_iic.c: 80: {
  3700                          ;software_iic.c: 81: PRT1DR |= 0x20;
  3701  3AE8  43 04 20          	or	reg[4], 0x20
  3702                          ;software_iic.c: 82: }
  3703  3AEB  7D 3AF1           	jmp	l199
  3704                          ;			CUR_PP=0 XIO=0 
  3705  3AEE                    l198:
  3706                          ;software_iic.c: 83: else
  3707                          ;software_iic.c: 84: {
  3708                          ;software_iic.c: 85: PRT1DR &= ~0x20;
  3709  3AEE  41 04 DF          	and	reg[4], 0xDF
  3710                          ;			CUR_PP=0 XIO=0 
  3711  3AF1                    l199:
  3712                          ;software_iic.c: 86: }
  3713                          ;software_iic.c: 87: delay_us(1);
  3714  3AF1  50 01             	mov	a, 1
  3715  3AF3  57 00             	mov	x, 0
  3716  3AF5  71 80             	or	f, 0x80	;select multiple RAM page mode
  3717  3AF7  7C 3B6C           	call	_delay_us
  3718                          ;software_iic.c: 88: PRT1DR |= 0x80;
  3719  3AFA  43 04 80          	or	reg[4], 0x80
  3720                          ;software_iic.c: 89: delay_us(1);
  3721  3AFD  50 01             	mov	a, 1
  3722  3AFF  57 00             	mov	x, 0
  3723  3B01  71 80             	or	f, 0x80	;select multiple RAM page mode
  3724  3B03  7C 3B6C           	call	_delay_us
  3725                          ;software_iic.c: 90: PRT1DR &= ~0x80;
  3726  3B06  41 04 7F          	and	reg[4], 0x7F
  3727                          ;software_iic.c: 91: delay_us(1);
  3728  3B09  50 01             	mov	a, 1
  3729  3B0B  57 00             	mov	x, 0
  3730  3B0D  71 80             	or	f, 0x80	;select multiple RAM page mode
  3731  3B0F  7C 3B6C           	call	_delay_us
  3732  3B12  76 6C             	inc	[(??_SendByte+1)^0]
  3733  3B14  3C 6C  08         	cmp	[(??_SendByte+1)^0], 8
  3734  3B17  CFBF              	jc	l195
  3735                          ;			CUR_PP=0 XIO=0 
  3736                          ;software_iic.c: 92: }
  3737                          ;software_iic.c: 93: ChangeToRead();
  3738  3B19  71 80             	or	f, 0x80	;select multiple RAM page mode
  3739  3B1B  7C 3B4C           	call	_ChangeToRead
  3740                          ;software_iic.c: 94: delay_us(2);
  3741  3B1E  50 02             	mov	a, 2
  3742  3B20  57 00             	mov	x, 0
  3743  3B22  71 80             	or	f, 0x80	;select multiple RAM page mode
  3744  3B24  7C 3B6C           	call	_delay_us
  3745                          ;software_iic.c: 95: PRT1DR |= 0x80;
  3746  3B27  43 04 80          	or	reg[4], 0x80
  3747                          ;software_iic.c: 96: delay_us(1);
  3748  3B2A  50 01             	mov	a, 1
  3749  3B2C  57 00             	mov	x, 0
  3750  3B2E  71 80             	or	f, 0x80	;select multiple RAM page mode
  3751  3B30  7C 3B6C           	call	_delay_us
  3752                          ;software_iic.c: 97: if(PRT1DR&0x20)
  3753  3B33  49 04 20          	tst	reg[4], 32
  3754  3B36  A007              	jz	l200
  3755                          ;software_iic.c: 98: {
  3756                          ;software_iic.c: 99: ack=0;
  3757  3B38  55 46  00         	mov	[_ack^0], 0
  3758                          ;software_iic.c: 100: }
  3759  3B3B  7D 3B41           	jmp	l201
  3760                          ;			CUR_PP=0 XIO=0 
  3761  3B3E                    l200:
  3762                          ;software_iic.c: 101: else
  3763                          ;software_iic.c: 102: {
  3764                          ;software_iic.c: 103: ack=1;
  3765  3B3E  55 46  01         	mov	[_ack^0], 1
  3766                          ;			CUR_PP=0 XIO=0 
  3767  3B41                    l201:
  3768                          ;software_iic.c: 104: }
  3769                          ;software_iic.c: 105: ChangeToOD();
  3770  3B41  71 80             	or	f, 0x80	;select multiple RAM page mode
  3771  3B43  7C 3B5D           	call	_ChangeToOD
  3772                          ;software_iic.c: 106: PRT1DR &= ~0x80;
  3773  3B46  41 04 7F          	and	reg[4], 0x7F
  3774  3B49  40                	nop	;#
  3775  3B4A  40                	nop	;#
  3776                          ;software_iic.c: 107: asm("nop");
  3777                          ;software_iic.c: 108: asm("nop");
  3778                          ;software_iic.c: 109: }
  3779                          ;			CUR_PP=0 XIO=0 
  3780  3B4B  7F                	ret
  3781  3B4C                    __end_of_SendByte:
  3782                          ; =============== function _SendByte ends ============
  3783                          ; *************** function _ChangeToRead *****************
  3784                          ; Defined at:
  3785                          ;		line 16 in file "./software_iic.c"
  3786                          ; Parameters:
  3787                          ;		None
  3788                          ; Auto variables:
  3789                          ;		None
  3790                          ; Return value:
  3791                          ;		type: void 
  3792                          ;		size: 0
  3793                          ; Registers used:
  3794                          ;		a, x, CUR_PP
  3795                          ; Tracked objects:
  3796                          ;		On entry : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  3797                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  3798                          ;		Unchanged: IDX_PP MVR_PP MVW_PP 
  3799                          ; Data sizes:
  3800                          ;		Autos:    0
  3801                          ;		Params:   0
  3802                          ;		Temp:     0
  3803                          ;		Total:    0
  3804                          ; This function calls:
  3805                          ;		_delay_us
  3806                          ; This function is called by:
  3807                          ;		_SendByte
  3808                          ;		_RcvByte
  3809                          ; This function uses a non-reentrant model
  3810                          ; 
  3811  0011                    __size_of_ChangeToRead	equ	__end_of_ChangeToRead-_ChangeToRead
  3812                          ;software_iic.c: 15: void ChangeToRead(void)
  3813                          ;software_iic.c: 16: {
  3814                          ;			CUR_PP=0 XIO=0 PG=2 
  3815  3B4C                    _ChangeToRead:
  3816                          ;software_iic.c: 17: PRT1DM0 &= ~(0x20);
  3817  3B4C  71 10             	or	f, 0x10	; select config register space
  3818  3B4E  41 04 DF          	and	reg[4], 0xDF
  3819                          ;software_iic.c: 18: PRT1DM2 &= ~(0x20);
  3820  3B51  70 CF             	and	f, 0xCF	;select user reg space
  3821  3B53  41 07 DF          	and	reg[7], 0xDF
  3822                          ;software_iic.c: 19: delay_us(1);
  3823  3B56  50 01             	mov	a, 1
  3824  3B58  57 00             	mov	x, 0
  3825  3B5A  7D 3B6C           	jmp	_delay_us
  3826                          ;software_iic.c: 20: }
  3827                          ;			CUR_PP=0 XIO=0 
  3828  3B5D                    __end_of_ChangeToRead:
  3829                          ; =============== function _ChangeToRead ends ============
  3830                          ; *************** function _ChangeToOD *****************
  3831                          ; Defined at:
  3832                          ;		line 23 in file "./software_iic.c"
  3833                          ; Parameters:
  3834                          ;		None
  3835                          ; Auto variables:
  3836                          ;		None
  3837                          ; Return value:
  3838                          ;		type: void 
  3839                          ;		size: 0
  3840                          ; Registers used:
  3841                          ;		a, x, CUR_PP
  3842                          ; Tracked objects:
  3843                          ;		On entry : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  3844                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  3845                          ;		Unchanged: IDX_PP MVR_PP MVW_PP 
  3846                          ; Data sizes:
  3847                          ;		Autos:    0
  3848                          ;		Params:   0
  3849                          ;		Temp:     0
  3850                          ;		Total:    0
  3851                          ; This function calls:
  3852                          ;		_delay_us
  3853                          ; This function is called by:
  3854                          ;		_SendByte
  3855                          ;		_RcvByte
  3856                          ; This function uses a non-reentrant model
  3857                          ; 
  3858  000F                    __size_of_ChangeToOD	equ	__end_of_ChangeToOD-_ChangeToOD
  3859                          ;software_iic.c: 22: void ChangeToOD(void)
  3860                          ;software_iic.c: 23: {
  3861                          ;			CUR_PP=0 XIO=0 PG=2 
  3862  3B5D                    _ChangeToOD:
  3863                          ;software_iic.c: 24: PRT1DM2 |= (0x20);
  3864  3B5D  43 07 20          	or	reg[7], 0x20
  3865                          ;software_iic.c: 26: PRT1DM0 |= (0x20);
  3866  3B60  71 10             	or	f, 0x10	; select config register space
  3867  3B62  43 04 20          	or	reg[4], 0x20
  3868                          ;software_iic.c: 27: delay_us(1);
  3869  3B65  50 01             	mov	a, 1
  3870  3B67  57 00             	mov	x, 0
  3871  3B69  7D 3B6C           	jmp	_delay_us
  3872                          ;software_iic.c: 28: }
  3873                          ;			CUR_PP=0 XIO=0 
  3874  3B6C                    __end_of_ChangeToOD:
  3875                          ; =============== function _ChangeToOD ends ============
  3876                          ; *************** function _delay_us *****************
  3877                          ; Defined at:
  3878                          ;		line 8 in file "./ht1621b.c"
  3879                          ; Parameters:
  3880                          ;		us          	reg:   xa	type: unsigned int 
  3881                          ; Auto variables:
  3882                          ;		us          	       	type: unsigned int 
  3883                          ; Return value:
  3884                          ;		type: void 
  3885                          ;		size: 0
  3886                          ; Registers used:
  3887                          ;		a, x, CUR_PP
  3888                          ; Tracked objects:
  3889                          ;		On entry : CUR_PP=0 IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  3890                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  3891                          ;		Unchanged: IDX_PP MVR_PP MVW_PP 
  3892                          ; Data sizes:
  3893                          ;		Autos:    2
  3894                          ;		Params:   0
  3895                          ;		Temp:     0
  3896                          ;		Total:    2
  3897                          ; This function calls:
  3898                          ;		Nothing
  3899                          ; This function is called by:
  3900                          ;		_SendBit_1621
  3901                          ;		_SendDataBit_1621
  3902                          ;		_SendCmd
  3903                          ;		_WriteAll_1621
  3904                          ;		_main
  3905                          ;		_ChangeToRead
  3906                          ;		_ChangeToOD
  3907                          ;		_Start_I2c
  3908                          ;		_Stop_I2c
  3909                          ;		_SendByte
  3910                          ;		_RcvByte
  3911                          ;		_Ack_I2c
  3912                          ; This function uses a non-reentrant model
  3913                          ; 
  3914  001E                    __size_of_delay_us	equ	__end_of_delay_us-_delay_us
  3915                          ;ht1621b.c: 7: void delay_us(unsigned int us)
  3916                          ;ht1621b.c: 8: {
  3917                          ;			CUR_PP=0 PG=2 
  3918  3B6C                    _delay_us:
  3919                          ;delay_us@us stored from xa
  3920  3B6C  53 6F             	mov	[(??_delay_us^0+1)], a
  3921  3B6E  5A 6E             	mov	[??_delay_us^0], x
  3922                          ;ht1621b.c: 9: for (;us>0;us--)
  3923  3B70  51 6E             	mov	a, [??_delay_us^0]
  3924  3B72  2A 6F             	or	a, [(??_delay_us^0+1)]
  3925  3B74  A012              	jz	l7
  3926                          ;			CUR_PP=0 
  3927  3B76                    l6:
  3928  3B76  40                	nop	;#
  3929  3B77  40                	nop	;#
  3930  3B78  40                	nop	;#
  3931  3B79  40                	nop	;#
  3932  3B7A  40                	nop	;#
  3933  3B7B  40                	nop	;#
  3934                          ;ht1621b.c: 10: {
  3935                          ;ht1621b.c: 11: asm ("NOP");
  3936                          ;ht1621b.c: 12: asm ("NOP");
  3937                          ;ht1621b.c: 13: asm ("NOP");
  3938                          ;ht1621b.c: 14: asm ("NOP");
  3939                          ;ht1621b.c: 15: asm ("NOP");
  3940                          ;ht1621b.c: 16: asm ("NOP");
  3941  3B7C  7A 6F             	dec	[(??_delay_us^0+1)]
  3942  3B7E  1E 6E  00         	sbb	[??_delay_us^0], 0
  3943  3B81  51 6E             	mov	a, [??_delay_us^0]
  3944  3B83  2A 6F             	or	a, [(??_delay_us^0+1)]
  3945  3B85  BFF0              	jnz	l6
  3946                          ;			CUR_PP=0 
  3947  3B87                    l7:
  3948                          ;ht1621b.c: 17: }
  3949                          ;ht1621b.c: 18: }
  3950                          ;			CUR_PP=0 
  3951  3B87  70 CF             	and	f, 0xCF	;select user reg space
  3952  3B89  7F                	ret
  3953  3B8A                    __end_of_delay_us:
  3954                          ; =============== function _delay_us ends ============
  3955                          ; *************** function _BoardUART *****************
  3956                          ; Defined at:
  3957                          ;		line 5 in file "./boardcommunication.c"
  3958                          ; Parameters:
  3959                          ;		None
  3960                          ; Auto variables:
  3961                          ;		rxdata      	       	type: unsigned char 
  3962                          ; Return value:
  3963                          ;		type: void 
  3964                          ;		size: 0
  3965                          ; Registers used:
  3966                          ;		a, x, TMP_DR0, TMP_DR1, TMP_DR2, TMP_DR3, CUR_PP, IDX_PP, MVR_PP, MVW_PP, mret
  3967                          ; Tracked objects:
  3968                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  3969                          ;		On exit  : CUR_PP? IDX_PP? XIO=0 PG=2 MVR_PP? MVW_PP? 
  3970                          ;		Unchanged: 
  3971                          ; Data sizes:
  3972                          ;		Autos:    1
  3973                          ;		Params:   0
  3974                          ;		Temp:     0
  3975                          ;		Total:    1
  3976                          ; This function calls:
  3977                          ;		_UART_Board_bReadRxData
  3978                          ;		_UART_Board_bReadTxStatus
  3979                          ;		_UART_Board_SendData
  3980                          ; This function is called by:
  3981                          ;		Interrupt level 2
  3982                          ; This function uses a non-reentrant model
  3983                          ; 
  3984  0019                    __size_of_BoardUART	equ	__end_of_BoardUART-_BoardUART
  3985                          ;boardcommunication.c: 4: void BoardUART(void )
  3986                          ;boardcommunication.c: 5: {
  3987                          ;			PG=2 
  3988  3B8A                    _BoardUART:
  3989                          ;boardcommunication.c: 6: unsigned char rxdata;
  3990                          ;boardcommunication.c: 8: rxdata = UART_Board_bReadRxData();
  3991  3B8A  70 CF             	and	f, 0xCF	;select user reg space
  3992  3B8C  7C 2E20           	call	_UART_Board_bReadRxData
  3993  3B8F  62 D0 00          	mov	reg[208], 0
  3994  3B92  53 7A             	mov	[??_BoardUART^0], a
  3995                          ;boardcommunication.c: 10: while (!(UART_Board_bReadTxStatus() & 0x10));
  3996                          ;			XIO=0 PG=2 
  3997  3B94                    l2:
  3998  3B94  7C 2E1D           	call	_UART_Board_bReadTxStatus
  3999  3B97  21 10             	and	a, 0x10
  4000  3B99  AFFA              	jz	l2
  4001                          ;			XIO=0 PG=2 
  4002                          ;boardcommunication.c: 11: UART_Board_SendData(rxdata);
  4003  3B9B  62 D0 00          	mov	reg[208], 0
  4004  3B9E  51 7A             	mov	a, [??_BoardUART^0]
  4005  3BA0  7D 2E1A           	jmp	_UART_Board_SendData
  4006                          ;boardcommunication.c: 12: }
  4007                          ;			XIO=0 PG=2 
  4008  3BA3                    __end_of_BoardUART:
  4009                          ; =============== function _BoardUART ends ============
  4010                          ; *************** function _Timer16ISR *****************
  4011                          ; Defined at:
  4012                          ;		line 27 in file "./main.c"
  4013                          ; Parameters:
  4014                          ;		None
  4015                          ; Auto variables:
  4016                          ;		None
  4017                          ; Return value:
  4018                          ;		type: void 
  4019                          ;		size: 0
  4020                          ; Registers used:
  4021                          ;		a, CUR_PP
  4022                          ; Tracked objects:
  4023                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  4024                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG=2 MVR_PP? MVW_PP? 
  4025                          ;		Unchanged: IDX_PP MVR_PP MVW_PP 
  4026                          ; Data sizes:
  4027                          ;		Autos:    0
  4028                          ;		Params:   0
  4029                          ;		Temp:     0
  4030                          ;		Total:    0
  4031                          ; This function calls:
  4032                          ;		Nothing
  4033                          ; This function is called by:
  4034                          ;		Interrupt level 2
  4035                          ; This function uses a non-reentrant model
  4036                          ; 
  4037  0030                    __size_of_Timer16ISR	equ	__end_of_Timer16ISR-_Timer16ISR
  4038                          ;main.c: 16: unsigned int LightADCValue;
  4039                          ;main.c: 18: unsigned char FanUpdateTimer = 8;
  4040                          ;main.c: 19: unsigned char one_sec_timer = 8;
  4041                          ;main.c: 20: unsigned char rh_sample_timer = 8;
  4042                          ;main.c: 21: unsigned char PlasmaTimer = 8;
  4043                          ;main.c: 22: unsigned char LcdUpdateTimer = 4;
  4044                          ;main.c: 23: unsigned char IICTimeOutTimer;
  4045                          ;main.c: 24: unsigned char RHSampleStep = 0;
  4046                          ;main.c: 26: void Timer16ISR(void)
  4047                          ;main.c: 27: {
  4048                          ;			PG=2 
  4049  3BA3                    _Timer16ISR:
  4050                          ;main.c: 28: if (one_sec_timer) one_sec_timer--;
  4051  3BA3  70 CF             	and	f, 0xCF	;select user reg space
  4052  3BA5  62 D0 00          	mov	reg[208], 0
  4053  3BA8  51 5D             	mov	a, [_one_sec_timer^0]
  4054  3BAA  A003              	jz	l114
  4055  3BAC  7A 5D             	dec	[_one_sec_timer^0]
  4056                          ;			CUR_PP=0 XIO=0 PG=2 
  4057  3BAE                    l114:
  4058                          ;main.c: 29: if (rh_sample_timer) rh_sample_timer--;
  4059  3BAE  51 60             	mov	a, [_rh_sample_timer^0]
  4060  3BB0  A003              	jz	l115
  4061  3BB2  7A 60             	dec	[_rh_sample_timer^0]
  4062                          ;			CUR_PP=0 XIO=0 PG=2 
  4063  3BB4                    l115:
  4064                          ;main.c: 30: if (FanUpdateTimer) FanUpdateTimer--;
  4065  3BB4  51 5A             	mov	a, [_FanUpdateTimer^0]
  4066  3BB6  A003              	jz	l116
  4067  3BB8  7A 5A             	dec	[_FanUpdateTimer^0]
  4068                          ;			CUR_PP=0 XIO=0 PG=2 
  4069  3BBA                    l116:
  4070                          ;main.c: 31: if (PlasmaTimer) PlasmaTimer--;
  4071  3BBA  51 5C             	mov	a, [_PlasmaTimer^0]
  4072  3BBC  A003              	jz	l117
  4073  3BBE  7A 5C             	dec	[_PlasmaTimer^0]
  4074                          ;			CUR_PP=0 XIO=0 PG=2 
  4075  3BC0                    l117:
  4076                          ;main.c: 32: if (LcdUpdateTimer) LcdUpdateTimer--;
  4077  3BC0  51 5B             	mov	a, [_LcdUpdateTimer^0]
  4078  3BC2  A003              	jz	l118
  4079  3BC4  7A 5B             	dec	[_LcdUpdateTimer^0]
  4080                          ;			CUR_PP=0 XIO=0 PG=2 
  4081  3BC6                    l118:
  4082                          ;main.c: 33: if (IICTimeOutTimer) IICTimeOutTimer--;
  4083  3BC6  51 38             	mov	a, [_IICTimeOutTimer^0]
  4084  3BC8  A003              	jz	l119
  4085  3BCA  7A 38             	dec	[_IICTimeOutTimer^0]
  4086                          ;			CUR_PP=0 XIO=0 PG=2 
  4087  3BCC                    l119:
  4088                          ;main.c: 34: if (RecTimeoutTimer) RecTimeoutTimer--;
  4089  3BCC  51 42             	mov	a, [_RecTimeoutTimer^0]
  4090  3BCE  A003              	jz	l120
  4091  3BD0  7A 42             	dec	[_RecTimeoutTimer^0]
  4092                          ;			CUR_PP=0 XIO=0 PG=2 
  4093  3BD2                    l120:
  4094                          ;main.c: 35: }
  4095                          ;			CUR_PP=0 XIO=0 PG=2 
  4096  3BD2  7F                	ret
  4097  3BD3                    __end_of_Timer16ISR:
  4098                          ; =============== function _Timer16ISR ends ============
  4099                          ; *************** function _SensorUART *****************
  4100                          ; Defined at:
  4101                          ;		line 12 in file "./particlesensor.c"
  4102                          ; Parameters:
  4103                          ;		None
  4104                          ; Auto variables:
  4105                          ;		rxdata      	       	type: unsigned char 
  4106                          ; Return value:
  4107                          ;		type: void 
  4108                          ;		size: 0
  4109                          ; Registers used:
  4110                          ;		a, x, TMP_DR0, TMP_DR1, TMP_DR2, TMP_DR3, CUR_PP, IDX_PP, MVR_PP, MVW_PP, mret
  4111                          ; Tracked objects:
  4112                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  4113                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG=2 MVR_PP? MVW_PP? 
  4114                          ;		Unchanged: 
  4115                          ; Data sizes:
  4116                          ;		Autos:    1
  4117                          ;		Params:   0
  4118                          ;		Temp:     2
  4119                          ;		Total:    3
  4120                          ; This function calls:
  4121                          ;		_UART_Sensor_bReadRxData
  4122                          ; This function is called by:
  4123                          ;		Interrupt level 2
  4124                          ; This function uses a non-reentrant model
  4125                          ; 
  4126  007E                    __size_of_SensorUART	equ	__end_of_SensorUART-_SensorUART
  4127                          ;particlesensor.c: 11: void SensorUART(void )
  4128                          ;particlesensor.c: 12: {
  4129                          ;			PG=2 
  4130  3BD3                    _SensorUART:
  4131                          ;particlesensor.c: 13: unsigned char rxdata;
  4132                          ;particlesensor.c: 14: unsigned char i;
  4133                          ;particlesensor.c: 15: rxdata = UART_Sensor_bReadRxData();
  4134  3BD3  70 CF             	and	f, 0xCF	;select user reg space
  4135  3BD5  7C 2F70           	call	_UART_Sensor_bReadRxData
  4136  3BD8  62 D0 00          	mov	reg[208], 0
  4137  3BDB  53 7A             	mov	[??_SensorUART^0], a
  4138                          ;particlesensor.c: 24: RecTimeoutTimer = 3;
  4139  3BDD  55 42  03         	mov	[_RecTimeoutTimer^0], 3
  4140                          ; SensorUART@rxdata loaded to a
  4141  3BE0  51 7A             	mov	a, [??_SensorUART^0]
  4142                          ;particlesensor.c: 26: if(HeadFlag == 0)
  4143  3BE2  3C 35  00         	cmp	[_HeadFlag^0], 0
  4144  3BE5  B030              	jnz	l143
  4145                          ;particlesensor.c: 27: {
  4146                          ;particlesensor.c: 29: if(DataPtr < 2)
  4147  3BE7  3C 32  02         	cmp	[_DataPtr^0], 2
  4148  3BEA  D00D              	jnc	l144
  4149                          ;particlesensor.c: 30: {
  4150                          ;particlesensor.c: 31: MyPMSUnion.PMRxBuf[DataPtr] = rxdata;
  4151  3BEC  58 32             	mov	x, [_DataPtr^0]
  4152  3BEE  62 D3 00          	mov	reg[211], 0
  4153  3BF1  54 00             	mov	[x+_MyPMSUnion], a
  4154                          ;particlesensor.c: 32: DataPtr ++;
  4155  3BF3  76 32             	inc	[_DataPtr^0]
  4156                          ;particlesensor.c: 33: }
  4157  3BF5  7D 3C03           	jmp	l145
  4158                          ;			CUR_PP=0 XIO=0 PG=2 
  4159  3BF8                    l144:
  4160                          ;particlesensor.c: 34: else
  4161                          ;particlesensor.c: 35: {
  4162                          ;particlesensor.c: 36: MyPMSUnion.MyPMFrame.Head <<= 8;
  4163  3BF8  5F 00  01         	mov	[_MyPMSUnion^0], [(_MyPMSUnion+1)^0]
  4164  3BFB  55 01  00         	mov	[(_MyPMSUnion+1)^0], 0
  4165                          ;particlesensor.c: 37: MyPMSUnion.PMRxBuf[1] = rxdata;
  4166  3BFE  53 01             	mov	[(_MyPMSUnion+1)^0], a
  4167                          ;particlesensor.c: 38: DataPtr = 2;
  4168  3C00  55 32  02         	mov	[_DataPtr^0], 2
  4169                          ;			CUR_PP=0 XIO=0 PG=2 
  4170  3C03                    l145:
  4171                          ;particlesensor.c: 39: }
  4172                          ;particlesensor.c: 42: if(DataPtr == 2 && MyPMSUnion.MyPMFrame.Head == 0x424d)
  4173  3C03  3C 32  02         	cmp	[_DataPtr^0], 2
  4174  3C06  B049              	jnz	l147
  4175  3C08  3C 00  42         	cmp	[_MyPMSUnion^0], 66
  4176  3C0B  B009              	jnz	l146
  4177  3C0D  3C 01  4D         	cmp	[(_MyPMSUnion^0+1)], 77
  4178  3C10  B03F              	jnz	l147
  4179                          ;particlesensor.c: 43: {
  4180                          ;particlesensor.c: 44: HeadFlag = 1;
  4181  3C12  55 35  01         	mov	[_HeadFlag^0], 1
  4182                          ;			CUR_PP=0 XIO=0 PG=2 
  4183  3C15                    l146:
  4184                          ;particlesensor.c: 45: }
  4185                          ;particlesensor.c: 46: }
  4186  3C15  7F                	ret
  4187                          ;			CUR_PP=0 XIO=0 PG=2 
  4188  3C16                    l143:
  4189                          ;particlesensor.c: 47: else
  4190                          ;particlesensor.c: 48: {
  4191                          ;particlesensor.c: 49: MyPMSUnion.PMRxBuf[DataPtr] = rxdata;
  4192  3C16  58 32             	mov	x, [_DataPtr^0]
  4193  3C18  62 D3 00          	mov	reg[211], 0
  4194  3C1B  54 00             	mov	[x+_MyPMSUnion], a
  4195                          ;particlesensor.c: 50: if(DataPtr >= (40-1))
  4196  3C1D  3C 32  27         	cmp	[_DataPtr^0], 39
  4197  3C20  C007              	jc	l148
  4198                          ;particlesensor.c: 51: {
  4199                          ;particlesensor.c: 52: DataPtr = (40-1);
  4200  3C22  55 32  27         	mov	[_DataPtr^0], 39
  4201                          ;particlesensor.c: 53: }
  4202  3C25  7D 3C2A           	jmp	l149
  4203                          ;			CUR_PP=0 IDX_PP=0 XIO=0 PG=2 
  4204  3C28                    l148:
  4205                          ;particlesensor.c: 54: else
  4206                          ;particlesensor.c: 55: {
  4207                          ;particlesensor.c: 56: DataPtr++;
  4208  3C28  76 32             	inc	[_DataPtr^0]
  4209                          ;			CUR_PP=0 IDX_PP=0 XIO=0 PG=2 
  4210  3C2A                    l149:
  4211                          ;particlesensor.c: 57: }
  4212                          ;particlesensor.c: 59: if(DataPtr == (MyPMSUnion.MyPMFrame.Length + 4) && DataPtr >= 6)
  4213  3C2A  5F 7B  02         	mov	[(??_SensorUART^0+1)], [(_MyPMSUnion+2)^0]
  4214  3C2D  5F 7C  03         	mov	[(??_SensorUART^0+2)], [(_MyPMSUnion+3)^0]
  4215  3C30  06 7C  04         	add	[(??_SensorUART^0+2)], 4
  4216  3C33  0E 7B  00         	adc	[(??_SensorUART^0+1)], 0
  4217  3C36  51 7B             	mov	a, [(??_SensorUART^0+1)]
  4218  3C38  39 00             	cmp	a, 0
  4219  3C3A  B015              	jnz	l147
  4220  3C3C  51 7C             	mov	a, [(??_SensorUART^0+2)]
  4221  3C3E  3A 32             	cmp	a, [_DataPtr^0]
  4222  3C40  B00F              	jnz	l147
  4223  3C42  3C 32  06         	cmp	[_DataPtr^0], 6
  4224  3C45  C00A              	jc	l147
  4225                          ;particlesensor.c: 60: {
  4226                          ;particlesensor.c: 61: PMSFrameFlag = 1;
  4227  3C47  55 3C  01         	mov	[_PMSFrameFlag^0], 1
  4228                          ;particlesensor.c: 62: HeadFlag = 0;
  4229  3C4A  55 35  00         	mov	[_HeadFlag^0], 0
  4230                          ;particlesensor.c: 63: DataPtr = 0;
  4231  3C4D  55 32  00         	mov	[_DataPtr^0], 0
  4232                          ;			CUR_PP=0 IDX_PP=0 XIO=0 PG=2 
  4233                          ;			CUR_PP=0 XIO=0 PG=2 
  4234  3C50                    l147:
  4235                          ;particlesensor.c: 70: }
  4236                          ;particlesensor.c: 71: }
  4237                          ;particlesensor.c: 72: }
  4238                          ;			CUR_PP=0 XIO=0 PG=2 
  4239  3C50  7F                	ret
  4240  3C51                    __end_of_SensorUART:
  4241  3C51                    ___end_of_c_program_code:
  4242                          
  4243                          	psect	maintext
  4244                          ;Data sizes: Strings 59, constant 20, data 7, bss 90, persistent 0 stack 28
  4245                          ; *************** function _main *****************
  4246                          ; Defined at:
  4247                          ;		line 38 in file "./main.c"
  4248                          ; Parameters:
  4249                          ;		None
  4250                          ; Auto variables:
  4251                          ;		ret         	       	type: unsigned char 
  4252                          ; Return value:
  4253                          ;		type: void 
  4254                          ;		size: 0
  4255                          ; Registers used:
  4256                          ;		a, x, TMP_DR0, TMP_DR1, TMP_DR2, TMP_DR3, CUR_PP, IDX_PP, MVR_PP, MVW_PP, mret
  4257                          ; Tracked objects:
  4258                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  4259                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG=2 MVR_PP? MVW_PP? 
  4260                          ;		Unchanged: 
  4261                          ; Data sizes:
  4262                          ;		Autos:    1
  4263                          ;		Params:   0
  4264                          ;		Temp:     1
  4265                          ;		Total:    2
  4266                          ; This function calls:
  4267                          ;		_Init_IIC
  4268                          ;		_delay_us
  4269                          ;		_HT1621B_Init
  4270                          ;		_PWM8_BL_WritePeriod
  4271                          ;		_PWM8_BL_WritePulseWidth
  4272                          ;		_PWM8_BL_Start
  4273                          ;		_UART_Board_Start
  4274                          ;		_UART_Sensor_Start
  4275                          ;		_UART_Sensor_IntCntl
  4276                          ;		_Timer16_WritePeriod
  4277                          ;		_Timer16_WriteCompareValue
  4278                          ;		_Timer16_EnableInt
  4279                          ;		_Timer16_Start
  4280                          ;		_UART_Board_CPutString
  4281                          ;		_SAR10_SetClk
  4282                          ;		_SAR10_SetRunMode
  4283                          ;		_SAR10_SetADCChannel
  4284                          ;		_SAR10_DisableInt
  4285                          ;		_SAR10_Start
  4286                          ;		_Si7020Init
  4287                          ;		_LCD_Init
  4288                          ;		_FrameCheck
  4289                          ;		_UART_Board_PutSHexInt
  4290                          ;		_UART_Board_PutCRLF
  4291                          ;		_SAR10_Trigger
  4292                          ;		_SAR10_fIsDataAvailable
  4293                          ;		_SAR10_iGetData
  4294                          ;		_Si7020SendCommand
  4295                          ;		_Si7020Read_RH_NHM
  4296                          ;		_CRC8Check
  4297                          ;		_Si7020CalcRH
  4298                          ;		_UART_Board_PutSHexByte
  4299                          ;		_Si7020Read_Temp_after_RHM
  4300                          ;		_Si7020CalcTemp
  4301                          ;		_LCDOuputAll
  4302                          ; This function is called by:
  4303                          ;		Startup code after reset
  4304                          ; This function uses a non-reentrant model
  4305                          ; 
  4306  01AF                    __size_of_main	equ	__end_of_main-_main
  4307                          ;main.c: 37: void main(void)
  4308                          ;main.c: 38: {
  4309                          ;			CUR_PP=0 XIO=0 PG=2 
  4310  3C51                    _main:
  4311  3C51  71 01             	or	f, 1	;#
  4312                          ;main.c: 39: unsigned char k;
  4313                          ;main.c: 40: unsigned char ret;
  4314                          ;main.c: 41: unsigned int *p;
  4315                          ;main.c: 42: asm("or  F, 01h") ;
  4316                          ;main.c: 44: RES_WDT = 0;
  4317  3C53  62 E3 00          	mov	reg[227], 0
  4318                          ;main.c: 45: Init_IIC();
  4319  3C56  7C 3456           	call	_Init_IIC
  4320                          ;main.c: 47: delay_us(200);
  4321  3C59  50 C8             	mov	a, 200
  4322  3C5B  57 00             	mov	x, 0
  4323  3C5D  7C 3B6C           	call	_delay_us
  4324                          ;main.c: 48: HT1621B_Init();
  4325  3C60  71 80             	or	f, 0x80	;select multiple RAM page mode
  4326  3C62  7C 3467           	call	_HT1621B_Init
  4327                          ;main.c: 51: PWM8_BL_WritePeriod(255);
  4328  3C65  50 FF             	mov	a, 255
  4329  3C67  71 80             	or	f, 0x80	;select multiple RAM page mode
  4330  3C69  7C 2C92           	call	_PWM8_BL_WritePeriod
  4331                          ;main.c: 52: PWM8_BL_WritePulseWidth(5);
  4332  3C6C  50 05             	mov	a, 5
  4333  3C6E  7C 2C95           	call	_PWM8_BL_WritePulseWidth
  4334                          ;main.c: 53: PWM8_BL_Start();
  4335  3C71  7C 2C8A           	call	_PWM8_BL_Start
  4336                          ;main.c: 57: UART_Board_Start(0x00);
  4337  3C74  50 00             	mov	a, 0
  4338  3C76  7C 2E0C           	call	_UART_Board_Start
  4339                          ;main.c: 61: UART_Sensor_Start(0x00);
  4340  3C79  50 00             	mov	a, 0
  4341  3C7B  7C 2F5C           	call	_UART_Sensor_Start
  4342                          ;main.c: 63: UART_Sensor_IntCntl(0x01 | 0x00);
  4343  3C7E  50 01             	mov	a, 1
  4344  3C80  7C 2F89           	call	_UART_Sensor_IntCntl
  4345                          ;main.c: 65: Timer16_WritePeriod(9600);
  4346  3C83  50 80             	mov	a, 128
  4347  3C85  57 25             	mov	x, 37
  4348  3C87  7C 2D9A           	call	_Timer16_WritePeriod
  4349                          ;main.c: 66: Timer16_WriteCompareValue(9000);
  4350  3C8A  50 28             	mov	a, 40
  4351  3C8C  57 23             	mov	x, 35
  4352  3C8E  7C 2DA0           	call	_Timer16_WriteCompareValue
  4353                          ;main.c: 67: Timer16_EnableInt();
  4354  3C91  7C 2D8A           	call	_Timer16_EnableInt
  4355                          ;main.c: 68: Timer16_Start();
  4356  3C94  7C 2D92           	call	_Timer16_Start
  4357                          ;main.c: 70: UART_Board_CPutString("Woody is a genius!");
  4358  3C97  57 00             	mov	x, <STR_1
  4359  3C99  50 3F             	mov	a, >STR_1
  4360  3C9B  7C 2F1F           	call	_UART_Board_CPutString
  4361                          ;main.c: 72: PMSFrameFlag = 0;
  4362  3C9E  62 D0 00          	mov	reg[208], 0
  4363  3CA1  55 3C  00         	mov	[_PMSFrameFlag^0], 0
  4364                          ;main.c: 73: HeadFlag = 0;
  4365  3CA4  55 35  00         	mov	[_HeadFlag^0], 0
  4366                          ;main.c: 74: DataPtr = 0;
  4367  3CA7  55 32  00         	mov	[_DataPtr^0], 0
  4368                          ;main.c: 76: SAR10_SetClk((0x0A));
  4369  3CAA  50 0A             	mov	a, 10
  4370  3CAC  7C 2D59           	call	_SAR10_SetClk
  4371                          ;main.c: 77: SAR10_SetRunMode((0x00));
  4372  3CAF  50 00             	mov	a, 0
  4373  3CB1  7C 2D71           	call	_SAR10_SetRunMode
  4374                          ;main.c: 78: SAR10_SetADCChannel((0x60));
  4375  3CB4  50 60             	mov	a, 96
  4376  3CB6  7C 2D11           	call	_SAR10_SetADCChannel
  4377                          ;main.c: 79: SAR10_DisableInt();
  4378  3CB9  7C 2CCF           	call	_SAR10_DisableInt
  4379                          ;main.c: 80: SAR10_Start();
  4380  3CBC  7C 2CD3           	call	_SAR10_Start
  4381                          ;main.c: 82: Si7020Init();
  4382  3CBF  7C 30F8           	call	_Si7020Init
  4383                          ;main.c: 84: LCD_Init();
  4384  3CC2  7C 30D9           	call	_LCD_Init
  4385                          ;main.c: 86: RES_WDT = 0;
  4386  3CC5  62 E3 00          	mov	reg[227], 0
  4387                          ;main.c: 87: while(1)
  4388                          ;			CUR_PP=0 XIO=0 
  4389  3CC8                    l123:
  4390                          ;main.c: 88: {
  4391                          ;main.c: 89: if (!RecTimeoutTimer)
  4392  3CC8  51 42             	mov	a, [_RecTimeoutTimer^0]
  4393  3CCA  B00A              	jnz	l125
  4394                          ;main.c: 90: {
  4395                          ;main.c: 91: PMSFrameFlag = 0;
  4396  3CCC  55 3C  00         	mov	[_PMSFrameFlag^0], 0
  4397                          ;main.c: 92: HeadFlag = 0;
  4398  3CCF  55 35  00         	mov	[_HeadFlag^0], 0
  4399                          ;main.c: 93: DataPtr = 0;
  4400  3CD2  55 32  00         	mov	[_DataPtr^0], 0
  4401                          ;			CUR_PP=0 XIO=0 
  4402  3CD5                    l125:
  4403                          ;main.c: 94: }
  4404                          ;main.c: 96: if (PMSFrameFlag)
  4405  3CD5  51 3C             	mov	a, [_PMSFrameFlag^0]
  4406  3CD7  A03A              	jz	l126
  4407                          ;main.c: 97: {
  4408                          ;main.c: 98: PMSFrameFlag = 0;
  4409  3CD9  55 3C  00         	mov	[_PMSFrameFlag^0], 0
  4410                          ;main.c: 99: if (FrameCheck())
  4411  3CDC  71 80             	or	f, 0x80	;select multiple RAM page mode
  4412  3CDE  7C 308C           	call	_FrameCheck
  4413  3CE1  78                	dec	a
  4414  3CE2  C026              	jc	l127
  4415                          ;main.c: 100: {
  4416                          ;main.c: 101: data_pm2_5 = MyPMSUnion.MyPMFrame.PM2_5_US;
  4417  3CE4  5F 2F  06         	mov	[_data_pm2_5^0], [(_MyPMSUnion+6)^0]
  4418  3CE7  5F 30  07         	mov	[(_data_pm2_5+1)^0], [(_MyPMSUnion+7)^0]
  4419                          ;main.c: 102: data_pm1_0 = MyPMSUnion.MyPMFrame.PM1_0_US;
  4420  3CEA  5F 2D  04         	mov	[_data_pm1_0^0], [(_MyPMSUnion+4)^0]
  4421  3CED  5F 2E  05         	mov	[(_data_pm1_0+1)^0], [(_MyPMSUnion+5)^0]
  4422                          ;main.c: 103: UART_Board_CPutString("PM2.5:");
  4423  3CF0  57 2F             	mov	x, <STR_2
  4424  3CF2  50 3F             	mov	a, >STR_2
  4425  3CF4  71 80             	or	f, 0x80	;select multiple RAM page mode
  4426  3CF6  7C 2F1F           	call	_UART_Board_CPutString
  4427                          ;main.c: 104: UART_Board_PutSHexInt(data_pm2_5);
  4428  3CF9  62 D0 00          	mov	reg[208], 0
  4429  3CFC  51 30             	mov	a, [(_data_pm2_5^0+1)]
  4430  3CFE  58 2F             	mov	x, [_data_pm2_5^0]
  4431  3D00  7C 2E77           	call	_UART_Board_PutSHexInt
  4432                          ;main.c: 105: UART_Board_PutCRLF();
  4433  3D03  7C 2F31           	call	_UART_Board_PutCRLF
  4434                          ;main.c: 107: }
  4435  3D06  7D 3D12           	jmp	l126
  4436                          ;			CUR_PP=0 XIO=0 
  4437  3D09                    l127:
  4438                          ;main.c: 108: else
  4439                          ;main.c: 109: {
  4440                          ;main.c: 110: UART_Board_CPutString("Checksum fail");
  4441  3D09  57 13             	mov	x, <STR_3
  4442  3D0B  50 3F             	mov	a, >STR_3
  4443  3D0D  71 80             	or	f, 0x80	;select multiple RAM page mode
  4444  3D0F  7C 2F1F           	call	_UART_Board_CPutString
  4445                          ;			XIO=0 PG=2 
  4446                          ;			XIO=0 
  4447  3D12                    l126:
  4448                          ;main.c: 111: }
  4449                          ;main.c: 112: }
  4450                          ;main.c: 114: if (!one_sec_timer)
  4451  3D12  62 D0 00          	mov	reg[208], 0
  4452  3D15  51 5D             	mov	a, [_one_sec_timer^0]
  4453  3D17  B01E              	jnz	l129
  4454                          ;main.c: 115: {
  4455                          ;main.c: 116: one_sec_timer = 8;
  4456  3D19  55 5D  08         	mov	[_one_sec_timer^0], 8
  4457                          ;main.c: 129: MUX_CR2 |= 0X02;
  4458  3D1C  71 10             	or	f, 0x10	; select config register space
  4459  3D1E  43 DA 02          	or	reg[0xDA], 2
  4460                          ;main.c: 130: SAR10_Trigger();
  4461  3D21  71 80             	or	f, 0x80	;select multiple RAM page mode
  4462  3D23  70 CF             	and	f, 0xCF	;select user reg space
  4463  3D25  7C 2CE3           	call	_SAR10_Trigger
  4464                          ;main.c: 131: while(SAR10_fIsDataAvailable()==0);
  4465                          ;			XIO=0 PG=2 
  4466  3D28                    l130:
  4467  3D28  7C 2CEB           	call	_SAR10_fIsDataAvailable
  4468  3D2B  78                	dec	a
  4469  3D2C  CFFB              	jc	l130
  4470                          ;			XIO=0 PG=2 
  4471                          ;main.c: 132: LightADCValue = SAR10_iGetData();
  4472  3D2E  7C 2CF4           	call	_SAR10_iGetData
  4473                          ;main.c: 133: MUX_CR2 &= ~0X02;
  4474  3D31  71 10             	or	f, 0x10	; select config register space
  4475  3D33  41 DA FD          	and	reg[0xDA], 0xFD
  4476                          ;			
  4477  3D36                    l129:
  4478                          ;main.c: 136: }
  4479                          ;main.c: 139: if(!rh_sample_timer)
  4480  3D36  70 CF             	and	f, 0xCF	;select user reg space
  4481  3D38  62 D0 00          	mov	reg[208], 0
  4482  3D3B  51 60             	mov	a, [_rh_sample_timer^0]
  4483  3D3D  B0AD              	jnz	l133
  4484                          ;main.c: 140: {
  4485                          ;main.c: 141: rh_sample_timer = 8;
  4486  3D3F  55 60  08         	mov	[_rh_sample_timer^0], 8
  4487                          ;main.c: 142: if (!RHSampleStep)
  4488  3D42  51 40             	mov	a, [_RHSampleStep^0]
  4489  3D44  B014              	jnz	l134
  4490                          ;main.c: 143: {
  4491                          ;main.c: 144: ret = Si7020SendCommand(0xF5);
  4492  3D46  50 F5             	mov	a, 245
  4493  3D48  71 80             	or	f, 0x80	;select multiple RAM page mode
  4494  3D4A  7C 370D           	call	_Si7020SendCommand
  4495  3D4D  53 61             	mov	[??_main^0], a
  4496                          ;main.c: 145: if(ret)
  4497  3D4F  51 61             	mov	a, [??_main^0]
  4498  3D51  A099              	jz	l133
  4499                          ;main.c: 146: {
  4500                          ;main.c: 149: RHSampleStep = 1;
  4501  3D53  55 40  01         	mov	[_RHSampleStep^0], 1
  4502                          ;main.c: 150: }
  4503                          ;main.c: 151: else
  4504                          ;main.c: 152: {
  4505                          ;			CUR_PP=0 XIO=0 
  4506                          ;main.c: 155: }
  4507                          ;main.c: 156: }
  4508  3D56  7D 3DEB           	jmp	l133
  4509                          ;			CUR_PP=0 XIO=0 
  4510  3D59                    l134:
  4511                          ;main.c: 157: else
  4512                          ;main.c: 158: {
  4513                          ;main.c: 159: Si7020Read_RH_NHM(RecBuf);
  4514  3D59  50 55             	mov	a, <(<_RecBuf)
  4515  3D5B  71 80             	or	f, 0x80	;select multiple RAM page mode
  4516  3D5D  7C 3105           	call	_Si7020Read_RH_NHM
  4517                          ;main.c: 160: Si7020Data = *(unsigned int *)RecBuf;
  4518  3D60  57 55             	mov	x, <_RecBuf
  4519  3D62  62 D3 00          	mov	reg[211], 0
  4520  3D65  52 00             	mov	a, [x+0]
  4521  3D67  08                	push	a
  4522  3D68  52 01             	mov	a, [x+1]
  4523  3D6A  53 2C             	mov	[(_Si7020Data^0+1)], a
  4524  3D6C  18                	pop	a
  4525  3D6D  53 2B             	mov	[_Si7020Data^0], a
  4526                          ;main.c: 161: if (CRC8Check())
  4527  3D6F  71 80             	or	f, 0x80	;select multiple RAM page mode
  4528  3D71  7C 3121           	call	_CRC8Check
  4529  3D74  78                	dec	a
  4530  3D75  C02D              	jc	l138
  4531                          ;main.c: 162: {
  4532                          ;main.c: 163: UART_Board_CPutString("RH: ");
  4533  3D77  57 36             	mov	x, <STR_4
  4534  3D79  50 3F             	mov	a, >STR_4
  4535  3D7B  71 80             	or	f, 0x80	;select multiple RAM page mode
  4536  3D7D  7C 2F1F           	call	_UART_Board_CPutString
  4537                          ;main.c: 164: UART_Board_PutSHexInt(Si7020Data);
  4538  3D80  62 D0 00          	mov	reg[208], 0
  4539  3D83  51 2C             	mov	a, [(_Si7020Data^0+1)]
  4540  3D85  58 2B             	mov	x, [_Si7020Data^0]
  4541  3D87  7C 2E77           	call	_UART_Board_PutSHexInt
  4542                          ;main.c: 165: UART_Board_PutCRLF();
  4543  3D8A  7C 2F31           	call	_UART_Board_PutCRLF
  4544                          ;main.c: 166: Humidity = Si7020CalcRH(Si7020Data);
  4545  3D8D  62 D0 00          	mov	reg[208], 0
  4546  3D90  51 2C             	mov	a, [(_Si7020Data^0+1)]
  4547  3D92  58 2B             	mov	x, [_Si7020Data^0]
  4548  3D94  7C 314B           	call	_Si7020CalcRH
  4549  3D97  53 37             	mov	[_Humidity^0], a
  4550                          ;main.c: 167: UART_Board_PutSHexByte(Humidity);
  4551  3D99  51 37             	mov	a, [_Humidity^0]
  4552  3D9B  71 80             	or	f, 0x80	;select multiple RAM page mode
  4553  3D9D  7C 2E64           	call	_UART_Board_PutSHexByte
  4554                          ;main.c: 168: UART_Board_PutCRLF();
  4555  3DA0  7C 2F31           	call	_UART_Board_PutCRLF
  4556                          ;			XIO=0 
  4557  3DA3                    l138:
  4558                          ;main.c: 169: }
  4559                          ;main.c: 171: Si7020Read_Temp_after_RHM(RecBuf);
  4560  3DA3  50 55             	mov	a, <(<_RecBuf)
  4561  3DA5  71 80             	or	f, 0x80	;select multiple RAM page mode
  4562  3DA7  7C 31DE           	call	_Si7020Read_Temp_after_RHM
  4563                          ;main.c: 172: Si7020Data = *(unsigned int *)RecBuf;
  4564  3DAA  57 55             	mov	x, <_RecBuf
  4565  3DAC  62 D3 00          	mov	reg[211], 0
  4566  3DAF  52 00             	mov	a, [x+0]
  4567  3DB1  08                	push	a
  4568  3DB2  52 01             	mov	a, [x+1]
  4569  3DB4  53 2C             	mov	[(_Si7020Data^0+1)], a
  4570  3DB6  18                	pop	a
  4571  3DB7  53 2B             	mov	[_Si7020Data^0], a
  4572                          ;main.c: 173: UART_Board_CPutString("Temperature: ");
  4573  3DB9  57 21             	mov	x, <STR_5
  4574  3DBB  50 3F             	mov	a, >STR_5
  4575  3DBD  71 80             	or	f, 0x80	;select multiple RAM page mode
  4576  3DBF  7C 2F1F           	call	_UART_Board_CPutString
  4577                          ;main.c: 174: UART_Board_PutSHexInt(Si7020Data);
  4578  3DC2  62 D0 00          	mov	reg[208], 0
  4579  3DC5  51 2C             	mov	a, [(_Si7020Data^0+1)]
  4580  3DC7  58 2B             	mov	x, [_Si7020Data^0]
  4581  3DC9  7C 2E77           	call	_UART_Board_PutSHexInt
  4582                          ;main.c: 175: UART_Board_PutCRLF();
  4583  3DCC  7C 2F31           	call	_UART_Board_PutCRLF
  4584                          ;main.c: 176: Temperature = Si7020CalcTemp(Si7020Data);
  4585  3DCF  62 D0 00          	mov	reg[208], 0
  4586  3DD2  51 2C             	mov	a, [(_Si7020Data^0+1)]
  4587  3DD4  58 2B             	mov	x, [_Si7020Data^0]
  4588  3DD6  7C 31FF           	call	_Si7020CalcTemp
  4589  3DD9  53 44             	mov	[_Temperature^0], a
  4590                          ;main.c: 177: UART_Board_PutSHexByte(Temperature);
  4591  3DDB  51 44             	mov	a, [_Temperature^0]
  4592  3DDD  71 80             	or	f, 0x80	;select multiple RAM page mode
  4593  3DDF  7C 2E64           	call	_UART_Board_PutSHexByte
  4594                          ;main.c: 178: UART_Board_PutCRLF();
  4595  3DE2  7C 2F31           	call	_UART_Board_PutCRLF
  4596                          ;main.c: 179: RHSampleStep = 0;
  4597  3DE5  62 D0 00          	mov	reg[208], 0
  4598  3DE8  55 40  00         	mov	[_RHSampleStep^0], 0
  4599                          ;			CUR_PP=0 XIO=0 PG=2 
  4600                          ;			CUR_PP=0 XIO=0 
  4601  3DEB                    l133:
  4602                          ;main.c: 180: }
  4603                          ;main.c: 181: }
  4604                          ;main.c: 183: if (!LcdUpdateTimer)
  4605  3DEB  51 5B             	mov	a, [_LcdUpdateTimer^0]
  4606  3DED  B009              	jnz	l139
  4607                          ;main.c: 184: {
  4608                          ;main.c: 185: LcdUpdateTimer = 4;
  4609  3DEF  55 5B  04         	mov	[_LcdUpdateTimer^0], 4
  4610                          ;main.c: 186: LCDOuputAll();
  4611  3DF2  71 80             	or	f, 0x80	;select multiple RAM page mode
  4612  3DF4  7C 32A3           	call	_LCDOuputAll
  4613                          ;			CUR_PP=0 XIO=0 
  4614  3DF7                    l139:
  4615                          ;main.c: 187: }
  4616                          ;main.c: 189: RES_WDT = 0;
  4617  3DF7  62 E3 00          	mov	reg[227], 0
  4618                          ;			CUR_PP=0 XIO=0 
  4619  3DFA  7D 3CC8           	jmp	l123
  4620  3DFD                    ___exit:	;where's that confounded watchdog?
  4621  3DFD  7D 3DFD           	jmp	___exit
  4622  3E00                    __end_of_main:
  4623                          
  4624                          	psect	ramdata0
  4625                          ; =============== function _SensorUART ends ============
  4626  005A                    _FanUpdateTimer:
  4627  005A                    	blk	1
  4628  005B                    _LcdUpdateTimer:
  4629  005B                    	blk	1
  4630  005C                    _PlasmaTimer:
  4631  005C                    	blk	1
  4632  005D                    _one_sec_timer:
  4633  005D                    	blk	1
  4634  005E                    _poly_h:
  4635  005E                    	blk	1
  4636  005F                    _poly_l:
  4637  005F                    	blk	1
  4638  0060                    _rh_sample_timer:
  4639  0060                    	blk	1
  4640                          
  4641                          	psect	romdata0
  4642                          ;initializer for _FanUpdateTimer
  4643  0065  08                	db	8
  4644                          ;initializer for _LcdUpdateTimer
  4645  0066  04                	db	4
  4646                          ;initializer for _PlasmaTimer
  4647  0067  08                	db	8
  4648                          ;initializer for _one_sec_timer
  4649  0068  08                	db	8
  4650                          ;initializer for _poly_h
  4651  0069  98                	db	152
  4652                          ;initializer for _poly_l
  4653  006A  80                	db	128
  4654                          ;initializer for _rh_sample_timer
  4655  006B  08                	db	8
  4656                          
  4657                          	psect	cdata
  4658  3E00                    _DigitSeg:
  4659  3E00  F5                	db	245
  4660  3E01  60                	db	96
  4661  3E02  B6                	db	182
  4662  3E03  F2                	db	242
  4663  3E04  63                	db	99
  4664  3E05  D3                	db	211
  4665  3E06  D7                	db	215
  4666  3E07  70                	db	112
  4667  3E08  F7                	db	247
  4668  3E09  F3                	db	243
  4669  3E0A                    _DigitSegSwap:
  4670  3E0A  5F                	db	95
  4671  3E0B  06                	db	6
  4672  3E0C  6B                	db	107
  4673  3E0D  2F                	db	47
  4674  3E0E  36                	db	54
  4675  3E0F  3D                	db	61
  4676  3E10  7D                	db	125
  4677  3E11  07                	db	7
  4678  3E12  7F                	db	127
  4679  3E13  3F                	db	63
  4680                          
  4681                          	psect	bss0
  4682  0000                    _MyPMSUnion:
  4683  0000                    	blk	40
  4684  0028                    _DisplayNum:
  4685  0028                    	blk	3
  4686  002B                    _Si7020Data:
  4687  002B                    	blk	2
  4688  002D                    _data_pm1_0:
  4689  002D                    	blk	2
  4690  002F                    _data_pm2_5:
  4691  002F                    	blk	2
  4692  0031                    _CarbonLife:
  4693  0031                    	blk	1
  4694  0032                    _DataPtr:
  4695  0032                    	blk	1
  4696  0033                    _FanFlag:
  4697  0033                    	blk	1
  4698  0034                    _FanUpdateTimeReload:
  4699  0034                    	blk	1
  4700  0035                    _HeadFlag:
  4701  0035                    	blk	1
  4702  0036                    _HeapLife:
  4703  0036                    	blk	1
  4704  0037                    _Humidity:
  4705  0037                    	blk	1
  4706  0038                    _IICTimeOutTimer:
  4707  0038                    	blk	1
  4708  0039                    _LifeFlag:
  4709  0039                    	blk	1
  4710  003A                    _LockStatus:
  4711  003A                    	blk	1
  4712  003B                    _Odor:
  4713  003B                    	blk	1
  4714  003C                    _PMSFrameFlag:
  4715  003C                    	blk	1
  4716  003D                    _PM_Flag:
  4717  003D                    	blk	1
  4718  003E                    _Plasma:
  4719  003E                    	blk	1
  4720  003F                    _PlasmaFlag:
  4721  003F                    	blk	1
  4722  0040                    _RHSampleStep:
  4723  0040                    	blk	1
  4724  0041                    _RH_T_Flag:
  4725  0041                    	blk	1
  4726  0042                    _RecTimeoutTimer:
  4727  0042                    	blk	1
  4728  0043                    _SpeedLvl:
  4729  0043                    	blk	1
  4730  0044                    _Temperature:
  4731  0044                    	blk	1
  4732  0045                    _Timer:
  4733  0045                    	blk	1
  4734  0046                    _ack:
  4735  0046                    	blk	1
  4736  0047                    _data_length:
  4737  0047                    	blk	1
  4738  0048                    _mode:
  4739  0048                    	blk	1
  4740  0049                    _DisplayBuf:
  4741  0049                    	blk	12
  4742  0055                    _RecBuf:
  4743  0055                    	blk	5
  4744                          
  4745                          	psect	strings
  4746                          ;			CUR_PP=0 XIO=0 PG=2 
  4747  3F00                    STR_1:
  4748  3F00  57                	db	87	;'W'
  4749  3F01  6F                	db	111	;'o'
  4750  3F02  6F                	db	111	;'o'
  4751  3F03  64                	db	100	;'d'
  4752  3F04  79                	db	121	;'y'
  4753  3F05  20                	db	32
  4754  3F06  69                	db	105	;'i'
  4755  3F07  73                	db	115	;'s'
  4756  3F08  20                	db	32
  4757  3F09  61                	db	97	;'a'
  4758  3F0A  20                	db	32
  4759  3F0B  67                	db	103	;'g'
  4760  3F0C  65                	db	101	;'e'
  4761  3F0D  6E                	db	110	;'n'
  4762  3F0E  69                	db	105	;'i'
  4763  3F0F  75                	db	117	;'u'
  4764  3F10  73                	db	115	;'s'
  4765  3F11  21                	db	33	;'!'
  4766  3F12  00                	db	0
  4767                          ;			CUR_PP=0 XIO=0 PG=2 
  4768  3F13                    STR_3:
  4769  3F13  43                	db	67	;'C'
  4770  3F14  68                	db	104	;'h'
  4771  3F15  65                	db	101	;'e'
  4772  3F16  63                	db	99	;'c'
  4773  3F17  6B                	db	107	;'k'
  4774  3F18  73                	db	115	;'s'
  4775  3F19  75                	db	117	;'u'
  4776  3F1A  6D                	db	109	;'m'
  4777  3F1B  20                	db	32
  4778  3F1C  66                	db	102	;'f'
  4779  3F1D  61                	db	97	;'a'
  4780  3F1E  69                	db	105	;'i'
  4781  3F1F  6C                	db	108	;'l'
  4782  3F20  00                	db	0
  4783                          ;			CUR_PP=0 XIO=0 PG=2 
  4784  3F21                    STR_5:
  4785  3F21  54                	db	84	;'T'
  4786  3F22  65                	db	101	;'e'
  4787  3F23  6D                	db	109	;'m'
  4788  3F24  70                	db	112	;'p'
  4789  3F25  65                	db	101	;'e'
  4790  3F26  72                	db	114	;'r'
  4791  3F27  61                	db	97	;'a'
  4792  3F28  74                	db	116	;'t'
  4793  3F29  75                	db	117	;'u'
  4794  3F2A  72                	db	114	;'r'
  4795  3F2B  65                	db	101	;'e'
  4796  3F2C  3A                	db	58	;':'
  4797  3F2D  20                	db	32
  4798  3F2E  00                	db	0
  4799                          ;			CUR_PP=0 XIO=0 PG=2 
  4800  3F2F                    STR_2:
  4801  3F2F  50                	db	80	;'P'
  4802  3F30  4D                	db	77	;'M'
  4803  3F31  32                	db	50	;'2'
  4804  3F32  2E                	db	46	;'.'
  4805  3F33  35                	db	53	;'5'
  4806  3F34  3A                	db	58	;':'
  4807  3F35  00                	db	0
  4808                          ;			CUR_PP=0 XIO=0 PG=2 
  4809  3F36                    STR_4:
  4810  3F36  52                	db	82	;'R'
  4811  3F37  48                	db	72	;'H'
  4812  3F38  3A                	db	58	;':'
  4813  3F39  20                	db	32
  4814  3F3A  00                	db	0


HI-TECH Software Macro Assembler (PSoC MCU) V9.61
Symbol Table                                                                                               Fri Jun 12 10:41:26 2015

                  DisplayPMxx@index 0068                      SendByte@BitCnt 006C                     DisplayPMxx@temp 0066  
                      _ChangeToRead 3B4C                 _UART_Board_SendData 2E1A                    ___awdiv@dividend 006B  
                                 l2 3B94                                   l6 3B76                                   l7 3B87  
                       _PlasmaTimer 005C                          delay_us@us 006E                            _ShowLife 36AC  
                          _SpeedLvl 0043                                  l21 3836                                  l14 378F  
                                l30 3498                                  l24 3863                                  l25 3841  
                                l17 37BA                                  l33 34AB                                  l26 3844  
                                l18 379A                                  l42 3574                                  l19 379D  
                                l43 35EF                                  l52 36B9                                  l60 3682  
                                l44 35CC                                  l53 36D3                                  l61 3685  
                                l45 35F4                                  l54 36D6                                  l46 35E9  
                                l70 32F9                                  l71 3310                                  l63 32A5  
                                l56 3621                                  l48 35FB                                  l80 3362  
                                l72 331B                                  l57 3657                                  l49 3613  
                                l81 3386                                  l73 331E                                  l58 364C  
                                l90 33AA                                  l74 332C                                  l66 32C7  
                                l91 33F6                                  l83 337B                                  l75 334A  
                                l67 32D3                                  l92 33BD                                  l76 333D  
                                l68 32E7                                  l85 3384                                  l69 32F1  
                                l94 33D0                                  l78 3357                                  l87 3390  
                                l79 335A                                  l96 33E3                                  l88 3397  
                                l98 33F3                          ??_SendByte 006B                __end_of_ChangeToRead 3B5D  
                          _Stop_I2c 3A8B                          _Timer16ISR 3BA3                           l500002322 34D9  
                __end_of_Timer16ISR 3BD3                          ??_ShowLife 0064                                 l100 3404  
                               l101 343C                                 l102 3412                                 l120 3BD2  
                               l200 3B3E                                 l104 3420                                 l201 3B41  
                               l114 3BAE                                 l106 342E                                 l130 3D28  
                               l115 3BB4                                 l211 3A70                                 l203 39CD  
                               l123 3CC8                                 l116 3BBA                                 l212 3A83  
                               l108 3439                                 l117 3BC0                                 l133 3DEB  
                               l125 3CD5                                 l118 3BC6                                 l206 39F8  
                               l134 3D59                                 l126 3D12                                 l143 3C16  
                               l119 3BCC                                 l127 3D09                                 l144 3BF8  
                               l208 39A2                                 l232 3732                                 l152 3097  
                               l145 3C03                                 l209 39A5                                 l233 3738  
                               l161 310A                                 l129 3D36                                 l146 3C15  
                               l242 387E                                 l330 34F3                                 l170 31D1  
                               l162 3120                                 l138 3DA3                                 l147 3C50  
                               l251 353B                                 l331 3508                                 l171 31C2  
                               l155 30A2                                 l139 3DF7                                 l148 3C28  
                               l260 3A2B                                 l236 374F                                 l252 3548  
                               l164 31FE                                 l156 30D6                                 l149 3C2A  
                               l261 3A46                                 l173 31DB                                 l254 3A51  
                               l270 381E                                 l182 3121                                 l255 3A26  
                               l263 3828                                 l256 3A21                                 l264 3807  
                               l272 37EE                                 l176 34BF                                 l168 32A0  
                               l184 3134                                 l265 3801                                 l273 37D4  
                               l185 3139                                 l274 37D1                                 l195 3AD7  
                               l523 3997                                 l283 390B                                 l443 3900  
                               l179 34DD                                 l187 3148                                 l532 396B  
                               l524 3938                                 l284 391E                                 l452 38CA  
                               l444 389B                                 l533 397D                                 l525 3948  
                               l453 38E5                                 l445 38AD                                 l269 380C  
                               l198 3AEE                                 l526 398B                                 l446 38F0  
                               l278 37D8                                 l199 3AF1                                 l527 3962  
                               l447 38C5                                 l279 37E7                                 l528 3958  
                               l448 38C0                                 u203 356C                                 u213 339F  
                               u223 33B2                                 u304 3246                                 u233 33C5  
                               u314 326A                                 u403 391A                                 u243 33D8  
                               u324 3186                                 u333 3AE0                                 u413 37E0  
                               u253 33EB                                 u334 3ADF                                 u343 3769  
                  SendBit_1621@data 0069                       _one_sec_timer 005D                         IRcvBytes@no 0065  
                ??_SendDataBit_1621 0068                                 _ack 0046                                 _abs 386A  
                       _data_length 0047                          _SensorUART 3BD3                        _Si7020CalcRH 314B  
                         _Start_I2c 3AAD                   __end_of_Start_I2c 3AD2                  __end_of_SensorUART 3C51  
                   ___lbmod@divisor 0067                        DisplayPMxx@k 006A                     ___lbmod@counter 006A  
                     SendBit_1621@i 006A         ??_Si7020Read_Temp_after_RHM 0063           __end_of_Si7020Read_RH_NHM 3121  
                          _delay_us 3B6C                __end_of_Si7020CalcRH 31DE                     __end_of_Ack_I2c 39C4  
                              STR_1 3F00                                STR_2 3F2F                                STR_3 3F13  
                              STR_4 3F36                                STR_5 3F21                    ___awdiv@quotient 006D  
                 WriteAll_1621@addr 0066                       ??_LCDOuputAll 0063                        IRcvBytes@sla 0067  
                              _Odor 003B                 ??_Si7020SendCommand 0065                        ___awdiv@sign 006F  
                              abs@a 0069                          ??_delay_us 006E                                _main 3C51  
                              _mode 0048                   ___lmul@multiplier 006E                    __end_of_LCD_Init 30F8  
                   _LeftRotate$3386 0064               _UART_Board_PutSHexInt 2E77                   SendDataBit_1621@i 006A  
           ___end_of_c_program_code 3C51                    ShowHumiTemp@temp 0065                    ___lbmod@dividend 0068  
                   __end_of_RcvByte 3A0C                     __end_of_SendCmd 370D                         _Temperature 0044  
                      ___awmod@sign 006D                        _HT1621B_Init 3467           _Si7020Read_Temp_after_RHM 31DE  
                    ??_ShowHumiTemp 0064                      _FanUpdateTimer 005A                    ___lbdiv@dividend 0068  
                           ?___lmul 006E                          _Si7020Data 002B                             ?___wmul 006E  
                          ??___lmul 0076                          _Si7020Init 30F8                               ??_abs 0069  
                   __end_of___awdiv 3901                     __end_of___lbdiv 37F1                            ??___wmul 0070  
                   __end_of___awmod 3998                     __end_of___lbmod 3925                __end_of_HT1621B_Init 347A  
                __end_of_Si7020Init 3105                        ??_SensorUART 007A                   _Timer16_EnableInt 2D8A  
                   __end_of___lwdiv 3A56                     __end_of___lwmod 382D                               IDX_PP 00D3  
                      ShowLife@life 0064                               CUR_PP 00D0                        ShowLife@temp 0066  
                    ___wmul@product 0072                           _CRC8Check 3121                       _SAR10_Trigger 2CE3  
                 __end_of_CRC8Check 314B                        ISendByte@sla 0067                     ___lwdiv@divisor 006B  
                  _SAR10_SetRunMode 2D71                     ___lwdiv@counter 0071                    Si7020CalcRH@data 0063  
                      _RHSampleStep 0040                    Si7020CalcRH@temp 0065                      ?_WriteAll_1621 0064  
                    SendCmd@command 0063                        _DigitSegSwap 3E0A                               _Timer 0045  
                  _UART_Board_Start 2E0C                     ??_WriteAll_1621 0065             _UART_Sensor_bReadRxData 2F70  
               _PWM8_BL_WritePeriod 2C92     Si7020Read_Temp_after_RHM@buffer 0063               _UART_Board_CPutString 2F1F  
                           _Ack_I2c 3998                             _PM_Flag 003D           __end_of_Si7020SendCommand 3716  
            _UART_Board_bReadRxData 2E20                    ___lbdiv@quotient 0069                             _FanFlag 0033  
                         ??_Ack_I2c 006B                             _DataPtr 0032                         _DisplayPMxx 355D  
                          intlevel2 0003                Si7020Read_RH_NHM@ret 0064              _UART_Board_PutSHexByte 2E64  
                  __end_of_Init_IIC 3467                      _Si7020CalcTemp 31FF                   ShowHumiTemp@index 0066  
               __end_of_DisplayPMxx 3614                   ShowHumiTemp@value 0064                         RcvByte@retc 006B  
                 ___wmul@multiplier 0070                        ??_Si7020Init 0063             _PWM8_BL_WritePulseWidth 2C95  
                           _RcvByte 39C4                             _SendCmd 36EC              _SAR10_fIsDataAvailable 2CEB  
                        _ChangeToOD 3B5D                    __end_of_SendByte 3B4C                          _CarbonLife 0031  
                  SensorUART@rxdata 007A                    ??_Si7020CalcTemp 0063           _Timer16_WriteCompareValue 2DA0  
                __end_of_ChangeToOD 3B6C        Si7020Read_Temp_after_RHM@ret 0064                        _ShowHumiTemp 3614  
                   ___awdiv@divisor 0069                  _UART_Board_PutCRLF 2F31                           ??_RcvByte 006B  
                         ??_SendCmd 0063                     ___awdiv@counter 0070                   _Si7020Read_RH_NHM 3105  
                  __end_of_ShowLife 36EC                          _data_pm1_0 002D                          _data_pm2_5 002F  
                           ___awdiv 3883                             ___lbdiv 37C1                             ___awmod 3925  
                           ___lbmod 3901                          IRcvBytes@i 0068                     SendBit_1621@cnt 0068  
                        IRcvBytes@s 0066                            ?___awdiv 0069                            ?___awmod 0069  
                           ___lwdiv 3A0C                 _UART_Sensor_IntCntl 2F89                             ___lwmod 37F1  
          __end_of_SendDataBit_1621 386A                __end_of_ShowHumiTemp 36AC                            ?___lwdiv 006B  
                          ?___lwmod 006B                           ??___awdiv 006B                           ??___lbdiv 0067  
                         ??___awmod 006B                           ??___lbmod 0067                    __end_of_Stop_I2c 3AAD  
           Si7020Read_RH_NHM@buffer 0063                           ??___lwdiv 006D                           ??___lwmod 006D  
                            ??_main 0061                          ISendByte@c 0066                      _LcdUpdateTimer 005B  
                  WriteAll_1621@cnt 0064                   Si7020Init@my_data 0063                       _Timer16_Start 2D92  
 __end_of_Si7020Read_Temp_after_RHM 31FF                       ShowLife@index 0065                    ___lwmod@dividend 006D  
                    ??_SendBit_1621 0068              __end_of_Si7020CalcTemp 32A3                      _SAR10_iGetData 2CF4  
                       ___lbmod@rem 0069                        _SAR10_SetClk 2D59                      __end_of___lmul 3531  
                  __end_of_delay_us 3B8A                     ___lbdiv@counter 006A                    ___lwdiv@dividend 006D  
                    __end_of___wmul 355D                           _RH_T_Flag 0041                             main@ret 0061  
                   BoardUART@rxdata 007A                        __end_of_main 3E00                           _IRcvBytes 3716  
                 __end_of_IRcvBytes 3786                           _ISendByte 3A56                   __end_of_ISendByte 3A8B  
                     _PWM8_BL_Start 2C8A                 _Timer16_WritePeriod 2D9A                          ?_IRcvBytes 0065  
                          _LCD_Init 30D9                          _DisplayBuf 0049                          _DisplayNum 0028  
                   _rh_sample_timer 0060                          _FrameCheck 308C                  __end_of_FrameCheck 30D9  
                            _RecBuf 0055                              _Plasma 003E            _UART_Board_bReadTxStatus 2E1D  
                            ___exit 3DFD                         ??_IRcvBytes 0066                              ___lmul 34E9  
                            ___wmul 3531                           _BoardUART 3B8A                       RcvByte@BitCnt 006C  
                       ??_ISendByte 0066                 _FanUpdateTimeReload 0034                   __end_of_BoardUART 3BA3  
                        _MyPMSUnion 0000                          _LeftRotate 34BD                         _LCDOuputAll 32A3  
                __end_of_LeftRotate 34E9                    ___lwdiv@quotient 006F                   _Si7020SendCommand 370D  
                   ___lwmod@divisor 006B                Si7020SendCommand@cmd 0065                  FrameCheck@checksum 0063  
               __end_of_LCDOuputAll 3456                     ___lwmod@counter 006F                       ??_DisplayPMxx 0064  
                            _poly_h 005E                              _poly_l 005F                         _SAR10_Start 2CD3  
                       __end_of_abs 3883                 ___lmul@multiplicand 0072                  Si7020CalcTemp@data 0063  
              SendDataBit_1621@data 0069                        _SendBit_1621 3786                  Si7020CalcTemp@temp 0065  
                     _WriteAll_1621 347A                      ??_Si7020CalcRH 0063                         ??_BoardUART 007A  
                          _HeadFlag 0035                 ___wmul@multiplicand 006E                __end_of_SendBit_1621 37C1  
                        _LockStatus 003A                            _HeapLife 0036                      WriteAll_1621@i 0067  
                    WriteAll_1621@p 0065                            _DigitSeg 3E00                   _UART_Sensor_Start 2F5C  
                    ___lmul@product 0076                    _SendDataBit_1621 382D                           SendByte@c 006B  
                   _RecTimeoutTimer 0042                 ??_Si7020Read_RH_NHM 0063                     _IICTimeOutTimer 0038  
                      ??_FrameCheck 0063                 SendDataBit_1621@cnt 0068                    _SAR10_DisableInt 2CCF  
                          _LifeFlag 0039               __end_of_WriteAll_1621 34BD                            _Init_IIC 3456  
               _SAR10_SetADCChannel 2D11                        _PMSFrameFlag 003C                    ___awmod@dividend 006B  
                      ??_LeftRotate 0063                            _Humidity 0037           ___start_of_c_program_code 308C  
                   ___awmod@divisor 0069                            _SendByte 3AD2                     ___awmod@counter 006E  
                        _PlasmaFlag 003F  
HI-TECH Software Macro Assembler (PSoC MCU) V9.61
                                                                                                           Fri Jun 12 09:25:10 2015
     1                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     2                          ;;;
     3                          ;;;  M8C.INC -- Microcontroller Device System Declarations
     4                          ;;;
     5                          ;;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
     6                          ;;;
     7                          ;;;  This file provides address constants, bit field masks and a set of macro
     8                          ;;;  facilities for the Cypress Semiconductor CY8C22045 Microcontroller devices.
     9                          ;;;
    10                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    11                          
    12                          ;;=============================================================================
    13                          ;; Definition of abbreviations used in the descriptions below
    14                          ;;  (RW)   The register or bit supports reads and writes
    15                          ;;  (W)    The register or bit is write-only
    16                          ;;  (R)    The register or bit is read-only
    17                          ;;  (#)    Access to the register is bit specific (see the family datasheet)
    18                          ;;  (RC)   The register or bit can be read, but writing a 0 will clear it,
    19                          ;;         writing a 1 will have no effect.
    20                          ;;=============================================================================
    21                          
    22                          ;;=============================================================================
    23                          ;;      System Registers
    24                          ;;=============================================================================
    25                          
    26                          ;----------------------------
    27                          ;  Flag Register Bit Fields
    28                          ;----------------------------
    29  00C0                    FLAG_PGMODE_MASK:  equ 0C0h     ; Paging control for > 256 bytes of RAM
    30  0000                    FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
    31  0040                    FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
    32  0080                    FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
    33  00C0                    FLAG_PGMODE_3:     equ 0C0h       ; Direct to CUR_PP page, indexed to STK_PP page
    34  0000                    FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
    35  0040                    FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
    36  0080                    FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
    37  00C0                    FLAG_PGMODE_11b:   equ 0C0h       ; Same as PGMODE_3
    38  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    39  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    40  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    41  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    42  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    43                          
    44                          
    45                          ;;=============================================================================
    46                          ;;      Register Space, Bank 0
    47                          ;;=============================================================================
    48                          
    49                          ;------------------------------------------------
    50                          ;  Port Registers
    51                          ;  Note: Also see this address range in Bank 1.
    52                          ;------------------------------------------------
    53                          ; Port 0
    54  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    55  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    56  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    57  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    58                          ; Port 1
    59  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    60  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    61  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    62  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    63                          ; Port 2
    64  0008                    PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
    65  0009                    PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
    66  000A                    PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
    67  000B                    PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
    68                          ; Port 3
    69  000C                    PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
    70  000D                    PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
    71  000E                    PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
    72  000F                    PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
    73                          ; Port 4
    74  0010                    PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
    75  0011                    PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
    76  0012                    PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
    77  0013                    PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
    78                          
    79                          ;------------------------------------------------
    80                          ;  Digital PSoC(tm) block Registers
    81                          ;  Note: Also see this address range in Bank 1.
    82                          ;------------------------------------------------
    83                          ; Digital PSoC block 00, Basic Type C
    84  0020                    DBC00DR0:     equ 20h          ; data register 0                          (#)
    85  0021                    DBC00DR1:     equ 21h          ; data register 1                          (W)
    86  0022                    DBC00DR2:     equ 22h          ; data register 2                          (RW)
    87  0023                    DBC00CR0:     equ 23h          ; control & status register 0              (#)
    88                          
    89                          ; Digital PSoC block 01, Basic Type C
    90  0024                    DBC01DR0:     equ 24h          ; data register 0                          (#)
    91  0025                    DBC01DR1:     equ 25h          ; data register 1                          (W)
    92  0026                    DBC01DR2:     equ 26h          ; data register 2                          (RW)
    93  0027                    DBC01CR0:     equ 27h          ; control & status register 0              (#)
    94                          
    95                          ; Digital PSoC block 02, Communications Type C
    96  0028                    DCC02DR0:     equ 28h          ; data register 0                          (#)
    97  0029                    DCC02DR1:     equ 29h          ; data register 1                          (W)
    98  002A                    DCC02DR2:     equ 2Ah          ; data register 2                          (RW)
    99  002B                    DCC02CR0:     equ 2Bh          ; control & status register 0              (#)
   100                          
   101                          ; Digital PSoC block 03, Communications Type C
   102  002C                    DCC03DR0:     equ 2Ch          ; data register 0                          (#)
   103  002D                    DCC03DR1:     equ 2Dh          ; data register 1                          (W)
   104  002E                    DCC03DR2:     equ 2Eh          ; data register 2                          (RW)
   105  002F                    DCC03CR0:     equ 2Fh          ; control & status register 0              (#)
   106                          
   107                          ; Digital PSoC block 10, Basic Type C
   108  0030                    DBC10DR0:     equ 30h          ; data register 0                          (#)
   109  0031                    DBC10DR1:     equ 31h          ; data register 1                          (W)
   110  0032                    DBC10DR2:     equ 32h          ; data register 2                          (RW)
   111  0033                    DBC10CR0:     equ 33h          ; control & status register 0              (#)
   112                          
   113                          ; Digital PSoC block 11, Basic Type C
   114  0034                    DBC11DR0:     equ 34h          ; data register 0                          (#)
   115  0035                    DBC11DR1:     equ 35h          ; data register 1                          (W)
   116  0036                    DBC11DR2:     equ 36h          ; data register 2                          (RW)
   117  0037                    DBC11CR0:     equ 37h          ; control & status register 0              (#)
   118                          
   119                          ; Digital PSoC block 12, Communications Type C
   120  0038                    DCC12DR0:     equ 38h          ; data register 0                          (#)
   121  0039                    DCC12DR1:     equ 39h          ; data register 1                          (W)
   122  003A                    DCC12DR2:     equ 3Ah          ; data register 2                          (RW)
   123  003B                    DCC12CR0:     equ 3Bh          ; control & status register 0              (#)
   124                          
   125                          ; Digital PSoC block 13, Communications Type C
   126  003C                    DCC13DR0:     equ 3Ch          ; data register 0                          (#)
   127  003D                    DCC13DR1:     equ 3Dh          ; data register 1                          (W)
   128  003E                    DCC13DR2:     equ 3Eh          ; data register 2                          (RW)
   129  003F                    DCC13CR0:     equ 3Fh          ; control & status register 0              (#)
   130                          
   131                          ;-------------------------------------
   132                          ;  Analog Control Registers
   133                          ;-------------------------------------
   134  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
   135  00C0                    AMX_IN_ACI3:          equ C0h    ; MASK: column 3 input mux
   136  0030                    AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
   137  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
   138  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
   139                          
   140  0061                    AMUX_CFG:      equ 61h          ; Analog MUX Configuration
   141  0030                    AMUX_CFG_INTCAP:       equ 30h    ;
   142  000E                    AMUX_CFG_MUXCLK:  	  equ 0Eh	 ;
   143  0001                    AMUX_CFG_EN:		  	  equ 01h	 ;
   144                          
   145                          ; old declarations DO NOT USE
   146  0061                    AMUXCFG:      equ 61h          ; Analog MUX Configuration
   147  0030                    AMUXCFG_INTCAP:       equ 30h    ;
   148  000E                    AMUXCFG_MUXCLK:  	  equ 0Eh	 ;
   149  0001                    AMUXCFG_EN:		  	  equ 01h	 ;
   150                          
   151  0062                    PWM_CR:       equ 62h          ; Pulse-Width Modulator Control
   152  0038                    PWM_CR_HIGH:          equ 38h    ; MASK: PWM high time
   153  0006                    PWM_CR_LOW:           equ 06h	 ; MASK: PWM low time
   154  0001                    PWM_CR_EN:            equ 01h	 ; MASK: Enable/Disable PWM function
   155                          
   156  0063                    ARF_CR:       equ 63h          ; Analog Reference Control
   157                          
   158  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus Register           (#)
   159  0080                    CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
   160  0040                    CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
   161  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
   162  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
   163  0008                    CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
   164  0004                    CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
   165  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
   166  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   167                          
   168  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   169  0020                    CMP_CR1_CLDIS1:       equ 20h    ; MASK: Column 1 comparator output latch
   170  0010                    CMP_CR1_CLDIS0:	      equ 10h    ; MASK: Column 0 comparator output latch
   171                          
   172  0068                    ADC0_CR:      equ 68h          ; Analog Column 0 Configuration
   173  0080                    ADC0_CR_CMPST:        equ 80h    ;
   174  0040                    ADC0_CR_LOREN:        equ 40h    ;
   175  0020                    ADC0_CR_SHEN:         equ 20h    ;
   176  0008                    ADC0_CR_CBSRC:        equ 08h    ;
   177  0004                    ADC0_CR_ADCM:         equ 04h    ;
   178  0001                    ADC0_CR_EN:	          equ 01h    ;
   179                          
   180  0069                    ADC1_CR:      equ 69h          ; Analog Column 1 Configuration
   181  0080                    ADC1_CR_CMPST:        equ 80h    ;
   182  0040                    ADC1_CR_LOREN:        equ 40h    ;
   183  0020                    ADC1_CR_SHEN:         equ 20h    ;
   184  0008                    ADC1_CR_CBSRC:        equ 08h    ;
   185  0004                    ADC1_CR_ADCM:         equ 04h    ;
   186  0001                    ADC1_CR_EN:	          equ 01h    ;
   187                          
   188                          ; Continuous Time PSoC block Type E Row 0 Col 0
   189  0072                    ACE00CR1:     equ 72h          ; Control register 1                       (RW)
   190  0073                    ACE00CR2:     equ 73h          ; Control register 2                       (RW)
   191                          
   192                          ; Continuous Time PSoC block Type E Row 0 Col 1
   193  0076                    ACE01CR1:     equ 76h          ; Control register 1                       (RW)
   194  0077                    ACE01CR2:     equ 77h          ; Control register 2                       (RW)
   195                          
   196                          ; Switched Cap PSoC blockType E Row 1 Col 0
   197  0080                    ASE10CR0:     equ 80h          ; Control register 0                       (RW)
   198                          
   199                          ; Switched Cap PSoC blockType E Row 1 Col 1
   200  0084                    ASE11CR0:     equ 84h          ; Control register 0                       (RW)
   201+                         
   202+                         ;-----------------------------------------------
   203+                         ;  Global General Purpose Data Registers
   204+                         ;-----------------------------------------------
   205+ 006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   206+ 006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   207  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   208  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   209                          
   210                          ;------------------------------------------------
   211                          ;  Row Digital Interconnects
   212                          ;
   213                          ;  Note: the following registers are mapped into
   214                          ;  both register bank 0 AND register bank 1.
   215                          ;------------------------------------------------
   216                          
   217  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   218  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   219  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   220  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   221  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   222  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   223  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   224                          
   225  00B8                    RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
   226  00B9                    RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
   227  00BA                    RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
   228  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   229  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   230  00BD                    RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
   231  00BE                    RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
   232                          
   233                          ;-----------------------------------------------
   234                          ;  Ram Page Pointers
   235                          ;-----------------------------------------------
   236  00D0                    CUR_PP:      equ 0D0h           ; Current   Page Pointer
   237  00D1                    STK_PP:      equ 0D1h           ; Stack     Page Pointer
   238  00D3                    IDX_PP:      equ 0D3h           ; Index     Page Pointer
   239  00D4                    MVR_PP:      equ 0D4h           ; MVI Read  Page Pointer
   240  00D5                    MVW_PP:      equ 0D5h           ; MVI Write Page Pointer
   241                          
   242                          ;------------------------------------------------
   243                          ;  I2C Configuration Registers
   244                          ;------------------------------------------------
   245  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   246  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   247  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   248  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   249  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   250  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   251  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   252  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   253  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   254  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   255                          
   256  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   257  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   258  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   259  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   260  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   261  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   262  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   263  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   264  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   265                          
   266  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   267                          
   268  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   269  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   270  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   271  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   272  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   273                          
   274                          ;------------------------------------------------
   275                          ;  System and Global Resource Registers
   276                          ;------------------------------------------------
   277  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   278                                                         ; Use INT_MSK0 bit field masks
   279  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   280                                                         ; Use INT_MSK1 bit field masks
   281  00DC                    INT_CLR2:     equ 0DCh          ; Interrupt Clear Register 2               (RW)
   282                                                         ; Use INT_MSK2 bit field masks
   283  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   284                                                         ; Use INT_MSK3 bit field masks
   285                          
   286  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   287  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   288  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   289                          
   290  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   291  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   292  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   293  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   294  0010                    INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
   295  0008                    INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
   296  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   297  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   298  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   299                          
   300  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   301  0080                    INT_MSK1_DCC13:            equ 80h ; MASK: enable/disable DCC13 block interrupt
   302  0040                    INT_MSK1_DCC12:            equ 40h ; MASK: enable/disable DCC12 block interrupt
   303  0020                    INT_MSK1_DBC11:            equ 20h ; MASK: enable/disable DBC11 block interrupt
   304  0010                    INT_MSK1_DBC10:            equ 10h ; MASK: enable/disable DBC10 block interrupt
   305  0008                    INT_MSK1_DCC03:            equ 08h ; MASK: enable/disable DCC03 block interrupt
   306  0004                    INT_MSK1_DCC02:            equ 04h ; MASK: enable/disable DCC02 block interrupt
   307  0002                    INT_MSK1_DBC01:            equ 02h ; MASK: enable/disable DBC01 block interrupt
   308  0001                    INT_MSK1_DBC00:            equ 01h ; MASK: enable/disable DBC00 block interrupt
   309                          
   310  00DF                    INT_MSK2:     equ DFh			; Custom block Mask Register			   (RW)
   311  0010                    INT_MSK2_SARADC:           equ 10h ; MASK: enable/disable SARADC block interrupt
   312  0020                    INT_MSK2_CSD0:             equ 20h ; MASK: enable/disable CSD0 block interrupt
   313  0040                    INT_MSK2_CSD1:             equ 40h ; MASK: enable/disable CSD1 block interrupt
   314  0080                    INT_MSK2_RTC:              equ 80h ; MASK: enable/disable RTC block interrupt
   315                          
   316  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   317  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   318                          
   319                          ;------------------------------------------------------
   320                          ;  MAC Registers
   321                          ;------------------------------------------------------
   322                          
   323  00E8                    MUL0_X:       equ 0E8h          ; Multiply Input X Register                (W)
   324  00E9                    MUL0_Y:       equ 0E9h          ; Multiply Input Y Register                (W)
   325  00EA                    MUL0_DH:      equ 0EAh          ; Multiply Result High Byte Register       (R)
   326  00EB                    MUL0_DL:      equ 0EBh          ; Multiply Result Low Byte Register        (R)
   327                          
   328  00EC                    ACC0_DR1:     equ 0ECh          ; Accumulator Data Register 1              (RW)
   329  00ED                    ACC0_DR0:     equ 0EDh          ; Accumulator Data Register 0              (RW)
   330  00EE                    ACC0_DR3:     equ 0EEh          ; Accumulator Data Register 3              (RW)
   331  00EF                    ACC0_DR2:     equ 0EFh          ; Accumulator Data Register 2              (RW)
   332                          
   333                          ; DECIMATOR Control Registers
   334  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   335  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   336                          
   337                          ;------------------------------------------------------
   338                          ;  System Status and Control Registers
   339                          ;
   340                          ;  Note: The following registers are mapped into both
   341                          ;        register bank 0 AND register bank 1.
   342                          ;------------------------------------------------------
   343  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   344                                                             ; Use FLAG_ masks defined at top of file
   345                          
   346  00FD                    DAC_D:        equ 0FDh		   ; DAC Data Register                        (RW)
   347                          
   348  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   349  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: flag, Internal Reset Status bit
   350  0010                    CPU_SCR1_SLIMO:         equ 10h	   ; MASK: Slow IMO (internal main osc) enable
   351  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   352  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   353  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   354                          
   355  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   356  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   357  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   358  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   359  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   360  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   361                          
   362                          ;------------------------------------------------------
   363                          ;  Neon Capsense Digital Control Registers
   364                          ;------------------------------------------------------
   365  0050                    CSD0_DR0_L:				equ 50h		; Capsense 0 data low 0				(RW)
   366  0054                    CSD0_DR0_H:				equ 54h		; Capsense 0 data high 0			(RW)
   367  0058                    CSD1_DR0_L:				equ 58h		; Capsense 1 data low 0				(RW)
   368  005C                    CSD1_DR0_H:				equ 5Ch		; Capsense 1 data high 0			(RW)
   369  0051                    CSD0_DR1_L:				equ 51h		; Capsense 0 data low 1				(RW)
   370  0055                    CSD0_DR1_H:				equ 55h		; Capsense 0 data high 1			(RW)
   371  0059                    CSD1_DR1_L:				equ 59h		; Capsense 1 data low 1				(RW)
   372  005D                    CSD1_DR1_H:				equ 5Dh		; Capsense 1 data high 1			(RW)
   373  0052                    CSD0_CNT_L:				equ 52h		; Capsense 0 counter low			(RW)
   374  0056                    CSD0_CNT_H:				equ 56h		; Capsense 0 counter high			(RW)
   375  005A                    CSD1_CNT_L:				equ 5Ah		; Capsense 1 counter low			(RW)
   376  005E                    CSD1_CNT_H:				equ	5Eh		; Capsense 1 counter high			(RW)
   377  0053                    CSD0_CR0:				equ 53h		; Capsense 0 control 0				(RW)
   378  005B                    CSD1_CR0:				equ 5Bh		; Capsense 1 control 0				(RW)
   379  0057                    CSD0_CR1:				equ 57h		; Capsense 0 control 1				(RW)
   380  005F                    CSD1_CR1:				equ 5Fh		; Capsense 1 control 1				(RW)
   381                          
   382                          ;------------------------------------------------------
   383                          ;  Neon Analog Registers
   384                          ;------------------------------------------------------
   385  0065                    ASY_CR:					equ 65h		; Analog Synchronization Control	(RW)
   386  006A                    ADC_DH:					equ 6Ah		; ADC data high						(RW)
   387  006B                    ADC_DL:					equ 6Bh		; ADC data low						(RW)
   388  00C8                    PWMVREF0:				equ C8h		; PWM Voltage Reference 0			(RW)
   389  00C9                    PWMVREF1:				equ C9h		; PWM Voltage Reference 1			(RW)
   390  00CB                    PWMSRC:					equ CBh		; PWM Source						(RW)
   391  00CA                    IDACMODE:				equ CAh		; IDAC Mode							(RW)
   392  00FC                    IDACR_D:				equ FCh		; Analog Mux DAC data 0				(RW)
   393  00FD                    IDACL_D:				equ FDh		; Analog Mux DAC data 1				(RW)
   394                          
   395                          ;------------------------------------------------------
   396                          ;  Neon Digital Registers
   397                          ;------------------------------------------------------
   398  00B7                    RDI0DSM:				equ B7h		; Row Digital Interconnect input select 0	(RW)
   399  00BF                    RDI1DSM:				equ BFh		; Row Digital Interconnect input select 1	(RW)
   400                          
   401                          ;------------------------------------------------------
   402                          ;  Neon Test Registers
   403                          ;------------------------------------------------------
   404  00CC                    TSCR0:					equ CCh		; Tsource 0							(RW)
   405  00CD                    TSCMPH:					equ CDh		; TSCMP high						(RW)
   406  00CE                    TSCMPL:					equ CEh		; TSCMP low							(RW)
   407  00CF                    TSCR1:					equ CFh		; Tsource 1							(RW)
   408                          
   409                          ;;=============================================================================
   410                          ;;      Register Space, Bank 1
   411                          ;;=============================================================================
   412                          
   413                          ;------------------------------------------------
   414                          ;  Port Registers
   415                          ;  Note: Also see this address range in Bank 0.
   416                          ;------------------------------------------------
   417                          ; Port 0
   418  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   419  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   420  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   421  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   422                          
   423                          ; Port 1
   424  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   425  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   426  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   427  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   428                          
   429                          ; Port 2
   430  0008                    PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
   431  0009                    PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
   432  000A                    PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
   433  000B                    PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
   434                          
   435                          ; Port 3
   436  000C                    PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
   437  000D                    PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
   438  000E                    PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
   439  000F                    PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
   440                          
   441                          ; Port 4
   442  0010                    PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
   443  0011                    PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
   444  0012                    PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
   445  0013                    PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
   446                          
   447                          ;------------------------------------------------
   448                          ;  Digital PSoC(tm) block Registers
   449                          ;  Note: Also see this address range in Bank 0.
   450                          ;------------------------------------------------
   451                          
   452                          ; Digital PSoC block 00, Basic Type C
   453  0020                    DBC00FN:      equ 20h          ; Function Register                        (RW)
   454  0021                    DBC00IN:      equ 21h          ;    Input Register                        (RW)
   455  0022                    DBC00OU:      equ 22h          ;   Output Register                        (RW)
   456  0023                    DBC00CR1:     equ 23h          ;   control & status register 1            (RW)
   457                          
   458                          ; Digital PSoC block 01, Basic Type C
   459  0024                    DBC01FN:      equ 24h          ; Function Register                        (RW)
   460  0025                    DBC01IN:      equ 25h          ;    Input Register                        (RW)
   461  0026                    DBC01OU:      equ 26h          ;   Output Register                        (RW)
   462  0027                    DBC01CR1:     equ 27h          ;   control & status register 1            (RW)
   463                          
   464                          ; Digital PSoC block 02, Communications Type C
   465  0028                    DCC02FN:      equ 28h          ; Function Register                        (RW)
   466  0029                    DCC02IN:      equ 29h          ;    Input Register                        (RW)
   467  002A                    DCC02OU:      equ 2Ah          ;   Output Register                        (RW)
   468  002B                    DBC02CR1:     equ 2Bh          ;   control & status register 1            (RW)
   469                          
   470                          ; Digital PSoC block 03, Communications Type C
   471  002C                    DCC03FN:      equ 2Ch          ; Function Register                        (RW)
   472  002D                    DCC03IN:      equ 2Dh          ;    Input Register                        (RW)
   473  002E                    DCC03OU:      equ 2Eh          ;   Output Register                        (RW)
   474  0029                    DBC03CR1:     equ 29h          ;   control & status register 1            (RW)
   475                          
   476                          ; Digital PSoC block 10, Basic Type C
   477  0030                    DBC10FN:      equ 30h          ; Function Register                        (RW)
   478  0031                    DBC10IN:      equ 31h          ;    Input Register                        (RW)
   479  0032                    DBC10OU:      equ 32h          ;   Output Register                        (RW)
   480  0033                    DBC10CR1:     equ 33h          ;   control & status register 1            (RW)
   481                          
   482                          ; Digital PSoC block 11, Basic Type C
   483  0034                    DBC11FN:      equ 34h          ; Function Register                        (RW)
   484  0035                    DBC11IN:      equ 35h          ;    Input Register                        (RW)
   485  0036                    DBC11OU:      equ 36h          ;   Output Register                        (RW)
   486  0037                    DBC11CR1:     equ 37h          ;   control & status register 1            (RW)
   487                          
   488                          ; Digital PSoC block 12, Communications Type C
   489  0038                    DCC12FN:      equ 38h          ; Function Register                        (RW)
   490  0039                    DCC12IN:      equ 39h          ;    Input Register                        (RW)
   491  003A                    DCC12OU:      equ 3Ah          ;   Output Register                        (RW)
   492  003B                    DBC12CR1:     equ 3Bh          ;   control & status register 1            (RW)
   493                          
   494                          ; Digital PSoC block 13, Communications Type C
   495  003C                    DCC13FN:      equ 3Ch          ; Function Register                        (RW)
   496  003D                    DCC13IN:      equ 3Dh          ;    Input Register                        (RW)
   497  003E                    DCC13OU:      equ 3Eh          ;   Output Register                        (RW)
   498  003F                    DBC13CR1:     equ 3Fh          ;   control & status register 1            (RW)
   499                          
   500                          ;------------------------------------------------
   501                          ;  System and Global Resource Registers
   502                          ;  Note: Also see this address range in Bank 0.
   503                          ;------------------------------------------------
   504                          
   505  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   506  00C0                    CLK_CR0_ACOLUMN_3:    equ C0h    ; MASK: Specify clock for analog cloumn
   507  0030                    CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
   508  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   509  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   510                          
   511  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   512  0018                    CLK_CR1_ACLK1:        equ 18h    ; MASK: Digital PSoC block for analog source
   513  0003                    CLK_CR1_ACLK0:        equ 03h    ; MASK: Digital PSoC block for analog source
   514                          
   515  0003                    CLK_CR1_ACLK2:        equ 03h    ; Deprecated do not use
   516                          
   517  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   518  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   519                          
   520  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   521  000F                    AMD_CR0_AMOD0:        equ 0Fh    ; MASK: Modulation source for analog column 0
   522                          
   523  0064                    CMP_GO_EN:    equ 64h          ; Comparator Bus To Global Out Enable      (RW)
   524  0080                    CMP_GO_EN_GOO5:       equ 80h    ; MASK: Selected Col 1 signal to GOO5
   525  0040                    CMP_GO_EN_GOO1:       equ 40h    ; MASK: Selected Col 1 signal to GOO1
   526  0030                    CMP_GO_EN_SEL1:       equ 30h    ; MASK: Column 1 Signal Select
   527  0008                    CMP_GO_EN_GOO4:       equ 08h    ; MASK: Selected Col 0 signal to GOO4
   528  0004                    CMP_GO_EN_GOO0:       equ 04h    ; MASK: Selected Col 0 signal to GOO0
   529  0003                    CMP_GO_EN_SEL0:       equ 03h    ; MASK: Column 0 Signal Select
   530                          
   531  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   532  000F                    AMD_CR1_AMOD1:        equ 0Fh    ; MASK: Modulation ctrl for analog column 1
   533                          
   534  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   535  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   536  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   537                          
   538  006B                    CLK_CR3:      equ 6Bh          ; Analog Clock Source Control Register 3   (RW)
   539  0040                    CLK_CR3_SYS1:         equ 40h    ; MASK: Analog Clock 1 selection
   540  0030                    CLK_CR3_DIVCLK1:      equ 30h    ; MASK: Analog Clock 1 divider
   541  0004                    CLK_CR3_SYS0:         equ 04h    ; MASK: Analog Clock 0 selection
   542  0003                    CLK_CR3_DIVCLK0:      equ 03h    ; MASK: Analog Clock 0 divider
   543                          
   544                          ;------------------------------------------------
   545                          ;  Global Digital Interconnects
   546                          ;------------------------------------------------
   547                          
   548  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   549  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   550  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   551  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   552                          
   553  00A0                    GDI_O_IN_CR:  equ 0A0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   554  00A1                    GDI_E_IN_CR:  equ 0A1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   555  00A2                    GDI_O_OU_CR:  equ 0A2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   556  00A3                    GDI_E_OU_CR:  equ 0A3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   557                          
   558  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   559  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   560                          
   561                          ;------------------------------------------------
   562                          ;  Analog Mux Bus Port Enable Bits
   563                          ;------------------------------------------------
   564  00D8                    MUX_CR0:      equ 0D8h          ; Analog Mux Port 0 Bit Enables Register
   565  00D9                    MUX_CR1:      equ 0D9h          ; Analog Mux Port 1 Bit Enables Register
   566  00DA                    MUX_CR2:      equ 0DAh          ; Analog Mux Port 2 Bit Enables Register
   567  00DB                    MUX_CR3:      equ 0DBh          ; Analog Mux Port 3 Bit Enables Register
   568  00EC                    MUX_CR4:      equ 0ECh          ; Analog Mux Port 4 Bit Enables Register
   569                          
   570                          ;------------------------------------------------
   571                          ;  Clock and System Control Registers
   572                          ;------------------------------------------------
   573                          
   574  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   575  0080                    OSC_GO_EN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   576  0040                    OSC_GO_EN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   577  0020                    OSC_GO_EN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   578  0010                    OSC_GO_EN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   579  0008                    OSC_GO_EN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   580  0004                    OSC_GO_EN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   581  0002                    OSC_GO_EN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   582  0001                    OSC_GO_EN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   583                          
   584  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   585  0003                    OSC_CR4_VC3SEL:       equ 03h    ; MASK: System VC3 Clock source
   586                          
   587  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   588                          
   589  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   590  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   591  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   592  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   593  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   594  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   595  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   596  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   597  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   598  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   599  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   600  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   601  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   602  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   603  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   604  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   605  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   606  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   607                          
   608  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   609  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   610  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   611                          
   612  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   613  0080                    OSC_CR2_PLLGAIN:      equ 80h    ; MASK: High/Low gain
   614  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   615  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   616  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   617                          
   618  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   619  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   620  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   621  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   622  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   623  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   624  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   625  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   626                          
   627  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   628  0008                    VLT_CMP_NOWRITE:      equ 08h    ; MASK: Vcc below Flash Write level
   629  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   630  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   631  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   632                          
   633  00E5                    ADC0_TR:      equ 0E5h          ; ADC Column 0 Trim Register
   634  00E6                    ADC1_TR:      equ 0E6h          ; ADC Column 1 Trim Register
   635                          
   636  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   637  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   638  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   639  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   640                          
   641  00FA                    FLS_PR1:      equ 0FAh          ; Flash Program Register 1                 (RW)
   642  0003                    FLS_PR1_BANK:         equ 03h    ; MASK: Select Active Flash Bank
   643                          
   644  00FD                    DAC_CR0:       equ 0FDh          ; Analog Mux DAC Control Register 0
   645  00DC                    DAC_CR1:       equ 0DCh          ; Analog Mux DAC Control Register 1
   646  0008                    DAC_CR_IRANGE:        equ 08h    ; MASK: Sets the DAC Range low or high
   647  0006                    DAC_CR_OSCMODE:       equ 06h    ; MASK: Defines the reset mode for AMux
   648  0001                    DAC_CR_ENABLE:        equ 01h    ; MASK: Enable/Disable DAC function
   649                          
   650                          ;------------------------------------------------
   651                          ;  I2C Control Registers
   652                          ;------------------------------------------------
   653                          
   654  00AD                    I2C_ADDR:    equ 0ADh          ; I2C Address Register (RW)
   655                          
   656                          ;------------------------------------------------------
   657                          ;  Neon Analog Registers
   658                          ;------------------------------------------------------
   659  0053                    VDAC50CR0:		equ 53h			; V DAC5 control 0				(RW)
   660  0057                    VDAC51CR0:		equ 57h			; V DAC5 control 1				(RW)
   661  00A8                    ADC_CR0:		equ A8h			; ADC control 0					(RW)
   662  00A9                    ADC_CR1:		equ A9h			; ADC control 1					(RW)
   663  00AA                    ADC_CR2:		equ AAh			; ADC control 2					(RW)
   664  00AB                    ADC_CR3TRIM:	equ ABh			; ADC control 3					(RW)
   665  00AC                    ADC_CR4:		equ ACh			; ADC control 4					(RW)
   666  00E7                    VDAC_TRIM:		equ E7h			; V DAC trim					(RW)
   667                          
   668                          ;------------------------------------------------------
   669                          ;  Neon Current Sense CMP Registers
   670                          ;------------------------------------------------------
   671  0050                    CMP0CR1:		equ 50h			; CMP0 control 1				(RW)
   672  0051                    CMP0CR2:		equ 51h			; CMP0 control 2				(RW)
   673  0054                    CMP1CR1:		equ 54h			; CMP1 control 1				(RW)
   674  0055                    CMP1CR2:		equ 55h			; CMP1 control 2				(RW)
   675  0058                    CSCMPCR0:		equ 58h			; CSCMP control 0				(RW)
   676  0059                    CSCMPGOEN:		equ 59h			; CSCMO global out enable		(RW)
   677  005A                    CSLUTCR0:		equ 5Ah			; CSLUT control 0				(RW)
   678  005B                    CMPCOLMUX:		equ 5Bh			; CMP Column Mux				(RW)
   679  005C                    CMPPWMCR:		equ 5Ch			; CMP PWM control				(RW)
   680  005D                    CMPFLTCR:		equ 5Dh			; CMP filter control			(RW)
   681  005E                    CMPCLK1:		equ 5Eh			; CMP clock 1					(RW)
   682  005F                    CMPCLK0:		equ 5Fh			; CMP clock 0					(RW)
   683                          
   684                          ;------------------------------------------------------
   685                          ;  Neon Real Time Clock Registers
   686                          ;------------------------------------------------------
   687  00A4                    RTCH:			equ A4h			; Real time current hour		(RW)
   688  00A5                    RTCM:			equ A5h			; Real time current minute		(RW)
   689  00A6                    RTCS:			equ A6h			; Real time current second		(RW)
   690  00A7                    RTCCR:			equ A7h			; Real time clock control		(RW)
   691                          
   692                          ;------------------------------------------------------
   693                          ;  Analog MUX Config Registers
   694                          ;------------------------------------------------------
   695                          
   696  006A                    AMUX_CFG1:			equ 6Ah  ; Analog MUX Configuration 1
   697  0020                    AMUX_CFG1_GOINVR:	equ 20h  ;
   698  0010                    AMUX_CFG1_GOINVL:  	equ 10h	 ;
   699  000C                    AMUX_CFG1_AMUXMODR:	equ 0Ch	 ;
   700  0003                    AMUX_CFG1_AMUXMODL:	equ 03h	 ;
   701                          
   702                          ;;=============================================================================
   703                          ;;      M8C System Macros
   704                          ;;  These macros should be used when their functions are needed.
   705                          ;;=============================================================================
   706                          
   707                          ;----------------------------------------------------
   708                          ;  Swapping Register Banks
   709                          ;----------------------------------------------------
   710                              macro M8C_SetBank0
   711                              and   F, ~FLAG_XIO_MASK
   712  3C51                        endm
   713                          
   714                              macro M8C_SetBank1
   715                              or    F, FLAG_XIO_MASK
   716  3C51                        endm
   717                          
   718                          ;----------------------------------------------------
   719                          ;  Global Interrupt Enable/Disable
   720                          ;----------------------------------------------------
   721                              macro M8C_EnableGInt
   722                              or    F, FLAG_GLOBAL_IE
   723  3C51                        endm
   724                          
   725                              macro M8C_DisableGInt
   726                              and   F, ~FLAG_GLOBAL_IE
   727  3C51                        endm
   728                          
   729                          ;----------------------------------------------------
   730                          ;  Enable/Disable Interrupt Mask
   731                          ;
   732                          ;  Use the following macros to enable/disable
   733                          ;  bits in the Interrupt mask registers,
   734                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   735                          ;
   736                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   737                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   738                          ;
   739                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   740                          ;        and MASK is the bit set to enable or disable
   741                          ;----------------------------------------------------
   742                          ; Disable Interrupt Bit Mask(s)
   743                              macro M8C_DisableIntMask
   744                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   745  3C51                        endm
   746                          
   747                          ; Enable Interrupt Bit Mask(s)
   748                              macro M8C_EnableIntMask
   749                              or    reg[@0], @1               ; enable specified interrupt enable bit
   750  3C51                        endm
   751                          
   752                          ;----------------------------------------------------
   753                          ;  Clear Posted Interrupt Flag Mask
   754                          ;
   755                          ;  Use the following macros to clear the
   756                          ;  bits in the Interrupt Clear registers,
   757                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   758                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   759                          ;
   760                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   761                          ;        and MASK is the bit set to enable or disable
   762                          ;----------------------------------------------------
   763                              macro M8C_ClearIntFlag
   764                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   765  3C51                        endm
   766                          
   767                          ;----------------------------------------------------
   768                          ;  Power-On Reset & WatchDog Timer Functions
   769                          ;----------------------------------------------------
   770                              macro M8C_EnableWatchDog
   771                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   772  3C51                        endm
   773                          
   774                              macro M8C_ClearWDT
   775                              mov   reg[RES_WDT], 00h
   776  3C51                        endm
   777                          
   778                              macro M8C_ClearWDTAndSleep
   779                              mov   reg[RES_WDT], 38h
   780  3C51                        endm
   781                          
   782                          ;----------------------------------------------------
   783                          ;  Sleep, CPU Stop & Software Reset
   784                          ;----------------------------------------------------
   785                              macro M8C_Sleep
   786                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   787                              ; The next instruction to be executed depends on the state of the
   788                              ; various interrupt enable bits. If some interrupts are enabled
   789                              ; and the global interrupts are disabled, the next instruction will
   790                              ; be the one that follows the invocation of this macro. If global
   791                              ; interrupts are also enabled then the next instruction will be
   792                              ; from the interrupt vector table. If no interrupts are enabled
   793                              ; then the CPU sleeps forever.
   794  3C51                        endm
   795                          
   796                              macro M8C_Stop
   797                              ; In general, you probably don't want to do this, but here's how:
   798                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   799                              ; Next instruction to be executed is located in the interrupt
   800                              ; vector table entry for Power-On Reset.
   801  3C51                        endm
   802                          
   803                              macro M8C_Reset
   804                              ; Restore CPU to the power-on reset state.
   805                              mov A, 0
   806                              SSC
   807                              ; Next non-supervisor instruction will be at interrupt vector 0.
   808  3C51                        endm
   809                          
   810                          ;----------------------------------------------------
   811                          ; ImageCraft Code Compressor Actions
   812                          ;----------------------------------------------------
   813                              ; Suspend Code Compressor
   814                              ; Must not span a RET or RETI instruction
   815                              ; without resuming code compression
   816                              macro Suspend_CodeCompressor
   817                              or   F, 0
   818  3C51                        endm
   819                          
   820                              ; Resume Code Compression
   821                              macro Resume_CodeCompressor
   822                              add  SP, 0
   823                              endm
      + 3C51                    
      + 3C51                    ; end of file m8c.inc
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;
     4                          ;;       FILENAME: Memory.inc
     5                          ;;
     6                          ;;    DESCRIPTION: Memory Model and Stack Parameter Definitions for 
     7                          ;;                 CY8C22045 PSoC devices.
     8                          ;;
     9                          ;;  LAST MODIFIED: August 17, 2004
    10                          ;;
    11                          ;;-----------------------------------------------------------------------------
    12                          ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
    13                          ;;*****************************************************************************
    14                          ;;*****************************************************************************
    15                          ;
    16                          ;
    17                          ;  ******** Define Memory Model and Stack parameters ********
    18                          ;
    19  0001                    IMAGECRAFT: equ 1   
    20  0002                    HITECH: equ 2   
    21  0002                    TOOLCHAIN: equ HITECH   
    22  0001                    SYSTEM_LARGE_MEMORY_MODEL: equ 1   
    23  0000                    SYSTEM_SMALL_MEMORY_MODEL: equ 0   
    24  0003                    SYSTEM_STACK_PAGE: equ 3   
    25  0000                    SYSTEM_STACK_PAGE_OFFSET: equ 0   
    26  0002                    SYSTEM_TOOLS: equ 2   
    27  0000                    SYSTEM_IDXPG_TRACKS_STK_PP: equ 0   
    28  0001                    SYSTEM_IDXPG_TRACKS_IDX_PP: equ 1   
    29  0000                    SYSTEM_MULTIPAGE_STACK: equ 0 
    30                          
    31                          
    32                          ;  ******* Function Class Definitions *******
    33                          ;
    34                          ;  These definitions are used to describe RAM access patterns. They provide
    35                          ;  documentation and they control prologue and epilogue macros that perform
    36                          ;  the necessary housekeeping functions for large memory model devices like
    37                          ;  the CY8C22045.
    38                          
    39  0001                    RAM_USE_CLASS_1:               equ 1   ; PUSH, POP & I/O access
    40  0002                    RAM_USE_CLASS_2:               equ 2   ; Indexed address mode on stack page
    41  0004                    RAM_USE_CLASS_3:               equ 4   ; Indexed address mode to any page
    42  0008                    RAM_USE_CLASS_4:               equ 8   ; Direct/Indirect address mode access
    43                          
    44                          ; ******* Hi Tech Specific *******
    45                          ; Turn on the expansion of all macros by default
    46                          IF (TOOLCHAIN & HITECH)
    47                          OPT EXPAND
    48                          ENDIF
    49                          ; ******* Page Pointer Manipulation Macros *******
    50                          ;
    51                          ;  ******* Page Pointer Manipulation Macros *******
    52                          ;
    53                          ;  Most of the following macros are conditionally compiled so they only
    54                          ;  produce code if the large memory model is selected.
    55                          
    56                             ;-----------------------------------------------
    57                             ;  Set Stack Page Macro
    58                             ;-----------------------------------------------
    59                             ;
    60                             ;  DESC: Modify STK_PP in the large or small memory Models.
    61                             ;
    62                             ; INPUT: Constant (e.g., SYSTEM_STACK_PAGE) that specifies the RAM page on
    63                             ;        which stack operations like PUSH and POP store and retrieve their
    64                             ;        data
    65                             ;
    66                             ;  COST: 8 instruction cycles (in LMM only)
    67                          
    68                             macro RAM_SETPAGE_STK( PG_NUMBER )
    69                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    70                                mov reg[STK_PP], @PG_NUMBER
    71                             ENDIF
    72  3C51                       endm
    73                          
    74                             ;-----------------------------------------------
    75                             ;  Set Current Page Macro
    76                             ;-----------------------------------------------
    77                             ;
    78                             ;  DESC: Modify CUR_PP in the large or small memory Models.
    79                             ;
    80                             ; INPUT: Constant value (e.g., >bFoo) for the RAM page number used in
    81                             ;        calculation of effective direct-mode address operands.
    82                             ;
    83                             ;  COST: 8 instruction cycles (in LMM only)
    84                          
    85                             macro RAM_SETPAGE_CUR( PG_NUMBER )
    86                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    87                                mov reg[CUR_PP], @PG_NUMBER
    88                             ENDIF
    89  3C51                       endm
    90                          
    91                             ;-----------------------------------------------
    92                             ;  Set Index Page Macro
    93                             ;-----------------------------------------------
    94                             ;
    95                             ;  DESC: Modify IDX_PP in the large or small emory Models.
    96                             ;
    97                             ; INPUT: Constant value (e.g., >caFoo) for the RAM page number used in
    98                             ;         calculation of effective index-mode address operands.
    99                             ;
   100                             ;  COST: 8 instruction cycles (in LMM only)
   101                          
   102                             macro RAM_SETPAGE_IDX( PG_NUMBER )
   103                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   104                                mov reg[IDX_PP], @PG_NUMBER
   105                             ENDIF
   106  3C51                       endm
   107                          
   108                             ;-----------------------------------------------
   109                             ;  Set MVI Read Page Macro
   110                             ;-----------------------------------------------
   111                             ;
   112                             ;  DESC: Modify MVR_PP in the large or small memory Models.
   113                             ;
   114                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   115                             ;        calculation of indirect address operands used in the
   116                             ;        "mvi A, [pFoo]" instructions.
   117                             ;
   118                             ;  COST: 8 instruction cycles (in LMM only)
   119                          
   120                             macro RAM_SETPAGE_MVR( PG_NUMBER )
   121                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   122                                mov reg[MVR_PP], @PG_NUMBER
   123                             ENDIF
   124  3C51                       endm
   125                          
   126                             ;-----------------------------------------------
   127                             ;  Set MVI Write Page Macro
   128                             ;-----------------------------------------------
   129                             ;
   130                             ;  DESC: Modify MVW_PP in the large or small memory Models.
   131                             ;
   132                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   133                             ;        calculation of indirect address operands used in the
   134                             ;        "mvi [pFoo], A" instructions.
   135                             ;
   136                             ;  COST: 8 instruction cycles (in LMM only)
   137                          
   138                             macro RAM_SETPAGE_MVW( PG_NUMBER )
   139                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   140                                mov reg[MVW_PP], @PG_NUMBER
   141                             ENDIF
   142  3C51                       endm
   143                          
   144                             ;-----------------------------------------------
   145                             ;  Force Index Page Pointer to Stack Page
   146                             ;-----------------------------------------------
   147                             ;
   148                             ;  DESC: Map index-mode operands onto the stack page by modifying IDX_PP.
   149                             ;        See also RAM_LOCK_INDEX_TO_STACKPAGE.
   150                             ;
   151                             ; INPUT: None
   152                             ;
   153                             ;  COST: 8 instruction cycles (in LMM only)
   154                          
   155                             macro RAM_SETPAGE_IDX2STK
   156                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   157                                IF ( SYSTEM_MULTIPAGE_STACK )
   158                                   mov   A, reg[STK_PP]
   159                                   mov   reg[IDX_PP], A
   160                                ELSE
   161                                   RAM_SETPAGE_IDX SYSTEM_STACK_PAGE
   162                                ENDIF
   163                             ENDIF
   164  3C51                       endm
   165                          
   166                             ;-----------------------------------------------
   167                             ;  Change Memory Mode
   168                             ;-----------------------------------------------
   169                             ;
   170                             ;  DESC: Modify FLAG_PAGEMODE bits in the large and small memory Models.
   171                             ;
   172                             ; INPUT: Constant value for PGMODE bitfield of CPU Flag register, F.
   173                             ;        See FLAG_PGMODE_{x} constants in M8C.INC.
   174                             ;
   175                             ;  COST: 8 instruction cycles (in LMM only)
   176                          
   177                             macro RAM_CHANGE_PAGE_MODE( MODE )
   178                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   179                                and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
   180                                or    F,  FLAG_PGMODE_MASK & @MODE
   181                             ENDIF
   182  3C51                       endm
   183                          
   184                             ;-----------------------------------------------
   185                             ;  Set Large Memory Model Native Paging Mode
   186                             ;-----------------------------------------------
   187                             ;
   188                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   189                             ;        paging mode *IFF* a simple "OR" is guaranteed to work---for
   190                             ;        example, in an ISR, when the PGMODE bits have been cleared
   191                             ;        to zero. If a simple "OR" is not guaranteed to work, use
   192                             ;        the slower RAM_RESTORE_NATIVE_PAGING instead.
   193                             ;
   194                             ; INPUT: none
   195                             ;
   196                             ;  COST: 4 instruction cycles (in LMM only)
   197                          
   198                             macro RAM_SET_NATIVE_PAGING
   199                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   200                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   201                                or    F,  FLAG_PGMODE_11b            ; LMM w/ IndexPage<==>StackPage
   202                             ENDIF ;  PGMODE LOCKED
   203                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   204                                or    F,  FLAG_PGMODE_10b            ; LMM with independent IndexPage
   205                             ENDIF ; PGMODE FREE
   206                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   207  3C51                       endm
   208                          
   209                             ;-----------------------------------------------
   210                             ; Restore Large Memory Model Native Paging Mode
   211                             ;-----------------------------------------------
   212                             ;
   213                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   214                             ;        paging mode. Always works because it clears the PGMODE bits
   215                             ;        before OR-ing in the new ones. See RAM_RESTORE_NATIVE_PAGING
   216                             ;        for a faster method.
   217                             ;
   218                             ; INPUT: none
   219                             ;
   220                             ;  COST: 8 instruction cycles (in LMM only)
   221                          
   222                             macro RAM_RESTORE_NATIVE_PAGING
   223                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   224                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   225                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_11b ; LMM w/ IndexPage<==>StackPage
   226                             ENDIF ;  PGMODE LOCKED
   227                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   228                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b ; LMM with independent IndexPage
   229                             ENDIF ; PGMODE FREE
   230                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   231  3C51                       endm
   232                          
   233                             ;-----------------------------------------------
   234                             ; Force indexed addr mode operands to Stack Pg
   235                             ;-----------------------------------------------
   236                             ;
   237                             ;  DESC: Force instructions that use indexed address mode to reference the
   238                             ;        stack page (as defined by STK_PP). This macro sets the "Indexed
   239                             ;        Stack Mode" bit (LSB) of the PGMODE bit field in the CPU Flag
   240                             ;        register, F. (See also RAM_SETPAGE_IDX2STK, above.)
   241                             ;
   242                             ; INPUT: none
   243                             ;
   244                             ;  COST: 4 instruction cycles (in LMM only)
   245                          
   246                             macro RAM_X_POINTS_TO_STACKPAGE
   247                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   248                                or   F, FLAG_PGMODE_01b
   249                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   250  3C51                       endm
   251                          
   252                             ;-----------------------------------------------
   253                             ;  Force indexed addr mode operands to Index Pg
   254                             ;-----------------------------------------------
   255                             ;
   256                             ;  DESC: Permit instructions that use indexed address mode to reference page
   257                             ;        zero or the page pointed to by the IDX_PP register, depending on the
   258                             ;        setting of the MSb (or "Direct Page Mode" bit) of the PGMODE bits
   259                             ;        in the CPU Flag register, F. (This macro clears the PGMODE LSb.)
   260                             ;
   261                             ; INPUT: none
   262                             ;
   263                             ;  COST: 4 instruction cycles (in LMM only)
   264                          
   265                             macro RAM_X_POINTS_TO_INDEXPAGE
   266                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   267                                and  F, ~FLAG_PGMODE_01b
   268                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   269  3C51                       endm
   270                          
   271                             ;-----------------------------------------------
   272                             ;  Function Prologue
   273                             ;-----------------------------------------------
   274                             ;
   275                             ;  Prologue for functions that run in the LMM and SMM.
   276                             ;
   277                          
   278                             macro RAM_PROLOGUE( ACTUAL_CLASS )
   279                          
   280                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   281                             ; Nothing to do
   282                             ENDIF ; RAM_USE_CLASS_1
   283                          
   284                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   285                                IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   286                                   RAM_X_POINTS_TO_STACKPAGE         ; exit native paging mode!
   287                                ENDIF
   288                             ENDIF ; RAM_USE_CLASS_2
   289                          
   290                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   291                                IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   292                                   RAM_X_POINTS_TO_INDEXPAGE         ; exit native paging mode!
   293                                ENDIF
   294                             ENDIF ; RAM_USE_CLASS_3
   295                          
   296                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   297                             ; Nothing to do
   298                             ENDIF ; RAM_USE_CLASS_4
   299                          
   300  3C51                       endm
   301                          
   302                             ;-----------------------------------------------
   303                             ;  Function Epilogue
   304                             ;-----------------------------------------------
   305                             ;
   306                             ;  Prologue for functions that run in the LMM and SMM.
   307                             ;
   308                          
   309                             macro RAM_EPILOGUE( ACTUAL_CLASS )
   310                          
   311                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   312                             ; Nothing to do
   313                             ENDIF ; RAM_USE_CLASS_1
   314                          
   315                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   316                                RAM_RESTORE_NATIVE_PAGING
   317                             ENDIF ; RAM_USE_CLASS_2
   318                          
   319                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   320                                RAM_RESTORE_NATIVE_PAGING
   321                             ENDIF ; RAM_USE_CLASS_3
   322                          
   323                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   324                             ; Nothing to do
   325                             ENDIF ; RAM_USE_CLASS_4
   326                          
   327  3C51                       endm
   328                          
   329                             ;-----------------------------------------------
   330                             ;  Preserve Register
   331                             ;-----------------------------------------------
   332                             ;
   333                             ;  DESC: Preserve a register value on the stack
   334                             ;
   335                             ; INPUT: Name or address of register in I/O Space
   336                             ;        The I/O bank is an implicit parameter. That is, this function will
   337                             ;        Access the I/O bank currently specified by the CPU Flag register.
   338                             ;
   339                             ;  USES: CPU 'A' register
   340                             ;
   341                             ;  COST: 9 instruction cycles
   342                          
   343                             macro REG_PRESERVE( IOReg )
   344                             mov   A, reg[ @IOReg ]
   345                             push  A
   346  3C51                       endm
   347                          
   348                             ;-----------------------------------------------
   349                             ;  Restore Register
   350                             ;-----------------------------------------------
   351                             ;
   352                             ;  DESC: Restore a register value from the stack
   353                             ;
   354                             ; INPUT: Name or address of register in I/O Space
   355                             ;        The I/O bank is an implicit parameter. That is, this function will
   356                             ;        Access the I/O bank currently specified by the CPU Flag register.
   357                             ;
   358                             ;  USES: CPU 'A' register
   359                             ;
   360                             ;  COST: 10 instruction cycles
   361                          
   362                             macro REG_RESTORE( IOReg )
   363                             pop   A
   364                             mov   reg[ @IOReg ], A
   365  3C51                       endm
   366                          
   367                             ;-----------------------------------------------
   368                             ;  Preserve Volatile Page Pointer Registers
   369                             ;-----------------------------------------------
   370                             ;
   371                             ;  DESC: Invoked by ISRs before switching to the LMM mode and calling
   372                             ;        functions that require on it.
   373                             ;
   374                             ; INPUT: none
   375                             ;
   376                             ;  USES: CPU 'A' register
   377                             ;
   378                             ;  COST: 45 instruction cycles (in LMM only)
   379                          
   380                             macro ISR_PRESERVE_PAGE_POINTERS
   381                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   382                                REG_PRESERVE CUR_PP
   383                                REG_PRESERVE IDX_PP
   384                                REG_PRESERVE MVR_PP
   385                                REG_PRESERVE MVW_PP
   386                             ENDIF
   387  3C51                       endm
   388                          
   389                             ;-----------------------------------------------
   390                             ;  Restore Volatile Page Pointer Registers
   391                             ;-----------------------------------------------
   392                             ;
   393                             ;  DESC: Undo for RAM_PRESERVE_PAGE_POINTERS macro. Invoked by ISRs after
   394                             ;        calling functions that run in the LMM mode and before executing
   395                             ;        the RETI instruction.
   396                             ;
   397                             ; INPUT: none
   398                             ;
   399                             ;  USES: CPU 'A' register
   400                             ;
   401                             ;  COST: 50 instruction cycles (in LMM only)
   402                          
   403                             macro ISR_RESTORE_PAGE_POINTERS
   404                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   405                                REG_RESTORE MVW_PP
   406                                REG_RESTORE MVR_PP
   407                                REG_RESTORE IDX_PP
   408                                REG_RESTORE CUR_PP
   409                             ENDIF
   410                             endm
      + 3C51                    
      + 3C51                    ; end of file Memory.inc
     1                          ;  Generated by PSoC Designer 5.4.2946
     2                          ;
     3                          ;=============================================================================
     4                          ;  FILENAME:   GlobalParams.inc
     5                          ;  DATE:       27 September 2004
     6                          ;
     7                          ;  DESCRIPTION:
     8                          ;  Constants describing many of the global parameter settings.
     9                          ;  This file contains equates to support oscillator register initialization
    10                          ;  for the CY8C22345
    11                          ;
    12                          ;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
    13                          ;
    14                          ; NOTES:
    15                          ; Do not modify this file. It is generated by PSoC Designer each time the
    16                          ; generate application function is run. The values of the parameters in this
    17                          ; file can be modified by changing the values of the global parameters in the
    18                          ; device editor.
    19                          ;=============================================================================
    20                          ;
    21                          
    22  0003                    CPU_CLOCK:				equ	3h	;CPU clock value
    23  0007                    CPU_CLOCK_MASK:			equ	7h	;CPU clock mask
    24  0003                    CPU_CLOCK_JUST:			equ	3h	;CPU clock value justified
    25  0000                    SELECT_32K:				equ	0h		;32K select value
    26  0080                    SELECT_32K_MASK:		equ	80h		;32K select mask
    27  0000                    SELECT_32K_JUST:		equ	0h		;32K select value justified
    28  0000                    PLL_MODE:				equ	0h		;PLL mode value
    29  0040                    PLL_MODE_MASK:			equ	40h		;PLL mode mask
    30  0000                    PLL_MODE_JUST:			equ	0h		;PLL mode value justified
    31                          
    32  0002                    SLEEP_TIMER:			equ	2h		;Sleep Timer value
    33  0018                    SLEEP_TIMER_MASK:		equ	18h		;Sleep Timer mask
    34  0010                    SLEEP_TIMER_JUST:		equ	10h		;Sleep Timer value justified
    35                          
    36  0000                    SLEEP_TIMER2:			equ	0h		;Sleep Extend value
    37  0010                    SLEEP_TIMER_MASK2:		equ	10h		;Sleep Extend mask
    38  0000                    SLEEP_TIMER_JUST2:		equ	0h		;Sleep Extend value justified
    39                          
    40  0001                    SWITCH_MODE_PUMP:		equ	1h	;Switch Mode Pump setting
    41  0080                    SWITCH_MODE_PUMP_MASK:	equ	80h	;Switch Mode Pump mask
    42  0080                    SWITCH_MODE_PUMP_JUST:	equ	80h	;Switch Mode Pump justified
    43  0000                    LVD_TBEN:               equ 0   ; Low Voltage Throttle-back enable value
    44  0008                    LVD_TBEN_MASK:          equ 8  ; Low Voltage Throttle-back enable mask
    45  0000                    LVD_TBEN_JUST:          equ 0  ; Low Voltage Throttle-back enable justified
    46  0007                    TRIP_VOLTAGE:			equ	7h   ;Trip Voltage value
    47  0007                    TRIP_VOLTAGE_MASK:      equ 7h  ;Trip Voltage mask
    48  0007                    TRIP_VOLTAGE_JUST:      equ 7h  ;Trip Voltage justified
    49                                                        
    50  0010                    POWER_SETTING:			equ	10h
    51  0010                    POWER_SET_5V0:          equ 10h  ; MASK for 5.0V operation, fast and slow 
    52  0010                    POWER_SET_5V0_24MHZ:    equ 10h  ; Power Setting value for 5.0V fast      
    53  0011                    POWER_SET_5V0_6MHZ:     equ 11h  ; Power Setting value for 5.0V slow      
    54  0008                    POWER_SET_3V3:          equ 08h  ; MASK for 3.3V operation, fast and slow 
    55  0008                    POWER_SET_3V3_24MHZ:    equ 08h	 ; Power Setting value for 3.3V fast      
    56  0009                    POWER_SET_3V3_6MHZ:     equ 09h	 ; Power Setting value for 3.3V slow      
    57  0006                    POWER_SET_2V7:          equ 06h  ; MASK for 2.7V operation, fast and slow
    58  0004                    POWER_SET_2V7_12MHZ:    equ 04h	 ; MASK for 2.7V, 12MHZ operation
    59  0002                    POWER_SET_2V7_6MHZ:     equ 02h	 ; MASK for 2.7V,  6MHZ operation
    60  0001                    POWER_SET_SLOW_IMO:     equ 01h  ; MASK for slow Internal Main Oscillator (IMO) 
    61                          
    62  0001                    COMM_RX_PRESENT:		equ	1	;1 = TRUE
    63  0001                    WATCHDOG_ENABLE:		equ 1	;Watchdog Enable 1 = Enable
    64                          
    65  0007                    CLOCK_DIV_VC1:			equ	7h	;VC1 clock divider
    66  00F0                    CLOCK_DIV_VC1_MASK:		equ	f0h	;VC1 clock divider mask
    67  0070                    CLOCK_DIV_VC1_JUST:		equ	70h	;VC1 clock divider justified
    68  000F                    CLOCK_DIV_VC2:			equ	fh	;VC2 clock divider
    69  000F                    CLOCK_DIV_VC2_MASK:		equ	fh	;VC2 clock divider mask
    70  000F                    CLOCK_DIV_VC2_JUST:		equ	fh	;VC2 clock divider justified
    71  0001                    CLOCK_INPUT_VC3:		equ	1h	;VC3 clock source
    72  0003                    CLOCK_INPUT_VC3_MASK:	equ	3h	;VC3 clock source mask
    73  0001                    CLOCK_INPUT_VC3_JUST:	equ	1h	;VC3 clock source justified
    74  0026                    CLOCK_DIV_VC3:			equ	26h	;VC3 clock divider
    75  00FF                    CLOCK_DIV_VC3_MASK:		equ	ffh	;VC3 clock divider mask
    76  0026                    CLOCK_DIV_VC3_JUST:		equ	26h	;VC3 clock divider justified
    77  0000                    SYSCLK_SOURCE:				equ	(0h | 0h)	;SysClk Source setting
    78  0006                    SYSCLK_SOURCE_MASK:			equ	(4h | 2h)	;SysClk Source setting mask
    79  0000                    SYSCLK_SOURCE_JUST:			equ	(0h | 0h)	;SysClk Source setting justified
    80  0000                    SYSCLK_2_DISABLE:				equ	0h	;SysClk*2 Disable setting
    81  0001                    SYSCLK_2_DISABLE_MASK:			equ	1h	;SysClk*2 Disable setting mask
    82  0000                    SYSCLK_2_DISABLE_JUST:			equ	0h	;SysClk*2 Disable setting justified
    83                          ;
    84                          ; register initial values
    85                          ;
    86  0000                    ANALOG_IO_CONTROL:		equ 0h	;Analog IO Control register (ABF_CR)
    87  0011                    PORT_0_GLOBAL_SELECT:	equ 11h	;Port 0 global select register (PRT0GS)
    88  00FE                    PORT_0_DRIVE_0:			equ feh	;Port 0 drive mode 0 register (PRT0DM0)
    89  0001                    PORT_0_DRIVE_1:			equ 1h	;Port 0 drive mode 1 register (PRT0DM1)
    90  0000                    PORT_0_DRIVE_2:			equ 0h	;Port 0 drive mode 2 register (PRT0DM2)
    91  0000                    PORT_0_INTENABLE:		equ 0h	;Port 0 interrupt enable register (PRT0IE)
    92  0000                    PORT_0_INTCTRL_0:		equ 0h	;Port 0 interrupt control 0 register (PRT0IC0)
    93  0000                    PORT_0_INTCTRL_1:		equ 0h	;Port 0 interrupt control 1 register (PRT0IC1)
    94  0000                    PORT_1_GLOBAL_SELECT:	equ 0h	;Port 1 global select register (PRT1GS)
    95  00A0                    PORT_1_DRIVE_0:			equ a0h	;Port 1 drive mode 0 register (PRT1DM0)
    96  00FF                    PORT_1_DRIVE_1:			equ ffh	;Port 1 drive mode 1 register (PRT1DM1)
    97  00FF                    PORT_1_DRIVE_2:			equ ffh	;Port 1 drive mode 2 register (PRT1DM2)
    98  0000                    PORT_1_INTENABLE:		equ 0h	;Port 1 interrupt enable register (PRT1IE)
    99  0000                    PORT_1_INTCTRL_0:		equ 0h	;Port 1 interrupt control 0 register (PRT1IC0)
   100  0000                    PORT_1_INTCTRL_1:		equ 0h	;Port 1 interrupt control 1 register (PRT1IC1)
   101  0019                    PORT_2_GLOBAL_SELECT:	equ 19h	;Port 2 global select register (PRT2GS)
   102  0009                    PORT_2_DRIVE_0:			equ 9h	;Port 2 drive mode 0 register (PRT2DM0)
   103  00F6                    PORT_2_DRIVE_1:			equ f6h	;Port 2 drive mode 1 register (PRT2DM1)
   104  00E6                    PORT_2_DRIVE_2:			equ e6h	;Port 2 drive mode 2 register (PRT2DM2)
   105  0000                    PORT_2_INTENABLE:		equ 0h	;Port 2 interrupt enable register (PRT2IE)
   106  0000                    PORT_2_INTCTRL_0:		equ 0h	;Port 2 interrupt control 0 register (PRT2IC0)
   107  0000                    PORT_2_INTCTRL_1:		equ 0h	;Port 2 interrupt control 1 register (PRT2IC1)
   108  0000                    PORT_3_GLOBAL_SELECT:	equ 0h	;Port 3 global select register (PRT3GS)
   109  0000                    PORT_3_DRIVE_0:			equ 0h	;Port 3 drive mode 0 register (PRT3DM0)
   110  0000                    PORT_3_DRIVE_1:			equ 0h	;Port 3 drive mode 1 register (PRT3DM1)
   111  0000                    PORT_3_DRIVE_2:			equ 0h	;Port 3 drive mode 2 register (PRT3DM2)
   112  0000                    PORT_3_INTENABLE:		equ 0h	;Port 3 interrupt enable register (PRT3IE)
   113  0000                    PORT_3_INTCTRL_0:		equ 0h	;Port 3 interrupt control 0 register (PRT3IC0)
   114  0000                    PORT_3_INTCTRL_1:		equ 0h	;Port 3 interrupt control 1 register (PRT3IC1)
     1                          ;  Generated by PSoC Designer 5.4.2946
     2                          ;
     3                          ;==========================================================================
     4                          ;  PSoCConfig.asm
     5                          ;  @PSOC_VERSION
     6                          ;
     7                          ;  Version: 0.85
     8                          ;  Revised: June 22, 2004
     9                          ;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
    10                          ;
    11                          ;  This file is generated by the Device Editor on Application Generation.
    12                          ;  It contains code which loads the configuration data table generated in
    13                          ;  the file PSoCConfigTBL.asm
    14                          ;
    15                          ;  DO NOT EDIT THIS FILE MANUALLY, AS IT IS OVERWRITTEN!!!
    16                          ;  Edits to this file will not be preserved.
    17                          ;==========================================================================
    18                          ;
    19                          include "m8c.inc"
    20                          include "memory.inc"
    21                          include "GlobalParams.inc"
    22                          
    23                          export LoadConfigInit
    24                          export _LoadConfigInit
    25                          export LoadConfig_led_display
    26                          export _LoadConfig_led_display
    27                          
    28                          export NO_SHADOW
    29                          export _NO_SHADOW
    30                          
    31  0010                    FLAG_CFG_MASK:      equ 10h         ;M8C flag register REG address bit mask
    32  00FF                    END_CONFIG_TABLE:   equ ffh         ;end of config table indicator
    33                          
    34                          AREA psoc_config(rom, rel)
    35                          
    36                          ;---------------------------------------------------------------------------
    37                          ; LoadConfigInit - Establish the start-up configuration (except for a few
    38                          ;                  parameters handled by boot code, like CPU speed). This
    39                          ;                  function can be called from user code, but typically it
    40                          ;                  is only called from boot.
    41                          ;
    42                          ;       INPUTS: None.
    43                          ;      RETURNS: Nothing.
    44                          ; SIDE EFFECTS: Registers are volatile: the A and X registers can be modified!
    45                          ;               In the large memory model currently only the page
    46                          ;               pointer registers listed below are modified.  This does
    47                          ;               not guarantee that in future implementations of this
    48                          ;               function other page pointer registers will not be
    49                          ;               modified.
    50                          ;          
    51                          ;               Page Pointer Registers Modified: 
    52                          ;               CUR_PP
    53                          ;
    54  2AEC                    _LoadConfigInit:
    55  2AEC                     LoadConfigInit:
    56                              RAM_PROLOGUE RAM_USE_CLASS_4
    57                              
    58  2AEC  7C 2AF3           	lcall	LoadConfig_led_display
    59  2AEF  7C 3E14           	lcall	LoadConfigTBL_led_display_Ordered
    60                          
    61                          
    62                              RAM_EPILOGUE RAM_USE_CLASS_4
    63  2AF2  7F                    ret
    64                          
    65                          ;---------------------------------------------------------------------------
    66                          ; Load Configuration led_display
    67                          ;
    68                          ;    Load configuration registers for led_display.
    69                          ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
    70                          ;
    71                          ;       INPUTS: None.
    72                          ;      RETURNS: Nothing.
    73                          ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
    74                          ;               modified as may the Page Pointer registers!
    75                          ;               In the large memory model currently only the page
    76                          ;               pointer registers listed below are modified.  This does
    77                          ;               not guarantee that in future implementations of this
    78                          ;               function other page pointer registers will not be
    79                          ;               modified.
    80                          ;          
    81                          ;               Page Pointer Registers Modified: 
    82                          ;               CUR_PP
    83                          ;
    84  2AF3                    _LoadConfig_led_display:
    85  2AF3                     LoadConfig_led_display:
    86                              RAM_PROLOGUE RAM_USE_CLASS_4
    87                          
    88  2AF3  10                	push	x
    89  2AF4  70 EF                 M8C_SetBank0                    ; Force bank 0
    90  2AF6  50 00                 mov     a, 0                    ; Specify bank 0
    91  2AF8  67                    asr     a                       ; Store in carry flag
    92                                                              ; Load bank 0 table:
    93  2AF9  50 2B                 mov     A, >LoadConfigTBL_led_display_Bank0
    94  2AFB  57 50                 mov     X, <LoadConfigTBL_led_display_Bank0
    95  2AFD  7C 2B0E               lcall   LoadConfig              ; Load the bank 0 values
    96                          
    97  2B00  50 01                 mov     a, 1                    ; Specify bank 1
    98  2B02  67                    asr     a                       ; Store in carry flag
    99                                                              ; Load bank 1 table:
   100  2B03  50 2B                 mov     A, >LoadConfigTBL_led_display_Bank1
   101  2B05  57 E7                 mov     X, <LoadConfigTBL_led_display_Bank1
   102  2B07  7C 2B0E               lcall   LoadConfig              ; Load the bank 1 values
   103                          
   104  2B0A  70 EF                 M8C_SetBank0                    ; Force return to bank 0
   105  2B0C  20                	pop		x
   106                          
   107                              RAM_EPILOGUE RAM_USE_CLASS_4
   108  2B0D  7F                    ret
   109                          
   110                          
   111                          
   112                          
   113                          ;---------------------------------------------------------------------------
   114                          ; LoadConfig - Set IO registers as specified in ROM table of (address,value)
   115                          ;              pairs. Terminate on address=0xFF.
   116                          ;
   117                          ;  INPUTS:  [A,X] points to the table to be loaded
   118                          ;           Flag Register Carry bit encodes the Register Bank
   119                          ;           (Carry=0 => Bank 0; Carry=1 => Bank 1)
   120                          ;
   121                          ;  RETURNS: nothing.
   122                          ;
   123                          ;  STACK FRAME:  X-4 I/O Bank 0/1 indicator
   124                          ;                X-3 Temporary store for register address
   125                          ;                X-2 LSB of config table address
   126                          ;                X-1 MSB of config table address
   127                          ;
   128  2B0E                    LoadConfig:
   129  2B0E  71 40                 RAM_PROLOGUE RAM_USE_CLASS_2
   130  2B10  38 02                 add     SP, 2                   ; Set up local vars
   131  2B12  10                    push    X                       ; Save config table address on stack
   132  2B13  08                    push    A
   133  2B14  4F                    mov     X, SP
   134  2B15  56 FC 00              mov     [X-4], 0                ; Set default Destination to Bank 0
   135  2B18  D004                  jnc     .BankSelectSaved        ; Carry says Bank 0 is OK
   136  2B1A  56 FC 01              mov     [X-4], 1                ; No Carry: default to Bank 1
   137  2B1D                    .BankSelectSaved:
   138  2B1D  18                    pop     A
   139  2B1E  20                    pop     X
   140                          
   141  2B1F                    LoadConfigLp:
   142  2B1F  70 EF                 M8C_SetBank0                    ; Switch to bank 0
   143  2B21  62 E3 00              M8C_ClearWDT                    ; Clear the watchdog for long inits
   144  2B24  10                    push    X                       ; Preserve the config table address
   145  2B25  08                    push    A
   146  2B26  28                    romx                            ; Load register address from table
   147  2B27  39 FF                 cmp     A, END_CONFIG_TABLE     ; End of table?
   148  2B29  A01F                  jz      EndLoadConfig           ;   Yes, go wrap it up
   149  2B2B  4F                    mov     X, SP                   ;
   150  2B2C  48 FC 01              tst     [X-4], 1                ; Loading IO Bank 1?
   151  2B2F  A003                  jz      .IOBankNowSet           ;    No, Bank 0 is fine
   152  2B31  71 10                 M8C_SetBank1                    ;   Yes, switch to Bank 1
   153  2B33                    .IOBankNowSet:
   154  2B33  54 FD                 mov     [X-3], A                ; Stash the register address
   155  2B35  18                    pop     A                       ; Retrieve the table address
   156  2B36  20                    pop     X
   157  2B37  75                    inc     X                       ; Advance to the data byte
   158  2B38  09 00                 adc     A, 0
   159  2B3A  10                    push    X                       ; Save the config table address again
   160  2B3B  08                    push    A
   161  2B3C  28                    romx                            ; load config data from the table
   162  2B3D  4F                    mov     X, SP                   ; retrieve the register address
   163  2B3E  59 FD                 mov     X, [X-3]
   164  2B40  61 00                 mov     reg[X], A               ; Configure the register
   165  2B42  18                    pop     A                       ; retrieve the table address
   166  2B43  20                    pop     X
   167  2B44  75                    inc     X                       ; advance to next table entry
   168  2B45  09 00                 adc     A, 0
   169  2B47  8FD7                  jmp     LoadConfigLp            ; loop to configure another register
   170  2B49                    EndLoadConfig:
   171  2B49  38 FC                 add     SP, -4
   172                              RAM_EPILOGUE RAM_USE_CLASS_2
      + 2B4B  70 3F             	and	f, 0x3F
      + 2B4D  71 80             	or	f, 0x80
   173  2B4F  7F                    ret
   174                          
   175                          AREA InterruptRAM(ram, rel)
   176                          
   177  007D                    NO_SHADOW:
   178  007D                    _NO_SHADOW:
HI-TECH Software Macro Assembler (PSoC MCU) V9.61
Symbol Table                                                                                               Fri Jun 12 09:25:10 2015
                  _LoadConfigInit 2AEC    LoadConfigTBL_led_display_Bank0 2B50    LoadConfigTBL_led_display_Bank1 2BE7  
           LoadConfig_led_display 2AF3                             HITECH 0002                    FLAG_PGMODE_01b 0040  
                  FLAG_PGMODE_10b 0080            _LoadConfig_led_display 2AF3          SYSTEM_LARGE_MEMORY_MODEL 0001  
                        NO_SHADOW 007D                          TOOLCHAIN 0002                         _NO_SHADOW 007D  
                 FLAG_PGMODE_MASK 00C0                            RES_WDT 00E3                    RAM_USE_CLASS_1 0001  
                  RAM_USE_CLASS_2 0002                    RAM_USE_CLASS_3 0004                    RAM_USE_CLASS_4 0008  
LoadConfigTBL_led_display_Ordered 3E14                         LoadConfig 2B0E                     LoadConfigInit 2AEC  
                 END_CONFIG_TABLE 00FF                      EndLoadConfig 2B49                      FLAG_XIO_MASK 0010  
       SYSTEM_IDXPG_TRACKS_IDX_PP 0001                       LoadConfigLp 2B1F         SYSTEM_IDXPG_TRACKS_STK_PP 0000  
HI-TECH Software Macro Assembler (PSoC MCU) V9.61
                                                                                                           Fri Jun 12 09:25:10 2015
     1                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     2                          ;;;
     3                          ;;;  M8C.INC -- Microcontroller Device System Declarations
     4                          ;;;
     5                          ;;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
     6                          ;;;
     7                          ;;;  This file provides address constants, bit field masks and a set of macro
     8                          ;;;  facilities for the Cypress Semiconductor CY8C22045 Microcontroller devices.
     9                          ;;;
    10                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    11                          
    12                          ;;=============================================================================
    13                          ;; Definition of abbreviations used in the descriptions below
    14                          ;;  (RW)   The register or bit supports reads and writes
    15                          ;;  (W)    The register or bit is write-only
    16                          ;;  (R)    The register or bit is read-only
    17                          ;;  (#)    Access to the register is bit specific (see the family datasheet)
    18                          ;;  (RC)   The register or bit can be read, but writing a 0 will clear it,
    19                          ;;         writing a 1 will have no effect.
    20                          ;;=============================================================================
    21                          
    22                          ;;=============================================================================
    23                          ;;      System Registers
    24                          ;;=============================================================================
    25                          
    26                          ;----------------------------
    27                          ;  Flag Register Bit Fields
    28                          ;----------------------------
    29  00C0                    FLAG_PGMODE_MASK:  equ 0C0h     ; Paging control for > 256 bytes of RAM
    30  0000                    FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
    31  0040                    FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
    32  0080                    FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
    33  00C0                    FLAG_PGMODE_3:     equ 0C0h       ; Direct to CUR_PP page, indexed to STK_PP page
    34  0000                    FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
    35  0040                    FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
    36  0080                    FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
    37  00C0                    FLAG_PGMODE_11b:   equ 0C0h       ; Same as PGMODE_3
    38  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    39  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    40  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    41  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    42  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    43                          
    44                          
    45                          ;;=============================================================================
    46                          ;;      Register Space, Bank 0
    47                          ;;=============================================================================
    48                          
    49                          ;------------------------------------------------
    50                          ;  Port Registers
    51                          ;  Note: Also see this address range in Bank 1.
    52                          ;------------------------------------------------
    53                          ; Port 0
    54  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    55  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    56  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    57  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    58                          ; Port 1
    59  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    60  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    61  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    62  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    63                          ; Port 2
    64  0008                    PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
    65  0009                    PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
    66  000A                    PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
    67  000B                    PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
    68                          ; Port 3
    69  000C                    PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
    70  000D                    PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
    71  000E                    PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
    72  000F                    PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
    73                          ; Port 4
    74  0010                    PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
    75  0011                    PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
    76  0012                    PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
    77  0013                    PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
    78                          
    79                          ;------------------------------------------------
    80                          ;  Digital PSoC(tm) block Registers
    81                          ;  Note: Also see this address range in Bank 1.
    82                          ;------------------------------------------------
    83                          ; Digital PSoC block 00, Basic Type C
    84  0020                    DBC00DR0:     equ 20h          ; data register 0                          (#)
    85  0021                    DBC00DR1:     equ 21h          ; data register 1                          (W)
    86  0022                    DBC00DR2:     equ 22h          ; data register 2                          (RW)
    87  0023                    DBC00CR0:     equ 23h          ; control & status register 0              (#)
    88                          
    89                          ; Digital PSoC block 01, Basic Type C
    90  0024                    DBC01DR0:     equ 24h          ; data register 0                          (#)
    91  0025                    DBC01DR1:     equ 25h          ; data register 1                          (W)
    92  0026                    DBC01DR2:     equ 26h          ; data register 2                          (RW)
    93  0027                    DBC01CR0:     equ 27h          ; control & status register 0              (#)
    94                          
    95                          ; Digital PSoC block 02, Communications Type C
    96  0028                    DCC02DR0:     equ 28h          ; data register 0                          (#)
    97  0029                    DCC02DR1:     equ 29h          ; data register 1                          (W)
    98  002A                    DCC02DR2:     equ 2Ah          ; data register 2                          (RW)
    99  002B                    DCC02CR0:     equ 2Bh          ; control & status register 0              (#)
   100                          
   101                          ; Digital PSoC block 03, Communications Type C
   102  002C                    DCC03DR0:     equ 2Ch          ; data register 0                          (#)
   103  002D                    DCC03DR1:     equ 2Dh          ; data register 1                          (W)
   104  002E                    DCC03DR2:     equ 2Eh          ; data register 2                          (RW)
   105  002F                    DCC03CR0:     equ 2Fh          ; control & status register 0              (#)
   106                          
   107                          ; Digital PSoC block 10, Basic Type C
   108  0030                    DBC10DR0:     equ 30h          ; data register 0                          (#)
   109  0031                    DBC10DR1:     equ 31h          ; data register 1                          (W)
   110  0032                    DBC10DR2:     equ 32h          ; data register 2                          (RW)
   111  0033                    DBC10CR0:     equ 33h          ; control & status register 0              (#)
   112                          
   113                          ; Digital PSoC block 11, Basic Type C
   114  0034                    DBC11DR0:     equ 34h          ; data register 0                          (#)
   115  0035                    DBC11DR1:     equ 35h          ; data register 1                          (W)
   116  0036                    DBC11DR2:     equ 36h          ; data register 2                          (RW)
   117  0037                    DBC11CR0:     equ 37h          ; control & status register 0              (#)
   118                          
   119                          ; Digital PSoC block 12, Communications Type C
   120  0038                    DCC12DR0:     equ 38h          ; data register 0                          (#)
   121  0039                    DCC12DR1:     equ 39h          ; data register 1                          (W)
   122  003A                    DCC12DR2:     equ 3Ah          ; data register 2                          (RW)
   123  003B                    DCC12CR0:     equ 3Bh          ; control & status register 0              (#)
   124                          
   125                          ; Digital PSoC block 13, Communications Type C
   126  003C                    DCC13DR0:     equ 3Ch          ; data register 0                          (#)
   127  003D                    DCC13DR1:     equ 3Dh          ; data register 1                          (W)
   128  003E                    DCC13DR2:     equ 3Eh          ; data register 2                          (RW)
   129  003F                    DCC13CR0:     equ 3Fh          ; control & status register 0              (#)
   130                          
   131                          ;-------------------------------------
   132                          ;  Analog Control Registers
   133                          ;-------------------------------------
   134  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
   135  00C0                    AMX_IN_ACI3:          equ C0h    ; MASK: column 3 input mux
   136  0030                    AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
   137  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
   138  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
   139                          
   140  0061                    AMUX_CFG:      equ 61h          ; Analog MUX Configuration
   141  0030                    AMUX_CFG_INTCAP:       equ 30h    ;
   142  000E                    AMUX_CFG_MUXCLK:  	  equ 0Eh	 ;
   143  0001                    AMUX_CFG_EN:		  	  equ 01h	 ;
   144                          
   145                          ; old declarations DO NOT USE
   146  0061                    AMUXCFG:      equ 61h          ; Analog MUX Configuration
   147  0030                    AMUXCFG_INTCAP:       equ 30h    ;
   148  000E                    AMUXCFG_MUXCLK:  	  equ 0Eh	 ;
   149  0001                    AMUXCFG_EN:		  	  equ 01h	 ;
   150                          
   151  0062                    PWM_CR:       equ 62h          ; Pulse-Width Modulator Control
   152  0038                    PWM_CR_HIGH:          equ 38h    ; MASK: PWM high time
   153  0006                    PWM_CR_LOW:           equ 06h	 ; MASK: PWM low time
   154  0001                    PWM_CR_EN:            equ 01h	 ; MASK: Enable/Disable PWM function
   155                          
   156  0063                    ARF_CR:       equ 63h          ; Analog Reference Control
   157                          
   158  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus Register           (#)
   159  0080                    CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
   160  0040                    CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
   161  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
   162  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
   163  0008                    CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
   164  0004                    CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
   165  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
   166  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   167                          
   168  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   169  0020                    CMP_CR1_CLDIS1:       equ 20h    ; MASK: Column 1 comparator output latch
   170  0010                    CMP_CR1_CLDIS0:	      equ 10h    ; MASK: Column 0 comparator output latch
   171                          
   172  0068                    ADC0_CR:      equ 68h          ; Analog Column 0 Configuration
   173  0080                    ADC0_CR_CMPST:        equ 80h    ;
   174  0040                    ADC0_CR_LOREN:        equ 40h    ;
   175  0020                    ADC0_CR_SHEN:         equ 20h    ;
   176  0008                    ADC0_CR_CBSRC:        equ 08h    ;
   177  0004                    ADC0_CR_ADCM:         equ 04h    ;
   178  0001                    ADC0_CR_EN:	          equ 01h    ;
   179                          
   180  0069                    ADC1_CR:      equ 69h          ; Analog Column 1 Configuration
   181  0080                    ADC1_CR_CMPST:        equ 80h    ;
   182  0040                    ADC1_CR_LOREN:        equ 40h    ;
   183  0020                    ADC1_CR_SHEN:         equ 20h    ;
   184  0008                    ADC1_CR_CBSRC:        equ 08h    ;
   185  0004                    ADC1_CR_ADCM:         equ 04h    ;
   186  0001                    ADC1_CR_EN:	          equ 01h    ;
   187                          
   188                          ; Continuous Time PSoC block Type E Row 0 Col 0
   189  0072                    ACE00CR1:     equ 72h          ; Control register 1                       (RW)
   190  0073                    ACE00CR2:     equ 73h          ; Control register 2                       (RW)
   191                          
   192                          ; Continuous Time PSoC block Type E Row 0 Col 1
   193  0076                    ACE01CR1:     equ 76h          ; Control register 1                       (RW)
   194  0077                    ACE01CR2:     equ 77h          ; Control register 2                       (RW)
   195                          
   196                          ; Switched Cap PSoC blockType E Row 1 Col 0
   197  0080                    ASE10CR0:     equ 80h          ; Control register 0                       (RW)
   198                          
   199                          ; Switched Cap PSoC blockType E Row 1 Col 1
   200  0084                    ASE11CR0:     equ 84h          ; Control register 0                       (RW)
   201                          
   202                          ;-----------------------------------------------
   203                          ;  Global General Purpose Data Registers
   204                          ;-----------------------------------------------
   205  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   206  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   207+ 006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   208  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   209                          
   210                          ;------------------------------------------------
   211                          ;  Row Digital Interconnects
   212                          ;
   213                          ;  Note: the following registers are mapped into
   214                          ;  both register bank 0 AND register bank 1.
   215                          ;------------------------------------------------
   216                          
   217  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   218  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   219  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   220  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   221  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   222  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   223  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   224                          
   225  00B8                    RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
   226  00B9                    RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
   227  00BA                    RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
   228  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   229  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   230  00BD                    RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
   231  00BE                    RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
   232                          
   233                          ;-----------------------------------------------
   234                          ;  Ram Page Pointers
   235                          ;-----------------------------------------------
   236  00D0                    CUR_PP:      equ 0D0h           ; Current   Page Pointer
   237  00D1                    STK_PP:      equ 0D1h           ; Stack     Page Pointer
   238  00D3                    IDX_PP:      equ 0D3h           ; Index     Page Pointer
   239  00D4                    MVR_PP:      equ 0D4h           ; MVI Read  Page Pointer
   240  00D5                    MVW_PP:      equ 0D5h           ; MVI Write Page Pointer
   241                          
   242                          ;------------------------------------------------
   243                          ;  I2C Configuration Registers
   244                          ;------------------------------------------------
   245  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   246  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   247  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   248  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   249  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   250  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   251  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   252  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   253  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   254  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   255                          
   256  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   257  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   258  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   259  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   260  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   261  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   262  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   263  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   264  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   265                          
   266  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   267                          
   268  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   269  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   270  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   271  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   272  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   273                          
   274                          ;------------------------------------------------
   275                          ;  System and Global Resource Registers
   276                          ;------------------------------------------------
   277  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   278                                                         ; Use INT_MSK0 bit field masks
   279  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   280                                                         ; Use INT_MSK1 bit field masks
   281  00DC                    INT_CLR2:     equ 0DCh          ; Interrupt Clear Register 2               (RW)
   282                                                         ; Use INT_MSK2 bit field masks
   283  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   284                                                         ; Use INT_MSK3 bit field masks
   285                          
   286  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   287  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   288  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   289                          
   290  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   291  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   292  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   293  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   294  0010                    INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
   295  0008                    INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
   296  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   297  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   298  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   299                          
   300  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   301  0080                    INT_MSK1_DCC13:            equ 80h ; MASK: enable/disable DCC13 block interrupt
   302  0040                    INT_MSK1_DCC12:            equ 40h ; MASK: enable/disable DCC12 block interrupt
   303  0020                    INT_MSK1_DBC11:            equ 20h ; MASK: enable/disable DBC11 block interrupt
   304  0010                    INT_MSK1_DBC10:            equ 10h ; MASK: enable/disable DBC10 block interrupt
   305  0008                    INT_MSK1_DCC03:            equ 08h ; MASK: enable/disable DCC03 block interrupt
   306  0004                    INT_MSK1_DCC02:            equ 04h ; MASK: enable/disable DCC02 block interrupt
   307  0002                    INT_MSK1_DBC01:            equ 02h ; MASK: enable/disable DBC01 block interrupt
   308  0001                    INT_MSK1_DBC00:            equ 01h ; MASK: enable/disable DBC00 block interrupt
   309                          
   310  00DF                    INT_MSK2:     equ DFh			; Custom block Mask Register			   (RW)
   311  0010                    INT_MSK2_SARADC:           equ 10h ; MASK: enable/disable SARADC block interrupt
   312  0020                    INT_MSK2_CSD0:             equ 20h ; MASK: enable/disable CSD0 block interrupt
   313  0040                    INT_MSK2_CSD1:             equ 40h ; MASK: enable/disable CSD1 block interrupt
   314  0080                    INT_MSK2_RTC:              equ 80h ; MASK: enable/disable RTC block interrupt
   315                          
   316  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   317  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   318                          
   319                          ;------------------------------------------------------
   320                          ;  MAC Registers
   321                          ;------------------------------------------------------
   322                          
   323  00E8                    MUL0_X:       equ 0E8h          ; Multiply Input X Register                (W)
   324  00E9                    MUL0_Y:       equ 0E9h          ; Multiply Input Y Register                (W)
   325  00EA                    MUL0_DH:      equ 0EAh          ; Multiply Result High Byte Register       (R)
   326  00EB                    MUL0_DL:      equ 0EBh          ; Multiply Result Low Byte Register        (R)
   327                          
   328  00EC                    ACC0_DR1:     equ 0ECh          ; Accumulator Data Register 1              (RW)
   329  00ED                    ACC0_DR0:     equ 0EDh          ; Accumulator Data Register 0              (RW)
   330  00EE                    ACC0_DR3:     equ 0EEh          ; Accumulator Data Register 3              (RW)
   331  00EF                    ACC0_DR2:     equ 0EFh          ; Accumulator Data Register 2              (RW)
   332                          
   333                          ; DECIMATOR Control Registers
   334  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   335  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   336                          
   337                          ;------------------------------------------------------
   338                          ;  System Status and Control Registers
   339                          ;
   340                          ;  Note: The following registers are mapped into both
   341                          ;        register bank 0 AND register bank 1.
   342                          ;------------------------------------------------------
   343  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   344                                                             ; Use FLAG_ masks defined at top of file
   345                          
   346  00FD                    DAC_D:        equ 0FDh		   ; DAC Data Register                        (RW)
   347                          
   348  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   349  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: flag, Internal Reset Status bit
   350  0010                    CPU_SCR1_SLIMO:         equ 10h	   ; MASK: Slow IMO (internal main osc) enable
   351  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   352  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   353  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   354                          
   355  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   356  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   357  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   358  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   359  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   360  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   361                          
   362                          ;------------------------------------------------------
   363                          ;  Neon Capsense Digital Control Registers
   364                          ;------------------------------------------------------
   365  0050                    CSD0_DR0_L:				equ 50h		; Capsense 0 data low 0				(RW)
   366  0054                    CSD0_DR0_H:				equ 54h		; Capsense 0 data high 0			(RW)
   367  0058                    CSD1_DR0_L:				equ 58h		; Capsense 1 data low 0				(RW)
   368  005C                    CSD1_DR0_H:				equ 5Ch		; Capsense 1 data high 0			(RW)
   369  0051                    CSD0_DR1_L:				equ 51h		; Capsense 0 data low 1				(RW)
   370  0055                    CSD0_DR1_H:				equ 55h		; Capsense 0 data high 1			(RW)
   371  0059                    CSD1_DR1_L:				equ 59h		; Capsense 1 data low 1				(RW)
   372  005D                    CSD1_DR1_H:				equ 5Dh		; Capsense 1 data high 1			(RW)
   373  0052                    CSD0_CNT_L:				equ 52h		; Capsense 0 counter low			(RW)
   374  0056                    CSD0_CNT_H:				equ 56h		; Capsense 0 counter high			(RW)
   375  005A                    CSD1_CNT_L:				equ 5Ah		; Capsense 1 counter low			(RW)
   376  005E                    CSD1_CNT_H:				equ	5Eh		; Capsense 1 counter high			(RW)
   377  0053                    CSD0_CR0:				equ 53h		; Capsense 0 control 0				(RW)
   378  005B                    CSD1_CR0:				equ 5Bh		; Capsense 1 control 0				(RW)
   379  0057                    CSD0_CR1:				equ 57h		; Capsense 0 control 1				(RW)
   380  005F                    CSD1_CR1:				equ 5Fh		; Capsense 1 control 1				(RW)
   381                          
   382                          ;------------------------------------------------------
   383                          ;  Neon Analog Registers
   384                          ;------------------------------------------------------
   385  0065                    ASY_CR:					equ 65h		; Analog Synchronization Control	(RW)
   386  006A                    ADC_DH:					equ 6Ah		; ADC data high						(RW)
   387  006B                    ADC_DL:					equ 6Bh		; ADC data low						(RW)
   388  00C8                    PWMVREF0:				equ C8h		; PWM Voltage Reference 0			(RW)
   389  00C9                    PWMVREF1:				equ C9h		; PWM Voltage Reference 1			(RW)
   390  00CB                    PWMSRC:					equ CBh		; PWM Source						(RW)
   391  00CA                    IDACMODE:				equ CAh		; IDAC Mode							(RW)
   392  00FC                    IDACR_D:				equ FCh		; Analog Mux DAC data 0				(RW)
   393  00FD                    IDACL_D:				equ FDh		; Analog Mux DAC data 1				(RW)
   394                          
   395                          ;------------------------------------------------------
   396                          ;  Neon Digital Registers
   397                          ;------------------------------------------------------
   398  00B7                    RDI0DSM:				equ B7h		; Row Digital Interconnect input select 0	(RW)
   399  00BF                    RDI1DSM:				equ BFh		; Row Digital Interconnect input select 1	(RW)
   400                          
   401                          ;------------------------------------------------------
   402                          ;  Neon Test Registers
   403                          ;------------------------------------------------------
   404  00CC                    TSCR0:					equ CCh		; Tsource 0							(RW)
   405  00CD                    TSCMPH:					equ CDh		; TSCMP high						(RW)
   406  00CE                    TSCMPL:					equ CEh		; TSCMP low							(RW)
   407  00CF                    TSCR1:					equ CFh		; Tsource 1							(RW)
   408                          
   409                          ;;=============================================================================
   410                          ;;      Register Space, Bank 1
   411                          ;;=============================================================================
   412                          
   413                          ;------------------------------------------------
   414                          ;  Port Registers
   415                          ;  Note: Also see this address range in Bank 0.
   416                          ;------------------------------------------------
   417                          ; Port 0
   418  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   419  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   420  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   421  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   422                          
   423                          ; Port 1
   424  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   425  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   426  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   427  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   428                          
   429                          ; Port 2
   430  0008                    PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
   431  0009                    PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
   432  000A                    PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
   433  000B                    PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
   434                          
   435                          ; Port 3
   436  000C                    PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
   437  000D                    PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
   438  000E                    PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
   439  000F                    PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
   440                          
   441                          ; Port 4
   442  0010                    PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
   443  0011                    PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
   444  0012                    PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
   445  0013                    PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
   446                          
   447                          ;------------------------------------------------
   448                          ;  Digital PSoC(tm) block Registers
   449                          ;  Note: Also see this address range in Bank 0.
   450                          ;------------------------------------------------
   451                          
   452                          ; Digital PSoC block 00, Basic Type C
   453  0020                    DBC00FN:      equ 20h          ; Function Register                        (RW)
   454  0021                    DBC00IN:      equ 21h          ;    Input Register                        (RW)
   455  0022                    DBC00OU:      equ 22h          ;   Output Register                        (RW)
   456  0023                    DBC00CR1:     equ 23h          ;   control & status register 1            (RW)
   457                          
   458                          ; Digital PSoC block 01, Basic Type C
   459  0024                    DBC01FN:      equ 24h          ; Function Register                        (RW)
   460  0025                    DBC01IN:      equ 25h          ;    Input Register                        (RW)
   461  0026                    DBC01OU:      equ 26h          ;   Output Register                        (RW)
   462  0027                    DBC01CR1:     equ 27h          ;   control & status register 1            (RW)
   463                          
   464                          ; Digital PSoC block 02, Communications Type C
   465  0028                    DCC02FN:      equ 28h          ; Function Register                        (RW)
   466  0029                    DCC02IN:      equ 29h          ;    Input Register                        (RW)
   467  002A                    DCC02OU:      equ 2Ah          ;   Output Register                        (RW)
   468  002B                    DBC02CR1:     equ 2Bh          ;   control & status register 1            (RW)
   469                          
   470                          ; Digital PSoC block 03, Communications Type C
   471  002C                    DCC03FN:      equ 2Ch          ; Function Register                        (RW)
   472  002D                    DCC03IN:      equ 2Dh          ;    Input Register                        (RW)
   473  002E                    DCC03OU:      equ 2Eh          ;   Output Register                        (RW)
   474  0029                    DBC03CR1:     equ 29h          ;   control & status register 1            (RW)
   475                          
   476                          ; Digital PSoC block 10, Basic Type C
   477  0030                    DBC10FN:      equ 30h          ; Function Register                        (RW)
   478  0031                    DBC10IN:      equ 31h          ;    Input Register                        (RW)
   479  0032                    DBC10OU:      equ 32h          ;   Output Register                        (RW)
   480  0033                    DBC10CR1:     equ 33h          ;   control & status register 1            (RW)
   481                          
   482                          ; Digital PSoC block 11, Basic Type C
   483  0034                    DBC11FN:      equ 34h          ; Function Register                        (RW)
   484  0035                    DBC11IN:      equ 35h          ;    Input Register                        (RW)
   485  0036                    DBC11OU:      equ 36h          ;   Output Register                        (RW)
   486  0037                    DBC11CR1:     equ 37h          ;   control & status register 1            (RW)
   487                          
   488                          ; Digital PSoC block 12, Communications Type C
   489  0038                    DCC12FN:      equ 38h          ; Function Register                        (RW)
   490  0039                    DCC12IN:      equ 39h          ;    Input Register                        (RW)
   491  003A                    DCC12OU:      equ 3Ah          ;   Output Register                        (RW)
   492  003B                    DBC12CR1:     equ 3Bh          ;   control & status register 1            (RW)
   493                          
   494                          ; Digital PSoC block 13, Communications Type C
   495  003C                    DCC13FN:      equ 3Ch          ; Function Register                        (RW)
   496  003D                    DCC13IN:      equ 3Dh          ;    Input Register                        (RW)
   497  003E                    DCC13OU:      equ 3Eh          ;   Output Register                        (RW)
   498  003F                    DBC13CR1:     equ 3Fh          ;   control & status register 1            (RW)
   499                          
   500                          ;------------------------------------------------
   501                          ;  System and Global Resource Registers
   502                          ;  Note: Also see this address range in Bank 0.
   503                          ;------------------------------------------------
   504                          
   505  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   506  00C0                    CLK_CR0_ACOLUMN_3:    equ C0h    ; MASK: Specify clock for analog cloumn
   507  0030                    CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
   508  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   509  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   510                          
   511  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   512  0018                    CLK_CR1_ACLK1:        equ 18h    ; MASK: Digital PSoC block for analog source
   513  0003                    CLK_CR1_ACLK0:        equ 03h    ; MASK: Digital PSoC block for analog source
   514                          
   515  0003                    CLK_CR1_ACLK2:        equ 03h    ; Deprecated do not use
   516                          
   517  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   518  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   519                          
   520  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   521  000F                    AMD_CR0_AMOD0:        equ 0Fh    ; MASK: Modulation source for analog column 0
   522                          
   523  0064                    CMP_GO_EN:    equ 64h          ; Comparator Bus To Global Out Enable      (RW)
   524  0080                    CMP_GO_EN_GOO5:       equ 80h    ; MASK: Selected Col 1 signal to GOO5
   525  0040                    CMP_GO_EN_GOO1:       equ 40h    ; MASK: Selected Col 1 signal to GOO1
   526  0030                    CMP_GO_EN_SEL1:       equ 30h    ; MASK: Column 1 Signal Select
   527  0008                    CMP_GO_EN_GOO4:       equ 08h    ; MASK: Selected Col 0 signal to GOO4
   528  0004                    CMP_GO_EN_GOO0:       equ 04h    ; MASK: Selected Col 0 signal to GOO0
   529  0003                    CMP_GO_EN_SEL0:       equ 03h    ; MASK: Column 0 Signal Select
   530                          
   531  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   532  000F                    AMD_CR1_AMOD1:        equ 0Fh    ; MASK: Modulation ctrl for analog column 1
   533                          
   534  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   535  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   536  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   537                          
   538  006B                    CLK_CR3:      equ 6Bh          ; Analog Clock Source Control Register 3   (RW)
   539  0040                    CLK_CR3_SYS1:         equ 40h    ; MASK: Analog Clock 1 selection
   540  0030                    CLK_CR3_DIVCLK1:      equ 30h    ; MASK: Analog Clock 1 divider
   541  0004                    CLK_CR3_SYS0:         equ 04h    ; MASK: Analog Clock 0 selection
   542  0003                    CLK_CR3_DIVCLK0:      equ 03h    ; MASK: Analog Clock 0 divider
   543                          
   544                          ;------------------------------------------------
   545                          ;  Global Digital Interconnects
   546                          ;------------------------------------------------
   547                          
   548  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   549  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   550  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   551  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   552                          
   553  00A0                    GDI_O_IN_CR:  equ 0A0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   554  00A1                    GDI_E_IN_CR:  equ 0A1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   555  00A2                    GDI_O_OU_CR:  equ 0A2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   556  00A3                    GDI_E_OU_CR:  equ 0A3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   557                          
   558  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   559  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   560                          
   561                          ;------------------------------------------------
   562                          ;  Analog Mux Bus Port Enable Bits
   563                          ;------------------------------------------------
   564  00D8                    MUX_CR0:      equ 0D8h          ; Analog Mux Port 0 Bit Enables Register
   565  00D9                    MUX_CR1:      equ 0D9h          ; Analog Mux Port 1 Bit Enables Register
   566  00DA                    MUX_CR2:      equ 0DAh          ; Analog Mux Port 2 Bit Enables Register
   567  00DB                    MUX_CR3:      equ 0DBh          ; Analog Mux Port 3 Bit Enables Register
   568  00EC                    MUX_CR4:      equ 0ECh          ; Analog Mux Port 4 Bit Enables Register
   569                          
   570                          ;------------------------------------------------
   571                          ;  Clock and System Control Registers
   572                          ;------------------------------------------------
   573                          
   574  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   575  0080                    OSC_GO_EN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   576  0040                    OSC_GO_EN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   577  0020                    OSC_GO_EN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   578  0010                    OSC_GO_EN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   579  0008                    OSC_GO_EN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   580  0004                    OSC_GO_EN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   581  0002                    OSC_GO_EN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   582  0001                    OSC_GO_EN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   583                          
   584  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   585  0003                    OSC_CR4_VC3SEL:       equ 03h    ; MASK: System VC3 Clock source
   586                          
   587  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   588                          
   589  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   590  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   591  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   592  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   593  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   594  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   595  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   596  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   597  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   598  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   599  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   600  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   601  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   602  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   603  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   604  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   605  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   606  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   607                          
   608  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   609  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   610  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   611                          
   612  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   613  0080                    OSC_CR2_PLLGAIN:      equ 80h    ; MASK: High/Low gain
   614  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   615  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   616  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   617                          
   618  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   619  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   620  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   621  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   622  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   623  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   624  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   625  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   626                          
   627  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   628  0008                    VLT_CMP_NOWRITE:      equ 08h    ; MASK: Vcc below Flash Write level
   629  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   630  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   631  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   632                          
   633  00E5                    ADC0_TR:      equ 0E5h          ; ADC Column 0 Trim Register
   634  00E6                    ADC1_TR:      equ 0E6h          ; ADC Column 1 Trim Register
   635                          
   636  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   637  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   638  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   639  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   640                          
   641  00FA                    FLS_PR1:      equ 0FAh          ; Flash Program Register 1                 (RW)
   642  0003                    FLS_PR1_BANK:         equ 03h    ; MASK: Select Active Flash Bank
   643                          
   644  00FD                    DAC_CR0:       equ 0FDh          ; Analog Mux DAC Control Register 0
   645  00DC                    DAC_CR1:       equ 0DCh          ; Analog Mux DAC Control Register 1
   646  0008                    DAC_CR_IRANGE:        equ 08h    ; MASK: Sets the DAC Range low or high
   647  0006                    DAC_CR_OSCMODE:       equ 06h    ; MASK: Defines the reset mode for AMux
   648  0001                    DAC_CR_ENABLE:        equ 01h    ; MASK: Enable/Disable DAC function
   649                          
   650                          ;------------------------------------------------
   651                          ;  I2C Control Registers
   652                          ;------------------------------------------------
   653                          
   654  00AD                    I2C_ADDR:    equ 0ADh          ; I2C Address Register (RW)
   655                          
   656                          ;------------------------------------------------------
   657                          ;  Neon Analog Registers
   658                          ;------------------------------------------------------
   659  0053                    VDAC50CR0:		equ 53h			; V DAC5 control 0				(RW)
   660  0057                    VDAC51CR0:		equ 57h			; V DAC5 control 1				(RW)
   661  00A8                    ADC_CR0:		equ A8h			; ADC control 0					(RW)
   662  00A9                    ADC_CR1:		equ A9h			; ADC control 1					(RW)
   663  00AA                    ADC_CR2:		equ AAh			; ADC control 2					(RW)
   664  00AB                    ADC_CR3TRIM:	equ ABh			; ADC control 3					(RW)
   665  00AC                    ADC_CR4:		equ ACh			; ADC control 4					(RW)
   666  00E7                    VDAC_TRIM:		equ E7h			; V DAC trim					(RW)
   667                          
   668                          ;------------------------------------------------------
   669                          ;  Neon Current Sense CMP Registers
   670                          ;------------------------------------------------------
   671  0050                    CMP0CR1:		equ 50h			; CMP0 control 1				(RW)
   672  0051                    CMP0CR2:		equ 51h			; CMP0 control 2				(RW)
   673  0054                    CMP1CR1:		equ 54h			; CMP1 control 1				(RW)
   674  0055                    CMP1CR2:		equ 55h			; CMP1 control 2				(RW)
   675  0058                    CSCMPCR0:		equ 58h			; CSCMP control 0				(RW)
   676  0059                    CSCMPGOEN:		equ 59h			; CSCMO global out enable		(RW)
   677  005A                    CSLUTCR0:		equ 5Ah			; CSLUT control 0				(RW)
   678  005B                    CMPCOLMUX:		equ 5Bh			; CMP Column Mux				(RW)
   679  005C                    CMPPWMCR:		equ 5Ch			; CMP PWM control				(RW)
   680  005D                    CMPFLTCR:		equ 5Dh			; CMP filter control			(RW)
   681  005E                    CMPCLK1:		equ 5Eh			; CMP clock 1					(RW)
   682  005F                    CMPCLK0:		equ 5Fh			; CMP clock 0					(RW)
   683                          
   684                          ;------------------------------------------------------
   685                          ;  Neon Real Time Clock Registers
   686                          ;------------------------------------------------------
   687  00A4                    RTCH:			equ A4h			; Real time current hour		(RW)
   688  00A5                    RTCM:			equ A5h			; Real time current minute		(RW)
   689  00A6                    RTCS:			equ A6h			; Real time current second		(RW)
   690  00A7                    RTCCR:			equ A7h			; Real time clock control		(RW)
   691                          
   692                          ;------------------------------------------------------
   693                          ;  Analog MUX Config Registers
   694                          ;------------------------------------------------------
   695                          
   696  006A                    AMUX_CFG1:			equ 6Ah  ; Analog MUX Configuration 1
   697  0020                    AMUX_CFG1_GOINVR:	equ 20h  ;
   698  0010                    AMUX_CFG1_GOINVL:  	equ 10h	 ;
   699  000C                    AMUX_CFG1_AMUXMODR:	equ 0Ch	 ;
   700  0003                    AMUX_CFG1_AMUXMODL:	equ 03h	 ;
   701                          
   702                          ;;=============================================================================
   703                          ;;      M8C System Macros
   704                          ;;  These macros should be used when their functions are needed.
   705                          ;;=============================================================================
   706                          
   707                          ;----------------------------------------------------
   708                          ;  Swapping Register Banks
   709                          ;----------------------------------------------------
   710                              macro M8C_SetBank0
   711                              and   F, ~FLAG_XIO_MASK
   712  3C51                        endm
   713                          
   714                              macro M8C_SetBank1
   715                              or    F, FLAG_XIO_MASK
   716  3C51                        endm
   717                          
   718                          ;----------------------------------------------------
   719                          ;  Global Interrupt Enable/Disable
   720                          ;----------------------------------------------------
   721                              macro M8C_EnableGInt
   722                              or    F, FLAG_GLOBAL_IE
   723  3C51                        endm
   724                          
   725                              macro M8C_DisableGInt
   726                              and   F, ~FLAG_GLOBAL_IE
   727  3C51                        endm
   728                          
   729                          ;----------------------------------------------------
   730                          ;  Enable/Disable Interrupt Mask
   731                          ;
   732                          ;  Use the following macros to enable/disable
   733                          ;  bits in the Interrupt mask registers,
   734                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   735                          ;
   736                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   737                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   738                          ;
   739                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   740                          ;        and MASK is the bit set to enable or disable
   741                          ;----------------------------------------------------
   742                          ; Disable Interrupt Bit Mask(s)
   743                              macro M8C_DisableIntMask
   744                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   745  3C51                        endm
   746                          
   747                          ; Enable Interrupt Bit Mask(s)
   748                              macro M8C_EnableIntMask
   749                              or    reg[@0], @1               ; enable specified interrupt enable bit
   750  3C51                        endm
   751                          
   752                          ;----------------------------------------------------
   753                          ;  Clear Posted Interrupt Flag Mask
   754                          ;
   755                          ;  Use the following macros to clear the
   756                          ;  bits in the Interrupt Clear registers,
   757                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   758                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   759                          ;
   760                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   761                          ;        and MASK is the bit set to enable or disable
   762                          ;----------------------------------------------------
   763                              macro M8C_ClearIntFlag
   764                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   765  3C51                        endm
   766                          
   767                          ;----------------------------------------------------
   768                          ;  Power-On Reset & WatchDog Timer Functions
   769                          ;----------------------------------------------------
   770                              macro M8C_EnableWatchDog
   771                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   772  3C51                        endm
   773                          
   774                              macro M8C_ClearWDT
   775                              mov   reg[RES_WDT], 00h
   776  3C51                        endm
   777                          
   778                              macro M8C_ClearWDTAndSleep
   779                              mov   reg[RES_WDT], 38h
   780  3C51                        endm
   781                          
   782                          ;----------------------------------------------------
   783                          ;  Sleep, CPU Stop & Software Reset
   784                          ;----------------------------------------------------
   785                              macro M8C_Sleep
   786                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   787                              ; The next instruction to be executed depends on the state of the
   788                              ; various interrupt enable bits. If some interrupts are enabled
   789                              ; and the global interrupts are disabled, the next instruction will
   790                              ; be the one that follows the invocation of this macro. If global
   791                              ; interrupts are also enabled then the next instruction will be
   792                              ; from the interrupt vector table. If no interrupts are enabled
   793                              ; then the CPU sleeps forever.
   794  3C51                        endm
   795                          
   796                              macro M8C_Stop
   797                              ; In general, you probably don't want to do this, but here's how:
   798                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   799                              ; Next instruction to be executed is located in the interrupt
   800                              ; vector table entry for Power-On Reset.
   801  3C51                        endm
   802                          
   803                              macro M8C_Reset
   804                              ; Restore CPU to the power-on reset state.
   805                              mov A, 0
   806                              SSC
   807                              ; Next non-supervisor instruction will be at interrupt vector 0.
   808  3C51                        endm
   809                          
   810                          ;----------------------------------------------------
   811                          ; ImageCraft Code Compressor Actions
   812                          ;----------------------------------------------------
   813                              ; Suspend Code Compressor
   814                              ; Must not span a RET or RETI instruction
   815                              ; without resuming code compression
   816                              macro Suspend_CodeCompressor
   817                              or   F, 0
   818  3C51                        endm
   819                          
   820                              ; Resume Code Compression
   821                              macro Resume_CodeCompressor
   822                              add  SP, 0
   823  3C51                        endm
     1                          ;  Generated by PSoC Designer 5.4.2946
     2                          ;
     3                          ; =============================================================================
     4                          ; FILENAME: PSoCConfigTBL.asm
     5                          ;  
     6                          ; Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
     7                          ;  
     8                          ; NOTES:
     9                          ; Do not modify this file. It is generated by PSoC Designer each time the
    10                          ; generate application function is run. The values of the parameters in this
    11                          ; file can be modified by changing the values of the global parameters in the
    12                          ; device editor.
    13                          ;  
    14                          ; =============================================================================
    15                           
    16                          include "m8c.inc"
    17                          ;  Personalization tables 
    18                          export LoadConfigTBL_led_display_Bank1
    19                          export LoadConfigTBL_led_display_Bank0
    20                          export LoadConfigTBL_led_display_Ordered
    21                          AREA lit(rom, rel)
    22  2B50                    LoadConfigTBL_led_display_Bank0:
    23                          ;  Instance name PWM8_BL, User Module PWM8
    24                          ;       Instance name PWM8_BL, Block Name PWM8(DBC10)
    25  2B50  33 00             	db		33h, 00h		;PWM8_BL_CONTROL_REG(DBC10CR0)
    26  2B52  31 00             	db		31h, 00h		;PWM8_BL_PERIOD_REG(DBC10DR1)
    27  2B54  32 00             	db		32h, 00h		;PWM8_BL_COMPARE_REG(DBC10DR2)
    28                          ;  Instance name SAR10, User Module SAR10
    29                          ;  Instance name Timer16, User Module Timer16
    30                          ;       Instance name Timer16, Block Name TIMER16_LSB(DBC00)
    31  2B56  23 00             	db		23h, 00h		;Timer16_CONTROL_LSB_REG(DBC00CR0)
    32  2B58  21 80             	db		21h, 80h		;Timer16_PERIOD_LSB_REG(DBC00DR1)
    33  2B5A  22 28             	db		22h, 28h		;Timer16_COMPARE_LSB_REG(DBC00DR2)
    34                          ;       Instance name Timer16, Block Name TIMER16_MSB(DBC01)
    35  2B5C  27 04             	db		27h, 04h		;Timer16_CONTROL_MSB_REG(DBC01CR0)
    36  2B5E  25 25             	db		25h, 25h		;Timer16_PERIOD_MSB_REG(DBC01DR1)
    37  2B60  26 23             	db		26h, 23h		;Timer16_COMPARE_MSB_REG(DBC01DR2)
    38                          ;  Instance name UART_Board, User Module UART
    39                          ;       Instance name UART_Board, Block Name RX(DCC13)
    40  2B62  3F 00             	db		3fh, 00h		;UART_Board_RX_CONTROL_REG(DCC13CR0)
    41  2B64  3D 00             	db		3dh, 00h		;UART_Board_(DCC13DR1)
    42  2B66  3E 00             	db		3eh, 00h		;UART_Board_RX_BUFFER_REG (DCC13DR2)
    43                          ;       Instance name UART_Board, Block Name TX(DCC12)
    44  2B68  3B 00             	db		3bh, 00h		;UART_Board_TX_CONTROL_REG(DCC12CR0)
    45  2B6A  39 00             	db		39h, 00h		;UART_Board_TX_BUFFER_REG (DCC12DR1)
    46  2B6C  3A 00             	db		3ah, 00h		;UART_Board_(DCC12DR2)
    47                          ;  Instance name UART_Sensor, User Module UART
    48                          ;       Instance name UART_Sensor, Block Name RX(DCC03)
    49  2B6E  2F 00             	db		2fh, 00h		;UART_Sensor_RX_CONTROL_REG(DCC03CR0)
    50  2B70  2D 00             	db		2dh, 00h		;UART_Sensor_(DCC03DR1)
    51  2B72  2E 00             	db		2eh, 00h		;UART_Sensor_RX_BUFFER_REG (DCC03DR2)
    52                          ;       Instance name UART_Sensor, Block Name TX(DCC02)
    53  2B74  2B 00             	db		2bh, 00h		;UART_Sensor_TX_CONTROL_REG(DCC02CR0)
    54  2B76  29 00             	db		29h, 00h		;UART_Sensor_TX_BUFFER_REG (DCC02DR1)
    55  2B78  2A 00             	db		2ah, 00h		;UART_Sensor_(DCC02DR2)
    56                          ;  Global Register values Bank 0
    57  2B7A  6A 00             	db		6ah, 00h		; ADCDataHigh register (ADC_DH)
    58  2B7C  6B 00             	db		6bh, 00h		; ADCDataLow register (ADC_DL)
    59  2B7E  60 09             	db		60h, 09h		; AnalogColumnInputSelect register (AMX_IN)
    60  2B80  66 00             	db		66h, 00h		; AnalogComparatorControl1 register (CMP_CR1)
    61  2B82  61 00             	db		61h, 00h		; AnalogMuxBusConfig register (AMUX_CFG)
    62  2B84  FC 00             	db		fch, 00h		; AnalogMuxDACData:0 register (IDACR_D)
    63  2B86  FD 00             	db		fdh, 00h		; AnalogMuxDACData:1 register (IDACL_D)
    64  2B88  65 00             	db		65h, 00h		; AnalogSynchronizationControl register (ASY_CR)
    65  2B8A  53 00             	db		53h, 00h		; CSD0Control0 register (CSD0_CR0)
    66  2B8C  57 00             	db		57h, 00h		; CSD0Control1 register (CSD0_CR1)
    67  2B8E  56 00             	db		56h, 00h		; CSD0CounterHigh register (CSD0_CNT_H)
    68  2B90  52 00             	db		52h, 00h		; CSD0CounterLow register (CSD0_CNT_L)
    69  2B92  54 00             	db		54h, 00h		; CSD0Data0High register (CSD0_DR0_H)
    70  2B94  50 00             	db		50h, 00h		; CSD0Data0Low register (CSD0_DR0_L)
    71  2B96  55 00             	db		55h, 00h		; CSD0Data1High register (CSD0_DR1_H)
    72  2B98  51 00             	db		51h, 00h		; CSD0Data1Low register (CSD0_DR1_L)
    73  2B9A  5B 00             	db		5bh, 00h		; CSD1Control0 register (CSD1_CR0)
    74  2B9C  5F 00             	db		5fh, 00h		; CSD1Control1 register (CSD1_CR1)
    75  2B9E  5E 00             	db		5eh, 00h		; CSD1CounterHigh register (CSD1_CNT_H)
    76  2BA0  5A 00             	db		5ah, 00h		; CSD1CounterLow register (CSD1_CNT_L)
    77  2BA2  5C 00             	db		5ch, 00h		; CSD1Data0High register (CSD1_DR0_H)
    78  2BA4  58 00             	db		58h, 00h		; CSD1Data0Low register (CSD1_DR0_L)
    79  2BA6  5D 00             	db		5dh, 00h		; CSD1Data1High register (CSD1_DR1_H)
    80  2BA8  59 00             	db		59h, 00h		; CSD1Data1Low register (CSD1_DR1_L)
    81  2BAA  E6 00             	db		e6h, 00h		; DecimatorControl_0 register (DEC_CR0)
    82  2BAC  E7 00             	db		e7h, 00h		; DecimatorControl_1 register (DEC_CR1)
    83  2BAE  E4 00             	db		e4h, 00h		; DecimatorDataHigh register (DEC_DH)
    84  2BB0  E5 00             	db		e5h, 00h		; DecimatorDataLow register (DEC_DL)
    85  2BB2  D6 00             	db		d6h, 00h		; I2CConfig register (I2CCFG)
    86  2BB4  CA 00             	db		cah, 00h		; IDACMode register (IDACMODE)
    87  2BB6  CB 00             	db		cbh, 00h		; PWMSource register (PWMSRC)
    88  2BB8  C8 00             	db		c8h, 00h		; PWMVoltageReference_0 register (PWMVREF0)
    89  2BBA  C9 00             	db		c9h, 00h		; PWMVoltageReference_1 register (PWMVREF1)
    90  2BBC  62 00             	db		62h, 00h		; PWM_Control register (PWM_CR)
    91  2BBE  B7 00             	db		b7h, 00h		; RowDigitalInterconnectInputSelect:0 register (RDI0DSM)
    92  2BC0  BF 00             	db		bfh, 00h		; RowDigitalInterconnectInputSelect:1 register (RDI1DSM)
    93  2BC2  B0 00             	db		b0h, 00h		; Row_0_InputMux register (RDI0RI)
    94  2BC4  B1 00             	db		b1h, 00h		; Row_0_InputSync register (RDI0SYN)
    95  2BC6  B2 00             	db		b2h, 00h		; Row_0_LogicInputAMux register (RDI0IS)
    96  2BC8  B3 33             	db		b3h, 33h		; Row_0_LogicSelect_0 register (RDI0LT0)
    97  2BCA  B4 33             	db		b4h, 33h		; Row_0_LogicSelect_1 register (RDI0LT1)
    98  2BCC  B5 01             	db		b5h, 01h		; Row_0_OutputDrive_0 register (RDI0SRO0)
    99  2BCE  B6 00             	db		b6h, 00h		; Row_0_OutputDrive_1 register (RDI0SRO1)
   100  2BD0  B8 55             	db		b8h, 55h		; Row_1_InputMux register (RDI1RI)
   101  2BD2  B9 00             	db		b9h, 00h		; Row_1_InputSync register (RDI1SYN)
   102  2BD4  BA 10             	db		bah, 10h		; Row_1_LogicInputAMux register (RDI1IS)
   103  2BD6  BB 33             	db		bbh, 33h		; Row_1_LogicSelect_0 register (RDI1LT0)
   104  2BD8  BC 33             	db		bch, 33h		; Row_1_LogicSelect_1 register (RDI1LT1)
   105  2BDA  BD 02             	db		bdh, 02h		; Row_1_OutputDrive_0 register (RDI1SRO0)
   106  2BDC  BE 10             	db		beh, 10h		; Row_1_OutputDrive_1 register (RDI1SRO1)
   107  2BDE  CD 00             	db		cdh, 00h		; TSCMPHigh register (TSCMPH)
   108  2BE0  CE 00             	db		ceh, 00h		; TSCMPLow register (TSCMPL)
   109  2BE2  CC 00             	db		cch, 00h		; TSource:0 register (TSCR0)
   110  2BE4  CF 00             	db		cfh, 00h		; TSource:1 register (TSCR1)
   111  2BE6  FF                	db		ffh
   112  2BE7                    LoadConfigTBL_led_display_Bank1:
   113                          ;  Instance name PWM8_BL, User Module PWM8
   114                          ;       Instance name PWM8_BL, Block Name PWM8(DBC10)
   115  2BE7  33 00             	db		33h, 00h		;PWM8_BL_(DBC10CR1)
   116  2BE9  30 21             	db		30h, 21h		;PWM8_BL_FUNC_REG(DBC10FN)
   117  2BEB  31 11             	db		31h, 11h		;PWM8_BL_INPUT_REG(DBC10IN)
   118  2BED  32 07             	db		32h, 07h		;PWM8_BL_OUTPUT_REG(DBC10OU)
   119                          ;  Instance name SAR10, User Module SAR10
   120                          ;  Instance name Timer16, User Module Timer16
   121                          ;       Instance name Timer16, Block Name TIMER16_LSB(DBC00)
   122  2BEF  23 00             	db		23h, 00h		;Timer16_(DBC00CR1)
   123  2BF1  20 00             	db		20h, 00h		;Timer16_FUNC_LSB_REG(DBC00FN)
   124  2BF3  21 01             	db		21h, 01h		;Timer16_INPUT_LSB_REG(DBC00IN)
   125  2BF5  22 40             	db		22h, 40h		;Timer16_OUTPUT_LSB_REG(DBC00OU)
   126                          ;       Instance name Timer16, Block Name TIMER16_MSB(DBC01)
   127  2BF7  27 00             	db		27h, 00h		;Timer16_(DBC01CR1)
   128  2BF9  24 20             	db		24h, 20h		;Timer16_FUNC_MSB_REG(DBC01FN)
   129  2BFB  25 31             	db		25h, 31h		;Timer16_INPUT_MSB_REG(DBC01IN)
   130  2BFD  26 40             	db		26h, 40h		;Timer16_OUTPUT_MSB_REG(DBC01OU)
   131                          ;  Instance name UART_Board, User Module UART
   132                          ;       Instance name UART_Board, Block Name RX(DCC13)
   133  2BFF  3F 00             	db		3fh, 00h		;UART_Board_(DCC13CR1)
   134  2C01  3C 05             	db		3ch, 05h		;UART_Board_RX_FUNC_REG   (DCC13FN)
   135  2C03  3D C1             	db		3dh, c1h		;UART_Board_RX_INPUT_REG  (DCC13IN)
   136  2C05  3E 40             	db		3eh, 40h		;UART_Board_RX_OUTPUT_REG (DCC13OU)
   137                          ;       Instance name UART_Board, Block Name TX(DCC12)
   138  2C07  3B 00             	db		3bh, 00h		;UART_Board_(DCC12CR1)
   139  2C09  38 1D             	db		38h, 1dh		;UART_Board_TX_FUNC_REG   (DCC12FN)
   140  2C0B  39 01             	db		39h, 01h		;UART_Board_TX_INPUT_REG  (DCC12IN)
   141  2C0D  3A 44             	db		3ah, 44h		;UART_Board_TX_OUTPUT_REG (DCC12OU)
   142                          ;  Instance name UART_Sensor, User Module UART
   143                          ;       Instance name UART_Sensor, Block Name RX(DCC03)
   144  2C0F  2F 00             	db		2fh, 00h		;UART_Sensor_(DCC03CR1)
   145  2C11  2C 05             	db		2ch, 05h		;UART_Sensor_RX_FUNC_REG   (DCC03FN)
   146  2C13  2D C1             	db		2dh, c1h		;UART_Sensor_RX_INPUT_REG  (DCC03IN)
   147  2C15  2E 40             	db		2eh, 40h		;UART_Sensor_RX_OUTPUT_REG (DCC03OU)
   148                          ;       Instance name UART_Sensor, Block Name TX(DCC02)
   149  2C17  2B 00             	db		2bh, 00h		;UART_Sensor_(DCC02CR1)
   150  2C19  28 1D             	db		28h, 1dh		;UART_Sensor_TX_FUNC_REG   (DCC02FN)
   151  2C1B  29 01             	db		29h, 01h		;UART_Sensor_TX_INPUT_REG  (DCC02IN)
   152  2C1D  2A 44             	db		2ah, 44h		;UART_Sensor_TX_OUTPUT_REG (DCC02OU)
   153                          ;  Global Register values Bank 1
   154  2C1F  A8 60             	db		a8h, 60h		; ADCControl0 register (ADC_CR0)
   155  2C21  A9 0A             	db		a9h, 0ah		; ADCControl1 register (ADC_CR1)
   156  2C23  AA 00             	db		aah, 00h		; ADCControl2 register (ADC_CR2)
   157  2C25  AB 00             	db		abh, 00h		; ADCControl3 register (ADC_CR3TRIM)
   158  2C27  AC 00             	db		ach, 00h		; ADCControl4 register (ADC_CR4)
   159  2C29  61 00             	db		61h, 00h		; AnalogClockSelect1 register (CLK_CR1)
   160  2C2B  69 00             	db		69h, 00h		; AnalogClockSelect2 register (CLK_CR2)
   161  2C2D  60 00             	db		60h, 00h		; AnalogColumnClockSelect register (CLK_CR0)
   162  2C2F  62 00             	db		62h, 00h		; AnalogIOControl_0 register (ABF_CR0)
   163  2C31  67 33             	db		67h, 33h		; AnalogLUTControl0 register (ALT_CR0)
   164  2C33  68 00             	db		68h, 00h		; AnalogLUTControl1 register (ALT_CR1)
   165  2C35  5F 00             	db		5fh, 00h		; CMPClock:0 register (CMPCLK0)
   166  2C37  5E 00             	db		5eh, 00h		; CMPClock:1 register (CMPCLK1)
   167  2C39  5B 02             	db		5bh, 02h		; CMPColumnMux register (CMPCOLMUX)
   168  2C3B  5D 00             	db		5dh, 00h		; CMPFilterControl register (CMPFLTCR)
   169  2C3D  5C 00             	db		5ch, 00h		; CMPPWMControl register (CMPPWMCR)
   170  2C3F  59 00             	db		59h, 00h		; CSCMOGlobalOutEnable register (CSCMPGOEN)
   171  2C41  58 00             	db		58h, 00h		; CSCMPControl:0 register (CSCMPCR0)
   172  2C43  5A 33             	db		5ah, 33h		; CSLUTControl register (CSLUTCR0)
   173  2C45  64 00             	db		64h, 00h		; ComparatorGlobalOutEn register (CMP_GO_EN)
   174  2C47  65 00             	db		65h, 00h		; ComparatorGlobalOutEn1 register (CMP_GO_EN1)
   175  2C49  FD 00             	db		fdh, 00h		; DAC_Control register (DAC_CR0)
   176  2C4B  DC 00             	db		dch, 00h		; DAC_Control_1 register (DAC_CR1)
   177  2C4D  D1 00             	db		d1h, 00h		; GlobalDigitalInterconnect_Drive_Even_Input register (GDI_E_IN)
   178  2C4F  A1 00             	db		a1h, 00h		; GlobalDigitalInterconnect_Drive_Even_Input_Control register (GDI_E_IN_CR)
   179  2C51  D3 00             	db		d3h, 00h		; GlobalDigitalInterconnect_Drive_Even_Output register (GDI_E_OU)
   180  2C53  A3 00             	db		a3h, 00h		; GlobalDigitalInterconnect_Drive_Even_Output_Control register (GDI_E_OU_CR)
   181  2C55  D0 00             	db		d0h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Input register (GDI_O_IN)
   182  2C57  A0 00             	db		a0h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Input_Control register (GDI_O_IN_CR)
   183  2C59  D2 00             	db		d2h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Output register (GDI_O_OU)
   184  2C5B  A2 00             	db		a2h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Output_Control register (GDI_O_OU_CR)
   185  2C5D  AD 00             	db		adh, 00h		; I2CAddress register (I2C_ADDR)
   186  2C5F  E1 7F             	db		e1h, 7fh		; OscillatorControl_1 register (OSC_CR1)
   187  2C61  E2 00             	db		e2h, 00h		; OscillatorControl_2 register (OSC_CR2)
   188  2C63  DF 26             	db		dfh, 26h		; OscillatorControl_3 register (OSC_CR3)
   189  2C65  DE 01             	db		deh, 01h		; OscillatorControl_4 register (OSC_CR4)
   190  2C67  DD 00             	db		ddh, 00h		; OscillatorGlobalBusEnableControl register (OSC_GO_EN)
   191  2C69  D8 00             	db		d8h, 00h		; Port_0_MUXBusCtrl register (MUX_CR0)
   192  2C6B  D9 00             	db		d9h, 00h		; Port_1_MUXBusCtrl register (MUX_CR1)
   193  2C6D  DA 00             	db		dah, 00h		; Port_2_MUXBusCtrl register (MUX_CR2)
   194  2C6F  DB 00             	db		dbh, 00h		; Port_3_MUXBusCtrl register (MUX_CR3)
   195  2C71  EC 00             	db		ech, 00h		; Port_4_MUXBusCtrl register (MUX_CR4)
   196  2C73  A7 00             	db		a7h, 00h		; RTClockControl register (RTCCR)
   197  2C75  A4 00             	db		a4h, 00h		; RTCurrentHour register (RTCH)
   198  2C77  A5 00             	db		a5h, 00h		; RTCurrentMinute register (RTCM)
   199  2C79  A6 00             	db		a6h, 00h		; RTCurrentSecond register (RTCS)
   200  2C7B  53 00             	db		53h, 00h		; VDAC5Control0:0 register (VDAC50CR0)
   201  2C7D  57 00             	db		57h, 00h		; VDAC5Control0:1 register (VDAC51CR0)
   202  2C7F  E7 00             	db		e7h, 00h		; VDACTrim register (VDAC_TRIM)
   203  2C81  FF                	db		ffh
   204                          AREA psoc_config(rom, rel)
   205  3E14                    LoadConfigTBL_led_display_Ordered:
   206                          ;  Ordered Global Register values
   207  3E14  70 EF             	M8C_SetBank0
   208  3E16  62 00 EE          	mov	reg[00h], eeh		; Port_0_Data register (PRT0DR)
   209  3E19  71 10             	M8C_SetBank1
   210  3E1B  62 00 FE          	mov	reg[00h], feh		; Port_0_DriveMode_0 register (PRT0DM0)
   211  3E1E  62 01 01          	mov	reg[01h], 01h		; Port_0_DriveMode_1 register (PRT0DM1)
   212  3E21  70 EF             	M8C_SetBank0
   213  3E23  62 03 00          	mov	reg[03h], 00h		; Port_0_DriveMode_2 register (PRT0DM2)
   214  3E26  62 02 11          	mov	reg[02h], 11h		; Port_0_GlobalSelect register (PRT0GS)
   215  3E29  71 10             	M8C_SetBank1
   216  3E2B  62 02 00          	mov	reg[02h], 00h		; Port_0_IntCtrl_0 register (PRT0IC0)
   217  3E2E  62 03 00          	mov	reg[03h], 00h		; Port_0_IntCtrl_1 register (PRT0IC1)
   218  3E31  70 EF             	M8C_SetBank0
   219  3E33  62 01 00          	mov	reg[01h], 00h		; Port_0_IntEn register (PRT0IE)
   220  3E36  62 04 A0          	mov	reg[04h], a0h		; Port_1_Data register (PRT1DR)
   221  3E39  71 10             	M8C_SetBank1
   222  3E3B  62 04 A0          	mov	reg[04h], a0h		; Port_1_DriveMode_0 register (PRT1DM0)
   223  3E3E  62 05 FF          	mov	reg[05h], ffh		; Port_1_DriveMode_1 register (PRT1DM1)
   224  3E41  70 EF             	M8C_SetBank0
   225  3E43  62 07 FF          	mov	reg[07h], ffh		; Port_1_DriveMode_2 register (PRT1DM2)
   226  3E46  62 06 00          	mov	reg[06h], 00h		; Port_1_GlobalSelect register (PRT1GS)
   227  3E49  71 10             	M8C_SetBank1
   228  3E4B  62 06 00          	mov	reg[06h], 00h		; Port_1_IntCtrl_0 register (PRT1IC0)
   229  3E4E  62 07 00          	mov	reg[07h], 00h		; Port_1_IntCtrl_1 register (PRT1IC1)
   230  3E51  70 EF             	M8C_SetBank0
   231  3E53  62 05 00          	mov	reg[05h], 00h		; Port_1_IntEn register (PRT1IE)
   232  3E56  62 08 00          	mov	reg[08h], 00h		; Port_2_Data register (PRT2DR)
   233  3E59  71 10             	M8C_SetBank1
   234  3E5B  62 08 09          	mov	reg[08h], 09h		; Port_2_DriveMode_0 register (PRT2DM0)
   235  3E5E  62 09 F6          	mov	reg[09h], f6h		; Port_2_DriveMode_1 register (PRT2DM1)
   236  3E61  70 EF             	M8C_SetBank0
   237  3E63  62 0B E6          	mov	reg[0bh], e6h		; Port_2_DriveMode_2 register (PRT2DM2)
   238  3E66  62 0A 19          	mov	reg[0ah], 19h		; Port_2_GlobalSelect register (PRT2GS)
   239  3E69  71 10             	M8C_SetBank1
   240  3E6B  62 0A 00          	mov	reg[0ah], 00h		; Port_2_IntCtrl_0 register (PRT2IC0)
   241  3E6E  62 0B 00          	mov	reg[0bh], 00h		; Port_2_IntCtrl_1 register (PRT2IC1)
   242  3E71  70 EF             	M8C_SetBank0
   243  3E73  62 09 00          	mov	reg[09h], 00h		; Port_2_IntEn register (PRT2IE)
   244  3E76  62 0C 00          	mov	reg[0ch], 00h		; Port_3_Data register (PRT3DR)
   245  3E79  71 10             	M8C_SetBank1
   246  3E7B  62 0C 00          	mov	reg[0ch], 00h		; Port_3_DriveMode_0 register (PRT3DM0)
   247  3E7E  62 0D 00          	mov	reg[0dh], 00h		; Port_3_DriveMode_1 register (PRT3DM1)
   248  3E81  70 EF             	M8C_SetBank0
   249  3E83  62 0F 00          	mov	reg[0fh], 00h		; Port_3_DriveMode_2 register (PRT3DM2)
   250  3E86  62 0E 00          	mov	reg[0eh], 00h		; Port_3_GlobalSelect register (PRT3GS)
   251  3E89  71 10             	M8C_SetBank1
   252  3E8B  62 0E 00          	mov	reg[0eh], 00h		; Port_3_IntCtrl_0 register (PRT3IC0)
   253  3E8E  62 0F 00          	mov	reg[0fh], 00h		; Port_3_IntCtrl_1 register (PRT3IC1)
   254  3E91  70 EF             	M8C_SetBank0
   255  3E93  62 0D 00          	mov	reg[0dh], 00h		; Port_3_IntEn register (PRT3IE)
   256  3E96  62 10 00          	mov	reg[10h], 00h		; Port_4_Data register (PRT4DR)
   257  3E99  71 10             	M8C_SetBank1
   258  3E9B  62 10 00          	mov	reg[10h], 00h		; Port_4_DriveMode_0 register (PRT4DM0)
   259  3E9E  62 11 00          	mov	reg[11h], 00h		; Port_4_DriveMode_1 register (PRT4DM1)
   260  3EA1  70 EF             	M8C_SetBank0
   261  3EA3  62 13 00          	mov	reg[13h], 00h		; Port_4_DriveMode_2 register (PRT4DM2)
   262  3EA6  62 12 00          	mov	reg[12h], 00h		; Port_4_GlobalSelect register (PRT4GS)
   263  3EA9  71 10             	M8C_SetBank1
   264  3EAB  62 12 00          	mov	reg[12h], 00h		; Port_4_IntCtrl_0 register (PRT4IC0)
   265  3EAE  62 13 00          	mov	reg[13h], 00h		; Port_4_IntCtrl_1 register (PRT4IC1)
   266  3EB1  70 EF             	M8C_SetBank0
   267  3EB3  62 11 00          	mov	reg[11h], 00h		; Port_4_IntEn register (PRT4IE)
   268  3EB6  70 EF             	M8C_SetBank0
   269  3EB8  7F                	ret
HI-TECH Software Macro Assembler (PSoC MCU) V9.61
Symbol Table                                                                                               Fri Jun 12 09:25:10 2015
  LoadConfigTBL_led_display_Bank0 2B50    LoadConfigTBL_led_display_Bank1 2BE7  LoadConfigTBL_led_display_Ordered 3E14  
                    FLAG_XIO_MASK 0010  
HI-TECH Software Macro Assembler (PSoC MCU) V9.61
                                                                                                           Fri Jun 12 09:25:10 2015
     1                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     2                          ;;;
     3                          ;;;  M8C.INC -- Microcontroller Device System Declarations
     4                          ;;;
     5                          ;;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
     6                          ;;;
     7                          ;;;  This file provides address constants, bit field masks and a set of macro
     8                          ;;;  facilities for the Cypress Semiconductor CY8C22045 Microcontroller devices.
     9                          ;;;
    10                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    11                          
    12                          ;;=============================================================================
    13                          ;; Definition of abbreviations used in the descriptions below
    14                          ;;  (RW)   The register or bit supports reads and writes
    15                          ;;  (W)    The register or bit is write-only
    16                          ;;  (R)    The register or bit is read-only
    17                          ;;  (#)    Access to the register is bit specific (see the family datasheet)
    18                          ;;  (RC)   The register or bit can be read, but writing a 0 will clear it,
    19                          ;;         writing a 1 will have no effect.
    20                          ;;=============================================================================
    21                          
    22                          ;;=============================================================================
    23                          ;;      System Registers
    24                          ;;=============================================================================
    25                          
    26                          ;----------------------------
    27                          ;  Flag Register Bit Fields
    28                          ;----------------------------
    29  00C0                    FLAG_PGMODE_MASK:  equ 0C0h     ; Paging control for > 256 bytes of RAM
    30  0000                    FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
    31  0040                    FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
    32  0080                    FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
    33  00C0                    FLAG_PGMODE_3:     equ 0C0h       ; Direct to CUR_PP page, indexed to STK_PP page
    34  0000                    FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
    35  0040                    FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
    36  0080                    FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
    37  00C0                    FLAG_PGMODE_11b:   equ 0C0h       ; Same as PGMODE_3
    38  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    39  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    40  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    41  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    42  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    43                          
    44                          
    45                          ;;=============================================================================
    46                          ;;      Register Space, Bank 0
    47                          ;;=============================================================================
    48                          
    49                          ;------------------------------------------------
    50                          ;  Port Registers
    51                          ;  Note: Also see this address range in Bank 1.
    52                          ;------------------------------------------------
    53                          ; Port 0
    54  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    55  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    56  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    57  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    58                          ; Port 1
    59  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    60  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    61  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    62  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    63                          ; Port 2
    64  0008                    PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
    65  0009                    PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
    66  000A                    PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
    67  000B                    PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
    68                          ; Port 3
    69  000C                    PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
    70  000D                    PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
    71  000E                    PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
    72  000F                    PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
    73                          ; Port 4
    74  0010                    PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
    75  0011                    PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
    76  0012                    PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
    77  0013                    PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
    78                          
    79                          ;------------------------------------------------
    80                          ;  Digital PSoC(tm) block Registers
    81                          ;  Note: Also see this address range in Bank 1.
    82                          ;------------------------------------------------
    83                          ; Digital PSoC block 00, Basic Type C
    84  0020                    DBC00DR0:     equ 20h          ; data register 0                          (#)
    85  0021                    DBC00DR1:     equ 21h          ; data register 1                          (W)
    86  0022                    DBC00DR2:     equ 22h          ; data register 2                          (RW)
    87  0023                    DBC00CR0:     equ 23h          ; control & status register 0              (#)
    88                          
    89                          ; Digital PSoC block 01, Basic Type C
    90  0024                    DBC01DR0:     equ 24h          ; data register 0                          (#)
    91  0025                    DBC01DR1:     equ 25h          ; data register 1                          (W)
    92  0026                    DBC01DR2:     equ 26h          ; data register 2                          (RW)
    93  0027                    DBC01CR0:     equ 27h          ; control & status register 0              (#)
    94                          
    95                          ; Digital PSoC block 02, Communications Type C
    96  0028                    DCC02DR0:     equ 28h          ; data register 0                          (#)
    97  0029                    DCC02DR1:     equ 29h          ; data register 1                          (W)
    98  002A                    DCC02DR2:     equ 2Ah          ; data register 2                          (RW)
    99  002B                    DCC02CR0:     equ 2Bh          ; control & status register 0              (#)
   100                          
   101                          ; Digital PSoC block 03, Communications Type C
   102  002C                    DCC03DR0:     equ 2Ch          ; data register 0                          (#)
   103  002D                    DCC03DR1:     equ 2Dh          ; data register 1                          (W)
   104  002E                    DCC03DR2:     equ 2Eh          ; data register 2                          (RW)
   105  002F                    DCC03CR0:     equ 2Fh          ; control & status register 0              (#)
   106                          
   107                          ; Digital PSoC block 10, Basic Type C
   108  0030                    DBC10DR0:     equ 30h          ; data register 0                          (#)
   109  0031                    DBC10DR1:     equ 31h          ; data register 1                          (W)
   110  0032                    DBC10DR2:     equ 32h          ; data register 2                          (RW)
   111  0033                    DBC10CR0:     equ 33h          ; control & status register 0              (#)
   112                          
   113                          ; Digital PSoC block 11, Basic Type C
   114  0034                    DBC11DR0:     equ 34h          ; data register 0                          (#)
   115  0035                    DBC11DR1:     equ 35h          ; data register 1                          (W)
   116  0036                    DBC11DR2:     equ 36h          ; data register 2                          (RW)
   117  0037                    DBC11CR0:     equ 37h          ; control & status register 0              (#)
   118                          
   119                          ; Digital PSoC block 12, Communications Type C
   120  0038                    DCC12DR0:     equ 38h          ; data register 0                          (#)
   121  0039                    DCC12DR1:     equ 39h          ; data register 1                          (W)
   122  003A                    DCC12DR2:     equ 3Ah          ; data register 2                          (RW)
   123  003B                    DCC12CR0:     equ 3Bh          ; control & status register 0              (#)
   124                          
   125                          ; Digital PSoC block 13, Communications Type C
   126  003C                    DCC13DR0:     equ 3Ch          ; data register 0                          (#)
   127  003D                    DCC13DR1:     equ 3Dh          ; data register 1                          (W)
   128  003E                    DCC13DR2:     equ 3Eh          ; data register 2                          (RW)
   129  003F                    DCC13CR0:     equ 3Fh          ; control & status register 0              (#)
   130                          
   131                          ;-------------------------------------
   132                          ;  Analog Control Registers
   133                          ;-------------------------------------
   134  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
   135  00C0                    AMX_IN_ACI3:          equ C0h    ; MASK: column 3 input mux
   136  0030                    AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
   137  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
   138  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
   139                          
   140  0061                    AMUX_CFG:      equ 61h          ; Analog MUX Configuration
   141  0030                    AMUX_CFG_INTCAP:       equ 30h    ;
   142  000E                    AMUX_CFG_MUXCLK:  	  equ 0Eh	 ;
   143  0001                    AMUX_CFG_EN:		  	  equ 01h	 ;
   144                          
   145                          ; old declarations DO NOT USE
   146  0061                    AMUXCFG:      equ 61h          ; Analog MUX Configuration
   147  0030                    AMUXCFG_INTCAP:       equ 30h    ;
   148  000E                    AMUXCFG_MUXCLK:  	  equ 0Eh	 ;
   149  0001                    AMUXCFG_EN:		  	  equ 01h	 ;
   150                          
   151  0062                    PWM_CR:       equ 62h          ; Pulse-Width Modulator Control
   152  0038                    PWM_CR_HIGH:          equ 38h    ; MASK: PWM high time
   153  0006                    PWM_CR_LOW:           equ 06h	 ; MASK: PWM low time
   154  0001                    PWM_CR_EN:            equ 01h	 ; MASK: Enable/Disable PWM function
   155                          
   156  0063                    ARF_CR:       equ 63h          ; Analog Reference Control
   157                          
   158  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus Register           (#)
   159  0080                    CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
   160  0040                    CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
   161  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
   162  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
   163  0008                    CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
   164  0004                    CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
   165  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
   166  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   167                          
   168  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   169  0020                    CMP_CR1_CLDIS1:       equ 20h    ; MASK: Column 1 comparator output latch
   170  0010                    CMP_CR1_CLDIS0:	      equ 10h    ; MASK: Column 0 comparator output latch
   171                          
   172  0068                    ADC0_CR:      equ 68h          ; Analog Column 0 Configuration
   173  0080                    ADC0_CR_CMPST:        equ 80h    ;
   174  0040                    ADC0_CR_LOREN:        equ 40h    ;
   175  0020                    ADC0_CR_SHEN:         equ 20h    ;
   176  0008                    ADC0_CR_CBSRC:        equ 08h    ;
   177  0004                    ADC0_CR_ADCM:         equ 04h    ;
   178  0001                    ADC0_CR_EN:	          equ 01h    ;
   179                          
   180  0069                    ADC1_CR:      equ 69h          ; Analog Column 1 Configuration
   181  0080                    ADC1_CR_CMPST:        equ 80h    ;
   182  0040                    ADC1_CR_LOREN:        equ 40h    ;
   183  0020                    ADC1_CR_SHEN:         equ 20h    ;
   184  0008                    ADC1_CR_CBSRC:        equ 08h    ;
   185  0004                    ADC1_CR_ADCM:         equ 04h    ;
   186  0001                    ADC1_CR_EN:	          equ 01h    ;
   187                          
   188                          ; Continuous Time PSoC block Type E Row 0 Col 0
   189  0072                    ACE00CR1:     equ 72h          ; Control register 1                       (RW)
   190  0073                    ACE00CR2:     equ 73h          ; Control register 2                       (RW)
   191                          
   192                          ; Continuous Time PSoC block Type E Row 0 Col 1
   193  0076                    ACE01CR1:     equ 76h          ; Control register 1                       (RW)
   194  0077                    ACE01CR2:     equ 77h          ; Control register 2                       (RW)
   195                          
   196                          ; Switched Cap PSoC blockType E Row 1 Col 0
   197  0080                    ASE10CR0:     equ 80h          ; Control register 0                       (RW)
   198                          
   199                          ; Switched Cap PSoC blockType E Row 1 Col 1
   200  0084                    ASE11CR0:     equ 84h          ; Control register 0                       (RW)
   201                          
   202                          ;-----------------------------------------------
   203                          ;  Global General Purpose Data Registers
   204                          ;-----------------------------------------------
   205  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   206  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   207  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   208  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   209                          
   210                          ;------------------------------------------------
   211                          ;  Row Digital Interconnects
   212                          ;
   213                          ;  Note: the following registers are mapped into
   214                          ;  both register bank 0 AND register bank 1.
   215                          ;------------------------------------------------
   216                          
   217  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   218  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   219  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   220  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   221  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   222  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   223  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   224                          
   225  00B8                    RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
   226  00B9                    RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
   227  00BA                    RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
   228  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   229  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   230  00BD                    RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
   231  00BE                    RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
   232                          
   233                          ;-----------------------------------------------
   234                          ;  Ram Page Pointers
   235                          ;-----------------------------------------------
   236  00D0                    CUR_PP:      equ 0D0h           ; Current   Page Pointer
   237  00D1                    STK_PP:      equ 0D1h           ; Stack     Page Pointer
   238  00D3                    IDX_PP:      equ 0D3h           ; Index     Page Pointer
   239  00D4                    MVR_PP:      equ 0D4h           ; MVI Read  Page Pointer
   240  00D5                    MVW_PP:      equ 0D5h           ; MVI Write Page Pointer
   241                          
   242                          ;------------------------------------------------
   243                          ;  I2C Configuration Registers
   244                          ;------------------------------------------------
   245  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   246  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   247  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   248  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   249  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   250  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   251  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   252  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   253  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   254  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   255                          
   256  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   257  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   258  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   259  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   260  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   261  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   262  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   263  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   264  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   265                          
   266  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   267                          
   268  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   269  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   270  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   271  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   272  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   273                          
   274                          ;------------------------------------------------
   275                          ;  System and Global Resource Registers
   276                          ;------------------------------------------------
   277  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   278                                                         ; Use INT_MSK0 bit field masks
   279  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   280                                                         ; Use INT_MSK1 bit field masks
   281  00DC                    INT_CLR2:     equ 0DCh          ; Interrupt Clear Register 2               (RW)
   282                                                         ; Use INT_MSK2 bit field masks
   283  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   284                                                         ; Use INT_MSK3 bit field masks
   285                          
   286  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   287  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   288  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   289                          
   290  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   291  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   292  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   293  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   294  0010                    INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
   295  0008                    INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
   296  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   297  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   298  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   299                          
   300  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   301  0080                    INT_MSK1_DCC13:            equ 80h ; MASK: enable/disable DCC13 block interrupt
   302  0040                    INT_MSK1_DCC12:            equ 40h ; MASK: enable/disable DCC12 block interrupt
   303  0020                    INT_MSK1_DBC11:            equ 20h ; MASK: enable/disable DBC11 block interrupt
   304  0010                    INT_MSK1_DBC10:            equ 10h ; MASK: enable/disable DBC10 block interrupt
   305+ 0008                    INT_MSK1_DCC03:            equ 08h ; MASK: enable/disable DCC03 block interrupt
   306  0004                    INT_MSK1_DCC02:            equ 04h ; MASK: enable/disable DCC02 block interrupt
   307  0002                    INT_MSK1_DBC01:            equ 02h ; MASK: enable/disable DBC01 block interrupt
   308  0001                    INT_MSK1_DBC00:            equ 01h ; MASK: enable/disable DBC00 block interrupt
   309                          
   310  00DF                    INT_MSK2:     equ DFh			; Custom block Mask Register			   (RW)
   311  0010                    INT_MSK2_SARADC:           equ 10h ; MASK: enable/disable SARADC block interrupt
   312  0020                    INT_MSK2_CSD0:             equ 20h ; MASK: enable/disable CSD0 block interrupt
   313  0040                    INT_MSK2_CSD1:             equ 40h ; MASK: enable/disable CSD1 block interrupt
   314  0080                    INT_MSK2_RTC:              equ 80h ; MASK: enable/disable RTC block interrupt
   315                          
   316  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   317  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   318                          
   319                          ;------------------------------------------------------
   320                          ;  MAC Registers
   321                          ;------------------------------------------------------
   322                          
   323  00E8                    MUL0_X:       equ 0E8h          ; Multiply Input X Register                (W)
   324  00E9                    MUL0_Y:       equ 0E9h          ; Multiply Input Y Register                (W)
   325  00EA                    MUL0_DH:      equ 0EAh          ; Multiply Result High Byte Register       (R)
   326  00EB                    MUL0_DL:      equ 0EBh          ; Multiply Result Low Byte Register        (R)
   327                          
   328  00EC                    ACC0_DR1:     equ 0ECh          ; Accumulator Data Register 1              (RW)
   329+ 00ED                    ACC0_DR0:     equ 0EDh          ; Accumulator Data Register 0              (RW)
   330+ 00EE                    ACC0_DR3:     equ 0EEh          ; Accumulator Data Register 3              (RW)
   331  00EF                    ACC0_DR2:     equ 0EFh          ; Accumulator Data Register 2              (RW)
   332                          
   333                          ; DECIMATOR Control Registers
   334  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   335  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   336                          
   337                          ;------------------------------------------------------
   338                          ;  System Status and Control Registers
   339                          ;
   340                          ;  Note: The following registers are mapped into both
   341                          ;        register bank 0 AND register bank 1.
   342                          ;------------------------------------------------------
   343  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   344                                                             ; Use FLAG_ masks defined at top of file
   345                          
   346  00FD                    DAC_D:        equ 0FDh		   ; DAC Data Register                        (RW)
   347                          
   348  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   349  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: flag, Internal Reset Status bit
   350  0010                    CPU_SCR1_SLIMO:         equ 10h	   ; MASK: Slow IMO (internal main osc) enable
   351  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   352  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   353  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   354                          
   355  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   356  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   357  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   358  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   359  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   360  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   361                          
   362                          ;------------------------------------------------------
   363                          ;  Neon Capsense Digital Control Registers
   364                          ;------------------------------------------------------
   365  0050                    CSD0_DR0_L:				equ 50h		; Capsense 0 data low 0				(RW)
   366  0054                    CSD0_DR0_H:				equ 54h		; Capsense 0 data high 0			(RW)
   367  0058                    CSD1_DR0_L:				equ 58h		; Capsense 1 data low 0				(RW)
   368  005C                    CSD1_DR0_H:				equ 5Ch		; Capsense 1 data high 0			(RW)
   369  0051                    CSD0_DR1_L:				equ 51h		; Capsense 0 data low 1				(RW)
   370  0055                    CSD0_DR1_H:				equ 55h		; Capsense 0 data high 1			(RW)
   371  0059                    CSD1_DR1_L:				equ 59h		; Capsense 1 data low 1				(RW)
   372  005D                    CSD1_DR1_H:				equ 5Dh		; Capsense 1 data high 1			(RW)
   373  0052                    CSD0_CNT_L:				equ 52h		; Capsense 0 counter low			(RW)
   374  0056                    CSD0_CNT_H:				equ 56h		; Capsense 0 counter high			(RW)
   375  005A                    CSD1_CNT_L:				equ 5Ah		; Capsense 1 counter low			(RW)
   376  005E                    CSD1_CNT_H:				equ	5Eh		; Capsense 1 counter high			(RW)
   377  0053                    CSD0_CR0:				equ 53h		; Capsense 0 control 0				(RW)
   378  005B                    CSD1_CR0:				equ 5Bh		; Capsense 1 control 0				(RW)
   379  0057                    CSD0_CR1:				equ 57h		; Capsense 0 control 1				(RW)
   380  005F                    CSD1_CR1:				equ 5Fh		; Capsense 1 control 1				(RW)
   381                          
   382                          ;------------------------------------------------------
   383                          ;  Neon Analog Registers
   384                          ;------------------------------------------------------
   385  0065                    ASY_CR:					equ 65h		; Analog Synchronization Control	(RW)
   386  006A                    ADC_DH:					equ 6Ah		; ADC data high						(RW)
   387  006B                    ADC_DL:					equ 6Bh		; ADC data low						(RW)
   388  00C8                    PWMVREF0:				equ C8h		; PWM Voltage Reference 0			(RW)
   389  00C9                    PWMVREF1:				equ C9h		; PWM Voltage Reference 1			(RW)
   390  00CB                    PWMSRC:					equ CBh		; PWM Source						(RW)
   391  00CA                    IDACMODE:				equ CAh		; IDAC Mode							(RW)
   392  00FC                    IDACR_D:				equ FCh		; Analog Mux DAC data 0				(RW)
   393  00FD                    IDACL_D:				equ FDh		; Analog Mux DAC data 1				(RW)
   394                          
   395                          ;------------------------------------------------------
   396                          ;  Neon Digital Registers
   397                          ;------------------------------------------------------
   398  00B7                    RDI0DSM:				equ B7h		; Row Digital Interconnect input select 0	(RW)
   399  00BF                    RDI1DSM:				equ BFh		; Row Digital Interconnect input select 1	(RW)
   400                          
   401                          ;------------------------------------------------------
   402                          ;  Neon Test Registers
   403                          ;------------------------------------------------------
   404  00CC                    TSCR0:					equ CCh		; Tsource 0							(RW)
   405  00CD                    TSCMPH:					equ CDh		; TSCMP high						(RW)
   406  00CE                    TSCMPL:					equ CEh		; TSCMP low							(RW)
   407  00CF                    TSCR1:					equ CFh		; Tsource 1							(RW)
   408                          
   409                          ;;=============================================================================
   410                          ;;      Register Space, Bank 1
   411                          ;;=============================================================================
   412                          
   413                          ;------------------------------------------------
   414                          ;  Port Registers
   415                          ;  Note: Also see this address range in Bank 0.
   416                          ;------------------------------------------------
   417                          ; Port 0
   418  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   419  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   420  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   421  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   422                          
   423                          ; Port 1
   424  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   425  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   426  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   427  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   428                          
   429                          ; Port 2
   430  0008                    PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
   431  0009                    PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
   432  000A                    PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
   433  000B                    PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
   434                          
   435                          ; Port 3
   436  000C                    PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
   437  000D                    PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
   438  000E                    PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
   439  000F                    PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
   440                          
   441                          ; Port 4
   442  0010                    PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
   443  0011                    PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
   444  0012                    PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
   445  0013                    PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
   446                          
   447                          ;------------------------------------------------
   448                          ;  Digital PSoC(tm) block Registers
   449                          ;  Note: Also see this address range in Bank 0.
   450                          ;------------------------------------------------
   451                          
   452                          ; Digital PSoC block 00, Basic Type C
   453  0020                    DBC00FN:      equ 20h          ; Function Register                        (RW)
   454  0021                    DBC00IN:      equ 21h          ;    Input Register                        (RW)
   455  0022                    DBC00OU:      equ 22h          ;   Output Register                        (RW)
   456  0023                    DBC00CR1:     equ 23h          ;   control & status register 1            (RW)
   457                          
   458                          ; Digital PSoC block 01, Basic Type C
   459  0024                    DBC01FN:      equ 24h          ; Function Register                        (RW)
   460  0025                    DBC01IN:      equ 25h          ;    Input Register                        (RW)
   461  0026                    DBC01OU:      equ 26h          ;   Output Register                        (RW)
   462  0027                    DBC01CR1:     equ 27h          ;   control & status register 1            (RW)
   463                          
   464                          ; Digital PSoC block 02, Communications Type C
   465  0028                    DCC02FN:      equ 28h          ; Function Register                        (RW)
   466  0029                    DCC02IN:      equ 29h          ;    Input Register                        (RW)
   467  002A                    DCC02OU:      equ 2Ah          ;   Output Register                        (RW)
   468  002B                    DBC02CR1:     equ 2Bh          ;   control & status register 1            (RW)
   469                          
   470                          ; Digital PSoC block 03, Communications Type C
   471  002C                    DCC03FN:      equ 2Ch          ; Function Register                        (RW)
   472  002D                    DCC03IN:      equ 2Dh          ;    Input Register                        (RW)
   473  002E                    DCC03OU:      equ 2Eh          ;   Output Register                        (RW)
   474  0029                    DBC03CR1:     equ 29h          ;   control & status register 1            (RW)
   475                          
   476                          ; Digital PSoC block 10, Basic Type C
   477  0030                    DBC10FN:      equ 30h          ; Function Register                        (RW)
   478  0031                    DBC10IN:      equ 31h          ;    Input Register                        (RW)
   479  0032                    DBC10OU:      equ 32h          ;   Output Register                        (RW)
   480  0033                    DBC10CR1:     equ 33h          ;   control & status register 1            (RW)
   481                          
   482                          ; Digital PSoC block 11, Basic Type C
   483  0034                    DBC11FN:      equ 34h          ; Function Register                        (RW)
   484  0035                    DBC11IN:      equ 35h          ;    Input Register                        (RW)
   485  0036                    DBC11OU:      equ 36h          ;   Output Register                        (RW)
   486  0037                    DBC11CR1:     equ 37h          ;   control & status register 1            (RW)
   487                          
   488                          ; Digital PSoC block 12, Communications Type C
   489  0038                    DCC12FN:      equ 38h          ; Function Register                        (RW)
   490  0039                    DCC12IN:      equ 39h          ;    Input Register                        (RW)
   491  003A                    DCC12OU:      equ 3Ah          ;   Output Register                        (RW)
   492  003B                    DBC12CR1:     equ 3Bh          ;   control & status register 1            (RW)
   493                          
   494                          ; Digital PSoC block 13, Communications Type C
   495  003C                    DCC13FN:      equ 3Ch          ; Function Register                        (RW)
   496  003D                    DCC13IN:      equ 3Dh          ;    Input Register                        (RW)
   497  003E                    DCC13OU:      equ 3Eh          ;   Output Register                        (RW)
   498  003F                    DBC13CR1:     equ 3Fh          ;   control & status register 1            (RW)
   499                          
   500                          ;------------------------------------------------
   501                          ;  System and Global Resource Registers
   502                          ;  Note: Also see this address range in Bank 0.
   503                          ;------------------------------------------------
   504                          
   505  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   506  00C0                    CLK_CR0_ACOLUMN_3:    equ C0h    ; MASK: Specify clock for analog cloumn
   507  0030                    CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
   508  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   509  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   510                          
   511  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   512  0018                    CLK_CR1_ACLK1:        equ 18h    ; MASK: Digital PSoC block for analog source
   513  0003                    CLK_CR1_ACLK0:        equ 03h    ; MASK: Digital PSoC block for analog source
   514                          
   515  0003                    CLK_CR1_ACLK2:        equ 03h    ; Deprecated do not use
   516                          
   517  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   518  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   519                          
   520  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   521  000F                    AMD_CR0_AMOD0:        equ 0Fh    ; MASK: Modulation source for analog column 0
   522                          
   523  0064                    CMP_GO_EN:    equ 64h          ; Comparator Bus To Global Out Enable      (RW)
   524  0080                    CMP_GO_EN_GOO5:       equ 80h    ; MASK: Selected Col 1 signal to GOO5
   525  0040                    CMP_GO_EN_GOO1:       equ 40h    ; MASK: Selected Col 1 signal to GOO1
   526  0030                    CMP_GO_EN_SEL1:       equ 30h    ; MASK: Column 1 Signal Select
   527  0008                    CMP_GO_EN_GOO4:       equ 08h    ; MASK: Selected Col 0 signal to GOO4
   528  0004                    CMP_GO_EN_GOO0:       equ 04h    ; MASK: Selected Col 0 signal to GOO0
   529  0003                    CMP_GO_EN_SEL0:       equ 03h    ; MASK: Column 0 Signal Select
   530                          
   531  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   532  000F                    AMD_CR1_AMOD1:        equ 0Fh    ; MASK: Modulation ctrl for analog column 1
   533                          
   534  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   535  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   536  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   537                          
   538  006B                    CLK_CR3:      equ 6Bh          ; Analog Clock Source Control Register 3   (RW)
   539  0040                    CLK_CR3_SYS1:         equ 40h    ; MASK: Analog Clock 1 selection
   540  0030                    CLK_CR3_DIVCLK1:      equ 30h    ; MASK: Analog Clock 1 divider
   541  0004                    CLK_CR3_SYS0:         equ 04h    ; MASK: Analog Clock 0 selection
   542  0003                    CLK_CR3_DIVCLK0:      equ 03h    ; MASK: Analog Clock 0 divider
   543                          
   544                          ;------------------------------------------------
   545                          ;  Global Digital Interconnects
   546                          ;------------------------------------------------
   547                          
   548  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   549  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   550  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   551  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   552                          
   553  00A0                    GDI_O_IN_CR:  equ 0A0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   554  00A1                    GDI_E_IN_CR:  equ 0A1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   555  00A2                    GDI_O_OU_CR:  equ 0A2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   556  00A3                    GDI_E_OU_CR:  equ 0A3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   557                          
   558  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   559  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   560                          
   561                          ;------------------------------------------------
   562                          ;  Analog Mux Bus Port Enable Bits
   563                          ;------------------------------------------------
   564  00D8                    MUX_CR0:      equ 0D8h          ; Analog Mux Port 0 Bit Enables Register
   565  00D9                    MUX_CR1:      equ 0D9h          ; Analog Mux Port 1 Bit Enables Register
   566  00DA                    MUX_CR2:      equ 0DAh          ; Analog Mux Port 2 Bit Enables Register
   567  00DB                    MUX_CR3:      equ 0DBh          ; Analog Mux Port 3 Bit Enables Register
   568  00EC                    MUX_CR4:      equ 0ECh          ; Analog Mux Port 4 Bit Enables Register
   569                          
   570                          ;------------------------------------------------
   571                          ;  Clock and System Control Registers
   572                          ;------------------------------------------------
   573                          
   574  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   575  0080                    OSC_GO_EN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   576  0040                    OSC_GO_EN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   577  0020                    OSC_GO_EN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   578  0010                    OSC_GO_EN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   579  0008                    OSC_GO_EN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   580  0004                    OSC_GO_EN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   581  0002                    OSC_GO_EN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   582  0001                    OSC_GO_EN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   583                          
   584  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   585  0003                    OSC_CR4_VC3SEL:       equ 03h    ; MASK: System VC3 Clock source
   586                          
   587  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   588                          
   589  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   590  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   591  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   592  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   593  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   594  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   595  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   596  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   597  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   598  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   599  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   600  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   601  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   602  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   603  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   604  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   605  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   606  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   607                          
   608  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   609  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   610  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   611                          
   612  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   613  0080                    OSC_CR2_PLLGAIN:      equ 80h    ; MASK: High/Low gain
   614  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   615  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   616  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   617                          
   618  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   619  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   620  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   621  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   622  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   623  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   624  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   625  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   626                          
   627  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   628  0008                    VLT_CMP_NOWRITE:      equ 08h    ; MASK: Vcc below Flash Write level
   629  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   630  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   631  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   632                          
   633  00E5                    ADC0_TR:      equ 0E5h          ; ADC Column 0 Trim Register
   634  00E6                    ADC1_TR:      equ 0E6h          ; ADC Column 1 Trim Register
   635                          
   636  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   637  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   638  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   639  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   640                          
   641  00FA                    FLS_PR1:      equ 0FAh          ; Flash Program Register 1                 (RW)
   642  0003                    FLS_PR1_BANK:         equ 03h    ; MASK: Select Active Flash Bank
   643                          
   644  00FD                    DAC_CR0:       equ 0FDh          ; Analog Mux DAC Control Register 0
   645  00DC                    DAC_CR1:       equ 0DCh          ; Analog Mux DAC Control Register 1
   646  0008                    DAC_CR_IRANGE:        equ 08h    ; MASK: Sets the DAC Range low or high
   647  0006                    DAC_CR_OSCMODE:       equ 06h    ; MASK: Defines the reset mode for AMux
   648  0001                    DAC_CR_ENABLE:        equ 01h    ; MASK: Enable/Disable DAC function
   649                          
   650                          ;------------------------------------------------
   651                          ;  I2C Control Registers
   652                          ;------------------------------------------------
   653                          
   654  00AD                    I2C_ADDR:    equ 0ADh          ; I2C Address Register (RW)
   655                          
   656                          ;------------------------------------------------------
   657                          ;  Neon Analog Registers
   658                          ;------------------------------------------------------
   659  0053                    VDAC50CR0:		equ 53h			; V DAC5 control 0				(RW)
   660  0057                    VDAC51CR0:		equ 57h			; V DAC5 control 1				(RW)
   661  00A8                    ADC_CR0:		equ A8h			; ADC control 0					(RW)
   662  00A9                    ADC_CR1:		equ A9h			; ADC control 1					(RW)
   663  00AA                    ADC_CR2:		equ AAh			; ADC control 2					(RW)
   664  00AB                    ADC_CR3TRIM:	equ ABh			; ADC control 3					(RW)
   665  00AC                    ADC_CR4:		equ ACh			; ADC control 4					(RW)
   666  00E7                    VDAC_TRIM:		equ E7h			; V DAC trim					(RW)
   667                          
   668                          ;------------------------------------------------------
   669                          ;  Neon Current Sense CMP Registers
   670                          ;------------------------------------------------------
   671  0050                    CMP0CR1:		equ 50h			; CMP0 control 1				(RW)
   672  0051                    CMP0CR2:		equ 51h			; CMP0 control 2				(RW)
   673  0054                    CMP1CR1:		equ 54h			; CMP1 control 1				(RW)
   674  0055                    CMP1CR2:		equ 55h			; CMP1 control 2				(RW)
   675  0058                    CSCMPCR0:		equ 58h			; CSCMP control 0				(RW)
   676  0059                    CSCMPGOEN:		equ 59h			; CSCMO global out enable		(RW)
   677  005A                    CSLUTCR0:		equ 5Ah			; CSLUT control 0				(RW)
   678  005B                    CMPCOLMUX:		equ 5Bh			; CMP Column Mux				(RW)
   679  005C                    CMPPWMCR:		equ 5Ch			; CMP PWM control				(RW)
   680  005D                    CMPFLTCR:		equ 5Dh			; CMP filter control			(RW)
   681  005E                    CMPCLK1:		equ 5Eh			; CMP clock 1					(RW)
   682  005F                    CMPCLK0:		equ 5Fh			; CMP clock 0					(RW)
   683                          
   684                          ;------------------------------------------------------
   685                          ;  Neon Real Time Clock Registers
   686                          ;------------------------------------------------------
   687  00A4                    RTCH:			equ A4h			; Real time current hour		(RW)
   688  00A5                    RTCM:			equ A5h			; Real time current minute		(RW)
   689  00A6                    RTCS:			equ A6h			; Real time current second		(RW)
   690  00A7                    RTCCR:			equ A7h			; Real time clock control		(RW)
   691                          
   692                          ;------------------------------------------------------
   693                          ;  Analog MUX Config Registers
   694                          ;------------------------------------------------------
   695                          
   696  006A                    AMUX_CFG1:			equ 6Ah  ; Analog MUX Configuration 1
   697  0020                    AMUX_CFG1_GOINVR:	equ 20h  ;
   698  0010                    AMUX_CFG1_GOINVL:  	equ 10h	 ;
   699  000C                    AMUX_CFG1_AMUXMODR:	equ 0Ch	 ;
   700  0003                    AMUX_CFG1_AMUXMODL:	equ 03h	 ;
   701                          
   702                          ;;=============================================================================
   703                          ;;      M8C System Macros
   704                          ;;  These macros should be used when their functions are needed.
   705                          ;;=============================================================================
   706                          
   707                          ;----------------------------------------------------
   708                          ;  Swapping Register Banks
   709                          ;----------------------------------------------------
   710                              macro M8C_SetBank0
   711                              and   F, ~FLAG_XIO_MASK
   712  3C51                        endm
   713                          
   714                              macro M8C_SetBank1
   715                              or    F, FLAG_XIO_MASK
   716  3C51                        endm
   717                          
   718                          ;----------------------------------------------------
   719                          ;  Global Interrupt Enable/Disable
   720                          ;----------------------------------------------------
   721                              macro M8C_EnableGInt
   722                              or    F, FLAG_GLOBAL_IE
   723  3C51                        endm
   724                          
   725                              macro M8C_DisableGInt
   726                              and   F, ~FLAG_GLOBAL_IE
   727  3C51                        endm
   728                          
   729                          ;----------------------------------------------------
   730                          ;  Enable/Disable Interrupt Mask
   731                          ;
   732                          ;  Use the following macros to enable/disable
   733                          ;  bits in the Interrupt mask registers,
   734                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   735                          ;
   736                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   737                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   738                          ;
   739                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   740                          ;        and MASK is the bit set to enable or disable
   741                          ;----------------------------------------------------
   742                          ; Disable Interrupt Bit Mask(s)
   743                              macro M8C_DisableIntMask
   744                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   745  3C51                        endm
   746                          
   747                          ; Enable Interrupt Bit Mask(s)
   748                              macro M8C_EnableIntMask
   749                              or    reg[@0], @1               ; enable specified interrupt enable bit
   750  3C51                        endm
   751                          
   752                          ;----------------------------------------------------
   753                          ;  Clear Posted Interrupt Flag Mask
   754                          ;
   755                          ;  Use the following macros to clear the
   756                          ;  bits in the Interrupt Clear registers,
   757                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   758                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   759                          ;
   760                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   761                          ;        and MASK is the bit set to enable or disable
   762                          ;----------------------------------------------------
   763                              macro M8C_ClearIntFlag
   764                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   765  3C51                        endm
   766                          
   767                          ;----------------------------------------------------
   768                          ;  Power-On Reset & WatchDog Timer Functions
   769                          ;----------------------------------------------------
   770                              macro M8C_EnableWatchDog
   771                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   772  3C51                        endm
   773                          
   774                              macro M8C_ClearWDT
   775                              mov   reg[RES_WDT], 00h
   776  3C51                        endm
   777                          
   778                              macro M8C_ClearWDTAndSleep
   779                              mov   reg[RES_WDT], 38h
   780  3C51                        endm
   781                          
   782                          ;----------------------------------------------------
   783                          ;  Sleep, CPU Stop & Software Reset
   784                          ;----------------------------------------------------
   785                              macro M8C_Sleep
   786                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   787                              ; The next instruction to be executed depends on the state of the
   788                              ; various interrupt enable bits. If some interrupts are enabled
   789                              ; and the global interrupts are disabled, the next instruction will
   790                              ; be the one that follows the invocation of this macro. If global
   791                              ; interrupts are also enabled then the next instruction will be
   792                              ; from the interrupt vector table. If no interrupts are enabled
   793                              ; then the CPU sleeps forever.
   794  3C51                        endm
   795                          
   796                              macro M8C_Stop
   797                              ; In general, you probably don't want to do this, but here's how:
   798                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   799                              ; Next instruction to be executed is located in the interrupt
   800                              ; vector table entry for Power-On Reset.
   801  3C51                        endm
   802                          
   803                              macro M8C_Reset
   804                              ; Restore CPU to the power-on reset state.
   805                              mov A, 0
   806                              SSC
   807                              ; Next non-supervisor instruction will be at interrupt vector 0.
   808  3C51                        endm
   809                          
   810                          ;----------------------------------------------------
   811                          ; ImageCraft Code Compressor Actions
   812                          ;----------------------------------------------------
   813                              ; Suspend Code Compressor
   814                              ; Must not span a RET or RETI instruction
   815                              ; without resuming code compression
   816                              macro Suspend_CodeCompressor
   817                              or   F, 0
   818  3C51                        endm
   819                          
   820                              ; Resume Code Compression
   821                              macro Resume_CodeCompressor
   822                              add  SP, 0
   823                              endm
      + 3C51                    
      + 3C51                    ; end of file m8c.inc
      + 3C51                    ;;*****************************************************************************
;;******************
      +                         ***********************************************************
;;  FILENAME: PWM8_BL.inc
;;   Version: 
      +                         2.60, Updated on 2013/5/19 at 10:44:7
;;  Generated by PSoC Designer 5.4.2946
;;
;;  DESCRIPTION: As
      +                         sembler declarations for the PWM8 user module interface
;;------------------------------------------
      +                         -----------------------------------
;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserve
      +                         d.
;;*****************************************************************************
;;***************
      +                         **************************************************************
   824                          
   825                          ; end of file m8c.inc
    29  00C0                    FLAG_PGMODE_MASK:  equ 0C0h     ; Paging control for > 256 bytes of RAM
    30  0000                    FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
    31  0040                    FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
    32  0080                    FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
    33  00C0                    FLAG_PGMODE_3:     equ 0C0h       ; Direct to CUR_PP page, indexed to STK_PP page
    34  0000                    FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
    35  0040                    FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
    36  0080                    FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
    37  00C0                    FLAG_PGMODE_11b:   equ 0C0h       ; Same as PGMODE_3
    38  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    39  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    40  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    41  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    42  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    43                          
    44                          
    45                          ;;=============================================================================
    46                          ;;      Register Space, Bank 0
    47                          ;;=============================================================================
    48                          
    49                          ;------------------------------------------------
    50                          ;  Port Registers
    51                          ;  Note: Also see this address range in Bank 1.
    52                          ;------------------------------------------------
    53                          ; Port 0
    54  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    55  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    56  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    57  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    58                          ; Port 1
    59  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    60  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    61  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    62  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    63                          ; Port 2
    64  0008                    PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
    65  0009                    PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
    66  000A                    PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
    67  000B                    PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
    68                          ; Port 3
    69  000C                    PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
    70  000D                    PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
    71  000E                    PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
    72  000F                    PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
    73                          ; Port 4
    74  0010                    PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
    75  0011                    PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
    76  0012                    PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
    77  0013                    PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
    78                          
    79                          ;------------------------------------------------
    80                          ;  Digital PSoC(tm) block Registers
    81                          ;  Note: Also see this address range in Bank 1.
    82                          ;------------------------------------------------
    83                          ; Digital PSoC block 00, Basic Type C
    84  0020                    DBC00DR0:     equ 20h          ; data register 0                          (#)
    85  0021                    DBC00DR1:     equ 21h          ; data register 1                          (W)
    86  0022                    DBC00DR2:     equ 22h          ; data register 2                          (RW)
    87  0023                    DBC00CR0:     equ 23h          ; control & status register 0              (#)
    88                          
    89                          ; Digital PSoC block 01, Basic Type C
    90  0024                    DBC01DR0:     equ 24h          ; data register 0                          (#)
    91  0025                    DBC01DR1:     equ 25h          ; data register 1                          (W)
    92  0026                    DBC01DR2:     equ 26h          ; data register 2                          (RW)
    93  0027                    DBC01CR0:     equ 27h          ; control & status register 0              (#)
    94                          
    95                          ; Digital PSoC block 02, Communications Type C
    96  0028                    DCC02DR0:     equ 28h          ; data register 0                          (#)
    97  0029                    DCC02DR1:     equ 29h          ; data register 1                          (W)
    98  002A                    DCC02DR2:     equ 2Ah          ; data register 2                          (RW)
    99  002B                    DCC02CR0:     equ 2Bh          ; control & status register 0              (#)
   100                          
   101                          ; Digital PSoC block 03, Communications Type C
   102  002C                    DCC03DR0:     equ 2Ch          ; data register 0                          (#)
   103  002D                    DCC03DR1:     equ 2Dh          ; data register 1                          (W)
   104  002E                    DCC03DR2:     equ 2Eh          ; data register 2                          (RW)
   105  002F                    DCC03CR0:     equ 2Fh          ; control & status register 0              (#)
   106                          
   107                          ; Digital PSoC block 10, Basic Type C
   108  0030                    DBC10DR0:     equ 30h          ; data register 0                          (#)
   109  0031                    DBC10DR1:     equ 31h          ; data register 1                          (W)
   110  0032                    DBC10DR2:     equ 32h          ; data register 2                          (RW)
   111  0033                    DBC10CR0:     equ 33h          ; control & status register 0              (#)
   112                          
   113                          ; Digital PSoC block 11, Basic Type C
   114  0034                    DBC11DR0:     equ 34h          ; data register 0                          (#)
   115  0035                    DBC11DR1:     equ 35h          ; data register 1                          (W)
   116  0036                    DBC11DR2:     equ 36h          ; data register 2                          (RW)
   117  0037                    DBC11CR0:     equ 37h          ; control & status register 0              (#)
   118                          
   119                          ; Digital PSoC block 12, Communications Type C
   120  0038                    DCC12DR0:     equ 38h          ; data register 0                          (#)
   121  0039                    DCC12DR1:     equ 39h          ; data register 1                          (W)
   122  003A                    DCC12DR2:     equ 3Ah          ; data register 2                          (RW)
   123  003B                    DCC12CR0:     equ 3Bh          ; control & status register 0              (#)
   124                          
   125                          ; Digital PSoC block 13, Communications Type C
   126  003C                    DCC13DR0:     equ 3Ch          ; data register 0                          (#)
   127  003D                    DCC13DR1:     equ 3Dh          ; data register 1                          (W)
   128  003E                    DCC13DR2:     equ 3Eh          ; data register 2                          (RW)
   129  003F                    DCC13CR0:     equ 3Fh          ; control & status register 0              (#)
   130                          
   131                          ;-------------------------------------
   132                          ;  Analog Control Registers
   133                          ;-------------------------------------
   134  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
   135  00C0                    AMX_IN_ACI3:          equ C0h    ; MASK: column 3 input mux
   136  0030                    AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
   137  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
   138  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
   139                          
   140  0061                    AMUX_CFG:      equ 61h          ; Analog MUX Configuration
   141  0030                    AMUX_CFG_INTCAP:       equ 30h    ;
   142  000E                    AMUX_CFG_MUXCLK:  	  equ 0Eh	 ;
   143  0001                    AMUX_CFG_EN:		  	  equ 01h	 ;
   144                          
   145                          ; old declarations DO NOT USE
   146  0061                    AMUXCFG:      equ 61h          ; Analog MUX Configuration
   147  0030                    AMUXCFG_INTCAP:       equ 30h    ;
   148  000E                    AMUXCFG_MUXCLK:  	  equ 0Eh	 ;
   149  0001                    AMUXCFG_EN:		  	  equ 01h	 ;
   150                          
   151  0062                    PWM_CR:       equ 62h          ; Pulse-Width Modulator Control
   152  0038                    PWM_CR_HIGH:          equ 38h    ; MASK: PWM high time
   153  0006                    PWM_CR_LOW:           equ 06h	 ; MASK: PWM low time
   154  0001                    PWM_CR_EN:            equ 01h	 ; MASK: Enable/Disable PWM function
   155                          
   156  0063                    ARF_CR:       equ 63h          ; Analog Reference Control
   157                          
   158  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus Register           (#)
   159  0080                    CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
   160  0040                    CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
   161  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
   162  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
   163  0008                    CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
   164  0004                    CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
   165  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
   166  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   167                          
   168  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   169  0020                    CMP_CR1_CLDIS1:       equ 20h    ; MASK: Column 1 comparator output latch
   170  0010                    CMP_CR1_CLDIS0:	      equ 10h    ; MASK: Column 0 comparator output latch
   171                          
   172  0068                    ADC0_CR:      equ 68h          ; Analog Column 0 Configuration
   173  0080                    ADC0_CR_CMPST:        equ 80h    ;
   174  0040                    ADC0_CR_LOREN:        equ 40h    ;
   175  0020                    ADC0_CR_SHEN:         equ 20h    ;
   176  0008                    ADC0_CR_CBSRC:        equ 08h    ;
   177  0004                    ADC0_CR_ADCM:         equ 04h    ;
   178  0001                    ADC0_CR_EN:	          equ 01h    ;
   179                          
   180  0069                    ADC1_CR:      equ 69h          ; Analog Column 1 Configuration
   181  0080                    ADC1_CR_CMPST:        equ 80h    ;
   182  0040                    ADC1_CR_LOREN:        equ 40h    ;
   183  0020                    ADC1_CR_SHEN:         equ 20h    ;
   184  0008                    ADC1_CR_CBSRC:        equ 08h    ;
   185  0004                    ADC1_CR_ADCM:         equ 04h    ;
   186  0001                    ADC1_CR_EN:	          equ 01h    ;
   187                          
   188                          ; Continuous Time PSoC block Type E Row 0 Col 0
   189  0072                    ACE00CR1:     equ 72h          ; Control register 1                       (RW)
   190  0073                    ACE00CR2:     equ 73h          ; Control register 2                       (RW)
   191                          
   192                          ; Continuous Time PSoC block Type E Row 0 Col 1
   193  0076                    ACE01CR1:     equ 76h          ; Control register 1                       (RW)
   194  0077                    ACE01CR2:     equ 77h          ; Control register 2                       (RW)
   195                          
   196                          ; Switched Cap PSoC blockType E Row 1 Col 0
   197  0080                    ASE10CR0:     equ 80h          ; Control register 0                       (RW)
   198                          
   199                          ; Switched Cap PSoC blockType E Row 1 Col 1
   200  0084                    ASE11CR0:     equ 84h          ; Control register 0                       (RW)
   201                          
   202                          ;-----------------------------------------------
   203                          ;  Global General Purpose Data Registers
   204                          ;-----------------------------------------------
   205  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   206  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   207  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   208  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   209                          
   210                          ;------------------------------------------------
   211                          ;  Row Digital Interconnects
   212                          ;
   213                          ;  Note: the following registers are mapped into
   214                          ;  both register bank 0 AND register bank 1.
   215                          ;------------------------------------------------
   216                          
   217  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   218  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   219  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   220  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   221  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   222  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   223  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   224                          
   225  00B8                    RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
   226  00B9                    RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
   227  00BA                    RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
   228  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   229  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   230  00BD                    RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
   231  00BE                    RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
   232                          
   233                          ;-----------------------------------------------
   234                          ;  Ram Page Pointers
   235                          ;-----------------------------------------------
   236  00D0                    CUR_PP:      equ 0D0h           ; Current   Page Pointer
   237  00D1                    STK_PP:      equ 0D1h           ; Stack     Page Pointer
   238  00D3                    IDX_PP:      equ 0D3h           ; Index     Page Pointer
   239  00D4                    MVR_PP:      equ 0D4h           ; MVI Read  Page Pointer
   240  00D5                    MVW_PP:      equ 0D5h           ; MVI Write Page Pointer
   241                          
   242                          ;------------------------------------------------
   243                          ;  I2C Configuration Registers
   244                          ;------------------------------------------------
   245  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   246  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   247  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   248  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   249  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   250  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   251  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   252  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   253  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   254  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   255                          
   256  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   257  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   258  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   259  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   260  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   261  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   262  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   263  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   264  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   265                          
   266  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   267                          
   268  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   269  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   270  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   271  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   272  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   273                          
   274                          ;------------------------------------------------
   275                          ;  System and Global Resource Registers
   276                          ;------------------------------------------------
   277  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   278                                                         ; Use INT_MSK0 bit field masks
   279  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   280                                                         ; Use INT_MSK1 bit field masks
   281  00DC                    INT_CLR2:     equ 0DCh          ; Interrupt Clear Register 2               (RW)
   282                                                         ; Use INT_MSK2 bit field masks
   283  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   284                                                         ; Use INT_MSK3 bit field masks
   285                          
   286  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   287  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   288  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   289                          
   290  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   291  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   292  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   293  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   294  0010                    INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
   295  0008                    INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
   296  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   297  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   298  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   299                          
   300  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   301  0080                    INT_MSK1_DCC13:            equ 80h ; MASK: enable/disable DCC13 block interrupt
   302  0040                    INT_MSK1_DCC12:            equ 40h ; MASK: enable/disable DCC12 block interrupt
   303  0020                    INT_MSK1_DBC11:            equ 20h ; MASK: enable/disable DBC11 block interrupt
   304  0010                    INT_MSK1_DBC10:            equ 10h ; MASK: enable/disable DBC10 block interrupt
   305  0008                    INT_MSK1_DCC03:            equ 08h ; MASK: enable/disable DCC03 block interrupt
   306  0004                    INT_MSK1_DCC02:            equ 04h ; MASK: enable/disable DCC02 block interrupt
   307  0002                    INT_MSK1_DBC01:            equ 02h ; MASK: enable/disable DBC01 block interrupt
   308  0001                    INT_MSK1_DBC00:            equ 01h ; MASK: enable/disable DBC00 block interrupt
   309                          
   310  00DF                    INT_MSK2:     equ DFh			; Custom block Mask Register			   (RW)
   311  0010                    INT_MSK2_SARADC:           equ 10h ; MASK: enable/disable SARADC block interrupt
   312  0020                    INT_MSK2_CSD0:             equ 20h ; MASK: enable/disable CSD0 block interrupt
   313  0040                    INT_MSK2_CSD1:             equ 40h ; MASK: enable/disable CSD1 block interrupt
   314  0080                    INT_MSK2_RTC:              equ 80h ; MASK: enable/disable RTC block interrupt
   315                          
   316  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   317  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   318                          
   319                          ;------------------------------------------------------
   320                          ;  MAC Registers
   321                          ;------------------------------------------------------
   322                          
   323  00E8                    MUL0_X:       equ 0E8h          ; Multiply Input X Register                (W)
   324  00E9                    MUL0_Y:       equ 0E9h          ; Multiply Input Y Register                (W)
   325  00EA                    MUL0_DH:      equ 0EAh          ; Multiply Result High Byte Register       (R)
   326  00EB                    MUL0_DL:      equ 0EBh          ; Multiply Result Low Byte Register        (R)
   327                          
   328  00EC                    ACC0_DR1:     equ 0ECh          ; Accumulator Data Register 1              (RW)
   329  00ED                    ACC0_DR0:     equ 0EDh          ; Accumulator Data Register 0              (RW)
   330  00EE                    ACC0_DR3:     equ 0EEh          ; Accumulator Data Register 3              (RW)
   331  00EF                    ACC0_DR2:     equ 0EFh          ; Accumulator Data Register 2              (RW)
   332                          
   333                          ; DECIMATOR Control Registers
   334  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   335  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   336                          
   337                          ;------------------------------------------------------
   338                          ;  System Status and Control Registers
   339                          ;
   340                          ;  Note: The following registers are mapped into both
   341                          ;        register bank 0 AND register bank 1.
   342                          ;------------------------------------------------------
   343  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   344                                                             ; Use FLAG_ masks defined at top of file
   345                          
   346  00FD                    DAC_D:        equ 0FDh		   ; DAC Data Register                        (RW)
   347                          
   348  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   349  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: flag, Internal Reset Status bit
   350  0010                    CPU_SCR1_SLIMO:         equ 10h	   ; MASK: Slow IMO (internal main osc) enable
   351  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   352  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   353  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   354                          
   355  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   356  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   357  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   358  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   359  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   360  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   361                          
   362                          ;------------------------------------------------------
   363                          ;  Neon Capsense Digital Control Registers
   364                          ;------------------------------------------------------
   365  0050                    CSD0_DR0_L:				equ 50h		; Capsense 0 data low 0				(RW)
   366  0054                    CSD0_DR0_H:				equ 54h		; Capsense 0 data high 0			(RW)
   367  0058                    CSD1_DR0_L:				equ 58h		; Capsense 1 data low 0				(RW)
   368  005C                    CSD1_DR0_H:				equ 5Ch		; Capsense 1 data high 0			(RW)
   369  0051                    CSD0_DR1_L:				equ 51h		; Capsense 0 data low 1				(RW)
   370  0055                    CSD0_DR1_H:				equ 55h		; Capsense 0 data high 1			(RW)
   371  0059                    CSD1_DR1_L:				equ 59h		; Capsense 1 data low 1				(RW)
   372  005D                    CSD1_DR1_H:				equ 5Dh		; Capsense 1 data high 1			(RW)
   373  0052                    CSD0_CNT_L:				equ 52h		; Capsense 0 counter low			(RW)
   374  0056                    CSD0_CNT_H:				equ 56h		; Capsense 0 counter high			(RW)
   375  005A                    CSD1_CNT_L:				equ 5Ah		; Capsense 1 counter low			(RW)
   376  005E                    CSD1_CNT_H:				equ	5Eh		; Capsense 1 counter high			(RW)
   377  0053                    CSD0_CR0:				equ 53h		; Capsense 0 control 0				(RW)
   378  005B                    CSD1_CR0:				equ 5Bh		; Capsense 1 control 0				(RW)
   379  0057                    CSD0_CR1:				equ 57h		; Capsense 0 control 1				(RW)
   380  005F                    CSD1_CR1:				equ 5Fh		; Capsense 1 control 1				(RW)
   381                          
   382                          ;------------------------------------------------------
   383                          ;  Neon Analog Registers
   384                          ;------------------------------------------------------
   385  0065                    ASY_CR:					equ 65h		; Analog Synchronization Control	(RW)
   386  006A                    ADC_DH:					equ 6Ah		; ADC data high						(RW)
   387  006B                    ADC_DL:					equ 6Bh		; ADC data low						(RW)
   388  00C8                    PWMVREF0:				equ C8h		; PWM Voltage Reference 0			(RW)
   389  00C9                    PWMVREF1:				equ C9h		; PWM Voltage Reference 1			(RW)
   390  00CB                    PWMSRC:					equ CBh		; PWM Source						(RW)
   391  00CA                    IDACMODE:				equ CAh		; IDAC Mode							(RW)
   392  00FC                    IDACR_D:				equ FCh		; Analog Mux DAC data 0				(RW)
   393  00FD                    IDACL_D:				equ FDh		; Analog Mux DAC data 1				(RW)
   394                          
   395                          ;------------------------------------------------------
   396                          ;  Neon Digital Registers
   397                          ;------------------------------------------------------
   398  00B7                    RDI0DSM:				equ B7h		; Row Digital Interconnect input select 0	(RW)
   399  00BF                    RDI1DSM:				equ BFh		; Row Digital Interconnect input select 1	(RW)
   400                          
   401                          ;------------------------------------------------------
   402                          ;  Neon Test Registers
   403                          ;------------------------------------------------------
   404  00CC                    TSCR0:					equ CCh		; Tsource 0							(RW)
   405  00CD                    TSCMPH:					equ CDh		; TSCMP high						(RW)
   406  00CE                    TSCMPL:					equ CEh		; TSCMP low							(RW)
   407  00CF                    TSCR1:					equ CFh		; Tsource 1							(RW)
   408                          
   409                          ;;=============================================================================
   410                          ;;      Register Space, Bank 1
   411                          ;;=============================================================================
   412                          
   413                          ;------------------------------------------------
   414                          ;  Port Registers
   415                          ;  Note: Also see this address range in Bank 0.
   416                          ;------------------------------------------------
   417                          ; Port 0
   418  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   419  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   420  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   421  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   422                          
   423                          ; Port 1
   424  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   425  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   426  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   427  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   428                          
   429                          ; Port 2
   430  0008                    PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
   431  0009                    PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
   432  000A                    PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
   433  000B                    PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
   434                          
   435                          ; Port 3
   436  000C                    PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
   437  000D                    PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
   438  000E                    PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
   439  000F                    PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
   440                          
   441                          ; Port 4
   442  0010                    PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
   443  0011                    PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
   444  0012                    PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
   445  0013                    PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
   446                          
   447                          ;------------------------------------------------
   448                          ;  Digital PSoC(tm) block Registers
   449                          ;  Note: Also see this address range in Bank 0.
   450                          ;------------------------------------------------
   451                          
   452                          ; Digital PSoC block 00, Basic Type C
   453  0020                    DBC00FN:      equ 20h          ; Function Register                        (RW)
   454  0021                    DBC00IN:      equ 21h          ;    Input Register                        (RW)
   455  0022                    DBC00OU:      equ 22h          ;   Output Register                        (RW)
   456  0023                    DBC00CR1:     equ 23h          ;   control & status register 1            (RW)
   457                          
   458                          ; Digital PSoC block 01, Basic Type C
   459  0024                    DBC01FN:      equ 24h          ; Function Register                        (RW)
   460  0025                    DBC01IN:      equ 25h          ;    Input Register                        (RW)
   461  0026                    DBC01OU:      equ 26h          ;   Output Register                        (RW)
   462  0027                    DBC01CR1:     equ 27h          ;   control & status register 1            (RW)
   463                          
   464                          ; Digital PSoC block 02, Communications Type C
   465  0028                    DCC02FN:      equ 28h          ; Function Register                        (RW)
   466  0029                    DCC02IN:      equ 29h          ;    Input Register                        (RW)
   467  002A                    DCC02OU:      equ 2Ah          ;   Output Register                        (RW)
   468  002B                    DBC02CR1:     equ 2Bh          ;   control & status register 1            (RW)
   469                          
   470                          ; Digital PSoC block 03, Communications Type C
   471  002C                    DCC03FN:      equ 2Ch          ; Function Register                        (RW)
   472  002D                    DCC03IN:      equ 2Dh          ;    Input Register                        (RW)
   473  002E                    DCC03OU:      equ 2Eh          ;   Output Register                        (RW)
   474  0029                    DBC03CR1:     equ 29h          ;   control & status register 1            (RW)
   475                          
   476                          ; Digital PSoC block 10, Basic Type C
   477  0030                    DBC10FN:      equ 30h          ; Function Register                        (RW)
   478  0031                    DBC10IN:      equ 31h          ;    Input Register                        (RW)
   479  0032                    DBC10OU:      equ 32h          ;   Output Register                        (RW)
   480  0033                    DBC10CR1:     equ 33h          ;   control & status register 1            (RW)
   481                          
   482                          ; Digital PSoC block 11, Basic Type C
   483  0034                    DBC11FN:      equ 34h          ; Function Register                        (RW)
   484  0035                    DBC11IN:      equ 35h          ;    Input Register                        (RW)
   485  0036                    DBC11OU:      equ 36h          ;   Output Register                        (RW)
   486  0037                    DBC11CR1:     equ 37h          ;   control & status register 1            (RW)
   487                          
   488                          ; Digital PSoC block 12, Communications Type C
   489  0038                    DCC12FN:      equ 38h          ; Function Register                        (RW)
   490  0039                    DCC12IN:      equ 39h          ;    Input Register                        (RW)
   491  003A                    DCC12OU:      equ 3Ah          ;   Output Register                        (RW)
   492  003B                    DBC12CR1:     equ 3Bh          ;   control & status register 1            (RW)
   493                          
   494                          ; Digital PSoC block 13, Communications Type C
   495  003C                    DCC13FN:      equ 3Ch          ; Function Register                        (RW)
   496  003D                    DCC13IN:      equ 3Dh          ;    Input Register                        (RW)
   497  003E                    DCC13OU:      equ 3Eh          ;   Output Register                        (RW)
   498  003F                    DBC13CR1:     equ 3Fh          ;   control & status register 1            (RW)
   499                          
   500                          ;------------------------------------------------
   501                          ;  System and Global Resource Registers
   502                          ;  Note: Also see this address range in Bank 0.
   503                          ;------------------------------------------------
   504                          
   505  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   506  00C0                    CLK_CR0_ACOLUMN_3:    equ C0h    ; MASK: Specify clock for analog cloumn
   507  0030                    CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
   508  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   509  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   510                          
   511  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   512  0018                    CLK_CR1_ACLK1:        equ 18h    ; MASK: Digital PSoC block for analog source
   513  0003                    CLK_CR1_ACLK0:        equ 03h    ; MASK: Digital PSoC block for analog source
   514                          
   515  0003                    CLK_CR1_ACLK2:        equ 03h    ; Deprecated do not use
   516                          
   517  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   518  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   519                          
   520  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   521  000F                    AMD_CR0_AMOD0:        equ 0Fh    ; MASK: Modulation source for analog column 0
   522                          
   523  0064                    CMP_GO_EN:    equ 64h          ; Comparator Bus To Global Out Enable      (RW)
   524  0080                    CMP_GO_EN_GOO5:       equ 80h    ; MASK: Selected Col 1 signal to GOO5
   525  0040                    CMP_GO_EN_GOO1:       equ 40h    ; MASK: Selected Col 1 signal to GOO1
   526  0030                    CMP_GO_EN_SEL1:       equ 30h    ; MASK: Column 1 Signal Select
   527  0008                    CMP_GO_EN_GOO4:       equ 08h    ; MASK: Selected Col 0 signal to GOO4
   528  0004                    CMP_GO_EN_GOO0:       equ 04h    ; MASK: Selected Col 0 signal to GOO0
   529  0003                    CMP_GO_EN_SEL0:       equ 03h    ; MASK: Column 0 Signal Select
   530                          
   531  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   532  000F                    AMD_CR1_AMOD1:        equ 0Fh    ; MASK: Modulation ctrl for analog column 1
   533                          
   534  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   535  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   536  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   537                          
   538  006B                    CLK_CR3:      equ 6Bh          ; Analog Clock Source Control Register 3   (RW)
   539  0040                    CLK_CR3_SYS1:         equ 40h    ; MASK: Analog Clock 1 selection
   540  0030                    CLK_CR3_DIVCLK1:      equ 30h    ; MASK: Analog Clock 1 divider
   541  0004                    CLK_CR3_SYS0:         equ 04h    ; MASK: Analog Clock 0 selection
   542  0003                    CLK_CR3_DIVCLK0:      equ 03h    ; MASK: Analog Clock 0 divider
   543                          
   544                          ;------------------------------------------------
   545                          ;  Global Digital Interconnects
   546                          ;------------------------------------------------
   547                          
   548  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   549  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   550  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   551  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   552                          
   553  00A0                    GDI_O_IN_CR:  equ 0A0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   554  00A1                    GDI_E_IN_CR:  equ 0A1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   555  00A2                    GDI_O_OU_CR:  equ 0A2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   556  00A3                    GDI_E_OU_CR:  equ 0A3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   557                          
   558  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   559  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   560                          
   561                          ;------------------------------------------------
   562                          ;  Analog Mux Bus Port Enable Bits
   563                          ;------------------------------------------------
   564  00D8                    MUX_CR0:      equ 0D8h          ; Analog Mux Port 0 Bit Enables Register
   565  00D9                    MUX_CR1:      equ 0D9h          ; Analog Mux Port 1 Bit Enables Register
   566  00DA                    MUX_CR2:      equ 0DAh          ; Analog Mux Port 2 Bit Enables Register
   567  00DB                    MUX_CR3:      equ 0DBh          ; Analog Mux Port 3 Bit Enables Register
   568  00EC                    MUX_CR4:      equ 0ECh          ; Analog Mux Port 4 Bit Enables Register
   569                          
   570                          ;------------------------------------------------
   571                          ;  Clock and System Control Registers
   572                          ;------------------------------------------------
   573                          
   574  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   575  0080                    OSC_GO_EN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   576  0040                    OSC_GO_EN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   577  0020                    OSC_GO_EN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   578  0010                    OSC_GO_EN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   579  0008                    OSC_GO_EN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   580  0004                    OSC_GO_EN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   581  0002                    OSC_GO_EN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   582  0001                    OSC_GO_EN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   583                          
   584  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   585  0003                    OSC_CR4_VC3SEL:       equ 03h    ; MASK: System VC3 Clock source
   586                          
   587  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   588                          
   589  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   590  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   591  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   592  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   593  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   594  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   595  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   596  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   597  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   598  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   599  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   600  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   601  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   602  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   603  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   604  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   605  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   606  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   607                          
   608  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   609  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   610  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   611                          
   612  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   613  0080                    OSC_CR2_PLLGAIN:      equ 80h    ; MASK: High/Low gain
   614  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   615  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   616  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   617                          
   618  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   619  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   620  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   621  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   622  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   623  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   624  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   625  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   626                          
   627  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   628  0008                    VLT_CMP_NOWRITE:      equ 08h    ; MASK: Vcc below Flash Write level
   629  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   630  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   631  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   632                          
   633  00E5                    ADC0_TR:      equ 0E5h          ; ADC Column 0 Trim Register
   634  00E6                    ADC1_TR:      equ 0E6h          ; ADC Column 1 Trim Register
   635                          
   636  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   637  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   638  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   639  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   640                          
   641  00FA                    FLS_PR1:      equ 0FAh          ; Flash Program Register 1                 (RW)
   642  0003                    FLS_PR1_BANK:         equ 03h    ; MASK: Select Active Flash Bank
   643                          
   644  00FD                    DAC_CR0:       equ 0FDh          ; Analog Mux DAC Control Register 0
   645  00DC                    DAC_CR1:       equ 0DCh          ; Analog Mux DAC Control Register 1
   646  0008                    DAC_CR_IRANGE:        equ 08h    ; MASK: Sets the DAC Range low or high
   647  0006                    DAC_CR_OSCMODE:       equ 06h    ; MASK: Defines the reset mode for AMux
   648  0001                    DAC_CR_ENABLE:        equ 01h    ; MASK: Enable/Disable DAC function
   649                          
   650                          ;------------------------------------------------
   651                          ;  I2C Control Registers
   652                          ;------------------------------------------------
   653                          
   654  00AD                    I2C_ADDR:    equ 0ADh          ; I2C Address Register (RW)
   655                          
   656                          ;------------------------------------------------------
   657                          ;  Neon Analog Registers
   658                          ;------------------------------------------------------
   659  0053                    VDAC50CR0:		equ 53h			; V DAC5 control 0				(RW)
   660  0057                    VDAC51CR0:		equ 57h			; V DAC5 control 1				(RW)
   661  00A8                    ADC_CR0:		equ A8h			; ADC control 0					(RW)
   662  00A9                    ADC_CR1:		equ A9h			; ADC control 1					(RW)
   663  00AA                    ADC_CR2:		equ AAh			; ADC control 2					(RW)
   664  00AB                    ADC_CR3TRIM:	equ ABh			; ADC control 3					(RW)
   665  00AC                    ADC_CR4:		equ ACh			; ADC control 4					(RW)
   666  00E7                    VDAC_TRIM:		equ E7h			; V DAC trim					(RW)
   667                          
   668                          ;------------------------------------------------------
   669                          ;  Neon Current Sense CMP Registers
   670                          ;------------------------------------------------------
   671  0050                    CMP0CR1:		equ 50h			; CMP0 control 1				(RW)
   672  0051                    CMP0CR2:		equ 51h			; CMP0 control 2				(RW)
   673  0054                    CMP1CR1:		equ 54h			; CMP1 control 1				(RW)
   674  0055                    CMP1CR2:		equ 55h			; CMP1 control 2				(RW)
   675  0058                    CSCMPCR0:		equ 58h			; CSCMP control 0				(RW)
   676  0059                    CSCMPGOEN:		equ 59h			; CSCMO global out enable		(RW)
   677  005A                    CSLUTCR0:		equ 5Ah			; CSLUT control 0				(RW)
   678  005B                    CMPCOLMUX:		equ 5Bh			; CMP Column Mux				(RW)
   679  005C                    CMPPWMCR:		equ 5Ch			; CMP PWM control				(RW)
   680  005D                    CMPFLTCR:		equ 5Dh			; CMP filter control			(RW)
   681  005E                    CMPCLK1:		equ 5Eh			; CMP clock 1					(RW)
   682  005F                    CMPCLK0:		equ 5Fh			; CMP clock 0					(RW)
   683                          
   684                          ;------------------------------------------------------
   685                          ;  Neon Real Time Clock Registers
   686                          ;------------------------------------------------------
   687  00A4                    RTCH:			equ A4h			; Real time current hour		(RW)
   688  00A5                    RTCM:			equ A5h			; Real time current minute		(RW)
   689  00A6                    RTCS:			equ A6h			; Real time current second		(RW)
   690  00A7                    RTCCR:			equ A7h			; Real time clock control		(RW)
   691                          
   692                          ;------------------------------------------------------
   693                          ;  Analog MUX Config Registers
   694                          ;------------------------------------------------------
   695                          
   696  006A                    AMUX_CFG1:			equ 6Ah  ; Analog MUX Configuration 1
   697  0020                    AMUX_CFG1_GOINVR:	equ 20h  ;
   698  0010                    AMUX_CFG1_GOINVL:  	equ 10h	 ;
   699  000C                    AMUX_CFG1_AMUXMODR:	equ 0Ch	 ;
   700  0003                    AMUX_CFG1_AMUXMODL:	equ 03h	 ;
   701                          
   702                          ;;=============================================================================
   703                          ;;      M8C System Macros
   704                          ;;  These macros should be used when their functions are needed.
   705                          ;;=============================================================================
   706                          
   707                          ;----------------------------------------------------
   708                          ;  Swapping Register Banks
   709                          ;----------------------------------------------------
   710                              macro M8C_SetBank0
   711                              and   F, ~FLAG_XIO_MASK
   712  3C51                        endm
   713                          
   714                              macro M8C_SetBank1
   715                              or    F, FLAG_XIO_MASK
   716  3C51                        endm
   717                          
   718                          ;----------------------------------------------------
   719                          ;  Global Interrupt Enable/Disable
   720                          ;----------------------------------------------------
   721                              macro M8C_EnableGInt
   722                              or    F, FLAG_GLOBAL_IE
   723  3C51                        endm
   724                          
   725                              macro M8C_DisableGInt
   726                              and   F, ~FLAG_GLOBAL_IE
   727  3C51                        endm
   728                          
   729                          ;----------------------------------------------------
   730                          ;  Enable/Disable Interrupt Mask
   731                          ;
   732                          ;  Use the following macros to enable/disable
   733                          ;  bits in the Interrupt mask registers,
   734                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   735                          ;
   736                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   737                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   738                          ;
   739                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   740                          ;        and MASK is the bit set to enable or disable
   741                          ;----------------------------------------------------
   742                          ; Disable Interrupt Bit Mask(s)
   743                              macro M8C_DisableIntMask
   744                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   745  3C51                        endm
   746                          
   747                          ; Enable Interrupt Bit Mask(s)
   748                              macro M8C_EnableIntMask
   749                              or    reg[@0], @1               ; enable specified interrupt enable bit
   750  3C51                        endm
   751                          
   752                          ;----------------------------------------------------
   753                          ;  Clear Posted Interrupt Flag Mask
   754                          ;
   755                          ;  Use the following macros to clear the
   756                          ;  bits in the Interrupt Clear registers,
   757                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   758                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   759                          ;
   760                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   761                          ;        and MASK is the bit set to enable or disable
   762                          ;----------------------------------------------------
   763                              macro M8C_ClearIntFlag
   764                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   765  3C51                        endm
   766                          
   767                          ;----------------------------------------------------
   768                          ;  Power-On Reset & WatchDog Timer Functions
   769                          ;----------------------------------------------------
   770                              macro M8C_EnableWatchDog
   771                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   772  3C51                        endm
   773                          
   774                              macro M8C_ClearWDT
   775                              mov   reg[RES_WDT], 00h
   776  3C51                        endm
   777                          
   778                              macro M8C_ClearWDTAndSleep
   779                              mov   reg[RES_WDT], 38h
   780  3C51                        endm
   781                          
   782                          ;----------------------------------------------------
   783                          ;  Sleep, CPU Stop & Software Reset
   784                          ;----------------------------------------------------
   785                              macro M8C_Sleep
   786                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   787                              ; The next instruction to be executed depends on the state of the
   788                              ; various interrupt enable bits. If some interrupts are enabled
   789                              ; and the global interrupts are disabled, the next instruction will
   790                              ; be the one that follows the invocation of this macro. If global
   791                              ; interrupts are also enabled then the next instruction will be
   792                              ; from the interrupt vector table. If no interrupts are enabled
   793                              ; then the CPU sleeps forever.
   794  3C51                        endm
   795                          
   796                              macro M8C_Stop
   797                              ; In general, you probably don't want to do this, but here's how:
   798                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   799                              ; Next instruction to be executed is located in the interrupt
   800                              ; vector table entry for Power-On Reset.
   801  3C51                        endm
   802                          
   803                              macro M8C_Reset
   804                              ; Restore CPU to the power-on reset state.
   805                              mov A, 0
   806                              SSC
   807                              ; Next non-supervisor instruction will be at interrupt vector 0.
   808  3C51                        endm
   809                          
   810                          ;----------------------------------------------------
   811                          ; ImageCraft Code Compressor Actions
   812                          ;----------------------------------------------------
   813                              ; Suspend Code Compressor
   814                              ; Must not span a RET or RETI instruction
   815                              ; without resuming code compression
   816                              macro Suspend_CodeCompressor
   817                              or   F, 0
   818  3C51                        endm
   819                          
   820                              ; Resume Code Compression
   821                              macro Resume_CodeCompressor
   822                              add  SP, 0
   823  3C51                        endm
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  FILENAME: PWM8_BL.inc
     4                          ;;   Version: 2.60, Updated on 2013/5/19 at 10:44:7
     5                          ;;  Generated by PSoC Designer 5.4.2946
     6                          ;;
     7                          ;;  DESCRIPTION: Assembler declarations for the PWM8 user module interface
     8                          ;;-----------------------------------------------------------------------------
     9                          ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
    10                          ;;*****************************************************************************
    11                          ;;*****************************************************************************
    12                          
    13                          include "m8c.inc"
    14                          
    15                          
    16                          ;--------------------------------------------------
    17                          ; Constants for PWM8_BL API's.
    18                          ;--------------------------------------------------
    19                          
    20  0001                    PWM8_BL_CONTROL_REG_START_BIT:             equ 0x01    ; Control register start bit
    21  00E1                    PWM8_BL_INT_REG:                           equ 0x0e1
    22  0010                    PWM8_BL_INT_MASK:                          equ 0x10
    23                          
    24                          
    25                          ;--------------------------------------------------
    26                          ; Constants for PWM8_BL user defined values
    27                          ;--------------------------------------------------
    28                          
    29  0000                    PWM8_BL_PERIOD:                            equ 0x00
    30  0000                    PWM8_BL_PULSE_WIDTH:                       equ 0x00
    31                          
    32                          
    33                          ;--------------------------------------------------
    34                          ; Register Address Constants for PWM8_BL
    35                          ;--------------------------------------------------
    36                          
    37  0030                    PWM8_BL_COUNTER_REG:                   equ 0x30   ; DR0 Count register
    38  0031                    PWM8_BL_PERIOD_REG:                    equ 0x31   ; DR1 Period register
    39  0032                    PWM8_BL_COMPARE_REG:                   equ 0x32   ; DR2 Compare register
    40  0033                    PWM8_BL_CONTROL_REG:                   equ 0x33   ; Control register
    41  0030                    PWM8_BL_FUNC_REG:                      equ 0x30   ; Function register
    42  0031                    PWM8_BL_INPUT_REG:                     equ 0x31   ; Input register
    43  0032                    PWM8_BL_OUTPUT_REG:                    equ 0x32   ; Output register
    44                          
    45                          
    46                          ;--------------------------------------------------
    47                          ; PWM8_BL Macro 'Functions'
    48                          ;--------------------------------------------------
    49                          
    50                             macro PWM8_BL_Start_M
    51                             or    reg[PWM8_BL_CONTROL_REG],  PWM8_BL_CONTROL_REG_START_BIT
    52  3C51                       endm
    53                          
    54                             macro PWM8_BL_Stop_M
    55                             and   reg[PWM8_BL_CONTROL_REG], ~PWM8_BL_CONTROL_REG_START_BIT
    56  3C51                       endm
    57                          
    58                             macro PWM8_BL_EnableInt_M
    59                             M8C_EnableIntMask PWM8_BL_INT_REG, PWM8_BL_INT_MASK
    60  3C51                       endm
    61                          
    62                             macro PWM8_BL_DisableInt_M
    63                             M8C_DisableIntMask PWM8_BL_INT_REG, PWM8_BL_INT_MASK
    64                             endm
      + 3C51                    
      + 3C51                    ; end of file PWM8_BL.inc
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;
     4                          ;;       FILENAME: Memory.inc
     5                          ;;
     6                          ;;    DESCRIPTION: Memory Model and Stack Parameter Definitions for 
     7                          ;;                 CY8C22045 PSoC devices.
     8                          ;;
     9                          ;;  LAST MODIFIED: August 17, 2004
    10                          ;;
    11                          ;;-----------------------------------------------------------------------------
    12                          ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
    13                          ;;*****************************************************************************
    14                          ;;*****************************************************************************
    15                          ;
    16                          ;
    17                          ;  ******** Define Memory Model and Stack parameters ********
    18                          ;
    19  0001                    IMAGECRAFT: equ 1   
    20  0002                    HITECH: equ 2   
    21  0002                    TOOLCHAIN: equ HITECH   
    22  0001                    SYSTEM_LARGE_MEMORY_MODEL: equ 1   
    23  0000                    SYSTEM_SMALL_MEMORY_MODEL: equ 0   
    24  0003                    SYSTEM_STACK_PAGE: equ 3   
    25  0000                    SYSTEM_STACK_PAGE_OFFSET: equ 0   
    26  0002                    SYSTEM_TOOLS: equ 2   
    27  0000                    SYSTEM_IDXPG_TRACKS_STK_PP: equ 0   
    28  0001                    SYSTEM_IDXPG_TRACKS_IDX_PP: equ 1   
    29  0000                    SYSTEM_MULTIPAGE_STACK: equ 0 
    30                          
    31                          
    32                          ;  ******* Function Class Definitions *******
    33                          ;
    34                          ;  These definitions are used to describe RAM access patterns. They provide
    35                          ;  documentation and they control prologue and epilogue macros that perform
    36                          ;  the necessary housekeeping functions for large memory model devices like
    37                          ;  the CY8C22045.
    38                          
    39  0001                    RAM_USE_CLASS_1:               equ 1   ; PUSH, POP & I/O access
    40  0002                    RAM_USE_CLASS_2:               equ 2   ; Indexed address mode on stack page
    41  0004                    RAM_USE_CLASS_3:               equ 4   ; Indexed address mode to any page
    42  0008                    RAM_USE_CLASS_4:               equ 8   ; Direct/Indirect address mode access
    43                          
    44                          ; ******* Hi Tech Specific *******
    45                          ; Turn on the expansion of all macros by default
    46                          IF (TOOLCHAIN & HITECH)
    47                          OPT EXPAND
    48                          ENDIF
    49                          ; ******* Page Pointer Manipulation Macros *******
    50                          ;
    51                          ;  ******* Page Pointer Manipulation Macros *******
    52                          ;
    53                          ;  Most of the following macros are conditionally compiled so they only
    54                          ;  produce code if the large memory model is selected.
    55                          
    56                             ;-----------------------------------------------
    57                             ;  Set Stack Page Macro
    58                             ;-----------------------------------------------
    59                             ;
    60                             ;  DESC: Modify STK_PP in the large or small memory Models.
    61                             ;
    62                             ; INPUT: Constant (e.g., SYSTEM_STACK_PAGE) that specifies the RAM page on
    63                             ;        which stack operations like PUSH and POP store and retrieve their
    64                             ;        data
    65                             ;
    66                             ;  COST: 8 instruction cycles (in LMM only)
    67                          
    68                             macro RAM_SETPAGE_STK( PG_NUMBER )
    69                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    70                                mov reg[STK_PP], @PG_NUMBER
    71                             ENDIF
    72  3C51                       endm
    73                          
    74                             ;-----------------------------------------------
    75                             ;  Set Current Page Macro
    76                             ;-----------------------------------------------
    77                             ;
    78                             ;  DESC: Modify CUR_PP in the large or small memory Models.
    79                             ;
    80                             ; INPUT: Constant value (e.g., >bFoo) for the RAM page number used in
    81                             ;        calculation of effective direct-mode address operands.
    82                             ;
    83                             ;  COST: 8 instruction cycles (in LMM only)
    84                          
    85                             macro RAM_SETPAGE_CUR( PG_NUMBER )
    86                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    87                                mov reg[CUR_PP], @PG_NUMBER
    88                             ENDIF
    89  3C51                       endm
    90                          
    91                             ;-----------------------------------------------
    92                             ;  Set Index Page Macro
    93                             ;-----------------------------------------------
    94                             ;
    95                             ;  DESC: Modify IDX_PP in the large or small emory Models.
    96                             ;
    97                             ; INPUT: Constant value (e.g., >caFoo) for the RAM page number used in
    98                             ;         calculation of effective index-mode address operands.
    99                             ;
   100                             ;  COST: 8 instruction cycles (in LMM only)
   101                          
   102                             macro RAM_SETPAGE_IDX( PG_NUMBER )
   103                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   104                                mov reg[IDX_PP], @PG_NUMBER
   105                             ENDIF
   106  3C51                       endm
   107                          
   108                             ;-----------------------------------------------
   109                             ;  Set MVI Read Page Macro
   110                             ;-----------------------------------------------
   111                             ;
   112                             ;  DESC: Modify MVR_PP in the large or small memory Models.
   113                             ;
   114                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   115                             ;        calculation of indirect address operands used in the
   116                             ;        "mvi A, [pFoo]" instructions.
   117                             ;
   118                             ;  COST: 8 instruction cycles (in LMM only)
   119                          
   120                             macro RAM_SETPAGE_MVR( PG_NUMBER )
   121                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   122                                mov reg[MVR_PP], @PG_NUMBER
   123                             ENDIF
   124  3C51                       endm
   125                          
   126                             ;-----------------------------------------------
   127                             ;  Set MVI Write Page Macro
   128                             ;-----------------------------------------------
   129                             ;
   130                             ;  DESC: Modify MVW_PP in the large or small memory Models.
   131                             ;
   132                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   133                             ;        calculation of indirect address operands used in the
   134                             ;        "mvi [pFoo], A" instructions.
   135                             ;
   136                             ;  COST: 8 instruction cycles (in LMM only)
   137                          
   138                             macro RAM_SETPAGE_MVW( PG_NUMBER )
   139                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   140                                mov reg[MVW_PP], @PG_NUMBER
   141                             ENDIF
   142  3C51                       endm
   143                          
   144                             ;-----------------------------------------------
   145                             ;  Force Index Page Pointer to Stack Page
   146                             ;-----------------------------------------------
   147                             ;
   148                             ;  DESC: Map index-mode operands onto the stack page by modifying IDX_PP.
   149                             ;        See also RAM_LOCK_INDEX_TO_STACKPAGE.
   150                             ;
   151                             ; INPUT: None
   152                             ;
   153                             ;  COST: 8 instruction cycles (in LMM only)
   154                          
   155                             macro RAM_SETPAGE_IDX2STK
   156                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   157                                IF ( SYSTEM_MULTIPAGE_STACK )
   158                                   mov   A, reg[STK_PP]
   159                                   mov   reg[IDX_PP], A
   160                                ELSE
   161                                   RAM_SETPAGE_IDX SYSTEM_STACK_PAGE
   162                                ENDIF
   163                             ENDIF
   164  3C51                       endm
   165                          
   166                             ;-----------------------------------------------
   167                             ;  Change Memory Mode
   168                             ;-----------------------------------------------
   169                             ;
   170                             ;  DESC: Modify FLAG_PAGEMODE bits in the large and small memory Models.
   171                             ;
   172                             ; INPUT: Constant value for PGMODE bitfield of CPU Flag register, F.
   173                             ;        See FLAG_PGMODE_{x} constants in M8C.INC.
   174                             ;
   175                             ;  COST: 8 instruction cycles (in LMM only)
   176                          
   177                             macro RAM_CHANGE_PAGE_MODE( MODE )
   178                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   179                                and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
   180                                or    F,  FLAG_PGMODE_MASK & @MODE
   181                             ENDIF
   182  3C51                       endm
   183                          
   184                             ;-----------------------------------------------
   185                             ;  Set Large Memory Model Native Paging Mode
   186                             ;-----------------------------------------------
   187                             ;
   188                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   189                             ;        paging mode *IFF* a simple "OR" is guaranteed to work---for
   190                             ;        example, in an ISR, when the PGMODE bits have been cleared
   191                             ;        to zero. If a simple "OR" is not guaranteed to work, use
   192                             ;        the slower RAM_RESTORE_NATIVE_PAGING instead.
   193                             ;
   194                             ; INPUT: none
   195                             ;
   196                             ;  COST: 4 instruction cycles (in LMM only)
   197                          
   198                             macro RAM_SET_NATIVE_PAGING
   199                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   200                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   201                                or    F,  FLAG_PGMODE_11b            ; LMM w/ IndexPage<==>StackPage
   202                             ENDIF ;  PGMODE LOCKED
   203                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   204                                or    F,  FLAG_PGMODE_10b            ; LMM with independent IndexPage
   205                             ENDIF ; PGMODE FREE
   206                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   207  3C51                       endm
   208                          
   209                             ;-----------------------------------------------
   210                             ; Restore Large Memory Model Native Paging Mode
   211                             ;-----------------------------------------------
   212                             ;
   213                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   214                             ;        paging mode. Always works because it clears the PGMODE bits
   215                             ;        before OR-ing in the new ones. See RAM_RESTORE_NATIVE_PAGING
   216                             ;        for a faster method.
   217                             ;
   218                             ; INPUT: none
   219                             ;
   220                             ;  COST: 8 instruction cycles (in LMM only)
   221                          
   222                             macro RAM_RESTORE_NATIVE_PAGING
   223                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   224                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   225                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_11b ; LMM w/ IndexPage<==>StackPage
   226                             ENDIF ;  PGMODE LOCKED
   227                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   228                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b ; LMM with independent IndexPage
   229                             ENDIF ; PGMODE FREE
   230                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   231  3C51                       endm
   232                          
   233                             ;-----------------------------------------------
   234                             ; Force indexed addr mode operands to Stack Pg
   235                             ;-----------------------------------------------
   236                             ;
   237                             ;  DESC: Force instructions that use indexed address mode to reference the
   238                             ;        stack page (as defined by STK_PP). This macro sets the "Indexed
   239                             ;        Stack Mode" bit (LSB) of the PGMODE bit field in the CPU Flag
   240                             ;        register, F. (See also RAM_SETPAGE_IDX2STK, above.)
   241                             ;
   242                             ; INPUT: none
   243                             ;
   244                             ;  COST: 4 instruction cycles (in LMM only)
   245                          
   246                             macro RAM_X_POINTS_TO_STACKPAGE
   247                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   248                                or   F, FLAG_PGMODE_01b
   249                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   250  3C51                       endm
   251                          
   252                             ;-----------------------------------------------
   253                             ;  Force indexed addr mode operands to Index Pg
   254                             ;-----------------------------------------------
   255                             ;
   256                             ;  DESC: Permit instructions that use indexed address mode to reference page
   257                             ;        zero or the page pointed to by the IDX_PP register, depending on the
   258                             ;        setting of the MSb (or "Direct Page Mode" bit) of the PGMODE bits
   259                             ;        in the CPU Flag register, F. (This macro clears the PGMODE LSb.)
   260                             ;
   261                             ; INPUT: none
   262                             ;
   263                             ;  COST: 4 instruction cycles (in LMM only)
   264                          
   265                             macro RAM_X_POINTS_TO_INDEXPAGE
   266                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   267                                and  F, ~FLAG_PGMODE_01b
   268                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   269  3C51                       endm
   270                          
   271                             ;-----------------------------------------------
   272                             ;  Function Prologue
   273                             ;-----------------------------------------------
   274                             ;
   275                             ;  Prologue for functions that run in the LMM and SMM.
   276                             ;
   277                          
   278                             macro RAM_PROLOGUE( ACTUAL_CLASS )
   279                          
   280                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   281                             ; Nothing to do
   282                             ENDIF ; RAM_USE_CLASS_1
   283                          
   284                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   285                                IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   286                                   RAM_X_POINTS_TO_STACKPAGE         ; exit native paging mode!
   287                                ENDIF
   288                             ENDIF ; RAM_USE_CLASS_2
   289                          
   290                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   291                                IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   292                                   RAM_X_POINTS_TO_INDEXPAGE         ; exit native paging mode!
   293                                ENDIF
   294                             ENDIF ; RAM_USE_CLASS_3
   295                          
   296                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   297                             ; Nothing to do
   298                             ENDIF ; RAM_USE_CLASS_4
   299                          
   300  3C51                       endm
   301                          
   302                             ;-----------------------------------------------
   303                             ;  Function Epilogue
   304                             ;-----------------------------------------------
   305                             ;
   306                             ;  Prologue for functions that run in the LMM and SMM.
   307                             ;
   308                          
   309                             macro RAM_EPILOGUE( ACTUAL_CLASS )
   310                          
   311                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   312                             ; Nothing to do
   313                             ENDIF ; RAM_USE_CLASS_1
   314                          
   315                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   316                                RAM_RESTORE_NATIVE_PAGING
   317                             ENDIF ; RAM_USE_CLASS_2
   318                          
   319                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   320                                RAM_RESTORE_NATIVE_PAGING
   321                             ENDIF ; RAM_USE_CLASS_3
   322                          
   323                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   324                             ; Nothing to do
   325                             ENDIF ; RAM_USE_CLASS_4
   326                          
   327  3C51                       endm
   328                          
   329                             ;-----------------------------------------------
   330                             ;  Preserve Register
   331                             ;-----------------------------------------------
   332                             ;
   333                             ;  DESC: Preserve a register value on the stack
   334                             ;
   335                             ; INPUT: Name or address of register in I/O Space
   336                             ;        The I/O bank is an implicit parameter. That is, this function will
   337                             ;        Access the I/O bank currently specified by the CPU Flag register.
   338                             ;
   339                             ;  USES: CPU 'A' register
   340                             ;
   341                             ;  COST: 9 instruction cycles
   342                          
   343                             macro REG_PRESERVE( IOReg )
   344                             mov   A, reg[ @IOReg ]
   345                             push  A
   346  3C51                       endm
   347                          
   348                             ;-----------------------------------------------
   349                             ;  Restore Register
   350                             ;-----------------------------------------------
   351                             ;
   352                             ;  DESC: Restore a register value from the stack
   353                             ;
   354                             ; INPUT: Name or address of register in I/O Space
   355                             ;        The I/O bank is an implicit parameter. That is, this function will
   356                             ;        Access the I/O bank currently specified by the CPU Flag register.
   357                             ;
   358                             ;  USES: CPU 'A' register
   359                             ;
   360                             ;  COST: 10 instruction cycles
   361                          
   362                             macro REG_RESTORE( IOReg )
   363                             pop   A
   364                             mov   reg[ @IOReg ], A
   365  3C51                       endm
   366                          
   367                             ;-----------------------------------------------
   368                             ;  Preserve Volatile Page Pointer Registers
   369                             ;-----------------------------------------------
   370                             ;
   371                             ;  DESC: Invoked by ISRs before switching to the LMM mode and calling
   372                             ;        functions that require on it.
   373                             ;
   374                             ; INPUT: none
   375                             ;
   376                             ;  USES: CPU 'A' register
   377                             ;
   378                             ;  COST: 45 instruction cycles (in LMM only)
   379                          
   380                             macro ISR_PRESERVE_PAGE_POINTERS
   381                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   382                                REG_PRESERVE CUR_PP
   383                                REG_PRESERVE IDX_PP
   384                                REG_PRESERVE MVR_PP
   385                                REG_PRESERVE MVW_PP
   386                             ENDIF
   387  3C51                       endm
   388                          
   389                             ;-----------------------------------------------
   390                             ;  Restore Volatile Page Pointer Registers
   391                             ;-----------------------------------------------
   392                             ;
   393                             ;  DESC: Undo for RAM_PRESERVE_PAGE_POINTERS macro. Invoked by ISRs after
   394                             ;        calling functions that run in the LMM mode and before executing
   395                             ;        the RETI instruction.
   396                             ;
   397                             ; INPUT: none
   398                             ;
   399                             ;  USES: CPU 'A' register
   400                             ;
   401                             ;  COST: 50 instruction cycles (in LMM only)
   402                          
   403                             macro ISR_RESTORE_PAGE_POINTERS
   404                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   405                                REG_RESTORE MVW_PP
   406                                REG_RESTORE MVR_PP
   407                                REG_RESTORE IDX_PP
   408                                REG_RESTORE CUR_PP
   409                             ENDIF
   410  3C51                       endm
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  FILENAME: PWM8_BL.asm
     4                          ;;   Version: 2.60, Updated on 2013/5/19 at 10:44:7
     5                          ;;  Generated by PSoC Designer 5.4.2946
     6                          ;;
     7                          ;;  DESCRIPTION: PWM8 User Module software implementation file
     8                          ;;
     9                          ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
    10                          ;;        arguments and observe the associated "Registers are volatile" policy.
    11                          ;;        This means it is the caller's responsibility to preserve any values
    12                          ;;        in the X and A registers that are still needed after the API functions
    13                          ;;        returns. For Large Memory Model devices it is also the caller's 
    14                          ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
    15                          ;;        MVW_PP registers. Even though some of these registers may not be modified
    16                          ;;        now, there is no guarantee that will remain the case in future releases.
    17                          ;;-----------------------------------------------------------------------------
    18                          ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
    19                          ;;*****************************************************************************
    20                          ;;*****************************************************************************
    21                          
    22                          include "m8c.inc"
    23                          include "PWM8_BL.inc"
    24                          include "memory.inc"
    25                          
    26                          ;-----------------------------------------------
    27                          ;  Global Symbols
    28                          ;-----------------------------------------------
    29                          export  PWM8_BL_EnableInt
    30                          export _PWM8_BL_EnableInt
    31                          export  PWM8_BL_DisableInt
    32                          export _PWM8_BL_DisableInt
    33                          export  PWM8_BL_Start
    34                          export _PWM8_BL_Start
    35                          export  PWM8_BL_Stop
    36                          export _PWM8_BL_Stop
    37                          export  PWM8_BL_WritePeriod
    38                          export _PWM8_BL_WritePeriod
    39                          export  PWM8_BL_WritePulseWidth
    40                          export _PWM8_BL_WritePulseWidth
    41                          export  PWM8_BL_bReadPulseWidth
    42                          export _PWM8_BL_bReadPulseWidth
    43                          export  PWM8_BL_bReadCounter
    44                          export _PWM8_BL_bReadCounter
    45                          
    46                          ; The following functions are deprecated and subject to omission in future releases
    47                          ;
    48                          export  bPWM8_BL_ReadPulseWidth    ; deprecated
    49                          export _bPWM8_BL_ReadPulseWidth    ; deprecated
    50                          export  bPWM8_BL_ReadCounter       ; deprecated
    51                          export _bPWM8_BL_ReadCounter       ; deprecated
    52                          
    53                          
    54                          AREA led_display_RAM (RAM,REL)
    55                          
    56                          ;-----------------------------------------------
    57                          ;  Constant Definitions
    58                          ;-----------------------------------------------
    59                          
    60  0000                    INPUT_REG_NULL:                equ 0x00    ; Clear the input register
    61                          
    62                          
    63                          ;-----------------------------------------------
    64                          ; Variable Allocation
    65                          ;-----------------------------------------------
    66                          
    67                          
    68                          AREA UserModules (ROM, REL)
    69                          
    70                          .SECTION
    71                          ;-----------------------------------------------------------------------------
    72                          ;  FUNCTION NAME: PWM8_BL_EnableInt
    73                          ;
    74                          ;  DESCRIPTION:
    75                          ;     Enables this PWM's interrupt by setting the interrupt enable mask bit
    76                          ;     associated with this User Module. This function has no effect until and
    77                          ;     unless the global interrupts are enabled (for example by using the
    78                          ;     macro M8C_EnableGInt).
    79                          ;-----------------------------------------------------------------------------
    80                          ;
    81                          ;  ARGUMENTS:    None.
    82                          ;  RETURNS:      Nothing.
    83                          ;  SIDE EFFECTS:
    84                          ;    The A and X registers may be modified by this or future implementations
    85                          ;    of this function.  The same is true for all RAM page pointer registers in
    86                          ;    the Large Memory Model.  When necessary, it is the calling function's
    87                          ;    responsibility to perserve their values across calls to fastcall16 
    88                          ;    functions.
    89                          ;
    90  2C82                     PWM8_BL_EnableInt:
    91  2C82                    _PWM8_BL_EnableInt:
    92                             RAM_PROLOGUE RAM_USE_CLASS_1
    93  2C82  43 E1 10             PWM8_BL_EnableInt_M
    94                             RAM_EPILOGUE RAM_USE_CLASS_1
    95  2C85  7F                   ret
    96                          
    97                          
    98                          .ENDSECTION
    99                          
   100                          .SECTION
   101                          ;-----------------------------------------------------------------------------
   102                          ;  FUNCTION NAME: PWM8_BL_DisableInt
   103                          ;
   104                          ;  DESCRIPTION:
   105                          ;     Disables this PWM's interrupt by clearing the interrupt enable
   106                          ;     mask bit associated with this User Module.
   107                          ;-----------------------------------------------------------------------------
   108                          ;
   109                          ;  ARGUMENTS:    None
   110                          ;  RETURNS:      Nothing
   111                          ;  SIDE EFFECTS:
   112                          ;    The A and X registers may be modified by this or future implementations
   113                          ;    of this function.  The same is true for all RAM page pointer registers in
   114                          ;    the Large Memory Model.  When necessary, it is the calling function's
   115                          ;    responsibility to perserve their values across calls to fastcall16 
   116                          ;    functions.
   117                          ;
   118  2C86                     PWM8_BL_DisableInt:
   119  2C86                    _PWM8_BL_DisableInt:
   120                             RAM_PROLOGUE RAM_USE_CLASS_1
   121  2C86  41 E1 EF             PWM8_BL_DisableInt_M
   122                             RAM_EPILOGUE RAM_USE_CLASS_1
   123  2C89  7F                   ret
   124                          
   125                          
   126                          .ENDSECTION
   127                          
   128                          .SECTION
   129                          ;-----------------------------------------------------------------------------
   130                          ;  FUNCTION NAME: PWM8_BL_Start
   131                          ;
   132                          ;  DESCRIPTION:
   133                          ;     Sets the start bit in the Control register of this user module.  The
   134                          ;     PWM will begin counting on the next input clock as soon as the
   135                          ;     enable input is asserted high.
   136                          ;-----------------------------------------------------------------------------
   137                          ;
   138                          ;  ARGUMENTS:    None
   139                          ;  RETURNS:      Nothing
   140                          ;  SIDE EFFECTS:
   141                          ;    The A and X registers may be modified by this or future implementations
   142                          ;    of this function.  The same is true for all RAM page pointer registers in
   143                          ;    the Large Memory Model.  When necessary, it is the calling function's
   144                          ;    responsibility to perserve their values across calls to fastcall16 
   145                          ;    functions.
   146                          ;
   147  2C8A                     PWM8_BL_Start:
   148  2C8A                    _PWM8_BL_Start:
   149                             RAM_PROLOGUE RAM_USE_CLASS_1
   150  2C8A  43 33 01             PWM8_BL_Start_M
   151                             RAM_EPILOGUE RAM_USE_CLASS_1
   152  2C8D  7F                   ret
   153                          
   154                          
   155                          .ENDSECTION
   156                          
   157                          .SECTION
   158                          ;-----------------------------------------------------------------------------
   159                          ;  FUNCTION NAME: PWM8_BL_Stop
   160                          ;
   161                          ;  DESCRIPTION:
   162                          ;     Disables PWM operation by clearing the start bit in the Control
   163                          ;     register.
   164                          ;-----------------------------------------------------------------------------
   165                          ;
   166                          ;  ARGUMENTS:    None
   167                          ;  RETURNS:      Nothing
   168                          ;  SIDE EFFECTS:
   169                          ;    The A and X registers may be modified by this or future implementations
   170                          ;    of this function.  The same is true for all RAM page pointer registers in
   171                          ;    the Large Memory Model.  When necessary, it is the calling function's
   172                          ;    responsibility to perserve their values across calls to fastcall16 
   173                          ;    functions.
   174                          ;
   175  2C8E                     PWM8_BL_Stop:
   176  2C8E                    _PWM8_BL_Stop:
   177                             RAM_PROLOGUE RAM_USE_CLASS_1
   178  2C8E  41 33 FE             PWM8_BL_Stop_M
   179                             RAM_EPILOGUE RAM_USE_CLASS_1
   180  2C91  7F                   ret
   181                          
   182                          
   183                          .ENDSECTION
   184                          
   185                          .SECTION
   186                          ;-----------------------------------------------------------------------------
   187                          ;  FUNCTION NAME: PWM8_BL_WritePeriod
   188                          ;
   189                          ;  DESCRIPTION:
   190                          ;     Write the 8-bit period value into the Period register (DR1).
   191                          ;-----------------------------------------------------------------------------
   192                          ;
   193                          ;  ARGUMENTS: fastcall16 BYTE bPeriodValue (passed in A)
   194                          ;  RETURNS:   Nothing
   195                          ;  SIDE EFFECTS:
   196                          ;    If the PWM user module is stopped, then this value will also be
   197                          ;    latched into the Count register (DR0).
   198                          ;    
   199                          ;    The A and X registers may be modified by this or future implementations
   200                          ;    of this function.  The same is true for all RAM page pointer registers in
   201                          ;    the Large Memory Model.  When necessary, it is the calling function's
   202                          ;    responsibility to perserve their values across calls to fastcall16 
   203                          ;    functions.
   204                          ;
   205  2C92                     PWM8_BL_WritePeriod:
   206  2C92                    _PWM8_BL_WritePeriod:
   207                             RAM_PROLOGUE RAM_USE_CLASS_1
   208  2C92  60 31                mov   reg[PWM8_BL_PERIOD_REG], A
   209                             RAM_EPILOGUE RAM_USE_CLASS_1
   210  2C94  7F                   ret
   211                          
   212                          
   213                          .ENDSECTION
   214                          
   215                          .SECTION
   216                          ;-----------------------------------------------------------------------------
   217                          ;  FUNCTION NAME: PWM8_BL_WritePulseWidth
   218                          ;
   219                          ;  DESCRIPTION:
   220                          ;     Writes compare value into the Compare register (DR2).
   221                          ;-----------------------------------------------------------------------------
   222                          ;
   223                          ;  ARGUMENTS:    fastcall16 BYTE bCompareValue (passed in A)
   224                          ;  RETURNS:      Nothing
   225                          ;  SIDE EFFECTS:
   226                          ;    The A and X registers may be modified by this or future implementations
   227                          ;    of this function.  The same is true for all RAM page pointer registers in
   228                          ;    the Large Memory Model.  When necessary, it is the calling function's
   229                          ;    responsibility to perserve their values across calls to fastcall16 
   230                          ;    functions.
   231                          ;
   232  2C95                     PWM8_BL_WritePulseWidth:
   233  2C95                    _PWM8_BL_WritePulseWidth:
   234                             RAM_PROLOGUE RAM_USE_CLASS_1
   235  2C95  60 32                mov   reg[PWM8_BL_COMPARE_REG], A
   236                             RAM_EPILOGUE RAM_USE_CLASS_1
   237  2C97  7F                   ret
   238                          
   239                          
   240                          .ENDSECTION
   241                          
   242                          .SECTION
   243                          ;-----------------------------------------------------------------------------
   244                          ;  FUNCTION NAME: PWM8_BL_bReadPulseWidth
   245                          ;
   246                          ;  DESCRIPTION:
   247                          ;     Reads the Compare register.
   248                          ;-----------------------------------------------------------------------------
   249                          ;
   250                          ;  ARGUMENTS:    None
   251                          ;  RETURNS:      fastcall16 BYTE bCompareValue (value of DR2 in the A register)
   252                          ;  SIDE EFFECTS:
   253                          ;    The A and X registers may be modified by this or future implementations
   254                          ;    of this function.  The same is true for all RAM page pointer registers in
   255                          ;    the Large Memory Model.  When necessary, it is the calling function's
   256                          ;    responsibility to perserve their values across calls to fastcall16 
   257                          ;    functions.
   258                          ;
   259  2C98                     PWM8_BL_bReadPulseWidth:
   260  2C98                    _PWM8_BL_bReadPulseWidth:
   261  2C98                     bPWM8_BL_ReadPulseWidth:                        ; this name deprecated
   262  2C98                    _bPWM8_BL_ReadPulseWidth:                        ; this name deprecated
   263                             RAM_PROLOGUE RAM_USE_CLASS_1
   264  2C98  5D 32                mov   A, reg[PWM8_BL_COMPARE_REG]
   265                             RAM_EPILOGUE RAM_USE_CLASS_1
   266  2C9A  7F                   ret
   267                          
   268                          
   269                          .ENDSECTION
   270                          
   271                          .SECTION
   272                          ;-----------------------------------------------------------------------------
   273                          ;  FUNCTION NAME: PWM8_BL_bReadCounter
   274                          ;
   275                          ;  DESCRIPTION:
   276                          ;     Returns the value in the Count register (DR0), preserving the value in
   277                          ;     the compare register (DR2). Interrupts are prevented during the transfer
   278                          ;     from the Count to the Compare registers by holding the clock low in
   279                          ;     the PSoC block.
   280                          ;-----------------------------------------------------------------------------
   281                          ;
   282                          ;  ARGUMENTS: None
   283                          ;  RETURNS:   fastcall16 BYTE bCount (value of DR0 in the A register)
   284                          ;  SIDE EFFECTS:
   285                          ;     1) The user module is stopped momentarily and one or more counts may be missed.
   286                          ;     2) The A and X registers may be modified by this or future implementations
   287                          ;        of this function.  The same is true for all RAM page pointer registers in
   288                          ;        the Large Memory Model.  When necessary, it is the calling function's
   289                          ;        responsibility to perserve their values across calls to fastcall16 
   290                          ;        functions.
   291                          ;
   292  2C9B                     PWM8_BL_bReadCounter:
   293  2C9B                    _PWM8_BL_bReadCounter:
   294  2C9B                     bPWM8_BL_ReadCounter:                           ; this name deprecated
   295  2C9B                    _bPWM8_BL_ReadCounter:                           ; this name deprecated
   296                          
   297  0000                       bOrigCompareValue:      EQU   0               ; Frame offset to temp Compare store
   298  0001                       bOrigClockSetting:      EQU   1               ; Frame offset to temp Input   store
   299  0002                       wCounter:               EQU   2               ; Frame offset to temp Count   store
   300  0003                       STACK_FRAME_SIZE:       EQU   3               ; max stack frame size is 3 bytes
   301                          
   302  2C9B  71 40                RAM_PROLOGUE RAM_USE_CLASS_2
   303  2C9D  4F                   mov   X, SP                                   ; X <- stack frame pointer
   304  2C9E  5D 32                mov   A, reg[PWM8_BL_COMPARE_REG]             ; Save the Compare register on the stack
   305  2CA0  08                   push  A                                       ;
   306  2CA1  41 33 FE             PWM8_BL_Stop_M                                ; Disable (stop) the PWM
   307  2CA4  71 10                M8C_SetBank1                                  ;
   308  2CA6  5D 31                mov   A, reg[PWM8_BL_INPUT_REG]               ; save the clock input setting
   309  2CA8  08                   push  A                                       ;   on the stack (now 2 bytes) and ...
   310                                                                           ;   hold the clock low:
   311  2CA9  62 31 00             mov   reg[PWM8_BL_INPUT_REG], INPUT_REG_NULL
   312  2CAC  70 EF                M8C_SetBank0
   313                                                                           ; Extract the Count via DR2 register
   314  2CAE  5D 30                mov   A, reg[PWM8_BL_COUNTER_REG]             ; DR2 <- DR0
   315  2CB0  5D 32                mov   A, reg[PWM8_BL_COMPARE_REG]             ; Stash the Count on the stack
   316  2CB2  08                   push  A                                       ;  -stack frame is now 3 bytes
   317  2CB3  52 00                mov   A, [X+bOrigCompareValue]                ; Restore the Compare register
   318  2CB5  60 32                mov   reg[PWM8_BL_COMPARE_REG], A
   319  2CB7  71 10                M8C_SetBank1                                  ; Restore the PWM operation:
   320  2CB9  52 01                mov   A, [X+bOrigClockSetting]                ;   First, the clock setting...
   321  2CBB  60 31                mov   reg[PWM8_BL_INPUT_REG], A               ;
   322  2CBD  70 EF                M8C_SetBank0                                  ;
   323  2CBF  43 33 01             PWM8_BL_Start_M                               ;   then re-enable the PWM.
   324  2CC2  18                   pop   A                                       ; Setup the return value
   325  2CC3  38 FE                ADD   SP, -(STACK_FRAME_SIZE-1)               ; Zap remainder of stack frame
   326                             RAM_EPILOGUE RAM_USE_CLASS_2
      + 2CC5  70 3F             	and	f, 0x3F
      + 2CC7  71 80             	or	f, 0x80
   327  2CC9  7F                   ret
HI-TECH Software Macro Assembler (PSoC MCU) V9.61
Symbol Table                                                                                               Fri Jun 12 09:25:10 2015
                PWM8_BL_Start 2C8A                PWM8_BL_INT_REG 00E1           PWM8_BL_bReadCounter 2C9B  
        _bPWM8_BL_ReadCounter 2C9B               PWM8_BL_INT_MASK 0010        PWM8_BL_WritePulseWidth 2C95  
            bOrigClockSetting 0001                         HITECH 0002            PWM8_BL_COMPARE_REG 0032  
              FLAG_PGMODE_01b 0040                FLAG_PGMODE_10b 0080           _PWM8_BL_WritePeriod 2C92  
          PWM8_BL_CONTROL_REG 0033              PWM8_BL_INPUT_REG 0031            PWM8_BL_COUNTER_REG 0030  
               INPUT_REG_NULL 0000       _PWM8_BL_WritePulseWidth 2C95      SYSTEM_LARGE_MEMORY_MODEL 0001  
      bPWM8_BL_ReadPulseWidth 2C98                   PWM8_BL_Stop 2C8E  PWM8_BL_CONTROL_REG_START_BIT 0001  
           PWM8_BL_DisableInt 2C86                      TOOLCHAIN 0002              bOrigCompareValue 0000  
      PWM8_BL_bReadPulseWidth 2C98               FLAG_PGMODE_MASK 00C0            PWM8_BL_WritePeriod 2C92  
              RAM_USE_CLASS_1 0001                RAM_USE_CLASS_2 0002                RAM_USE_CLASS_3 0004  
              RAM_USE_CLASS_4 0008           bPWM8_BL_ReadCounter 2C9B          _PWM8_BL_bReadCounter 2C9B  
               _PWM8_BL_Start 2C8A              PWM8_BL_EnableInt 2C82       _bPWM8_BL_ReadPulseWidth 2C98  
             STACK_FRAME_SIZE 0003       _PWM8_BL_bReadPulseWidth 2C98                  _PWM8_BL_Stop 2C8E  
                FLAG_XIO_MASK 0010     SYSTEM_IDXPG_TRACKS_IDX_PP 0001             PWM8_BL_PERIOD_REG 0031  
          _PWM8_BL_DisableInt 2C86     SYSTEM_IDXPG_TRACKS_STK_PP 0000             _PWM8_BL_EnableInt 2C82  
HI-TECH Software Macro Assembler (PSoC MCU) V9.61
                                                                                                           Fri Jun 12 09:25:10 2015
     1                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     2                          ;;;
     3                          ;;;  M8C.INC -- Microcontroller Device System Declarations
     4                          ;;;
     5                          ;;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
     6                          ;;;
     7                          ;;;  This file provides address constants, bit field masks and a set of macro
     8                          ;;;  facilities for the Cypress Semiconductor CY8C22045 Microcontroller devices.
     9                          ;;;
    10                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    11                          
    12                          ;;=============================================================================
    13                          ;; Definition of abbreviations used in the descriptions below
    14                          ;;  (RW)   The register or bit supports reads and writes
    15                          ;;  (W)    The register or bit is write-only
    16                          ;;  (R)    The register or bit is read-only
    17                          ;;  (#)    Access to the register is bit specific (see the family datasheet)
    18                          ;;  (RC)   The register or bit can be read, but writing a 0 will clear it,
    19                          ;;         writing a 1 will have no effect.
    20                          ;;=============================================================================
    21                          
    22                          ;;=============================================================================
    23                          ;;      System Registers
    24                          ;;=============================================================================
    25                          
    26                          ;----------------------------
    27                          ;  Flag Register Bit Fields
    28                          ;----------------------------
    29  00C0                    FLAG_PGMODE_MASK:  equ 0C0h     ; Paging control for > 256 bytes of RAM
    30  0000                    FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
    31  0040                    FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
    32  0080                    FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
    33  00C0                    FLAG_PGMODE_3:     equ 0C0h       ; Direct to CUR_PP page, indexed to STK_PP page
    34  0000                    FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
    35  0040                    FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
    36  0080                    FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
    37  00C0                    FLAG_PGMODE_11b:   equ 0C0h       ; Same as PGMODE_3
    38  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    39  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    40  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    41  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    42  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    43                          
    44                          
    45                          ;;=============================================================================
    46                          ;;      Register Space, Bank 0
    47                          ;;=============================================================================
    48                          
    49                          ;------------------------------------------------
    50                          ;  Port Registers
    51                          ;  Note: Also see this address range in Bank 1.
    52                          ;------------------------------------------------
    53                          ; Port 0
    54  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    55  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    56  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    57  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    58                          ; Port 1
    59  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    60  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    61  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    62  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    63                          ; Port 2
    64  0008                    PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
    65  0009                    PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
    66  000A                    PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
    67  000B                    PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
    68                          ; Port 3
    69  000C                    PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
    70  000D                    PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
    71  000E                    PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
    72  000F                    PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
    73                          ; Port 4
    74  0010                    PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
    75  0011                    PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
    76  0012                    PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
    77  0013                    PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
    78                          
    79                          ;------------------------------------------------
    80                          ;  Digital PSoC(tm) block Registers
    81                          ;  Note: Also see this address range in Bank 1.
    82                          ;------------------------------------------------
    83                          ; Digital PSoC block 00, Basic Type C
    84  0020                    DBC00DR0:     equ 20h          ; data register 0                          (#)
    85  0021                    DBC00DR1:     equ 21h          ; data register 1                          (W)
    86  0022                    DBC00DR2:     equ 22h          ; data register 2                          (RW)
    87  0023                    DBC00CR0:     equ 23h          ; control & status register 0              (#)
    88                          
    89                          ; Digital PSoC block 01, Basic Type C
    90  0024                    DBC01DR0:     equ 24h          ; data register 0                          (#)
    91  0025                    DBC01DR1:     equ 25h          ; data register 1                          (W)
    92  0026                    DBC01DR2:     equ 26h          ; data register 2                          (RW)
    93  0027                    DBC01CR0:     equ 27h          ; control & status register 0              (#)
    94                          
    95                          ; Digital PSoC block 02, Communications Type C
    96  0028                    DCC02DR0:     equ 28h          ; data register 0                          (#)
    97  0029                    DCC02DR1:     equ 29h          ; data register 1                          (W)
    98  002A                    DCC02DR2:     equ 2Ah          ; data register 2                          (RW)
    99  002B                    DCC02CR0:     equ 2Bh          ; control & status register 0              (#)
   100                          
   101                          ; Digital PSoC block 03, Communications Type C
   102  002C                    DCC03DR0:     equ 2Ch          ; data register 0                          (#)
   103  002D                    DCC03DR1:     equ 2Dh          ; data register 1                          (W)
   104  002E                    DCC03DR2:     equ 2Eh          ; data register 2                          (RW)
   105  002F                    DCC03CR0:     equ 2Fh          ; control & status register 0              (#)
   106                          
   107                          ; Digital PSoC block 10, Basic Type C
   108  0030                    DBC10DR0:     equ 30h          ; data register 0                          (#)
   109  0031                    DBC10DR1:     equ 31h          ; data register 1                          (W)
   110  0032                    DBC10DR2:     equ 32h          ; data register 2                          (RW)
   111  0033                    DBC10CR0:     equ 33h          ; control & status register 0              (#)
   112                          
   113                          ; Digital PSoC block 11, Basic Type C
   114  0034                    DBC11DR0:     equ 34h          ; data register 0                          (#)
   115  0035                    DBC11DR1:     equ 35h          ; data register 1                          (W)
   116  0036                    DBC11DR2:     equ 36h          ; data register 2                          (RW)
   117  0037                    DBC11CR0:     equ 37h          ; control & status register 0              (#)
   118                          
   119                          ; Digital PSoC block 12, Communications Type C
   120  0038                    DCC12DR0:     equ 38h          ; data register 0                          (#)
   121  0039                    DCC12DR1:     equ 39h          ; data register 1                          (W)
   122  003A                    DCC12DR2:     equ 3Ah          ; data register 2                          (RW)
   123  003B                    DCC12CR0:     equ 3Bh          ; control & status register 0              (#)
   124                          
   125                          ; Digital PSoC block 13, Communications Type C
   126  003C                    DCC13DR0:     equ 3Ch          ; data register 0                          (#)
   127  003D                    DCC13DR1:     equ 3Dh          ; data register 1                          (W)
   128  003E                    DCC13DR2:     equ 3Eh          ; data register 2                          (RW)
   129  003F                    DCC13CR0:     equ 3Fh          ; control & status register 0              (#)
   130                          
   131                          ;-------------------------------------
   132                          ;  Analog Control Registers
   133                          ;-------------------------------------
   134  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
   135  00C0                    AMX_IN_ACI3:          equ C0h    ; MASK: column 3 input mux
   136  0030                    AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
   137  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
   138  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
   139                          
   140  0061                    AMUX_CFG:      equ 61h          ; Analog MUX Configuration
   141  0030                    AMUX_CFG_INTCAP:       equ 30h    ;
   142  000E                    AMUX_CFG_MUXCLK:  	  equ 0Eh	 ;
   143  0001                    AMUX_CFG_EN:		  	  equ 01h	 ;
   144                          
   145                          ; old declarations DO NOT USE
   146  0061                    AMUXCFG:      equ 61h          ; Analog MUX Configuration
   147  0030                    AMUXCFG_INTCAP:       equ 30h    ;
   148  000E                    AMUXCFG_MUXCLK:  	  equ 0Eh	 ;
   149  0001                    AMUXCFG_EN:		  	  equ 01h	 ;
   150                          
   151  0062                    PWM_CR:       equ 62h          ; Pulse-Width Modulator Control
   152  0038                    PWM_CR_HIGH:          equ 38h    ; MASK: PWM high time
   153  0006                    PWM_CR_LOW:           equ 06h	 ; MASK: PWM low time
   154  0001                    PWM_CR_EN:            equ 01h	 ; MASK: Enable/Disable PWM function
   155                          
   156  0063                    ARF_CR:       equ 63h          ; Analog Reference Control
   157                          
   158  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus Register           (#)
   159  0080                    CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
   160  0040                    CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
   161  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
   162  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
   163  0008                    CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
   164  0004                    CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
   165  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
   166  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   167                          
   168  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   169  0020                    CMP_CR1_CLDIS1:       equ 20h    ; MASK: Column 1 comparator output latch
   170  0010                    CMP_CR1_CLDIS0:	      equ 10h    ; MASK: Column 0 comparator output latch
   171                          
   172  0068                    ADC0_CR:      equ 68h          ; Analog Column 0 Configuration
   173  0080                    ADC0_CR_CMPST:        equ 80h    ;
   174  0040                    ADC0_CR_LOREN:        equ 40h    ;
   175  0020                    ADC0_CR_SHEN:         equ 20h    ;
   176  0008                    ADC0_CR_CBSRC:        equ 08h    ;
   177  0004                    ADC0_CR_ADCM:         equ 04h    ;
   178  0001                    ADC0_CR_EN:	          equ 01h    ;
   179                          
   180  0069                    ADC1_CR:      equ 69h          ; Analog Column 1 Configuration
   181  0080                    ADC1_CR_CMPST:        equ 80h    ;
   182  0040                    ADC1_CR_LOREN:        equ 40h    ;
   183  0020                    ADC1_CR_SHEN:         equ 20h    ;
   184  0008                    ADC1_CR_CBSRC:        equ 08h    ;
   185  0004                    ADC1_CR_ADCM:         equ 04h    ;
   186+ 0001                    ADC1_CR_EN:	          equ 01h    ;
   187                          
   188                          ; Continuous Time PSoC block Type E Row 0 Col 0
   189  0072                    ACE00CR1:     equ 72h          ; Control register 1                       (RW)
   190  0073                    ACE00CR2:     equ 73h          ; Control register 2                       (RW)
   191                          
   192                          ; Continuous Time PSoC block Type E Row 0 Col 1
   193  0076                    ACE01CR1:     equ 76h          ; Control register 1                       (RW)
   194  0077                    ACE01CR2:     equ 77h          ; Control register 2                       (RW)
   195                          
   196                          ; Switched Cap PSoC blockType E Row 1 Col 0
   197  0080                    ASE10CR0:     equ 80h          ; Control register 0                       (RW)
   198                          
   199                          ; Switched Cap PSoC blockType E Row 1 Col 1
   200  0084                    ASE11CR0:     equ 84h          ; Control register 0                       (RW)
   201                          
   202                          ;-----------------------------------------------
   203                          ;  Global General Purpose Data Registers
   204                          ;-----------------------------------------------
   205  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   206  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   207  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   208  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   209                          
   210                          ;------------------------------------------------
   211                          ;  Row Digital Interconnects
   212                          ;
   213                          ;  Note: the following registers are mapped into
   214                          ;  both register bank 0 AND register bank 1.
   215                          ;------------------------------------------------
   216                          
   217  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   218  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   219  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   220  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   221  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   222  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   223  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   224                          
   225  00B8                    RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
   226  00B9                    RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
   227  00BA                    RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
   228  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   229  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   230  00BD                    RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
   231  00BE                    RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
   232                          
   233                          ;-----------------------------------------------
   234                          ;  Ram Page Pointers
   235                          ;-----------------------------------------------
   236  00D0                    CUR_PP:      equ 0D0h           ; Current   Page Pointer
   237  00D1                    STK_PP:      equ 0D1h           ; Stack     Page Pointer
   238  00D3                    IDX_PP:      equ 0D3h           ; Index     Page Pointer
   239  00D4                    MVR_PP:      equ 0D4h           ; MVI Read  Page Pointer
   240  00D5                    MVW_PP:      equ 0D5h           ; MVI Write Page Pointer
   241                          
   242                          ;------------------------------------------------
   243                          ;  I2C Configuration Registers
   244                          ;------------------------------------------------
   245  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   246  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   247  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   248  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   249  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   250  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   251  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   252  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   253  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   254  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   255                          
   256  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   257  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   258  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   259  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   260  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   261  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   262  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   263  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   264  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   265                          
   266  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   267                          
   268  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   269  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   270  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   271  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   272  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   273                          
   274                          ;------------------------------------------------
   275                          ;  System and Global Resource Registers
   276                          ;------------------------------------------------
   277  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   278                                                         ; Use INT_MSK0 bit field masks
   279  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   280                                                         ; Use INT_MSK1 bit field masks
   281  00DC                    INT_CLR2:     equ 0DCh          ; Interrupt Clear Register 2               (RW)
   282                                                         ; Use INT_MSK2 bit field masks
   283  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   284                                                         ; Use INT_MSK3 bit field masks
   285                          
   286  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   287  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   288  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   289                          
   290  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   291  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   292  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   293  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   294  0010                    INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
   295  0008                    INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
   296  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   297  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   298  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   299                          
   300  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   301  0080                    INT_MSK1_DCC13:            equ 80h ; MASK: enable/disable DCC13 block interrupt
   302  0040                    INT_MSK1_DCC12:            equ 40h ; MASK: enable/disable DCC12 block interrupt
   303  0020                    INT_MSK1_DBC11:            equ 20h ; MASK: enable/disable DBC11 block interrupt
   304  0010                    INT_MSK1_DBC10:            equ 10h ; MASK: enable/disable DBC10 block interrupt
   305  0008                    INT_MSK1_DCC03:            equ 08h ; MASK: enable/disable DCC03 block interrupt
   306  0004                    INT_MSK1_DCC02:            equ 04h ; MASK: enable/disable DCC02 block interrupt
   307  0002                    INT_MSK1_DBC01:            equ 02h ; MASK: enable/disable DBC01 block interrupt
   308  0001                    INT_MSK1_DBC00:            equ 01h ; MASK: enable/disable DBC00 block interrupt
   309                          
   310  00DF                    INT_MSK2:     equ DFh			; Custom block Mask Register			   (RW)
   311  0010                    INT_MSK2_SARADC:           equ 10h ; MASK: enable/disable SARADC block interrupt
   312  0020                    INT_MSK2_CSD0:             equ 20h ; MASK: enable/disable CSD0 block interrupt
   313  0040                    INT_MSK2_CSD1:             equ 40h ; MASK: enable/disable CSD1 block interrupt
   314  0080                    INT_MSK2_RTC:              equ 80h ; MASK: enable/disable RTC block interrupt
   315                          
   316  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   317  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   318                          
   319                          ;------------------------------------------------------
   320                          ;  MAC Registers
   321                          ;------------------------------------------------------
   322                          
   323  00E8                    MUL0_X:       equ 0E8h          ; Multiply Input X Register                (W)
   324  00E9                    MUL0_Y:       equ 0E9h          ; Multiply Input Y Register                (W)
   325  00EA                    MUL0_DH:      equ 0EAh          ; Multiply Result High Byte Register       (R)
   326  00EB                    MUL0_DL:      equ 0EBh          ; Multiply Result Low Byte Register        (R)
   327                          
   328  00EC                    ACC0_DR1:     equ 0ECh          ; Accumulator Data Register 1              (RW)
   329  00ED                    ACC0_DR0:     equ 0EDh          ; Accumulator Data Register 0              (RW)
   330  00EE                    ACC0_DR3:     equ 0EEh          ; Accumulator Data Register 3              (RW)
   331  00EF                    ACC0_DR2:     equ 0EFh          ; Accumulator Data Register 2              (RW)
   332                          
   333                          ; DECIMATOR Control Registers
   334  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   335  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   336                          
   337                          ;------------------------------------------------------
   338                          ;  System Status and Control Registers
   339                          ;
   340                          ;  Note: The following registers are mapped into both
   341                          ;        register bank 0 AND register bank 1.
   342                          ;------------------------------------------------------
   343  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   344                                                             ; Use FLAG_ masks defined at top of file
   345                          
   346  00FD                    DAC_D:        equ 0FDh		   ; DAC Data Register                        (RW)
   347                          
   348  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   349  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: flag, Internal Reset Status bit
   350  0010                    CPU_SCR1_SLIMO:         equ 10h	   ; MASK: Slow IMO (internal main osc) enable
   351  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   352  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   353  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   354                          
   355  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   356  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   357  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   358  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   359  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   360  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   361                          
   362                          ;------------------------------------------------------
   363                          ;  Neon Capsense Digital Control Registers
   364                          ;------------------------------------------------------
   365  0050                    CSD0_DR0_L:				equ 50h		; Capsense 0 data low 0				(RW)
   366  0054                    CSD0_DR0_H:				equ 54h		; Capsense 0 data high 0			(RW)
   367  0058                    CSD1_DR0_L:				equ 58h		; Capsense 1 data low 0				(RW)
   368  005C                    CSD1_DR0_H:				equ 5Ch		; Capsense 1 data high 0			(RW)
   369  0051                    CSD0_DR1_L:				equ 51h		; Capsense 0 data low 1				(RW)
   370  0055                    CSD0_DR1_H:				equ 55h		; Capsense 0 data high 1			(RW)
   371  0059                    CSD1_DR1_L:				equ 59h		; Capsense 1 data low 1				(RW)
   372  005D                    CSD1_DR1_H:				equ 5Dh		; Capsense 1 data high 1			(RW)
   373  0052                    CSD0_CNT_L:				equ 52h		; Capsense 0 counter low			(RW)
   374  0056                    CSD0_CNT_H:				equ 56h		; Capsense 0 counter high			(RW)
   375  005A                    CSD1_CNT_L:				equ 5Ah		; Capsense 1 counter low			(RW)
   376  005E                    CSD1_CNT_H:				equ	5Eh		; Capsense 1 counter high			(RW)
   377  0053                    CSD0_CR0:				equ 53h		; Capsense 0 control 0				(RW)
   378  005B                    CSD1_CR0:				equ 5Bh		; Capsense 1 control 0				(RW)
   379  0057                    CSD0_CR1:				equ 57h		; Capsense 0 control 1				(RW)
   380  005F                    CSD1_CR1:				equ 5Fh		; Capsense 1 control 1				(RW)
   381                          
   382                          ;------------------------------------------------------
   383                          ;  Neon Analog Registers
   384                          ;------------------------------------------------------
   385  0065                    ASY_CR:					equ 65h		; Analog Synchronization Control	(RW)
   386  006A                    ADC_DH:					equ 6Ah		; ADC data high						(RW)
   387  006B                    ADC_DL:					equ 6Bh		; ADC data low						(RW)
   388  00C8                    PWMVREF0:				equ C8h		; PWM Voltage Reference 0			(RW)
   389  00C9                    PWMVREF1:				equ C9h		; PWM Voltage Reference 1			(RW)
   390  00CB                    PWMSRC:					equ CBh		; PWM Source						(RW)
   391  00CA                    IDACMODE:				equ CAh		; IDAC Mode							(RW)
   392  00FC                    IDACR_D:				equ FCh		; Analog Mux DAC data 0				(RW)
   393  00FD                    IDACL_D:				equ FDh		; Analog Mux DAC data 1				(RW)
   394                          
   395                          ;------------------------------------------------------
   396                          ;  Neon Digital Registers
   397                          ;------------------------------------------------------
   398  00B7                    RDI0DSM:				equ B7h		; Row Digital Interconnect input select 0	(RW)
   399  00BF                    RDI1DSM:				equ BFh		; Row Digital Interconnect input select 1	(RW)
   400                          
   401                          ;------------------------------------------------------
   402                          ;  Neon Test Registers
   403                          ;------------------------------------------------------
   404  00CC                    TSCR0:					equ CCh		; Tsource 0							(RW)
   405  00CD                    TSCMPH:					equ CDh		; TSCMP high						(RW)
   406  00CE                    TSCMPL:					equ CEh		; TSCMP low							(RW)
   407  00CF                    TSCR1:					equ CFh		; Tsource 1							(RW)
   408                          
   409                          ;;=============================================================================
   410                          ;;      Register Space, Bank 1
   411                          ;;=============================================================================
   412                          
   413                          ;------------------------------------------------
   414                          ;  Port Registers
   415                          ;  Note: Also see this address range in Bank 0.
   416                          ;------------------------------------------------
   417                          ; Port 0
   418  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   419  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   420  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   421  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   422                          
   423                          ; Port 1
   424  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   425  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   426  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   427  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   428                          
   429                          ; Port 2
   430  0008                    PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
   431  0009                    PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
   432  000A                    PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
   433  000B                    PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
   434                          
   435                          ; Port 3
   436  000C                    PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
   437  000D                    PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
   438  000E                    PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
   439  000F                    PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
   440                          
   441                          ; Port 4
   442  0010                    PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
   443  0011                    PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
   444  0012                    PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
   445  0013                    PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
   446                          
   447                          ;------------------------------------------------
   448                          ;  Digital PSoC(tm) block Registers
   449                          ;  Note: Also see this address range in Bank 0.
   450                          ;------------------------------------------------
   451                          
   452                          ; Digital PSoC block 00, Basic Type C
   453  0020                    DBC00FN:      equ 20h          ; Function Register                        (RW)
   454  0021                    DBC00IN:      equ 21h          ;    Input Register                        (RW)
   455  0022                    DBC00OU:      equ 22h          ;   Output Register                        (RW)
   456  0023                    DBC00CR1:     equ 23h          ;   control & status register 1            (RW)
   457                          
   458                          ; Digital PSoC block 01, Basic Type C
   459  0024                    DBC01FN:      equ 24h          ; Function Register                        (RW)
   460  0025                    DBC01IN:      equ 25h          ;    Input Register                        (RW)
   461  0026                    DBC01OU:      equ 26h          ;   Output Register                        (RW)
   462  0027                    DBC01CR1:     equ 27h          ;   control & status register 1            (RW)
   463                          
   464                          ; Digital PSoC block 02, Communications Type C
   465  0028                    DCC02FN:      equ 28h          ; Function Register                        (RW)
   466  0029                    DCC02IN:      equ 29h          ;    Input Register                        (RW)
   467  002A                    DCC02OU:      equ 2Ah          ;   Output Register                        (RW)
   468  002B                    DBC02CR1:     equ 2Bh          ;   control & status register 1            (RW)
   469                          
   470                          ; Digital PSoC block 03, Communications Type C
   471  002C                    DCC03FN:      equ 2Ch          ; Function Register                        (RW)
   472  002D                    DCC03IN:      equ 2Dh          ;    Input Register                        (RW)
   473  002E                    DCC03OU:      equ 2Eh          ;   Output Register                        (RW)
   474  0029                    DBC03CR1:     equ 29h          ;   control & status register 1            (RW)
   475                          
   476                          ; Digital PSoC block 10, Basic Type C
   477  0030                    DBC10FN:      equ 30h          ; Function Register                        (RW)
   478  0031                    DBC10IN:      equ 31h          ;    Input Register                        (RW)
   479  0032                    DBC10OU:      equ 32h          ;   Output Register                        (RW)
   480  0033                    DBC10CR1:     equ 33h          ;   control & status register 1            (RW)
   481                          
   482                          ; Digital PSoC block 11, Basic Type C
   483  0034                    DBC11FN:      equ 34h          ; Function Register                        (RW)
   484  0035                    DBC11IN:      equ 35h          ;    Input Register                        (RW)
   485  0036                    DBC11OU:      equ 36h          ;   Output Register                        (RW)
   486  0037                    DBC11CR1:     equ 37h          ;   control & status register 1            (RW)
   487                          
   488                          ; Digital PSoC block 12, Communications Type C
   489  0038                    DCC12FN:      equ 38h          ; Function Register                        (RW)
   490  0039                    DCC12IN:      equ 39h          ;    Input Register                        (RW)
   491  003A                    DCC12OU:      equ 3Ah          ;   Output Register                        (RW)
   492  003B                    DBC12CR1:     equ 3Bh          ;   control & status register 1            (RW)
   493                          
   494                          ; Digital PSoC block 13, Communications Type C
   495  003C                    DCC13FN:      equ 3Ch          ; Function Register                        (RW)
   496  003D                    DCC13IN:      equ 3Dh          ;    Input Register                        (RW)
   497  003E                    DCC13OU:      equ 3Eh          ;   Output Register                        (RW)
   498  003F                    DBC13CR1:     equ 3Fh          ;   control & status register 1            (RW)
   499                          
   500                          ;------------------------------------------------
   501                          ;  System and Global Resource Registers
   502                          ;  Note: Also see this address range in Bank 0.
   503                          ;------------------------------------------------
   504                          
   505  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   506  00C0                    CLK_CR0_ACOLUMN_3:    equ C0h    ; MASK: Specify clock for analog cloumn
   507  0030                    CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
   508  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   509  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   510                          
   511  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   512  0018                    CLK_CR1_ACLK1:        equ 18h    ; MASK: Digital PSoC block for analog source
   513  0003                    CLK_CR1_ACLK0:        equ 03h    ; MASK: Digital PSoC block for analog source
   514                          
   515  0003                    CLK_CR1_ACLK2:        equ 03h    ; Deprecated do not use
   516                          
   517  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   518  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   519                          
   520  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   521  000F                    AMD_CR0_AMOD0:        equ 0Fh    ; MASK: Modulation source for analog column 0
   522                          
   523  0064                    CMP_GO_EN:    equ 64h          ; Comparator Bus To Global Out Enable      (RW)
   524  0080                    CMP_GO_EN_GOO5:       equ 80h    ; MASK: Selected Col 1 signal to GOO5
   525  0040                    CMP_GO_EN_GOO1:       equ 40h    ; MASK: Selected Col 1 signal to GOO1
   526  0030                    CMP_GO_EN_SEL1:       equ 30h    ; MASK: Column 1 Signal Select
   527  0008                    CMP_GO_EN_GOO4:       equ 08h    ; MASK: Selected Col 0 signal to GOO4
   528  0004                    CMP_GO_EN_GOO0:       equ 04h    ; MASK: Selected Col 0 signal to GOO0
   529  0003                    CMP_GO_EN_SEL0:       equ 03h    ; MASK: Column 0 Signal Select
   530                          
   531  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   532  000F                    AMD_CR1_AMOD1:        equ 0Fh    ; MASK: Modulation ctrl for analog column 1
   533                          
   534  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   535  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   536  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   537                          
   538  006B                    CLK_CR3:      equ 6Bh          ; Analog Clock Source Control Register 3   (RW)
   539  0040                    CLK_CR3_SYS1:         equ 40h    ; MASK: Analog Clock 1 selection
   540  0030                    CLK_CR3_DIVCLK1:      equ 30h    ; MASK: Analog Clock 1 divider
   541  0004                    CLK_CR3_SYS0:         equ 04h    ; MASK: Analog Clock 0 selection
   542  0003                    CLK_CR3_DIVCLK0:      equ 03h    ; MASK: Analog Clock 0 divider
   543                          
   544                          ;------------------------------------------------
   545                          ;  Global Digital Interconnects
   546                          ;------------------------------------------------
   547                          
   548  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   549  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   550  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   551  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   552                          
   553  00A0                    GDI_O_IN_CR:  equ 0A0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   554  00A1                    GDI_E_IN_CR:  equ 0A1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   555  00A2                    GDI_O_OU_CR:  equ 0A2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   556  00A3                    GDI_E_OU_CR:  equ 0A3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   557                          
   558  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   559  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   560                          
   561                          ;------------------------------------------------
   562                          ;  Analog Mux Bus Port Enable Bits
   563                          ;------------------------------------------------
   564  00D8                    MUX_CR0:      equ 0D8h          ; Analog Mux Port 0 Bit Enables Register
   565  00D9                    MUX_CR1:      equ 0D9h          ; Analog Mux Port 1 Bit Enables Register
   566  00DA                    MUX_CR2:      equ 0DAh          ; Analog Mux Port 2 Bit Enables Register
   567  00DB                    MUX_CR3:      equ 0DBh          ; Analog Mux Port 3 Bit Enables Register
   568  00EC                    MUX_CR4:      equ 0ECh          ; Analog Mux Port 4 Bit Enables Register
   569                          
   570                          ;------------------------------------------------
   571                          ;  Clock and System Control Registers
   572                          ;------------------------------------------------
   573                          
   574  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   575  0080                    OSC_GO_EN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   576  0040                    OSC_GO_EN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   577  0020                    OSC_GO_EN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   578  0010                    OSC_GO_EN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   579  0008                    OSC_GO_EN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   580  0004                    OSC_GO_EN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   581  0002                    OSC_GO_EN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   582  0001                    OSC_GO_EN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   583                          
   584  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   585  0003                    OSC_CR4_VC3SEL:       equ 03h    ; MASK: System VC3 Clock source
   586                          
   587  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   588                          
   589  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   590  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   591  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   592  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   593  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   594  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   595  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   596  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   597  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   598  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   599  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   600  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   601  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   602  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   603  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   604  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   605  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   606  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   607                          
   608  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   609  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   610  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   611                          
   612  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   613  0080                    OSC_CR2_PLLGAIN:      equ 80h    ; MASK: High/Low gain
   614  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   615  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   616  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   617                          
   618  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   619  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   620  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   621  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   622  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   623  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   624  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   625  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   626                          
   627  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   628  0008                    VLT_CMP_NOWRITE:      equ 08h    ; MASK: Vcc below Flash Write level
   629  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   630  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   631  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   632                          
   633  00E5                    ADC0_TR:      equ 0E5h          ; ADC Column 0 Trim Register
   634  00E6                    ADC1_TR:      equ 0E6h          ; ADC Column 1 Trim Register
   635                          
   636  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   637  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   638  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   639  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   640                          
   641  00FA                    FLS_PR1:      equ 0FAh          ; Flash Program Register 1                 (RW)
   642  0003                    FLS_PR1_BANK:         equ 03h    ; MASK: Select Active Flash Bank
   643                          
   644  00FD                    DAC_CR0:       equ 0FDh          ; Analog Mux DAC Control Register 0
   645  00DC                    DAC_CR1:       equ 0DCh          ; Analog Mux DAC Control Register 1
   646  0008                    DAC_CR_IRANGE:        equ 08h    ; MASK: Sets the DAC Range low or high
   647  0006                    DAC_CR_OSCMODE:       equ 06h    ; MASK: Defines the reset mode for AMux
   648  0001                    DAC_CR_ENABLE:        equ 01h    ; MASK: Enable/Disable DAC function
   649                          
   650                          ;------------------------------------------------
   651                          ;  I2C Control Registers
   652                          ;------------------------------------------------
   653                          
   654  00AD                    I2C_ADDR:    equ 0ADh          ; I2C Address Register (RW)
   655                          
   656                          ;------------------------------------------------------
   657                          ;  Neon Analog Registers
   658                          ;------------------------------------------------------
   659  0053                    VDAC50CR0:		equ 53h			; V DAC5 control 0				(RW)
   660  0057                    VDAC51CR0:		equ 57h			; V DAC5 control 1				(RW)
   661  00A8                    ADC_CR0:		equ A8h			; ADC control 0					(RW)
   662  00A9                    ADC_CR1:		equ A9h			; ADC control 1					(RW)
   663  00AA                    ADC_CR2:		equ AAh			; ADC control 2					(RW)
   664  00AB                    ADC_CR3TRIM:	equ ABh			; ADC control 3					(RW)
   665  00AC                    ADC_CR4:		equ ACh			; ADC control 4					(RW)
   666  00E7                    VDAC_TRIM:		equ E7h			; V DAC trim					(RW)
   667                          
   668                          ;------------------------------------------------------
   669                          ;  Neon Current Sense CMP Registers
   670                          ;------------------------------------------------------
   671  0050                    CMP0CR1:		equ 50h			; CMP0 control 1				(RW)
   672  0051                    CMP0CR2:		equ 51h			; CMP0 control 2				(RW)
   673  0054                    CMP1CR1:		equ 54h			; CMP1 control 1				(RW)
   674  0055                    CMP1CR2:		equ 55h			; CMP1 control 2				(RW)
   675  0058                    CSCMPCR0:		equ 58h			; CSCMP control 0				(RW)
   676  0059                    CSCMPGOEN:		equ 59h			; CSCMO global out enable		(RW)
   677  005A                    CSLUTCR0:		equ 5Ah			; CSLUT control 0				(RW)
   678  005B                    CMPCOLMUX:		equ 5Bh			; CMP Column Mux				(RW)
   679  005C                    CMPPWMCR:		equ 5Ch			; CMP PWM control				(RW)
   680  005D                    CMPFLTCR:		equ 5Dh			; CMP filter control			(RW)
   681  005E                    CMPCLK1:		equ 5Eh			; CMP clock 1					(RW)
   682  005F                    CMPCLK0:		equ 5Fh			; CMP clock 0					(RW)
   683                          
   684                          ;------------------------------------------------------
   685                          ;  Neon Real Time Clock Registers
   686                          ;------------------------------------------------------
   687  00A4                    RTCH:			equ A4h			; Real time current hour		(RW)
   688  00A5                    RTCM:			equ A5h			; Real time current minute		(RW)
   689  00A6                    RTCS:			equ A6h			; Real time current second		(RW)
   690  00A7                    RTCCR:			equ A7h			; Real time clock control		(RW)
   691                          
   692                          ;------------------------------------------------------
   693                          ;  Analog MUX Config Registers
   694                          ;------------------------------------------------------
   695                          
   696  006A                    AMUX_CFG1:			equ 6Ah  ; Analog MUX Configuration 1
   697  0020                    AMUX_CFG1_GOINVR:	equ 20h  ;
   698  0010                    AMUX_CFG1_GOINVL:  	equ 10h	 ;
   699  000C                    AMUX_CFG1_AMUXMODR:	equ 0Ch	 ;
   700  0003                    AMUX_CFG1_AMUXMODL:	equ 03h	 ;
   701                          
   702                          ;;=============================================================================
   703                          ;;      M8C System Macros
   704                          ;;  These macros should be used when their functions are needed.
   705                          ;;=============================================================================
   706                          
   707                          ;----------------------------------------------------
   708                          ;  Swapping Register Banks
   709                          ;----------------------------------------------------
   710                              macro M8C_SetBank0
   711                              and   F, ~FLAG_XIO_MASK
   712  3C51                        endm
   713                          
   714                              macro M8C_SetBank1
   715                              or    F, FLAG_XIO_MASK
   716  3C51                        endm
   717                          
   718                          ;----------------------------------------------------
   719                          ;  Global Interrupt Enable/Disable
   720                          ;----------------------------------------------------
   721                              macro M8C_EnableGInt
   722                              or    F, FLAG_GLOBAL_IE
   723  3C51                        endm
   724                          
   725                              macro M8C_DisableGInt
   726                              and   F, ~FLAG_GLOBAL_IE
   727  3C51                        endm
   728                          
   729                          ;----------------------------------------------------
   730                          ;  Enable/Disable Interrupt Mask
   731                          ;
   732                          ;  Use the following macros to enable/disable
   733                          ;  bits in the Interrupt mask registers,
   734                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   735                          ;
   736                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   737                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   738                          ;
   739                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   740                          ;        and MASK is the bit set to enable or disable
   741                          ;----------------------------------------------------
   742                          ; Disable Interrupt Bit Mask(s)
   743                              macro M8C_DisableIntMask
   744                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   745  3C51                        endm
   746                          
   747                          ; Enable Interrupt Bit Mask(s)
   748                              macro M8C_EnableIntMask
   749                              or    reg[@0], @1               ; enable specified interrupt enable bit
   750  3C51                        endm
   751                          
   752                          ;----------------------------------------------------
   753                          ;  Clear Posted Interrupt Flag Mask
   754                          ;
   755                          ;  Use the following macros to clear the
   756                          ;  bits in the Interrupt Clear registers,
   757                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   758                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   759                          ;
   760                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   761                          ;        and MASK is the bit set to enable or disable
   762                          ;----------------------------------------------------
   763                              macro M8C_ClearIntFlag
   764                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   765  3C51                        endm
   766                          
   767                          ;----------------------------------------------------
   768                          ;  Power-On Reset & WatchDog Timer Functions
   769                          ;----------------------------------------------------
   770                              macro M8C_EnableWatchDog
   771                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   772  3C51                        endm
   773                          
   774                              macro M8C_ClearWDT
   775                              mov   reg[RES_WDT], 00h
   776  3C51                        endm
   777                          
   778                              macro M8C_ClearWDTAndSleep
   779                              mov   reg[RES_WDT], 38h
   780  3C51                        endm
   781                          
   782                          ;----------------------------------------------------
   783                          ;  Sleep, CPU Stop & Software Reset
   784                          ;----------------------------------------------------
   785                              macro M8C_Sleep
   786                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   787                              ; The next instruction to be executed depends on the state of the
   788                              ; various interrupt enable bits. If some interrupts are enabled
   789                              ; and the global interrupts are disabled, the next instruction will
   790                              ; be the one that follows the invocation of this macro. If global
   791                              ; interrupts are also enabled then the next instruction will be
   792                              ; from the interrupt vector table. If no interrupts are enabled
   793                              ; then the CPU sleeps forever.
   794  3C51                        endm
   795                          
   796                              macro M8C_Stop
   797                              ; In general, you probably don't want to do this, but here's how:
   798                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   799                              ; Next instruction to be executed is located in the interrupt
   800                              ; vector table entry for Power-On Reset.
   801  3C51                        endm
   802                          
   803                              macro M8C_Reset
   804                              ; Restore CPU to the power-on reset state.
   805                              mov A, 0
   806                              SSC
   807                              ; Next non-supervisor instruction will be at interrupt vector 0.
   808  3C51                        endm
   809                          
   810                          ;----------------------------------------------------
   811                          ; ImageCraft Code Compressor Actions
   812                          ;----------------------------------------------------
   813                              ; Suspend Code Compressor
   814                              ; Must not span a RET or RETI instruction
   815                              ; without resuming code compression
   816                              macro Suspend_CodeCompressor
   817                              or   F, 0
   818  3C51                        endm
   819                          
   820                              ; Resume Code Compression
   821                              macro Resume_CodeCompressor
   822                              add  SP, 0
   823                              endm
      + 3C51                    
      + 3C51                    ; end of file m8c.inc
      + 3C51                    ;;*****************************************************************************
;;******************
      +                         ***********************************************************
;;  FILENAME: PWM8_BL.inc
;;   Version: 
      +                         2.60, Updated on 2013/5/19 at 10:44:7
;;  Generated by PSoC Designer 5.4.2946
;;
;;  DESCRIPTION: As
      +                         sembler declarations for the PWM8 user module interface
;;------------------------------------------
      +                         -----------------------------------
;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserve
      +                         d.
;;*****************************************************************************
;;***************
      +                         **************************************************************
   824                          
   825                          ; end of file m8c.inc
    29  00C0                    FLAG_PGMODE_MASK:  equ 0C0h     ; Paging control for > 256 bytes of RAM
    30  0000                    FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
    31  0040                    FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
    32  0080                    FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
    33  00C0                    FLAG_PGMODE_3:     equ 0C0h       ; Direct to CUR_PP page, indexed to STK_PP page
    34  0000                    FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
    35  0040                    FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
    36  0080                    FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
    37  00C0                    FLAG_PGMODE_11b:   equ 0C0h       ; Same as PGMODE_3
    38  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    39  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    40  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    41  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    42  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    43                          
    44                          
    45                          ;;=============================================================================
    46                          ;;      Register Space, Bank 0
    47                          ;;=============================================================================
    48                          
    49                          ;------------------------------------------------
    50                          ;  Port Registers
    51                          ;  Note: Also see this address range in Bank 1.
    52                          ;------------------------------------------------
    53                          ; Port 0
    54  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    55  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    56  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    57  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    58                          ; Port 1
    59  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    60  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    61  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    62  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    63                          ; Port 2
    64  0008                    PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
    65  0009                    PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
    66  000A                    PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
    67  000B                    PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
    68                          ; Port 3
    69  000C                    PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
    70  000D                    PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
    71  000E                    PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
    72  000F                    PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
    73                          ; Port 4
    74  0010                    PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
    75  0011                    PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
    76  0012                    PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
    77  0013                    PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
    78                          
    79                          ;------------------------------------------------
    80                          ;  Digital PSoC(tm) block Registers
    81                          ;  Note: Also see this address range in Bank 1.
    82                          ;------------------------------------------------
    83                          ; Digital PSoC block 00, Basic Type C
    84  0020                    DBC00DR0:     equ 20h          ; data register 0                          (#)
    85  0021                    DBC00DR1:     equ 21h          ; data register 1                          (W)
    86  0022                    DBC00DR2:     equ 22h          ; data register 2                          (RW)
    87  0023                    DBC00CR0:     equ 23h          ; control & status register 0              (#)
    88                          
    89                          ; Digital PSoC block 01, Basic Type C
    90  0024                    DBC01DR0:     equ 24h          ; data register 0                          (#)
    91  0025                    DBC01DR1:     equ 25h          ; data register 1                          (W)
    92  0026                    DBC01DR2:     equ 26h          ; data register 2                          (RW)
    93  0027                    DBC01CR0:     equ 27h          ; control & status register 0              (#)
    94                          
    95                          ; Digital PSoC block 02, Communications Type C
    96  0028                    DCC02DR0:     equ 28h          ; data register 0                          (#)
    97  0029                    DCC02DR1:     equ 29h          ; data register 1                          (W)
    98  002A                    DCC02DR2:     equ 2Ah          ; data register 2                          (RW)
    99  002B                    DCC02CR0:     equ 2Bh          ; control & status register 0              (#)
   100                          
   101                          ; Digital PSoC block 03, Communications Type C
   102  002C                    DCC03DR0:     equ 2Ch          ; data register 0                          (#)
   103  002D                    DCC03DR1:     equ 2Dh          ; data register 1                          (W)
   104  002E                    DCC03DR2:     equ 2Eh          ; data register 2                          (RW)
   105  002F                    DCC03CR0:     equ 2Fh          ; control & status register 0              (#)
   106                          
   107                          ; Digital PSoC block 10, Basic Type C
   108  0030                    DBC10DR0:     equ 30h          ; data register 0                          (#)
   109  0031                    DBC10DR1:     equ 31h          ; data register 1                          (W)
   110  0032                    DBC10DR2:     equ 32h          ; data register 2                          (RW)
   111  0033                    DBC10CR0:     equ 33h          ; control & status register 0              (#)
   112                          
   113                          ; Digital PSoC block 11, Basic Type C
   114  0034                    DBC11DR0:     equ 34h          ; data register 0                          (#)
   115  0035                    DBC11DR1:     equ 35h          ; data register 1                          (W)
   116  0036                    DBC11DR2:     equ 36h          ; data register 2                          (RW)
   117  0037                    DBC11CR0:     equ 37h          ; control & status register 0              (#)
   118                          
   119                          ; Digital PSoC block 12, Communications Type C
   120  0038                    DCC12DR0:     equ 38h          ; data register 0                          (#)
   121  0039                    DCC12DR1:     equ 39h          ; data register 1                          (W)
   122  003A                    DCC12DR2:     equ 3Ah          ; data register 2                          (RW)
   123  003B                    DCC12CR0:     equ 3Bh          ; control & status register 0              (#)
   124                          
   125                          ; Digital PSoC block 13, Communications Type C
   126  003C                    DCC13DR0:     equ 3Ch          ; data register 0                          (#)
   127  003D                    DCC13DR1:     equ 3Dh          ; data register 1                          (W)
   128  003E                    DCC13DR2:     equ 3Eh          ; data register 2                          (RW)
   129  003F                    DCC13CR0:     equ 3Fh          ; control & status register 0              (#)
   130                          
   131                          ;-------------------------------------
   132                          ;  Analog Control Registers
   133                          ;-------------------------------------
   134  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
   135  00C0                    AMX_IN_ACI3:          equ C0h    ; MASK: column 3 input mux
   136  0030                    AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
   137  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
   138  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
   139                          
   140  0061                    AMUX_CFG:      equ 61h          ; Analog MUX Configuration
   141  0030                    AMUX_CFG_INTCAP:       equ 30h    ;
   142  000E                    AMUX_CFG_MUXCLK:  	  equ 0Eh	 ;
   143  0001                    AMUX_CFG_EN:		  	  equ 01h	 ;
   144                          
   145                          ; old declarations DO NOT USE
   146  0061                    AMUXCFG:      equ 61h          ; Analog MUX Configuration
   147  0030                    AMUXCFG_INTCAP:       equ 30h    ;
   148  000E                    AMUXCFG_MUXCLK:  	  equ 0Eh	 ;
   149  0001                    AMUXCFG_EN:		  	  equ 01h	 ;
   150                          
   151  0062                    PWM_CR:       equ 62h          ; Pulse-Width Modulator Control
   152  0038                    PWM_CR_HIGH:          equ 38h    ; MASK: PWM high time
   153  0006                    PWM_CR_LOW:           equ 06h	 ; MASK: PWM low time
   154  0001                    PWM_CR_EN:            equ 01h	 ; MASK: Enable/Disable PWM function
   155                          
   156  0063                    ARF_CR:       equ 63h          ; Analog Reference Control
   157                          
   158  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus Register           (#)
   159  0080                    CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
   160  0040                    CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
   161  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
   162  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
   163  0008                    CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
   164  0004                    CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
   165  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
   166  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   167                          
   168  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   169  0020                    CMP_CR1_CLDIS1:       equ 20h    ; MASK: Column 1 comparator output latch
   170  0010                    CMP_CR1_CLDIS0:	      equ 10h    ; MASK: Column 0 comparator output latch
   171                          
   172  0068                    ADC0_CR:      equ 68h          ; Analog Column 0 Configuration
   173  0080                    ADC0_CR_CMPST:        equ 80h    ;
   174  0040                    ADC0_CR_LOREN:        equ 40h    ;
   175  0020                    ADC0_CR_SHEN:         equ 20h    ;
   176  0008                    ADC0_CR_CBSRC:        equ 08h    ;
   177  0004                    ADC0_CR_ADCM:         equ 04h    ;
   178  0001                    ADC0_CR_EN:	          equ 01h    ;
   179                          
   180  0069                    ADC1_CR:      equ 69h          ; Analog Column 1 Configuration
   181  0080                    ADC1_CR_CMPST:        equ 80h    ;
   182  0040                    ADC1_CR_LOREN:        equ 40h    ;
   183  0020                    ADC1_CR_SHEN:         equ 20h    ;
   184  0008                    ADC1_CR_CBSRC:        equ 08h    ;
   185  0004                    ADC1_CR_ADCM:         equ 04h    ;
   186  0001                    ADC1_CR_EN:	          equ 01h    ;
   187                          
   188                          ; Continuous Time PSoC block Type E Row 0 Col 0
   189  0072                    ACE00CR1:     equ 72h          ; Control register 1                       (RW)
   190  0073                    ACE00CR2:     equ 73h          ; Control register 2                       (RW)
   191                          
   192                          ; Continuous Time PSoC block Type E Row 0 Col 1
   193  0076                    ACE01CR1:     equ 76h          ; Control register 1                       (RW)
   194  0077                    ACE01CR2:     equ 77h          ; Control register 2                       (RW)
   195                          
   196                          ; Switched Cap PSoC blockType E Row 1 Col 0
   197  0080                    ASE10CR0:     equ 80h          ; Control register 0                       (RW)
   198                          
   199                          ; Switched Cap PSoC blockType E Row 1 Col 1
   200  0084                    ASE11CR0:     equ 84h          ; Control register 0                       (RW)
   201                          
   202                          ;-----------------------------------------------
   203                          ;  Global General Purpose Data Registers
   204                          ;-----------------------------------------------
   205  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   206  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   207  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   208  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   209                          
   210                          ;------------------------------------------------
   211                          ;  Row Digital Interconnects
   212                          ;
   213                          ;  Note: the following registers are mapped into
   214                          ;  both register bank 0 AND register bank 1.
   215                          ;------------------------------------------------
   216                          
   217  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   218  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   219  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   220  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   221  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   222  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   223  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   224                          
   225  00B8                    RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
   226  00B9                    RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
   227  00BA                    RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
   228  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   229  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   230  00BD                    RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
   231  00BE                    RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
   232                          
   233                          ;-----------------------------------------------
   234                          ;  Ram Page Pointers
   235                          ;-----------------------------------------------
   236  00D0                    CUR_PP:      equ 0D0h           ; Current   Page Pointer
   237  00D1                    STK_PP:      equ 0D1h           ; Stack     Page Pointer
   238  00D3                    IDX_PP:      equ 0D3h           ; Index     Page Pointer
   239  00D4                    MVR_PP:      equ 0D4h           ; MVI Read  Page Pointer
   240  00D5                    MVW_PP:      equ 0D5h           ; MVI Write Page Pointer
   241                          
   242                          ;------------------------------------------------
   243                          ;  I2C Configuration Registers
   244                          ;------------------------------------------------
   245  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   246  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   247  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   248  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   249  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   250  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   251  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   252  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   253  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   254  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   255                          
   256  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   257  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   258  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   259  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   260  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   261  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   262  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   263  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   264  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   265                          
   266  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   267                          
   268  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   269  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   270  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   271  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   272  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   273                          
   274                          ;------------------------------------------------
   275                          ;  System and Global Resource Registers
   276                          ;------------------------------------------------
   277  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   278                                                         ; Use INT_MSK0 bit field masks
   279  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   280                                                         ; Use INT_MSK1 bit field masks
   281  00DC                    INT_CLR2:     equ 0DCh          ; Interrupt Clear Register 2               (RW)
   282                                                         ; Use INT_MSK2 bit field masks
   283  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   284                                                         ; Use INT_MSK3 bit field masks
   285                          
   286  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   287  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   288  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   289                          
   290  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   291  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   292  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   293  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   294  0010                    INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
   295  0008                    INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
   296  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   297  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   298  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   299                          
   300  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   301  0080                    INT_MSK1_DCC13:            equ 80h ; MASK: enable/disable DCC13 block interrupt
   302  0040                    INT_MSK1_DCC12:            equ 40h ; MASK: enable/disable DCC12 block interrupt
   303  0020                    INT_MSK1_DBC11:            equ 20h ; MASK: enable/disable DBC11 block interrupt
   304  0010                    INT_MSK1_DBC10:            equ 10h ; MASK: enable/disable DBC10 block interrupt
   305  0008                    INT_MSK1_DCC03:            equ 08h ; MASK: enable/disable DCC03 block interrupt
   306  0004                    INT_MSK1_DCC02:            equ 04h ; MASK: enable/disable DCC02 block interrupt
   307  0002                    INT_MSK1_DBC01:            equ 02h ; MASK: enable/disable DBC01 block interrupt
   308  0001                    INT_MSK1_DBC00:            equ 01h ; MASK: enable/disable DBC00 block interrupt
   309                          
   310  00DF                    INT_MSK2:     equ DFh			; Custom block Mask Register			   (RW)
   311  0010                    INT_MSK2_SARADC:           equ 10h ; MASK: enable/disable SARADC block interrupt
   312  0020                    INT_MSK2_CSD0:             equ 20h ; MASK: enable/disable CSD0 block interrupt
   313  0040                    INT_MSK2_CSD1:             equ 40h ; MASK: enable/disable CSD1 block interrupt
   314  0080                    INT_MSK2_RTC:              equ 80h ; MASK: enable/disable RTC block interrupt
   315                          
   316  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   317  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   318                          
   319                          ;------------------------------------------------------
   320                          ;  MAC Registers
   321                          ;------------------------------------------------------
   322                          
   323  00E8                    MUL0_X:       equ 0E8h          ; Multiply Input X Register                (W)
   324  00E9                    MUL0_Y:       equ 0E9h          ; Multiply Input Y Register                (W)
   325  00EA                    MUL0_DH:      equ 0EAh          ; Multiply Result High Byte Register       (R)
   326  00EB                    MUL0_DL:      equ 0EBh          ; Multiply Result Low Byte Register        (R)
   327                          
   328  00EC                    ACC0_DR1:     equ 0ECh          ; Accumulator Data Register 1              (RW)
   329  00ED                    ACC0_DR0:     equ 0EDh          ; Accumulator Data Register 0              (RW)
   330  00EE                    ACC0_DR3:     equ 0EEh          ; Accumulator Data Register 3              (RW)
   331  00EF                    ACC0_DR2:     equ 0EFh          ; Accumulator Data Register 2              (RW)
   332                          
   333                          ; DECIMATOR Control Registers
   334  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   335  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   336                          
   337                          ;------------------------------------------------------
   338                          ;  System Status and Control Registers
   339                          ;
   340                          ;  Note: The following registers are mapped into both
   341                          ;        register bank 0 AND register bank 1.
   342                          ;------------------------------------------------------
   343  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   344                                                             ; Use FLAG_ masks defined at top of file
   345                          
   346  00FD                    DAC_D:        equ 0FDh		   ; DAC Data Register                        (RW)
   347                          
   348  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   349  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: flag, Internal Reset Status bit
   350  0010                    CPU_SCR1_SLIMO:         equ 10h	   ; MASK: Slow IMO (internal main osc) enable
   351  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   352  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   353  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   354                          
   355  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   356  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   357  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   358  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   359  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   360  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   361                          
   362                          ;------------------------------------------------------
   363                          ;  Neon Capsense Digital Control Registers
   364                          ;------------------------------------------------------
   365  0050                    CSD0_DR0_L:				equ 50h		; Capsense 0 data low 0				(RW)
   366  0054                    CSD0_DR0_H:				equ 54h		; Capsense 0 data high 0			(RW)
   367  0058                    CSD1_DR0_L:				equ 58h		; Capsense 1 data low 0				(RW)
   368  005C                    CSD1_DR0_H:				equ 5Ch		; Capsense 1 data high 0			(RW)
   369  0051                    CSD0_DR1_L:				equ 51h		; Capsense 0 data low 1				(RW)
   370  0055                    CSD0_DR1_H:				equ 55h		; Capsense 0 data high 1			(RW)
   371  0059                    CSD1_DR1_L:				equ 59h		; Capsense 1 data low 1				(RW)
   372  005D                    CSD1_DR1_H:				equ 5Dh		; Capsense 1 data high 1			(RW)
   373  0052                    CSD0_CNT_L:				equ 52h		; Capsense 0 counter low			(RW)
   374  0056                    CSD0_CNT_H:				equ 56h		; Capsense 0 counter high			(RW)
   375  005A                    CSD1_CNT_L:				equ 5Ah		; Capsense 1 counter low			(RW)
   376  005E                    CSD1_CNT_H:				equ	5Eh		; Capsense 1 counter high			(RW)
   377  0053                    CSD0_CR0:				equ 53h		; Capsense 0 control 0				(RW)
   378  005B                    CSD1_CR0:				equ 5Bh		; Capsense 1 control 0				(RW)
   379  0057                    CSD0_CR1:				equ 57h		; Capsense 0 control 1				(RW)
   380  005F                    CSD1_CR1:				equ 5Fh		; Capsense 1 control 1				(RW)
   381                          
   382                          ;------------------------------------------------------
   383                          ;  Neon Analog Registers
   384                          ;------------------------------------------------------
   385  0065                    ASY_CR:					equ 65h		; Analog Synchronization Control	(RW)
   386  006A                    ADC_DH:					equ 6Ah		; ADC data high						(RW)
   387  006B                    ADC_DL:					equ 6Bh		; ADC data low						(RW)
   388  00C8                    PWMVREF0:				equ C8h		; PWM Voltage Reference 0			(RW)
   389  00C9                    PWMVREF1:				equ C9h		; PWM Voltage Reference 1			(RW)
   390  00CB                    PWMSRC:					equ CBh		; PWM Source						(RW)
   391  00CA                    IDACMODE:				equ CAh		; IDAC Mode							(RW)
   392  00FC                    IDACR_D:				equ FCh		; Analog Mux DAC data 0				(RW)
   393  00FD                    IDACL_D:				equ FDh		; Analog Mux DAC data 1				(RW)
   394                          
   395                          ;------------------------------------------------------
   396                          ;  Neon Digital Registers
   397                          ;------------------------------------------------------
   398  00B7                    RDI0DSM:				equ B7h		; Row Digital Interconnect input select 0	(RW)
   399  00BF                    RDI1DSM:				equ BFh		; Row Digital Interconnect input select 1	(RW)
   400                          
   401                          ;------------------------------------------------------
   402                          ;  Neon Test Registers
   403                          ;------------------------------------------------------
   404  00CC                    TSCR0:					equ CCh		; Tsource 0							(RW)
   405  00CD                    TSCMPH:					equ CDh		; TSCMP high						(RW)
   406  00CE                    TSCMPL:					equ CEh		; TSCMP low							(RW)
   407  00CF                    TSCR1:					equ CFh		; Tsource 1							(RW)
   408                          
   409                          ;;=============================================================================
   410                          ;;      Register Space, Bank 1
   411                          ;;=============================================================================
   412                          
   413                          ;------------------------------------------------
   414                          ;  Port Registers
   415                          ;  Note: Also see this address range in Bank 0.
   416                          ;------------------------------------------------
   417                          ; Port 0
   418  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   419  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   420  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   421  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   422                          
   423                          ; Port 1
   424  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   425  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   426  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   427  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   428                          
   429                          ; Port 2
   430  0008                    PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
   431  0009                    PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
   432  000A                    PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
   433  000B                    PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
   434                          
   435                          ; Port 3
   436  000C                    PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
   437  000D                    PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
   438  000E                    PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
   439  000F                    PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
   440                          
   441                          ; Port 4
   442  0010                    PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
   443  0011                    PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
   444  0012                    PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
   445  0013                    PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
   446                          
   447                          ;------------------------------------------------
   448                          ;  Digital PSoC(tm) block Registers
   449                          ;  Note: Also see this address range in Bank 0.
   450                          ;------------------------------------------------
   451                          
   452                          ; Digital PSoC block 00, Basic Type C
   453  0020                    DBC00FN:      equ 20h          ; Function Register                        (RW)
   454  0021                    DBC00IN:      equ 21h          ;    Input Register                        (RW)
   455  0022                    DBC00OU:      equ 22h          ;   Output Register                        (RW)
   456  0023                    DBC00CR1:     equ 23h          ;   control & status register 1            (RW)
   457                          
   458                          ; Digital PSoC block 01, Basic Type C
   459  0024                    DBC01FN:      equ 24h          ; Function Register                        (RW)
   460  0025                    DBC01IN:      equ 25h          ;    Input Register                        (RW)
   461  0026                    DBC01OU:      equ 26h          ;   Output Register                        (RW)
   462  0027                    DBC01CR1:     equ 27h          ;   control & status register 1            (RW)
   463                          
   464                          ; Digital PSoC block 02, Communications Type C
   465  0028                    DCC02FN:      equ 28h          ; Function Register                        (RW)
   466  0029                    DCC02IN:      equ 29h          ;    Input Register                        (RW)
   467  002A                    DCC02OU:      equ 2Ah          ;   Output Register                        (RW)
   468  002B                    DBC02CR1:     equ 2Bh          ;   control & status register 1            (RW)
   469                          
   470                          ; Digital PSoC block 03, Communications Type C
   471  002C                    DCC03FN:      equ 2Ch          ; Function Register                        (RW)
   472  002D                    DCC03IN:      equ 2Dh          ;    Input Register                        (RW)
   473  002E                    DCC03OU:      equ 2Eh          ;   Output Register                        (RW)
   474  0029                    DBC03CR1:     equ 29h          ;   control & status register 1            (RW)
   475                          
   476                          ; Digital PSoC block 10, Basic Type C
   477  0030                    DBC10FN:      equ 30h          ; Function Register                        (RW)
   478  0031                    DBC10IN:      equ 31h          ;    Input Register                        (RW)
   479  0032                    DBC10OU:      equ 32h          ;   Output Register                        (RW)
   480  0033                    DBC10CR1:     equ 33h          ;   control & status register 1            (RW)
   481                          
   482                          ; Digital PSoC block 11, Basic Type C
   483  0034                    DBC11FN:      equ 34h          ; Function Register                        (RW)
   484  0035                    DBC11IN:      equ 35h          ;    Input Register                        (RW)
   485  0036                    DBC11OU:      equ 36h          ;   Output Register                        (RW)
   486  0037                    DBC11CR1:     equ 37h          ;   control & status register 1            (RW)
   487                          
   488                          ; Digital PSoC block 12, Communications Type C
   489  0038                    DCC12FN:      equ 38h          ; Function Register                        (RW)
   490  0039                    DCC12IN:      equ 39h          ;    Input Register                        (RW)
   491  003A                    DCC12OU:      equ 3Ah          ;   Output Register                        (RW)
   492  003B                    DBC12CR1:     equ 3Bh          ;   control & status register 1            (RW)
   493                          
   494                          ; Digital PSoC block 13, Communications Type C
   495  003C                    DCC13FN:      equ 3Ch          ; Function Register                        (RW)
   496  003D                    DCC13IN:      equ 3Dh          ;    Input Register                        (RW)
   497  003E                    DCC13OU:      equ 3Eh          ;   Output Register                        (RW)
   498  003F                    DBC13CR1:     equ 3Fh          ;   control & status register 1            (RW)
   499                          
   500                          ;------------------------------------------------
   501                          ;  System and Global Resource Registers
   502                          ;  Note: Also see this address range in Bank 0.
   503                          ;------------------------------------------------
   504                          
   505  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   506  00C0                    CLK_CR0_ACOLUMN_3:    equ C0h    ; MASK: Specify clock for analog cloumn
   507  0030                    CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
   508  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   509  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   510                          
   511  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   512  0018                    CLK_CR1_ACLK1:        equ 18h    ; MASK: Digital PSoC block for analog source
   513  0003                    CLK_CR1_ACLK0:        equ 03h    ; MASK: Digital PSoC block for analog source
   514                          
   515  0003                    CLK_CR1_ACLK2:        equ 03h    ; Deprecated do not use
   516                          
   517  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   518  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   519                          
   520  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   521  000F                    AMD_CR0_AMOD0:        equ 0Fh    ; MASK: Modulation source for analog column 0
   522                          
   523  0064                    CMP_GO_EN:    equ 64h          ; Comparator Bus To Global Out Enable      (RW)
   524  0080                    CMP_GO_EN_GOO5:       equ 80h    ; MASK: Selected Col 1 signal to GOO5
   525  0040                    CMP_GO_EN_GOO1:       equ 40h    ; MASK: Selected Col 1 signal to GOO1
   526  0030                    CMP_GO_EN_SEL1:       equ 30h    ; MASK: Column 1 Signal Select
   527  0008                    CMP_GO_EN_GOO4:       equ 08h    ; MASK: Selected Col 0 signal to GOO4
   528  0004                    CMP_GO_EN_GOO0:       equ 04h    ; MASK: Selected Col 0 signal to GOO0
   529  0003                    CMP_GO_EN_SEL0:       equ 03h    ; MASK: Column 0 Signal Select
   530                          
   531  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   532  000F                    AMD_CR1_AMOD1:        equ 0Fh    ; MASK: Modulation ctrl for analog column 1
   533                          
   534  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   535  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   536  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   537                          
   538  006B                    CLK_CR3:      equ 6Bh          ; Analog Clock Source Control Register 3   (RW)
   539  0040                    CLK_CR3_SYS1:         equ 40h    ; MASK: Analog Clock 1 selection
   540  0030                    CLK_CR3_DIVCLK1:      equ 30h    ; MASK: Analog Clock 1 divider
   541  0004                    CLK_CR3_SYS0:         equ 04h    ; MASK: Analog Clock 0 selection
   542  0003                    CLK_CR3_DIVCLK0:      equ 03h    ; MASK: Analog Clock 0 divider
   543                          
   544                          ;------------------------------------------------
   545                          ;  Global Digital Interconnects
   546                          ;------------------------------------------------
   547                          
   548  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   549  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   550  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   551  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   552                          
   553  00A0                    GDI_O_IN_CR:  equ 0A0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   554  00A1                    GDI_E_IN_CR:  equ 0A1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   555  00A2                    GDI_O_OU_CR:  equ 0A2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   556  00A3                    GDI_E_OU_CR:  equ 0A3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   557                          
   558  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   559  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   560                          
   561                          ;------------------------------------------------
   562                          ;  Analog Mux Bus Port Enable Bits
   563                          ;------------------------------------------------
   564  00D8                    MUX_CR0:      equ 0D8h          ; Analog Mux Port 0 Bit Enables Register
   565  00D9                    MUX_CR1:      equ 0D9h          ; Analog Mux Port 1 Bit Enables Register
   566  00DA                    MUX_CR2:      equ 0DAh          ; Analog Mux Port 2 Bit Enables Register
   567  00DB                    MUX_CR3:      equ 0DBh          ; Analog Mux Port 3 Bit Enables Register
   568  00EC                    MUX_CR4:      equ 0ECh          ; Analog Mux Port 4 Bit Enables Register
   569                          
   570                          ;------------------------------------------------
   571                          ;  Clock and System Control Registers
   572                          ;------------------------------------------------
   573                          
   574  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   575  0080                    OSC_GO_EN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   576  0040                    OSC_GO_EN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   577  0020                    OSC_GO_EN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   578  0010                    OSC_GO_EN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   579  0008                    OSC_GO_EN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   580  0004                    OSC_GO_EN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   581  0002                    OSC_GO_EN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   582  0001                    OSC_GO_EN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   583                          
   584  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   585  0003                    OSC_CR4_VC3SEL:       equ 03h    ; MASK: System VC3 Clock source
   586                          
   587  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   588                          
   589  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   590  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   591  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   592  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   593  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   594  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   595  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   596  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   597  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   598  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   599  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   600  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   601  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   602  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   603  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   604  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   605  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   606  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   607                          
   608  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   609  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   610  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   611                          
   612  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   613  0080                    OSC_CR2_PLLGAIN:      equ 80h    ; MASK: High/Low gain
   614  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   615  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   616  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   617                          
   618  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   619  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   620  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   621  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   622  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   623  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   624  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   625  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   626                          
   627  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   628  0008                    VLT_CMP_NOWRITE:      equ 08h    ; MASK: Vcc below Flash Write level
   629  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   630  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   631  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   632                          
   633  00E5                    ADC0_TR:      equ 0E5h          ; ADC Column 0 Trim Register
   634  00E6                    ADC1_TR:      equ 0E6h          ; ADC Column 1 Trim Register
   635                          
   636  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   637  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   638  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   639  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   640                          
   641  00FA                    FLS_PR1:      equ 0FAh          ; Flash Program Register 1                 (RW)
   642  0003                    FLS_PR1_BANK:         equ 03h    ; MASK: Select Active Flash Bank
   643                          
   644  00FD                    DAC_CR0:       equ 0FDh          ; Analog Mux DAC Control Register 0
   645  00DC                    DAC_CR1:       equ 0DCh          ; Analog Mux DAC Control Register 1
   646  0008                    DAC_CR_IRANGE:        equ 08h    ; MASK: Sets the DAC Range low or high
   647  0006                    DAC_CR_OSCMODE:       equ 06h    ; MASK: Defines the reset mode for AMux
   648  0001                    DAC_CR_ENABLE:        equ 01h    ; MASK: Enable/Disable DAC function
   649                          
   650                          ;------------------------------------------------
   651                          ;  I2C Control Registers
   652                          ;------------------------------------------------
   653                          
   654  00AD                    I2C_ADDR:    equ 0ADh          ; I2C Address Register (RW)
   655                          
   656                          ;------------------------------------------------------
   657                          ;  Neon Analog Registers
   658                          ;------------------------------------------------------
   659  0053                    VDAC50CR0:		equ 53h			; V DAC5 control 0				(RW)
   660  0057                    VDAC51CR0:		equ 57h			; V DAC5 control 1				(RW)
   661  00A8                    ADC_CR0:		equ A8h			; ADC control 0					(RW)
   662  00A9                    ADC_CR1:		equ A9h			; ADC control 1					(RW)
   663  00AA                    ADC_CR2:		equ AAh			; ADC control 2					(RW)
   664  00AB                    ADC_CR3TRIM:	equ ABh			; ADC control 3					(RW)
   665  00AC                    ADC_CR4:		equ ACh			; ADC control 4					(RW)
   666  00E7                    VDAC_TRIM:		equ E7h			; V DAC trim					(RW)
   667                          
   668                          ;------------------------------------------------------
   669                          ;  Neon Current Sense CMP Registers
   670                          ;------------------------------------------------------
   671  0050                    CMP0CR1:		equ 50h			; CMP0 control 1				(RW)
   672  0051                    CMP0CR2:		equ 51h			; CMP0 control 2				(RW)
   673  0054                    CMP1CR1:		equ 54h			; CMP1 control 1				(RW)
   674  0055                    CMP1CR2:		equ 55h			; CMP1 control 2				(RW)
   675  0058                    CSCMPCR0:		equ 58h			; CSCMP control 0				(RW)
   676  0059                    CSCMPGOEN:		equ 59h			; CSCMO global out enable		(RW)
   677  005A                    CSLUTCR0:		equ 5Ah			; CSLUT control 0				(RW)
   678  005B                    CMPCOLMUX:		equ 5Bh			; CMP Column Mux				(RW)
   679  005C                    CMPPWMCR:		equ 5Ch			; CMP PWM control				(RW)
   680  005D                    CMPFLTCR:		equ 5Dh			; CMP filter control			(RW)
   681  005E                    CMPCLK1:		equ 5Eh			; CMP clock 1					(RW)
   682  005F                    CMPCLK0:		equ 5Fh			; CMP clock 0					(RW)
   683                          
   684                          ;------------------------------------------------------
   685                          ;  Neon Real Time Clock Registers
   686                          ;------------------------------------------------------
   687  00A4                    RTCH:			equ A4h			; Real time current hour		(RW)
   688  00A5                    RTCM:			equ A5h			; Real time current minute		(RW)
   689  00A6                    RTCS:			equ A6h			; Real time current second		(RW)
   690  00A7                    RTCCR:			equ A7h			; Real time clock control		(RW)
   691                          
   692                          ;------------------------------------------------------
   693                          ;  Analog MUX Config Registers
   694                          ;------------------------------------------------------
   695                          
   696  006A                    AMUX_CFG1:			equ 6Ah  ; Analog MUX Configuration 1
   697  0020                    AMUX_CFG1_GOINVR:	equ 20h  ;
   698  0010                    AMUX_CFG1_GOINVL:  	equ 10h	 ;
   699  000C                    AMUX_CFG1_AMUXMODR:	equ 0Ch	 ;
   700  0003                    AMUX_CFG1_AMUXMODL:	equ 03h	 ;
   701                          
   702                          ;;=============================================================================
   703                          ;;      M8C System Macros
   704                          ;;  These macros should be used when their functions are needed.
   705                          ;;=============================================================================
   706                          
   707                          ;----------------------------------------------------
   708                          ;  Swapping Register Banks
   709                          ;----------------------------------------------------
   710                              macro M8C_SetBank0
   711                              and   F, ~FLAG_XIO_MASK
   712  3C51                        endm
   713                          
   714                              macro M8C_SetBank1
   715                              or    F, FLAG_XIO_MASK
   716  3C51                        endm
   717                          
   718                          ;----------------------------------------------------
   719                          ;  Global Interrupt Enable/Disable
   720                          ;----------------------------------------------------
   721                              macro M8C_EnableGInt
   722                              or    F, FLAG_GLOBAL_IE
   723  3C51                        endm
   724                          
   725                              macro M8C_DisableGInt
   726                              and   F, ~FLAG_GLOBAL_IE
   727  3C51                        endm
   728                          
   729                          ;----------------------------------------------------
   730                          ;  Enable/Disable Interrupt Mask
   731                          ;
   732                          ;  Use the following macros to enable/disable
   733                          ;  bits in the Interrupt mask registers,
   734                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   735                          ;
   736                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   737                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   738                          ;
   739                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   740                          ;        and MASK is the bit set to enable or disable
   741                          ;----------------------------------------------------
   742                          ; Disable Interrupt Bit Mask(s)
   743                              macro M8C_DisableIntMask
   744                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   745  3C51                        endm
   746                          
   747                          ; Enable Interrupt Bit Mask(s)
   748                              macro M8C_EnableIntMask
   749                              or    reg[@0], @1               ; enable specified interrupt enable bit
   750  3C51                        endm
   751                          
   752                          ;----------------------------------------------------
   753                          ;  Clear Posted Interrupt Flag Mask
   754                          ;
   755                          ;  Use the following macros to clear the
   756                          ;  bits in the Interrupt Clear registers,
   757                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   758                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   759                          ;
   760                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   761                          ;        and MASK is the bit set to enable or disable
   762                          ;----------------------------------------------------
   763                              macro M8C_ClearIntFlag
   764                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   765  3C51                        endm
   766                          
   767                          ;----------------------------------------------------
   768                          ;  Power-On Reset & WatchDog Timer Functions
   769                          ;----------------------------------------------------
   770                              macro M8C_EnableWatchDog
   771                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   772  3C51                        endm
   773                          
   774                              macro M8C_ClearWDT
   775                              mov   reg[RES_WDT], 00h
   776  3C51                        endm
   777                          
   778                              macro M8C_ClearWDTAndSleep
   779                              mov   reg[RES_WDT], 38h
   780  3C51                        endm
   781                          
   782                          ;----------------------------------------------------
   783                          ;  Sleep, CPU Stop & Software Reset
   784                          ;----------------------------------------------------
   785                              macro M8C_Sleep
   786                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   787                              ; The next instruction to be executed depends on the state of the
   788                              ; various interrupt enable bits. If some interrupts are enabled
   789                              ; and the global interrupts are disabled, the next instruction will
   790                              ; be the one that follows the invocation of this macro. If global
   791                              ; interrupts are also enabled then the next instruction will be
   792                              ; from the interrupt vector table. If no interrupts are enabled
   793                              ; then the CPU sleeps forever.
   794  3C51                        endm
   795                          
   796                              macro M8C_Stop
   797                              ; In general, you probably don't want to do this, but here's how:
   798                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   799                              ; Next instruction to be executed is located in the interrupt
   800                              ; vector table entry for Power-On Reset.
   801  3C51                        endm
   802                          
   803                              macro M8C_Reset
   804                              ; Restore CPU to the power-on reset state.
   805                              mov A, 0
   806                              SSC
   807                              ; Next non-supervisor instruction will be at interrupt vector 0.
   808  3C51                        endm
   809                          
   810                          ;----------------------------------------------------
   811                          ; ImageCraft Code Compressor Actions
   812                          ;----------------------------------------------------
   813                              ; Suspend Code Compressor
   814                              ; Must not span a RET or RETI instruction
   815                              ; without resuming code compression
   816                              macro Suspend_CodeCompressor
   817                              or   F, 0
   818  3C51                        endm
   819                          
   820                              ; Resume Code Compression
   821                              macro Resume_CodeCompressor
   822                              add  SP, 0
   823  3C51                        endm
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  FILENAME: PWM8_BL.inc
     4                          ;;   Version: 2.60, Updated on 2013/5/19 at 10:44:7
     5                          ;;  Generated by PSoC Designer 5.4.2946
     6                          ;;
     7                          ;;  DESCRIPTION: Assembler declarations for the PWM8 user module interface
     8                          ;;-----------------------------------------------------------------------------
     9                          ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
    10                          ;;*****************************************************************************
    11                          ;;*****************************************************************************
    12                          
    13                          include "m8c.inc"
    14                          
    15                          
    16                          ;--------------------------------------------------
    17                          ; Constants for PWM8_BL API's.
    18                          ;--------------------------------------------------
    19                          
    20  0001                    PWM8_BL_CONTROL_REG_START_BIT:             equ 0x01    ; Control register start bit
    21  00E1                    PWM8_BL_INT_REG:                           equ 0x0e1
    22  0010                    PWM8_BL_INT_MASK:                          equ 0x10
    23                          
    24                          
    25                          ;--------------------------------------------------
    26                          ; Constants for PWM8_BL user defined values
    27                          ;--------------------------------------------------
    28                          
    29  0000                    PWM8_BL_PERIOD:                            equ 0x00
    30  0000                    PWM8_BL_PULSE_WIDTH:                       equ 0x00
    31                          
    32                          
    33                          ;--------------------------------------------------
    34                          ; Register Address Constants for PWM8_BL
    35                          ;--------------------------------------------------
    36                          
    37  0030                    PWM8_BL_COUNTER_REG:                   equ 0x30   ; DR0 Count register
    38  0031                    PWM8_BL_PERIOD_REG:                    equ 0x31   ; DR1 Period register
    39  0032                    PWM8_BL_COMPARE_REG:                   equ 0x32   ; DR2 Compare register
    40  0033                    PWM8_BL_CONTROL_REG:                   equ 0x33   ; Control register
    41  0030                    PWM8_BL_FUNC_REG:                      equ 0x30   ; Function register
    42  0031                    PWM8_BL_INPUT_REG:                     equ 0x31   ; Input register
    43  0032                    PWM8_BL_OUTPUT_REG:                    equ 0x32   ; Output register
    44                          
    45                          
    46                          ;--------------------------------------------------
    47                          ; PWM8_BL Macro 'Functions'
    48                          ;--------------------------------------------------
    49                          
    50                             macro PWM8_BL_Start_M
    51                             or    reg[PWM8_BL_CONTROL_REG],  PWM8_BL_CONTROL_REG_START_BIT
    52  3C51                       endm
    53                          
    54                             macro PWM8_BL_Stop_M
    55                             and   reg[PWM8_BL_CONTROL_REG], ~PWM8_BL_CONTROL_REG_START_BIT
    56  3C51                       endm
    57                          
    58                             macro PWM8_BL_EnableInt_M
    59                             M8C_EnableIntMask PWM8_BL_INT_REG, PWM8_BL_INT_MASK
    60  3C51                       endm
    61                          
    62                             macro PWM8_BL_DisableInt_M
    63                             M8C_DisableIntMask PWM8_BL_INT_REG, PWM8_BL_INT_MASK
    64                             endm
      + 3C51                    
      + 3C51                    ; end of file PWM8_BL.inc
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;
     4                          ;;       FILENAME: Memory.inc
     5                          ;;
     6                          ;;    DESCRIPTION: Memory Model and Stack Parameter Definitions for 
     7                          ;;                 CY8C22045 PSoC devices.
     8                          ;;
     9                          ;;  LAST MODIFIED: August 17, 2004
    10                          ;;
    11                          ;;-----------------------------------------------------------------------------
    12                          ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
    13                          ;;*****************************************************************************
    14                          ;;*****************************************************************************
    15                          ;
    16                          ;
    17                          ;  ******** Define Memory Model and Stack parameters ********
    18                          ;
    19  0001                    IMAGECRAFT: equ 1   
    20  0002                    HITECH: equ 2   
    21  0002                    TOOLCHAIN: equ HITECH   
    22  0001                    SYSTEM_LARGE_MEMORY_MODEL: equ 1   
    23  0000                    SYSTEM_SMALL_MEMORY_MODEL: equ 0   
    24  0003                    SYSTEM_STACK_PAGE: equ 3   
    25  0000                    SYSTEM_STACK_PAGE_OFFSET: equ 0   
    26  0002                    SYSTEM_TOOLS: equ 2   
    27  0000                    SYSTEM_IDXPG_TRACKS_STK_PP: equ 0   
    28  0001                    SYSTEM_IDXPG_TRACKS_IDX_PP: equ 1   
    29  0000                    SYSTEM_MULTIPAGE_STACK: equ 0 
    30                          
    31                          
    32                          ;  ******* Function Class Definitions *******
    33                          ;
    34                          ;  These definitions are used to describe RAM access patterns. They provide
    35                          ;  documentation and they control prologue and epilogue macros that perform
    36                          ;  the necessary housekeeping functions for large memory model devices like
    37                          ;  the CY8C22045.
    38                          
    39  0001                    RAM_USE_CLASS_1:               equ 1   ; PUSH, POP & I/O access
    40  0002                    RAM_USE_CLASS_2:               equ 2   ; Indexed address mode on stack page
    41  0004                    RAM_USE_CLASS_3:               equ 4   ; Indexed address mode to any page
    42  0008                    RAM_USE_CLASS_4:               equ 8   ; Direct/Indirect address mode access
    43                          
    44                          ; ******* Hi Tech Specific *******
    45                          ; Turn on the expansion of all macros by default
    46                          IF (TOOLCHAIN & HITECH)
    47                          OPT EXPAND
    48                          ENDIF
    49                          ; ******* Page Pointer Manipulation Macros *******
    50                          ;
    51                          ;  ******* Page Pointer Manipulation Macros *******
    52                          ;
    53                          ;  Most of the following macros are conditionally compiled so they only
    54                          ;  produce code if the large memory model is selected.
    55                          
    56                             ;-----------------------------------------------
    57                             ;  Set Stack Page Macro
    58                             ;-----------------------------------------------
    59                             ;
    60                             ;  DESC: Modify STK_PP in the large or small memory Models.
    61                             ;
    62                             ; INPUT: Constant (e.g., SYSTEM_STACK_PAGE) that specifies the RAM page on
    63                             ;        which stack operations like PUSH and POP store and retrieve their
    64                             ;        data
    65                             ;
    66                             ;  COST: 8 instruction cycles (in LMM only)
    67                          
    68                             macro RAM_SETPAGE_STK( PG_NUMBER )
    69                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    70                                mov reg[STK_PP], @PG_NUMBER
    71                             ENDIF
    72  3C51                       endm
    73                          
    74                             ;-----------------------------------------------
    75                             ;  Set Current Page Macro
    76                             ;-----------------------------------------------
    77                             ;
    78                             ;  DESC: Modify CUR_PP in the large or small memory Models.
    79                             ;
    80                             ; INPUT: Constant value (e.g., >bFoo) for the RAM page number used in
    81                             ;        calculation of effective direct-mode address operands.
    82                             ;
    83                             ;  COST: 8 instruction cycles (in LMM only)
    84                          
    85                             macro RAM_SETPAGE_CUR( PG_NUMBER )
    86                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    87                                mov reg[CUR_PP], @PG_NUMBER
    88                             ENDIF
    89  3C51                       endm
    90                          
    91                             ;-----------------------------------------------
    92                             ;  Set Index Page Macro
    93                             ;-----------------------------------------------
    94                             ;
    95                             ;  DESC: Modify IDX_PP in the large or small emory Models.
    96                             ;
    97                             ; INPUT: Constant value (e.g., >caFoo) for the RAM page number used in
    98                             ;         calculation of effective index-mode address operands.
    99                             ;
   100                             ;  COST: 8 instruction cycles (in LMM only)
   101                          
   102                             macro RAM_SETPAGE_IDX( PG_NUMBER )
   103                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   104                                mov reg[IDX_PP], @PG_NUMBER
   105                             ENDIF
   106  3C51                       endm
   107                          
   108                             ;-----------------------------------------------
   109                             ;  Set MVI Read Page Macro
   110                             ;-----------------------------------------------
   111                             ;
   112                             ;  DESC: Modify MVR_PP in the large or small memory Models.
   113                             ;
   114                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   115                             ;        calculation of indirect address operands used in the
   116                             ;        "mvi A, [pFoo]" instructions.
   117                             ;
   118                             ;  COST: 8 instruction cycles (in LMM only)
   119                          
   120                             macro RAM_SETPAGE_MVR( PG_NUMBER )
   121                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   122                                mov reg[MVR_PP], @PG_NUMBER
   123                             ENDIF
   124  3C51                       endm
   125                          
   126                             ;-----------------------------------------------
   127                             ;  Set MVI Write Page Macro
   128                             ;-----------------------------------------------
   129                             ;
   130                             ;  DESC: Modify MVW_PP in the large or small memory Models.
   131                             ;
   132                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   133                             ;        calculation of indirect address operands used in the
   134                             ;        "mvi [pFoo], A" instructions.
   135                             ;
   136                             ;  COST: 8 instruction cycles (in LMM only)
   137                          
   138                             macro RAM_SETPAGE_MVW( PG_NUMBER )
   139                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   140                                mov reg[MVW_PP], @PG_NUMBER
   141                             ENDIF
   142  3C51                       endm
   143                          
   144                             ;-----------------------------------------------
   145                             ;  Force Index Page Pointer to Stack Page
   146                             ;-----------------------------------------------
   147                             ;
   148                             ;  DESC: Map index-mode operands onto the stack page by modifying IDX_PP.
   149                             ;        See also RAM_LOCK_INDEX_TO_STACKPAGE.
   150                             ;
   151                             ; INPUT: None
   152                             ;
   153                             ;  COST: 8 instruction cycles (in LMM only)
   154                          
   155                             macro RAM_SETPAGE_IDX2STK
   156                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   157                                IF ( SYSTEM_MULTIPAGE_STACK )
   158                                   mov   A, reg[STK_PP]
   159                                   mov   reg[IDX_PP], A
   160                                ELSE
   161                                   RAM_SETPAGE_IDX SYSTEM_STACK_PAGE
   162                                ENDIF
   163                             ENDIF
   164  3C51                       endm
   165                          
   166                             ;-----------------------------------------------
   167                             ;  Change Memory Mode
   168                             ;-----------------------------------------------
   169                             ;
   170                             ;  DESC: Modify FLAG_PAGEMODE bits in the large and small memory Models.
   171                             ;
   172                             ; INPUT: Constant value for PGMODE bitfield of CPU Flag register, F.
   173                             ;        See FLAG_PGMODE_{x} constants in M8C.INC.
   174                             ;
   175                             ;  COST: 8 instruction cycles (in LMM only)
   176                          
   177                             macro RAM_CHANGE_PAGE_MODE( MODE )
   178                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   179                                and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
   180                                or    F,  FLAG_PGMODE_MASK & @MODE
   181                             ENDIF
   182  3C51                       endm
   183                          
   184                             ;-----------------------------------------------
   185                             ;  Set Large Memory Model Native Paging Mode
   186                             ;-----------------------------------------------
   187                             ;
   188                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   189                             ;        paging mode *IFF* a simple "OR" is guaranteed to work---for
   190                             ;        example, in an ISR, when the PGMODE bits have been cleared
   191                             ;        to zero. If a simple "OR" is not guaranteed to work, use
   192                             ;        the slower RAM_RESTORE_NATIVE_PAGING instead.
   193                             ;
   194                             ; INPUT: none
   195                             ;
   196                             ;  COST: 4 instruction cycles (in LMM only)
   197                          
   198                             macro RAM_SET_NATIVE_PAGING
   199                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   200                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   201                                or    F,  FLAG_PGMODE_11b            ; LMM w/ IndexPage<==>StackPage
   202                             ENDIF ;  PGMODE LOCKED
   203                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   204                                or    F,  FLAG_PGMODE_10b            ; LMM with independent IndexPage
   205                             ENDIF ; PGMODE FREE
   206                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   207  3C51                       endm
   208                          
   209                             ;-----------------------------------------------
   210                             ; Restore Large Memory Model Native Paging Mode
   211                             ;-----------------------------------------------
   212                             ;
   213                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   214                             ;        paging mode. Always works because it clears the PGMODE bits
   215                             ;        before OR-ing in the new ones. See RAM_RESTORE_NATIVE_PAGING
   216                             ;        for a faster method.
   217                             ;
   218                             ; INPUT: none
   219                             ;
   220                             ;  COST: 8 instruction cycles (in LMM only)
   221                          
   222                             macro RAM_RESTORE_NATIVE_PAGING
   223                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   224                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   225                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_11b ; LMM w/ IndexPage<==>StackPage
   226                             ENDIF ;  PGMODE LOCKED
   227                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   228                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b ; LMM with independent IndexPage
   229                             ENDIF ; PGMODE FREE
   230                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   231  3C51                       endm
   232                          
   233                             ;-----------------------------------------------
   234                             ; Force indexed addr mode operands to Stack Pg
   235                             ;-----------------------------------------------
   236                             ;
   237                             ;  DESC: Force instructions that use indexed address mode to reference the
   238                             ;        stack page (as defined by STK_PP). This macro sets the "Indexed
   239                             ;        Stack Mode" bit (LSB) of the PGMODE bit field in the CPU Flag
   240                             ;        register, F. (See also RAM_SETPAGE_IDX2STK, above.)
   241                             ;
   242                             ; INPUT: none
   243                             ;
   244                             ;  COST: 4 instruction cycles (in LMM only)
   245                          
   246                             macro RAM_X_POINTS_TO_STACKPAGE
   247                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   248                                or   F, FLAG_PGMODE_01b
   249                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   250  3C51                       endm
   251                          
   252                             ;-----------------------------------------------
   253                             ;  Force indexed addr mode operands to Index Pg
   254                             ;-----------------------------------------------
   255                             ;
   256                             ;  DESC: Permit instructions that use indexed address mode to reference page
   257                             ;        zero or the page pointed to by the IDX_PP register, depending on the
   258                             ;        setting of the MSb (or "Direct Page Mode" bit) of the PGMODE bits
   259                             ;        in the CPU Flag register, F. (This macro clears the PGMODE LSb.)
   260                             ;
   261                             ; INPUT: none
   262                             ;
   263                             ;  COST: 4 instruction cycles (in LMM only)
   264                          
   265                             macro RAM_X_POINTS_TO_INDEXPAGE
   266                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   267                                and  F, ~FLAG_PGMODE_01b
   268                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   269  3C51                       endm
   270                          
   271                             ;-----------------------------------------------
   272                             ;  Function Prologue
   273                             ;-----------------------------------------------
   274                             ;
   275                             ;  Prologue for functions that run in the LMM and SMM.
   276                             ;
   277                          
   278                             macro RAM_PROLOGUE( ACTUAL_CLASS )
   279                          
   280                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   281                             ; Nothing to do
   282                             ENDIF ; RAM_USE_CLASS_1
   283                          
   284                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   285                                IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   286                                   RAM_X_POINTS_TO_STACKPAGE         ; exit native paging mode!
   287                                ENDIF
   288                             ENDIF ; RAM_USE_CLASS_2
   289                          
   290                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   291                                IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   292                                   RAM_X_POINTS_TO_INDEXPAGE         ; exit native paging mode!
   293                                ENDIF
   294                             ENDIF ; RAM_USE_CLASS_3
   295                          
   296                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   297                             ; Nothing to do
   298                             ENDIF ; RAM_USE_CLASS_4
   299                          
   300  3C51                       endm
   301                          
   302                             ;-----------------------------------------------
   303                             ;  Function Epilogue
   304                             ;-----------------------------------------------
   305                             ;
   306                             ;  Prologue for functions that run in the LMM and SMM.
   307                             ;
   308                          
   309                             macro RAM_EPILOGUE( ACTUAL_CLASS )
   310                          
   311                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   312                             ; Nothing to do
   313                             ENDIF ; RAM_USE_CLASS_1
   314                          
   315                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   316                                RAM_RESTORE_NATIVE_PAGING
   317                             ENDIF ; RAM_USE_CLASS_2
   318                          
   319                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   320                                RAM_RESTORE_NATIVE_PAGING
   321                             ENDIF ; RAM_USE_CLASS_3
   322                          
   323                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   324                             ; Nothing to do
   325                             ENDIF ; RAM_USE_CLASS_4
   326                          
   327  3C51                       endm
   328                          
   329                             ;-----------------------------------------------
   330                             ;  Preserve Register
   331                             ;-----------------------------------------------
   332                             ;
   333                             ;  DESC: Preserve a register value on the stack
   334                             ;
   335                             ; INPUT: Name or address of register in I/O Space
   336                             ;        The I/O bank is an implicit parameter. That is, this function will
   337                             ;        Access the I/O bank currently specified by the CPU Flag register.
   338                             ;
   339                             ;  USES: CPU 'A' register
   340                             ;
   341                             ;  COST: 9 instruction cycles
   342                          
   343                             macro REG_PRESERVE( IOReg )
   344                             mov   A, reg[ @IOReg ]
   345                             push  A
   346  3C51                       endm
   347                          
   348                             ;-----------------------------------------------
   349                             ;  Restore Register
   350                             ;-----------------------------------------------
   351                             ;
   352                             ;  DESC: Restore a register value from the stack
   353                             ;
   354                             ; INPUT: Name or address of register in I/O Space
   355                             ;        The I/O bank is an implicit parameter. That is, this function will
   356                             ;        Access the I/O bank currently specified by the CPU Flag register.
   357                             ;
   358                             ;  USES: CPU 'A' register
   359                             ;
   360                             ;  COST: 10 instruction cycles
   361                          
   362                             macro REG_RESTORE( IOReg )
   363                             pop   A
   364                             mov   reg[ @IOReg ], A
   365  3C51                       endm
   366                          
   367                             ;-----------------------------------------------
   368                             ;  Preserve Volatile Page Pointer Registers
   369                             ;-----------------------------------------------
   370                             ;
   371                             ;  DESC: Invoked by ISRs before switching to the LMM mode and calling
   372                             ;        functions that require on it.
   373                             ;
   374                             ; INPUT: none
   375                             ;
   376                             ;  USES: CPU 'A' register
   377                             ;
   378                             ;  COST: 45 instruction cycles (in LMM only)
   379                          
   380                             macro ISR_PRESERVE_PAGE_POINTERS
   381                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   382                                REG_PRESERVE CUR_PP
   383                                REG_PRESERVE IDX_PP
   384                                REG_PRESERVE MVR_PP
   385                                REG_PRESERVE MVW_PP
   386                             ENDIF
   387  3C51                       endm
   388                          
   389                             ;-----------------------------------------------
   390                             ;  Restore Volatile Page Pointer Registers
   391                             ;-----------------------------------------------
   392                             ;
   393                             ;  DESC: Undo for RAM_PRESERVE_PAGE_POINTERS macro. Invoked by ISRs after
   394                             ;        calling functions that run in the LMM mode and before executing
   395                             ;        the RETI instruction.
   396                             ;
   397                             ; INPUT: none
   398                             ;
   399                             ;  USES: CPU 'A' register
   400                             ;
   401                             ;  COST: 50 instruction cycles (in LMM only)
   402                          
   403                             macro ISR_RESTORE_PAGE_POINTERS
   404                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   405                                REG_RESTORE MVW_PP
   406                                REG_RESTORE MVR_PP
   407                                REG_RESTORE IDX_PP
   408                                REG_RESTORE CUR_PP
   409                             ENDIF
   410  3C51                       endm
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  FILENAME: PWM8_BLINT.asm
     4                          ;;   Version: 2.60, Updated on 2013/5/19 at 10:44:7
     5                          ;;  Generated by PSoC Designer 5.4.2946
     6                          ;;
     7                          ;;  DESCRIPTION: PWM8 Interrupt Service Routine
     8                          ;;-----------------------------------------------------------------------------
     9                          ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
    10                          ;;*****************************************************************************
    11                          ;;*****************************************************************************
    12                          
    13                          include "m8c.inc"
    14                          include "PWM8_BL.inc"
    15                          include "memory.inc"
    16                          
    17                          
    18                          ;-----------------------------------------------
    19                          ;  Global Symbols
    20                          ;-----------------------------------------------
    21                          export  _PWM8_BL_ISR
    22                          
    23                          
    24                          AREA InterruptRAM (RAM,REL,CON)
    25                          
    26                          ;@PSoC_UserCode_INIT@ (Do not change this line.)
    27                          ;---------------------------------------------------
    28                          ; Insert your custom declarations below this banner
    29                          ;---------------------------------------------------
    30                          
    31                          ;------------------------
    32                          ; Includes
    33                          ;------------------------
    34                          
    35                          	
    36                          ;------------------------
    37                          ;  Constant Definitions
    38                          ;------------------------
    39                          
    40                          
    41                          ;------------------------
    42                          ; Variable Allocation
    43                          ;------------------------
    44                          
    45                          
    46                          ;---------------------------------------------------
    47                          ; Insert your custom declarations above this banner
    48                          ;---------------------------------------------------
    49                          ;@PSoC_UserCode_END@ (Do not change this line.)
    50                          
    51                          
    52                          AREA UserModules (ROM, REL)
    53                          
    54                          ;-----------------------------------------------------------------------------
    55                          ;  FUNCTION NAME: _PWM8_BL_ISR
    56                          ;
    57                          ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
    58                          ;
    59                          ;-----------------------------------------------------------------------------
    60                          ;
    61                          
    62  2CCA                    _PWM8_BL_ISR:
    63                          
    64                             ;@PSoC_UserCode_BODY@ (Do not change this line.)
    65                             ;---------------------------------------------------
    66                             ; Insert your custom assembly code below this banner
    67                             ;---------------------------------------------------
    68                             ;   NOTE: interrupt service routines must preserve
    69                             ;   the values of the A and X CPU registers.
    70                             
    71                             ;---------------------------------------------------
    72                             ; Insert your custom assembly code above this banner
    73                             ;---------------------------------------------------
    74                             
    75                             ;---------------------------------------------------
    76                             ; Insert a lcall to a C function below this banner
    77                             ; and un-comment the lines between these banners
    78                             ;---------------------------------------------------
    79                             
    80                             ;PRESERVE_CPU_CONTEXT
    81                             ;lcall _My_C_Function
    82                             ;RESTORE_CPU_CONTEXT
    83                             
    84                             ;---------------------------------------------------
    85                             ; Insert a lcall to a C function above this banner
    86                             ; and un-comment the lines between these banners
    87                             ;---------------------------------------------------
    88                             ;@PSoC_UserCode_END@ (Do not change this line.)
    89                          
    90  2CCA  7E                   reti
HI-TECH Software Macro Assembler (PSoC MCU) V9.61
Symbol Table                                                                                               Fri Jun 12 09:25:10 2015
                       HITECH 0002                   _PWM8_BL_ISR 2CCA                      TOOLCHAIN 0002  
HI-TECH Software Macro Assembler (PSoC MCU) V9.61
                                                                                                           Fri Jun 12 09:25:10 2015
     1                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     2                          ;;;
     3                          ;;;  M8C.INC -- Microcontroller Device System Declarations
     4                          ;;;
     5                          ;;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
     6                          ;;;
     7                          ;;;  This file provides address constants, bit field masks and a set of macro
     8                          ;;;  facilities for the Cypress Semiconductor CY8C22045 Microcontroller devices.
     9                          ;;;
    10                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    11                          
    12                          ;;=============================================================================
    13                          ;; Definition of abbreviations used in the descriptions below
    14                          ;;  (RW)   The register or bit supports reads and writes
    15                          ;;  (W)    The register or bit is write-only
    16                          ;;  (R)    The register or bit is read-only
    17                          ;;  (#)    Access to the register is bit specific (see the family datasheet)
    18                          ;;  (RC)   The register or bit can be read, but writing a 0 will clear it,
    19                          ;;         writing a 1 will have no effect.
    20                          ;;=============================================================================
    21                          
    22                          ;;=============================================================================
    23                          ;;      System Registers
    24                          ;;=============================================================================
    25                          
    26                          ;----------------------------
    27                          ;  Flag Register Bit Fields
    28                          ;----------------------------
    29  00C0                    FLAG_PGMODE_MASK:  equ 0C0h     ; Paging control for > 256 bytes of RAM
    30  0000                    FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
    31  0040                    FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
    32  0080                    FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
    33  00C0                    FLAG_PGMODE_3:     equ 0C0h       ; Direct to CUR_PP page, indexed to STK_PP page
    34  0000                    FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
    35  0040                    FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
    36  0080                    FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
    37  00C0                    FLAG_PGMODE_11b:   equ 0C0h       ; Same as PGMODE_3
    38  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    39  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    40  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    41  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    42  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    43                          
    44                          
    45                          ;;=============================================================================
    46                          ;;      Register Space, Bank 0
    47                          ;;=============================================================================
    48                          
    49                          ;------------------------------------------------
    50                          ;  Port Registers
    51                          ;  Note: Also see this address range in Bank 1.
    52                          ;------------------------------------------------
    53                          ; Port 0
    54  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    55  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    56  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    57  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    58                          ; Port 1
    59  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    60  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    61  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    62  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    63                          ; Port 2
    64  0008                    PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
    65  0009                    PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
    66  000A                    PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
    67  000B                    PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
    68                          ; Port 3
    69  000C                    PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
    70  000D                    PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
    71  000E                    PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
    72  000F                    PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
    73                          ; Port 4
    74  0010                    PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
    75  0011                    PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
    76  0012                    PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
    77  0013                    PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
    78                          
    79                          ;------------------------------------------------
    80                          ;  Digital PSoC(tm) block Registers
    81                          ;  Note: Also see this address range in Bank 1.
    82                          ;------------------------------------------------
    83                          ; Digital PSoC block 00, Basic Type C
    84  0020                    DBC00DR0:     equ 20h          ; data register 0                          (#)
    85  0021                    DBC00DR1:     equ 21h          ; data register 1                          (W)
    86  0022                    DBC00DR2:     equ 22h          ; data register 2                          (RW)
    87  0023                    DBC00CR0:     equ 23h          ; control & status register 0              (#)
    88                          
    89                          ; Digital PSoC block 01, Basic Type C
    90  0024                    DBC01DR0:     equ 24h          ; data register 0                          (#)
    91  0025                    DBC01DR1:     equ 25h          ; data register 1                          (W)
    92  0026                    DBC01DR2:     equ 26h          ; data register 2                          (RW)
    93  0027                    DBC01CR0:     equ 27h          ; control & status register 0              (#)
    94                          
    95                          ; Digital PSoC block 02, Communications Type C
    96  0028                    DCC02DR0:     equ 28h          ; data register 0                          (#)
    97  0029                    DCC02DR1:     equ 29h          ; data register 1                          (W)
    98  002A                    DCC02DR2:     equ 2Ah          ; data register 2                          (RW)
    99  002B                    DCC02CR0:     equ 2Bh          ; control & status register 0              (#)
   100                          
   101                          ; Digital PSoC block 03, Communications Type C
   102  002C                    DCC03DR0:     equ 2Ch          ; data register 0                          (#)
   103  002D                    DCC03DR1:     equ 2Dh          ; data register 1                          (W)
   104  002E                    DCC03DR2:     equ 2Eh          ; data register 2                          (RW)
   105  002F                    DCC03CR0:     equ 2Fh          ; control & status register 0              (#)
   106                          
   107                          ; Digital PSoC block 10, Basic Type C
   108  0030                    DBC10DR0:     equ 30h          ; data register 0                          (#)
   109  0031                    DBC10DR1:     equ 31h          ; data register 1                          (W)
   110  0032                    DBC10DR2:     equ 32h          ; data register 2                          (RW)
   111  0033                    DBC10CR0:     equ 33h          ; control & status register 0              (#)
   112                          
   113                          ; Digital PSoC block 11, Basic Type C
   114  0034                    DBC11DR0:     equ 34h          ; data register 0                          (#)
   115  0035                    DBC11DR1:     equ 35h          ; data register 1                          (W)
   116  0036                    DBC11DR2:     equ 36h          ; data register 2                          (RW)
   117  0037                    DBC11CR0:     equ 37h          ; control & status register 0              (#)
   118                          
   119                          ; Digital PSoC block 12, Communications Type C
   120  0038                    DCC12DR0:     equ 38h          ; data register 0                          (#)
   121  0039                    DCC12DR1:     equ 39h          ; data register 1                          (W)
   122  003A                    DCC12DR2:     equ 3Ah          ; data register 2                          (RW)
   123  003B                    DCC12CR0:     equ 3Bh          ; control & status register 0              (#)
   124                          
   125                          ; Digital PSoC block 13, Communications Type C
   126  003C                    DCC13DR0:     equ 3Ch          ; data register 0                          (#)
   127  003D                    DCC13DR1:     equ 3Dh          ; data register 1                          (W)
   128  003E                    DCC13DR2:     equ 3Eh          ; data register 2                          (RW)
   129  003F                    DCC13CR0:     equ 3Fh          ; control & status register 0              (#)
   130                          
   131                          ;-------------------------------------
   132                          ;  Analog Control Registers
   133                          ;-------------------------------------
   134  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
   135  00C0                    AMX_IN_ACI3:          equ C0h    ; MASK: column 3 input mux
   136  0030                    AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
   137  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
   138  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
   139                          
   140  0061                    AMUX_CFG:      equ 61h          ; Analog MUX Configuration
   141  0030                    AMUX_CFG_INTCAP:       equ 30h    ;
   142  000E                    AMUX_CFG_MUXCLK:  	  equ 0Eh	 ;
   143  0001                    AMUX_CFG_EN:		  	  equ 01h	 ;
   144                          
   145                          ; old declarations DO NOT USE
   146  0061                    AMUXCFG:      equ 61h          ; Analog MUX Configuration
   147  0030                    AMUXCFG_INTCAP:       equ 30h    ;
   148  000E                    AMUXCFG_MUXCLK:  	  equ 0Eh	 ;
   149  0001                    AMUXCFG_EN:		  	  equ 01h	 ;
   150                          
   151  0062                    PWM_CR:       equ 62h          ; Pulse-Width Modulator Control
   152  0038                    PWM_CR_HIGH:          equ 38h    ; MASK: PWM high time
   153  0006                    PWM_CR_LOW:           equ 06h	 ; MASK: PWM low time
   154  0001                    PWM_CR_EN:            equ 01h	 ; MASK: Enable/Disable PWM function
   155                          
   156  0063                    ARF_CR:       equ 63h          ; Analog Reference Control
   157                          
   158  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus Register           (#)
   159  0080                    CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
   160  0040                    CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
   161  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
   162  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
   163  0008                    CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
   164  0004                    CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
   165  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
   166  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   167                          
   168  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   169  0020                    CMP_CR1_CLDIS1:       equ 20h    ; MASK: Column 1 comparator output latch
   170  0010                    CMP_CR1_CLDIS0:	      equ 10h    ; MASK: Column 0 comparator output latch
   171                          
   172  0068                    ADC0_CR:      equ 68h          ; Analog Column 0 Configuration
   173  0080                    ADC0_CR_CMPST:        equ 80h    ;
   174  0040                    ADC0_CR_LOREN:        equ 40h    ;
   175  0020                    ADC0_CR_SHEN:         equ 20h    ;
   176  0008                    ADC0_CR_CBSRC:        equ 08h    ;
   177  0004                    ADC0_CR_ADCM:         equ 04h    ;
   178  0001                    ADC0_CR_EN:	          equ 01h    ;
   179                          
   180  0069                    ADC1_CR:      equ 69h          ; Analog Column 1 Configuration
   181  0080                    ADC1_CR_CMPST:        equ 80h    ;
   182  0040                    ADC1_CR_LOREN:        equ 40h    ;
   183  0020                    ADC1_CR_SHEN:         equ 20h    ;
   184  0008                    ADC1_CR_CBSRC:        equ 08h    ;
   185  0004                    ADC1_CR_ADCM:         equ 04h    ;
   186  0001                    ADC1_CR_EN:	          equ 01h    ;
   187                          
   188                          ; Continuous Time PSoC block Type E Row 0 Col 0
   189  0072                    ACE00CR1:     equ 72h          ; Control register 1                       (RW)
   190  0073                    ACE00CR2:     equ 73h          ; Control register 2                       (RW)
   191                          
   192                          ; Continuous Time PSoC block Type E Row 0 Col 1
   193  0076                    ACE01CR1:     equ 76h          ; Control register 1                       (RW)
   194  0077                    ACE01CR2:     equ 77h          ; Control register 2                       (RW)
   195                          
   196                          ; Switched Cap PSoC blockType E Row 1 Col 0
   197  0080                    ASE10CR0:     equ 80h          ; Control register 0                       (RW)
   198                          
   199                          ; Switched Cap PSoC blockType E Row 1 Col 1
   200  0084                    ASE11CR0:     equ 84h          ; Control register 0                       (RW)
   201                          
   202                          ;-----------------------------------------------
   203                          ;  Global General Purpose Data Registers
   204                          ;-----------------------------------------------
   205  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   206  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   207  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   208  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   209                          
   210                          ;------------------------------------------------
   211                          ;  Row Digital Interconnects
   212                          ;
   213                          ;  Note: the following registers are mapped into
   214                          ;  both register bank 0 AND register bank 1.
   215                          ;------------------------------------------------
   216                          
   217  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   218  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   219  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   220  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   221  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   222  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   223  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   224                          
   225  00B8                    RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
   226  00B9                    RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
   227  00BA                    RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
   228  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   229  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   230  00BD                    RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
   231  00BE                    RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
   232                          
   233                          ;-----------------------------------------------
   234                          ;  Ram Page Pointers
   235                          ;-----------------------------------------------
   236  00D0                    CUR_PP:      equ 0D0h           ; Current   Page Pointer
   237  00D1                    STK_PP:      equ 0D1h           ; Stack     Page Pointer
   238  00D3                    IDX_PP:      equ 0D3h           ; Index     Page Pointer
   239  00D4                    MVR_PP:      equ 0D4h           ; MVI Read  Page Pointer
   240  00D5                    MVW_PP:      equ 0D5h           ; MVI Write Page Pointer
   241                          
   242                          ;------------------------------------------------
   243                          ;  I2C Configuration Registers
   244                          ;------------------------------------------------
   245  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   246  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   247  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   248  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   249  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   250  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   251  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   252  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   253  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   254  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   255                          
   256  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   257  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   258  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   259  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   260  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   261  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   262  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   263  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   264  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   265                          
   266  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   267                          
   268  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   269  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   270  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   271  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   272  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   273                          
   274                          ;------------------------------------------------
   275                          ;  System and Global Resource Registers
   276                          ;------------------------------------------------
   277  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   278                                                         ; Use INT_MSK0 bit field masks
   279  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   280                                                         ; Use INT_MSK1 bit field masks
   281  00DC                    INT_CLR2:     equ 0DCh          ; Interrupt Clear Register 2               (RW)
   282                                                         ; Use INT_MSK2 bit field masks
   283  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   284                                                         ; Use INT_MSK3 bit field masks
   285                          
   286  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   287  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   288  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   289                          
   290  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   291  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   292  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   293  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   294  0010                    INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
   295  0008                    INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
   296  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   297  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   298  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   299                          
   300  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   301  0080                    INT_MSK1_DCC13:            equ 80h ; MASK: enable/disable DCC13 block interrupt
   302  0040                    INT_MSK1_DCC12:            equ 40h ; MASK: enable/disable DCC12 block interrupt
   303  0020                    INT_MSK1_DBC11:            equ 20h ; MASK: enable/disable DBC11 block interrupt
   304  0010                    INT_MSK1_DBC10:            equ 10h ; MASK: enable/disable DBC10 block interrupt
   305  0008                    INT_MSK1_DCC03:            equ 08h ; MASK: enable/disable DCC03 block interrupt
   306  0004                    INT_MSK1_DCC02:            equ 04h ; MASK: enable/disable DCC02 block interrupt
   307+ 0002                    INT_MSK1_DBC01:            equ 02h ; MASK: enable/disable DBC01 block interrupt
   308  0001                    INT_MSK1_DBC00:            equ 01h ; MASK: enable/disable DBC00 block interrupt
   309                          
   310  00DF                    INT_MSK2:     equ DFh			; Custom block Mask Register			   (RW)
   311  0010                    INT_MSK2_SARADC:           equ 10h ; MASK: enable/disable SARADC block interrupt
   312  0020                    INT_MSK2_CSD0:             equ 20h ; MASK: enable/disable CSD0 block interrupt
   313  0040                    INT_MSK2_CSD1:             equ 40h ; MASK: enable/disable CSD1 block interrupt
   314  0080                    INT_MSK2_RTC:              equ 80h ; MASK: enable/disable RTC block interrupt
   315                          
   316  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   317  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   318                          
   319                          ;------------------------------------------------------
   320                          ;  MAC Registers
   321                          ;------------------------------------------------------
   322                          
   323  00E8                    MUL0_X:       equ 0E8h          ; Multiply Input X Register                (W)
   324  00E9                    MUL0_Y:       equ 0E9h          ; Multiply Input Y Register                (W)
   325  00EA                    MUL0_DH:      equ 0EAh          ; Multiply Result High Byte Register       (R)
   326  00EB                    MUL0_DL:      equ 0EBh          ; Multiply Result Low Byte Register        (R)
   327                          
   328  00EC                    ACC0_DR1:     equ 0ECh          ; Accumulator Data Register 1              (RW)
   329  00ED                    ACC0_DR0:     equ 0EDh          ; Accumulator Data Register 0              (RW)
   330  00EE                    ACC0_DR3:     equ 0EEh          ; Accumulator Data Register 3              (RW)
   331+ 00EF                    ACC0_DR2:     equ 0EFh          ; Accumulator Data Register 2              (RW)
   332+                         
   333+                         ; DECIMATOR Control Registers
   334+ 00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   335  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   336                          
   337                          ;------------------------------------------------------
   338                          ;  System Status and Control Registers
   339                          ;
   340                          ;  Note: The following registers are mapped into both
   341                          ;        register bank 0 AND register bank 1.
   342                          ;------------------------------------------------------
   343  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   344                                                             ; Use FLAG_ masks defined at top of file
   345                          
   346  00FD                    DAC_D:        equ 0FDh		   ; DAC Data Register                        (RW)
   347                          
   348  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   349  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: flag, Internal Reset Status bit
   350  0010                    CPU_SCR1_SLIMO:         equ 10h	   ; MASK: Slow IMO (internal main osc) enable
   351  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   352  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   353  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   354                          
   355  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   356  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   357  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   358  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   359  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   360  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   361                          
   362                          ;------------------------------------------------------
   363                          ;  Neon Capsense Digital Control Registers
   364                          ;------------------------------------------------------
   365  0050                    CSD0_DR0_L:				equ 50h		; Capsense 0 data low 0				(RW)
   366  0054                    CSD0_DR0_H:				equ 54h		; Capsense 0 data high 0			(RW)
   367  0058                    CSD1_DR0_L:				equ 58h		; Capsense 1 data low 0				(RW)
   368  005C                    CSD1_DR0_H:				equ 5Ch		; Capsense 1 data high 0			(RW)
   369  0051                    CSD0_DR1_L:				equ 51h		; Capsense 0 data low 1				(RW)
   370  0055                    CSD0_DR1_H:				equ 55h		; Capsense 0 data high 1			(RW)
   371  0059                    CSD1_DR1_L:				equ 59h		; Capsense 1 data low 1				(RW)
   372  005D                    CSD1_DR1_H:				equ 5Dh		; Capsense 1 data high 1			(RW)
   373  0052                    CSD0_CNT_L:				equ 52h		; Capsense 0 counter low			(RW)
   374  0056                    CSD0_CNT_H:				equ 56h		; Capsense 0 counter high			(RW)
   375  005A                    CSD1_CNT_L:				equ 5Ah		; Capsense 1 counter low			(RW)
   376  005E                    CSD1_CNT_H:				equ	5Eh		; Capsense 1 counter high			(RW)
   377  0053                    CSD0_CR0:				equ 53h		; Capsense 0 control 0				(RW)
   378  005B                    CSD1_CR0:				equ 5Bh		; Capsense 1 control 0				(RW)
   379  0057                    CSD0_CR1:				equ 57h		; Capsense 0 control 1				(RW)
   380  005F                    CSD1_CR1:				equ 5Fh		; Capsense 1 control 1				(RW)
   381                          
   382                          ;------------------------------------------------------
   383                          ;  Neon Analog Registers
   384                          ;------------------------------------------------------
   385  0065                    ASY_CR:					equ 65h		; Analog Synchronization Control	(RW)
   386  006A                    ADC_DH:					equ 6Ah		; ADC data high						(RW)
   387  006B                    ADC_DL:					equ 6Bh		; ADC data low						(RW)
   388  00C8                    PWMVREF0:				equ C8h		; PWM Voltage Reference 0			(RW)
   389  00C9                    PWMVREF1:				equ C9h		; PWM Voltage Reference 1			(RW)
   390  00CB                    PWMSRC:					equ CBh		; PWM Source						(RW)
   391  00CA                    IDACMODE:				equ CAh		; IDAC Mode							(RW)
   392  00FC                    IDACR_D:				equ FCh		; Analog Mux DAC data 0				(RW)
   393  00FD                    IDACL_D:				equ FDh		; Analog Mux DAC data 1				(RW)
   394                          
   395                          ;------------------------------------------------------
   396                          ;  Neon Digital Registers
   397                          ;------------------------------------------------------
   398  00B7                    RDI0DSM:				equ B7h		; Row Digital Interconnect input select 0	(RW)
   399  00BF                    RDI1DSM:				equ BFh		; Row Digital Interconnect input select 1	(RW)
   400                          
   401                          ;------------------------------------------------------
   402                          ;  Neon Test Registers
   403                          ;------------------------------------------------------
   404  00CC                    TSCR0:					equ CCh		; Tsource 0							(RW)
   405  00CD                    TSCMPH:					equ CDh		; TSCMP high						(RW)
   406  00CE                    TSCMPL:					equ CEh		; TSCMP low							(RW)
   407  00CF                    TSCR1:					equ CFh		; Tsource 1							(RW)
   408                          
   409                          ;;=============================================================================
   410                          ;;      Register Space, Bank 1
   411                          ;;=============================================================================
   412                          
   413                          ;------------------------------------------------
   414                          ;  Port Registers
   415                          ;  Note: Also see this address range in Bank 0.
   416                          ;------------------------------------------------
   417                          ; Port 0
   418  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   419  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   420  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   421  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   422                          
   423                          ; Port 1
   424  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   425  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   426  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   427  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   428                          
   429                          ; Port 2
   430  0008                    PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
   431  0009                    PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
   432  000A                    PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
   433  000B                    PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
   434                          
   435                          ; Port 3
   436  000C                    PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
   437  000D                    PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
   438  000E                    PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
   439  000F                    PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
   440                          
   441                          ; Port 4
   442  0010                    PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
   443  0011                    PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
   444  0012                    PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
   445  0013                    PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
   446                          
   447                          ;------------------------------------------------
   448                          ;  Digital PSoC(tm) block Registers
   449                          ;  Note: Also see this address range in Bank 0.
   450                          ;------------------------------------------------
   451                          
   452                          ; Digital PSoC block 00, Basic Type C
   453  0020                    DBC00FN:      equ 20h          ; Function Register                        (RW)
   454  0021                    DBC00IN:      equ 21h          ;    Input Register                        (RW)
   455  0022                    DBC00OU:      equ 22h          ;   Output Register                        (RW)
   456  0023                    DBC00CR1:     equ 23h          ;   control & status register 1            (RW)
   457                          
   458                          ; Digital PSoC block 01, Basic Type C
   459  0024                    DBC01FN:      equ 24h          ; Function Register                        (RW)
   460  0025                    DBC01IN:      equ 25h          ;    Input Register                        (RW)
   461  0026                    DBC01OU:      equ 26h          ;   Output Register                        (RW)
   462  0027                    DBC01CR1:     equ 27h          ;   control & status register 1            (RW)
   463                          
   464                          ; Digital PSoC block 02, Communications Type C
   465  0028                    DCC02FN:      equ 28h          ; Function Register                        (RW)
   466  0029                    DCC02IN:      equ 29h          ;    Input Register                        (RW)
   467  002A                    DCC02OU:      equ 2Ah          ;   Output Register                        (RW)
   468  002B                    DBC02CR1:     equ 2Bh          ;   control & status register 1            (RW)
   469                          
   470                          ; Digital PSoC block 03, Communications Type C
   471  002C                    DCC03FN:      equ 2Ch          ; Function Register                        (RW)
   472  002D                    DCC03IN:      equ 2Dh          ;    Input Register                        (RW)
   473  002E                    DCC03OU:      equ 2Eh          ;   Output Register                        (RW)
   474  0029                    DBC03CR1:     equ 29h          ;   control & status register 1            (RW)
   475                          
   476                          ; Digital PSoC block 10, Basic Type C
   477  0030                    DBC10FN:      equ 30h          ; Function Register                        (RW)
   478  0031                    DBC10IN:      equ 31h          ;    Input Register                        (RW)
   479  0032                    DBC10OU:      equ 32h          ;   Output Register                        (RW)
   480  0033                    DBC10CR1:     equ 33h          ;   control & status register 1            (RW)
   481                          
   482                          ; Digital PSoC block 11, Basic Type C
   483  0034                    DBC11FN:      equ 34h          ; Function Register                        (RW)
   484  0035                    DBC11IN:      equ 35h          ;    Input Register                        (RW)
   485  0036                    DBC11OU:      equ 36h          ;   Output Register                        (RW)
   486  0037                    DBC11CR1:     equ 37h          ;   control & status register 1            (RW)
   487                          
   488                          ; Digital PSoC block 12, Communications Type C
   489  0038                    DCC12FN:      equ 38h          ; Function Register                        (RW)
   490  0039                    DCC12IN:      equ 39h          ;    Input Register                        (RW)
   491  003A                    DCC12OU:      equ 3Ah          ;   Output Register                        (RW)
   492  003B                    DBC12CR1:     equ 3Bh          ;   control & status register 1            (RW)
   493                          
   494                          ; Digital PSoC block 13, Communications Type C
   495  003C                    DCC13FN:      equ 3Ch          ; Function Register                        (RW)
   496  003D                    DCC13IN:      equ 3Dh          ;    Input Register                        (RW)
   497  003E                    DCC13OU:      equ 3Eh          ;   Output Register                        (RW)
   498  003F                    DBC13CR1:     equ 3Fh          ;   control & status register 1            (RW)
   499                          
   500                          ;------------------------------------------------
   501                          ;  System and Global Resource Registers
   502                          ;  Note: Also see this address range in Bank 0.
   503                          ;------------------------------------------------
   504                          
   505  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   506  00C0                    CLK_CR0_ACOLUMN_3:    equ C0h    ; MASK: Specify clock for analog cloumn
   507  0030                    CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
   508  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   509  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   510                          
   511  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   512  0018                    CLK_CR1_ACLK1:        equ 18h    ; MASK: Digital PSoC block for analog source
   513  0003                    CLK_CR1_ACLK0:        equ 03h    ; MASK: Digital PSoC block for analog source
   514                          
   515  0003                    CLK_CR1_ACLK2:        equ 03h    ; Deprecated do not use
   516                          
   517  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   518  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   519                          
   520  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   521  000F                    AMD_CR0_AMOD0:        equ 0Fh    ; MASK: Modulation source for analog column 0
   522                          
   523  0064                    CMP_GO_EN:    equ 64h          ; Comparator Bus To Global Out Enable      (RW)
   524  0080                    CMP_GO_EN_GOO5:       equ 80h    ; MASK: Selected Col 1 signal to GOO5
   525  0040                    CMP_GO_EN_GOO1:       equ 40h    ; MASK: Selected Col 1 signal to GOO1
   526  0030                    CMP_GO_EN_SEL1:       equ 30h    ; MASK: Column 1 Signal Select
   527  0008                    CMP_GO_EN_GOO4:       equ 08h    ; MASK: Selected Col 0 signal to GOO4
   528  0004                    CMP_GO_EN_GOO0:       equ 04h    ; MASK: Selected Col 0 signal to GOO0
   529  0003                    CMP_GO_EN_SEL0:       equ 03h    ; MASK: Column 0 Signal Select
   530                          
   531  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   532  000F                    AMD_CR1_AMOD1:        equ 0Fh    ; MASK: Modulation ctrl for analog column 1
   533                          
   534  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   535  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   536  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   537                          
   538  006B                    CLK_CR3:      equ 6Bh          ; Analog Clock Source Control Register 3   (RW)
   539  0040                    CLK_CR3_SYS1:         equ 40h    ; MASK: Analog Clock 1 selection
   540  0030                    CLK_CR3_DIVCLK1:      equ 30h    ; MASK: Analog Clock 1 divider
   541  0004                    CLK_CR3_SYS0:         equ 04h    ; MASK: Analog Clock 0 selection
   542  0003                    CLK_CR3_DIVCLK0:      equ 03h    ; MASK: Analog Clock 0 divider
   543                          
   544                          ;------------------------------------------------
   545                          ;  Global Digital Interconnects
   546                          ;------------------------------------------------
   547                          
   548  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   549  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   550  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   551  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   552                          
   553  00A0                    GDI_O_IN_CR:  equ 0A0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   554  00A1                    GDI_E_IN_CR:  equ 0A1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   555  00A2                    GDI_O_OU_CR:  equ 0A2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   556  00A3                    GDI_E_OU_CR:  equ 0A3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   557                          
   558  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   559  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   560                          
   561                          ;------------------------------------------------
   562                          ;  Analog Mux Bus Port Enable Bits
   563                          ;------------------------------------------------
   564  00D8                    MUX_CR0:      equ 0D8h          ; Analog Mux Port 0 Bit Enables Register
   565  00D9                    MUX_CR1:      equ 0D9h          ; Analog Mux Port 1 Bit Enables Register
   566  00DA                    MUX_CR2:      equ 0DAh          ; Analog Mux Port 2 Bit Enables Register
   567  00DB                    MUX_CR3:      equ 0DBh          ; Analog Mux Port 3 Bit Enables Register
   568  00EC                    MUX_CR4:      equ 0ECh          ; Analog Mux Port 4 Bit Enables Register
   569                          
   570                          ;------------------------------------------------
   571                          ;  Clock and System Control Registers
   572                          ;------------------------------------------------
   573                          
   574  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   575  0080                    OSC_GO_EN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   576  0040                    OSC_GO_EN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   577  0020                    OSC_GO_EN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   578  0010                    OSC_GO_EN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   579  0008                    OSC_GO_EN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   580  0004                    OSC_GO_EN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   581  0002                    OSC_GO_EN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   582  0001                    OSC_GO_EN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   583                          
   584  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   585  0003                    OSC_CR4_VC3SEL:       equ 03h    ; MASK: System VC3 Clock source
   586                          
   587  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   588                          
   589  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   590  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   591  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   592  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   593  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   594  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   595  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   596  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   597  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   598  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   599  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   600  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   601  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   602  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   603  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   604  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   605  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   606  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   607                          
   608  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   609  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   610  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   611                          
   612  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   613  0080                    OSC_CR2_PLLGAIN:      equ 80h    ; MASK: High/Low gain
   614  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   615  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   616  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   617                          
   618  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   619  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   620  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   621  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   622  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   623  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   624  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   625  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   626                          
   627  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   628  0008                    VLT_CMP_NOWRITE:      equ 08h    ; MASK: Vcc below Flash Write level
   629  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   630  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   631  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   632                          
   633  00E5                    ADC0_TR:      equ 0E5h          ; ADC Column 0 Trim Register
   634  00E6                    ADC1_TR:      equ 0E6h          ; ADC Column 1 Trim Register
   635                          
   636  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   637  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   638  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   639  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   640                          
   641  00FA                    FLS_PR1:      equ 0FAh          ; Flash Program Register 1                 (RW)
   642  0003                    FLS_PR1_BANK:         equ 03h    ; MASK: Select Active Flash Bank
   643                          
   644  00FD                    DAC_CR0:       equ 0FDh          ; Analog Mux DAC Control Register 0
   645  00DC                    DAC_CR1:       equ 0DCh          ; Analog Mux DAC Control Register 1
   646  0008                    DAC_CR_IRANGE:        equ 08h    ; MASK: Sets the DAC Range low or high
   647  0006                    DAC_CR_OSCMODE:       equ 06h    ; MASK: Defines the reset mode for AMux
   648  0001                    DAC_CR_ENABLE:        equ 01h    ; MASK: Enable/Disable DAC function
   649                          
   650                          ;------------------------------------------------
   651                          ;  I2C Control Registers
   652                          ;------------------------------------------------
   653                          
   654  00AD                    I2C_ADDR:    equ 0ADh          ; I2C Address Register (RW)
   655                          
   656                          ;------------------------------------------------------
   657                          ;  Neon Analog Registers
   658                          ;------------------------------------------------------
   659  0053                    VDAC50CR0:		equ 53h			; V DAC5 control 0				(RW)
   660  0057                    VDAC51CR0:		equ 57h			; V DAC5 control 1				(RW)
   661  00A8                    ADC_CR0:		equ A8h			; ADC control 0					(RW)
   662  00A9                    ADC_CR1:		equ A9h			; ADC control 1					(RW)
   663  00AA                    ADC_CR2:		equ AAh			; ADC control 2					(RW)
   664  00AB                    ADC_CR3TRIM:	equ ABh			; ADC control 3					(RW)
   665  00AC                    ADC_CR4:		equ ACh			; ADC control 4					(RW)
   666  00E7                    VDAC_TRIM:		equ E7h			; V DAC trim					(RW)
   667                          
   668                          ;------------------------------------------------------
   669                          ;  Neon Current Sense CMP Registers
   670                          ;------------------------------------------------------
   671  0050                    CMP0CR1:		equ 50h			; CMP0 control 1				(RW)
   672  0051                    CMP0CR2:		equ 51h			; CMP0 control 2				(RW)
   673  0054                    CMP1CR1:		equ 54h			; CMP1 control 1				(RW)
   674  0055                    CMP1CR2:		equ 55h			; CMP1 control 2				(RW)
   675  0058                    CSCMPCR0:		equ 58h			; CSCMP control 0				(RW)
   676  0059                    CSCMPGOEN:		equ 59h			; CSCMO global out enable		(RW)
   677  005A                    CSLUTCR0:		equ 5Ah			; CSLUT control 0				(RW)
   678  005B                    CMPCOLMUX:		equ 5Bh			; CMP Column Mux				(RW)
   679  005C                    CMPPWMCR:		equ 5Ch			; CMP PWM control				(RW)
   680  005D                    CMPFLTCR:		equ 5Dh			; CMP filter control			(RW)
   681  005E                    CMPCLK1:		equ 5Eh			; CMP clock 1					(RW)
   682  005F                    CMPCLK0:		equ 5Fh			; CMP clock 0					(RW)
   683                          
   684                          ;------------------------------------------------------
   685                          ;  Neon Real Time Clock Registers
   686                          ;------------------------------------------------------
   687  00A4                    RTCH:			equ A4h			; Real time current hour		(RW)
   688  00A5                    RTCM:			equ A5h			; Real time current minute		(RW)
   689  00A6                    RTCS:			equ A6h			; Real time current second		(RW)
   690  00A7                    RTCCR:			equ A7h			; Real time clock control		(RW)
   691                          
   692                          ;------------------------------------------------------
   693                          ;  Analog MUX Config Registers
   694                          ;------------------------------------------------------
   695                          
   696  006A                    AMUX_CFG1:			equ 6Ah  ; Analog MUX Configuration 1
   697  0020                    AMUX_CFG1_GOINVR:	equ 20h  ;
   698  0010                    AMUX_CFG1_GOINVL:  	equ 10h	 ;
   699  000C                    AMUX_CFG1_AMUXMODR:	equ 0Ch	 ;
   700  0003                    AMUX_CFG1_AMUXMODL:	equ 03h	 ;
   701                          
   702                          ;;=============================================================================
   703                          ;;      M8C System Macros
   704                          ;;  These macros should be used when their functions are needed.
   705                          ;;=============================================================================
   706                          
   707                          ;----------------------------------------------------
   708                          ;  Swapping Register Banks
   709                          ;----------------------------------------------------
   710                              macro M8C_SetBank0
   711                              and   F, ~FLAG_XIO_MASK
   712  3C51                        endm
   713                          
   714                              macro M8C_SetBank1
   715                              or    F, FLAG_XIO_MASK
   716  3C51                        endm
   717                          
   718                          ;----------------------------------------------------
   719                          ;  Global Interrupt Enable/Disable
   720                          ;----------------------------------------------------
   721                              macro M8C_EnableGInt
   722                              or    F, FLAG_GLOBAL_IE
   723  3C51                        endm
   724                          
   725                              macro M8C_DisableGInt
   726                              and   F, ~FLAG_GLOBAL_IE
   727  3C51                        endm
   728                          
   729                          ;----------------------------------------------------
   730                          ;  Enable/Disable Interrupt Mask
   731                          ;
   732                          ;  Use the following macros to enable/disable
   733                          ;  bits in the Interrupt mask registers,
   734                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   735                          ;
   736                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   737                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   738                          ;
   739                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   740                          ;        and MASK is the bit set to enable or disable
   741                          ;----------------------------------------------------
   742                          ; Disable Interrupt Bit Mask(s)
   743                              macro M8C_DisableIntMask
   744                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   745  3C51                        endm
   746                          
   747                          ; Enable Interrupt Bit Mask(s)
   748                              macro M8C_EnableIntMask
   749                              or    reg[@0], @1               ; enable specified interrupt enable bit
   750  3C51                        endm
   751                          
   752                          ;----------------------------------------------------
   753                          ;  Clear Posted Interrupt Flag Mask
   754                          ;
   755                          ;  Use the following macros to clear the
   756                          ;  bits in the Interrupt Clear registers,
   757                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   758                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   759                          ;
   760                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   761                          ;        and MASK is the bit set to enable or disable
   762                          ;----------------------------------------------------
   763                              macro M8C_ClearIntFlag
   764                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   765  3C51                        endm
   766                          
   767                          ;----------------------------------------------------
   768                          ;  Power-On Reset & WatchDog Timer Functions
   769                          ;----------------------------------------------------
   770                              macro M8C_EnableWatchDog
   771                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   772  3C51                        endm
   773                          
   774                              macro M8C_ClearWDT
   775                              mov   reg[RES_WDT], 00h
   776  3C51                        endm
   777                          
   778                              macro M8C_ClearWDTAndSleep
   779                              mov   reg[RES_WDT], 38h
   780  3C51                        endm
   781                          
   782                          ;----------------------------------------------------
   783                          ;  Sleep, CPU Stop & Software Reset
   784                          ;----------------------------------------------------
   785                              macro M8C_Sleep
   786                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   787                              ; The next instruction to be executed depends on the state of the
   788                              ; various interrupt enable bits. If some interrupts are enabled
   789                              ; and the global interrupts are disabled, the next instruction will
   790                              ; be the one that follows the invocation of this macro. If global
   791                              ; interrupts are also enabled then the next instruction will be
   792                              ; from the interrupt vector table. If no interrupts are enabled
   793                              ; then the CPU sleeps forever.
   794  3C51                        endm
   795                          
   796                              macro M8C_Stop
   797                              ; In general, you probably don't want to do this, but here's how:
   798                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   799                              ; Next instruction to be executed is located in the interrupt
   800                              ; vector table entry for Power-On Reset.
   801  3C51                        endm
   802                          
   803                              macro M8C_Reset
   804                              ; Restore CPU to the power-on reset state.
   805                              mov A, 0
   806                              SSC
   807                              ; Next non-supervisor instruction will be at interrupt vector 0.
   808  3C51                        endm
   809                          
   810                          ;----------------------------------------------------
   811                          ; ImageCraft Code Compressor Actions
   812                          ;----------------------------------------------------
   813                              ; Suspend Code Compressor
   814                              ; Must not span a RET or RETI instruction
   815                              ; without resuming code compression
   816                              macro Suspend_CodeCompressor
   817                              or   F, 0
   818  3C51                        endm
   819                          
   820                              ; Resume Code Compression
   821                              macro Resume_CodeCompressor
   822                              add  SP, 0
   823                              endm
      + 3C51                    
      + 3C51                    ; end of file m8c.inc
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;
     4                          ;;       FILENAME: Memory.inc
     5                          ;;
     6                          ;;    DESCRIPTION: Memory Model and Stack Parameter Definitions for 
     7                          ;;                 CY8C22045 PSoC devices.
     8                          ;;
     9                          ;;  LAST MODIFIED: August 17, 2004
    10                          ;;
    11                          ;;-----------------------------------------------------------------------------
    12                          ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
    13                          ;;*****************************************************************************
    14                          ;;*****************************************************************************
    15                          ;
    16                          ;
    17                          ;  ******** Define Memory Model and Stack parameters ********
    18                          ;
    19  0001                    IMAGECRAFT: equ 1   
    20  0002                    HITECH: equ 2   
    21  0002                    TOOLCHAIN: equ HITECH   
    22  0001                    SYSTEM_LARGE_MEMORY_MODEL: equ 1   
    23  0000                    SYSTEM_SMALL_MEMORY_MODEL: equ 0   
    24  0003                    SYSTEM_STACK_PAGE: equ 3   
    25  0000                    SYSTEM_STACK_PAGE_OFFSET: equ 0   
    26  0002                    SYSTEM_TOOLS: equ 2   
    27  0000                    SYSTEM_IDXPG_TRACKS_STK_PP: equ 0   
    28  0001                    SYSTEM_IDXPG_TRACKS_IDX_PP: equ 1   
    29  0000                    SYSTEM_MULTIPAGE_STACK: equ 0 
    30                          
    31                          
    32                          ;  ******* Function Class Definitions *******
    33                          ;
    34                          ;  These definitions are used to describe RAM access patterns. They provide
    35                          ;  documentation and they control prologue and epilogue macros that perform
    36                          ;  the necessary housekeeping functions for large memory model devices like
    37                          ;  the CY8C22045.
    38                          
    39  0001                    RAM_USE_CLASS_1:               equ 1   ; PUSH, POP & I/O access
    40  0002                    RAM_USE_CLASS_2:               equ 2   ; Indexed address mode on stack page
    41  0004                    RAM_USE_CLASS_3:               equ 4   ; Indexed address mode to any page
    42  0008                    RAM_USE_CLASS_4:               equ 8   ; Direct/Indirect address mode access
    43                          
    44                          ; ******* Hi Tech Specific *******
    45                          ; Turn on the expansion of all macros by default
    46                          IF (TOOLCHAIN & HITECH)
    47                          OPT EXPAND
    48                          ENDIF
    49                          ; ******* Page Pointer Manipulation Macros *******
    50                          ;
    51                          ;  ******* Page Pointer Manipulation Macros *******
    52                          ;
    53                          ;  Most of the following macros are conditionally compiled so they only
    54                          ;  produce code if the large memory model is selected.
    55                          
    56                             ;-----------------------------------------------
    57                             ;  Set Stack Page Macro
    58                             ;-----------------------------------------------
    59                             ;
    60                             ;  DESC: Modify STK_PP in the large or small memory Models.
    61                             ;
    62                             ; INPUT: Constant (e.g., SYSTEM_STACK_PAGE) that specifies the RAM page on
    63                             ;        which stack operations like PUSH and POP store and retrieve their
    64                             ;        data
    65                             ;
    66                             ;  COST: 8 instruction cycles (in LMM only)
    67                          
    68                             macro RAM_SETPAGE_STK( PG_NUMBER )
    69                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    70                                mov reg[STK_PP], @PG_NUMBER
    71                             ENDIF
    72  3C51                       endm
    73                          
    74                             ;-----------------------------------------------
    75                             ;  Set Current Page Macro
    76                             ;-----------------------------------------------
    77                             ;
    78                             ;  DESC: Modify CUR_PP in the large or small memory Models.
    79                             ;
    80                             ; INPUT: Constant value (e.g., >bFoo) for the RAM page number used in
    81                             ;        calculation of effective direct-mode address operands.
    82                             ;
    83                             ;  COST: 8 instruction cycles (in LMM only)
    84                          
    85                             macro RAM_SETPAGE_CUR( PG_NUMBER )
    86                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    87                                mov reg[CUR_PP], @PG_NUMBER
    88                             ENDIF
    89  3C51                       endm
    90                          
    91                             ;-----------------------------------------------
    92                             ;  Set Index Page Macro
    93                             ;-----------------------------------------------
    94                             ;
    95                             ;  DESC: Modify IDX_PP in the large or small emory Models.
    96                             ;
    97                             ; INPUT: Constant value (e.g., >caFoo) for the RAM page number used in
    98                             ;         calculation of effective index-mode address operands.
    99                             ;
   100                             ;  COST: 8 instruction cycles (in LMM only)
   101                          
   102                             macro RAM_SETPAGE_IDX( PG_NUMBER )
   103                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   104                                mov reg[IDX_PP], @PG_NUMBER
   105                             ENDIF
   106  3C51                       endm
   107                          
   108                             ;-----------------------------------------------
   109                             ;  Set MVI Read Page Macro
   110                             ;-----------------------------------------------
   111                             ;
   112                             ;  DESC: Modify MVR_PP in the large or small memory Models.
   113                             ;
   114                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   115                             ;        calculation of indirect address operands used in the
   116                             ;        "mvi A, [pFoo]" instructions.
   117                             ;
   118                             ;  COST: 8 instruction cycles (in LMM only)
   119                          
   120                             macro RAM_SETPAGE_MVR( PG_NUMBER )
   121                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   122                                mov reg[MVR_PP], @PG_NUMBER
   123                             ENDIF
   124  3C51                       endm
   125                          
   126                             ;-----------------------------------------------
   127                             ;  Set MVI Write Page Macro
   128                             ;-----------------------------------------------
   129                             ;
   130                             ;  DESC: Modify MVW_PP in the large or small memory Models.
   131                             ;
   132                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   133                             ;        calculation of indirect address operands used in the
   134                             ;        "mvi [pFoo], A" instructions.
   135                             ;
   136                             ;  COST: 8 instruction cycles (in LMM only)
   137                          
   138                             macro RAM_SETPAGE_MVW( PG_NUMBER )
   139                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   140                                mov reg[MVW_PP], @PG_NUMBER
   141                             ENDIF
   142  3C51                       endm
   143                          
   144                             ;-----------------------------------------------
   145                             ;  Force Index Page Pointer to Stack Page
   146                             ;-----------------------------------------------
   147                             ;
   148                             ;  DESC: Map index-mode operands onto the stack page by modifying IDX_PP.
   149                             ;        See also RAM_LOCK_INDEX_TO_STACKPAGE.
   150                             ;
   151                             ; INPUT: None
   152                             ;
   153                             ;  COST: 8 instruction cycles (in LMM only)
   154                          
   155                             macro RAM_SETPAGE_IDX2STK
   156                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   157                                IF ( SYSTEM_MULTIPAGE_STACK )
   158                                   mov   A, reg[STK_PP]
   159                                   mov   reg[IDX_PP], A
   160                                ELSE
   161                                   RAM_SETPAGE_IDX SYSTEM_STACK_PAGE
   162                                ENDIF
   163                             ENDIF
   164  3C51                       endm
   165                          
   166                             ;-----------------------------------------------
   167                             ;  Change Memory Mode
   168                             ;-----------------------------------------------
   169                             ;
   170                             ;  DESC: Modify FLAG_PAGEMODE bits in the large and small memory Models.
   171                             ;
   172                             ; INPUT: Constant value for PGMODE bitfield of CPU Flag register, F.
   173                             ;        See FLAG_PGMODE_{x} constants in M8C.INC.
   174                             ;
   175                             ;  COST: 8 instruction cycles (in LMM only)
   176                          
   177                             macro RAM_CHANGE_PAGE_MODE( MODE )
   178                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   179                                and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
   180                                or    F,  FLAG_PGMODE_MASK & @MODE
   181                             ENDIF
   182  3C51                       endm
   183                          
   184                             ;-----------------------------------------------
   185                             ;  Set Large Memory Model Native Paging Mode
   186                             ;-----------------------------------------------
   187                             ;
   188                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   189                             ;        paging mode *IFF* a simple "OR" is guaranteed to work---for
   190                             ;        example, in an ISR, when the PGMODE bits have been cleared
   191                             ;        to zero. If a simple "OR" is not guaranteed to work, use
   192                             ;        the slower RAM_RESTORE_NATIVE_PAGING instead.
   193                             ;
   194                             ; INPUT: none
   195                             ;
   196                             ;  COST: 4 instruction cycles (in LMM only)
   197                          
   198                             macro RAM_SET_NATIVE_PAGING
   199                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   200                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   201                                or    F,  FLAG_PGMODE_11b            ; LMM w/ IndexPage<==>StackPage
   202                             ENDIF ;  PGMODE LOCKED
   203                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   204                                or    F,  FLAG_PGMODE_10b            ; LMM with independent IndexPage
   205                             ENDIF ; PGMODE FREE
   206                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   207  3C51                       endm
   208                          
   209                             ;-----------------------------------------------
   210                             ; Restore Large Memory Model Native Paging Mode
   211                             ;-----------------------------------------------
   212                             ;
   213                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   214                             ;        paging mode. Always works because it clears the PGMODE bits
   215                             ;        before OR-ing in the new ones. See RAM_RESTORE_NATIVE_PAGING
   216                             ;        for a faster method.
   217                             ;
   218                             ; INPUT: none
   219                             ;
   220                             ;  COST: 8 instruction cycles (in LMM only)
   221                          
   222                             macro RAM_RESTORE_NATIVE_PAGING
   223                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   224                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   225                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_11b ; LMM w/ IndexPage<==>StackPage
   226                             ENDIF ;  PGMODE LOCKED
   227                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   228                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b ; LMM with independent IndexPage
   229                             ENDIF ; PGMODE FREE
   230                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   231  3C51                       endm
   232                          
   233                             ;-----------------------------------------------
   234                             ; Force indexed addr mode operands to Stack Pg
   235                             ;-----------------------------------------------
   236                             ;
   237                             ;  DESC: Force instructions that use indexed address mode to reference the
   238                             ;        stack page (as defined by STK_PP). This macro sets the "Indexed
   239                             ;        Stack Mode" bit (LSB) of the PGMODE bit field in the CPU Flag
   240                             ;        register, F. (See also RAM_SETPAGE_IDX2STK, above.)
   241                             ;
   242                             ; INPUT: none
   243                             ;
   244                             ;  COST: 4 instruction cycles (in LMM only)
   245                          
   246                             macro RAM_X_POINTS_TO_STACKPAGE
   247                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   248                                or   F, FLAG_PGMODE_01b
   249                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   250  3C51                       endm
   251                          
   252                             ;-----------------------------------------------
   253                             ;  Force indexed addr mode operands to Index Pg
   254                             ;-----------------------------------------------
   255                             ;
   256                             ;  DESC: Permit instructions that use indexed address mode to reference page
   257                             ;        zero or the page pointed to by the IDX_PP register, depending on the
   258                             ;        setting of the MSb (or "Direct Page Mode" bit) of the PGMODE bits
   259                             ;        in the CPU Flag register, F. (This macro clears the PGMODE LSb.)
   260                             ;
   261                             ; INPUT: none
   262                             ;
   263                             ;  COST: 4 instruction cycles (in LMM only)
   264                          
   265                             macro RAM_X_POINTS_TO_INDEXPAGE
   266                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   267                                and  F, ~FLAG_PGMODE_01b
   268                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   269  3C51                       endm
   270                          
   271                             ;-----------------------------------------------
   272                             ;  Function Prologue
   273                             ;-----------------------------------------------
   274                             ;
   275                             ;  Prologue for functions that run in the LMM and SMM.
   276                             ;
   277                          
   278                             macro RAM_PROLOGUE( ACTUAL_CLASS )
   279                          
   280                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   281                             ; Nothing to do
   282                             ENDIF ; RAM_USE_CLASS_1
   283                          
   284                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   285                                IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   286                                   RAM_X_POINTS_TO_STACKPAGE         ; exit native paging mode!
   287                                ENDIF
   288                             ENDIF ; RAM_USE_CLASS_2
   289                          
   290                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   291                                IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   292                                   RAM_X_POINTS_TO_INDEXPAGE         ; exit native paging mode!
   293                                ENDIF
   294                             ENDIF ; RAM_USE_CLASS_3
   295                          
   296                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   297                             ; Nothing to do
   298                             ENDIF ; RAM_USE_CLASS_4
   299                          
   300  3C51                       endm
   301                          
   302                             ;-----------------------------------------------
   303                             ;  Function Epilogue
   304                             ;-----------------------------------------------
   305                             ;
   306                             ;  Prologue for functions that run in the LMM and SMM.
   307                             ;
   308                          
   309                             macro RAM_EPILOGUE( ACTUAL_CLASS )
   310                          
   311                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   312                             ; Nothing to do
   313                             ENDIF ; RAM_USE_CLASS_1
   314                          
   315                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   316                                RAM_RESTORE_NATIVE_PAGING
   317                             ENDIF ; RAM_USE_CLASS_2
   318                          
   319                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   320                                RAM_RESTORE_NATIVE_PAGING
   321                             ENDIF ; RAM_USE_CLASS_3
   322                          
   323                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   324                             ; Nothing to do
   325                             ENDIF ; RAM_USE_CLASS_4
   326                          
   327  3C51                       endm
   328                          
   329                             ;-----------------------------------------------
   330                             ;  Preserve Register
   331                             ;-----------------------------------------------
   332                             ;
   333                             ;  DESC: Preserve a register value on the stack
   334                             ;
   335                             ; INPUT: Name or address of register in I/O Space
   336                             ;        The I/O bank is an implicit parameter. That is, this function will
   337                             ;        Access the I/O bank currently specified by the CPU Flag register.
   338                             ;
   339                             ;  USES: CPU 'A' register
   340                             ;
   341                             ;  COST: 9 instruction cycles
   342                          
   343                             macro REG_PRESERVE( IOReg )
   344                             mov   A, reg[ @IOReg ]
   345                             push  A
   346  3C51                       endm
   347                          
   348                             ;-----------------------------------------------
   349                             ;  Restore Register
   350                             ;-----------------------------------------------
   351                             ;
   352                             ;  DESC: Restore a register value from the stack
   353                             ;
   354                             ; INPUT: Name or address of register in I/O Space
   355                             ;        The I/O bank is an implicit parameter. That is, this function will
   356                             ;        Access the I/O bank currently specified by the CPU Flag register.
   357                             ;
   358                             ;  USES: CPU 'A' register
   359                             ;
   360                             ;  COST: 10 instruction cycles
   361                          
   362                             macro REG_RESTORE( IOReg )
   363                             pop   A
   364                             mov   reg[ @IOReg ], A
   365  3C51                       endm
   366                          
   367                             ;-----------------------------------------------
   368                             ;  Preserve Volatile Page Pointer Registers
   369                             ;-----------------------------------------------
   370                             ;
   371                             ;  DESC: Invoked by ISRs before switching to the LMM mode and calling
   372                             ;        functions that require on it.
   373                             ;
   374                             ; INPUT: none
   375                             ;
   376                             ;  USES: CPU 'A' register
   377                             ;
   378                             ;  COST: 45 instruction cycles (in LMM only)
   379                          
   380                             macro ISR_PRESERVE_PAGE_POINTERS
   381                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   382                                REG_PRESERVE CUR_PP
   383                                REG_PRESERVE IDX_PP
   384                                REG_PRESERVE MVR_PP
   385                                REG_PRESERVE MVW_PP
   386                             ENDIF
   387  3C51                       endm
   388                          
   389                             ;-----------------------------------------------
   390                             ;  Restore Volatile Page Pointer Registers
   391                             ;-----------------------------------------------
   392                             ;
   393                             ;  DESC: Undo for RAM_PRESERVE_PAGE_POINTERS macro. Invoked by ISRs after
   394                             ;        calling functions that run in the LMM mode and before executing
   395                             ;        the RETI instruction.
   396                             ;
   397                             ; INPUT: none
   398                             ;
   399                             ;  USES: CPU 'A' register
   400                             ;
   401                             ;  COST: 50 instruction cycles (in LMM only)
   402                          
   403                             macro ISR_RESTORE_PAGE_POINTERS
   404                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   405                                REG_RESTORE MVW_PP
   406                                REG_RESTORE MVR_PP
   407                                REG_RESTORE IDX_PP
   408                                REG_RESTORE CUR_PP
   409                             ENDIF
   410                             endm
      + 3C51                    
      + 3C51                    ; end of file Memory.inc
      + 3C51                    ;;*****************************************************************************
;;******************
      +                         ***********************************************************
;;  FILENAME: SAR10.inc
;;   Version: 2.
      +                         00, Updated on 2013/5/19 at 10:39:9
;;  Generated by PSoC Designer 5.4.2946
;;
;;  DESCRIPTION: Asse
      +                         mbler declarations for the SAR10 user module interface
;;-------------------------------------------
      +                         ----------------------------------
;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved
      +                         .
;;*****************************************************************************
;;****************
      +                         *************************************************************
   824                          
   825                          ; end of file m8c.inc
    29  00C0                    FLAG_PGMODE_MASK:  equ 0C0h     ; Paging control for > 256 bytes of RAM
    30  0000                    FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
    31  0040                    FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
    32  0080                    FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
    33  00C0                    FLAG_PGMODE_3:     equ 0C0h       ; Direct to CUR_PP page, indexed to STK_PP page
    34  0000                    FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
    35  0040                    FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
    36  0080                    FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
    37  00C0                    FLAG_PGMODE_11b:   equ 0C0h       ; Same as PGMODE_3
    38  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    39  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    40  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    41  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    42  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    43                          
    44                          
    45                          ;;=============================================================================
    46                          ;;      Register Space, Bank 0
    47                          ;;=============================================================================
    48                          
    49                          ;------------------------------------------------
    50                          ;  Port Registers
    51                          ;  Note: Also see this address range in Bank 1.
    52                          ;------------------------------------------------
    53                          ; Port 0
    54  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    55  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    56  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    57  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    58                          ; Port 1
    59  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    60  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    61  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    62  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    63                          ; Port 2
    64  0008                    PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
    65  0009                    PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
    66  000A                    PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
    67  000B                    PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
    68                          ; Port 3
    69  000C                    PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
    70  000D                    PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
    71  000E                    PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
    72  000F                    PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
    73                          ; Port 4
    74  0010                    PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
    75  0011                    PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
    76  0012                    PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
    77  0013                    PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
    78                          
    79                          ;------------------------------------------------
    80                          ;  Digital PSoC(tm) block Registers
    81                          ;  Note: Also see this address range in Bank 1.
    82                          ;------------------------------------------------
    83                          ; Digital PSoC block 00, Basic Type C
    84  0020                    DBC00DR0:     equ 20h          ; data register 0                          (#)
    85  0021                    DBC00DR1:     equ 21h          ; data register 1                          (W)
    86  0022                    DBC00DR2:     equ 22h          ; data register 2                          (RW)
    87  0023                    DBC00CR0:     equ 23h          ; control & status register 0              (#)
    88                          
    89                          ; Digital PSoC block 01, Basic Type C
    90  0024                    DBC01DR0:     equ 24h          ; data register 0                          (#)
    91  0025                    DBC01DR1:     equ 25h          ; data register 1                          (W)
    92  0026                    DBC01DR2:     equ 26h          ; data register 2                          (RW)
    93  0027                    DBC01CR0:     equ 27h          ; control & status register 0              (#)
    94                          
    95                          ; Digital PSoC block 02, Communications Type C
    96  0028                    DCC02DR0:     equ 28h          ; data register 0                          (#)
    97  0029                    DCC02DR1:     equ 29h          ; data register 1                          (W)
    98  002A                    DCC02DR2:     equ 2Ah          ; data register 2                          (RW)
    99  002B                    DCC02CR0:     equ 2Bh          ; control & status register 0              (#)
   100                          
   101                          ; Digital PSoC block 03, Communications Type C
   102  002C                    DCC03DR0:     equ 2Ch          ; data register 0                          (#)
   103  002D                    DCC03DR1:     equ 2Dh          ; data register 1                          (W)
   104  002E                    DCC03DR2:     equ 2Eh          ; data register 2                          (RW)
   105  002F                    DCC03CR0:     equ 2Fh          ; control & status register 0              (#)
   106                          
   107                          ; Digital PSoC block 10, Basic Type C
   108  0030                    DBC10DR0:     equ 30h          ; data register 0                          (#)
   109  0031                    DBC10DR1:     equ 31h          ; data register 1                          (W)
   110  0032                    DBC10DR2:     equ 32h          ; data register 2                          (RW)
   111  0033                    DBC10CR0:     equ 33h          ; control & status register 0              (#)
   112                          
   113                          ; Digital PSoC block 11, Basic Type C
   114  0034                    DBC11DR0:     equ 34h          ; data register 0                          (#)
   115  0035                    DBC11DR1:     equ 35h          ; data register 1                          (W)
   116  0036                    DBC11DR2:     equ 36h          ; data register 2                          (RW)
   117  0037                    DBC11CR0:     equ 37h          ; control & status register 0              (#)
   118                          
   119                          ; Digital PSoC block 12, Communications Type C
   120  0038                    DCC12DR0:     equ 38h          ; data register 0                          (#)
   121  0039                    DCC12DR1:     equ 39h          ; data register 1                          (W)
   122  003A                    DCC12DR2:     equ 3Ah          ; data register 2                          (RW)
   123  003B                    DCC12CR0:     equ 3Bh          ; control & status register 0              (#)
   124                          
   125                          ; Digital PSoC block 13, Communications Type C
   126  003C                    DCC13DR0:     equ 3Ch          ; data register 0                          (#)
   127  003D                    DCC13DR1:     equ 3Dh          ; data register 1                          (W)
   128  003E                    DCC13DR2:     equ 3Eh          ; data register 2                          (RW)
   129  003F                    DCC13CR0:     equ 3Fh          ; control & status register 0              (#)
   130                          
   131                          ;-------------------------------------
   132                          ;  Analog Control Registers
   133                          ;-------------------------------------
   134  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
   135  00C0                    AMX_IN_ACI3:          equ C0h    ; MASK: column 3 input mux
   136  0030                    AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
   137  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
   138  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
   139                          
   140  0061                    AMUX_CFG:      equ 61h          ; Analog MUX Configuration
   141  0030                    AMUX_CFG_INTCAP:       equ 30h    ;
   142  000E                    AMUX_CFG_MUXCLK:  	  equ 0Eh	 ;
   143  0001                    AMUX_CFG_EN:		  	  equ 01h	 ;
   144                          
   145                          ; old declarations DO NOT USE
   146  0061                    AMUXCFG:      equ 61h          ; Analog MUX Configuration
   147  0030                    AMUXCFG_INTCAP:       equ 30h    ;
   148  000E                    AMUXCFG_MUXCLK:  	  equ 0Eh	 ;
   149  0001                    AMUXCFG_EN:		  	  equ 01h	 ;
   150                          
   151  0062                    PWM_CR:       equ 62h          ; Pulse-Width Modulator Control
   152  0038                    PWM_CR_HIGH:          equ 38h    ; MASK: PWM high time
   153  0006                    PWM_CR_LOW:           equ 06h	 ; MASK: PWM low time
   154  0001                    PWM_CR_EN:            equ 01h	 ; MASK: Enable/Disable PWM function
   155                          
   156  0063                    ARF_CR:       equ 63h          ; Analog Reference Control
   157                          
   158  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus Register           (#)
   159  0080                    CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
   160  0040                    CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
   161  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
   162  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
   163  0008                    CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
   164  0004                    CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
   165  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
   166  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   167                          
   168  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   169  0020                    CMP_CR1_CLDIS1:       equ 20h    ; MASK: Column 1 comparator output latch
   170  0010                    CMP_CR1_CLDIS0:	      equ 10h    ; MASK: Column 0 comparator output latch
   171                          
   172  0068                    ADC0_CR:      equ 68h          ; Analog Column 0 Configuration
   173  0080                    ADC0_CR_CMPST:        equ 80h    ;
   174  0040                    ADC0_CR_LOREN:        equ 40h    ;
   175  0020                    ADC0_CR_SHEN:         equ 20h    ;
   176  0008                    ADC0_CR_CBSRC:        equ 08h    ;
   177  0004                    ADC0_CR_ADCM:         equ 04h    ;
   178  0001                    ADC0_CR_EN:	          equ 01h    ;
   179                          
   180  0069                    ADC1_CR:      equ 69h          ; Analog Column 1 Configuration
   181  0080                    ADC1_CR_CMPST:        equ 80h    ;
   182  0040                    ADC1_CR_LOREN:        equ 40h    ;
   183  0020                    ADC1_CR_SHEN:         equ 20h    ;
   184  0008                    ADC1_CR_CBSRC:        equ 08h    ;
   185  0004                    ADC1_CR_ADCM:         equ 04h    ;
   186  0001                    ADC1_CR_EN:	          equ 01h    ;
   187                          
   188                          ; Continuous Time PSoC block Type E Row 0 Col 0
   189  0072                    ACE00CR1:     equ 72h          ; Control register 1                       (RW)
   190  0073                    ACE00CR2:     equ 73h          ; Control register 2                       (RW)
   191                          
   192                          ; Continuous Time PSoC block Type E Row 0 Col 1
   193  0076                    ACE01CR1:     equ 76h          ; Control register 1                       (RW)
   194  0077                    ACE01CR2:     equ 77h          ; Control register 2                       (RW)
   195                          
   196                          ; Switched Cap PSoC blockType E Row 1 Col 0
   197  0080                    ASE10CR0:     equ 80h          ; Control register 0                       (RW)
   198                          
   199                          ; Switched Cap PSoC blockType E Row 1 Col 1
   200  0084                    ASE11CR0:     equ 84h          ; Control register 0                       (RW)
   201                          
   202                          ;-----------------------------------------------
   203                          ;  Global General Purpose Data Registers
   204                          ;-----------------------------------------------
   205  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   206  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   207  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   208  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   209                          
   210                          ;------------------------------------------------
   211                          ;  Row Digital Interconnects
   212                          ;
   213                          ;  Note: the following registers are mapped into
   214                          ;  both register bank 0 AND register bank 1.
   215                          ;------------------------------------------------
   216                          
   217  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   218  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   219  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   220  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   221  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   222  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   223  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   224                          
   225  00B8                    RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
   226  00B9                    RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
   227  00BA                    RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
   228  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   229  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   230  00BD                    RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
   231  00BE                    RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
   232                          
   233                          ;-----------------------------------------------
   234                          ;  Ram Page Pointers
   235                          ;-----------------------------------------------
   236  00D0                    CUR_PP:      equ 0D0h           ; Current   Page Pointer
   237  00D1                    STK_PP:      equ 0D1h           ; Stack     Page Pointer
   238  00D3                    IDX_PP:      equ 0D3h           ; Index     Page Pointer
   239  00D4                    MVR_PP:      equ 0D4h           ; MVI Read  Page Pointer
   240  00D5                    MVW_PP:      equ 0D5h           ; MVI Write Page Pointer
   241                          
   242                          ;------------------------------------------------
   243                          ;  I2C Configuration Registers
   244                          ;------------------------------------------------
   245  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   246  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   247  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   248  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   249  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   250  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   251  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   252  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   253  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   254  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   255                          
   256  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   257  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   258  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   259  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   260  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   261  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   262  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   263  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   264  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   265                          
   266  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   267                          
   268  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   269  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   270  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   271  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   272  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   273                          
   274                          ;------------------------------------------------
   275                          ;  System and Global Resource Registers
   276                          ;------------------------------------------------
   277  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   278                                                         ; Use INT_MSK0 bit field masks
   279  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   280                                                         ; Use INT_MSK1 bit field masks
   281  00DC                    INT_CLR2:     equ 0DCh          ; Interrupt Clear Register 2               (RW)
   282                                                         ; Use INT_MSK2 bit field masks
   283  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   284                                                         ; Use INT_MSK3 bit field masks
   285                          
   286  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   287  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   288  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   289                          
   290  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   291  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   292  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   293  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   294  0010                    INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
   295  0008                    INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
   296  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   297  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   298  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   299                          
   300  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   301  0080                    INT_MSK1_DCC13:            equ 80h ; MASK: enable/disable DCC13 block interrupt
   302  0040                    INT_MSK1_DCC12:            equ 40h ; MASK: enable/disable DCC12 block interrupt
   303  0020                    INT_MSK1_DBC11:            equ 20h ; MASK: enable/disable DBC11 block interrupt
   304  0010                    INT_MSK1_DBC10:            equ 10h ; MASK: enable/disable DBC10 block interrupt
   305  0008                    INT_MSK1_DCC03:            equ 08h ; MASK: enable/disable DCC03 block interrupt
   306  0004                    INT_MSK1_DCC02:            equ 04h ; MASK: enable/disable DCC02 block interrupt
   307  0002                    INT_MSK1_DBC01:            equ 02h ; MASK: enable/disable DBC01 block interrupt
   308  0001                    INT_MSK1_DBC00:            equ 01h ; MASK: enable/disable DBC00 block interrupt
   309                          
   310  00DF                    INT_MSK2:     equ DFh			; Custom block Mask Register			   (RW)
   311  0010                    INT_MSK2_SARADC:           equ 10h ; MASK: enable/disable SARADC block interrupt
   312  0020                    INT_MSK2_CSD0:             equ 20h ; MASK: enable/disable CSD0 block interrupt
   313  0040                    INT_MSK2_CSD1:             equ 40h ; MASK: enable/disable CSD1 block interrupt
   314  0080                    INT_MSK2_RTC:              equ 80h ; MASK: enable/disable RTC block interrupt
   315                          
   316  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   317  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   318                          
   319                          ;------------------------------------------------------
   320                          ;  MAC Registers
   321                          ;------------------------------------------------------
   322                          
   323  00E8                    MUL0_X:       equ 0E8h          ; Multiply Input X Register                (W)
   324  00E9                    MUL0_Y:       equ 0E9h          ; Multiply Input Y Register                (W)
   325  00EA                    MUL0_DH:      equ 0EAh          ; Multiply Result High Byte Register       (R)
   326  00EB                    MUL0_DL:      equ 0EBh          ; Multiply Result Low Byte Register        (R)
   327                          
   328  00EC                    ACC0_DR1:     equ 0ECh          ; Accumulator Data Register 1              (RW)
   329  00ED                    ACC0_DR0:     equ 0EDh          ; Accumulator Data Register 0              (RW)
   330  00EE                    ACC0_DR3:     equ 0EEh          ; Accumulator Data Register 3              (RW)
   331  00EF                    ACC0_DR2:     equ 0EFh          ; Accumulator Data Register 2              (RW)
   332                          
   333                          ; DECIMATOR Control Registers
   334  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   335  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   336                          
   337                          ;------------------------------------------------------
   338                          ;  System Status and Control Registers
   339                          ;
   340                          ;  Note: The following registers are mapped into both
   341                          ;        register bank 0 AND register bank 1.
   342                          ;------------------------------------------------------
   343  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   344                                                             ; Use FLAG_ masks defined at top of file
   345                          
   346  00FD                    DAC_D:        equ 0FDh		   ; DAC Data Register                        (RW)
   347                          
   348  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   349  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: flag, Internal Reset Status bit
   350  0010                    CPU_SCR1_SLIMO:         equ 10h	   ; MASK: Slow IMO (internal main osc) enable
   351  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   352  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   353  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   354                          
   355  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   356  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   357  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   358  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   359  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   360  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   361                          
   362                          ;------------------------------------------------------
   363                          ;  Neon Capsense Digital Control Registers
   364                          ;------------------------------------------------------
   365  0050                    CSD0_DR0_L:				equ 50h		; Capsense 0 data low 0				(RW)
   366  0054                    CSD0_DR0_H:				equ 54h		; Capsense 0 data high 0			(RW)
   367  0058                    CSD1_DR0_L:				equ 58h		; Capsense 1 data low 0				(RW)
   368  005C                    CSD1_DR0_H:				equ 5Ch		; Capsense 1 data high 0			(RW)
   369  0051                    CSD0_DR1_L:				equ 51h		; Capsense 0 data low 1				(RW)
   370  0055                    CSD0_DR1_H:				equ 55h		; Capsense 0 data high 1			(RW)
   371  0059                    CSD1_DR1_L:				equ 59h		; Capsense 1 data low 1				(RW)
   372  005D                    CSD1_DR1_H:				equ 5Dh		; Capsense 1 data high 1			(RW)
   373  0052                    CSD0_CNT_L:				equ 52h		; Capsense 0 counter low			(RW)
   374  0056                    CSD0_CNT_H:				equ 56h		; Capsense 0 counter high			(RW)
   375  005A                    CSD1_CNT_L:				equ 5Ah		; Capsense 1 counter low			(RW)
   376  005E                    CSD1_CNT_H:				equ	5Eh		; Capsense 1 counter high			(RW)
   377  0053                    CSD0_CR0:				equ 53h		; Capsense 0 control 0				(RW)
   378  005B                    CSD1_CR0:				equ 5Bh		; Capsense 1 control 0				(RW)
   379  0057                    CSD0_CR1:				equ 57h		; Capsense 0 control 1				(RW)
   380  005F                    CSD1_CR1:				equ 5Fh		; Capsense 1 control 1				(RW)
   381                          
   382                          ;------------------------------------------------------
   383                          ;  Neon Analog Registers
   384                          ;------------------------------------------------------
   385  0065                    ASY_CR:					equ 65h		; Analog Synchronization Control	(RW)
   386  006A                    ADC_DH:					equ 6Ah		; ADC data high						(RW)
   387  006B                    ADC_DL:					equ 6Bh		; ADC data low						(RW)
   388  00C8                    PWMVREF0:				equ C8h		; PWM Voltage Reference 0			(RW)
   389  00C9                    PWMVREF1:				equ C9h		; PWM Voltage Reference 1			(RW)
   390  00CB                    PWMSRC:					equ CBh		; PWM Source						(RW)
   391  00CA                    IDACMODE:				equ CAh		; IDAC Mode							(RW)
   392  00FC                    IDACR_D:				equ FCh		; Analog Mux DAC data 0				(RW)
   393  00FD                    IDACL_D:				equ FDh		; Analog Mux DAC data 1				(RW)
   394                          
   395                          ;------------------------------------------------------
   396                          ;  Neon Digital Registers
   397                          ;------------------------------------------------------
   398  00B7                    RDI0DSM:				equ B7h		; Row Digital Interconnect input select 0	(RW)
   399  00BF                    RDI1DSM:				equ BFh		; Row Digital Interconnect input select 1	(RW)
   400                          
   401                          ;------------------------------------------------------
   402                          ;  Neon Test Registers
   403                          ;------------------------------------------------------
   404  00CC                    TSCR0:					equ CCh		; Tsource 0							(RW)
   405  00CD                    TSCMPH:					equ CDh		; TSCMP high						(RW)
   406  00CE                    TSCMPL:					equ CEh		; TSCMP low							(RW)
   407  00CF                    TSCR1:					equ CFh		; Tsource 1							(RW)
   408                          
   409                          ;;=============================================================================
   410                          ;;      Register Space, Bank 1
   411                          ;;=============================================================================
   412                          
   413                          ;------------------------------------------------
   414                          ;  Port Registers
   415                          ;  Note: Also see this address range in Bank 0.
   416                          ;------------------------------------------------
   417                          ; Port 0
   418  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   419  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   420  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   421  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   422                          
   423                          ; Port 1
   424  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   425  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   426  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   427  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   428                          
   429                          ; Port 2
   430  0008                    PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
   431  0009                    PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
   432  000A                    PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
   433  000B                    PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
   434                          
   435                          ; Port 3
   436  000C                    PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
   437  000D                    PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
   438  000E                    PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
   439  000F                    PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
   440                          
   441                          ; Port 4
   442  0010                    PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
   443  0011                    PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
   444  0012                    PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
   445  0013                    PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
   446                          
   447                          ;------------------------------------------------
   448                          ;  Digital PSoC(tm) block Registers
   449                          ;  Note: Also see this address range in Bank 0.
   450                          ;------------------------------------------------
   451                          
   452                          ; Digital PSoC block 00, Basic Type C
   453  0020                    DBC00FN:      equ 20h          ; Function Register                        (RW)
   454  0021                    DBC00IN:      equ 21h          ;    Input Register                        (RW)
   455  0022                    DBC00OU:      equ 22h          ;   Output Register                        (RW)
   456  0023                    DBC00CR1:     equ 23h          ;   control & status register 1            (RW)
   457                          
   458                          ; Digital PSoC block 01, Basic Type C
   459  0024                    DBC01FN:      equ 24h          ; Function Register                        (RW)
   460  0025                    DBC01IN:      equ 25h          ;    Input Register                        (RW)
   461  0026                    DBC01OU:      equ 26h          ;   Output Register                        (RW)
   462  0027                    DBC01CR1:     equ 27h          ;   control & status register 1            (RW)
   463                          
   464                          ; Digital PSoC block 02, Communications Type C
   465  0028                    DCC02FN:      equ 28h          ; Function Register                        (RW)
   466  0029                    DCC02IN:      equ 29h          ;    Input Register                        (RW)
   467  002A                    DCC02OU:      equ 2Ah          ;   Output Register                        (RW)
   468  002B                    DBC02CR1:     equ 2Bh          ;   control & status register 1            (RW)
   469                          
   470                          ; Digital PSoC block 03, Communications Type C
   471  002C                    DCC03FN:      equ 2Ch          ; Function Register                        (RW)
   472  002D                    DCC03IN:      equ 2Dh          ;    Input Register                        (RW)
   473  002E                    DCC03OU:      equ 2Eh          ;   Output Register                        (RW)
   474  0029                    DBC03CR1:     equ 29h          ;   control & status register 1            (RW)
   475                          
   476                          ; Digital PSoC block 10, Basic Type C
   477  0030                    DBC10FN:      equ 30h          ; Function Register                        (RW)
   478  0031                    DBC10IN:      equ 31h          ;    Input Register                        (RW)
   479  0032                    DBC10OU:      equ 32h          ;   Output Register                        (RW)
   480  0033                    DBC10CR1:     equ 33h          ;   control & status register 1            (RW)
   481                          
   482                          ; Digital PSoC block 11, Basic Type C
   483  0034                    DBC11FN:      equ 34h          ; Function Register                        (RW)
   484  0035                    DBC11IN:      equ 35h          ;    Input Register                        (RW)
   485  0036                    DBC11OU:      equ 36h          ;   Output Register                        (RW)
   486  0037                    DBC11CR1:     equ 37h          ;   control & status register 1            (RW)
   487                          
   488                          ; Digital PSoC block 12, Communications Type C
   489  0038                    DCC12FN:      equ 38h          ; Function Register                        (RW)
   490  0039                    DCC12IN:      equ 39h          ;    Input Register                        (RW)
   491  003A                    DCC12OU:      equ 3Ah          ;   Output Register                        (RW)
   492  003B                    DBC12CR1:     equ 3Bh          ;   control & status register 1            (RW)
   493                          
   494                          ; Digital PSoC block 13, Communications Type C
   495  003C                    DCC13FN:      equ 3Ch          ; Function Register                        (RW)
   496  003D                    DCC13IN:      equ 3Dh          ;    Input Register                        (RW)
   497  003E                    DCC13OU:      equ 3Eh          ;   Output Register                        (RW)
   498  003F                    DBC13CR1:     equ 3Fh          ;   control & status register 1            (RW)
   499                          
   500                          ;------------------------------------------------
   501                          ;  System and Global Resource Registers
   502                          ;  Note: Also see this address range in Bank 0.
   503                          ;------------------------------------------------
   504                          
   505  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   506  00C0                    CLK_CR0_ACOLUMN_3:    equ C0h    ; MASK: Specify clock for analog cloumn
   507  0030                    CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
   508  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   509  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   510                          
   511  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   512  0018                    CLK_CR1_ACLK1:        equ 18h    ; MASK: Digital PSoC block for analog source
   513  0003                    CLK_CR1_ACLK0:        equ 03h    ; MASK: Digital PSoC block for analog source
   514                          
   515  0003                    CLK_CR1_ACLK2:        equ 03h    ; Deprecated do not use
   516                          
   517  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   518  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   519                          
   520  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   521  000F                    AMD_CR0_AMOD0:        equ 0Fh    ; MASK: Modulation source for analog column 0
   522                          
   523  0064                    CMP_GO_EN:    equ 64h          ; Comparator Bus To Global Out Enable      (RW)
   524  0080                    CMP_GO_EN_GOO5:       equ 80h    ; MASK: Selected Col 1 signal to GOO5
   525  0040                    CMP_GO_EN_GOO1:       equ 40h    ; MASK: Selected Col 1 signal to GOO1
   526  0030                    CMP_GO_EN_SEL1:       equ 30h    ; MASK: Column 1 Signal Select
   527  0008                    CMP_GO_EN_GOO4:       equ 08h    ; MASK: Selected Col 0 signal to GOO4
   528  0004                    CMP_GO_EN_GOO0:       equ 04h    ; MASK: Selected Col 0 signal to GOO0
   529  0003                    CMP_GO_EN_SEL0:       equ 03h    ; MASK: Column 0 Signal Select
   530                          
   531  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   532  000F                    AMD_CR1_AMOD1:        equ 0Fh    ; MASK: Modulation ctrl for analog column 1
   533                          
   534  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   535  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   536  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   537                          
   538  006B                    CLK_CR3:      equ 6Bh          ; Analog Clock Source Control Register 3   (RW)
   539  0040                    CLK_CR3_SYS1:         equ 40h    ; MASK: Analog Clock 1 selection
   540  0030                    CLK_CR3_DIVCLK1:      equ 30h    ; MASK: Analog Clock 1 divider
   541  0004                    CLK_CR3_SYS0:         equ 04h    ; MASK: Analog Clock 0 selection
   542  0003                    CLK_CR3_DIVCLK0:      equ 03h    ; MASK: Analog Clock 0 divider
   543                          
   544                          ;------------------------------------------------
   545                          ;  Global Digital Interconnects
   546                          ;------------------------------------------------
   547                          
   548  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   549  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   550  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   551  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   552                          
   553  00A0                    GDI_O_IN_CR:  equ 0A0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   554  00A1                    GDI_E_IN_CR:  equ 0A1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   555  00A2                    GDI_O_OU_CR:  equ 0A2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   556  00A3                    GDI_E_OU_CR:  equ 0A3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   557                          
   558  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   559  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   560                          
   561                          ;------------------------------------------------
   562                          ;  Analog Mux Bus Port Enable Bits
   563                          ;------------------------------------------------
   564  00D8                    MUX_CR0:      equ 0D8h          ; Analog Mux Port 0 Bit Enables Register
   565  00D9                    MUX_CR1:      equ 0D9h          ; Analog Mux Port 1 Bit Enables Register
   566  00DA                    MUX_CR2:      equ 0DAh          ; Analog Mux Port 2 Bit Enables Register
   567  00DB                    MUX_CR3:      equ 0DBh          ; Analog Mux Port 3 Bit Enables Register
   568  00EC                    MUX_CR4:      equ 0ECh          ; Analog Mux Port 4 Bit Enables Register
   569                          
   570                          ;------------------------------------------------
   571                          ;  Clock and System Control Registers
   572                          ;------------------------------------------------
   573                          
   574  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   575  0080                    OSC_GO_EN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   576  0040                    OSC_GO_EN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   577  0020                    OSC_GO_EN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   578  0010                    OSC_GO_EN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   579  0008                    OSC_GO_EN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   580  0004                    OSC_GO_EN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   581  0002                    OSC_GO_EN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   582  0001                    OSC_GO_EN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   583                          
   584  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   585  0003                    OSC_CR4_VC3SEL:       equ 03h    ; MASK: System VC3 Clock source
   586                          
   587  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   588                          
   589  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   590  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   591  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   592  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   593  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   594  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   595  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   596  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   597  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   598  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   599  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   600  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   601  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   602  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   603  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   604  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   605  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   606  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   607                          
   608  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   609  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   610  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   611                          
   612  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   613  0080                    OSC_CR2_PLLGAIN:      equ 80h    ; MASK: High/Low gain
   614  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   615  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   616  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   617                          
   618  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   619  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   620  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   621  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   622  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   623  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   624  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   625  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   626                          
   627  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   628  0008                    VLT_CMP_NOWRITE:      equ 08h    ; MASK: Vcc below Flash Write level
   629  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   630  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   631  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   632                          
   633  00E5                    ADC0_TR:      equ 0E5h          ; ADC Column 0 Trim Register
   634  00E6                    ADC1_TR:      equ 0E6h          ; ADC Column 1 Trim Register
   635                          
   636  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   637  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   638  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   639  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   640                          
   641  00FA                    FLS_PR1:      equ 0FAh          ; Flash Program Register 1                 (RW)
   642  0003                    FLS_PR1_BANK:         equ 03h    ; MASK: Select Active Flash Bank
   643                          
   644  00FD                    DAC_CR0:       equ 0FDh          ; Analog Mux DAC Control Register 0
   645  00DC                    DAC_CR1:       equ 0DCh          ; Analog Mux DAC Control Register 1
   646  0008                    DAC_CR_IRANGE:        equ 08h    ; MASK: Sets the DAC Range low or high
   647  0006                    DAC_CR_OSCMODE:       equ 06h    ; MASK: Defines the reset mode for AMux
   648  0001                    DAC_CR_ENABLE:        equ 01h    ; MASK: Enable/Disable DAC function
   649                          
   650                          ;------------------------------------------------
   651                          ;  I2C Control Registers
   652                          ;------------------------------------------------
   653                          
   654  00AD                    I2C_ADDR:    equ 0ADh          ; I2C Address Register (RW)
   655                          
   656                          ;------------------------------------------------------
   657                          ;  Neon Analog Registers
   658                          ;------------------------------------------------------
   659  0053                    VDAC50CR0:		equ 53h			; V DAC5 control 0				(RW)
   660  0057                    VDAC51CR0:		equ 57h			; V DAC5 control 1				(RW)
   661  00A8                    ADC_CR0:		equ A8h			; ADC control 0					(RW)
   662  00A9                    ADC_CR1:		equ A9h			; ADC control 1					(RW)
   663  00AA                    ADC_CR2:		equ AAh			; ADC control 2					(RW)
   664  00AB                    ADC_CR3TRIM:	equ ABh			; ADC control 3					(RW)
   665  00AC                    ADC_CR4:		equ ACh			; ADC control 4					(RW)
   666  00E7                    VDAC_TRIM:		equ E7h			; V DAC trim					(RW)
   667                          
   668                          ;------------------------------------------------------
   669                          ;  Neon Current Sense CMP Registers
   670                          ;------------------------------------------------------
   671  0050                    CMP0CR1:		equ 50h			; CMP0 control 1				(RW)
   672  0051                    CMP0CR2:		equ 51h			; CMP0 control 2				(RW)
   673  0054                    CMP1CR1:		equ 54h			; CMP1 control 1				(RW)
   674  0055                    CMP1CR2:		equ 55h			; CMP1 control 2				(RW)
   675  0058                    CSCMPCR0:		equ 58h			; CSCMP control 0				(RW)
   676  0059                    CSCMPGOEN:		equ 59h			; CSCMO global out enable		(RW)
   677  005A                    CSLUTCR0:		equ 5Ah			; CSLUT control 0				(RW)
   678  005B                    CMPCOLMUX:		equ 5Bh			; CMP Column Mux				(RW)
   679  005C                    CMPPWMCR:		equ 5Ch			; CMP PWM control				(RW)
   680  005D                    CMPFLTCR:		equ 5Dh			; CMP filter control			(RW)
   681  005E                    CMPCLK1:		equ 5Eh			; CMP clock 1					(RW)
   682  005F                    CMPCLK0:		equ 5Fh			; CMP clock 0					(RW)
   683                          
   684                          ;------------------------------------------------------
   685                          ;  Neon Real Time Clock Registers
   686                          ;------------------------------------------------------
   687  00A4                    RTCH:			equ A4h			; Real time current hour		(RW)
   688  00A5                    RTCM:			equ A5h			; Real time current minute		(RW)
   689  00A6                    RTCS:			equ A6h			; Real time current second		(RW)
   690  00A7                    RTCCR:			equ A7h			; Real time clock control		(RW)
   691                          
   692                          ;------------------------------------------------------
   693                          ;  Analog MUX Config Registers
   694                          ;------------------------------------------------------
   695                          
   696  006A                    AMUX_CFG1:			equ 6Ah  ; Analog MUX Configuration 1
   697  0020                    AMUX_CFG1_GOINVR:	equ 20h  ;
   698  0010                    AMUX_CFG1_GOINVL:  	equ 10h	 ;
   699  000C                    AMUX_CFG1_AMUXMODR:	equ 0Ch	 ;
   700  0003                    AMUX_CFG1_AMUXMODL:	equ 03h	 ;
   701                          
   702                          ;;=============================================================================
   703                          ;;      M8C System Macros
   704                          ;;  These macros should be used when their functions are needed.
   705                          ;;=============================================================================
   706                          
   707                          ;----------------------------------------------------
   708                          ;  Swapping Register Banks
   709                          ;----------------------------------------------------
   710                              macro M8C_SetBank0
   711                              and   F, ~FLAG_XIO_MASK
   712  3C51                        endm
   713                          
   714                              macro M8C_SetBank1
   715                              or    F, FLAG_XIO_MASK
   716  3C51                        endm
   717                          
   718                          ;----------------------------------------------------
   719                          ;  Global Interrupt Enable/Disable
   720                          ;----------------------------------------------------
   721                              macro M8C_EnableGInt
   722                              or    F, FLAG_GLOBAL_IE
   723  3C51                        endm
   724                          
   725                              macro M8C_DisableGInt
   726                              and   F, ~FLAG_GLOBAL_IE
   727  3C51                        endm
   728                          
   729                          ;----------------------------------------------------
   730                          ;  Enable/Disable Interrupt Mask
   731                          ;
   732                          ;  Use the following macros to enable/disable
   733                          ;  bits in the Interrupt mask registers,
   734                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   735                          ;
   736                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   737                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   738                          ;
   739                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   740                          ;        and MASK is the bit set to enable or disable
   741                          ;----------------------------------------------------
   742                          ; Disable Interrupt Bit Mask(s)
   743                              macro M8C_DisableIntMask
   744                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   745  3C51                        endm
   746                          
   747                          ; Enable Interrupt Bit Mask(s)
   748                              macro M8C_EnableIntMask
   749                              or    reg[@0], @1               ; enable specified interrupt enable bit
   750  3C51                        endm
   751                          
   752                          ;----------------------------------------------------
   753                          ;  Clear Posted Interrupt Flag Mask
   754                          ;
   755                          ;  Use the following macros to clear the
   756                          ;  bits in the Interrupt Clear registers,
   757                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   758                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   759                          ;
   760                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   761                          ;        and MASK is the bit set to enable or disable
   762                          ;----------------------------------------------------
   763                              macro M8C_ClearIntFlag
   764                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   765  3C51                        endm
   766                          
   767                          ;----------------------------------------------------
   768                          ;  Power-On Reset & WatchDog Timer Functions
   769                          ;----------------------------------------------------
   770                              macro M8C_EnableWatchDog
   771                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   772  3C51                        endm
   773                          
   774                              macro M8C_ClearWDT
   775                              mov   reg[RES_WDT], 00h
   776  3C51                        endm
   777                          
   778                              macro M8C_ClearWDTAndSleep
   779                              mov   reg[RES_WDT], 38h
   780  3C51                        endm
   781                          
   782                          ;----------------------------------------------------
   783                          ;  Sleep, CPU Stop & Software Reset
   784                          ;----------------------------------------------------
   785                              macro M8C_Sleep
   786                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   787                              ; The next instruction to be executed depends on the state of the
   788                              ; various interrupt enable bits. If some interrupts are enabled
   789                              ; and the global interrupts are disabled, the next instruction will
   790                              ; be the one that follows the invocation of this macro. If global
   791                              ; interrupts are also enabled then the next instruction will be
   792                              ; from the interrupt vector table. If no interrupts are enabled
   793                              ; then the CPU sleeps forever.
   794  3C51                        endm
   795                          
   796                              macro M8C_Stop
   797                              ; In general, you probably don't want to do this, but here's how:
   798                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   799                              ; Next instruction to be executed is located in the interrupt
   800                              ; vector table entry for Power-On Reset.
   801  3C51                        endm
   802                          
   803                              macro M8C_Reset
   804                              ; Restore CPU to the power-on reset state.
   805                              mov A, 0
   806                              SSC
   807                              ; Next non-supervisor instruction will be at interrupt vector 0.
   808  3C51                        endm
   809                          
   810                          ;----------------------------------------------------
   811                          ; ImageCraft Code Compressor Actions
   812                          ;----------------------------------------------------
   813                              ; Suspend Code Compressor
   814                              ; Must not span a RET or RETI instruction
   815                              ; without resuming code compression
   816                              macro Suspend_CodeCompressor
   817                              or   F, 0
   818  3C51                        endm
   819                          
   820                              ; Resume Code Compression
   821                              macro Resume_CodeCompressor
   822                              add  SP, 0
   823  3C51                        endm
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  FILENAME: SAR10.inc
     4                          ;;   Version: 2.00, Updated on 2013/5/19 at 10:39:9
     5                          ;;  Generated by PSoC Designer 5.4.2946
     6                          ;;
     7                          ;;  DESCRIPTION: Assembler declarations for the SAR10 user module interface
     8                          ;;-----------------------------------------------------------------------------
     9                          ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
    10                          ;;*****************************************************************************
    11                          ;;*****************************************************************************
    12                          
    13                          include "m8c.inc"
    14                          
    15                          
    16                          ;--------------------------------------------------
    17                          ; Constants for SAR10 API's.
    18                          ;--------------------------------------------------
    19                          
    20  0001                    SAR10_SAR_CR0_REG_START_BIT:                               equ 0x01    ; Control register start bit
    21  0078                    SAR10_CHN_SEL_MASK:                                        equ 0x78
    22  0030                    SAR10_TRG_SEL_MASK:                                        equ 0x30
    23  0001                    SAR10_ALIGN_EN_MASK:                                       equ 0x01
    24  000E                    SAR10_CLK_SEL_MASK:                                        equ 0x0E
    25  0008                    SAR10_FREE_RUN_MASK:                                       equ 0x08
    26  0004                    SAR10_READY_MASK:                                          equ 0x04
    27  0002                    SAR10_SAR_CR0_REG_SW_TRIG_BIT:                             equ 0x02
    28                          
    29  00DF                    SAR10_INT_REG:                                             equ 0x0df
    30  0010                    SAR10_INT_SAR_MASK:                                        equ 0x10
    31                          ;--------------------------------------------------
    32                          ; SAR10 channel selection definitions
    33                          ;--------------------------------------------------
    34  0000                    SAR10_CHS_P00:                                             equ   (00h)
    35  0008                    SAR10_CHS_P01:                                             equ   (08h)
    36  0010                    SAR10_CHS_P02:                                             equ   (10h)
    37  0018                    SAR10_CHS_P03:                                             equ   (18h)
    38  0020                    SAR10_CHS_P04:                                             equ   (20h)
    39  0028                    SAR10_CHS_P05:                                             equ   (28h)
    40  0030                    SAR10_CHS_P06:                                             equ   (30h)
    41  0038                    SAR10_CHS_P07:                                             equ   (38h)
    42  0060                    SAR10_CHS_AMUX0:                                           equ   (60h)
    43  0068                    SAR10_CHS_AMUX1:                                           equ   (68h)
    44                          ;for compatibly with olds projects
    45  0060                    SAR10_CHS_AMUXL:                                           equ   (60h)
    46  0068                    SAR10_CHS_AMUXR:                                           equ   (68h)
    47                          
    48                          ;--------------------------------------------------
    49                          ; SAR10 trigger source definitions
    50                          ;--------------------------------------------------
    51  0000                    SAR10_SRC_TGRL:                                            equ   (00h)
    52  0010                    SAR10_SRC_TGRH:                                            equ   (10h)
    53  0020                    SAR10_SRC_TGR16:                                           equ   (20h)
    54  0030                    SAR10_SRC_TGRINCMP:                                        equ   (30h)
    55                          
    56                          ;--------------------------------------------------
    57                          ; SAR10 auto trigger definitions
    58                          ;--------------------------------------------------
    59  0001                    SAR10_AUTOTGR_ENABLE:                                      equ   (01h)
    60  0000                    SAR10_AUTOTGR_DISABLE:                                     equ   (00h)
    61                          
    62                          ;--------------------------------------------------
    63                          ; SAR10 clock selection definitions
    64                          ;--------------------------------------------------
    65  0000                    SAR10_SYSCLK_2:                                            equ   (00h)
    66  0002                    SAR10_SYSCLK_4:                                            equ   (02h)
    67  0004                    SAR10_SYSCLK_6:                                            equ   (04h)
    68  0006                    SAR10_SYSCLK_8:                                            equ   (06h)
    69  0008                    SAR10_SYSCLK_12:                                           equ   (08h)
    70  000A                    SAR10_SYSCLK_16:                                           equ   (0Ah)
    71  000C                    SAR10_SYSCLK_32:                                           equ   (0Ch)
    72  000E                    SAR10_SYSCLK_64:                                           equ   (0Eh)
    73                          
    74                          ;--------------------------------------------------
    75                          ; SAR10 run mode selection definitions
    76                          ;--------------------------------------------------
    77  0000                    SAR10_ONESHOT:                                             equ   (00h)
    78  0008                    SAR10_FREERUN:                                             equ   (08h)
    79                          
    80                          ;--------------------------------------------------
    81                          ; SAR10 definitions
    82                          ;--------------------------------------------------
    83  0000                    SAR10_Justify:                                             equ 0h
    84                          
    85                          ;--------------------------------------------------
    86                          ; Register Address Constants for SAR10
    87                          ;--------------------------------------------------
    88                          
    89  00A8                    SAR10_SAR_CR0_REG:                             equ 0xa8   ; SAR Control_0 register
    90  00A9                    SAR10_SAR_CR1_REG:                             equ 0xa9   ; SAR Control_1 register
    91  00AA                    SAR10_SAR_CR2_REG:                             equ 0xaa   ; SAR Control_2 register
    92  006A                    SAR10_SAR_DH_REG:                              equ 0x6a    ; SAR Data (MSB) register
    93  006B                    SAR10_SAR_DL_REG:                              equ 0x6b    ; SAR Data (LSB) register
    94                          
    95                          ;--------------------------------------------------
    96                          ; SAR10 Macro 'Functions'
    97                          ;--------------------------------------------------
    98                          
    99                             macro SAR10_Start_M
   100                             or    reg[SAR10_SAR_CR0_REG],  SAR10_SAR_CR0_REG_START_BIT
   101  3C51                       endm
   102                          
   103                             macro SAR10_Stop_M
   104                             and   reg[SAR10_SAR_CR0_REG], ~SAR10_SAR_CR0_REG_START_BIT
   105  3C51                       endm
   106                          
   107                             macro SAR10_EnableInt_M
   108                             M8C_EnableIntMask SAR10_INT_REG, SAR10_INT_SAR_MASK
   109  3C51                       endm
   110                          
   111                             macro SAR10_DisableInt_M
   112                             M8C_DisableIntMask SAR10_INT_REG, SAR10_INT_SAR_MASK
   113  3C51                       endm
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  FILENAME: SAR10.asm
     4                          ;;   Version: 2.00, Updated on 2013/5/19 at 10:39:9
     5                          ;;  Generated by PSoC Designer 5.4.2946
     6                          ;;
     7                          ;;  DESCRIPTION: SAR10 User Module software implementation file
     8                          ;;
     9                          ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
    10                          ;;        arguments and observe the associated "Registers are volatile" policy.
    11                          ;;        This means it is the caller's responsibility to preserve any values
    12                          ;;        in the X and A registers that are still needed after the API functions
    13                          ;;        returns. For Large Memory Model devices it is also the caller's 
    14                          ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
    15                          ;;        MVW_PP registers. Even though some of these registers may not be modified
    16                          ;;        now, there is no guarantee that will remain the case in future releases.
    17                          ;;-----------------------------------------------------------------------------
    18                          ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
    19                          ;;*****************************************************************************
    20                          ;;*****************************************************************************
    21                          
    22                          include "m8c.inc"
    23                          include "memory.inc"
    24                          include "SAR10.inc"
    25                          
    26                          ;-----------------------------------------------
    27                          ;  Global Symbols
    28                          ;-----------------------------------------------
    29                          export  SAR10_EnableInt
    30                          export _SAR10_EnableInt
    31                          export  SAR10_DisableInt
    32                          export _SAR10_DisableInt
    33                          export  SAR10_Start
    34                          export _SAR10_Start
    35                          export  SAR10_Stop
    36                          export _SAR10_Stop
    37                          export  SAR10_Trigger
    38                          export _SAR10_Trigger
    39                          export  SAR10_fIsDataAvailable
    40                          export _SAR10_fIsDataAvailable
    41                          export  SAR10_iGetData
    42                          export _SAR10_iGetData
    43                          export  SAR10_bGetData
    44                          export _SAR10_bGetData
    45                          export  SAR10_SetADCChannel
    46                          export _SAR10_SetADCChannel
    47                          export  SAR10_SetTriggerSrc
    48                          export _SAR10_SetTriggerSrc
    49                          export  SAR10_EnableAutoTrigger
    50                          export _SAR10_EnableAutoTrigger
    51                          export  SAR10_SetClk
    52                          export _SAR10_SetClk
    53                          export  SAR10_SetRunMode
    54                          export _SAR10_SetRunMode
    55                          
    56                          AREA led_display_RAM (RAM,REL)
    57                          
    58                          ;-----------------------------------------------
    59                          ;  Constant Definitions
    60                          ;-----------------------------------------------
    61                          
    62                          ;-----------------------------------------------
    63                          ; Variable Allocation
    64                          ;-----------------------------------------------
    65                          
    66                          
    67                          AREA UserModules (ROM, REL)
    68                          
    69                          .SECTION
    70                          ;-----------------------------------------------------------------------------
    71                          ;  FUNCTION NAME: SAR10_EnableInt
    72                          ;
    73                          ;  DESCRIPTION:
    74                          ;     Enables the interrupt mode operation by setting the interrupt enable mask bit
    75                          ;     associated with this User Module. This function has no effect until and
    76                          ;     unless the global interrupts are enabled (for example by using the
    77                          ;     macro M8C_EnableGInt).
    78                          ;-----------------------------------------------------------------------------
    79                          ;
    80                          ;  ARGUMENTS:    None.
    81                          ;  RETURNS:      Nothing.
    82                          ;  SIDE EFFECTS: 
    83                          ;    The A and X registers may be modified by this or future implementations
    84                          ;    of this function.  The same is true for all RAM page pointer registers in
    85                          ;    the Large Memory Model.  When necessary, it is the calling function's
    86                          ;    responsibility to perserve their values across calls to fastcall16 
    87                          ;    functions.
    88                          ;
    89  2CCB                     SAR10_EnableInt:
    90  2CCB                    _SAR10_EnableInt:
    91                             RAM_PROLOGUE RAM_USE_CLASS_1
    92  2CCB  43 DF 10             SAR10_EnableInt_M
    93                             RAM_EPILOGUE RAM_USE_CLASS_1
    94  2CCE  7F                   ret
    95                          
    96                          .ENDSECTION
    97                          
    98                          
    99                          .SECTION
   100                          ;-----------------------------------------------------------------------------
   101                          ;  FUNCTION NAME: SAR10_DisableInt
   102                          ;
   103                          ;  DESCRIPTION:
   104                          ;     Disables the interrupt mode operation by clearing the interrupt enable
   105                          ;     mask bit associated with this User Module.
   106                          ;-----------------------------------------------------------------------------
   107                          ;
   108                          ;  ARGUMENTS:    None
   109                          ;  RETURNS:      Nothing
   110                          ;  SIDE EFFECTS: 
   111                          ;    The A and X registers may be modified by this or future implementations
   112                          ;    of this function.  The same is true for all RAM page pointer registers in
   113                          ;    the Large Memory Model.  When necessary, it is the calling function's
   114                          ;    responsibility to perserve their values across calls to fastcall16 
   115                          ;    functions.
   116                          ;
   117  2CCF                     SAR10_DisableInt:
   118  2CCF                    _SAR10_DisableInt:
   119                             RAM_PROLOGUE RAM_USE_CLASS_1
   120  2CCF  41 DF EF             SAR10_DisableInt_M
   121                             RAM_EPILOGUE RAM_USE_CLASS_1
   122  2CD2  7F                   ret
   123                          
   124                          .ENDSECTION
   125                          
   126                          
   127                          .SECTION
   128                          ;-----------------------------------------------------------------------------
   129                          ;  FUNCTION NAME: SAR10_Start
   130                          ;
   131                          ;  DESCRIPTION:
   132                          ;     Enables SAR operation. 
   133                          ;     Set the ADC_EN bit in SAR_CR0 register
   134                          ;-----------------------------------------------------------------------------
   135                          ;
   136                          ;  ARGUMENTS:    None
   137                          ;  RETURNS:      Nothing
   138                          ;  SIDE EFFECTS: 
   139                          ;    The A and X registers may be modified by this or future implementations
   140                          ;    of this function.  The same is true for all RAM page pointer registers in
   141                          ;    the Large Memory Model.  When necessary, it is the calling function's
   142                          ;    responsibility to perserve their values across calls to fastcall16 
   143                          ;    functions.
   144                          ;
   145  2CD3                     SAR10_Start:
   146  2CD3                    _SAR10_Start:
   147                             RAM_PROLOGUE RAM_USE_CLASS_1
   148  2CD3  71 10                M8C_SetBank1
   149  2CD5  43 A8 01             SAR10_Start_M
   150  2CD8  70 EF                M8C_SetBank0
   151                             RAM_EPILOGUE RAM_USE_CLASS_1
   152  2CDA  7F                   ret
   153                          
   154                          .ENDSECTION
   155                          
   156                          
   157                          .SECTION
   158                          ;-----------------------------------------------------------------------------
   159                          ;  FUNCTION NAME: SAR10_Stop
   160                          ;
   161                          ;  DESCRIPTION:
   162                          ;     Disables SAR operation 
   163                          ;     Clear ADC_EN bit in SAR_CR0 register
   164                          ;-----------------------------------------------------------------------------
   165                          ;
   166                          ;  ARGUMENTS:    None
   167                          ;  RETURNS:      Nothing
   168                          ;  SIDE EFFECTS: 
   169                          ;    The A and X registers may be modified by this or future implementations
   170                          ;    of this function.  The same is true for all RAM page pointer registers in
   171                          ;    the Large Memory Model.  When necessary, it is the calling function's
   172                          ;    responsibility to perserve their values across calls to fastcall16 
   173                          ;    functions.
   174                          ;
   175  2CDB                     SAR10_Stop:
   176  2CDB                    _SAR10_Stop:
   177                             RAM_PROLOGUE RAM_USE_CLASS_1
   178  2CDB  71 10                M8C_SetBank1
   179  2CDD  41 A8 FE             SAR10_Stop_M
   180  2CE0  70 EF                M8C_SetBank0
   181                             RAM_EPILOGUE RAM_USE_CLASS_1
   182  2CE2  7F                   ret
   183                          
   184                          .ENDSECTION
   185                          
   186                          .SECTION
   187                          ;-----------------------------------------------------------------------------
   188                          ;  FUNCTION NAME: SAR10_Trigger
   189                          ;
   190                          ;  DESCRIPTION:
   191                          ;     Trigger the SAR to sample for one time
   192                          ;     Set START/ONGOING bit in SAR_CR0 register
   193                          ;
   194                          ;-----------------------------------------------------------------------------
   195                          ;
   196                          ;  ARGUMENTS:   Nothing
   197                          ;  RETURNS:         Nothing
   198                          ;  SIDE EFFECTS: 
   199                          ;    The A and X registers may be modified by this or future implementations
   200                          ;    of this function.  The same is true for all RAM page pointer registers in
   201                          ;    the Large Memory Model.  When necessary, it is the calling function's
   202                          ;    responsibility to perserve their values across calls to fastcall16 
   203                          ;    functions.
   204                          ;
   205  2CE3                     SAR10_Trigger:
   206  2CE3                    _SAR10_Trigger:
   207                             RAM_PROLOGUE RAM_USE_CLASS_1
   208  2CE3  71 10                M8C_SetBank1
   209  2CE5  43 A8 02             or    reg[SAR10_SAR_CR0_REG], SAR10_SAR_CR0_REG_SW_TRIG_BIT
   210  2CE8  70 EF                M8C_SetBank0
   211                             RAM_EPILOGUE RAM_USE_CLASS_1
   212  2CEA  7F                   ret
   213                          
   214                          .ENDSECTION
   215                          
   216                          .SECTION
   217                          ;-----------------------------------------------------------------------------
   218                          ;  FUNCTION NAME: SAR10_fIsDataAvailable
   219                          ;
   220                          ;  DESCRIPTION:
   221                          ;     Checks the availability of sampled data.
   222                          ;     Get READY bit from SAR_CR0 register
   223                          ;
   224                          ;-----------------------------------------------------------------------------
   225                          ;
   226                          ;  ARGUMENTS:   None
   227                          ;  RETURNS:     fastcall16 BYTE fIsDataAvailable (void)
   228                          ;  SIDE EFFECTS: 
   229                          ;    The A and X registers may be modified by this or future implementations
   230                          ;    of this function.  The same is true for all RAM page pointer registers in
   231                          ;    the Large Memory Model.  When necessary, it is the calling function's
   232                          ;    responsibility to perserve their values across calls to fastcall16 
   233                          ;    functions.
   234                          ;
   235  2CEB                     SAR10_fIsDataAvailable:
   236  2CEB                    _SAR10_fIsDataAvailable:
   237                             RAM_PROLOGUE RAM_USE_CLASS_4
   238  2CEB  71 10                M8C_SetBank1
   239  2CED  5D A8                mov   A,reg[SAR10_SAR_CR0_REG]    ; Read value of SAR_CR0 register
   240  2CEF  70 EF                M8C_SetBank0
   241  2CF1  21 04                and   A,SAR10_READY_MASK                   ; Checks the availability of sampled data.
   242                             RAM_EPILOGUE RAM_USE_CLASS_4
   243  2CF3  7F                   ret
   244                          
   245                          .ENDSECTION
   246                          
   247                          .SECTION
   248                          ;-----------------------------------------------------------------------------
   249                          ;  FUNCTION NAME: SAR10_iGetData
   250                          ;
   251                          ;  DESCRIPTION:
   252                          ;     Returns last converted data.
   253                          ;     SAR_DL will be read first, then the SAR_DH
   254                          ;     The MSB is returned in X and the LSB in A
   255                          ;     Note: this function returns correct result only in right-justify mode 
   256                          ;     for CY8C28x45 device.
   257                          ;
   258                          ;-----------------------------------------------------------------------------
   259                          ;
   260                          ;  ARGUMENTS:   None
   261                          ;  RETURNS:     fastcall16 INT iGetData(void)
   262                          ;  SIDE EFFECTS: 
   263                          ;    The A and X registers may be modified by this or future implementations
   264                          ;    of this function.  The same is true for all RAM page pointer registers in
   265                          ;    the Large Memory Model.  When necessary, it is the calling function's
   266                          ;    responsibility to perserve their values across calls to fastcall16 
   267                          ;    functions.
   268                          ;
   269  FFFFFFFE                       Temp_offs:         equ  -2
   270  FFFFFFFF                       DL_REG_offs:       equ  -1
   271                                  
   272  2CF4                     SAR10_iGetData:
   273  2CF4                    _SAR10_iGetData:
   274  2CF4  71 40                RAM_PROLOGUE RAM_USE_CLASS_2
   275                          IF(SAR10_Justify)  ; for CY8C28x45 Device
   276                             mov   A, reg[SAR10_SAR_DL_REG]  ; Get 8 lowest bits
   277                             push  A                                    ; Store 8 lowest bits in stack
   278                             mov   A, reg[SAR10_SAR_DH_REG]  ; Read 2 highest bits
   279                             mov   X, A                                 ; Get MSB of result
   280                             pop   A                                    ; Get LSB of result
   281                          ELSE ;for CY8C22x45 device
   282  2CF6  50 00                mov   A, 0x00                              ; Init local var
   283  2CF8  08                   push  A                                    ; Reserve one byte in stack
   284  2CF9  5D 6B                mov   A, reg[SAR10_SAR_DL_REG]  ; Get 2 lowest bits
   285  2CFB  08                   push  A                                    ; Store 2 lowest bits in stack
   286  2CFC  4F                   mov   X, SP                                ; Set SP in X
   287  2CFD  5D 6A                mov   A, reg[SAR10_SAR_DH_REG]  ; Read 8 highest bits
   288  2CFF  64                   asl   A                                    ; Determine two highest bits and store it in stack
   289  2D00  6C FE                rlc   [X+Temp_offs]
   290  2D02  64                   asl   A
   291  2D03  6C FE                rlc   [X+Temp_offs]
   292  2D05  2B FF                or    A, [X+DL_REG_offs]                    ; Form LSB of result
   293  2D07  20                   pop   X                                     
   294  2D08  20                   pop   X                                     ; Get MSB of result
   295                          ENDIF
   296                             RAM_EPILOGUE RAM_USE_CLASS_2
      + 2D09  70 3F             	and	f, 0x3F
      + 2D0B  71 80             	or	f, 0x80
   297  2D0D  7F                   ret
   298                          
   299                          .ENDSECTION
   300                          
   301                          .SECTION
   302                          ;-----------------------------------------------------------------------------
   303                          ;  FUNCTION NAME: SAR10_GetDataMSB8
   304                          ;
   305                          ;  DESCRIPTION:
   306                          ;    Returns last converted data.
   307                          ;    Note: this function returns correct result only in left-justify mode
   308                          ;    for CY8C28x45 device.  
   309                          ;
   310                          ;-----------------------------------------------------------------------------
   311                          ;
   312                          ;  ARGUMENTS:    Nothing
   313                          ;  RETURNS:          fastcall16 char GetDataMSB8(void)
   314                          ;  SIDE EFFECTS: 
   315                          ;    The A and X registers may be modified by this or future implementations
   316                          ;    of this function.  The same is true for all RAM page pointer registers in
   317                          ;    the Large Memory Model.  When necessary, it is the calling function's
   318                          ;    responsibility to perserve their values across calls to fastcall16 
   319                          ;    functions.
   320                          ;
   321  2D0E                     SAR10_bGetData:
   322  2D0E                    _SAR10_bGetData:
   323                             RAM_PROLOGUE RAM_USE_CLASS_1
   324  2D0E  5D 6A                mov   A,reg[SAR10_SAR_DH_REG]
   325                             RAM_EPILOGUE RAM_USE_CLASS_1
   326  2D10  7F                   ret
   327                          
   328                          .ENDSECTION
   329                          
   330                          .SECTION
   331                          ;-----------------------------------------------------------------------------
   332                          ;  FUNCTION NAME: SAR10_SelectADCChannel
   333                          ;
   334                          ;  DESCRIPTION:
   335                          ;    Select the SAR input from 14 optional input channels.
   336                          ;   Set ADC_CHS bits in SAR_CR0 register
   337                          ;-----------------------------------------------------------------------------
   338                          ;
   339                          ;  ARGUMENTS:    fastcall16 void SelectADCChannel(passed in A)
   340                          ;  RETURNS:    None
   341                          ;  SIDE EFFECTS: 
   342                          ;    The A and X registers may be modified by this or future implementations
   343                          ;    of this function.  The same is true for all RAM page pointer registers in
   344                          ;    the Large Memory Model.  When necessary, it is the calling function's
   345                          ;    responsibility to perserve their values across calls to fastcall16 
   346                          ;    functions.
   347                          ;
   348  2D11                     SAR10_SetADCChannel:
   349  2D11                    _SAR10_SetADCChannel:
   350  2D11  71 40                RAM_PROLOGUE RAM_USE_CLASS_2
   351  2D13  21 78                and   A, SAR10_CHN_SEL_MASK
   352  2D15  4F                   mov   X, SP
   353  2D16  08                   push  A                                     ; store value in stack
   354  2D17  71 10                M8C_SetBank1
   355  2D19  5D A8                mov   A, reg[SAR10_SAR_CR0_REG]  ; get register value
   356  2D1B  21 87                and   A, ~SAR10_CHN_SEL_MASK     ; clear ADC_CHS bits
   357  2D1D  2B 00                or    A, [X]                                ; set ADC_CHS bits
   358  2D1F  60 A8                mov   reg[SAR10_SAR_CR0_REG], A  ; set new register value
   359  2D21  70 EF                M8C_SetBank0
   360  2D23  18                   pop   A
   361                             RAM_EPILOGUE RAM_USE_CLASS_2
      + 2D24  70 3F             	and	f, 0x3F
      + 2D26  71 80             	or	f, 0x80
   362  2D28  7F                   ret
   363                          
   364                          .ENDSECTION
   365                          
   366                          .SECTION
   367                          ;-----------------------------------------------------------------------------
   368                          ;  FUNCTION NAME: SAR10_SelectTriggerSrc
   369                          ;
   370                          ;  DESCRIPTION:
   371                          ;    Select the SAR10 auto-trigger source 
   372                          ;    by setting TIGSEL in SAR_CR1
   373                          ;
   374                          ;-----------------------------------------------------------------------------
   375                          ;
   376                          ;  ARGUMENTS:    fastcall16 void SelectTriggerSrc(passed in A)
   377                          ;  RETURNS:    None
   378                          ;  SIDE EFFECTS: 
   379                          ;    The A and X registers may be modified by this or future implementations
   380                          ;    of this function.  The same is true for all RAM page pointer registers in
   381                          ;    the Large Memory Model.  When necessary, it is the calling function's
   382                          ;    responsibility to perserve their values across calls to fastcall16 
   383                          ;    functions.
   384                          ;
   385  2D29                     SAR10_SetTriggerSrc:
   386  2D29                    _SAR10_SetTriggerSrc:
   387  2D29  71 40                RAM_PROLOGUE RAM_USE_CLASS_2
   388  2D2B  21 30                and   A, SAR10_TRG_SEL_MASK 
   389  2D2D  4F                   mov   X, SP
   390  2D2E  08                   push  A                                    ; store value in stack
   391  2D2F  71 10                M8C_SetBank1
   392  2D31  5D A9                mov   A, reg[SAR10_SAR_CR1_REG]  ; get register value
   393  2D33  21 CF                and   A, ~SAR10_TRG_SEL_MASK     ; clear TIGSEL bits
   394  2D35  2B 00                or    A, [X]                                ; set TIGSEL bits
   395  2D37  60 A9                mov   reg[SAR10_SAR_CR1_REG], A  ; set new register value
   396  2D39  70 EF                M8C_SetBank0
   397  2D3B  18                   pop   A
   398                             RAM_EPILOGUE RAM_USE_CLASS_2
      + 2D3C  70 3F             	and	f, 0x3F
      + 2D3E  71 80             	or	f, 0x80
   399  2D40  7F                   ret
   400                          
   401                          .ENDSECTION
   402                          
   403                          .SECTION
   404                          ;-----------------------------------------------------------------------------
   405                          ;  FUNCTION NAME: SAR10_EnableAutoTrigger
   406                          ;
   407                          ;  DESCRIPTION:
   408                          ;    Global enable CR of the SAR10 auto-trigger function by setting 
   409                          ;    by setting ALIGN_EN in SAR_CR1
   410                          ;
   411                          ;-----------------------------------------------------------------------------
   412                          ;
   413                          ;  ARGUMENTS:    fastcall16 void EnableAutoTrigger(passed in A)
   414                          ;  RETURNS:    None
   415                          ;  SIDE EFFECTS: 
   416                          ;    The A and X registers may be modified by this or future implementations
   417                          ;    of this function.  The same is true for all RAM page pointer registers in
   418                          ;    the Large Memory Model.  When necessary, it is the calling function's
   419                          ;    responsibility to perserve their values across calls to fastcall16 
   420                          ;    functions.
   421                          ;
   422  2D41                     SAR10_EnableAutoTrigger:
   423  2D41                    _SAR10_EnableAutoTrigger:
   424  2D41  71 40                RAM_PROLOGUE RAM_USE_CLASS_2
   425  2D43  21 01                and   A, SAR10_ALIGN_EN_MASK
   426  2D45  4F                   mov   X, SP
   427  2D46  08                   push  A                                    ; store value in stack
   428  2D47  71 10                M8C_SetBank1
   429  2D49  5D A9                mov   A, reg[SAR10_SAR_CR1_REG]  ; get register value
   430  2D4B  21 FE                and   A, ~SAR10_ALIGN_EN_MASK    ; clear ALIGN_EN bits
   431  2D4D  2B 00                or    A, [X]                                ; set ALIGN_EN bits
   432  2D4F  60 A9                mov   reg[SAR10_SAR_CR1_REG], A  ; set new register value
   433  2D51  70 EF                M8C_SetBank0
   434  2D53  18                   pop   A
   435                             RAM_EPILOGUE RAM_USE_CLASS_2
      + 2D54  70 3F             	and	f, 0x3F
      + 2D56  71 80             	or	f, 0x80
   436  2D58  7F                   ret
   437                          
   438                          .ENDSECTION
   439                          
   440                          .SECTION
   441                          ;-----------------------------------------------------------------------------
   442                          ;  FUNCTION NAME: SAR10_SetClk
   443                          ;
   444                          ;  DESCRIPTION:
   445                          ;    Set SAR Sample Rate and Clock Selection 
   446                          ;    by setting CLKSEL bits in SAR_CR1
   447                          ;
   448                          ;-----------------------------------------------------------------------------
   449                          ;
   450                          ;  ARGUMENTS:    fastcall16 void SetClk(passed in A)
   451                          ;  RETURNS:    None
   452                          ;  SIDE EFFECTS: 
   453                          ;    The A and X registers may be modified by this or future implementations
   454                          ;    of this function.  The same is true for all RAM page pointer registers in
   455                          ;    the Large Memory Model.  When necessary, it is the calling function's
   456                          ;    responsibility to perserve their values across calls to fastcall16 
   457                          ;    functions.
   458                          ;
   459  2D59                     SAR10_SetClk:
   460  2D59                    _SAR10_SetClk:
   461  2D59  71 40                RAM_PROLOGUE RAM_USE_CLASS_2
   462  2D5B  21 0E                and   A, SAR10_CLK_SEL_MASK
   463  2D5D  4F                   mov   X, SP
   464  2D5E  08                   push  A                                    ; store value in stack
   465  2D5F  71 10                M8C_SetBank1
   466  2D61  5D A9                mov   A, reg[SAR10_SAR_CR1_REG]  ; get register value
   467  2D63  21 F1                and   A, ~SAR10_CLK_SEL_MASK     ; clear CLKSEL bits
   468  2D65  2B 00                or    A, [X]                                ; set CLKSEL bits
   469  2D67  60 A9                mov   reg[SAR10_SAR_CR1_REG], A  ; set new register value
   470  2D69  70 EF                M8C_SetBank0
   471  2D6B  18                   pop   A
   472                             RAM_EPILOGUE RAM_USE_CLASS_2
      + 2D6C  70 3F             	and	f, 0x3F
      + 2D6E  71 80             	or	f, 0x80
   473  2D70  7F                   ret
   474                          
   475                          .ENDSECTION
   476                          
   477                          .SECTION
   478                          ;-----------------------------------------------------------------------------
   479                          ;  FUNCTION NAME: SAR10_SetRunMode
   480                          ;
   481                          ;  DESCRIPTION:
   482                          ;    Set free-running mode for SAR
   483                          ;    by setting FREERUN bits in SAR_CR2
   484                          ;
   485                          ;-----------------------------------------------------------------------------
   486                          ;
   487                          ;  ARGUMENTS:    fastcall16 void SetRunMode(passed in A)
   488                          ;  RETURNS:    None
   489                          ;  SIDE EFFECTS: 
   490                          ;    The A and X registers may be modified by this or future implementations
   491                          ;    of this function.  The same is true for all RAM page pointer registers in
   492                          ;    the Large Memory Model.  When necessary, it is the calling function's
   493                          ;    responsibility to perserve their values across calls to fastcall16 
   494                          ;    functions.
   495                          ;
   496  2D71                     SAR10_SetRunMode:
   497  2D71                    _SAR10_SetRunMode:
   498  2D71  71 40                RAM_PROLOGUE RAM_USE_CLASS_2
   499  2D73  21 08                and   A, SAR10_FREE_RUN_MASK
   500  2D75  4F                   mov   X, SP
   501  2D76  08                   push  A                                    ; store value in stack
   502  2D77  71 10                M8C_SetBank1
   503  2D79  5D AA                mov   A, reg[SAR10_SAR_CR2_REG]  ; get register value
   504  2D7B  21 F7                and   A, ~SAR10_FREE_RUN_MASK    ; clear FREERUN bits
   505  2D7D  2B 00                or    A, [X]                                ; set FREERUN bits
   506  2D7F  60 AA                mov reg[SAR10_SAR_CR2_REG], A   ; set new register value   
   507  2D81  70 EF                M8C_SetBank0
   508  2D83  18                   pop   A
   509                             RAM_EPILOGUE RAM_USE_CLASS_2
      + 2D84  70 3F             	and	f, 0x3F
      + 2D86  71 80             	or	f, 0x80
   510  2D88  7F                   ret
HI-TECH Software Macro Assembler (PSoC MCU) V9.61
Symbol Table                                                                                               Fri Jun 12 09:25:10 2015
                    Temp_offs FFFFFFFE       _SAR10_EnableAutoTrigger 2D41            SAR10_FREE_RUN_MASK 0008  
          SAR10_ALIGN_EN_MASK 0001               SAR10_READY_MASK 0004             SAR10_TRG_SEL_MASK 0030  
          SAR10_SetADCChannel 2D11               SAR10_SetRunMode 2D71                 SAR10_bGetData 2D0E  
                       HITECH 0002                FLAG_PGMODE_01b 0040                FLAG_PGMODE_10b 0080  
             SAR10_SAR_DH_REG 006A               SAR10_SAR_DL_REG 006B                 _SAR10_Trigger 2CE3  
                 SAR10_SetClk 2D59              _SAR10_SetRunMode 2D71                 SAR10_iGetData 2CF4  
       SAR10_fIsDataAvailable 2CEB                SAR10_EnableInt 2CCB      SYSTEM_LARGE_MEMORY_MODEL 0001  
      _SAR10_fIsDataAvailable 2CEB                  SAR10_INT_REG 00DF                _SAR10_bGetData 2D0E  
           SAR10_CHN_SEL_MASK 0078                    DL_REG_offs FFFFFFFF                      TOOLCHAIN 0002  
            SAR10_SAR_CR0_REG 00A8              SAR10_SAR_CR1_REG 00A9              SAR10_SAR_CR2_REG 00AA  
SAR10_SAR_CR0_REG_SW_TRIG_BIT 0002               FLAG_PGMODE_MASK 00C0                _SAR10_iGetData 2CF4  
              RAM_USE_CLASS_1 0001                RAM_USE_CLASS_2 0002                RAM_USE_CLASS_3 0004  
              RAM_USE_CLASS_4 0008                  _SAR10_SetClk 2D59                  SAR10_Justify 0000  
                  SAR10_Start 2CD3                  SAR10_Trigger 2CE3    SAR10_SAR_CR0_REG_START_BIT 0001  
           SAR10_CLK_SEL_MASK 000E           _SAR10_SetTriggerSrc 2D29        SAR10_EnableAutoTrigger 2D41  
                 _SAR10_Start 2CD3                     SAR10_Stop 2CDB               SAR10_DisableInt 2CCF  
           SAR10_INT_SAR_MASK 0010                    _SAR10_Stop 2CDB                  FLAG_XIO_MASK 0010  
            _SAR10_DisableInt 2CCF     SYSTEM_IDXPG_TRACKS_IDX_PP 0001               _SAR10_EnableInt 2CCB  
         _SAR10_SetADCChannel 2D11     SYSTEM_IDXPG_TRACKS_STK_PP 0000            SAR10_SetTriggerSrc 2D29  
HI-TECH Software Macro Assembler (PSoC MCU) V9.61
                                                                                                           Fri Jun 12 09:25:10 2015
     1                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     2                          ;;;
     3                          ;;;  M8C.INC -- Microcontroller Device System Declarations
     4                          ;;;
     5                          ;;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
     6                          ;;;
     7                          ;;;  This file provides address constants, bit field masks and a set of macro
     8                          ;;;  facilities for the Cypress Semiconductor CY8C22045 Microcontroller devices.
     9                          ;;;
    10                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    11                          
    12                          ;;=============================================================================
    13                          ;; Definition of abbreviations used in the descriptions below
    14                          ;;  (RW)   The register or bit supports reads and writes
    15                          ;;  (W)    The register or bit is write-only
    16                          ;;  (R)    The register or bit is read-only
    17                          ;;  (#)    Access to the register is bit specific (see the family datasheet)
    18                          ;;  (RC)   The register or bit can be read, but writing a 0 will clear it,
    19                          ;;         writing a 1 will have no effect.
    20                          ;;=============================================================================
    21                          
    22                          ;;=============================================================================
    23                          ;;      System Registers
    24                          ;;=============================================================================
    25                          
    26                          ;----------------------------
    27                          ;  Flag Register Bit Fields
    28                          ;----------------------------
    29  00C0                    FLAG_PGMODE_MASK:  equ 0C0h     ; Paging control for > 256 bytes of RAM
    30  0000                    FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
    31  0040                    FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
    32  0080                    FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
    33  00C0                    FLAG_PGMODE_3:     equ 0C0h       ; Direct to CUR_PP page, indexed to STK_PP page
    34  0000                    FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
    35  0040                    FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
    36  0080                    FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
    37  00C0                    FLAG_PGMODE_11b:   equ 0C0h       ; Same as PGMODE_3
    38  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    39  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    40  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    41  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    42  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    43                          
    44                          
    45                          ;;=============================================================================
    46                          ;;      Register Space, Bank 0
    47                          ;;=============================================================================
    48                          
    49                          ;------------------------------------------------
    50                          ;  Port Registers
    51                          ;  Note: Also see this address range in Bank 1.
    52                          ;------------------------------------------------
    53                          ; Port 0
    54  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    55  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    56  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    57  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    58                          ; Port 1
    59  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    60  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    61  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    62  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    63                          ; Port 2
    64  0008                    PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
    65  0009                    PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
    66  000A                    PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
    67  000B                    PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
    68                          ; Port 3
    69  000C                    PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
    70  000D                    PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
    71  000E                    PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
    72  000F                    PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
    73                          ; Port 4
    74  0010                    PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
    75  0011                    PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
    76  0012                    PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
    77  0013                    PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
    78                          
    79                          ;------------------------------------------------
    80                          ;  Digital PSoC(tm) block Registers
    81                          ;  Note: Also see this address range in Bank 1.
    82                          ;------------------------------------------------
    83                          ; Digital PSoC block 00, Basic Type C
    84  0020                    DBC00DR0:     equ 20h          ; data register 0                          (#)
    85  0021                    DBC00DR1:     equ 21h          ; data register 1                          (W)
    86  0022                    DBC00DR2:     equ 22h          ; data register 2                          (RW)
    87  0023                    DBC00CR0:     equ 23h          ; control & status register 0              (#)
    88                          
    89                          ; Digital PSoC block 01, Basic Type C
    90  0024                    DBC01DR0:     equ 24h          ; data register 0                          (#)
    91  0025                    DBC01DR1:     equ 25h          ; data register 1                          (W)
    92  0026                    DBC01DR2:     equ 26h          ; data register 2                          (RW)
    93  0027                    DBC01CR0:     equ 27h          ; control & status register 0              (#)
    94                          
    95                          ; Digital PSoC block 02, Communications Type C
    96  0028                    DCC02DR0:     equ 28h          ; data register 0                          (#)
    97  0029                    DCC02DR1:     equ 29h          ; data register 1                          (W)
    98  002A                    DCC02DR2:     equ 2Ah          ; data register 2                          (RW)
    99  002B                    DCC02CR0:     equ 2Bh          ; control & status register 0              (#)
   100                          
   101                          ; Digital PSoC block 03, Communications Type C
   102  002C                    DCC03DR0:     equ 2Ch          ; data register 0                          (#)
   103  002D                    DCC03DR1:     equ 2Dh          ; data register 1                          (W)
   104  002E                    DCC03DR2:     equ 2Eh          ; data register 2                          (RW)
   105  002F                    DCC03CR0:     equ 2Fh          ; control & status register 0              (#)
   106                          
   107                          ; Digital PSoC block 10, Basic Type C
   108  0030                    DBC10DR0:     equ 30h          ; data register 0                          (#)
   109  0031                    DBC10DR1:     equ 31h          ; data register 1                          (W)
   110  0032                    DBC10DR2:     equ 32h          ; data register 2                          (RW)
   111  0033                    DBC10CR0:     equ 33h          ; control & status register 0              (#)
   112                          
   113                          ; Digital PSoC block 11, Basic Type C
   114  0034                    DBC11DR0:     equ 34h          ; data register 0                          (#)
   115  0035                    DBC11DR1:     equ 35h          ; data register 1                          (W)
   116  0036                    DBC11DR2:     equ 36h          ; data register 2                          (RW)
   117  0037                    DBC11CR0:     equ 37h          ; control & status register 0              (#)
   118                          
   119                          ; Digital PSoC block 12, Communications Type C
   120  0038                    DCC12DR0:     equ 38h          ; data register 0                          (#)
   121  0039                    DCC12DR1:     equ 39h          ; data register 1                          (W)
   122  003A                    DCC12DR2:     equ 3Ah          ; data register 2                          (RW)
   123  003B                    DCC12CR0:     equ 3Bh          ; control & status register 0              (#)
   124                          
   125                          ; Digital PSoC block 13, Communications Type C
   126  003C                    DCC13DR0:     equ 3Ch          ; data register 0                          (#)
   127  003D                    DCC13DR1:     equ 3Dh          ; data register 1                          (W)
   128  003E                    DCC13DR2:     equ 3Eh          ; data register 2                          (RW)
   129  003F                    DCC13CR0:     equ 3Fh          ; control & status register 0              (#)
   130                          
   131                          ;-------------------------------------
   132                          ;  Analog Control Registers
   133                          ;-------------------------------------
   134  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
   135  00C0                    AMX_IN_ACI3:          equ C0h    ; MASK: column 3 input mux
   136  0030                    AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
   137  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
   138  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
   139                          
   140  0061                    AMUX_CFG:      equ 61h          ; Analog MUX Configuration
   141  0030                    AMUX_CFG_INTCAP:       equ 30h    ;
   142  000E                    AMUX_CFG_MUXCLK:  	  equ 0Eh	 ;
   143  0001                    AMUX_CFG_EN:		  	  equ 01h	 ;
   144                          
   145                          ; old declarations DO NOT USE
   146  0061                    AMUXCFG:      equ 61h          ; Analog MUX Configuration
   147  0030                    AMUXCFG_INTCAP:       equ 30h    ;
   148  000E                    AMUXCFG_MUXCLK:  	  equ 0Eh	 ;
   149  0001                    AMUXCFG_EN:		  	  equ 01h	 ;
   150                          
   151  0062                    PWM_CR:       equ 62h          ; Pulse-Width Modulator Control
   152  0038                    PWM_CR_HIGH:          equ 38h    ; MASK: PWM high time
   153  0006                    PWM_CR_LOW:           equ 06h	 ; MASK: PWM low time
   154  0001                    PWM_CR_EN:            equ 01h	 ; MASK: Enable/Disable PWM function
   155                          
   156  0063                    ARF_CR:       equ 63h          ; Analog Reference Control
   157                          
   158  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus Register           (#)
   159  0080                    CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
   160  0040                    CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
   161  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
   162  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
   163  0008                    CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
   164  0004                    CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
   165  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
   166  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   167                          
   168  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   169  0020                    CMP_CR1_CLDIS1:       equ 20h    ; MASK: Column 1 comparator output latch
   170  0010                    CMP_CR1_CLDIS0:	      equ 10h    ; MASK: Column 0 comparator output latch
   171                          
   172  0068                    ADC0_CR:      equ 68h          ; Analog Column 0 Configuration
   173  0080                    ADC0_CR_CMPST:        equ 80h    ;
   174  0040                    ADC0_CR_LOREN:        equ 40h    ;
   175  0020                    ADC0_CR_SHEN:         equ 20h    ;
   176  0008                    ADC0_CR_CBSRC:        equ 08h    ;
   177  0004                    ADC0_CR_ADCM:         equ 04h    ;
   178  0001                    ADC0_CR_EN:	          equ 01h    ;
   179                          
   180  0069                    ADC1_CR:      equ 69h          ; Analog Column 1 Configuration
   181  0080                    ADC1_CR_CMPST:        equ 80h    ;
   182  0040                    ADC1_CR_LOREN:        equ 40h    ;
   183  0020                    ADC1_CR_SHEN:         equ 20h    ;
   184  0008                    ADC1_CR_CBSRC:        equ 08h    ;
   185  0004                    ADC1_CR_ADCM:         equ 04h    ;
   186  0001                    ADC1_CR_EN:	          equ 01h    ;
   187+                         
   188+                         ; Continuous Time PSoC block Type E Row 0 Col 0
   189+ 0072                    ACE00CR1:     equ 72h          ; Control register 1                       (RW)
   190+ 0073                    ACE00CR2:     equ 73h          ; Control register 2                       (RW)
   191                          
   192                          ; Continuous Time PSoC block Type E Row 0 Col 1
   193  0076                    ACE01CR1:     equ 76h          ; Control register 1                       (RW)
   194  0077                    ACE01CR2:     equ 77h          ; Control register 2                       (RW)
   195                          
   196                          ; Switched Cap PSoC blockType E Row 1 Col 0
   197  0080                    ASE10CR0:     equ 80h          ; Control register 0                       (RW)
   198                          
   199                          ; Switched Cap PSoC blockType E Row 1 Col 1
   200  0084                    ASE11CR0:     equ 84h          ; Control register 0                       (RW)
   201                          
   202                          ;-----------------------------------------------
   203                          ;  Global General Purpose Data Registers
   204                          ;-----------------------------------------------
   205  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   206  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   207  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   208  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   209                          
   210                          ;------------------------------------------------
   211                          ;  Row Digital Interconnects
   212                          ;
   213                          ;  Note: the following registers are mapped into
   214                          ;  both register bank 0 AND register bank 1.
   215                          ;------------------------------------------------
   216                          
   217  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   218  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   219  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   220  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   221  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   222  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   223  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   224                          
   225  00B8                    RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
   226  00B9                    RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
   227  00BA                    RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
   228  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   229  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   230  00BD                    RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
   231  00BE                    RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
   232                          
   233                          ;-----------------------------------------------
   234                          ;  Ram Page Pointers
   235                          ;-----------------------------------------------
   236  00D0                    CUR_PP:      equ 0D0h           ; Current   Page Pointer
   237  00D1                    STK_PP:      equ 0D1h           ; Stack     Page Pointer
   238  00D3                    IDX_PP:      equ 0D3h           ; Index     Page Pointer
   239  00D4                    MVR_PP:      equ 0D4h           ; MVI Read  Page Pointer
   240  00D5                    MVW_PP:      equ 0D5h           ; MVI Write Page Pointer
   241                          
   242                          ;------------------------------------------------
   243                          ;  I2C Configuration Registers
   244                          ;------------------------------------------------
   245  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   246  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   247  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   248  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   249  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   250  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   251  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   252  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   253  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   254  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   255                          
   256  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   257  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   258  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   259  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   260  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   261  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   262  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   263  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   264  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   265                          
   266  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   267                          
   268  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   269  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   270  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   271  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   272  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   273                          
   274                          ;------------------------------------------------
   275                          ;  System and Global Resource Registers
   276                          ;------------------------------------------------
   277  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   278                                                         ; Use INT_MSK0 bit field masks
   279  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   280                                                         ; Use INT_MSK1 bit field masks
   281  00DC                    INT_CLR2:     equ 0DCh          ; Interrupt Clear Register 2               (RW)
   282                                                         ; Use INT_MSK2 bit field masks
   283  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   284                                                         ; Use INT_MSK3 bit field masks
   285                          
   286  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   287  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   288  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   289                          
   290  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   291  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   292  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   293  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   294  0010                    INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
   295  0008                    INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
   296  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   297  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   298  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   299                          
   300  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   301  0080                    INT_MSK1_DCC13:            equ 80h ; MASK: enable/disable DCC13 block interrupt
   302  0040                    INT_MSK1_DCC12:            equ 40h ; MASK: enable/disable DCC12 block interrupt
   303  0020                    INT_MSK1_DBC11:            equ 20h ; MASK: enable/disable DBC11 block interrupt
   304  0010                    INT_MSK1_DBC10:            equ 10h ; MASK: enable/disable DBC10 block interrupt
   305  0008                    INT_MSK1_DCC03:            equ 08h ; MASK: enable/disable DCC03 block interrupt
   306  0004                    INT_MSK1_DCC02:            equ 04h ; MASK: enable/disable DCC02 block interrupt
   307  0002                    INT_MSK1_DBC01:            equ 02h ; MASK: enable/disable DBC01 block interrupt
   308  0001                    INT_MSK1_DBC00:            equ 01h ; MASK: enable/disable DBC00 block interrupt
   309                          
   310  00DF                    INT_MSK2:     equ DFh			; Custom block Mask Register			   (RW)
   311  0010                    INT_MSK2_SARADC:           equ 10h ; MASK: enable/disable SARADC block interrupt
   312  0020                    INT_MSK2_CSD0:             equ 20h ; MASK: enable/disable CSD0 block interrupt
   313  0040                    INT_MSK2_CSD1:             equ 40h ; MASK: enable/disable CSD1 block interrupt
   314  0080                    INT_MSK2_RTC:              equ 80h ; MASK: enable/disable RTC block interrupt
   315                          
   316  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   317  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   318                          
   319                          ;------------------------------------------------------
   320                          ;  MAC Registers
   321                          ;------------------------------------------------------
   322                          
   323  00E8                    MUL0_X:       equ 0E8h          ; Multiply Input X Register                (W)
   324  00E9                    MUL0_Y:       equ 0E9h          ; Multiply Input Y Register                (W)
   325  00EA                    MUL0_DH:      equ 0EAh          ; Multiply Result High Byte Register       (R)
   326  00EB                    MUL0_DL:      equ 0EBh          ; Multiply Result Low Byte Register        (R)
   327                          
   328  00EC                    ACC0_DR1:     equ 0ECh          ; Accumulator Data Register 1              (RW)
   329  00ED                    ACC0_DR0:     equ 0EDh          ; Accumulator Data Register 0              (RW)
   330  00EE                    ACC0_DR3:     equ 0EEh          ; Accumulator Data Register 3              (RW)
   331  00EF                    ACC0_DR2:     equ 0EFh          ; Accumulator Data Register 2              (RW)
   332                          
   333                          ; DECIMATOR Control Registers
   334  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   335  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   336                          
   337                          ;------------------------------------------------------
   338                          ;  System Status and Control Registers
   339                          ;
   340                          ;  Note: The following registers are mapped into both
   341                          ;        register bank 0 AND register bank 1.
   342                          ;------------------------------------------------------
   343  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   344                                                             ; Use FLAG_ masks defined at top of file
   345                          
   346  00FD                    DAC_D:        equ 0FDh		   ; DAC Data Register                        (RW)
   347                          
   348  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   349  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: flag, Internal Reset Status bit
   350  0010                    CPU_SCR1_SLIMO:         equ 10h	   ; MASK: Slow IMO (internal main osc) enable
   351  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   352  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   353  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   354                          
   355  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   356  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   357  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   358  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   359  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   360  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   361                          
   362                          ;------------------------------------------------------
   363                          ;  Neon Capsense Digital Control Registers
   364                          ;------------------------------------------------------
   365  0050                    CSD0_DR0_L:				equ 50h		; Capsense 0 data low 0				(RW)
   366  0054                    CSD0_DR0_H:				equ 54h		; Capsense 0 data high 0			(RW)
   367  0058                    CSD1_DR0_L:				equ 58h		; Capsense 1 data low 0				(RW)
   368  005C                    CSD1_DR0_H:				equ 5Ch		; Capsense 1 data high 0			(RW)
   369  0051                    CSD0_DR1_L:				equ 51h		; Capsense 0 data low 1				(RW)
   370  0055                    CSD0_DR1_H:				equ 55h		; Capsense 0 data high 1			(RW)
   371  0059                    CSD1_DR1_L:				equ 59h		; Capsense 1 data low 1				(RW)
   372  005D                    CSD1_DR1_H:				equ 5Dh		; Capsense 1 data high 1			(RW)
   373  0052                    CSD0_CNT_L:				equ 52h		; Capsense 0 counter low			(RW)
   374  0056                    CSD0_CNT_H:				equ 56h		; Capsense 0 counter high			(RW)
   375  005A                    CSD1_CNT_L:				equ 5Ah		; Capsense 1 counter low			(RW)
   376  005E                    CSD1_CNT_H:				equ	5Eh		; Capsense 1 counter high			(RW)
   377  0053                    CSD0_CR0:				equ 53h		; Capsense 0 control 0				(RW)
   378  005B                    CSD1_CR0:				equ 5Bh		; Capsense 1 control 0				(RW)
   379  0057                    CSD0_CR1:				equ 57h		; Capsense 0 control 1				(RW)
   380  005F                    CSD1_CR1:				equ 5Fh		; Capsense 1 control 1				(RW)
   381                          
   382                          ;------------------------------------------------------
   383                          ;  Neon Analog Registers
   384                          ;------------------------------------------------------
   385  0065                    ASY_CR:					equ 65h		; Analog Synchronization Control	(RW)
   386  006A                    ADC_DH:					equ 6Ah		; ADC data high						(RW)
   387  006B                    ADC_DL:					equ 6Bh		; ADC data low						(RW)
   388  00C8                    PWMVREF0:				equ C8h		; PWM Voltage Reference 0			(RW)
   389  00C9                    PWMVREF1:				equ C9h		; PWM Voltage Reference 1			(RW)
   390  00CB                    PWMSRC:					equ CBh		; PWM Source						(RW)
   391  00CA                    IDACMODE:				equ CAh		; IDAC Mode							(RW)
   392  00FC                    IDACR_D:				equ FCh		; Analog Mux DAC data 0				(RW)
   393  00FD                    IDACL_D:				equ FDh		; Analog Mux DAC data 1				(RW)
   394                          
   395                          ;------------------------------------------------------
   396                          ;  Neon Digital Registers
   397                          ;------------------------------------------------------
   398  00B7                    RDI0DSM:				equ B7h		; Row Digital Interconnect input select 0	(RW)
   399  00BF                    RDI1DSM:				equ BFh		; Row Digital Interconnect input select 1	(RW)
   400                          
   401                          ;------------------------------------------------------
   402                          ;  Neon Test Registers
   403                          ;------------------------------------------------------
   404  00CC                    TSCR0:					equ CCh		; Tsource 0							(RW)
   405  00CD                    TSCMPH:					equ CDh		; TSCMP high						(RW)
   406  00CE                    TSCMPL:					equ CEh		; TSCMP low							(RW)
   407  00CF                    TSCR1:					equ CFh		; Tsource 1							(RW)
   408                          
   409                          ;;=============================================================================
   410                          ;;      Register Space, Bank 1
   411                          ;;=============================================================================
   412                          
   413                          ;------------------------------------------------
   414                          ;  Port Registers
   415                          ;  Note: Also see this address range in Bank 0.
   416                          ;------------------------------------------------
   417                          ; Port 0
   418  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   419  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   420  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   421  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   422                          
   423                          ; Port 1
   424  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   425  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   426  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   427  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   428                          
   429                          ; Port 2
   430  0008                    PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
   431  0009                    PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
   432  000A                    PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
   433  000B                    PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
   434                          
   435                          ; Port 3
   436  000C                    PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
   437  000D                    PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
   438  000E                    PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
   439  000F                    PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
   440                          
   441                          ; Port 4
   442  0010                    PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
   443  0011                    PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
   444  0012                    PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
   445  0013                    PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
   446                          
   447                          ;------------------------------------------------
   448                          ;  Digital PSoC(tm) block Registers
   449                          ;  Note: Also see this address range in Bank 0.
   450                          ;------------------------------------------------
   451                          
   452                          ; Digital PSoC block 00, Basic Type C
   453  0020                    DBC00FN:      equ 20h          ; Function Register                        (RW)
   454  0021                    DBC00IN:      equ 21h          ;    Input Register                        (RW)
   455  0022                    DBC00OU:      equ 22h          ;   Output Register                        (RW)
   456  0023                    DBC00CR1:     equ 23h          ;   control & status register 1            (RW)
   457                          
   458                          ; Digital PSoC block 01, Basic Type C
   459  0024                    DBC01FN:      equ 24h          ; Function Register                        (RW)
   460  0025                    DBC01IN:      equ 25h          ;    Input Register                        (RW)
   461  0026                    DBC01OU:      equ 26h          ;   Output Register                        (RW)
   462  0027                    DBC01CR1:     equ 27h          ;   control & status register 1            (RW)
   463                          
   464                          ; Digital PSoC block 02, Communications Type C
   465  0028                    DCC02FN:      equ 28h          ; Function Register                        (RW)
   466  0029                    DCC02IN:      equ 29h          ;    Input Register                        (RW)
   467  002A                    DCC02OU:      equ 2Ah          ;   Output Register                        (RW)
   468  002B                    DBC02CR1:     equ 2Bh          ;   control & status register 1            (RW)
   469                          
   470                          ; Digital PSoC block 03, Communications Type C
   471  002C                    DCC03FN:      equ 2Ch          ; Function Register                        (RW)
   472  002D                    DCC03IN:      equ 2Dh          ;    Input Register                        (RW)
   473  002E                    DCC03OU:      equ 2Eh          ;   Output Register                        (RW)
   474  0029                    DBC03CR1:     equ 29h          ;   control & status register 1            (RW)
   475                          
   476                          ; Digital PSoC block 10, Basic Type C
   477  0030                    DBC10FN:      equ 30h          ; Function Register                        (RW)
   478  0031                    DBC10IN:      equ 31h          ;    Input Register                        (RW)
   479  0032                    DBC10OU:      equ 32h          ;   Output Register                        (RW)
   480  0033                    DBC10CR1:     equ 33h          ;   control & status register 1            (RW)
   481                          
   482                          ; Digital PSoC block 11, Basic Type C
   483  0034                    DBC11FN:      equ 34h          ; Function Register                        (RW)
   484  0035                    DBC11IN:      equ 35h          ;    Input Register                        (RW)
   485  0036                    DBC11OU:      equ 36h          ;   Output Register                        (RW)
   486  0037                    DBC11CR1:     equ 37h          ;   control & status register 1            (RW)
   487                          
   488                          ; Digital PSoC block 12, Communications Type C
   489  0038                    DCC12FN:      equ 38h          ; Function Register                        (RW)
   490  0039                    DCC12IN:      equ 39h          ;    Input Register                        (RW)
   491  003A                    DCC12OU:      equ 3Ah          ;   Output Register                        (RW)
   492  003B                    DBC12CR1:     equ 3Bh          ;   control & status register 1            (RW)
   493                          
   494                          ; Digital PSoC block 13, Communications Type C
   495  003C                    DCC13FN:      equ 3Ch          ; Function Register                        (RW)
   496  003D                    DCC13IN:      equ 3Dh          ;    Input Register                        (RW)
   497  003E                    DCC13OU:      equ 3Eh          ;   Output Register                        (RW)
   498  003F                    DBC13CR1:     equ 3Fh          ;   control & status register 1            (RW)
   499                          
   500                          ;------------------------------------------------
   501                          ;  System and Global Resource Registers
   502                          ;  Note: Also see this address range in Bank 0.
   503                          ;------------------------------------------------
   504                          
   505  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   506  00C0                    CLK_CR0_ACOLUMN_3:    equ C0h    ; MASK: Specify clock for analog cloumn
   507  0030                    CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
   508  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   509  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   510                          
   511  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   512  0018                    CLK_CR1_ACLK1:        equ 18h    ; MASK: Digital PSoC block for analog source
   513  0003                    CLK_CR1_ACLK0:        equ 03h    ; MASK: Digital PSoC block for analog source
   514                          
   515  0003                    CLK_CR1_ACLK2:        equ 03h    ; Deprecated do not use
   516                          
   517  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   518  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   519                          
   520  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   521  000F                    AMD_CR0_AMOD0:        equ 0Fh    ; MASK: Modulation source for analog column 0
   522                          
   523  0064                    CMP_GO_EN:    equ 64h          ; Comparator Bus To Global Out Enable      (RW)
   524  0080                    CMP_GO_EN_GOO5:       equ 80h    ; MASK: Selected Col 1 signal to GOO5
   525  0040                    CMP_GO_EN_GOO1:       equ 40h    ; MASK: Selected Col 1 signal to GOO1
   526  0030                    CMP_GO_EN_SEL1:       equ 30h    ; MASK: Column 1 Signal Select
   527  0008                    CMP_GO_EN_GOO4:       equ 08h    ; MASK: Selected Col 0 signal to GOO4
   528  0004                    CMP_GO_EN_GOO0:       equ 04h    ; MASK: Selected Col 0 signal to GOO0
   529  0003                    CMP_GO_EN_SEL0:       equ 03h    ; MASK: Column 0 Signal Select
   530                          
   531  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   532  000F                    AMD_CR1_AMOD1:        equ 0Fh    ; MASK: Modulation ctrl for analog column 1
   533                          
   534  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   535  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   536  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   537                          
   538  006B                    CLK_CR3:      equ 6Bh          ; Analog Clock Source Control Register 3   (RW)
   539  0040                    CLK_CR3_SYS1:         equ 40h    ; MASK: Analog Clock 1 selection
   540  0030                    CLK_CR3_DIVCLK1:      equ 30h    ; MASK: Analog Clock 1 divider
   541  0004                    CLK_CR3_SYS0:         equ 04h    ; MASK: Analog Clock 0 selection
   542  0003                    CLK_CR3_DIVCLK0:      equ 03h    ; MASK: Analog Clock 0 divider
   543                          
   544                          ;------------------------------------------------
   545                          ;  Global Digital Interconnects
   546                          ;------------------------------------------------
   547                          
   548  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   549  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   550  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   551  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   552                          
   553  00A0                    GDI_O_IN_CR:  equ 0A0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   554  00A1                    GDI_E_IN_CR:  equ 0A1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   555  00A2                    GDI_O_OU_CR:  equ 0A2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   556  00A3                    GDI_E_OU_CR:  equ 0A3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   557                          
   558  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   559  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   560                          
   561                          ;------------------------------------------------
   562                          ;  Analog Mux Bus Port Enable Bits
   563                          ;------------------------------------------------
   564  00D8                    MUX_CR0:      equ 0D8h          ; Analog Mux Port 0 Bit Enables Register
   565  00D9                    MUX_CR1:      equ 0D9h          ; Analog Mux Port 1 Bit Enables Register
   566  00DA                    MUX_CR2:      equ 0DAh          ; Analog Mux Port 2 Bit Enables Register
   567  00DB                    MUX_CR3:      equ 0DBh          ; Analog Mux Port 3 Bit Enables Register
   568  00EC                    MUX_CR4:      equ 0ECh          ; Analog Mux Port 4 Bit Enables Register
   569                          
   570                          ;------------------------------------------------
   571                          ;  Clock and System Control Registers
   572                          ;------------------------------------------------
   573                          
   574  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   575  0080                    OSC_GO_EN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   576  0040                    OSC_GO_EN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   577  0020                    OSC_GO_EN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   578  0010                    OSC_GO_EN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   579  0008                    OSC_GO_EN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   580  0004                    OSC_GO_EN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   581  0002                    OSC_GO_EN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   582  0001                    OSC_GO_EN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   583                          
   584  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   585  0003                    OSC_CR4_VC3SEL:       equ 03h    ; MASK: System VC3 Clock source
   586                          
   587  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   588                          
   589  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   590  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   591  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   592  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   593  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   594  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   595  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   596  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   597  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   598  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   599  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   600  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   601  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   602  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   603  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   604  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   605  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   606  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   607                          
   608  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   609  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   610  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   611                          
   612  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   613  0080                    OSC_CR2_PLLGAIN:      equ 80h    ; MASK: High/Low gain
   614  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   615  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   616  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   617                          
   618  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   619  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   620  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   621  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   622  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   623  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   624  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   625  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   626                          
   627  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   628  0008                    VLT_CMP_NOWRITE:      equ 08h    ; MASK: Vcc below Flash Write level
   629  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   630  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   631  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   632                          
   633  00E5                    ADC0_TR:      equ 0E5h          ; ADC Column 0 Trim Register
   634  00E6                    ADC1_TR:      equ 0E6h          ; ADC Column 1 Trim Register
   635                          
   636  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   637  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   638  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   639  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   640                          
   641  00FA                    FLS_PR1:      equ 0FAh          ; Flash Program Register 1                 (RW)
   642  0003                    FLS_PR1_BANK:         equ 03h    ; MASK: Select Active Flash Bank
   643                          
   644  00FD                    DAC_CR0:       equ 0FDh          ; Analog Mux DAC Control Register 0
   645  00DC                    DAC_CR1:       equ 0DCh          ; Analog Mux DAC Control Register 1
   646  0008                    DAC_CR_IRANGE:        equ 08h    ; MASK: Sets the DAC Range low or high
   647  0006                    DAC_CR_OSCMODE:       equ 06h    ; MASK: Defines the reset mode for AMux
   648  0001                    DAC_CR_ENABLE:        equ 01h    ; MASK: Enable/Disable DAC function
   649                          
   650                          ;------------------------------------------------
   651                          ;  I2C Control Registers
   652                          ;------------------------------------------------
   653                          
   654  00AD                    I2C_ADDR:    equ 0ADh          ; I2C Address Register (RW)
   655                          
   656                          ;------------------------------------------------------
   657                          ;  Neon Analog Registers
   658                          ;------------------------------------------------------
   659  0053                    VDAC50CR0:		equ 53h			; V DAC5 control 0				(RW)
   660  0057                    VDAC51CR0:		equ 57h			; V DAC5 control 1				(RW)
   661  00A8                    ADC_CR0:		equ A8h			; ADC control 0					(RW)
   662  00A9                    ADC_CR1:		equ A9h			; ADC control 1					(RW)
   663  00AA                    ADC_CR2:		equ AAh			; ADC control 2					(RW)
   664  00AB                    ADC_CR3TRIM:	equ ABh			; ADC control 3					(RW)
   665  00AC                    ADC_CR4:		equ ACh			; ADC control 4					(RW)
   666  00E7                    VDAC_TRIM:		equ E7h			; V DAC trim					(RW)
   667                          
   668                          ;------------------------------------------------------
   669                          ;  Neon Current Sense CMP Registers
   670                          ;------------------------------------------------------
   671  0050                    CMP0CR1:		equ 50h			; CMP0 control 1				(RW)
   672  0051                    CMP0CR2:		equ 51h			; CMP0 control 2				(RW)
   673  0054                    CMP1CR1:		equ 54h			; CMP1 control 1				(RW)
   674  0055                    CMP1CR2:		equ 55h			; CMP1 control 2				(RW)
   675  0058                    CSCMPCR0:		equ 58h			; CSCMP control 0				(RW)
   676  0059                    CSCMPGOEN:		equ 59h			; CSCMO global out enable		(RW)
   677  005A                    CSLUTCR0:		equ 5Ah			; CSLUT control 0				(RW)
   678  005B                    CMPCOLMUX:		equ 5Bh			; CMP Column Mux				(RW)
   679  005C                    CMPPWMCR:		equ 5Ch			; CMP PWM control				(RW)
   680  005D                    CMPFLTCR:		equ 5Dh			; CMP filter control			(RW)
   681  005E                    CMPCLK1:		equ 5Eh			; CMP clock 1					(RW)
   682  005F                    CMPCLK0:		equ 5Fh			; CMP clock 0					(RW)
   683                          
   684                          ;------------------------------------------------------
   685                          ;  Neon Real Time Clock Registers
   686                          ;------------------------------------------------------
   687  00A4                    RTCH:			equ A4h			; Real time current hour		(RW)
   688  00A5                    RTCM:			equ A5h			; Real time current minute		(RW)
   689  00A6                    RTCS:			equ A6h			; Real time current second		(RW)
   690  00A7                    RTCCR:			equ A7h			; Real time clock control		(RW)
   691                          
   692                          ;------------------------------------------------------
   693                          ;  Analog MUX Config Registers
   694                          ;------------------------------------------------------
   695                          
   696  006A                    AMUX_CFG1:			equ 6Ah  ; Analog MUX Configuration 1
   697  0020                    AMUX_CFG1_GOINVR:	equ 20h  ;
   698  0010                    AMUX_CFG1_GOINVL:  	equ 10h	 ;
   699  000C                    AMUX_CFG1_AMUXMODR:	equ 0Ch	 ;
   700  0003                    AMUX_CFG1_AMUXMODL:	equ 03h	 ;
   701                          
   702                          ;;=============================================================================
   703                          ;;      M8C System Macros
   704                          ;;  These macros should be used when their functions are needed.
   705                          ;;=============================================================================
   706                          
   707                          ;----------------------------------------------------
   708                          ;  Swapping Register Banks
   709                          ;----------------------------------------------------
   710                              macro M8C_SetBank0
   711                              and   F, ~FLAG_XIO_MASK
   712  3C51                        endm
   713                          
   714                              macro M8C_SetBank1
   715                              or    F, FLAG_XIO_MASK
   716  3C51                        endm
   717                          
   718                          ;----------------------------------------------------
   719                          ;  Global Interrupt Enable/Disable
   720                          ;----------------------------------------------------
   721                              macro M8C_EnableGInt
   722                              or    F, FLAG_GLOBAL_IE
   723  3C51                        endm
   724                          
   725                              macro M8C_DisableGInt
   726                              and   F, ~FLAG_GLOBAL_IE
   727  3C51                        endm
   728                          
   729                          ;----------------------------------------------------
   730                          ;  Enable/Disable Interrupt Mask
   731                          ;
   732                          ;  Use the following macros to enable/disable
   733                          ;  bits in the Interrupt mask registers,
   734                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   735                          ;
   736                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   737                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   738                          ;
   739                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   740                          ;        and MASK is the bit set to enable or disable
   741                          ;----------------------------------------------------
   742                          ; Disable Interrupt Bit Mask(s)
   743                              macro M8C_DisableIntMask
   744                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   745  3C51                        endm
   746                          
   747                          ; Enable Interrupt Bit Mask(s)
   748                              macro M8C_EnableIntMask
   749                              or    reg[@0], @1               ; enable specified interrupt enable bit
   750  3C51                        endm
   751                          
   752                          ;----------------------------------------------------
   753                          ;  Clear Posted Interrupt Flag Mask
   754                          ;
   755                          ;  Use the following macros to clear the
   756                          ;  bits in the Interrupt Clear registers,
   757                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   758                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   759                          ;
   760                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   761                          ;        and MASK is the bit set to enable or disable
   762                          ;----------------------------------------------------
   763                              macro M8C_ClearIntFlag
   764                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   765  3C51                        endm
   766                          
   767                          ;----------------------------------------------------
   768                          ;  Power-On Reset & WatchDog Timer Functions
   769                          ;----------------------------------------------------
   770                              macro M8C_EnableWatchDog
   771                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   772  3C51                        endm
   773                          
   774                              macro M8C_ClearWDT
   775                              mov   reg[RES_WDT], 00h
   776  3C51                        endm
   777                          
   778                              macro M8C_ClearWDTAndSleep
   779                              mov   reg[RES_WDT], 38h
   780  3C51                        endm
   781                          
   782                          ;----------------------------------------------------
   783                          ;  Sleep, CPU Stop & Software Reset
   784                          ;----------------------------------------------------
   785                              macro M8C_Sleep
   786                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   787                              ; The next instruction to be executed depends on the state of the
   788                              ; various interrupt enable bits. If some interrupts are enabled
   789                              ; and the global interrupts are disabled, the next instruction will
   790                              ; be the one that follows the invocation of this macro. If global
   791                              ; interrupts are also enabled then the next instruction will be
   792                              ; from the interrupt vector table. If no interrupts are enabled
   793                              ; then the CPU sleeps forever.
   794  3C51                        endm
   795                          
   796                              macro M8C_Stop
   797                              ; In general, you probably don't want to do this, but here's how:
   798                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   799                              ; Next instruction to be executed is located in the interrupt
   800                              ; vector table entry for Power-On Reset.
   801  3C51                        endm
   802                          
   803                              macro M8C_Reset
   804                              ; Restore CPU to the power-on reset state.
   805                              mov A, 0
   806                              SSC
   807                              ; Next non-supervisor instruction will be at interrupt vector 0.
   808  3C51                        endm
   809                          
   810                          ;----------------------------------------------------
   811                          ; ImageCraft Code Compressor Actions
   812                          ;----------------------------------------------------
   813                              ; Suspend Code Compressor
   814                              ; Must not span a RET or RETI instruction
   815                              ; without resuming code compression
   816                              macro Suspend_CodeCompressor
   817                              or   F, 0
   818  3C51                        endm
   819                          
   820                              ; Resume Code Compression
   821                              macro Resume_CodeCompressor
   822                              add  SP, 0
   823                              endm
      + 3C51                    
      + 3C51                    ; end of file m8c.inc
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;
     4                          ;;       FILENAME: Memory.inc
     5                          ;;
     6                          ;;    DESCRIPTION: Memory Model and Stack Parameter Definitions for 
     7                          ;;                 CY8C22045 PSoC devices.
     8                          ;;
     9                          ;;  LAST MODIFIED: August 17, 2004
    10                          ;;
    11                          ;;-----------------------------------------------------------------------------
    12                          ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
    13                          ;;*****************************************************************************
    14                          ;;*****************************************************************************
    15                          ;
    16                          ;
    17                          ;  ******** Define Memory Model and Stack parameters ********
    18                          ;
    19  0001                    IMAGECRAFT: equ 1   
    20  0002                    HITECH: equ 2   
    21  0002                    TOOLCHAIN: equ HITECH   
    22  0001                    SYSTEM_LARGE_MEMORY_MODEL: equ 1   
    23  0000                    SYSTEM_SMALL_MEMORY_MODEL: equ 0   
    24  0003                    SYSTEM_STACK_PAGE: equ 3   
    25  0000                    SYSTEM_STACK_PAGE_OFFSET: equ 0   
    26  0002                    SYSTEM_TOOLS: equ 2   
    27  0000                    SYSTEM_IDXPG_TRACKS_STK_PP: equ 0   
    28  0001                    SYSTEM_IDXPG_TRACKS_IDX_PP: equ 1   
    29  0000                    SYSTEM_MULTIPAGE_STACK: equ 0 
    30                          
    31                          
    32                          ;  ******* Function Class Definitions *******
    33                          ;
    34                          ;  These definitions are used to describe RAM access patterns. They provide
    35                          ;  documentation and they control prologue and epilogue macros that perform
    36                          ;  the necessary housekeeping functions for large memory model devices like
    37                          ;  the CY8C22045.
    38                          
    39  0001                    RAM_USE_CLASS_1:               equ 1   ; PUSH, POP & I/O access
    40  0002                    RAM_USE_CLASS_2:               equ 2   ; Indexed address mode on stack page
    41  0004                    RAM_USE_CLASS_3:               equ 4   ; Indexed address mode to any page
    42  0008                    RAM_USE_CLASS_4:               equ 8   ; Direct/Indirect address mode access
    43                          
    44                          ; ******* Hi Tech Specific *******
    45                          ; Turn on the expansion of all macros by default
    46                          IF (TOOLCHAIN & HITECH)
    47                          OPT EXPAND
    48                          ENDIF
    49                          ; ******* Page Pointer Manipulation Macros *******
    50                          ;
    51                          ;  ******* Page Pointer Manipulation Macros *******
    52                          ;
    53                          ;  Most of the following macros are conditionally compiled so they only
    54                          ;  produce code if the large memory model is selected.
    55                          
    56                             ;-----------------------------------------------
    57                             ;  Set Stack Page Macro
    58                             ;-----------------------------------------------
    59                             ;
    60                             ;  DESC: Modify STK_PP in the large or small memory Models.
    61                             ;
    62                             ; INPUT: Constant (e.g., SYSTEM_STACK_PAGE) that specifies the RAM page on
    63                             ;        which stack operations like PUSH and POP store and retrieve their
    64                             ;        data
    65                             ;
    66                             ;  COST: 8 instruction cycles (in LMM only)
    67                          
    68                             macro RAM_SETPAGE_STK( PG_NUMBER )
    69                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    70                                mov reg[STK_PP], @PG_NUMBER
    71                             ENDIF
    72  3C51                       endm
    73                          
    74                             ;-----------------------------------------------
    75                             ;  Set Current Page Macro
    76                             ;-----------------------------------------------
    77                             ;
    78                             ;  DESC: Modify CUR_PP in the large or small memory Models.
    79                             ;
    80                             ; INPUT: Constant value (e.g., >bFoo) for the RAM page number used in
    81                             ;        calculation of effective direct-mode address operands.
    82                             ;
    83                             ;  COST: 8 instruction cycles (in LMM only)
    84                          
    85                             macro RAM_SETPAGE_CUR( PG_NUMBER )
    86                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    87                                mov reg[CUR_PP], @PG_NUMBER
    88                             ENDIF
    89  3C51                       endm
    90                          
    91                             ;-----------------------------------------------
    92                             ;  Set Index Page Macro
    93                             ;-----------------------------------------------
    94                             ;
    95                             ;  DESC: Modify IDX_PP in the large or small emory Models.
    96                             ;
    97                             ; INPUT: Constant value (e.g., >caFoo) for the RAM page number used in
    98                             ;         calculation of effective index-mode address operands.
    99                             ;
   100                             ;  COST: 8 instruction cycles (in LMM only)
   101                          
   102                             macro RAM_SETPAGE_IDX( PG_NUMBER )
   103                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   104                                mov reg[IDX_PP], @PG_NUMBER
   105                             ENDIF
   106  3C51                       endm
   107                          
   108                             ;-----------------------------------------------
   109                             ;  Set MVI Read Page Macro
   110                             ;-----------------------------------------------
   111                             ;
   112                             ;  DESC: Modify MVR_PP in the large or small memory Models.
   113                             ;
   114                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   115                             ;        calculation of indirect address operands used in the
   116                             ;        "mvi A, [pFoo]" instructions.
   117                             ;
   118                             ;  COST: 8 instruction cycles (in LMM only)
   119                          
   120                             macro RAM_SETPAGE_MVR( PG_NUMBER )
   121                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   122                                mov reg[MVR_PP], @PG_NUMBER
   123                             ENDIF
   124  3C51                       endm
   125                          
   126                             ;-----------------------------------------------
   127                             ;  Set MVI Write Page Macro
   128                             ;-----------------------------------------------
   129                             ;
   130                             ;  DESC: Modify MVW_PP in the large or small memory Models.
   131                             ;
   132                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   133                             ;        calculation of indirect address operands used in the
   134                             ;        "mvi [pFoo], A" instructions.
   135                             ;
   136                             ;  COST: 8 instruction cycles (in LMM only)
   137                          
   138                             macro RAM_SETPAGE_MVW( PG_NUMBER )
   139                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   140                                mov reg[MVW_PP], @PG_NUMBER
   141                             ENDIF
   142  3C51                       endm
   143                          
   144                             ;-----------------------------------------------
   145                             ;  Force Index Page Pointer to Stack Page
   146                             ;-----------------------------------------------
   147                             ;
   148                             ;  DESC: Map index-mode operands onto the stack page by modifying IDX_PP.
   149                             ;        See also RAM_LOCK_INDEX_TO_STACKPAGE.
   150                             ;
   151                             ; INPUT: None
   152                             ;
   153                             ;  COST: 8 instruction cycles (in LMM only)
   154                          
   155                             macro RAM_SETPAGE_IDX2STK
   156                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   157                                IF ( SYSTEM_MULTIPAGE_STACK )
   158                                   mov   A, reg[STK_PP]
   159                                   mov   reg[IDX_PP], A
   160                                ELSE
   161                                   RAM_SETPAGE_IDX SYSTEM_STACK_PAGE
   162                                ENDIF
   163                             ENDIF
   164  3C51                       endm
   165                          
   166                             ;-----------------------------------------------
   167                             ;  Change Memory Mode
   168                             ;-----------------------------------------------
   169                             ;
   170                             ;  DESC: Modify FLAG_PAGEMODE bits in the large and small memory Models.
   171                             ;
   172                             ; INPUT: Constant value for PGMODE bitfield of CPU Flag register, F.
   173                             ;        See FLAG_PGMODE_{x} constants in M8C.INC.
   174                             ;
   175                             ;  COST: 8 instruction cycles (in LMM only)
   176                          
   177                             macro RAM_CHANGE_PAGE_MODE( MODE )
   178                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   179                                and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
   180                                or    F,  FLAG_PGMODE_MASK & @MODE
   181                             ENDIF
   182  3C51                       endm
   183                          
   184                             ;-----------------------------------------------
   185                             ;  Set Large Memory Model Native Paging Mode
   186                             ;-----------------------------------------------
   187                             ;
   188                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   189                             ;        paging mode *IFF* a simple "OR" is guaranteed to work---for
   190                             ;        example, in an ISR, when the PGMODE bits have been cleared
   191                             ;        to zero. If a simple "OR" is not guaranteed to work, use
   192                             ;        the slower RAM_RESTORE_NATIVE_PAGING instead.
   193                             ;
   194                             ; INPUT: none
   195                             ;
   196                             ;  COST: 4 instruction cycles (in LMM only)
   197                          
   198                             macro RAM_SET_NATIVE_PAGING
   199                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   200                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   201                                or    F,  FLAG_PGMODE_11b            ; LMM w/ IndexPage<==>StackPage
   202                             ENDIF ;  PGMODE LOCKED
   203                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   204                                or    F,  FLAG_PGMODE_10b            ; LMM with independent IndexPage
   205                             ENDIF ; PGMODE FREE
   206                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   207  3C51                       endm
   208                          
   209                             ;-----------------------------------------------
   210                             ; Restore Large Memory Model Native Paging Mode
   211                             ;-----------------------------------------------
   212                             ;
   213                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   214                             ;        paging mode. Always works because it clears the PGMODE bits
   215                             ;        before OR-ing in the new ones. See RAM_RESTORE_NATIVE_PAGING
   216                             ;        for a faster method.
   217                             ;
   218                             ; INPUT: none
   219                             ;
   220                             ;  COST: 8 instruction cycles (in LMM only)
   221                          
   222                             macro RAM_RESTORE_NATIVE_PAGING
   223                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   224                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   225                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_11b ; LMM w/ IndexPage<==>StackPage
   226                             ENDIF ;  PGMODE LOCKED
   227                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   228                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b ; LMM with independent IndexPage
   229                             ENDIF ; PGMODE FREE
   230                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   231  3C51                       endm
   232                          
   233                             ;-----------------------------------------------
   234                             ; Force indexed addr mode operands to Stack Pg
   235                             ;-----------------------------------------------
   236                             ;
   237                             ;  DESC: Force instructions that use indexed address mode to reference the
   238                             ;        stack page (as defined by STK_PP). This macro sets the "Indexed
   239                             ;        Stack Mode" bit (LSB) of the PGMODE bit field in the CPU Flag
   240                             ;        register, F. (See also RAM_SETPAGE_IDX2STK, above.)
   241                             ;
   242                             ; INPUT: none
   243                             ;
   244                             ;  COST: 4 instruction cycles (in LMM only)
   245                          
   246                             macro RAM_X_POINTS_TO_STACKPAGE
   247                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   248                                or   F, FLAG_PGMODE_01b
   249                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   250  3C51                       endm
   251                          
   252                             ;-----------------------------------------------
   253                             ;  Force indexed addr mode operands to Index Pg
   254                             ;-----------------------------------------------
   255                             ;
   256                             ;  DESC: Permit instructions that use indexed address mode to reference page
   257                             ;        zero or the page pointed to by the IDX_PP register, depending on the
   258                             ;        setting of the MSb (or "Direct Page Mode" bit) of the PGMODE bits
   259                             ;        in the CPU Flag register, F. (This macro clears the PGMODE LSb.)
   260                             ;
   261                             ; INPUT: none
   262                             ;
   263                             ;  COST: 4 instruction cycles (in LMM only)
   264                          
   265                             macro RAM_X_POINTS_TO_INDEXPAGE
   266                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   267                                and  F, ~FLAG_PGMODE_01b
   268                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   269  3C51                       endm
   270                          
   271                             ;-----------------------------------------------
   272                             ;  Function Prologue
   273                             ;-----------------------------------------------
   274                             ;
   275                             ;  Prologue for functions that run in the LMM and SMM.
   276                             ;
   277                          
   278                             macro RAM_PROLOGUE( ACTUAL_CLASS )
   279                          
   280                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   281                             ; Nothing to do
   282                             ENDIF ; RAM_USE_CLASS_1
   283                          
   284                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   285                                IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   286                                   RAM_X_POINTS_TO_STACKPAGE         ; exit native paging mode!
   287                                ENDIF
   288                             ENDIF ; RAM_USE_CLASS_2
   289                          
   290                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   291                                IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   292                                   RAM_X_POINTS_TO_INDEXPAGE         ; exit native paging mode!
   293                                ENDIF
   294                             ENDIF ; RAM_USE_CLASS_3
   295                          
   296                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   297                             ; Nothing to do
   298                             ENDIF ; RAM_USE_CLASS_4
   299                          
   300  3C51                       endm
   301                          
   302                             ;-----------------------------------------------
   303                             ;  Function Epilogue
   304                             ;-----------------------------------------------
   305                             ;
   306                             ;  Prologue for functions that run in the LMM and SMM.
   307                             ;
   308                          
   309                             macro RAM_EPILOGUE( ACTUAL_CLASS )
   310                          
   311                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   312                             ; Nothing to do
   313                             ENDIF ; RAM_USE_CLASS_1
   314                          
   315                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   316                                RAM_RESTORE_NATIVE_PAGING
   317                             ENDIF ; RAM_USE_CLASS_2
   318                          
   319                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   320                                RAM_RESTORE_NATIVE_PAGING
   321                             ENDIF ; RAM_USE_CLASS_3
   322                          
   323                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   324                             ; Nothing to do
   325                             ENDIF ; RAM_USE_CLASS_4
   326                          
   327  3C51                       endm
   328                          
   329                             ;-----------------------------------------------
   330                             ;  Preserve Register
   331                             ;-----------------------------------------------
   332                             ;
   333                             ;  DESC: Preserve a register value on the stack
   334                             ;
   335                             ; INPUT: Name or address of register in I/O Space
   336                             ;        The I/O bank is an implicit parameter. That is, this function will
   337                             ;        Access the I/O bank currently specified by the CPU Flag register.
   338                             ;
   339                             ;  USES: CPU 'A' register
   340                             ;
   341                             ;  COST: 9 instruction cycles
   342                          
   343                             macro REG_PRESERVE( IOReg )
   344                             mov   A, reg[ @IOReg ]
   345                             push  A
   346  3C51                       endm
   347                          
   348                             ;-----------------------------------------------
   349                             ;  Restore Register
   350                             ;-----------------------------------------------
   351                             ;
   352                             ;  DESC: Restore a register value from the stack
   353                             ;
   354                             ; INPUT: Name or address of register in I/O Space
   355                             ;        The I/O bank is an implicit parameter. That is, this function will
   356                             ;        Access the I/O bank currently specified by the CPU Flag register.
   357                             ;
   358                             ;  USES: CPU 'A' register
   359                             ;
   360                             ;  COST: 10 instruction cycles
   361                          
   362                             macro REG_RESTORE( IOReg )
   363                             pop   A
   364                             mov   reg[ @IOReg ], A
   365  3C51                       endm
   366                          
   367                             ;-----------------------------------------------
   368                             ;  Preserve Volatile Page Pointer Registers
   369                             ;-----------------------------------------------
   370                             ;
   371                             ;  DESC: Invoked by ISRs before switching to the LMM mode and calling
   372                             ;        functions that require on it.
   373                             ;
   374                             ; INPUT: none
   375                             ;
   376                             ;  USES: CPU 'A' register
   377                             ;
   378                             ;  COST: 45 instruction cycles (in LMM only)
   379                          
   380                             macro ISR_PRESERVE_PAGE_POINTERS
   381                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   382                                REG_PRESERVE CUR_PP
   383                                REG_PRESERVE IDX_PP
   384                                REG_PRESERVE MVR_PP
   385                                REG_PRESERVE MVW_PP
   386                             ENDIF
   387  3C51                       endm
   388                          
   389                             ;-----------------------------------------------
   390                             ;  Restore Volatile Page Pointer Registers
   391                             ;-----------------------------------------------
   392                             ;
   393                             ;  DESC: Undo for RAM_PRESERVE_PAGE_POINTERS macro. Invoked by ISRs after
   394                             ;        calling functions that run in the LMM mode and before executing
   395                             ;        the RETI instruction.
   396                             ;
   397                             ; INPUT: none
   398                             ;
   399                             ;  USES: CPU 'A' register
   400                             ;
   401                             ;  COST: 50 instruction cycles (in LMM only)
   402                          
   403                             macro ISR_RESTORE_PAGE_POINTERS
   404                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   405                                REG_RESTORE MVW_PP
   406                                REG_RESTORE MVR_PP
   407                                REG_RESTORE IDX_PP
   408                                REG_RESTORE CUR_PP
   409                             ENDIF
   410                             endm
      + 3C51                    
      + 3C51                    ; end of file Memory.inc
      + 3C51                    ;;*****************************************************************************
;;******************
      +                         ***********************************************************
;;  FILENAME: SAR10.inc
;;   Version: 2.
      +                         00, Updated on 2013/5/19 at 10:39:9
;;  Generated by PSoC Designer 5.4.2946
;;
;;  DESCRIPTION: Asse
      +                         mbler declarations for the SAR10 user module interface
;;-------------------------------------------
      +                         ----------------------------------
;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved
      +                         .
;;*****************************************************************************
;;****************
      +                         *************************************************************
   824                          
   825                          ; end of file m8c.inc
    29  00C0                    FLAG_PGMODE_MASK:  equ 0C0h     ; Paging control for > 256 bytes of RAM
    30  0000                    FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
    31  0040                    FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
    32  0080                    FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
    33  00C0                    FLAG_PGMODE_3:     equ 0C0h       ; Direct to CUR_PP page, indexed to STK_PP page
    34  0000                    FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
    35  0040                    FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
    36  0080                    FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
    37  00C0                    FLAG_PGMODE_11b:   equ 0C0h       ; Same as PGMODE_3
    38  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    39  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    40  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    41  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    42  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    43                          
    44                          
    45                          ;;=============================================================================
    46                          ;;      Register Space, Bank 0
    47                          ;;=============================================================================
    48                          
    49                          ;------------------------------------------------
    50                          ;  Port Registers
    51                          ;  Note: Also see this address range in Bank 1.
    52                          ;------------------------------------------------
    53                          ; Port 0
    54  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    55  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    56  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    57  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    58                          ; Port 1
    59  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    60  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    61  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    62  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    63                          ; Port 2
    64  0008                    PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
    65  0009                    PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
    66  000A                    PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
    67  000B                    PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
    68                          ; Port 3
    69  000C                    PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
    70  000D                    PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
    71  000E                    PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
    72  000F                    PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
    73                          ; Port 4
    74  0010                    PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
    75  0011                    PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
    76  0012                    PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
    77  0013                    PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
    78                          
    79                          ;------------------------------------------------
    80                          ;  Digital PSoC(tm) block Registers
    81                          ;  Note: Also see this address range in Bank 1.
    82                          ;------------------------------------------------
    83                          ; Digital PSoC block 00, Basic Type C
    84  0020                    DBC00DR0:     equ 20h          ; data register 0                          (#)
    85  0021                    DBC00DR1:     equ 21h          ; data register 1                          (W)
    86  0022                    DBC00DR2:     equ 22h          ; data register 2                          (RW)
    87  0023                    DBC00CR0:     equ 23h          ; control & status register 0              (#)
    88                          
    89                          ; Digital PSoC block 01, Basic Type C
    90  0024                    DBC01DR0:     equ 24h          ; data register 0                          (#)
    91  0025                    DBC01DR1:     equ 25h          ; data register 1                          (W)
    92  0026                    DBC01DR2:     equ 26h          ; data register 2                          (RW)
    93  0027                    DBC01CR0:     equ 27h          ; control & status register 0              (#)
    94                          
    95                          ; Digital PSoC block 02, Communications Type C
    96  0028                    DCC02DR0:     equ 28h          ; data register 0                          (#)
    97  0029                    DCC02DR1:     equ 29h          ; data register 1                          (W)
    98  002A                    DCC02DR2:     equ 2Ah          ; data register 2                          (RW)
    99  002B                    DCC02CR0:     equ 2Bh          ; control & status register 0              (#)
   100                          
   101                          ; Digital PSoC block 03, Communications Type C
   102  002C                    DCC03DR0:     equ 2Ch          ; data register 0                          (#)
   103  002D                    DCC03DR1:     equ 2Dh          ; data register 1                          (W)
   104  002E                    DCC03DR2:     equ 2Eh          ; data register 2                          (RW)
   105  002F                    DCC03CR0:     equ 2Fh          ; control & status register 0              (#)
   106                          
   107                          ; Digital PSoC block 10, Basic Type C
   108  0030                    DBC10DR0:     equ 30h          ; data register 0                          (#)
   109  0031                    DBC10DR1:     equ 31h          ; data register 1                          (W)
   110  0032                    DBC10DR2:     equ 32h          ; data register 2                          (RW)
   111  0033                    DBC10CR0:     equ 33h          ; control & status register 0              (#)
   112                          
   113                          ; Digital PSoC block 11, Basic Type C
   114  0034                    DBC11DR0:     equ 34h          ; data register 0                          (#)
   115  0035                    DBC11DR1:     equ 35h          ; data register 1                          (W)
   116  0036                    DBC11DR2:     equ 36h          ; data register 2                          (RW)
   117  0037                    DBC11CR0:     equ 37h          ; control & status register 0              (#)
   118                          
   119                          ; Digital PSoC block 12, Communications Type C
   120  0038                    DCC12DR0:     equ 38h          ; data register 0                          (#)
   121  0039                    DCC12DR1:     equ 39h          ; data register 1                          (W)
   122  003A                    DCC12DR2:     equ 3Ah          ; data register 2                          (RW)
   123  003B                    DCC12CR0:     equ 3Bh          ; control & status register 0              (#)
   124                          
   125                          ; Digital PSoC block 13, Communications Type C
   126  003C                    DCC13DR0:     equ 3Ch          ; data register 0                          (#)
   127  003D                    DCC13DR1:     equ 3Dh          ; data register 1                          (W)
   128  003E                    DCC13DR2:     equ 3Eh          ; data register 2                          (RW)
   129  003F                    DCC13CR0:     equ 3Fh          ; control & status register 0              (#)
   130                          
   131                          ;-------------------------------------
   132                          ;  Analog Control Registers
   133                          ;-------------------------------------
   134  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
   135  00C0                    AMX_IN_ACI3:          equ C0h    ; MASK: column 3 input mux
   136  0030                    AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
   137  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
   138  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
   139                          
   140  0061                    AMUX_CFG:      equ 61h          ; Analog MUX Configuration
   141  0030                    AMUX_CFG_INTCAP:       equ 30h    ;
   142  000E                    AMUX_CFG_MUXCLK:  	  equ 0Eh	 ;
   143  0001                    AMUX_CFG_EN:		  	  equ 01h	 ;
   144                          
   145                          ; old declarations DO NOT USE
   146  0061                    AMUXCFG:      equ 61h          ; Analog MUX Configuration
   147  0030                    AMUXCFG_INTCAP:       equ 30h    ;
   148  000E                    AMUXCFG_MUXCLK:  	  equ 0Eh	 ;
   149  0001                    AMUXCFG_EN:		  	  equ 01h	 ;
   150                          
   151  0062                    PWM_CR:       equ 62h          ; Pulse-Width Modulator Control
   152  0038                    PWM_CR_HIGH:          equ 38h    ; MASK: PWM high time
   153  0006                    PWM_CR_LOW:           equ 06h	 ; MASK: PWM low time
   154  0001                    PWM_CR_EN:            equ 01h	 ; MASK: Enable/Disable PWM function
   155                          
   156  0063                    ARF_CR:       equ 63h          ; Analog Reference Control
   157                          
   158  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus Register           (#)
   159  0080                    CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
   160  0040                    CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
   161  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
   162  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
   163  0008                    CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
   164  0004                    CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
   165  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
   166  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   167                          
   168  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   169  0020                    CMP_CR1_CLDIS1:       equ 20h    ; MASK: Column 1 comparator output latch
   170  0010                    CMP_CR1_CLDIS0:	      equ 10h    ; MASK: Column 0 comparator output latch
   171                          
   172  0068                    ADC0_CR:      equ 68h          ; Analog Column 0 Configuration
   173  0080                    ADC0_CR_CMPST:        equ 80h    ;
   174  0040                    ADC0_CR_LOREN:        equ 40h    ;
   175  0020                    ADC0_CR_SHEN:         equ 20h    ;
   176  0008                    ADC0_CR_CBSRC:        equ 08h    ;
   177  0004                    ADC0_CR_ADCM:         equ 04h    ;
   178  0001                    ADC0_CR_EN:	          equ 01h    ;
   179                          
   180  0069                    ADC1_CR:      equ 69h          ; Analog Column 1 Configuration
   181  0080                    ADC1_CR_CMPST:        equ 80h    ;
   182  0040                    ADC1_CR_LOREN:        equ 40h    ;
   183  0020                    ADC1_CR_SHEN:         equ 20h    ;
   184  0008                    ADC1_CR_CBSRC:        equ 08h    ;
   185  0004                    ADC1_CR_ADCM:         equ 04h    ;
   186  0001                    ADC1_CR_EN:	          equ 01h    ;
   187                          
   188                          ; Continuous Time PSoC block Type E Row 0 Col 0
   189  0072                    ACE00CR1:     equ 72h          ; Control register 1                       (RW)
   190  0073                    ACE00CR2:     equ 73h          ; Control register 2                       (RW)
   191                          
   192                          ; Continuous Time PSoC block Type E Row 0 Col 1
   193  0076                    ACE01CR1:     equ 76h          ; Control register 1                       (RW)
   194  0077                    ACE01CR2:     equ 77h          ; Control register 2                       (RW)
   195                          
   196                          ; Switched Cap PSoC blockType E Row 1 Col 0
   197  0080                    ASE10CR0:     equ 80h          ; Control register 0                       (RW)
   198                          
   199                          ; Switched Cap PSoC blockType E Row 1 Col 1
   200  0084                    ASE11CR0:     equ 84h          ; Control register 0                       (RW)
   201                          
   202                          ;-----------------------------------------------
   203                          ;  Global General Purpose Data Registers
   204                          ;-----------------------------------------------
   205  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   206  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   207  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   208  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   209                          
   210                          ;------------------------------------------------
   211                          ;  Row Digital Interconnects
   212                          ;
   213                          ;  Note: the following registers are mapped into
   214                          ;  both register bank 0 AND register bank 1.
   215                          ;------------------------------------------------
   216                          
   217  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   218  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   219  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   220  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   221  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   222  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   223  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   224                          
   225  00B8                    RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
   226  00B9                    RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
   227  00BA                    RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
   228  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   229  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   230  00BD                    RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
   231  00BE                    RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
   232                          
   233                          ;-----------------------------------------------
   234                          ;  Ram Page Pointers
   235                          ;-----------------------------------------------
   236  00D0                    CUR_PP:      equ 0D0h           ; Current   Page Pointer
   237  00D1                    STK_PP:      equ 0D1h           ; Stack     Page Pointer
   238  00D3                    IDX_PP:      equ 0D3h           ; Index     Page Pointer
   239  00D4                    MVR_PP:      equ 0D4h           ; MVI Read  Page Pointer
   240  00D5                    MVW_PP:      equ 0D5h           ; MVI Write Page Pointer
   241                          
   242                          ;------------------------------------------------
   243                          ;  I2C Configuration Registers
   244                          ;------------------------------------------------
   245  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   246  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   247  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   248  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   249  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   250  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   251  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   252  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   253  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   254  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   255                          
   256  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   257  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   258  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   259  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   260  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   261  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   262  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   263  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   264  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   265                          
   266  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   267                          
   268  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   269  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   270  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   271  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   272  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   273                          
   274                          ;------------------------------------------------
   275                          ;  System and Global Resource Registers
   276                          ;------------------------------------------------
   277  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   278                                                         ; Use INT_MSK0 bit field masks
   279  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   280                                                         ; Use INT_MSK1 bit field masks
   281  00DC                    INT_CLR2:     equ 0DCh          ; Interrupt Clear Register 2               (RW)
   282                                                         ; Use INT_MSK2 bit field masks
   283  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   284                                                         ; Use INT_MSK3 bit field masks
   285                          
   286  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   287  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   288  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   289                          
   290  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   291  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   292  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   293  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   294  0010                    INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
   295  0008                    INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
   296  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   297  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   298  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   299                          
   300  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   301  0080                    INT_MSK1_DCC13:            equ 80h ; MASK: enable/disable DCC13 block interrupt
   302  0040                    INT_MSK1_DCC12:            equ 40h ; MASK: enable/disable DCC12 block interrupt
   303  0020                    INT_MSK1_DBC11:            equ 20h ; MASK: enable/disable DBC11 block interrupt
   304  0010                    INT_MSK1_DBC10:            equ 10h ; MASK: enable/disable DBC10 block interrupt
   305  0008                    INT_MSK1_DCC03:            equ 08h ; MASK: enable/disable DCC03 block interrupt
   306  0004                    INT_MSK1_DCC02:            equ 04h ; MASK: enable/disable DCC02 block interrupt
   307  0002                    INT_MSK1_DBC01:            equ 02h ; MASK: enable/disable DBC01 block interrupt
   308  0001                    INT_MSK1_DBC00:            equ 01h ; MASK: enable/disable DBC00 block interrupt
   309                          
   310  00DF                    INT_MSK2:     equ DFh			; Custom block Mask Register			   (RW)
   311  0010                    INT_MSK2_SARADC:           equ 10h ; MASK: enable/disable SARADC block interrupt
   312  0020                    INT_MSK2_CSD0:             equ 20h ; MASK: enable/disable CSD0 block interrupt
   313  0040                    INT_MSK2_CSD1:             equ 40h ; MASK: enable/disable CSD1 block interrupt
   314  0080                    INT_MSK2_RTC:              equ 80h ; MASK: enable/disable RTC block interrupt
   315                          
   316  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   317  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   318                          
   319                          ;------------------------------------------------------
   320                          ;  MAC Registers
   321                          ;------------------------------------------------------
   322                          
   323  00E8                    MUL0_X:       equ 0E8h          ; Multiply Input X Register                (W)
   324  00E9                    MUL0_Y:       equ 0E9h          ; Multiply Input Y Register                (W)
   325  00EA                    MUL0_DH:      equ 0EAh          ; Multiply Result High Byte Register       (R)
   326  00EB                    MUL0_DL:      equ 0EBh          ; Multiply Result Low Byte Register        (R)
   327                          
   328  00EC                    ACC0_DR1:     equ 0ECh          ; Accumulator Data Register 1              (RW)
   329  00ED                    ACC0_DR0:     equ 0EDh          ; Accumulator Data Register 0              (RW)
   330  00EE                    ACC0_DR3:     equ 0EEh          ; Accumulator Data Register 3              (RW)
   331  00EF                    ACC0_DR2:     equ 0EFh          ; Accumulator Data Register 2              (RW)
   332                          
   333                          ; DECIMATOR Control Registers
   334  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   335  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   336                          
   337                          ;------------------------------------------------------
   338                          ;  System Status and Control Registers
   339                          ;
   340                          ;  Note: The following registers are mapped into both
   341                          ;        register bank 0 AND register bank 1.
   342                          ;------------------------------------------------------
   343  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   344                                                             ; Use FLAG_ masks defined at top of file
   345                          
   346  00FD                    DAC_D:        equ 0FDh		   ; DAC Data Register                        (RW)
   347                          
   348  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   349  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: flag, Internal Reset Status bit
   350  0010                    CPU_SCR1_SLIMO:         equ 10h	   ; MASK: Slow IMO (internal main osc) enable
   351  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   352  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   353  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   354                          
   355  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   356  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   357  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   358  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   359  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   360  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   361                          
   362                          ;------------------------------------------------------
   363                          ;  Neon Capsense Digital Control Registers
   364                          ;------------------------------------------------------
   365  0050                    CSD0_DR0_L:				equ 50h		; Capsense 0 data low 0				(RW)
   366  0054                    CSD0_DR0_H:				equ 54h		; Capsense 0 data high 0			(RW)
   367  0058                    CSD1_DR0_L:				equ 58h		; Capsense 1 data low 0				(RW)
   368  005C                    CSD1_DR0_H:				equ 5Ch		; Capsense 1 data high 0			(RW)
   369  0051                    CSD0_DR1_L:				equ 51h		; Capsense 0 data low 1				(RW)
   370  0055                    CSD0_DR1_H:				equ 55h		; Capsense 0 data high 1			(RW)
   371  0059                    CSD1_DR1_L:				equ 59h		; Capsense 1 data low 1				(RW)
   372  005D                    CSD1_DR1_H:				equ 5Dh		; Capsense 1 data high 1			(RW)
   373  0052                    CSD0_CNT_L:				equ 52h		; Capsense 0 counter low			(RW)
   374  0056                    CSD0_CNT_H:				equ 56h		; Capsense 0 counter high			(RW)
   375  005A                    CSD1_CNT_L:				equ 5Ah		; Capsense 1 counter low			(RW)
   376  005E                    CSD1_CNT_H:				equ	5Eh		; Capsense 1 counter high			(RW)
   377  0053                    CSD0_CR0:				equ 53h		; Capsense 0 control 0				(RW)
   378  005B                    CSD1_CR0:				equ 5Bh		; Capsense 1 control 0				(RW)
   379  0057                    CSD0_CR1:				equ 57h		; Capsense 0 control 1				(RW)
   380  005F                    CSD1_CR1:				equ 5Fh		; Capsense 1 control 1				(RW)
   381                          
   382                          ;------------------------------------------------------
   383                          ;  Neon Analog Registers
   384                          ;------------------------------------------------------
   385  0065                    ASY_CR:					equ 65h		; Analog Synchronization Control	(RW)
   386  006A                    ADC_DH:					equ 6Ah		; ADC data high						(RW)
   387  006B                    ADC_DL:					equ 6Bh		; ADC data low						(RW)
   388  00C8                    PWMVREF0:				equ C8h		; PWM Voltage Reference 0			(RW)
   389  00C9                    PWMVREF1:				equ C9h		; PWM Voltage Reference 1			(RW)
   390  00CB                    PWMSRC:					equ CBh		; PWM Source						(RW)
   391  00CA                    IDACMODE:				equ CAh		; IDAC Mode							(RW)
   392  00FC                    IDACR_D:				equ FCh		; Analog Mux DAC data 0				(RW)
   393  00FD                    IDACL_D:				equ FDh		; Analog Mux DAC data 1				(RW)
   394                          
   395                          ;------------------------------------------------------
   396                          ;  Neon Digital Registers
   397                          ;------------------------------------------------------
   398  00B7                    RDI0DSM:				equ B7h		; Row Digital Interconnect input select 0	(RW)
   399  00BF                    RDI1DSM:				equ BFh		; Row Digital Interconnect input select 1	(RW)
   400                          
   401                          ;------------------------------------------------------
   402                          ;  Neon Test Registers
   403                          ;------------------------------------------------------
   404  00CC                    TSCR0:					equ CCh		; Tsource 0							(RW)
   405  00CD                    TSCMPH:					equ CDh		; TSCMP high						(RW)
   406  00CE                    TSCMPL:					equ CEh		; TSCMP low							(RW)
   407  00CF                    TSCR1:					equ CFh		; Tsource 1							(RW)
   408                          
   409                          ;;=============================================================================
   410                          ;;      Register Space, Bank 1
   411                          ;;=============================================================================
   412                          
   413                          ;------------------------------------------------
   414                          ;  Port Registers
   415                          ;  Note: Also see this address range in Bank 0.
   416                          ;------------------------------------------------
   417                          ; Port 0
   418  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   419  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   420  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   421  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   422                          
   423                          ; Port 1
   424  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   425  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   426  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   427  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   428                          
   429                          ; Port 2
   430  0008                    PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
   431  0009                    PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
   432  000A                    PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
   433  000B                    PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
   434                          
   435                          ; Port 3
   436  000C                    PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
   437  000D                    PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
   438  000E                    PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
   439  000F                    PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
   440                          
   441                          ; Port 4
   442  0010                    PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
   443  0011                    PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
   444  0012                    PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
   445  0013                    PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
   446                          
   447                          ;------------------------------------------------
   448                          ;  Digital PSoC(tm) block Registers
   449                          ;  Note: Also see this address range in Bank 0.
   450                          ;------------------------------------------------
   451                          
   452                          ; Digital PSoC block 00, Basic Type C
   453  0020                    DBC00FN:      equ 20h          ; Function Register                        (RW)
   454  0021                    DBC00IN:      equ 21h          ;    Input Register                        (RW)
   455  0022                    DBC00OU:      equ 22h          ;   Output Register                        (RW)
   456  0023                    DBC00CR1:     equ 23h          ;   control & status register 1            (RW)
   457                          
   458                          ; Digital PSoC block 01, Basic Type C
   459  0024                    DBC01FN:      equ 24h          ; Function Register                        (RW)
   460  0025                    DBC01IN:      equ 25h          ;    Input Register                        (RW)
   461  0026                    DBC01OU:      equ 26h          ;   Output Register                        (RW)
   462  0027                    DBC01CR1:     equ 27h          ;   control & status register 1            (RW)
   463                          
   464                          ; Digital PSoC block 02, Communications Type C
   465  0028                    DCC02FN:      equ 28h          ; Function Register                        (RW)
   466  0029                    DCC02IN:      equ 29h          ;    Input Register                        (RW)
   467  002A                    DCC02OU:      equ 2Ah          ;   Output Register                        (RW)
   468  002B                    DBC02CR1:     equ 2Bh          ;   control & status register 1            (RW)
   469                          
   470                          ; Digital PSoC block 03, Communications Type C
   471  002C                    DCC03FN:      equ 2Ch          ; Function Register                        (RW)
   472  002D                    DCC03IN:      equ 2Dh          ;    Input Register                        (RW)
   473  002E                    DCC03OU:      equ 2Eh          ;   Output Register                        (RW)
   474  0029                    DBC03CR1:     equ 29h          ;   control & status register 1            (RW)
   475                          
   476                          ; Digital PSoC block 10, Basic Type C
   477  0030                    DBC10FN:      equ 30h          ; Function Register                        (RW)
   478  0031                    DBC10IN:      equ 31h          ;    Input Register                        (RW)
   479  0032                    DBC10OU:      equ 32h          ;   Output Register                        (RW)
   480  0033                    DBC10CR1:     equ 33h          ;   control & status register 1            (RW)
   481                          
   482                          ; Digital PSoC block 11, Basic Type C
   483  0034                    DBC11FN:      equ 34h          ; Function Register                        (RW)
   484  0035                    DBC11IN:      equ 35h          ;    Input Register                        (RW)
   485  0036                    DBC11OU:      equ 36h          ;   Output Register                        (RW)
   486  0037                    DBC11CR1:     equ 37h          ;   control & status register 1            (RW)
   487                          
   488                          ; Digital PSoC block 12, Communications Type C
   489  0038                    DCC12FN:      equ 38h          ; Function Register                        (RW)
   490  0039                    DCC12IN:      equ 39h          ;    Input Register                        (RW)
   491  003A                    DCC12OU:      equ 3Ah          ;   Output Register                        (RW)
   492  003B                    DBC12CR1:     equ 3Bh          ;   control & status register 1            (RW)
   493                          
   494                          ; Digital PSoC block 13, Communications Type C
   495  003C                    DCC13FN:      equ 3Ch          ; Function Register                        (RW)
   496  003D                    DCC13IN:      equ 3Dh          ;    Input Register                        (RW)
   497  003E                    DCC13OU:      equ 3Eh          ;   Output Register                        (RW)
   498  003F                    DBC13CR1:     equ 3Fh          ;   control & status register 1            (RW)
   499                          
   500                          ;------------------------------------------------
   501                          ;  System and Global Resource Registers
   502                          ;  Note: Also see this address range in Bank 0.
   503                          ;------------------------------------------------
   504                          
   505  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   506  00C0                    CLK_CR0_ACOLUMN_3:    equ C0h    ; MASK: Specify clock for analog cloumn
   507  0030                    CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
   508  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   509  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   510                          
   511  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   512  0018                    CLK_CR1_ACLK1:        equ 18h    ; MASK: Digital PSoC block for analog source
   513  0003                    CLK_CR1_ACLK0:        equ 03h    ; MASK: Digital PSoC block for analog source
   514                          
   515  0003                    CLK_CR1_ACLK2:        equ 03h    ; Deprecated do not use
   516                          
   517  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   518  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   519                          
   520  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   521  000F                    AMD_CR0_AMOD0:        equ 0Fh    ; MASK: Modulation source for analog column 0
   522                          
   523  0064                    CMP_GO_EN:    equ 64h          ; Comparator Bus To Global Out Enable      (RW)
   524  0080                    CMP_GO_EN_GOO5:       equ 80h    ; MASK: Selected Col 1 signal to GOO5
   525  0040                    CMP_GO_EN_GOO1:       equ 40h    ; MASK: Selected Col 1 signal to GOO1
   526  0030                    CMP_GO_EN_SEL1:       equ 30h    ; MASK: Column 1 Signal Select
   527  0008                    CMP_GO_EN_GOO4:       equ 08h    ; MASK: Selected Col 0 signal to GOO4
   528  0004                    CMP_GO_EN_GOO0:       equ 04h    ; MASK: Selected Col 0 signal to GOO0
   529  0003                    CMP_GO_EN_SEL0:       equ 03h    ; MASK: Column 0 Signal Select
   530                          
   531  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   532  000F                    AMD_CR1_AMOD1:        equ 0Fh    ; MASK: Modulation ctrl for analog column 1
   533                          
   534  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   535  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   536  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   537                          
   538  006B                    CLK_CR3:      equ 6Bh          ; Analog Clock Source Control Register 3   (RW)
   539  0040                    CLK_CR3_SYS1:         equ 40h    ; MASK: Analog Clock 1 selection
   540  0030                    CLK_CR3_DIVCLK1:      equ 30h    ; MASK: Analog Clock 1 divider
   541  0004                    CLK_CR3_SYS0:         equ 04h    ; MASK: Analog Clock 0 selection
   542  0003                    CLK_CR3_DIVCLK0:      equ 03h    ; MASK: Analog Clock 0 divider
   543                          
   544                          ;------------------------------------------------
   545                          ;  Global Digital Interconnects
   546                          ;------------------------------------------------
   547                          
   548  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   549  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   550  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   551  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   552                          
   553  00A0                    GDI_O_IN_CR:  equ 0A0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   554  00A1                    GDI_E_IN_CR:  equ 0A1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   555  00A2                    GDI_O_OU_CR:  equ 0A2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   556  00A3                    GDI_E_OU_CR:  equ 0A3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   557                          
   558  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   559  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   560                          
   561                          ;------------------------------------------------
   562                          ;  Analog Mux Bus Port Enable Bits
   563                          ;------------------------------------------------
   564  00D8                    MUX_CR0:      equ 0D8h          ; Analog Mux Port 0 Bit Enables Register
   565  00D9                    MUX_CR1:      equ 0D9h          ; Analog Mux Port 1 Bit Enables Register
   566  00DA                    MUX_CR2:      equ 0DAh          ; Analog Mux Port 2 Bit Enables Register
   567  00DB                    MUX_CR3:      equ 0DBh          ; Analog Mux Port 3 Bit Enables Register
   568  00EC                    MUX_CR4:      equ 0ECh          ; Analog Mux Port 4 Bit Enables Register
   569                          
   570                          ;------------------------------------------------
   571                          ;  Clock and System Control Registers
   572                          ;------------------------------------------------
   573                          
   574  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   575  0080                    OSC_GO_EN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   576  0040                    OSC_GO_EN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   577  0020                    OSC_GO_EN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   578  0010                    OSC_GO_EN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   579  0008                    OSC_GO_EN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   580  0004                    OSC_GO_EN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   581  0002                    OSC_GO_EN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   582  0001                    OSC_GO_EN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   583                          
   584  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   585  0003                    OSC_CR4_VC3SEL:       equ 03h    ; MASK: System VC3 Clock source
   586                          
   587  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   588                          
   589  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   590  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   591  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   592  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   593  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   594  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   595  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   596  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   597  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   598  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   599  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   600  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   601  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   602  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   603  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   604  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   605  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   606  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   607                          
   608  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   609  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   610  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   611                          
   612  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   613  0080                    OSC_CR2_PLLGAIN:      equ 80h    ; MASK: High/Low gain
   614  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   615  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   616  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   617                          
   618  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   619  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   620  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   621  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   622  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   623  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   624  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   625  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   626                          
   627  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   628  0008                    VLT_CMP_NOWRITE:      equ 08h    ; MASK: Vcc below Flash Write level
   629  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   630  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   631  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   632                          
   633  00E5                    ADC0_TR:      equ 0E5h          ; ADC Column 0 Trim Register
   634  00E6                    ADC1_TR:      equ 0E6h          ; ADC Column 1 Trim Register
   635                          
   636  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   637  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   638  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   639  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   640                          
   641  00FA                    FLS_PR1:      equ 0FAh          ; Flash Program Register 1                 (RW)
   642  0003                    FLS_PR1_BANK:         equ 03h    ; MASK: Select Active Flash Bank
   643                          
   644  00FD                    DAC_CR0:       equ 0FDh          ; Analog Mux DAC Control Register 0
   645  00DC                    DAC_CR1:       equ 0DCh          ; Analog Mux DAC Control Register 1
   646  0008                    DAC_CR_IRANGE:        equ 08h    ; MASK: Sets the DAC Range low or high
   647  0006                    DAC_CR_OSCMODE:       equ 06h    ; MASK: Defines the reset mode for AMux
   648  0001                    DAC_CR_ENABLE:        equ 01h    ; MASK: Enable/Disable DAC function
   649                          
   650                          ;------------------------------------------------
   651                          ;  I2C Control Registers
   652                          ;------------------------------------------------
   653                          
   654  00AD                    I2C_ADDR:    equ 0ADh          ; I2C Address Register (RW)
   655                          
   656                          ;------------------------------------------------------
   657                          ;  Neon Analog Registers
   658                          ;------------------------------------------------------
   659  0053                    VDAC50CR0:		equ 53h			; V DAC5 control 0				(RW)
   660  0057                    VDAC51CR0:		equ 57h			; V DAC5 control 1				(RW)
   661  00A8                    ADC_CR0:		equ A8h			; ADC control 0					(RW)
   662  00A9                    ADC_CR1:		equ A9h			; ADC control 1					(RW)
   663  00AA                    ADC_CR2:		equ AAh			; ADC control 2					(RW)
   664  00AB                    ADC_CR3TRIM:	equ ABh			; ADC control 3					(RW)
   665  00AC                    ADC_CR4:		equ ACh			; ADC control 4					(RW)
   666  00E7                    VDAC_TRIM:		equ E7h			; V DAC trim					(RW)
   667                          
   668                          ;------------------------------------------------------
   669                          ;  Neon Current Sense CMP Registers
   670                          ;------------------------------------------------------
   671  0050                    CMP0CR1:		equ 50h			; CMP0 control 1				(RW)
   672  0051                    CMP0CR2:		equ 51h			; CMP0 control 2				(RW)
   673  0054                    CMP1CR1:		equ 54h			; CMP1 control 1				(RW)
   674  0055                    CMP1CR2:		equ 55h			; CMP1 control 2				(RW)
   675  0058                    CSCMPCR0:		equ 58h			; CSCMP control 0				(RW)
   676  0059                    CSCMPGOEN:		equ 59h			; CSCMO global out enable		(RW)
   677  005A                    CSLUTCR0:		equ 5Ah			; CSLUT control 0				(RW)
   678  005B                    CMPCOLMUX:		equ 5Bh			; CMP Column Mux				(RW)
   679  005C                    CMPPWMCR:		equ 5Ch			; CMP PWM control				(RW)
   680  005D                    CMPFLTCR:		equ 5Dh			; CMP filter control			(RW)
   681  005E                    CMPCLK1:		equ 5Eh			; CMP clock 1					(RW)
   682  005F                    CMPCLK0:		equ 5Fh			; CMP clock 0					(RW)
   683                          
   684                          ;------------------------------------------------------
   685                          ;  Neon Real Time Clock Registers
   686                          ;------------------------------------------------------
   687  00A4                    RTCH:			equ A4h			; Real time current hour		(RW)
   688  00A5                    RTCM:			equ A5h			; Real time current minute		(RW)
   689  00A6                    RTCS:			equ A6h			; Real time current second		(RW)
   690  00A7                    RTCCR:			equ A7h			; Real time clock control		(RW)
   691                          
   692                          ;------------------------------------------------------
   693                          ;  Analog MUX Config Registers
   694                          ;------------------------------------------------------
   695                          
   696  006A                    AMUX_CFG1:			equ 6Ah  ; Analog MUX Configuration 1
   697  0020                    AMUX_CFG1_GOINVR:	equ 20h  ;
   698  0010                    AMUX_CFG1_GOINVL:  	equ 10h	 ;
   699  000C                    AMUX_CFG1_AMUXMODR:	equ 0Ch	 ;
   700  0003                    AMUX_CFG1_AMUXMODL:	equ 03h	 ;
   701                          
   702                          ;;=============================================================================
   703                          ;;      M8C System Macros
   704                          ;;  These macros should be used when their functions are needed.
   705                          ;;=============================================================================
   706                          
   707                          ;----------------------------------------------------
   708                          ;  Swapping Register Banks
   709                          ;----------------------------------------------------
   710                              macro M8C_SetBank0
   711                              and   F, ~FLAG_XIO_MASK
   712  3C51                        endm
   713                          
   714                              macro M8C_SetBank1
   715                              or    F, FLAG_XIO_MASK
   716  3C51                        endm
   717                          
   718                          ;----------------------------------------------------
   719                          ;  Global Interrupt Enable/Disable
   720                          ;----------------------------------------------------
   721                              macro M8C_EnableGInt
   722                              or    F, FLAG_GLOBAL_IE
   723  3C51                        endm
   724                          
   725                              macro M8C_DisableGInt
   726                              and   F, ~FLAG_GLOBAL_IE
   727  3C51                        endm
   728                          
   729                          ;----------------------------------------------------
   730                          ;  Enable/Disable Interrupt Mask
   731                          ;
   732                          ;  Use the following macros to enable/disable
   733                          ;  bits in the Interrupt mask registers,
   734                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   735                          ;
   736                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   737                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   738                          ;
   739                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   740                          ;        and MASK is the bit set to enable or disable
   741                          ;----------------------------------------------------
   742                          ; Disable Interrupt Bit Mask(s)
   743                              macro M8C_DisableIntMask
   744                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   745  3C51                        endm
   746                          
   747                          ; Enable Interrupt Bit Mask(s)
   748                              macro M8C_EnableIntMask
   749                              or    reg[@0], @1               ; enable specified interrupt enable bit
   750  3C51                        endm
   751                          
   752                          ;----------------------------------------------------
   753                          ;  Clear Posted Interrupt Flag Mask
   754                          ;
   755                          ;  Use the following macros to clear the
   756                          ;  bits in the Interrupt Clear registers,
   757                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   758                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   759                          ;
   760                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   761                          ;        and MASK is the bit set to enable or disable
   762                          ;----------------------------------------------------
   763                              macro M8C_ClearIntFlag
   764                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   765  3C51                        endm
   766                          
   767                          ;----------------------------------------------------
   768                          ;  Power-On Reset & WatchDog Timer Functions
   769                          ;----------------------------------------------------
   770                              macro M8C_EnableWatchDog
   771                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   772  3C51                        endm
   773                          
   774                              macro M8C_ClearWDT
   775                              mov   reg[RES_WDT], 00h
   776  3C51                        endm
   777                          
   778                              macro M8C_ClearWDTAndSleep
   779                              mov   reg[RES_WDT], 38h
   780  3C51                        endm
   781                          
   782                          ;----------------------------------------------------
   783                          ;  Sleep, CPU Stop & Software Reset
   784                          ;----------------------------------------------------
   785                              macro M8C_Sleep
   786                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   787                              ; The next instruction to be executed depends on the state of the
   788                              ; various interrupt enable bits. If some interrupts are enabled
   789                              ; and the global interrupts are disabled, the next instruction will
   790                              ; be the one that follows the invocation of this macro. If global
   791                              ; interrupts are also enabled then the next instruction will be
   792                              ; from the interrupt vector table. If no interrupts are enabled
   793                              ; then the CPU sleeps forever.
   794  3C51                        endm
   795                          
   796                              macro M8C_Stop
   797                              ; In general, you probably don't want to do this, but here's how:
   798                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   799                              ; Next instruction to be executed is located in the interrupt
   800                              ; vector table entry for Power-On Reset.
   801  3C51                        endm
   802                          
   803                              macro M8C_Reset
   804                              ; Restore CPU to the power-on reset state.
   805                              mov A, 0
   806                              SSC
   807                              ; Next non-supervisor instruction will be at interrupt vector 0.
   808  3C51                        endm
   809                          
   810                          ;----------------------------------------------------
   811                          ; ImageCraft Code Compressor Actions
   812                          ;----------------------------------------------------
   813                              ; Suspend Code Compressor
   814                              ; Must not span a RET or RETI instruction
   815                              ; without resuming code compression
   816                              macro Suspend_CodeCompressor
   817                              or   F, 0
   818  3C51                        endm
   819                          
   820                              ; Resume Code Compression
   821                              macro Resume_CodeCompressor
   822                              add  SP, 0
   823  3C51                        endm
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  FILENAME: SAR10.inc
     4                          ;;   Version: 2.00, Updated on 2013/5/19 at 10:39:9
     5                          ;;  Generated by PSoC Designer 5.4.2946
     6                          ;;
     7                          ;;  DESCRIPTION: Assembler declarations for the SAR10 user module interface
     8                          ;;-----------------------------------------------------------------------------
     9                          ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
    10                          ;;*****************************************************************************
    11                          ;;*****************************************************************************
    12                          
    13                          include "m8c.inc"
    14                          
    15                          
    16                          ;--------------------------------------------------
    17                          ; Constants for SAR10 API's.
    18                          ;--------------------------------------------------
    19                          
    20  0001                    SAR10_SAR_CR0_REG_START_BIT:                               equ 0x01    ; Control register start bit
    21  0078                    SAR10_CHN_SEL_MASK:                                        equ 0x78
    22  0030                    SAR10_TRG_SEL_MASK:                                        equ 0x30
    23  0001                    SAR10_ALIGN_EN_MASK:                                       equ 0x01
    24  000E                    SAR10_CLK_SEL_MASK:                                        equ 0x0E
    25  0008                    SAR10_FREE_RUN_MASK:                                       equ 0x08
    26  0004                    SAR10_READY_MASK:                                          equ 0x04
    27  0002                    SAR10_SAR_CR0_REG_SW_TRIG_BIT:                             equ 0x02
    28                          
    29  00DF                    SAR10_INT_REG:                                             equ 0x0df
    30  0010                    SAR10_INT_SAR_MASK:                                        equ 0x10
    31                          ;--------------------------------------------------
    32                          ; SAR10 channel selection definitions
    33                          ;--------------------------------------------------
    34  0000                    SAR10_CHS_P00:                                             equ   (00h)
    35  0008                    SAR10_CHS_P01:                                             equ   (08h)
    36  0010                    SAR10_CHS_P02:                                             equ   (10h)
    37  0018                    SAR10_CHS_P03:                                             equ   (18h)
    38  0020                    SAR10_CHS_P04:                                             equ   (20h)
    39  0028                    SAR10_CHS_P05:                                             equ   (28h)
    40  0030                    SAR10_CHS_P06:                                             equ   (30h)
    41  0038                    SAR10_CHS_P07:                                             equ   (38h)
    42  0060                    SAR10_CHS_AMUX0:                                           equ   (60h)
    43  0068                    SAR10_CHS_AMUX1:                                           equ   (68h)
    44                          ;for compatibly with olds projects
    45  0060                    SAR10_CHS_AMUXL:                                           equ   (60h)
    46  0068                    SAR10_CHS_AMUXR:                                           equ   (68h)
    47                          
    48                          ;--------------------------------------------------
    49                          ; SAR10 trigger source definitions
    50                          ;--------------------------------------------------
    51  0000                    SAR10_SRC_TGRL:                                            equ   (00h)
    52  0010                    SAR10_SRC_TGRH:                                            equ   (10h)
    53  0020                    SAR10_SRC_TGR16:                                           equ   (20h)
    54  0030                    SAR10_SRC_TGRINCMP:                                        equ   (30h)
    55                          
    56                          ;--------------------------------------------------
    57                          ; SAR10 auto trigger definitions
    58                          ;--------------------------------------------------
    59  0001                    SAR10_AUTOTGR_ENABLE:                                      equ   (01h)
    60  0000                    SAR10_AUTOTGR_DISABLE:                                     equ   (00h)
    61                          
    62                          ;--------------------------------------------------
    63                          ; SAR10 clock selection definitions
    64                          ;--------------------------------------------------
    65  0000                    SAR10_SYSCLK_2:                                            equ   (00h)
    66  0002                    SAR10_SYSCLK_4:                                            equ   (02h)
    67  0004                    SAR10_SYSCLK_6:                                            equ   (04h)
    68  0006                    SAR10_SYSCLK_8:                                            equ   (06h)
    69  0008                    SAR10_SYSCLK_12:                                           equ   (08h)
    70  000A                    SAR10_SYSCLK_16:                                           equ   (0Ah)
    71  000C                    SAR10_SYSCLK_32:                                           equ   (0Ch)
    72  000E                    SAR10_SYSCLK_64:                                           equ   (0Eh)
    73                          
    74                          ;--------------------------------------------------
    75                          ; SAR10 run mode selection definitions
    76                          ;--------------------------------------------------
    77  0000                    SAR10_ONESHOT:                                             equ   (00h)
    78  0008                    SAR10_FREERUN:                                             equ   (08h)
    79                          
    80                          ;--------------------------------------------------
    81                          ; SAR10 definitions
    82                          ;--------------------------------------------------
    83  0000                    SAR10_Justify:                                             equ 0h
    84                          
    85                          ;--------------------------------------------------
    86                          ; Register Address Constants for SAR10
    87                          ;--------------------------------------------------
    88                          
    89  00A8                    SAR10_SAR_CR0_REG:                             equ 0xa8   ; SAR Control_0 register
    90  00A9                    SAR10_SAR_CR1_REG:                             equ 0xa9   ; SAR Control_1 register
    91  00AA                    SAR10_SAR_CR2_REG:                             equ 0xaa   ; SAR Control_2 register
    92  006A                    SAR10_SAR_DH_REG:                              equ 0x6a    ; SAR Data (MSB) register
    93  006B                    SAR10_SAR_DL_REG:                              equ 0x6b    ; SAR Data (LSB) register
    94                          
    95                          ;--------------------------------------------------
    96                          ; SAR10 Macro 'Functions'
    97                          ;--------------------------------------------------
    98                          
    99                             macro SAR10_Start_M
   100                             or    reg[SAR10_SAR_CR0_REG],  SAR10_SAR_CR0_REG_START_BIT
   101  3C51                       endm
   102                          
   103                             macro SAR10_Stop_M
   104                             and   reg[SAR10_SAR_CR0_REG], ~SAR10_SAR_CR0_REG_START_BIT
   105  3C51                       endm
   106                          
   107                             macro SAR10_EnableInt_M
   108                             M8C_EnableIntMask SAR10_INT_REG, SAR10_INT_SAR_MASK
   109  3C51                       endm
   110                          
   111                             macro SAR10_DisableInt_M
   112                             M8C_DisableIntMask SAR10_INT_REG, SAR10_INT_SAR_MASK
   113  3C51                       endm
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  FILENAME: SAR10INT.asm
     4                          ;;   Version: 2.00, Updated on 2013/5/19 at 10:39:9
     5                          ;;  Generated by PSoC Designer 5.4.2946
     6                          ;;
     7                          ;;  DESCRIPTION: SAR10 Interrupt Service Routine
     8                          ;;-----------------------------------------------------------------------------
     9                          ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
    10                          ;;*****************************************************************************
    11                          ;;*****************************************************************************
    12                          
    13                          include "m8c.inc"
    14                          include "memory.inc"
    15                          include "SAR10.inc"
    16                          
    17                          ;-----------------------------------------------
    18                          ;  Global Symbols
    19                          ;-----------------------------------------------
    20                          export  _SAR10_ISR
    21                          
    22                          
    23                          AREA InterruptRAM (RAM,REL,CON)
    24                             
    25                          ;@PSoC_UserCode_INIT@ (Do not change this line.)
    26                          ;---------------------------------------------------
    27                          ; Insert your custom declarations below this banner
    28                          ;---------------------------------------------------
    29                          
    30                          ;------------------------
    31                          ; Includes
    32                          ;------------------------
    33                          
    34                          	
    35                          ;------------------------
    36                          ;  Constant Definitions
    37                          ;------------------------
    38                          
    39                          
    40                          ;------------------------
    41                          ; Variable Allocation
    42                          ;------------------------
    43                          
    44                          ;---------------------------------------------------
    45                          ; Insert your custom declarations above this banner
    46                          ;---------------------------------------------------
    47                          ;@PSoC_UserCode_END@ (Do not change this line.)
    48                          
    49                          
    50                          AREA UserModules (ROM, REL)
    51                          
    52                          ;-----------------------------------------------------------------------------
    53                          ;  FUNCTION NAME: _SAR10_ISR
    54                          ;
    55                          ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
    56                          ;
    57                          ;-----------------------------------------------------------------------------
    58                          ;
    59                          
    60  2D89                    _SAR10_ISR:
    61                          
    62                             ;@PSoC_UserCode_BODY@ (Do not change this line.)
    63                             ;---------------------------------------------------
    64                             ; Insert your custom assembly code below this banner
    65                             ;---------------------------------------------------
    66                             ;   NOTE: interrupt service routines must preserve
    67                             ;   the values of the A and X CPU registers.
    68                             
    69                             ;---------------------------------------------------
    70                             ; Insert your custom assembly code above this banner
    71                             ;---------------------------------------------------
    72                             
    73                             ;---------------------------------------------------
    74                             ; Insert a lcall to a C function below this banner
    75                             ; and un-comment the lines between these banners
    76                             ;---------------------------------------------------
    77                             
    78                             ;PRESERVE_CPU_CONTEXT
    79                             ;lcall _My_C_Function
    80                             ;RESTORE_CPU_CONTEXT
    81                             
    82                             ;---------------------------------------------------
    83                             ; Insert a lcall to a C function above this banner
    84                             ; and un-comment the lines between these banners
    85                             ;---------------------------------------------------
    86                             ;@PSoC_UserCode_END@ (Do not change this line.)
    87                          
    88  2D89  7E                   reti
HI-TECH Software Macro Assembler (PSoC MCU) V9.61
Symbol Table                                                                                               Fri Jun 12 09:25:10 2015
                       HITECH 0002                     _SAR10_ISR 2D89                      TOOLCHAIN 0002  
HI-TECH Software Macro Assembler (PSoC MCU) V9.61
                                                                                                           Fri Jun 12 09:25:10 2015
     1                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     2                          ;;;
     3                          ;;;  M8C.INC -- Microcontroller Device System Declarations
     4                          ;;;
     5                          ;;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
     6                          ;;;
     7                          ;;;  This file provides address constants, bit field masks and a set of macro
     8                          ;;;  facilities for the Cypress Semiconductor CY8C22045 Microcontroller devices.
     9                          ;;;
    10                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    11                          
    12                          ;;=============================================================================
    13                          ;; Definition of abbreviations used in the descriptions below
    14                          ;;  (RW)   The register or bit supports reads and writes
    15                          ;;  (W)    The register or bit is write-only
    16                          ;;  (R)    The register or bit is read-only
    17                          ;;  (#)    Access to the register is bit specific (see the family datasheet)
    18                          ;;  (RC)   The register or bit can be read, but writing a 0 will clear it,
    19                          ;;         writing a 1 will have no effect.
    20                          ;;=============================================================================
    21                          
    22                          ;;=============================================================================
    23                          ;;      System Registers
    24                          ;;=============================================================================
    25                          
    26                          ;----------------------------
    27                          ;  Flag Register Bit Fields
    28                          ;----------------------------
    29  00C0                    FLAG_PGMODE_MASK:  equ 0C0h     ; Paging control for > 256 bytes of RAM
    30  0000                    FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
    31  0040                    FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
    32  0080                    FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
    33  00C0                    FLAG_PGMODE_3:     equ 0C0h       ; Direct to CUR_PP page, indexed to STK_PP page
    34  0000                    FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
    35  0040                    FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
    36  0080                    FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
    37  00C0                    FLAG_PGMODE_11b:   equ 0C0h       ; Same as PGMODE_3
    38  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    39  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    40  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    41  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    42  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    43                          
    44                          
    45                          ;;=============================================================================
    46                          ;;      Register Space, Bank 0
    47                          ;;=============================================================================
    48                          
    49                          ;------------------------------------------------
    50                          ;  Port Registers
    51                          ;  Note: Also see this address range in Bank 1.
    52                          ;------------------------------------------------
    53                          ; Port 0
    54  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    55  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    56  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    57  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    58                          ; Port 1
    59  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    60  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    61  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    62  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    63                          ; Port 2
    64  0008                    PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
    65  0009                    PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
    66  000A                    PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
    67  000B                    PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
    68                          ; Port 3
    69  000C                    PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
    70  000D                    PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
    71  000E                    PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
    72  000F                    PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
    73                          ; Port 4
    74  0010                    PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
    75  0011                    PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
    76  0012                    PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
    77  0013                    PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
    78                          
    79                          ;------------------------------------------------
    80                          ;  Digital PSoC(tm) block Registers
    81                          ;  Note: Also see this address range in Bank 1.
    82                          ;------------------------------------------------
    83                          ; Digital PSoC block 00, Basic Type C
    84  0020                    DBC00DR0:     equ 20h          ; data register 0                          (#)
    85  0021                    DBC00DR1:     equ 21h          ; data register 1                          (W)
    86  0022                    DBC00DR2:     equ 22h          ; data register 2                          (RW)
    87  0023                    DBC00CR0:     equ 23h          ; control & status register 0              (#)
    88                          
    89                          ; Digital PSoC block 01, Basic Type C
    90  0024                    DBC01DR0:     equ 24h          ; data register 0                          (#)
    91  0025                    DBC01DR1:     equ 25h          ; data register 1                          (W)
    92  0026                    DBC01DR2:     equ 26h          ; data register 2                          (RW)
    93  0027                    DBC01CR0:     equ 27h          ; control & status register 0              (#)
    94                          
    95                          ; Digital PSoC block 02, Communications Type C
    96  0028                    DCC02DR0:     equ 28h          ; data register 0                          (#)
    97  0029                    DCC02DR1:     equ 29h          ; data register 1                          (W)
    98  002A                    DCC02DR2:     equ 2Ah          ; data register 2                          (RW)
    99  002B                    DCC02CR0:     equ 2Bh          ; control & status register 0              (#)
   100                          
   101                          ; Digital PSoC block 03, Communications Type C
   102  002C                    DCC03DR0:     equ 2Ch          ; data register 0                          (#)
   103  002D                    DCC03DR1:     equ 2Dh          ; data register 1                          (W)
   104  002E                    DCC03DR2:     equ 2Eh          ; data register 2                          (RW)
   105  002F                    DCC03CR0:     equ 2Fh          ; control & status register 0              (#)
   106                          
   107                          ; Digital PSoC block 10, Basic Type C
   108  0030                    DBC10DR0:     equ 30h          ; data register 0                          (#)
   109  0031                    DBC10DR1:     equ 31h          ; data register 1                          (W)
   110  0032                    DBC10DR2:     equ 32h          ; data register 2                          (RW)
   111  0033                    DBC10CR0:     equ 33h          ; control & status register 0              (#)
   112                          
   113                          ; Digital PSoC block 11, Basic Type C
   114  0034                    DBC11DR0:     equ 34h          ; data register 0                          (#)
   115  0035                    DBC11DR1:     equ 35h          ; data register 1                          (W)
   116  0036                    DBC11DR2:     equ 36h          ; data register 2                          (RW)
   117  0037                    DBC11CR0:     equ 37h          ; control & status register 0              (#)
   118                          
   119                          ; Digital PSoC block 12, Communications Type C
   120  0038                    DCC12DR0:     equ 38h          ; data register 0                          (#)
   121  0039                    DCC12DR1:     equ 39h          ; data register 1                          (W)
   122  003A                    DCC12DR2:     equ 3Ah          ; data register 2                          (RW)
   123  003B                    DCC12CR0:     equ 3Bh          ; control & status register 0              (#)
   124                          
   125                          ; Digital PSoC block 13, Communications Type C
   126  003C                    DCC13DR0:     equ 3Ch          ; data register 0                          (#)
   127  003D                    DCC13DR1:     equ 3Dh          ; data register 1                          (W)
   128  003E                    DCC13DR2:     equ 3Eh          ; data register 2                          (RW)
   129  003F                    DCC13CR0:     equ 3Fh          ; control & status register 0              (#)
   130                          
   131                          ;-------------------------------------
   132                          ;  Analog Control Registers
   133                          ;-------------------------------------
   134  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
   135  00C0                    AMX_IN_ACI3:          equ C0h    ; MASK: column 3 input mux
   136  0030                    AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
   137  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
   138  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
   139                          
   140  0061                    AMUX_CFG:      equ 61h          ; Analog MUX Configuration
   141  0030                    AMUX_CFG_INTCAP:       equ 30h    ;
   142  000E                    AMUX_CFG_MUXCLK:  	  equ 0Eh	 ;
   143  0001                    AMUX_CFG_EN:		  	  equ 01h	 ;
   144                          
   145                          ; old declarations DO NOT USE
   146  0061                    AMUXCFG:      equ 61h          ; Analog MUX Configuration
   147  0030                    AMUXCFG_INTCAP:       equ 30h    ;
   148  000E                    AMUXCFG_MUXCLK:  	  equ 0Eh	 ;
   149  0001                    AMUXCFG_EN:		  	  equ 01h	 ;
   150                          
   151  0062                    PWM_CR:       equ 62h          ; Pulse-Width Modulator Control
   152  0038                    PWM_CR_HIGH:          equ 38h    ; MASK: PWM high time
   153  0006                    PWM_CR_LOW:           equ 06h	 ; MASK: PWM low time
   154  0001                    PWM_CR_EN:            equ 01h	 ; MASK: Enable/Disable PWM function
   155                          
   156  0063                    ARF_CR:       equ 63h          ; Analog Reference Control
   157                          
   158  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus Register           (#)
   159  0080                    CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
   160  0040                    CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
   161  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
   162  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
   163  0008                    CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
   164  0004                    CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
   165  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
   166  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   167                          
   168  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   169  0020                    CMP_CR1_CLDIS1:       equ 20h    ; MASK: Column 1 comparator output latch
   170  0010                    CMP_CR1_CLDIS0:	      equ 10h    ; MASK: Column 0 comparator output latch
   171                          
   172  0068                    ADC0_CR:      equ 68h          ; Analog Column 0 Configuration
   173  0080                    ADC0_CR_CMPST:        equ 80h    ;
   174  0040                    ADC0_CR_LOREN:        equ 40h    ;
   175  0020                    ADC0_CR_SHEN:         equ 20h    ;
   176  0008                    ADC0_CR_CBSRC:        equ 08h    ;
   177  0004                    ADC0_CR_ADCM:         equ 04h    ;
   178  0001                    ADC0_CR_EN:	          equ 01h    ;
   179                          
   180  0069                    ADC1_CR:      equ 69h          ; Analog Column 1 Configuration
   181  0080                    ADC1_CR_CMPST:        equ 80h    ;
   182  0040                    ADC1_CR_LOREN:        equ 40h    ;
   183  0020                    ADC1_CR_SHEN:         equ 20h    ;
   184  0008                    ADC1_CR_CBSRC:        equ 08h    ;
   185  0004                    ADC1_CR_ADCM:         equ 04h    ;
   186  0001                    ADC1_CR_EN:	          equ 01h    ;
   187                          
   188                          ; Continuous Time PSoC block Type E Row 0 Col 0
   189  0072                    ACE00CR1:     equ 72h          ; Control register 1                       (RW)
   190  0073                    ACE00CR2:     equ 73h          ; Control register 2                       (RW)
   191                          
   192                          ; Continuous Time PSoC block Type E Row 0 Col 1
   193  0076                    ACE01CR1:     equ 76h          ; Control register 1                       (RW)
   194  0077                    ACE01CR2:     equ 77h          ; Control register 2                       (RW)
   195                          
   196                          ; Switched Cap PSoC blockType E Row 1 Col 0
   197  0080                    ASE10CR0:     equ 80h          ; Control register 0                       (RW)
   198                          
   199                          ; Switched Cap PSoC blockType E Row 1 Col 1
   200  0084                    ASE11CR0:     equ 84h          ; Control register 0                       (RW)
   201                          
   202                          ;-----------------------------------------------
   203                          ;  Global General Purpose Data Registers
   204                          ;-----------------------------------------------
   205  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   206  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   207  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   208  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   209                          
   210                          ;------------------------------------------------
   211                          ;  Row Digital Interconnects
   212                          ;
   213                          ;  Note: the following registers are mapped into
   214                          ;  both register bank 0 AND register bank 1.
   215                          ;------------------------------------------------
   216                          
   217  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   218  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   219  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   220  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   221  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   222  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   223  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   224                          
   225  00B8                    RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
   226  00B9                    RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
   227  00BA                    RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
   228  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   229  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   230  00BD                    RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
   231  00BE                    RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
   232                          
   233                          ;-----------------------------------------------
   234                          ;  Ram Page Pointers
   235                          ;-----------------------------------------------
   236  00D0                    CUR_PP:      equ 0D0h           ; Current   Page Pointer
   237  00D1                    STK_PP:      equ 0D1h           ; Stack     Page Pointer
   238  00D3                    IDX_PP:      equ 0D3h           ; Index     Page Pointer
   239  00D4                    MVR_PP:      equ 0D4h           ; MVI Read  Page Pointer
   240  00D5                    MVW_PP:      equ 0D5h           ; MVI Write Page Pointer
   241                          
   242                          ;------------------------------------------------
   243                          ;  I2C Configuration Registers
   244                          ;------------------------------------------------
   245  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   246  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   247  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   248  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   249  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   250  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   251  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   252  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   253  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   254  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   255                          
   256  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   257  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   258  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   259  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   260  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   261  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   262  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   263  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   264  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   265                          
   266  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   267                          
   268  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   269  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   270  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   271  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   272  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   273                          
   274                          ;------------------------------------------------
   275                          ;  System and Global Resource Registers
   276                          ;------------------------------------------------
   277  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   278                                                         ; Use INT_MSK0 bit field masks
   279  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   280                                                         ; Use INT_MSK1 bit field masks
   281  00DC                    INT_CLR2:     equ 0DCh          ; Interrupt Clear Register 2               (RW)
   282                                                         ; Use INT_MSK2 bit field masks
   283  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   284                                                         ; Use INT_MSK3 bit field masks
   285                          
   286  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   287  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   288  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   289                          
   290  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   291  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   292  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   293  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   294  0010                    INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
   295  0008                    INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
   296  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   297  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   298  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   299                          
   300  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   301  0080                    INT_MSK1_DCC13:            equ 80h ; MASK: enable/disable DCC13 block interrupt
   302  0040                    INT_MSK1_DCC12:            equ 40h ; MASK: enable/disable DCC12 block interrupt
   303  0020                    INT_MSK1_DBC11:            equ 20h ; MASK: enable/disable DBC11 block interrupt
   304  0010                    INT_MSK1_DBC10:            equ 10h ; MASK: enable/disable DBC10 block interrupt
   305+ 0008                    INT_MSK1_DCC03:            equ 08h ; MASK: enable/disable DCC03 block interrupt
   306  0004                    INT_MSK1_DCC02:            equ 04h ; MASK: enable/disable DCC02 block interrupt
   307  0002                    INT_MSK1_DBC01:            equ 02h ; MASK: enable/disable DBC01 block interrupt
   308  0001                    INT_MSK1_DBC00:            equ 01h ; MASK: enable/disable DBC00 block interrupt
   309                          
   310  00DF                    INT_MSK2:     equ DFh			; Custom block Mask Register			   (RW)
   311  0010                    INT_MSK2_SARADC:           equ 10h ; MASK: enable/disable SARADC block interrupt
   312  0020                    INT_MSK2_CSD0:             equ 20h ; MASK: enable/disable CSD0 block interrupt
   313  0040                    INT_MSK2_CSD1:             equ 40h ; MASK: enable/disable CSD1 block interrupt
   314  0080                    INT_MSK2_RTC:              equ 80h ; MASK: enable/disable RTC block interrupt
   315                          
   316  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   317  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   318                          
   319                          ;------------------------------------------------------
   320                          ;  MAC Registers
   321                          ;------------------------------------------------------
   322                          
   323  00E8                    MUL0_X:       equ 0E8h          ; Multiply Input X Register                (W)
   324  00E9                    MUL0_Y:       equ 0E9h          ; Multiply Input Y Register                (W)
   325  00EA                    MUL0_DH:      equ 0EAh          ; Multiply Result High Byte Register       (R)
   326  00EB                    MUL0_DL:      equ 0EBh          ; Multiply Result Low Byte Register        (R)
   327                          
   328  00EC                    ACC0_DR1:     equ 0ECh          ; Accumulator Data Register 1              (RW)
   329+ 00ED                    ACC0_DR0:     equ 0EDh          ; Accumulator Data Register 0              (RW)
   330+ 00EE                    ACC0_DR3:     equ 0EEh          ; Accumulator Data Register 3              (RW)
   331  00EF                    ACC0_DR2:     equ 0EFh          ; Accumulator Data Register 2              (RW)
   332                          
   333                          ; DECIMATOR Control Registers
   334  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   335  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   336                          
   337                          ;------------------------------------------------------
   338                          ;  System Status and Control Registers
   339                          ;
   340                          ;  Note: The following registers are mapped into both
   341                          ;        register bank 0 AND register bank 1.
   342                          ;------------------------------------------------------
   343  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   344                                                             ; Use FLAG_ masks defined at top of file
   345                          
   346  00FD                    DAC_D:        equ 0FDh		   ; DAC Data Register                        (RW)
   347                          
   348  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   349  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: flag, Internal Reset Status bit
   350  0010                    CPU_SCR1_SLIMO:         equ 10h	   ; MASK: Slow IMO (internal main osc) enable
   351  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   352  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   353  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   354                          
   355  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   356  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   357  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   358  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   359  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   360  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   361                          
   362                          ;------------------------------------------------------
   363                          ;  Neon Capsense Digital Control Registers
   364                          ;------------------------------------------------------
   365  0050                    CSD0_DR0_L:				equ 50h		; Capsense 0 data low 0				(RW)
   366  0054                    CSD0_DR0_H:				equ 54h		; Capsense 0 data high 0			(RW)
   367  0058                    CSD1_DR0_L:				equ 58h		; Capsense 1 data low 0				(RW)
   368  005C                    CSD1_DR0_H:				equ 5Ch		; Capsense 1 data high 0			(RW)
   369  0051                    CSD0_DR1_L:				equ 51h		; Capsense 0 data low 1				(RW)
   370  0055                    CSD0_DR1_H:				equ 55h		; Capsense 0 data high 1			(RW)
   371  0059                    CSD1_DR1_L:				equ 59h		; Capsense 1 data low 1				(RW)
   372  005D                    CSD1_DR1_H:				equ 5Dh		; Capsense 1 data high 1			(RW)
   373  0052                    CSD0_CNT_L:				equ 52h		; Capsense 0 counter low			(RW)
   374  0056                    CSD0_CNT_H:				equ 56h		; Capsense 0 counter high			(RW)
   375  005A                    CSD1_CNT_L:				equ 5Ah		; Capsense 1 counter low			(RW)
   376  005E                    CSD1_CNT_H:				equ	5Eh		; Capsense 1 counter high			(RW)
   377  0053                    CSD0_CR0:				equ 53h		; Capsense 0 control 0				(RW)
   378  005B                    CSD1_CR0:				equ 5Bh		; Capsense 1 control 0				(RW)
   379  0057                    CSD0_CR1:				equ 57h		; Capsense 0 control 1				(RW)
   380  005F                    CSD1_CR1:				equ 5Fh		; Capsense 1 control 1				(RW)
   381                          
   382                          ;------------------------------------------------------
   383                          ;  Neon Analog Registers
   384                          ;------------------------------------------------------
   385  0065                    ASY_CR:					equ 65h		; Analog Synchronization Control	(RW)
   386  006A                    ADC_DH:					equ 6Ah		; ADC data high						(RW)
   387  006B                    ADC_DL:					equ 6Bh		; ADC data low						(RW)
   388  00C8                    PWMVREF0:				equ C8h		; PWM Voltage Reference 0			(RW)
   389  00C9                    PWMVREF1:				equ C9h		; PWM Voltage Reference 1			(RW)
   390  00CB                    PWMSRC:					equ CBh		; PWM Source						(RW)
   391  00CA                    IDACMODE:				equ CAh		; IDAC Mode							(RW)
   392  00FC                    IDACR_D:				equ FCh		; Analog Mux DAC data 0				(RW)
   393  00FD                    IDACL_D:				equ FDh		; Analog Mux DAC data 1				(RW)
   394                          
   395                          ;------------------------------------------------------
   396                          ;  Neon Digital Registers
   397                          ;------------------------------------------------------
   398  00B7                    RDI0DSM:				equ B7h		; Row Digital Interconnect input select 0	(RW)
   399  00BF                    RDI1DSM:				equ BFh		; Row Digital Interconnect input select 1	(RW)
   400                          
   401                          ;------------------------------------------------------
   402                          ;  Neon Test Registers
   403                          ;------------------------------------------------------
   404  00CC                    TSCR0:					equ CCh		; Tsource 0							(RW)
   405  00CD                    TSCMPH:					equ CDh		; TSCMP high						(RW)
   406  00CE                    TSCMPL:					equ CEh		; TSCMP low							(RW)
   407  00CF                    TSCR1:					equ CFh		; Tsource 1							(RW)
   408                          
   409                          ;;=============================================================================
   410                          ;;      Register Space, Bank 1
   411                          ;;=============================================================================
   412                          
   413                          ;------------------------------------------------
   414                          ;  Port Registers
   415                          ;  Note: Also see this address range in Bank 0.
   416                          ;------------------------------------------------
   417                          ; Port 0
   418  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   419  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   420  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   421  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   422                          
   423                          ; Port 1
   424  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   425  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   426  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   427  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   428                          
   429                          ; Port 2
   430  0008                    PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
   431  0009                    PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
   432  000A                    PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
   433  000B                    PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
   434                          
   435                          ; Port 3
   436  000C                    PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
   437  000D                    PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
   438  000E                    PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
   439  000F                    PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
   440                          
   441                          ; Port 4
   442  0010                    PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
   443  0011                    PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
   444  0012                    PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
   445  0013                    PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
   446                          
   447                          ;------------------------------------------------
   448                          ;  Digital PSoC(tm) block Registers
   449                          ;  Note: Also see this address range in Bank 0.
   450                          ;------------------------------------------------
   451                          
   452                          ; Digital PSoC block 00, Basic Type C
   453  0020                    DBC00FN:      equ 20h          ; Function Register                        (RW)
   454  0021                    DBC00IN:      equ 21h          ;    Input Register                        (RW)
   455  0022                    DBC00OU:      equ 22h          ;   Output Register                        (RW)
   456  0023                    DBC00CR1:     equ 23h          ;   control & status register 1            (RW)
   457                          
   458                          ; Digital PSoC block 01, Basic Type C
   459  0024                    DBC01FN:      equ 24h          ; Function Register                        (RW)
   460  0025                    DBC01IN:      equ 25h          ;    Input Register                        (RW)
   461  0026                    DBC01OU:      equ 26h          ;   Output Register                        (RW)
   462  0027                    DBC01CR1:     equ 27h          ;   control & status register 1            (RW)
   463                          
   464                          ; Digital PSoC block 02, Communications Type C
   465  0028                    DCC02FN:      equ 28h          ; Function Register                        (RW)
   466  0029                    DCC02IN:      equ 29h          ;    Input Register                        (RW)
   467  002A                    DCC02OU:      equ 2Ah          ;   Output Register                        (RW)
   468  002B                    DBC02CR1:     equ 2Bh          ;   control & status register 1            (RW)
   469                          
   470                          ; Digital PSoC block 03, Communications Type C
   471  002C                    DCC03FN:      equ 2Ch          ; Function Register                        (RW)
   472  002D                    DCC03IN:      equ 2Dh          ;    Input Register                        (RW)
   473  002E                    DCC03OU:      equ 2Eh          ;   Output Register                        (RW)
   474  0029                    DBC03CR1:     equ 29h          ;   control & status register 1            (RW)
   475                          
   476                          ; Digital PSoC block 10, Basic Type C
   477  0030                    DBC10FN:      equ 30h          ; Function Register                        (RW)
   478  0031                    DBC10IN:      equ 31h          ;    Input Register                        (RW)
   479  0032                    DBC10OU:      equ 32h          ;   Output Register                        (RW)
   480  0033                    DBC10CR1:     equ 33h          ;   control & status register 1            (RW)
   481                          
   482                          ; Digital PSoC block 11, Basic Type C
   483  0034                    DBC11FN:      equ 34h          ; Function Register                        (RW)
   484  0035                    DBC11IN:      equ 35h          ;    Input Register                        (RW)
   485  0036                    DBC11OU:      equ 36h          ;   Output Register                        (RW)
   486  0037                    DBC11CR1:     equ 37h          ;   control & status register 1            (RW)
   487                          
   488                          ; Digital PSoC block 12, Communications Type C
   489  0038                    DCC12FN:      equ 38h          ; Function Register                        (RW)
   490  0039                    DCC12IN:      equ 39h          ;    Input Register                        (RW)
   491  003A                    DCC12OU:      equ 3Ah          ;   Output Register                        (RW)
   492  003B                    DBC12CR1:     equ 3Bh          ;   control & status register 1            (RW)
   493                          
   494                          ; Digital PSoC block 13, Communications Type C
   495  003C                    DCC13FN:      equ 3Ch          ; Function Register                        (RW)
   496  003D                    DCC13IN:      equ 3Dh          ;    Input Register                        (RW)
   497  003E                    DCC13OU:      equ 3Eh          ;   Output Register                        (RW)
   498  003F                    DBC13CR1:     equ 3Fh          ;   control & status register 1            (RW)
   499                          
   500                          ;------------------------------------------------
   501                          ;  System and Global Resource Registers
   502                          ;  Note: Also see this address range in Bank 0.
   503                          ;------------------------------------------------
   504                          
   505  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   506  00C0                    CLK_CR0_ACOLUMN_3:    equ C0h    ; MASK: Specify clock for analog cloumn
   507  0030                    CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
   508  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   509  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   510                          
   511  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   512  0018                    CLK_CR1_ACLK1:        equ 18h    ; MASK: Digital PSoC block for analog source
   513  0003                    CLK_CR1_ACLK0:        equ 03h    ; MASK: Digital PSoC block for analog source
   514                          
   515  0003                    CLK_CR1_ACLK2:        equ 03h    ; Deprecated do not use
   516                          
   517  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   518  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   519                          
   520  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   521  000F                    AMD_CR0_AMOD0:        equ 0Fh    ; MASK: Modulation source for analog column 0
   522                          
   523  0064                    CMP_GO_EN:    equ 64h          ; Comparator Bus To Global Out Enable      (RW)
   524  0080                    CMP_GO_EN_GOO5:       equ 80h    ; MASK: Selected Col 1 signal to GOO5
   525  0040                    CMP_GO_EN_GOO1:       equ 40h    ; MASK: Selected Col 1 signal to GOO1
   526  0030                    CMP_GO_EN_SEL1:       equ 30h    ; MASK: Column 1 Signal Select
   527  0008                    CMP_GO_EN_GOO4:       equ 08h    ; MASK: Selected Col 0 signal to GOO4
   528  0004                    CMP_GO_EN_GOO0:       equ 04h    ; MASK: Selected Col 0 signal to GOO0
   529  0003                    CMP_GO_EN_SEL0:       equ 03h    ; MASK: Column 0 Signal Select
   530                          
   531  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   532  000F                    AMD_CR1_AMOD1:        equ 0Fh    ; MASK: Modulation ctrl for analog column 1
   533                          
   534  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   535  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   536  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   537                          
   538  006B                    CLK_CR3:      equ 6Bh          ; Analog Clock Source Control Register 3   (RW)
   539  0040                    CLK_CR3_SYS1:         equ 40h    ; MASK: Analog Clock 1 selection
   540  0030                    CLK_CR3_DIVCLK1:      equ 30h    ; MASK: Analog Clock 1 divider
   541  0004                    CLK_CR3_SYS0:         equ 04h    ; MASK: Analog Clock 0 selection
   542  0003                    CLK_CR3_DIVCLK0:      equ 03h    ; MASK: Analog Clock 0 divider
   543                          
   544                          ;------------------------------------------------
   545                          ;  Global Digital Interconnects
   546                          ;------------------------------------------------
   547                          
   548  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   549  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   550  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   551  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   552                          
   553  00A0                    GDI_O_IN_CR:  equ 0A0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   554  00A1                    GDI_E_IN_CR:  equ 0A1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   555  00A2                    GDI_O_OU_CR:  equ 0A2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   556  00A3                    GDI_E_OU_CR:  equ 0A3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   557                          
   558  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   559  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   560                          
   561                          ;------------------------------------------------
   562                          ;  Analog Mux Bus Port Enable Bits
   563                          ;------------------------------------------------
   564  00D8                    MUX_CR0:      equ 0D8h          ; Analog Mux Port 0 Bit Enables Register
   565  00D9                    MUX_CR1:      equ 0D9h          ; Analog Mux Port 1 Bit Enables Register
   566  00DA                    MUX_CR2:      equ 0DAh          ; Analog Mux Port 2 Bit Enables Register
   567  00DB                    MUX_CR3:      equ 0DBh          ; Analog Mux Port 3 Bit Enables Register
   568  00EC                    MUX_CR4:      equ 0ECh          ; Analog Mux Port 4 Bit Enables Register
   569                          
   570                          ;------------------------------------------------
   571                          ;  Clock and System Control Registers
   572                          ;------------------------------------------------
   573                          
   574  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   575  0080                    OSC_GO_EN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   576  0040                    OSC_GO_EN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   577  0020                    OSC_GO_EN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   578  0010                    OSC_GO_EN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   579  0008                    OSC_GO_EN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   580  0004                    OSC_GO_EN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   581  0002                    OSC_GO_EN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   582  0001                    OSC_GO_EN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   583                          
   584  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   585  0003                    OSC_CR4_VC3SEL:       equ 03h    ; MASK: System VC3 Clock source
   586                          
   587  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   588                          
   589  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   590  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   591  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   592  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   593  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   594  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   595  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   596  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   597  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   598  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   599  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   600  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   601  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   602  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   603  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   604  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   605  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   606  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   607                          
   608  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   609  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   610  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   611                          
   612  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   613  0080                    OSC_CR2_PLLGAIN:      equ 80h    ; MASK: High/Low gain
   614  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   615  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   616  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   617                          
   618  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   619  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   620  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   621  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   622  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   623  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   624  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   625  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   626                          
   627  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   628  0008                    VLT_CMP_NOWRITE:      equ 08h    ; MASK: Vcc below Flash Write level
   629  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   630  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   631  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   632                          
   633  00E5                    ADC0_TR:      equ 0E5h          ; ADC Column 0 Trim Register
   634  00E6                    ADC1_TR:      equ 0E6h          ; ADC Column 1 Trim Register
   635                          
   636  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   637  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   638  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   639  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   640                          
   641  00FA                    FLS_PR1:      equ 0FAh          ; Flash Program Register 1                 (RW)
   642  0003                    FLS_PR1_BANK:         equ 03h    ; MASK: Select Active Flash Bank
   643                          
   644  00FD                    DAC_CR0:       equ 0FDh          ; Analog Mux DAC Control Register 0
   645  00DC                    DAC_CR1:       equ 0DCh          ; Analog Mux DAC Control Register 1
   646  0008                    DAC_CR_IRANGE:        equ 08h    ; MASK: Sets the DAC Range low or high
   647  0006                    DAC_CR_OSCMODE:       equ 06h    ; MASK: Defines the reset mode for AMux
   648  0001                    DAC_CR_ENABLE:        equ 01h    ; MASK: Enable/Disable DAC function
   649                          
   650                          ;------------------------------------------------
   651                          ;  I2C Control Registers
   652                          ;------------------------------------------------
   653                          
   654  00AD                    I2C_ADDR:    equ 0ADh          ; I2C Address Register (RW)
   655                          
   656                          ;------------------------------------------------------
   657                          ;  Neon Analog Registers
   658                          ;------------------------------------------------------
   659  0053                    VDAC50CR0:		equ 53h			; V DAC5 control 0				(RW)
   660  0057                    VDAC51CR0:		equ 57h			; V DAC5 control 1				(RW)
   661  00A8                    ADC_CR0:		equ A8h			; ADC control 0					(RW)
   662  00A9                    ADC_CR1:		equ A9h			; ADC control 1					(RW)
   663  00AA                    ADC_CR2:		equ AAh			; ADC control 2					(RW)
   664  00AB                    ADC_CR3TRIM:	equ ABh			; ADC control 3					(RW)
   665  00AC                    ADC_CR4:		equ ACh			; ADC control 4					(RW)
   666  00E7                    VDAC_TRIM:		equ E7h			; V DAC trim					(RW)
   667                          
   668                          ;------------------------------------------------------
   669                          ;  Neon Current Sense CMP Registers
   670                          ;------------------------------------------------------
   671  0050                    CMP0CR1:		equ 50h			; CMP0 control 1				(RW)
   672  0051                    CMP0CR2:		equ 51h			; CMP0 control 2				(RW)
   673  0054                    CMP1CR1:		equ 54h			; CMP1 control 1				(RW)
   674  0055                    CMP1CR2:		equ 55h			; CMP1 control 2				(RW)
   675  0058                    CSCMPCR0:		equ 58h			; CSCMP control 0				(RW)
   676  0059                    CSCMPGOEN:		equ 59h			; CSCMO global out enable		(RW)
   677  005A                    CSLUTCR0:		equ 5Ah			; CSLUT control 0				(RW)
   678  005B                    CMPCOLMUX:		equ 5Bh			; CMP Column Mux				(RW)
   679  005C                    CMPPWMCR:		equ 5Ch			; CMP PWM control				(RW)
   680  005D                    CMPFLTCR:		equ 5Dh			; CMP filter control			(RW)
   681  005E                    CMPCLK1:		equ 5Eh			; CMP clock 1					(RW)
   682  005F                    CMPCLK0:		equ 5Fh			; CMP clock 0					(RW)
   683                          
   684                          ;------------------------------------------------------
   685                          ;  Neon Real Time Clock Registers
   686                          ;------------------------------------------------------
   687  00A4                    RTCH:			equ A4h			; Real time current hour		(RW)
   688  00A5                    RTCM:			equ A5h			; Real time current minute		(RW)
   689  00A6                    RTCS:			equ A6h			; Real time current second		(RW)
   690  00A7                    RTCCR:			equ A7h			; Real time clock control		(RW)
   691                          
   692                          ;------------------------------------------------------
   693                          ;  Analog MUX Config Registers
   694                          ;------------------------------------------------------
   695                          
   696  006A                    AMUX_CFG1:			equ 6Ah  ; Analog MUX Configuration 1
   697  0020                    AMUX_CFG1_GOINVR:	equ 20h  ;
   698  0010                    AMUX_CFG1_GOINVL:  	equ 10h	 ;
   699  000C                    AMUX_CFG1_AMUXMODR:	equ 0Ch	 ;
   700  0003                    AMUX_CFG1_AMUXMODL:	equ 03h	 ;
   701                          
   702                          ;;=============================================================================
   703                          ;;      M8C System Macros
   704                          ;;  These macros should be used when their functions are needed.
   705                          ;;=============================================================================
   706                          
   707                          ;----------------------------------------------------
   708                          ;  Swapping Register Banks
   709                          ;----------------------------------------------------
   710                              macro M8C_SetBank0
   711                              and   F, ~FLAG_XIO_MASK
   712  3C51                        endm
   713                          
   714                              macro M8C_SetBank1
   715                              or    F, FLAG_XIO_MASK
   716  3C51                        endm
   717                          
   718                          ;----------------------------------------------------
   719                          ;  Global Interrupt Enable/Disable
   720                          ;----------------------------------------------------
   721                              macro M8C_EnableGInt
   722                              or    F, FLAG_GLOBAL_IE
   723  3C51                        endm
   724                          
   725                              macro M8C_DisableGInt
   726                              and   F, ~FLAG_GLOBAL_IE
   727  3C51                        endm
   728                          
   729                          ;----------------------------------------------------
   730                          ;  Enable/Disable Interrupt Mask
   731                          ;
   732                          ;  Use the following macros to enable/disable
   733                          ;  bits in the Interrupt mask registers,
   734                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   735                          ;
   736                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   737                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   738                          ;
   739                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   740                          ;        and MASK is the bit set to enable or disable
   741                          ;----------------------------------------------------
   742                          ; Disable Interrupt Bit Mask(s)
   743                              macro M8C_DisableIntMask
   744                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   745  3C51                        endm
   746                          
   747                          ; Enable Interrupt Bit Mask(s)
   748                              macro M8C_EnableIntMask
   749                              or    reg[@0], @1               ; enable specified interrupt enable bit
   750  3C51                        endm
   751                          
   752                          ;----------------------------------------------------
   753                          ;  Clear Posted Interrupt Flag Mask
   754                          ;
   755                          ;  Use the following macros to clear the
   756                          ;  bits in the Interrupt Clear registers,
   757                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   758                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   759                          ;
   760                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   761                          ;        and MASK is the bit set to enable or disable
   762                          ;----------------------------------------------------
   763                              macro M8C_ClearIntFlag
   764                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   765  3C51                        endm
   766                          
   767                          ;----------------------------------------------------
   768                          ;  Power-On Reset & WatchDog Timer Functions
   769                          ;----------------------------------------------------
   770                              macro M8C_EnableWatchDog
   771                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   772  3C51                        endm
   773                          
   774                              macro M8C_ClearWDT
   775                              mov   reg[RES_WDT], 00h
   776  3C51                        endm
   777                          
   778                              macro M8C_ClearWDTAndSleep
   779                              mov   reg[RES_WDT], 38h
   780  3C51                        endm
   781                          
   782                          ;----------------------------------------------------
   783                          ;  Sleep, CPU Stop & Software Reset
   784                          ;----------------------------------------------------
   785                              macro M8C_Sleep
   786                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   787                              ; The next instruction to be executed depends on the state of the
   788                              ; various interrupt enable bits. If some interrupts are enabled
   789                              ; and the global interrupts are disabled, the next instruction will
   790                              ; be the one that follows the invocation of this macro. If global
   791                              ; interrupts are also enabled then the next instruction will be
   792                              ; from the interrupt vector table. If no interrupts are enabled
   793                              ; then the CPU sleeps forever.
   794  3C51                        endm
   795                          
   796                              macro M8C_Stop
   797                              ; In general, you probably don't want to do this, but here's how:
   798                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   799                              ; Next instruction to be executed is located in the interrupt
   800                              ; vector table entry for Power-On Reset.
   801  3C51                        endm
   802                          
   803                              macro M8C_Reset
   804                              ; Restore CPU to the power-on reset state.
   805                              mov A, 0
   806                              SSC
   807                              ; Next non-supervisor instruction will be at interrupt vector 0.
   808  3C51                        endm
   809                          
   810                          ;----------------------------------------------------
   811                          ; ImageCraft Code Compressor Actions
   812                          ;----------------------------------------------------
   813                              ; Suspend Code Compressor
   814                              ; Must not span a RET or RETI instruction
   815                              ; without resuming code compression
   816                              macro Suspend_CodeCompressor
   817                              or   F, 0
   818  3C51                        endm
   819                          
   820                              ; Resume Code Compression
   821                              macro Resume_CodeCompressor
   822                              add  SP, 0
   823                              endm
      + 3C51                    
      + 3C51                    ; end of file m8c.inc
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;
     4                          ;;       FILENAME: Memory.inc
     5                          ;;
     6                          ;;    DESCRIPTION: Memory Model and Stack Parameter Definitions for 
     7                          ;;                 CY8C22045 PSoC devices.
     8                          ;;
     9                          ;;  LAST MODIFIED: August 17, 2004
    10                          ;;
    11                          ;;-----------------------------------------------------------------------------
    12                          ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
    13                          ;;*****************************************************************************
    14                          ;;*****************************************************************************
    15                          ;
    16                          ;
    17                          ;  ******** Define Memory Model and Stack parameters ********
    18                          ;
    19  0001                    IMAGECRAFT: equ 1   
    20  0002                    HITECH: equ 2   
    21  0002                    TOOLCHAIN: equ HITECH   
    22  0001                    SYSTEM_LARGE_MEMORY_MODEL: equ 1   
    23  0000                    SYSTEM_SMALL_MEMORY_MODEL: equ 0   
    24  0003                    SYSTEM_STACK_PAGE: equ 3   
    25  0000                    SYSTEM_STACK_PAGE_OFFSET: equ 0   
    26  0002                    SYSTEM_TOOLS: equ 2   
    27  0000                    SYSTEM_IDXPG_TRACKS_STK_PP: equ 0   
    28  0001                    SYSTEM_IDXPG_TRACKS_IDX_PP: equ 1   
    29  0000                    SYSTEM_MULTIPAGE_STACK: equ 0 
    30                          
    31                          
    32                          ;  ******* Function Class Definitions *******
    33                          ;
    34                          ;  These definitions are used to describe RAM access patterns. They provide
    35                          ;  documentation and they control prologue and epilogue macros that perform
    36                          ;  the necessary housekeeping functions for large memory model devices like
    37                          ;  the CY8C22045.
    38                          
    39  0001                    RAM_USE_CLASS_1:               equ 1   ; PUSH, POP & I/O access
    40  0002                    RAM_USE_CLASS_2:               equ 2   ; Indexed address mode on stack page
    41  0004                    RAM_USE_CLASS_3:               equ 4   ; Indexed address mode to any page
    42  0008                    RAM_USE_CLASS_4:               equ 8   ; Direct/Indirect address mode access
    43                          
    44                          ; ******* Hi Tech Specific *******
    45                          ; Turn on the expansion of all macros by default
    46                          IF (TOOLCHAIN & HITECH)
    47                          OPT EXPAND
    48                          ENDIF
    49                          ; ******* Page Pointer Manipulation Macros *******
    50                          ;
    51                          ;  ******* Page Pointer Manipulation Macros *******
    52                          ;
    53                          ;  Most of the following macros are conditionally compiled so they only
    54                          ;  produce code if the large memory model is selected.
    55                          
    56                             ;-----------------------------------------------
    57                             ;  Set Stack Page Macro
    58                             ;-----------------------------------------------
    59                             ;
    60                             ;  DESC: Modify STK_PP in the large or small memory Models.
    61                             ;
    62                             ; INPUT: Constant (e.g., SYSTEM_STACK_PAGE) that specifies the RAM page on
    63                             ;        which stack operations like PUSH and POP store and retrieve their
    64                             ;        data
    65                             ;
    66                             ;  COST: 8 instruction cycles (in LMM only)
    67                          
    68                             macro RAM_SETPAGE_STK( PG_NUMBER )
    69                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    70                                mov reg[STK_PP], @PG_NUMBER
    71                             ENDIF
    72  3C51                       endm
    73                          
    74                             ;-----------------------------------------------
    75                             ;  Set Current Page Macro
    76                             ;-----------------------------------------------
    77                             ;
    78                             ;  DESC: Modify CUR_PP in the large or small memory Models.
    79                             ;
    80                             ; INPUT: Constant value (e.g., >bFoo) for the RAM page number used in
    81                             ;        calculation of effective direct-mode address operands.
    82                             ;
    83                             ;  COST: 8 instruction cycles (in LMM only)
    84                          
    85                             macro RAM_SETPAGE_CUR( PG_NUMBER )
    86                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    87                                mov reg[CUR_PP], @PG_NUMBER
    88                             ENDIF
    89  3C51                       endm
    90                          
    91                             ;-----------------------------------------------
    92                             ;  Set Index Page Macro
    93                             ;-----------------------------------------------
    94                             ;
    95                             ;  DESC: Modify IDX_PP in the large or small emory Models.
    96                             ;
    97                             ; INPUT: Constant value (e.g., >caFoo) for the RAM page number used in
    98                             ;         calculation of effective index-mode address operands.
    99                             ;
   100                             ;  COST: 8 instruction cycles (in LMM only)
   101                          
   102                             macro RAM_SETPAGE_IDX( PG_NUMBER )
   103                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   104                                mov reg[IDX_PP], @PG_NUMBER
   105                             ENDIF
   106  3C51                       endm
   107                          
   108                             ;-----------------------------------------------
   109                             ;  Set MVI Read Page Macro
   110                             ;-----------------------------------------------
   111                             ;
   112                             ;  DESC: Modify MVR_PP in the large or small memory Models.
   113                             ;
   114                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   115                             ;        calculation of indirect address operands used in the
   116                             ;        "mvi A, [pFoo]" instructions.
   117                             ;
   118                             ;  COST: 8 instruction cycles (in LMM only)
   119                          
   120                             macro RAM_SETPAGE_MVR( PG_NUMBER )
   121                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   122                                mov reg[MVR_PP], @PG_NUMBER
   123                             ENDIF
   124  3C51                       endm
   125                          
   126                             ;-----------------------------------------------
   127                             ;  Set MVI Write Page Macro
   128                             ;-----------------------------------------------
   129                             ;
   130                             ;  DESC: Modify MVW_PP in the large or small memory Models.
   131                             ;
   132                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   133                             ;        calculation of indirect address operands used in the
   134                             ;        "mvi [pFoo], A" instructions.
   135                             ;
   136                             ;  COST: 8 instruction cycles (in LMM only)
   137                          
   138                             macro RAM_SETPAGE_MVW( PG_NUMBER )
   139                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   140                                mov reg[MVW_PP], @PG_NUMBER
   141                             ENDIF
   142  3C51                       endm
   143                          
   144                             ;-----------------------------------------------
   145                             ;  Force Index Page Pointer to Stack Page
   146                             ;-----------------------------------------------
   147                             ;
   148                             ;  DESC: Map index-mode operands onto the stack page by modifying IDX_PP.
   149                             ;        See also RAM_LOCK_INDEX_TO_STACKPAGE.
   150                             ;
   151                             ; INPUT: None
   152                             ;
   153                             ;  COST: 8 instruction cycles (in LMM only)
   154                          
   155                             macro RAM_SETPAGE_IDX2STK
   156                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   157                                IF ( SYSTEM_MULTIPAGE_STACK )
   158                                   mov   A, reg[STK_PP]
   159                                   mov   reg[IDX_PP], A
   160                                ELSE
   161                                   RAM_SETPAGE_IDX SYSTEM_STACK_PAGE
   162                                ENDIF
   163                             ENDIF
   164  3C51                       endm
   165                          
   166                             ;-----------------------------------------------
   167                             ;  Change Memory Mode
   168                             ;-----------------------------------------------
   169                             ;
   170                             ;  DESC: Modify FLAG_PAGEMODE bits in the large and small memory Models.
   171                             ;
   172                             ; INPUT: Constant value for PGMODE bitfield of CPU Flag register, F.
   173                             ;        See FLAG_PGMODE_{x} constants in M8C.INC.
   174                             ;
   175                             ;  COST: 8 instruction cycles (in LMM only)
   176                          
   177                             macro RAM_CHANGE_PAGE_MODE( MODE )
   178                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   179                                and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
   180                                or    F,  FLAG_PGMODE_MASK & @MODE
   181                             ENDIF
   182  3C51                       endm
   183                          
   184                             ;-----------------------------------------------
   185                             ;  Set Large Memory Model Native Paging Mode
   186                             ;-----------------------------------------------
   187                             ;
   188                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   189                             ;        paging mode *IFF* a simple "OR" is guaranteed to work---for
   190                             ;        example, in an ISR, when the PGMODE bits have been cleared
   191                             ;        to zero. If a simple "OR" is not guaranteed to work, use
   192                             ;        the slower RAM_RESTORE_NATIVE_PAGING instead.
   193                             ;
   194                             ; INPUT: none
   195                             ;
   196                             ;  COST: 4 instruction cycles (in LMM only)
   197                          
   198                             macro RAM_SET_NATIVE_PAGING
   199                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   200                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   201                                or    F,  FLAG_PGMODE_11b            ; LMM w/ IndexPage<==>StackPage
   202                             ENDIF ;  PGMODE LOCKED
   203                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   204                                or    F,  FLAG_PGMODE_10b            ; LMM with independent IndexPage
   205                             ENDIF ; PGMODE FREE
   206                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   207  3C51                       endm
   208                          
   209                             ;-----------------------------------------------
   210                             ; Restore Large Memory Model Native Paging Mode
   211                             ;-----------------------------------------------
   212                             ;
   213                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   214                             ;        paging mode. Always works because it clears the PGMODE bits
   215                             ;        before OR-ing in the new ones. See RAM_RESTORE_NATIVE_PAGING
   216                             ;        for a faster method.
   217                             ;
   218                             ; INPUT: none
   219                             ;
   220                             ;  COST: 8 instruction cycles (in LMM only)
   221                          
   222                             macro RAM_RESTORE_NATIVE_PAGING
   223                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   224                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   225                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_11b ; LMM w/ IndexPage<==>StackPage
   226                             ENDIF ;  PGMODE LOCKED
   227                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   228                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b ; LMM with independent IndexPage
   229                             ENDIF ; PGMODE FREE
   230                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   231  3C51                       endm
   232                          
   233                             ;-----------------------------------------------
   234                             ; Force indexed addr mode operands to Stack Pg
   235                             ;-----------------------------------------------
   236                             ;
   237                             ;  DESC: Force instructions that use indexed address mode to reference the
   238                             ;        stack page (as defined by STK_PP). This macro sets the "Indexed
   239                             ;        Stack Mode" bit (LSB) of the PGMODE bit field in the CPU Flag
   240                             ;        register, F. (See also RAM_SETPAGE_IDX2STK, above.)
   241                             ;
   242                             ; INPUT: none
   243                             ;
   244                             ;  COST: 4 instruction cycles (in LMM only)
   245                          
   246                             macro RAM_X_POINTS_TO_STACKPAGE
   247                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   248                                or   F, FLAG_PGMODE_01b
   249                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   250  3C51                       endm
   251                          
   252                             ;-----------------------------------------------
   253                             ;  Force indexed addr mode operands to Index Pg
   254                             ;-----------------------------------------------
   255                             ;
   256                             ;  DESC: Permit instructions that use indexed address mode to reference page
   257                             ;        zero or the page pointed to by the IDX_PP register, depending on the
   258                             ;        setting of the MSb (or "Direct Page Mode" bit) of the PGMODE bits
   259                             ;        in the CPU Flag register, F. (This macro clears the PGMODE LSb.)
   260                             ;
   261                             ; INPUT: none
   262                             ;
   263                             ;  COST: 4 instruction cycles (in LMM only)
   264                          
   265                             macro RAM_X_POINTS_TO_INDEXPAGE
   266                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   267                                and  F, ~FLAG_PGMODE_01b
   268                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   269  3C51                       endm
   270                          
   271                             ;-----------------------------------------------
   272                             ;  Function Prologue
   273                             ;-----------------------------------------------
   274                             ;
   275                             ;  Prologue for functions that run in the LMM and SMM.
   276                             ;
   277                          
   278                             macro RAM_PROLOGUE( ACTUAL_CLASS )
   279                          
   280                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   281                             ; Nothing to do
   282                             ENDIF ; RAM_USE_CLASS_1
   283                          
   284                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   285                                IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   286                                   RAM_X_POINTS_TO_STACKPAGE         ; exit native paging mode!
   287                                ENDIF
   288                             ENDIF ; RAM_USE_CLASS_2
   289                          
   290                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   291                                IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   292                                   RAM_X_POINTS_TO_INDEXPAGE         ; exit native paging mode!
   293                                ENDIF
   294                             ENDIF ; RAM_USE_CLASS_3
   295                          
   296                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   297                             ; Nothing to do
   298                             ENDIF ; RAM_USE_CLASS_4
   299                          
   300  3C51                       endm
   301                          
   302                             ;-----------------------------------------------
   303                             ;  Function Epilogue
   304                             ;-----------------------------------------------
   305                             ;
   306                             ;  Prologue for functions that run in the LMM and SMM.
   307                             ;
   308                          
   309                             macro RAM_EPILOGUE( ACTUAL_CLASS )
   310                          
   311                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   312                             ; Nothing to do
   313                             ENDIF ; RAM_USE_CLASS_1
   314                          
   315                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   316                                RAM_RESTORE_NATIVE_PAGING
   317                             ENDIF ; RAM_USE_CLASS_2
   318                          
   319                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   320                                RAM_RESTORE_NATIVE_PAGING
   321                             ENDIF ; RAM_USE_CLASS_3
   322                          
   323                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   324                             ; Nothing to do
   325                             ENDIF ; RAM_USE_CLASS_4
   326                          
   327  3C51                       endm
   328                          
   329                             ;-----------------------------------------------
   330                             ;  Preserve Register
   331                             ;-----------------------------------------------
   332                             ;
   333                             ;  DESC: Preserve a register value on the stack
   334                             ;
   335                             ; INPUT: Name or address of register in I/O Space
   336                             ;        The I/O bank is an implicit parameter. That is, this function will
   337                             ;        Access the I/O bank currently specified by the CPU Flag register.
   338                             ;
   339                             ;  USES: CPU 'A' register
   340                             ;
   341                             ;  COST: 9 instruction cycles
   342                          
   343                             macro REG_PRESERVE( IOReg )
   344                             mov   A, reg[ @IOReg ]
   345                             push  A
   346  3C51                       endm
   347                          
   348                             ;-----------------------------------------------
   349                             ;  Restore Register
   350                             ;-----------------------------------------------
   351                             ;
   352                             ;  DESC: Restore a register value from the stack
   353                             ;
   354                             ; INPUT: Name or address of register in I/O Space
   355                             ;        The I/O bank is an implicit parameter. That is, this function will
   356                             ;        Access the I/O bank currently specified by the CPU Flag register.
   357                             ;
   358                             ;  USES: CPU 'A' register
   359                             ;
   360                             ;  COST: 10 instruction cycles
   361                          
   362                             macro REG_RESTORE( IOReg )
   363                             pop   A
   364                             mov   reg[ @IOReg ], A
   365  3C51                       endm
   366                          
   367                             ;-----------------------------------------------
   368                             ;  Preserve Volatile Page Pointer Registers
   369                             ;-----------------------------------------------
   370                             ;
   371                             ;  DESC: Invoked by ISRs before switching to the LMM mode and calling
   372                             ;        functions that require on it.
   373                             ;
   374                             ; INPUT: none
   375                             ;
   376                             ;  USES: CPU 'A' register
   377                             ;
   378                             ;  COST: 45 instruction cycles (in LMM only)
   379                          
   380                             macro ISR_PRESERVE_PAGE_POINTERS
   381                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   382                                REG_PRESERVE CUR_PP
   383                                REG_PRESERVE IDX_PP
   384                                REG_PRESERVE MVR_PP
   385                                REG_PRESERVE MVW_PP
   386                             ENDIF
   387  3C51                       endm
   388                          
   389                             ;-----------------------------------------------
   390                             ;  Restore Volatile Page Pointer Registers
   391                             ;-----------------------------------------------
   392                             ;
   393                             ;  DESC: Undo for RAM_PRESERVE_PAGE_POINTERS macro. Invoked by ISRs after
   394                             ;        calling functions that run in the LMM mode and before executing
   395                             ;        the RETI instruction.
   396                             ;
   397                             ; INPUT: none
   398                             ;
   399                             ;  USES: CPU 'A' register
   400                             ;
   401                             ;  COST: 50 instruction cycles (in LMM only)
   402                          
   403                             macro ISR_RESTORE_PAGE_POINTERS
   404                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   405                                REG_RESTORE MVW_PP
   406                                REG_RESTORE MVR_PP
   407                                REG_RESTORE IDX_PP
   408                                REG_RESTORE CUR_PP
   409                             ENDIF
   410                             endm
      + 3C51                    
      + 3C51                    ; end of file Memory.inc
      + 3C51                    ;;*****************************************************************************
;;******************
      +                         ***********************************************************
;;  FILENAME: Timer16.inc
;;   Version: 
      +                         2.6, Updated on 2013/5/19 at 10:44:39
;;  Generated by PSoC Designer 5.4.2946
;;
;;  DESCRIPTION: As
      +                         sembler declarations for the Timer16 user module interface
;;---------------------------------------
      +                         --------------------------------------
;;  Copyright (c) Cypress Semiconductor 2013. All Rights Rese
      +                         rved.
;;*****************************************************************************
;;************
      +                         *****************************************************************
   824                          
   825                          ; end of file m8c.inc
    29  00C0                    FLAG_PGMODE_MASK:  equ 0C0h     ; Paging control for > 256 bytes of RAM
    30  0000                    FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
    31  0040                    FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
    32  0080                    FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
    33  00C0                    FLAG_PGMODE_3:     equ 0C0h       ; Direct to CUR_PP page, indexed to STK_PP page
    34  0000                    FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
    35  0040                    FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
    36  0080                    FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
    37  00C0                    FLAG_PGMODE_11b:   equ 0C0h       ; Same as PGMODE_3
    38  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    39  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    40  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    41  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    42  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    43                          
    44                          
    45                          ;;=============================================================================
    46                          ;;      Register Space, Bank 0
    47                          ;;=============================================================================
    48                          
    49                          ;------------------------------------------------
    50                          ;  Port Registers
    51                          ;  Note: Also see this address range in Bank 1.
    52                          ;------------------------------------------------
    53                          ; Port 0
    54  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    55  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    56  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    57  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    58                          ; Port 1
    59  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    60  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    61  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    62  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    63                          ; Port 2
    64  0008                    PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
    65  0009                    PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
    66  000A                    PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
    67  000B                    PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
    68                          ; Port 3
    69  000C                    PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
    70  000D                    PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
    71  000E                    PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
    72  000F                    PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
    73                          ; Port 4
    74  0010                    PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
    75  0011                    PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
    76  0012                    PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
    77  0013                    PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
    78                          
    79                          ;------------------------------------------------
    80                          ;  Digital PSoC(tm) block Registers
    81                          ;  Note: Also see this address range in Bank 1.
    82                          ;------------------------------------------------
    83                          ; Digital PSoC block 00, Basic Type C
    84  0020                    DBC00DR0:     equ 20h          ; data register 0                          (#)
    85  0021                    DBC00DR1:     equ 21h          ; data register 1                          (W)
    86  0022                    DBC00DR2:     equ 22h          ; data register 2                          (RW)
    87  0023                    DBC00CR0:     equ 23h          ; control & status register 0              (#)
    88                          
    89                          ; Digital PSoC block 01, Basic Type C
    90  0024                    DBC01DR0:     equ 24h          ; data register 0                          (#)
    91  0025                    DBC01DR1:     equ 25h          ; data register 1                          (W)
    92  0026                    DBC01DR2:     equ 26h          ; data register 2                          (RW)
    93  0027                    DBC01CR0:     equ 27h          ; control & status register 0              (#)
    94                          
    95                          ; Digital PSoC block 02, Communications Type C
    96  0028                    DCC02DR0:     equ 28h          ; data register 0                          (#)
    97  0029                    DCC02DR1:     equ 29h          ; data register 1                          (W)
    98  002A                    DCC02DR2:     equ 2Ah          ; data register 2                          (RW)
    99  002B                    DCC02CR0:     equ 2Bh          ; control & status register 0              (#)
   100                          
   101                          ; Digital PSoC block 03, Communications Type C
   102  002C                    DCC03DR0:     equ 2Ch          ; data register 0                          (#)
   103  002D                    DCC03DR1:     equ 2Dh          ; data register 1                          (W)
   104  002E                    DCC03DR2:     equ 2Eh          ; data register 2                          (RW)
   105  002F                    DCC03CR0:     equ 2Fh          ; control & status register 0              (#)
   106                          
   107                          ; Digital PSoC block 10, Basic Type C
   108  0030                    DBC10DR0:     equ 30h          ; data register 0                          (#)
   109  0031                    DBC10DR1:     equ 31h          ; data register 1                          (W)
   110  0032                    DBC10DR2:     equ 32h          ; data register 2                          (RW)
   111  0033                    DBC10CR0:     equ 33h          ; control & status register 0              (#)
   112                          
   113                          ; Digital PSoC block 11, Basic Type C
   114  0034                    DBC11DR0:     equ 34h          ; data register 0                          (#)
   115  0035                    DBC11DR1:     equ 35h          ; data register 1                          (W)
   116  0036                    DBC11DR2:     equ 36h          ; data register 2                          (RW)
   117  0037                    DBC11CR0:     equ 37h          ; control & status register 0              (#)
   118                          
   119                          ; Digital PSoC block 12, Communications Type C
   120  0038                    DCC12DR0:     equ 38h          ; data register 0                          (#)
   121  0039                    DCC12DR1:     equ 39h          ; data register 1                          (W)
   122  003A                    DCC12DR2:     equ 3Ah          ; data register 2                          (RW)
   123  003B                    DCC12CR0:     equ 3Bh          ; control & status register 0              (#)
   124                          
   125                          ; Digital PSoC block 13, Communications Type C
   126  003C                    DCC13DR0:     equ 3Ch          ; data register 0                          (#)
   127  003D                    DCC13DR1:     equ 3Dh          ; data register 1                          (W)
   128  003E                    DCC13DR2:     equ 3Eh          ; data register 2                          (RW)
   129  003F                    DCC13CR0:     equ 3Fh          ; control & status register 0              (#)
   130                          
   131                          ;-------------------------------------
   132                          ;  Analog Control Registers
   133                          ;-------------------------------------
   134  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
   135  00C0                    AMX_IN_ACI3:          equ C0h    ; MASK: column 3 input mux
   136  0030                    AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
   137  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
   138  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
   139                          
   140  0061                    AMUX_CFG:      equ 61h          ; Analog MUX Configuration
   141  0030                    AMUX_CFG_INTCAP:       equ 30h    ;
   142  000E                    AMUX_CFG_MUXCLK:  	  equ 0Eh	 ;
   143  0001                    AMUX_CFG_EN:		  	  equ 01h	 ;
   144                          
   145                          ; old declarations DO NOT USE
   146  0061                    AMUXCFG:      equ 61h          ; Analog MUX Configuration
   147  0030                    AMUXCFG_INTCAP:       equ 30h    ;
   148  000E                    AMUXCFG_MUXCLK:  	  equ 0Eh	 ;
   149  0001                    AMUXCFG_EN:		  	  equ 01h	 ;
   150                          
   151  0062                    PWM_CR:       equ 62h          ; Pulse-Width Modulator Control
   152  0038                    PWM_CR_HIGH:          equ 38h    ; MASK: PWM high time
   153  0006                    PWM_CR_LOW:           equ 06h	 ; MASK: PWM low time
   154  0001                    PWM_CR_EN:            equ 01h	 ; MASK: Enable/Disable PWM function
   155                          
   156  0063                    ARF_CR:       equ 63h          ; Analog Reference Control
   157                          
   158  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus Register           (#)
   159  0080                    CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
   160  0040                    CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
   161  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
   162  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
   163  0008                    CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
   164  0004                    CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
   165  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
   166  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   167                          
   168  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   169  0020                    CMP_CR1_CLDIS1:       equ 20h    ; MASK: Column 1 comparator output latch
   170  0010                    CMP_CR1_CLDIS0:	      equ 10h    ; MASK: Column 0 comparator output latch
   171                          
   172  0068                    ADC0_CR:      equ 68h          ; Analog Column 0 Configuration
   173  0080                    ADC0_CR_CMPST:        equ 80h    ;
   174  0040                    ADC0_CR_LOREN:        equ 40h    ;
   175  0020                    ADC0_CR_SHEN:         equ 20h    ;
   176  0008                    ADC0_CR_CBSRC:        equ 08h    ;
   177  0004                    ADC0_CR_ADCM:         equ 04h    ;
   178  0001                    ADC0_CR_EN:	          equ 01h    ;
   179                          
   180  0069                    ADC1_CR:      equ 69h          ; Analog Column 1 Configuration
   181  0080                    ADC1_CR_CMPST:        equ 80h    ;
   182  0040                    ADC1_CR_LOREN:        equ 40h    ;
   183  0020                    ADC1_CR_SHEN:         equ 20h    ;
   184  0008                    ADC1_CR_CBSRC:        equ 08h    ;
   185  0004                    ADC1_CR_ADCM:         equ 04h    ;
   186  0001                    ADC1_CR_EN:	          equ 01h    ;
   187                          
   188                          ; Continuous Time PSoC block Type E Row 0 Col 0
   189  0072                    ACE00CR1:     equ 72h          ; Control register 1                       (RW)
   190  0073                    ACE00CR2:     equ 73h          ; Control register 2                       (RW)
   191                          
   192                          ; Continuous Time PSoC block Type E Row 0 Col 1
   193  0076                    ACE01CR1:     equ 76h          ; Control register 1                       (RW)
   194  0077                    ACE01CR2:     equ 77h          ; Control register 2                       (RW)
   195                          
   196                          ; Switched Cap PSoC blockType E Row 1 Col 0
   197  0080                    ASE10CR0:     equ 80h          ; Control register 0                       (RW)
   198                          
   199                          ; Switched Cap PSoC blockType E Row 1 Col 1
   200  0084                    ASE11CR0:     equ 84h          ; Control register 0                       (RW)
   201                          
   202                          ;-----------------------------------------------
   203                          ;  Global General Purpose Data Registers
   204                          ;-----------------------------------------------
   205  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   206  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   207  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   208  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   209                          
   210                          ;------------------------------------------------
   211                          ;  Row Digital Interconnects
   212                          ;
   213                          ;  Note: the following registers are mapped into
   214                          ;  both register bank 0 AND register bank 1.
   215                          ;------------------------------------------------
   216                          
   217  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   218  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   219  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   220  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   221  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   222  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   223  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   224                          
   225  00B8                    RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
   226  00B9                    RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
   227  00BA                    RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
   228  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   229  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   230  00BD                    RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
   231  00BE                    RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
   232                          
   233                          ;-----------------------------------------------
   234                          ;  Ram Page Pointers
   235                          ;-----------------------------------------------
   236  00D0                    CUR_PP:      equ 0D0h           ; Current   Page Pointer
   237  00D1                    STK_PP:      equ 0D1h           ; Stack     Page Pointer
   238  00D3                    IDX_PP:      equ 0D3h           ; Index     Page Pointer
   239  00D4                    MVR_PP:      equ 0D4h           ; MVI Read  Page Pointer
   240  00D5                    MVW_PP:      equ 0D5h           ; MVI Write Page Pointer
   241                          
   242                          ;------------------------------------------------
   243                          ;  I2C Configuration Registers
   244                          ;------------------------------------------------
   245  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   246  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   247  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   248  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   249  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   250  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   251  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   252  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   253  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   254  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   255                          
   256  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   257  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   258  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   259  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   260  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   261  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   262  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   263  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   264  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   265                          
   266  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   267                          
   268  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   269  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   270  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   271  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   272  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   273                          
   274                          ;------------------------------------------------
   275                          ;  System and Global Resource Registers
   276                          ;------------------------------------------------
   277  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   278                                                         ; Use INT_MSK0 bit field masks
   279  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   280                                                         ; Use INT_MSK1 bit field masks
   281  00DC                    INT_CLR2:     equ 0DCh          ; Interrupt Clear Register 2               (RW)
   282                                                         ; Use INT_MSK2 bit field masks
   283  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   284                                                         ; Use INT_MSK3 bit field masks
   285                          
   286  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   287  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   288  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   289                          
   290  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   291  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   292  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   293  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   294  0010                    INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
   295  0008                    INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
   296  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   297  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   298  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   299                          
   300  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   301  0080                    INT_MSK1_DCC13:            equ 80h ; MASK: enable/disable DCC13 block interrupt
   302  0040                    INT_MSK1_DCC12:            equ 40h ; MASK: enable/disable DCC12 block interrupt
   303  0020                    INT_MSK1_DBC11:            equ 20h ; MASK: enable/disable DBC11 block interrupt
   304  0010                    INT_MSK1_DBC10:            equ 10h ; MASK: enable/disable DBC10 block interrupt
   305  0008                    INT_MSK1_DCC03:            equ 08h ; MASK: enable/disable DCC03 block interrupt
   306  0004                    INT_MSK1_DCC02:            equ 04h ; MASK: enable/disable DCC02 block interrupt
   307  0002                    INT_MSK1_DBC01:            equ 02h ; MASK: enable/disable DBC01 block interrupt
   308  0001                    INT_MSK1_DBC00:            equ 01h ; MASK: enable/disable DBC00 block interrupt
   309                          
   310  00DF                    INT_MSK2:     equ DFh			; Custom block Mask Register			   (RW)
   311  0010                    INT_MSK2_SARADC:           equ 10h ; MASK: enable/disable SARADC block interrupt
   312  0020                    INT_MSK2_CSD0:             equ 20h ; MASK: enable/disable CSD0 block interrupt
   313  0040                    INT_MSK2_CSD1:             equ 40h ; MASK: enable/disable CSD1 block interrupt
   314  0080                    INT_MSK2_RTC:              equ 80h ; MASK: enable/disable RTC block interrupt
   315                          
   316  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   317  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   318                          
   319                          ;------------------------------------------------------
   320                          ;  MAC Registers
   321                          ;------------------------------------------------------
   322                          
   323  00E8                    MUL0_X:       equ 0E8h          ; Multiply Input X Register                (W)
   324  00E9                    MUL0_Y:       equ 0E9h          ; Multiply Input Y Register                (W)
   325  00EA                    MUL0_DH:      equ 0EAh          ; Multiply Result High Byte Register       (R)
   326  00EB                    MUL0_DL:      equ 0EBh          ; Multiply Result Low Byte Register        (R)
   327                          
   328  00EC                    ACC0_DR1:     equ 0ECh          ; Accumulator Data Register 1              (RW)
   329  00ED                    ACC0_DR0:     equ 0EDh          ; Accumulator Data Register 0              (RW)
   330  00EE                    ACC0_DR3:     equ 0EEh          ; Accumulator Data Register 3              (RW)
   331  00EF                    ACC0_DR2:     equ 0EFh          ; Accumulator Data Register 2              (RW)
   332                          
   333                          ; DECIMATOR Control Registers
   334  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   335  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   336                          
   337                          ;------------------------------------------------------
   338                          ;  System Status and Control Registers
   339                          ;
   340                          ;  Note: The following registers are mapped into both
   341                          ;        register bank 0 AND register bank 1.
   342                          ;------------------------------------------------------
   343  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   344                                                             ; Use FLAG_ masks defined at top of file
   345                          
   346  00FD                    DAC_D:        equ 0FDh		   ; DAC Data Register                        (RW)
   347                          
   348  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   349  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: flag, Internal Reset Status bit
   350  0010                    CPU_SCR1_SLIMO:         equ 10h	   ; MASK: Slow IMO (internal main osc) enable
   351  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   352  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   353  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   354                          
   355  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   356  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   357  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   358  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   359  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   360  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   361                          
   362                          ;------------------------------------------------------
   363                          ;  Neon Capsense Digital Control Registers
   364                          ;------------------------------------------------------
   365  0050                    CSD0_DR0_L:				equ 50h		; Capsense 0 data low 0				(RW)
   366  0054                    CSD0_DR0_H:				equ 54h		; Capsense 0 data high 0			(RW)
   367  0058                    CSD1_DR0_L:				equ 58h		; Capsense 1 data low 0				(RW)
   368  005C                    CSD1_DR0_H:				equ 5Ch		; Capsense 1 data high 0			(RW)
   369  0051                    CSD0_DR1_L:				equ 51h		; Capsense 0 data low 1				(RW)
   370  0055                    CSD0_DR1_H:				equ 55h		; Capsense 0 data high 1			(RW)
   371  0059                    CSD1_DR1_L:				equ 59h		; Capsense 1 data low 1				(RW)
   372  005D                    CSD1_DR1_H:				equ 5Dh		; Capsense 1 data high 1			(RW)
   373  0052                    CSD0_CNT_L:				equ 52h		; Capsense 0 counter low			(RW)
   374  0056                    CSD0_CNT_H:				equ 56h		; Capsense 0 counter high			(RW)
   375  005A                    CSD1_CNT_L:				equ 5Ah		; Capsense 1 counter low			(RW)
   376  005E                    CSD1_CNT_H:				equ	5Eh		; Capsense 1 counter high			(RW)
   377  0053                    CSD0_CR0:				equ 53h		; Capsense 0 control 0				(RW)
   378  005B                    CSD1_CR0:				equ 5Bh		; Capsense 1 control 0				(RW)
   379  0057                    CSD0_CR1:				equ 57h		; Capsense 0 control 1				(RW)
   380  005F                    CSD1_CR1:				equ 5Fh		; Capsense 1 control 1				(RW)
   381                          
   382                          ;------------------------------------------------------
   383                          ;  Neon Analog Registers
   384                          ;------------------------------------------------------
   385  0065                    ASY_CR:					equ 65h		; Analog Synchronization Control	(RW)
   386  006A                    ADC_DH:					equ 6Ah		; ADC data high						(RW)
   387  006B                    ADC_DL:					equ 6Bh		; ADC data low						(RW)
   388  00C8                    PWMVREF0:				equ C8h		; PWM Voltage Reference 0			(RW)
   389  00C9                    PWMVREF1:				equ C9h		; PWM Voltage Reference 1			(RW)
   390  00CB                    PWMSRC:					equ CBh		; PWM Source						(RW)
   391  00CA                    IDACMODE:				equ CAh		; IDAC Mode							(RW)
   392  00FC                    IDACR_D:				equ FCh		; Analog Mux DAC data 0				(RW)
   393  00FD                    IDACL_D:				equ FDh		; Analog Mux DAC data 1				(RW)
   394                          
   395                          ;------------------------------------------------------
   396                          ;  Neon Digital Registers
   397                          ;------------------------------------------------------
   398  00B7                    RDI0DSM:				equ B7h		; Row Digital Interconnect input select 0	(RW)
   399  00BF                    RDI1DSM:				equ BFh		; Row Digital Interconnect input select 1	(RW)
   400                          
   401                          ;------------------------------------------------------
   402                          ;  Neon Test Registers
   403                          ;------------------------------------------------------
   404  00CC                    TSCR0:					equ CCh		; Tsource 0							(RW)
   405  00CD                    TSCMPH:					equ CDh		; TSCMP high						(RW)
   406  00CE                    TSCMPL:					equ CEh		; TSCMP low							(RW)
   407  00CF                    TSCR1:					equ CFh		; Tsource 1							(RW)
   408                          
   409                          ;;=============================================================================
   410                          ;;      Register Space, Bank 1
   411                          ;;=============================================================================
   412                          
   413                          ;------------------------------------------------
   414                          ;  Port Registers
   415                          ;  Note: Also see this address range in Bank 0.
   416                          ;------------------------------------------------
   417                          ; Port 0
   418  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   419  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   420  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   421  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   422                          
   423                          ; Port 1
   424  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   425  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   426  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   427  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   428                          
   429                          ; Port 2
   430  0008                    PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
   431  0009                    PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
   432  000A                    PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
   433  000B                    PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
   434                          
   435                          ; Port 3
   436  000C                    PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
   437  000D                    PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
   438  000E                    PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
   439  000F                    PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
   440                          
   441                          ; Port 4
   442  0010                    PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
   443  0011                    PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
   444  0012                    PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
   445  0013                    PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
   446                          
   447                          ;------------------------------------------------
   448                          ;  Digital PSoC(tm) block Registers
   449                          ;  Note: Also see this address range in Bank 0.
   450                          ;------------------------------------------------
   451                          
   452                          ; Digital PSoC block 00, Basic Type C
   453  0020                    DBC00FN:      equ 20h          ; Function Register                        (RW)
   454  0021                    DBC00IN:      equ 21h          ;    Input Register                        (RW)
   455  0022                    DBC00OU:      equ 22h          ;   Output Register                        (RW)
   456  0023                    DBC00CR1:     equ 23h          ;   control & status register 1            (RW)
   457                          
   458                          ; Digital PSoC block 01, Basic Type C
   459  0024                    DBC01FN:      equ 24h          ; Function Register                        (RW)
   460  0025                    DBC01IN:      equ 25h          ;    Input Register                        (RW)
   461  0026                    DBC01OU:      equ 26h          ;   Output Register                        (RW)
   462  0027                    DBC01CR1:     equ 27h          ;   control & status register 1            (RW)
   463                          
   464                          ; Digital PSoC block 02, Communications Type C
   465  0028                    DCC02FN:      equ 28h          ; Function Register                        (RW)
   466  0029                    DCC02IN:      equ 29h          ;    Input Register                        (RW)
   467  002A                    DCC02OU:      equ 2Ah          ;   Output Register                        (RW)
   468  002B                    DBC02CR1:     equ 2Bh          ;   control & status register 1            (RW)
   469                          
   470                          ; Digital PSoC block 03, Communications Type C
   471  002C                    DCC03FN:      equ 2Ch          ; Function Register                        (RW)
   472  002D                    DCC03IN:      equ 2Dh          ;    Input Register                        (RW)
   473  002E                    DCC03OU:      equ 2Eh          ;   Output Register                        (RW)
   474  0029                    DBC03CR1:     equ 29h          ;   control & status register 1            (RW)
   475                          
   476                          ; Digital PSoC block 10, Basic Type C
   477  0030                    DBC10FN:      equ 30h          ; Function Register                        (RW)
   478  0031                    DBC10IN:      equ 31h          ;    Input Register                        (RW)
   479  0032                    DBC10OU:      equ 32h          ;   Output Register                        (RW)
   480  0033                    DBC10CR1:     equ 33h          ;   control & status register 1            (RW)
   481                          
   482                          ; Digital PSoC block 11, Basic Type C
   483  0034                    DBC11FN:      equ 34h          ; Function Register                        (RW)
   484  0035                    DBC11IN:      equ 35h          ;    Input Register                        (RW)
   485  0036                    DBC11OU:      equ 36h          ;   Output Register                        (RW)
   486  0037                    DBC11CR1:     equ 37h          ;   control & status register 1            (RW)
   487                          
   488                          ; Digital PSoC block 12, Communications Type C
   489  0038                    DCC12FN:      equ 38h          ; Function Register                        (RW)
   490  0039                    DCC12IN:      equ 39h          ;    Input Register                        (RW)
   491  003A                    DCC12OU:      equ 3Ah          ;   Output Register                        (RW)
   492  003B                    DBC12CR1:     equ 3Bh          ;   control & status register 1            (RW)
   493                          
   494                          ; Digital PSoC block 13, Communications Type C
   495  003C                    DCC13FN:      equ 3Ch          ; Function Register                        (RW)
   496  003D                    DCC13IN:      equ 3Dh          ;    Input Register                        (RW)
   497  003E                    DCC13OU:      equ 3Eh          ;   Output Register                        (RW)
   498  003F                    DBC13CR1:     equ 3Fh          ;   control & status register 1            (RW)
   499                          
   500                          ;------------------------------------------------
   501                          ;  System and Global Resource Registers
   502                          ;  Note: Also see this address range in Bank 0.
   503                          ;------------------------------------------------
   504                          
   505  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   506  00C0                    CLK_CR0_ACOLUMN_3:    equ C0h    ; MASK: Specify clock for analog cloumn
   507  0030                    CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
   508  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   509  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   510                          
   511  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   512  0018                    CLK_CR1_ACLK1:        equ 18h    ; MASK: Digital PSoC block for analog source
   513  0003                    CLK_CR1_ACLK0:        equ 03h    ; MASK: Digital PSoC block for analog source
   514                          
   515  0003                    CLK_CR1_ACLK2:        equ 03h    ; Deprecated do not use
   516                          
   517  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   518  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   519                          
   520  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   521  000F                    AMD_CR0_AMOD0:        equ 0Fh    ; MASK: Modulation source for analog column 0
   522                          
   523  0064                    CMP_GO_EN:    equ 64h          ; Comparator Bus To Global Out Enable      (RW)
   524  0080                    CMP_GO_EN_GOO5:       equ 80h    ; MASK: Selected Col 1 signal to GOO5
   525  0040                    CMP_GO_EN_GOO1:       equ 40h    ; MASK: Selected Col 1 signal to GOO1
   526  0030                    CMP_GO_EN_SEL1:       equ 30h    ; MASK: Column 1 Signal Select
   527  0008                    CMP_GO_EN_GOO4:       equ 08h    ; MASK: Selected Col 0 signal to GOO4
   528  0004                    CMP_GO_EN_GOO0:       equ 04h    ; MASK: Selected Col 0 signal to GOO0
   529  0003                    CMP_GO_EN_SEL0:       equ 03h    ; MASK: Column 0 Signal Select
   530                          
   531  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   532  000F                    AMD_CR1_AMOD1:        equ 0Fh    ; MASK: Modulation ctrl for analog column 1
   533                          
   534  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   535  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   536  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   537                          
   538  006B                    CLK_CR3:      equ 6Bh          ; Analog Clock Source Control Register 3   (RW)
   539  0040                    CLK_CR3_SYS1:         equ 40h    ; MASK: Analog Clock 1 selection
   540  0030                    CLK_CR3_DIVCLK1:      equ 30h    ; MASK: Analog Clock 1 divider
   541  0004                    CLK_CR3_SYS0:         equ 04h    ; MASK: Analog Clock 0 selection
   542  0003                    CLK_CR3_DIVCLK0:      equ 03h    ; MASK: Analog Clock 0 divider
   543                          
   544                          ;------------------------------------------------
   545                          ;  Global Digital Interconnects
   546                          ;------------------------------------------------
   547                          
   548  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   549  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   550  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   551  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   552                          
   553  00A0                    GDI_O_IN_CR:  equ 0A0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   554  00A1                    GDI_E_IN_CR:  equ 0A1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   555  00A2                    GDI_O_OU_CR:  equ 0A2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   556  00A3                    GDI_E_OU_CR:  equ 0A3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   557                          
   558  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   559  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   560                          
   561                          ;------------------------------------------------
   562                          ;  Analog Mux Bus Port Enable Bits
   563                          ;------------------------------------------------
   564  00D8                    MUX_CR0:      equ 0D8h          ; Analog Mux Port 0 Bit Enables Register
   565  00D9                    MUX_CR1:      equ 0D9h          ; Analog Mux Port 1 Bit Enables Register
   566  00DA                    MUX_CR2:      equ 0DAh          ; Analog Mux Port 2 Bit Enables Register
   567  00DB                    MUX_CR3:      equ 0DBh          ; Analog Mux Port 3 Bit Enables Register
   568  00EC                    MUX_CR4:      equ 0ECh          ; Analog Mux Port 4 Bit Enables Register
   569                          
   570                          ;------------------------------------------------
   571                          ;  Clock and System Control Registers
   572                          ;------------------------------------------------
   573                          
   574  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   575  0080                    OSC_GO_EN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   576  0040                    OSC_GO_EN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   577  0020                    OSC_GO_EN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   578  0010                    OSC_GO_EN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   579  0008                    OSC_GO_EN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   580  0004                    OSC_GO_EN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   581  0002                    OSC_GO_EN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   582  0001                    OSC_GO_EN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   583                          
   584  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   585  0003                    OSC_CR4_VC3SEL:       equ 03h    ; MASK: System VC3 Clock source
   586                          
   587  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   588                          
   589  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   590  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   591  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   592  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   593  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   594  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   595  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   596  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   597  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   598  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   599  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   600  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   601  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   602  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   603  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   604  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   605  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   606  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   607                          
   608  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   609  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   610  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   611                          
   612  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   613  0080                    OSC_CR2_PLLGAIN:      equ 80h    ; MASK: High/Low gain
   614  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   615  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   616  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   617                          
   618  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   619  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   620  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   621  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   622  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   623  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   624  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   625  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   626                          
   627  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   628  0008                    VLT_CMP_NOWRITE:      equ 08h    ; MASK: Vcc below Flash Write level
   629  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   630  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   631  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   632                          
   633  00E5                    ADC0_TR:      equ 0E5h          ; ADC Column 0 Trim Register
   634  00E6                    ADC1_TR:      equ 0E6h          ; ADC Column 1 Trim Register
   635                          
   636  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   637  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   638  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   639  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   640                          
   641  00FA                    FLS_PR1:      equ 0FAh          ; Flash Program Register 1                 (RW)
   642  0003                    FLS_PR1_BANK:         equ 03h    ; MASK: Select Active Flash Bank
   643                          
   644  00FD                    DAC_CR0:       equ 0FDh          ; Analog Mux DAC Control Register 0
   645  00DC                    DAC_CR1:       equ 0DCh          ; Analog Mux DAC Control Register 1
   646  0008                    DAC_CR_IRANGE:        equ 08h    ; MASK: Sets the DAC Range low or high
   647  0006                    DAC_CR_OSCMODE:       equ 06h    ; MASK: Defines the reset mode for AMux
   648  0001                    DAC_CR_ENABLE:        equ 01h    ; MASK: Enable/Disable DAC function
   649                          
   650                          ;------------------------------------------------
   651                          ;  I2C Control Registers
   652                          ;------------------------------------------------
   653                          
   654  00AD                    I2C_ADDR:    equ 0ADh          ; I2C Address Register (RW)
   655                          
   656                          ;------------------------------------------------------
   657                          ;  Neon Analog Registers
   658                          ;------------------------------------------------------
   659  0053                    VDAC50CR0:		equ 53h			; V DAC5 control 0				(RW)
   660  0057                    VDAC51CR0:		equ 57h			; V DAC5 control 1				(RW)
   661  00A8                    ADC_CR0:		equ A8h			; ADC control 0					(RW)
   662  00A9                    ADC_CR1:		equ A9h			; ADC control 1					(RW)
   663  00AA                    ADC_CR2:		equ AAh			; ADC control 2					(RW)
   664  00AB                    ADC_CR3TRIM:	equ ABh			; ADC control 3					(RW)
   665  00AC                    ADC_CR4:		equ ACh			; ADC control 4					(RW)
   666  00E7                    VDAC_TRIM:		equ E7h			; V DAC trim					(RW)
   667                          
   668                          ;------------------------------------------------------
   669                          ;  Neon Current Sense CMP Registers
   670                          ;------------------------------------------------------
   671  0050                    CMP0CR1:		equ 50h			; CMP0 control 1				(RW)
   672  0051                    CMP0CR2:		equ 51h			; CMP0 control 2				(RW)
   673  0054                    CMP1CR1:		equ 54h			; CMP1 control 1				(RW)
   674  0055                    CMP1CR2:		equ 55h			; CMP1 control 2				(RW)
   675  0058                    CSCMPCR0:		equ 58h			; CSCMP control 0				(RW)
   676  0059                    CSCMPGOEN:		equ 59h			; CSCMO global out enable		(RW)
   677  005A                    CSLUTCR0:		equ 5Ah			; CSLUT control 0				(RW)
   678  005B                    CMPCOLMUX:		equ 5Bh			; CMP Column Mux				(RW)
   679  005C                    CMPPWMCR:		equ 5Ch			; CMP PWM control				(RW)
   680  005D                    CMPFLTCR:		equ 5Dh			; CMP filter control			(RW)
   681  005E                    CMPCLK1:		equ 5Eh			; CMP clock 1					(RW)
   682  005F                    CMPCLK0:		equ 5Fh			; CMP clock 0					(RW)
   683                          
   684                          ;------------------------------------------------------
   685                          ;  Neon Real Time Clock Registers
   686                          ;------------------------------------------------------
   687  00A4                    RTCH:			equ A4h			; Real time current hour		(RW)
   688  00A5                    RTCM:			equ A5h			; Real time current minute		(RW)
   689  00A6                    RTCS:			equ A6h			; Real time current second		(RW)
   690  00A7                    RTCCR:			equ A7h			; Real time clock control		(RW)
   691                          
   692                          ;------------------------------------------------------
   693                          ;  Analog MUX Config Registers
   694                          ;------------------------------------------------------
   695                          
   696  006A                    AMUX_CFG1:			equ 6Ah  ; Analog MUX Configuration 1
   697  0020                    AMUX_CFG1_GOINVR:	equ 20h  ;
   698  0010                    AMUX_CFG1_GOINVL:  	equ 10h	 ;
   699  000C                    AMUX_CFG1_AMUXMODR:	equ 0Ch	 ;
   700  0003                    AMUX_CFG1_AMUXMODL:	equ 03h	 ;
   701                          
   702                          ;;=============================================================================
   703                          ;;      M8C System Macros
   704                          ;;  These macros should be used when their functions are needed.
   705                          ;;=============================================================================
   706                          
   707                          ;----------------------------------------------------
   708                          ;  Swapping Register Banks
   709                          ;----------------------------------------------------
   710                              macro M8C_SetBank0
   711                              and   F, ~FLAG_XIO_MASK
   712  3C51                        endm
   713                          
   714                              macro M8C_SetBank1
   715                              or    F, FLAG_XIO_MASK
   716  3C51                        endm
   717                          
   718                          ;----------------------------------------------------
   719                          ;  Global Interrupt Enable/Disable
   720                          ;----------------------------------------------------
   721                              macro M8C_EnableGInt
   722                              or    F, FLAG_GLOBAL_IE
   723  3C51                        endm
   724                          
   725                              macro M8C_DisableGInt
   726                              and   F, ~FLAG_GLOBAL_IE
   727  3C51                        endm
   728                          
   729                          ;----------------------------------------------------
   730                          ;  Enable/Disable Interrupt Mask
   731                          ;
   732                          ;  Use the following macros to enable/disable
   733                          ;  bits in the Interrupt mask registers,
   734                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   735                          ;
   736                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   737                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   738                          ;
   739                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   740                          ;        and MASK is the bit set to enable or disable
   741                          ;----------------------------------------------------
   742                          ; Disable Interrupt Bit Mask(s)
   743                              macro M8C_DisableIntMask
   744                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   745  3C51                        endm
   746                          
   747                          ; Enable Interrupt Bit Mask(s)
   748                              macro M8C_EnableIntMask
   749                              or    reg[@0], @1               ; enable specified interrupt enable bit
   750  3C51                        endm
   751                          
   752                          ;----------------------------------------------------
   753                          ;  Clear Posted Interrupt Flag Mask
   754                          ;
   755                          ;  Use the following macros to clear the
   756                          ;  bits in the Interrupt Clear registers,
   757                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   758                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   759                          ;
   760                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   761                          ;        and MASK is the bit set to enable or disable
   762                          ;----------------------------------------------------
   763                              macro M8C_ClearIntFlag
   764                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   765  3C51                        endm
   766                          
   767                          ;----------------------------------------------------
   768                          ;  Power-On Reset & WatchDog Timer Functions
   769                          ;----------------------------------------------------
   770                              macro M8C_EnableWatchDog
   771                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   772  3C51                        endm
   773                          
   774                              macro M8C_ClearWDT
   775                              mov   reg[RES_WDT], 00h
   776  3C51                        endm
   777                          
   778                              macro M8C_ClearWDTAndSleep
   779                              mov   reg[RES_WDT], 38h
   780  3C51                        endm
   781                          
   782                          ;----------------------------------------------------
   783                          ;  Sleep, CPU Stop & Software Reset
   784                          ;----------------------------------------------------
   785                              macro M8C_Sleep
   786                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   787                              ; The next instruction to be executed depends on the state of the
   788                              ; various interrupt enable bits. If some interrupts are enabled
   789                              ; and the global interrupts are disabled, the next instruction will
   790                              ; be the one that follows the invocation of this macro. If global
   791                              ; interrupts are also enabled then the next instruction will be
   792                              ; from the interrupt vector table. If no interrupts are enabled
   793                              ; then the CPU sleeps forever.
   794  3C51                        endm
   795                          
   796                              macro M8C_Stop
   797                              ; In general, you probably don't want to do this, but here's how:
   798                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   799                              ; Next instruction to be executed is located in the interrupt
   800                              ; vector table entry for Power-On Reset.
   801  3C51                        endm
   802                          
   803                              macro M8C_Reset
   804                              ; Restore CPU to the power-on reset state.
   805                              mov A, 0
   806                              SSC
   807                              ; Next non-supervisor instruction will be at interrupt vector 0.
   808  3C51                        endm
   809                          
   810                          ;----------------------------------------------------
   811                          ; ImageCraft Code Compressor Actions
   812                          ;----------------------------------------------------
   813                              ; Suspend Code Compressor
   814                              ; Must not span a RET or RETI instruction
   815                              ; without resuming code compression
   816                              macro Suspend_CodeCompressor
   817                              or   F, 0
   818  3C51                        endm
   819                          
   820                              ; Resume Code Compression
   821                              macro Resume_CodeCompressor
   822                              add  SP, 0
   823  3C51                        endm
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  FILENAME: Timer16.inc
     4                          ;;   Version: 2.6, Updated on 2013/5/19 at 10:44:39
     5                          ;;  Generated by PSoC Designer 5.4.2946
     6                          ;;
     7                          ;;  DESCRIPTION: Assembler declarations for the Timer16 user module interface
     8                          ;;-----------------------------------------------------------------------------
     9                          ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
    10                          ;;*****************************************************************************
    11                          ;;*****************************************************************************
    12                          
    13                          include "m8c.inc"
    14                          
    15                          
    16                          ;--------------------------------------------------
    17                          ; Constants for Timer16 API's.
    18                          ;--------------------------------------------------
    19                          
    20  0001                    Timer16_CONTROL_REG_START_BIT:             equ 0x01    ; Control register start bit
    21  00E1                    Timer16_INT_REG:                           equ 0x0e1
    22  0002                    Timer16_INT_MASK:                          equ 0x02
    23                          
    24                          
    25                          ;--------------------------------------------------
    26                          ; Constants for Timer16 user defined values
    27                          ;--------------------------------------------------
    28                          
    29  2580                    Timer16_PERIOD:                            equ 0x2580
    30  2328                    Timer16_COMPARE_VALUE:                     equ 0x2328
    31                          
    32                          
    33                          ;--------------------------------------------------
    34                          ; Register Address Constants for Timer16
    35                          ;--------------------------------------------------
    36                          
    37  0020                    Timer16_COUNTER_LSB_REG:               equ 0x20   ; DR0 Counter register
    38  0024                    Timer16_COUNTER_MSB_REG:               equ 0x24
    39  0021                    Timer16_PERIOD_LSB_REG:                equ 0x21   ; DR1 Period register
    40  0025                    Timer16_PERIOD_MSB_REG:                equ 0x25
    41  0022                    Timer16_COMPARE_LSB_REG:               equ 0x22   ; DR2 CompareValue register
    42  0026                    Timer16_COMPARE_MSB_REG:               equ 0x26
    43  0023                    Timer16_CONTROL_LSB_REG:               equ 0x23   ; Control register
    44  0027                    Timer16_CONTROL_MSB_REG:               equ 0x27
    45  0020                    Timer16_FUNC_LSB_REG:                  equ 0x20   ; Function register
    46  0024                    Timer16_FUNC_MSB_REG:                  equ 0x24
    47  0021                    Timer16_INPUT_LSB_REG:                 equ 0x21   ; Input register
    48  0025                    Timer16_INPUT_MSB_REG:                 equ 0x25
    49  0022                    Timer16_OUTPUT_LSB_REG:                equ 0x22   ; Output register
    50  0026                    Timer16_OUTPUT_MSB_REG:                equ 0x26
    51                          
    52                          
    53                          ;--------------------------------------------------
    54                          ; Timer16 Macro 'Functions'
    55                          ;--------------------------------------------------
    56                          
    57                             macro Timer16_Start_M
    58                             or    reg[Timer16_CONTROL_LSB_REG],  Timer16_CONTROL_REG_START_BIT
    59  3C51                       endm
    60                          
    61                             macro Timer16_Stop_M
    62                             and   reg[Timer16_CONTROL_LSB_REG], ~Timer16_CONTROL_REG_START_BIT
    63  3C51                       endm
    64                          
    65                             macro Timer16_EnableInt_M
    66                             M8C_EnableIntMask Timer16_INT_REG, Timer16_INT_MASK
    67  3C51                       endm
    68                          
    69                             macro Timer16_DisableInt_M
    70                             M8C_DisableIntMask Timer16_INT_REG, Timer16_INT_MASK
    71  3C51                       endm
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  FILENAME: Timer16.asm
     4                          ;;   Version: 2.6, Updated on 2013/5/19 at 10:44:39
     5                          ;;  Generated by PSoC Designer 5.4.2946
     6                          ;;
     7                          ;;  DESCRIPTION: Timer16 User Module software implementation file
     8                          ;;
     9                          ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
    10                          ;;        arguments and observe the associated "Registers are volatile" policy.
    11                          ;;        This means it is the caller's responsibility to preserve any values
    12                          ;;        in the X and A registers that are still needed after the API functions
    13                          ;;        returns. For Large Memory Model devices it is also the caller's 
    14                          ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
    15                          ;;        MVW_PP registers. Even though some of these registers may not be modified
    16                          ;;        now, there is no guarantee that will remain the case in future releases.
    17                          ;;-----------------------------------------------------------------------------
    18                          ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
    19                          ;;*****************************************************************************
    20                          ;;*****************************************************************************
    21                          
    22                          include "m8c.inc"
    23                          include "memory.inc"
    24                          include "Timer16.inc"
    25                          
    26                          ;-----------------------------------------------
    27                          ;  Global Symbols
    28                          ;-----------------------------------------------
    29                          export  Timer16_EnableInt
    30                          export _Timer16_EnableInt
    31                          export  Timer16_DisableInt
    32                          export _Timer16_DisableInt
    33                          export  Timer16_Start
    34                          export _Timer16_Start
    35                          export  Timer16_Stop
    36                          export _Timer16_Stop
    37                          export  Timer16_WritePeriod
    38                          export _Timer16_WritePeriod
    39                          export  Timer16_WriteCompareValue
    40                          export _Timer16_WriteCompareValue
    41                          export  Timer16_wReadCompareValue
    42                          export _Timer16_wReadCompareValue
    43                          export  Timer16_wReadTimer
    44                          export _Timer16_wReadTimer
    45                          export  Timer16_wReadTimerSaveCV
    46                          export _Timer16_wReadTimerSaveCV
    47                          
    48                          ; The following functions are deprecated and subject to omission in future releases
    49                          ;
    50                          export  wTimer16_ReadCompareValue  ; deprecated
    51                          export _wTimer16_ReadCompareValue  ; deprecated
    52                          export  wTimer16_ReadTimer         ; deprecated
    53                          export _wTimer16_ReadTimer         ; deprecated
    54                          export  wTimer16_ReadTimerSaveCV   ; deprecated
    55                          export _wTimer16_ReadTimerSaveCV   ; deprecated
    56                          
    57                          export  wTimer16_ReadCounter       ; obsolete
    58                          export _wTimer16_ReadCounter       ; obsolete
    59                          export  wTimer16_CaptureCounter    ; obsolete
    60                          export _wTimer16_CaptureCounter    ; obsolete
    61                          
    62                          
    63                          AREA led_display_RAM (RAM,REL)
    64                          
    65                          ;-----------------------------------------------
    66                          ;  Constant Definitions
    67                          ;-----------------------------------------------
    68                          
    69                          
    70                          ;-----------------------------------------------
    71                          ; Variable Allocation
    72                          ;-----------------------------------------------
    73                          
    74                          
    75                          AREA UserModules (ROM, REL)
    76                          
    77                          .SECTION
    78                          ;-----------------------------------------------------------------------------
    79                          ;  FUNCTION NAME: Timer16_EnableInt
    80                          ;
    81                          ;  DESCRIPTION:
    82                          ;     Enables this timer's interrupt by setting the interrupt enable mask bit
    83                          ;     associated with this User Module. This function has no effect until and
    84                          ;     unless the global interrupts are enabled (for example by using the
    85                          ;     macro M8C_EnableGInt).
    86                          ;-----------------------------------------------------------------------------
    87                          ;
    88                          ;  ARGUMENTS:    None.
    89                          ;  RETURNS:      Nothing.
    90                          ;  SIDE EFFECTS: 
    91                          ;    The A and X registers may be modified by this or future implementations
    92                          ;    of this function.  The same is true for all RAM page pointer registers in
    93                          ;    the Large Memory Model.  When necessary, it is the calling function's
    94                          ;    responsibility to perserve their values across calls to fastcall16 
    95                          ;    functions.
    96                          ;
    97  2D8A                     Timer16_EnableInt:
    98  2D8A                    _Timer16_EnableInt:
    99                             RAM_PROLOGUE RAM_USE_CLASS_1
   100  2D8A  43 E1 02             Timer16_EnableInt_M
   101                             RAM_EPILOGUE RAM_USE_CLASS_1
   102  2D8D  7F                   ret
   103                          
   104                          .ENDSECTION
   105                          
   106                          
   107                          .SECTION
   108                          ;-----------------------------------------------------------------------------
   109                          ;  FUNCTION NAME: Timer16_DisableInt
   110                          ;
   111                          ;  DESCRIPTION:
   112                          ;     Disables this timer's interrupt by clearing the interrupt enable
   113                          ;     mask bit associated with this User Module.
   114                          ;-----------------------------------------------------------------------------
   115                          ;
   116                          ;  ARGUMENTS:    None
   117                          ;  RETURNS:      Nothing
   118                          ;  SIDE EFFECTS: 
   119                          ;    The A and X registers may be modified by this or future implementations
   120                          ;    of this function.  The same is true for all RAM page pointer registers in
   121                          ;    the Large Memory Model.  When necessary, it is the calling function's
   122                          ;    responsibility to perserve their values across calls to fastcall16 
   123                          ;    functions.
   124                          ;
   125  2D8E                     Timer16_DisableInt:
   126  2D8E                    _Timer16_DisableInt:
   127                             RAM_PROLOGUE RAM_USE_CLASS_1
   128  2D8E  41 E1 FD             Timer16_DisableInt_M
   129                             RAM_EPILOGUE RAM_USE_CLASS_1
   130  2D91  7F                   ret
   131                          
   132                          .ENDSECTION
   133                          
   134                          
   135                          .SECTION
   136                          ;-----------------------------------------------------------------------------
   137                          ;  FUNCTION NAME: Timer16_Start
   138                          ;
   139                          ;  DESCRIPTION:
   140                          ;     Sets the start bit in the Control register of this user module.  The
   141                          ;     timer will begin counting on the next input clock.
   142                          ;-----------------------------------------------------------------------------
   143                          ;
   144                          ;  ARGUMENTS:    None
   145                          ;  RETURNS:      Nothing
   146                          ;  SIDE EFFECTS: 
   147                          ;    The A and X registers may be modified by this or future implementations
   148                          ;    of this function.  The same is true for all RAM page pointer registers in
   149                          ;    the Large Memory Model.  When necessary, it is the calling function's
   150                          ;    responsibility to perserve their values across calls to fastcall16 
   151                          ;    functions.
   152                          ;
   153  2D92                     Timer16_Start:
   154  2D92                    _Timer16_Start:
   155                             RAM_PROLOGUE RAM_USE_CLASS_1
   156  2D92  43 23 01             Timer16_Start_M
   157                             RAM_EPILOGUE RAM_USE_CLASS_1
   158  2D95  7F                   ret
   159                          
   160                          .ENDSECTION
   161                          
   162                          
   163                          .SECTION
   164                          ;-----------------------------------------------------------------------------
   165                          ;  FUNCTION NAME: Timer16_Stop
   166                          ;
   167                          ;  DESCRIPTION:
   168                          ;     Disables timer operation by clearing the start bit in the Control
   169                          ;     register of the LSB block.
   170                          ;-----------------------------------------------------------------------------
   171                          ;
   172                          ;  ARGUMENTS:    None
   173                          ;  RETURNS:      Nothing
   174                          ;  SIDE EFFECTS: 
   175                          ;    The A and X registers may be modified by this or future implementations
   176                          ;    of this function.  The same is true for all RAM page pointer registers in
   177                          ;    the Large Memory Model.  When necessary, it is the calling function's
   178                          ;    responsibility to perserve their values across calls to fastcall16 
   179                          ;    functions.
   180                          ;
   181  2D96                     Timer16_Stop:
   182  2D96                    _Timer16_Stop:
   183                             RAM_PROLOGUE RAM_USE_CLASS_1
   184  2D96  41 23 FE             Timer16_Stop_M
   185                             RAM_EPILOGUE RAM_USE_CLASS_1
   186  2D99  7F                   ret
   187                          
   188                          .ENDSECTION
   189                          
   190                          
   191                          .SECTION
   192                          ;-----------------------------------------------------------------------------
   193                          ;  FUNCTION NAME: Timer16_WritePeriod
   194                          ;
   195                          ;  DESCRIPTION:
   196                          ;     Write the 16-bit period value into the Period register (DR1). If the
   197                          ;     Timer user module is stopped, then this value will also be latched
   198                          ;     into the Count register (DR0).
   199                          ;-----------------------------------------------------------------------------
   200                          ;
   201                          ;  ARGUMENTS: fastcall16 WORD wPeriodValue (LSB in A, MSB in X)
   202                          ;  RETURNS:   Nothing
   203                          ;  SIDE EFFECTS:
   204                          ;    The A and X registers may be modified by this or future implementations
   205                          ;    of this function.  The same is true for all RAM page pointer registers in
   206                          ;    the Large Memory Model.  When necessary, it is the calling function's
   207                          ;    responsibility to perserve their values across calls to fastcall16 
   208                          ;    functions.
   209                          ;
   210  2D9A                     Timer16_WritePeriod:
   211  2D9A                    _Timer16_WritePeriod:
   212                             RAM_PROLOGUE RAM_USE_CLASS_1
   213  2D9A  60 21                mov   reg[Timer16_PERIOD_LSB_REG], A
   214  2D9C  5B                   mov   A, X
   215  2D9D  60 25                mov   reg[Timer16_PERIOD_MSB_REG], A
   216                             RAM_EPILOGUE RAM_USE_CLASS_1
   217  2D9F  7F                   ret
   218                          
   219                          .ENDSECTION
   220                          
   221                          
   222                          .SECTION
   223                          ;-----------------------------------------------------------------------------
   224                          ;  FUNCTION NAME: Timer16_WriteCompareValue
   225                          ;
   226                          ;  DESCRIPTION:
   227                          ;     Writes compare value into the Compare register (DR2).
   228                          ;
   229                          ;     NOTE! The Timer user module must be STOPPED in order to write the
   230                          ;           Compare register. (Call Timer16_Stop to disable).
   231                          ;-----------------------------------------------------------------------------
   232                          ;
   233                          ;  ARGUMENTS:    fastcall16 WORD wCompareValue (LSB in A, MSB in X)
   234                          ;  RETURNS:      Nothing
   235                          ;  SIDE EFFECTS: 
   236                          ;    The A and X registers may be modified by this or future implementations
   237                          ;    of this function.  The same is true for all RAM page pointer registers in
   238                          ;    the Large Memory Model.  When necessary, it is the calling function's
   239                          ;    responsibility to perserve their values across calls to fastcall16 
   240                          ;    functions.
   241                          ;
   242  2DA0                     Timer16_WriteCompareValue:
   243  2DA0                    _Timer16_WriteCompareValue:
   244                             RAM_PROLOGUE RAM_USE_CLASS_1
   245  2DA0  60 22                mov   reg[Timer16_COMPARE_LSB_REG], A
   246  2DA2  5B                   mov   A, X
   247  2DA3  60 26                mov   reg[Timer16_COMPARE_MSB_REG], A
   248                             RAM_EPILOGUE RAM_USE_CLASS_1
   249  2DA5  7F                   ret
   250                          
   251                          .ENDSECTION
   252                          
   253                          
   254                          .SECTION
   255                          ;-----------------------------------------------------------------------------
   256                          ;  FUNCTION NAME: Timer16_wReadCompareValue
   257                          ;
   258                          ;  DESCRIPTION:
   259                          ;     Reads the Compare registers.
   260                          ;-----------------------------------------------------------------------------
   261                          ;
   262                          ;  ARGUMENTS:    None
   263                          ;  RETURNS:      fastcall16 WORD wCompareValue (value of DR2 in the X & A registers)
   264                          ;  SIDE EFFECTS: 
   265                          ;    The A and X registers may be modified by this or future implementations
   266                          ;    of this function.  The same is true for all RAM page pointer registers in
   267                          ;    the Large Memory Model.  When necessary, it is the calling function's
   268                          ;    responsibility to perserve their values across calls to fastcall16 
   269                          ;    functions.
   270                          ;
   271  2DA6                     Timer16_wReadCompareValue:
   272  2DA6                    _Timer16_wReadCompareValue:
   273  2DA6                     wTimer16_ReadCompareValue:                      ; this name deprecated
   274  2DA6                    _wTimer16_ReadCompareValue:                      ; this name deprecated
   275                             RAM_PROLOGUE RAM_USE_CLASS_1
   276  2DA6  5D 26                mov   A, reg[Timer16_COMPARE_MSB_REG]
   277  2DA8  5C                   mov   X, A
   278  2DA9  5D 22                mov   A, reg[Timer16_COMPARE_LSB_REG]
   279                             RAM_EPILOGUE RAM_USE_CLASS_1
   280  2DAB  7F                   ret
   281                          
   282                          .ENDSECTION
   283                          
   284                          
   285                          .SECTION
   286                          ;-----------------------------------------------------------------------------
   287                          ;  FUNCTION NAME: Timer16_wReadTimerSaveCV
   288                          ;
   289                          ;  DESCRIPTION:
   290                          ;     Returns the value in the Count register (DR0), preserving the
   291                          ;     value in the compare register (DR2).
   292                          ;-----------------------------------------------------------------------------
   293                          ;
   294                          ;  ARGUMENTS: None
   295                          ;  RETURNS:   fastcall16 WORD wCount (value of DR0 in the X & A registers)
   296                          ;  SIDE EFFECTS:
   297                          ;     1) May cause an interrupt, if interrupt on Compare is enabled.
   298                          ;     2) If enabled, Global interrupts are momentarily disabled.
   299                          ;     3) The user module is stopped momentarily while the compare value is
   300                          ;        restored.  This may cause the Count register to miss one or more
   301                          ;        counts depending on the input clock speed.
   302                          ;     4) The A and X registers may be modified by this or future implementations
   303                          ;        of this function.  The same is true for all RAM page pointer registers in
   304                          ;        the Large Memory Model.  When necessary, it is the calling function's
   305                          ;        responsibility to perserve their values across calls to fastcall16 
   306                          ;        functions.
   307                          ;
   308                          ;  THEORY of OPERATION:
   309                          ;     1) Read and save the Compare register.
   310                          ;     2) Read the Count register, causing its data to be latched into
   311                          ;        the Compare register.
   312                          ;     3) Read and save the Counter value, now in the Compare register,
   313                          ;        to the buffer.
   314                          ;     4) Disable global interrupts
   315                          ;     5) Halt the timer
   316                          ;     6) Restore the Compare register values
   317                          ;     7) Start the Timer again
   318                          ;     8) Restore global interrupt state
   319                          ;
   320  2DAC                     Timer16_wReadTimerSaveCV:
   321  2DAC                    _Timer16_wReadTimerSaveCV:
   322  2DAC                     wTimer16_ReadTimerSaveCV:                       ; this name deprecated
   323  2DAC                    _wTimer16_ReadTimerSaveCV:                       ; this name deprecated
   324  2DAC                     wTimer16_ReadCounter:                           ; this name deprecated
   325  2DAC                    _wTimer16_ReadCounter:                           ; this name deprecated
   326                          
   327  0000                    CpuFlags:      equ   0
   328  0001                    wCount_MSB:    equ   1
   329  0002                    wCount_LSB:    equ   2
   330                          
   331  2DAC  71 40                RAM_PROLOGUE RAM_USE_CLASS_2
   332  2DAE  4F                   mov   X, SP                                   ; X <- stack frame pointer
   333  2DAF  38 03                add   SP, 3                                   ; Reserve space for flags, count
   334  2DB1  5D 23                mov   A, reg[Timer16_CONTROL_LSB_REG]         ; save the Control register
   335  2DB3  08                   push  A
   336  2DB4  5D 22                mov   A, reg[Timer16_COMPARE_LSB_REG]         ; save the Compare register
   337  2DB6  08                   push  A
   338  2DB7  5D 26                mov   A, reg[Timer16_COMPARE_MSB_REG]
   339  2DB9  08                   push  A
   340  2DBA  5D 20                mov   A, reg[Timer16_COUNTER_LSB_REG]         ; synchronous copy DR2 <- DR0
   341                                                                           ; This may cause an interrupt!
   342  2DBC  5D 26                mov   A, reg[Timer16_COMPARE_MSB_REG]         ; Now grab DR2 (DR0) and save
   343  2DBE  54 01                mov   [X+wCount_MSB], A
   344  2DC0  5D 22                mov   A, reg[Timer16_COMPARE_LSB_REG]
   345  2DC2  54 02                mov   [X+wCount_LSB], A
   346  2DC4  50 00                mov   A, 0                                    ; Guess the global interrupt state
   347  2DC6  49 F7 01             tst   reg[CPU_F], FLAG_GLOBAL_IE              ; Currently Disabled?
   348  2DC9  A003                 jz    .SetupStatusFlag                        ;   Yes, guess was correct
   349  2DCB  50 01                mov   A, FLAG_GLOBAL_IE                       ;    No, modify our guess
   350  2DCD                    .SetupStatusFlag:                                ; and ...
   351  2DCD  54 00                mov   [X+CpuFlags], A                         ;   StackFrame[0] <- Flag Reg image
   352  2DCF  70 FE                M8C_DisableGInt                               ; Disable interrupts globally
   353  2DD1  41 23 FE             Timer16_Stop_M                                ; Disable (stop) the timer
   354  2DD4  18                   pop   A                                       ; Restore the Compare register
   355  2DD5  60 26                mov   reg[Timer16_COMPARE_MSB_REG], A
   356  2DD7  18                   pop   A
   357  2DD8  60 22                mov   reg[Timer16_COMPARE_LSB_REG], A
   358  2DDA  18                   pop   A                                       ; restore start state of the timer
   359  2DDB  60 23                mov   reg[Timer16_CONTROL_LSB_REG], A
   360  2DDD  18                   pop   A                                       ; Return result stored in stack frame
   361  2DDE  20                   pop   X
   362                             RAM_EPILOGUE RAM_USE_CLASS_2
      + 2DDF  70 3F             	and	f, 0x3F
      + 2DE1  71 80             	or	f, 0x80
   363  2DE3  7E                   reti                                          ; Flag Reg <- StackFrame[0]
   364                          
   365                          .ENDSECTION
   366                          
   367                          
   368                          .SECTION
   369                          ;-----------------------------------------------------------------------------
   370                          ;  FUNCTION NAME: Timer16_wReadTimer
   371                          ;
   372                          ;  DESCRIPTION:
   373                          ;     Performs a software capture of the Count register.  A synchronous
   374                          ;     read of the Count register is performed.  The timer is NOT stopped.
   375                          ;
   376                          ;     WARNING - this will cause loss of data in the Compare register.
   377                          ;-----------------------------------------------------------------------------
   378                          ;
   379                          ;  ARGUMENTS:    None
   380                          ;  RETURNS:      fastcall16 WORD wCount, (value of DR0 in the X & A registers)
   381                          ;  SIDE EFFECTS:
   382                          ;    May cause an interrupt.
   383                          ;
   384                          ;    The A and X registers may be modified by this or future implementations
   385                          ;    of this function.  The same is true for all RAM page pointer registers in
   386                          ;    the Large Memory Model.  When necessary, it is the calling function's
   387                          ;    responsibility to perserve their values across calls to fastcall16 
   388                          ;    functions.
   389                          ;
   390                          ;  THEORY of OPERATION:
   391                          ;     1) Read the Count register - this causes the count value to be
   392                          ;        latched into the Compare registers.
   393                          ;     2) Read and return the Count register values from the Compare
   394                          ;        registers into the return buffer.
   395                          ;
   396  2DE4                     Timer16_wReadTimer:
   397  2DE4                    _Timer16_wReadTimer:
   398  2DE4                     wTimer16_ReadTimer:                             ; this name deprecated
   399  2DE4                    _wTimer16_ReadTimer:                             ; this name deprecated
   400  2DE4                     wTimer16_CaptureCounter:                        ; this name deprecated
   401  2DE4                    _wTimer16_CaptureCounter:                        ; this name deprecated
   402                          
   403                             RAM_PROLOGUE RAM_USE_CLASS_1
   404  2DE4  5D 20                mov   A, reg[Timer16_COUNTER_LSB_REG]         ; synchronous copy DR2 <- DR0
   405                                                                           ; This may cause an interrupt!
   406                          
   407  2DE6  5D 26                mov   A, reg[Timer16_COMPARE_MSB_REG]         ; Return DR2 (actually DR0)
   408  2DE8  5C                   mov   X, A
   409  2DE9  5D 22                mov   A, reg[Timer16_COMPARE_LSB_REG]
   410                             RAM_EPILOGUE RAM_USE_CLASS_1
   411  2DEB  7F                   ret
HI-TECH Software Macro Assembler (PSoC MCU) V9.61
Symbol Table                                                                                               Fri Jun 12 09:25:10 2015
           wTimer16_ReadTimer 2DE4           wTimer16_ReadCounter 2DAC              Timer16_EnableInt 2D8A  
     Timer16_wReadTimerSaveCV 2DAC                          CPU_F 00F7       _wTimer16_CaptureCounter 2DE4  
    Timer16_WriteCompareValue 2DA0             Timer16_DisableInt 2D8E     _wTimer16_ReadCompareValue 2DA6  
                       HITECH 0002             _Timer16_EnableInt 2D8A                  _Timer16_Stop 2D96  
              FLAG_PGMODE_01b 0040                FLAG_PGMODE_10b 0080       wTimer16_ReadTimerSaveCV 2DAC  
           Timer16_wReadTimer 2DE4                       CpuFlags 0000               Timer16_INT_MASK 0002  
          _wTimer16_ReadTimer 2DE4      SYSTEM_LARGE_MEMORY_MODEL 0001     _Timer16_WriteCompareValue 2DA0  
               FLAG_GLOBAL_IE 0001         Timer16_PERIOD_LSB_REG 0021         Timer16_PERIOD_MSB_REG 0025  
        _wTimer16_ReadCounter 2DAC                      TOOLCHAIN 0002        Timer16_COUNTER_LSB_REG 0020  
               _Timer16_Start 2D92               FLAG_PGMODE_MASK 00C0            _Timer16_DisableInt 2D8E  
              RAM_USE_CLASS_1 0001                RAM_USE_CLASS_2 0002                RAM_USE_CLASS_3 0004  
              RAM_USE_CLASS_4 0008      _Timer16_wReadTimerSaveCV 2DAC      Timer16_wReadCompareValue 2DA6  
                   wCount_LSB 0002                     wCount_MSB 0001        Timer16_CONTROL_LSB_REG 0023  
              Timer16_INT_REG 00E1           _Timer16_WritePeriod 2D9A            _Timer16_wReadTimer 2DE4  
      Timer16_COMPARE_LSB_REG 0022        Timer16_COMPARE_MSB_REG 0026      _wTimer16_ReadTimerSaveCV 2DAC  
Timer16_CONTROL_REG_START_BIT 0001        wTimer16_CaptureCounter 2DE4     SYSTEM_IDXPG_TRACKS_IDX_PP 0001  
          Timer16_WritePeriod 2D9A     _Timer16_wReadCompareValue 2DA6                  Timer16_Start 2D92  
    wTimer16_ReadCompareValue 2DA6     SYSTEM_IDXPG_TRACKS_STK_PP 0000                   Timer16_Stop 2D96  
HI-TECH Software Macro Assembler (PSoC MCU) V9.61
                                                                                                           Fri Jun 12 09:25:11 2015
     1                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     2                          ;;;
     3                          ;;;  M8C.INC -- Microcontroller Device System Declarations
     4                          ;;;
     5                          ;;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
     6                          ;;;
     7                          ;;;  This file provides address constants, bit field masks and a set of macro
     8                          ;;;  facilities for the Cypress Semiconductor CY8C22045 Microcontroller devices.
     9                          ;;;
    10                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    11                          
    12                          ;;=============================================================================
    13                          ;; Definition of abbreviations used in the descriptions below
    14                          ;;  (RW)   The register or bit supports reads and writes
    15                          ;;  (W)    The register or bit is write-only
    16                          ;;  (R)    The register or bit is read-only
    17                          ;;  (#)    Access to the register is bit specific (see the family datasheet)
    18                          ;;  (RC)   The register or bit can be read, but writing a 0 will clear it,
    19                          ;;         writing a 1 will have no effect.
    20                          ;;=============================================================================
    21                          
    22                          ;;=============================================================================
    23                          ;;      System Registers
    24                          ;;=============================================================================
    25                          
    26                          ;----------------------------
    27                          ;  Flag Register Bit Fields
    28                          ;----------------------------
    29  00C0                    FLAG_PGMODE_MASK:  equ 0C0h     ; Paging control for > 256 bytes of RAM
    30  0000                    FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
    31  0040                    FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
    32  0080                    FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
    33  00C0                    FLAG_PGMODE_3:     equ 0C0h       ; Direct to CUR_PP page, indexed to STK_PP page
    34  0000                    FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
    35  0040                    FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
    36  0080                    FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
    37  00C0                    FLAG_PGMODE_11b:   equ 0C0h       ; Same as PGMODE_3
    38  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    39  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    40  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    41  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    42  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    43                          
    44                          
    45                          ;;=============================================================================
    46                          ;;      Register Space, Bank 0
    47                          ;;=============================================================================
    48                          
    49                          ;------------------------------------------------
    50                          ;  Port Registers
    51                          ;  Note: Also see this address range in Bank 1.
    52                          ;------------------------------------------------
    53                          ; Port 0
    54  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    55  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    56  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    57  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    58                          ; Port 1
    59  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    60  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    61  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    62  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    63                          ; Port 2
    64  0008                    PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
    65  0009                    PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
    66  000A                    PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
    67  000B                    PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
    68                          ; Port 3
    69  000C                    PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
    70  000D                    PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
    71  000E                    PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
    72  000F                    PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
    73                          ; Port 4
    74  0010                    PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
    75  0011                    PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
    76  0012                    PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
    77  0013                    PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
    78                          
    79                          ;------------------------------------------------
    80                          ;  Digital PSoC(tm) block Registers
    81                          ;  Note: Also see this address range in Bank 1.
    82                          ;------------------------------------------------
    83                          ; Digital PSoC block 00, Basic Type C
    84  0020                    DBC00DR0:     equ 20h          ; data register 0                          (#)
    85  0021                    DBC00DR1:     equ 21h          ; data register 1                          (W)
    86  0022                    DBC00DR2:     equ 22h          ; data register 2                          (RW)
    87  0023                    DBC00CR0:     equ 23h          ; control & status register 0              (#)
    88                          
    89                          ; Digital PSoC block 01, Basic Type C
    90  0024                    DBC01DR0:     equ 24h          ; data register 0                          (#)
    91  0025                    DBC01DR1:     equ 25h          ; data register 1                          (W)
    92  0026                    DBC01DR2:     equ 26h          ; data register 2                          (RW)
    93  0027                    DBC01CR0:     equ 27h          ; control & status register 0              (#)
    94                          
    95                          ; Digital PSoC block 02, Communications Type C
    96  0028                    DCC02DR0:     equ 28h          ; data register 0                          (#)
    97  0029                    DCC02DR1:     equ 29h          ; data register 1                          (W)
    98  002A                    DCC02DR2:     equ 2Ah          ; data register 2                          (RW)
    99  002B                    DCC02CR0:     equ 2Bh          ; control & status register 0              (#)
   100                          
   101                          ; Digital PSoC block 03, Communications Type C
   102  002C                    DCC03DR0:     equ 2Ch          ; data register 0                          (#)
   103  002D                    DCC03DR1:     equ 2Dh          ; data register 1                          (W)
   104  002E                    DCC03DR2:     equ 2Eh          ; data register 2                          (RW)
   105  002F                    DCC03CR0:     equ 2Fh          ; control & status register 0              (#)
   106                          
   107                          ; Digital PSoC block 10, Basic Type C
   108  0030                    DBC10DR0:     equ 30h          ; data register 0                          (#)
   109  0031                    DBC10DR1:     equ 31h          ; data register 1                          (W)
   110  0032                    DBC10DR2:     equ 32h          ; data register 2                          (RW)
   111  0033                    DBC10CR0:     equ 33h          ; control & status register 0              (#)
   112                          
   113                          ; Digital PSoC block 11, Basic Type C
   114  0034                    DBC11DR0:     equ 34h          ; data register 0                          (#)
   115  0035                    DBC11DR1:     equ 35h          ; data register 1                          (W)
   116  0036                    DBC11DR2:     equ 36h          ; data register 2                          (RW)
   117  0037                    DBC11CR0:     equ 37h          ; control & status register 0              (#)
   118                          
   119                          ; Digital PSoC block 12, Communications Type C
   120  0038                    DCC12DR0:     equ 38h          ; data register 0                          (#)
   121  0039                    DCC12DR1:     equ 39h          ; data register 1                          (W)
   122  003A                    DCC12DR2:     equ 3Ah          ; data register 2                          (RW)
   123  003B                    DCC12CR0:     equ 3Bh          ; control & status register 0              (#)
   124                          
   125                          ; Digital PSoC block 13, Communications Type C
   126  003C                    DCC13DR0:     equ 3Ch          ; data register 0                          (#)
   127  003D                    DCC13DR1:     equ 3Dh          ; data register 1                          (W)
   128  003E                    DCC13DR2:     equ 3Eh          ; data register 2                          (RW)
   129  003F                    DCC13CR0:     equ 3Fh          ; control & status register 0              (#)
   130                          
   131                          ;-------------------------------------
   132                          ;  Analog Control Registers
   133                          ;-------------------------------------
   134  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
   135  00C0                    AMX_IN_ACI3:          equ C0h    ; MASK: column 3 input mux
   136  0030                    AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
   137  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
   138  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
   139                          
   140  0061                    AMUX_CFG:      equ 61h          ; Analog MUX Configuration
   141  0030                    AMUX_CFG_INTCAP:       equ 30h    ;
   142  000E                    AMUX_CFG_MUXCLK:  	  equ 0Eh	 ;
   143  0001                    AMUX_CFG_EN:		  	  equ 01h	 ;
   144                          
   145                          ; old declarations DO NOT USE
   146  0061                    AMUXCFG:      equ 61h          ; Analog MUX Configuration
   147  0030                    AMUXCFG_INTCAP:       equ 30h    ;
   148  000E                    AMUXCFG_MUXCLK:  	  equ 0Eh	 ;
   149  0001                    AMUXCFG_EN:		  	  equ 01h	 ;
   150                          
   151  0062                    PWM_CR:       equ 62h          ; Pulse-Width Modulator Control
   152  0038                    PWM_CR_HIGH:          equ 38h    ; MASK: PWM high time
   153  0006                    PWM_CR_LOW:           equ 06h	 ; MASK: PWM low time
   154  0001                    PWM_CR_EN:            equ 01h	 ; MASK: Enable/Disable PWM function
   155                          
   156  0063                    ARF_CR:       equ 63h          ; Analog Reference Control
   157                          
   158  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus Register           (#)
   159  0080                    CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
   160  0040                    CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
   161  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
   162  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
   163  0008                    CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
   164  0004                    CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
   165  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
   166  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   167                          
   168  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   169  0020                    CMP_CR1_CLDIS1:       equ 20h    ; MASK: Column 1 comparator output latch
   170  0010                    CMP_CR1_CLDIS0:	      equ 10h    ; MASK: Column 0 comparator output latch
   171                          
   172  0068                    ADC0_CR:      equ 68h          ; Analog Column 0 Configuration
   173  0080                    ADC0_CR_CMPST:        equ 80h    ;
   174  0040                    ADC0_CR_LOREN:        equ 40h    ;
   175  0020                    ADC0_CR_SHEN:         equ 20h    ;
   176  0008                    ADC0_CR_CBSRC:        equ 08h    ;
   177  0004                    ADC0_CR_ADCM:         equ 04h    ;
   178  0001                    ADC0_CR_EN:	          equ 01h    ;
   179                          
   180  0069                    ADC1_CR:      equ 69h          ; Analog Column 1 Configuration
   181  0080                    ADC1_CR_CMPST:        equ 80h    ;
   182  0040                    ADC1_CR_LOREN:        equ 40h    ;
   183  0020                    ADC1_CR_SHEN:         equ 20h    ;
   184  0008                    ADC1_CR_CBSRC:        equ 08h    ;
   185  0004                    ADC1_CR_ADCM:         equ 04h    ;
   186  0001                    ADC1_CR_EN:	          equ 01h    ;
   187                          
   188                          ; Continuous Time PSoC block Type E Row 0 Col 0
   189  0072                    ACE00CR1:     equ 72h          ; Control register 1                       (RW)
   190  0073                    ACE00CR2:     equ 73h          ; Control register 2                       (RW)
   191                          
   192                          ; Continuous Time PSoC block Type E Row 0 Col 1
   193  0076                    ACE01CR1:     equ 76h          ; Control register 1                       (RW)
   194  0077                    ACE01CR2:     equ 77h          ; Control register 2                       (RW)
   195                          
   196                          ; Switched Cap PSoC blockType E Row 1 Col 0
   197  0080                    ASE10CR0:     equ 80h          ; Control register 0                       (RW)
   198                          
   199                          ; Switched Cap PSoC blockType E Row 1 Col 1
   200  0084                    ASE11CR0:     equ 84h          ; Control register 0                       (RW)
   201                          
   202                          ;-----------------------------------------------
   203                          ;  Global General Purpose Data Registers
   204                          ;-----------------------------------------------
   205  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   206  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   207  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   208  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   209                          
   210                          ;------------------------------------------------
   211                          ;  Row Digital Interconnects
   212                          ;
   213                          ;  Note: the following registers are mapped into
   214                          ;  both register bank 0 AND register bank 1.
   215                          ;------------------------------------------------
   216                          
   217  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   218  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   219  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   220  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   221  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   222  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   223  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   224                          
   225  00B8                    RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
   226  00B9                    RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
   227  00BA                    RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
   228  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   229  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   230  00BD                    RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
   231  00BE                    RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
   232                          
   233                          ;-----------------------------------------------
   234                          ;  Ram Page Pointers
   235                          ;-----------------------------------------------
   236  00D0                    CUR_PP:      equ 0D0h           ; Current   Page Pointer
   237  00D1                    STK_PP:      equ 0D1h           ; Stack     Page Pointer
   238  00D3                    IDX_PP:      equ 0D3h           ; Index     Page Pointer
   239  00D4                    MVR_PP:      equ 0D4h           ; MVI Read  Page Pointer
   240  00D5                    MVW_PP:      equ 0D5h           ; MVI Write Page Pointer
   241                          
   242                          ;------------------------------------------------
   243                          ;  I2C Configuration Registers
   244                          ;------------------------------------------------
   245  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   246  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   247  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   248  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   249  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   250  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   251  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   252  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   253  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   254  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   255                          
   256  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   257  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   258  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   259  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   260  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   261  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   262  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   263  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   264  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   265                          
   266  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   267                          
   268  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   269  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   270  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   271  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   272  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   273                          
   274                          ;------------------------------------------------
   275                          ;  System and Global Resource Registers
   276                          ;------------------------------------------------
   277  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   278                                                         ; Use INT_MSK0 bit field masks
   279  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   280                                                         ; Use INT_MSK1 bit field masks
   281  00DC                    INT_CLR2:     equ 0DCh          ; Interrupt Clear Register 2               (RW)
   282                                                         ; Use INT_MSK2 bit field masks
   283  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   284                                                         ; Use INT_MSK3 bit field masks
   285                          
   286  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   287  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   288  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   289                          
   290  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   291  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   292  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   293  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   294  0010                    INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
   295  0008                    INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
   296  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   297  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   298  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   299                          
   300  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   301  0080                    INT_MSK1_DCC13:            equ 80h ; MASK: enable/disable DCC13 block interrupt
   302  0040                    INT_MSK1_DCC12:            equ 40h ; MASK: enable/disable DCC12 block interrupt
   303  0020                    INT_MSK1_DBC11:            equ 20h ; MASK: enable/disable DBC11 block interrupt
   304  0010                    INT_MSK1_DBC10:            equ 10h ; MASK: enable/disable DBC10 block interrupt
   305  0008                    INT_MSK1_DCC03:            equ 08h ; MASK: enable/disable DCC03 block interrupt
   306  0004                    INT_MSK1_DCC02:            equ 04h ; MASK: enable/disable DCC02 block interrupt
   307  0002                    INT_MSK1_DBC01:            equ 02h ; MASK: enable/disable DBC01 block interrupt
   308  0001                    INT_MSK1_DBC00:            equ 01h ; MASK: enable/disable DBC00 block interrupt
   309                          
   310  00DF                    INT_MSK2:     equ DFh			; Custom block Mask Register			   (RW)
   311  0010                    INT_MSK2_SARADC:           equ 10h ; MASK: enable/disable SARADC block interrupt
   312  0020                    INT_MSK2_CSD0:             equ 20h ; MASK: enable/disable CSD0 block interrupt
   313  0040                    INT_MSK2_CSD1:             equ 40h ; MASK: enable/disable CSD1 block interrupt
   314  0080                    INT_MSK2_RTC:              equ 80h ; MASK: enable/disable RTC block interrupt
   315                          
   316  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   317  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   318                          
   319                          ;------------------------------------------------------
   320                          ;  MAC Registers
   321                          ;------------------------------------------------------
   322                          
   323  00E8                    MUL0_X:       equ 0E8h          ; Multiply Input X Register                (W)
   324  00E9                    MUL0_Y:       equ 0E9h          ; Multiply Input Y Register                (W)
   325  00EA                    MUL0_DH:      equ 0EAh          ; Multiply Result High Byte Register       (R)
   326  00EB                    MUL0_DL:      equ 0EBh          ; Multiply Result Low Byte Register        (R)
   327                          
   328  00EC                    ACC0_DR1:     equ 0ECh          ; Accumulator Data Register 1              (RW)
   329  00ED                    ACC0_DR0:     equ 0EDh          ; Accumulator Data Register 0              (RW)
   330  00EE                    ACC0_DR3:     equ 0EEh          ; Accumulator Data Register 3              (RW)
   331  00EF                    ACC0_DR2:     equ 0EFh          ; Accumulator Data Register 2              (RW)
   332                          
   333                          ; DECIMATOR Control Registers
   334  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   335  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   336                          
   337                          ;------------------------------------------------------
   338                          ;  System Status and Control Registers
   339                          ;
   340                          ;  Note: The following registers are mapped into both
   341                          ;        register bank 0 AND register bank 1.
   342                          ;------------------------------------------------------
   343  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   344                                                             ; Use FLAG_ masks defined at top of file
   345                          
   346  00FD                    DAC_D:        equ 0FDh		   ; DAC Data Register                        (RW)
   347                          
   348  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   349  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: flag, Internal Reset Status bit
   350  0010                    CPU_SCR1_SLIMO:         equ 10h	   ; MASK: Slow IMO (internal main osc) enable
   351  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   352  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   353  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   354                          
   355  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   356  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   357  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   358  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   359  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   360  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   361                          
   362                          ;------------------------------------------------------
   363                          ;  Neon Capsense Digital Control Registers
   364                          ;------------------------------------------------------
   365  0050                    CSD0_DR0_L:				equ 50h		; Capsense 0 data low 0				(RW)
   366  0054                    CSD0_DR0_H:				equ 54h		; Capsense 0 data high 0			(RW)
   367  0058                    CSD1_DR0_L:				equ 58h		; Capsense 1 data low 0				(RW)
   368  005C                    CSD1_DR0_H:				equ 5Ch		; Capsense 1 data high 0			(RW)
   369  0051                    CSD0_DR1_L:				equ 51h		; Capsense 0 data low 1				(RW)
   370  0055                    CSD0_DR1_H:				equ 55h		; Capsense 0 data high 1			(RW)
   371  0059                    CSD1_DR1_L:				equ 59h		; Capsense 1 data low 1				(RW)
   372  005D                    CSD1_DR1_H:				equ 5Dh		; Capsense 1 data high 1			(RW)
   373  0052                    CSD0_CNT_L:				equ 52h		; Capsense 0 counter low			(RW)
   374  0056                    CSD0_CNT_H:				equ 56h		; Capsense 0 counter high			(RW)
   375  005A                    CSD1_CNT_L:				equ 5Ah		; Capsense 1 counter low			(RW)
   376  005E                    CSD1_CNT_H:				equ	5Eh		; Capsense 1 counter high			(RW)
   377  0053                    CSD0_CR0:				equ 53h		; Capsense 0 control 0				(RW)
   378  005B                    CSD1_CR0:				equ 5Bh		; Capsense 1 control 0				(RW)
   379  0057                    CSD0_CR1:				equ 57h		; Capsense 0 control 1				(RW)
   380  005F                    CSD1_CR1:				equ 5Fh		; Capsense 1 control 1				(RW)
   381                          
   382                          ;------------------------------------------------------
   383                          ;  Neon Analog Registers
   384                          ;------------------------------------------------------
   385  0065                    ASY_CR:					equ 65h		; Analog Synchronization Control	(RW)
   386  006A                    ADC_DH:					equ 6Ah		; ADC data high						(RW)
   387  006B                    ADC_DL:					equ 6Bh		; ADC data low						(RW)
   388  00C8                    PWMVREF0:				equ C8h		; PWM Voltage Reference 0			(RW)
   389  00C9                    PWMVREF1:				equ C9h		; PWM Voltage Reference 1			(RW)
   390  00CB                    PWMSRC:					equ CBh		; PWM Source						(RW)
   391  00CA                    IDACMODE:				equ CAh		; IDAC Mode							(RW)
   392  00FC                    IDACR_D:				equ FCh		; Analog Mux DAC data 0				(RW)
   393  00FD                    IDACL_D:				equ FDh		; Analog Mux DAC data 1				(RW)
   394                          
   395                          ;------------------------------------------------------
   396                          ;  Neon Digital Registers
   397                          ;------------------------------------------------------
   398  00B7                    RDI0DSM:				equ B7h		; Row Digital Interconnect input select 0	(RW)
   399  00BF                    RDI1DSM:				equ BFh		; Row Digital Interconnect input select 1	(RW)
   400                          
   401                          ;------------------------------------------------------
   402                          ;  Neon Test Registers
   403                          ;------------------------------------------------------
   404  00CC                    TSCR0:					equ CCh		; Tsource 0							(RW)
   405  00CD                    TSCMPH:					equ CDh		; TSCMP high						(RW)
   406  00CE                    TSCMPL:					equ CEh		; TSCMP low							(RW)
   407  00CF                    TSCR1:					equ CFh		; Tsource 1							(RW)
   408                          
   409                          ;;=============================================================================
   410                          ;;      Register Space, Bank 1
   411                          ;;=============================================================================
   412                          
   413                          ;------------------------------------------------
   414                          ;  Port Registers
   415                          ;  Note: Also see this address range in Bank 0.
   416                          ;------------------------------------------------
   417                          ; Port 0
   418  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   419  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   420  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   421  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   422                          
   423                          ; Port 1
   424  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   425  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   426  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   427  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   428                          
   429                          ; Port 2
   430  0008                    PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
   431  0009                    PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
   432  000A                    PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
   433  000B                    PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
   434                          
   435                          ; Port 3
   436  000C                    PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
   437  000D                    PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
   438  000E                    PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
   439  000F                    PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
   440                          
   441                          ; Port 4
   442  0010                    PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
   443  0011                    PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
   444  0012                    PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
   445  0013                    PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
   446                          
   447                          ;------------------------------------------------
   448                          ;  Digital PSoC(tm) block Registers
   449                          ;  Note: Also see this address range in Bank 0.
   450                          ;------------------------------------------------
   451                          
   452                          ; Digital PSoC block 00, Basic Type C
   453  0020                    DBC00FN:      equ 20h          ; Function Register                        (RW)
   454  0021                    DBC00IN:      equ 21h          ;    Input Register                        (RW)
   455  0022                    DBC00OU:      equ 22h          ;   Output Register                        (RW)
   456  0023                    DBC00CR1:     equ 23h          ;   control & status register 1            (RW)
   457                          
   458                          ; Digital PSoC block 01, Basic Type C
   459  0024                    DBC01FN:      equ 24h          ; Function Register                        (RW)
   460  0025                    DBC01IN:      equ 25h          ;    Input Register                        (RW)
   461  0026                    DBC01OU:      equ 26h          ;   Output Register                        (RW)
   462  0027                    DBC01CR1:     equ 27h          ;   control & status register 1            (RW)
   463                          
   464                          ; Digital PSoC block 02, Communications Type C
   465  0028                    DCC02FN:      equ 28h          ; Function Register                        (RW)
   466  0029                    DCC02IN:      equ 29h          ;    Input Register                        (RW)
   467  002A                    DCC02OU:      equ 2Ah          ;   Output Register                        (RW)
   468  002B                    DBC02CR1:     equ 2Bh          ;   control & status register 1            (RW)
   469                          
   470                          ; Digital PSoC block 03, Communications Type C
   471  002C                    DCC03FN:      equ 2Ch          ; Function Register                        (RW)
   472  002D                    DCC03IN:      equ 2Dh          ;    Input Register                        (RW)
   473  002E                    DCC03OU:      equ 2Eh          ;   Output Register                        (RW)
   474  0029                    DBC03CR1:     equ 29h          ;   control & status register 1            (RW)
   475                          
   476                          ; Digital PSoC block 10, Basic Type C
   477  0030                    DBC10FN:      equ 30h          ; Function Register                        (RW)
   478  0031                    DBC10IN:      equ 31h          ;    Input Register                        (RW)
   479  0032                    DBC10OU:      equ 32h          ;   Output Register                        (RW)
   480  0033                    DBC10CR1:     equ 33h          ;   control & status register 1            (RW)
   481                          
   482                          ; Digital PSoC block 11, Basic Type C
   483  0034                    DBC11FN:      equ 34h          ; Function Register                        (RW)
   484  0035                    DBC11IN:      equ 35h          ;    Input Register                        (RW)
   485  0036                    DBC11OU:      equ 36h          ;   Output Register                        (RW)
   486  0037                    DBC11CR1:     equ 37h          ;   control & status register 1            (RW)
   487                          
   488                          ; Digital PSoC block 12, Communications Type C
   489  0038                    DCC12FN:      equ 38h          ; Function Register                        (RW)
   490  0039                    DCC12IN:      equ 39h          ;    Input Register                        (RW)
   491  003A                    DCC12OU:      equ 3Ah          ;   Output Register                        (RW)
   492  003B                    DBC12CR1:     equ 3Bh          ;   control & status register 1            (RW)
   493                          
   494                          ; Digital PSoC block 13, Communications Type C
   495  003C                    DCC13FN:      equ 3Ch          ; Function Register                        (RW)
   496  003D                    DCC13IN:      equ 3Dh          ;    Input Register                        (RW)
   497  003E                    DCC13OU:      equ 3Eh          ;   Output Register                        (RW)
   498  003F                    DBC13CR1:     equ 3Fh          ;   control & status register 1            (RW)
   499                          
   500                          ;------------------------------------------------
   501                          ;  System and Global Resource Registers
   502                          ;  Note: Also see this address range in Bank 0.
   503                          ;------------------------------------------------
   504                          
   505  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   506  00C0                    CLK_CR0_ACOLUMN_3:    equ C0h    ; MASK: Specify clock for analog cloumn
   507  0030                    CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
   508  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   509  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   510                          
   511  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   512  0018                    CLK_CR1_ACLK1:        equ 18h    ; MASK: Digital PSoC block for analog source
   513  0003                    CLK_CR1_ACLK0:        equ 03h    ; MASK: Digital PSoC block for analog source
   514                          
   515  0003                    CLK_CR1_ACLK2:        equ 03h    ; Deprecated do not use
   516                          
   517  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   518  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   519                          
   520  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   521  000F                    AMD_CR0_AMOD0:        equ 0Fh    ; MASK: Modulation source for analog column 0
   522                          
   523  0064                    CMP_GO_EN:    equ 64h          ; Comparator Bus To Global Out Enable      (RW)
   524  0080                    CMP_GO_EN_GOO5:       equ 80h    ; MASK: Selected Col 1 signal to GOO5
   525  0040                    CMP_GO_EN_GOO1:       equ 40h    ; MASK: Selected Col 1 signal to GOO1
   526  0030                    CMP_GO_EN_SEL1:       equ 30h    ; MASK: Column 1 Signal Select
   527  0008                    CMP_GO_EN_GOO4:       equ 08h    ; MASK: Selected Col 0 signal to GOO4
   528  0004                    CMP_GO_EN_GOO0:       equ 04h    ; MASK: Selected Col 0 signal to GOO0
   529  0003                    CMP_GO_EN_SEL0:       equ 03h    ; MASK: Column 0 Signal Select
   530                          
   531  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   532  000F                    AMD_CR1_AMOD1:        equ 0Fh    ; MASK: Modulation ctrl for analog column 1
   533                          
   534  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   535  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   536  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   537                          
   538  006B                    CLK_CR3:      equ 6Bh          ; Analog Clock Source Control Register 3   (RW)
   539  0040                    CLK_CR3_SYS1:         equ 40h    ; MASK: Analog Clock 1 selection
   540  0030                    CLK_CR3_DIVCLK1:      equ 30h    ; MASK: Analog Clock 1 divider
   541  0004                    CLK_CR3_SYS0:         equ 04h    ; MASK: Analog Clock 0 selection
   542  0003                    CLK_CR3_DIVCLK0:      equ 03h    ; MASK: Analog Clock 0 divider
   543                          
   544                          ;------------------------------------------------
   545                          ;  Global Digital Interconnects
   546                          ;------------------------------------------------
   547                          
   548  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   549  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   550  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   551  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   552                          
   553  00A0                    GDI_O_IN_CR:  equ 0A0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   554  00A1                    GDI_E_IN_CR:  equ 0A1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   555  00A2                    GDI_O_OU_CR:  equ 0A2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   556  00A3                    GDI_E_OU_CR:  equ 0A3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   557                          
   558  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   559  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   560                          
   561                          ;------------------------------------------------
   562                          ;  Analog Mux Bus Port Enable Bits
   563                          ;------------------------------------------------
   564  00D8                    MUX_CR0:      equ 0D8h          ; Analog Mux Port 0 Bit Enables Register
   565  00D9                    MUX_CR1:      equ 0D9h          ; Analog Mux Port 1 Bit Enables Register
   566  00DA                    MUX_CR2:      equ 0DAh          ; Analog Mux Port 2 Bit Enables Register
   567  00DB                    MUX_CR3:      equ 0DBh          ; Analog Mux Port 3 Bit Enables Register
   568  00EC                    MUX_CR4:      equ 0ECh          ; Analog Mux Port 4 Bit Enables Register
   569                          
   570                          ;------------------------------------------------
   571                          ;  Clock and System Control Registers
   572                          ;------------------------------------------------
   573                          
   574  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   575  0080                    OSC_GO_EN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   576  0040                    OSC_GO_EN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   577  0020                    OSC_GO_EN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   578  0010                    OSC_GO_EN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   579  0008                    OSC_GO_EN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   580  0004                    OSC_GO_EN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   581  0002                    OSC_GO_EN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   582  0001                    OSC_GO_EN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   583                          
   584  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   585  0003                    OSC_CR4_VC3SEL:       equ 03h    ; MASK: System VC3 Clock source
   586                          
   587  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   588                          
   589  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   590  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   591  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   592  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   593  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   594  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   595  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   596  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   597  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   598  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   599  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   600  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   601  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   602  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   603  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   604  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   605  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   606  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   607                          
   608  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   609  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   610  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   611                          
   612  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   613  0080                    OSC_CR2_PLLGAIN:      equ 80h    ; MASK: High/Low gain
   614  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   615  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   616  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   617                          
   618  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   619  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   620  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   621  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   622  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   623  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   624  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   625  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   626                          
   627  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   628  0008                    VLT_CMP_NOWRITE:      equ 08h    ; MASK: Vcc below Flash Write level
   629  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   630  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   631  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   632                          
   633  00E5                    ADC0_TR:      equ 0E5h          ; ADC Column 0 Trim Register
   634  00E6                    ADC1_TR:      equ 0E6h          ; ADC Column 1 Trim Register
   635                          
   636  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   637  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   638  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   639  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   640                          
   641  00FA                    FLS_PR1:      equ 0FAh          ; Flash Program Register 1                 (RW)
   642  0003                    FLS_PR1_BANK:         equ 03h    ; MASK: Select Active Flash Bank
   643                          
   644  00FD                    DAC_CR0:       equ 0FDh          ; Analog Mux DAC Control Register 0
   645  00DC                    DAC_CR1:       equ 0DCh          ; Analog Mux DAC Control Register 1
   646  0008                    DAC_CR_IRANGE:        equ 08h    ; MASK: Sets the DAC Range low or high
   647  0006                    DAC_CR_OSCMODE:       equ 06h    ; MASK: Defines the reset mode for AMux
   648  0001                    DAC_CR_ENABLE:        equ 01h    ; MASK: Enable/Disable DAC function
   649                          
   650                          ;------------------------------------------------
   651                          ;  I2C Control Registers
   652                          ;------------------------------------------------
   653                          
   654  00AD                    I2C_ADDR:    equ 0ADh          ; I2C Address Register (RW)
   655                          
   656                          ;------------------------------------------------------
   657                          ;  Neon Analog Registers
   658                          ;------------------------------------------------------
   659  0053                    VDAC50CR0:		equ 53h			; V DAC5 control 0				(RW)
   660  0057                    VDAC51CR0:		equ 57h			; V DAC5 control 1				(RW)
   661  00A8                    ADC_CR0:		equ A8h			; ADC control 0					(RW)
   662  00A9                    ADC_CR1:		equ A9h			; ADC control 1					(RW)
   663  00AA                    ADC_CR2:		equ AAh			; ADC control 2					(RW)
   664  00AB                    ADC_CR3TRIM:	equ ABh			; ADC control 3					(RW)
   665  00AC                    ADC_CR4:		equ ACh			; ADC control 4					(RW)
   666  00E7                    VDAC_TRIM:		equ E7h			; V DAC trim					(RW)
   667                          
   668                          ;------------------------------------------------------
   669                          ;  Neon Current Sense CMP Registers
   670                          ;------------------------------------------------------
   671  0050                    CMP0CR1:		equ 50h			; CMP0 control 1				(RW)
   672  0051                    CMP0CR2:		equ 51h			; CMP0 control 2				(RW)
   673  0054                    CMP1CR1:		equ 54h			; CMP1 control 1				(RW)
   674  0055                    CMP1CR2:		equ 55h			; CMP1 control 2				(RW)
   675  0058                    CSCMPCR0:		equ 58h			; CSCMP control 0				(RW)
   676  0059                    CSCMPGOEN:		equ 59h			; CSCMO global out enable		(RW)
   677  005A                    CSLUTCR0:		equ 5Ah			; CSLUT control 0				(RW)
   678  005B                    CMPCOLMUX:		equ 5Bh			; CMP Column Mux				(RW)
   679  005C                    CMPPWMCR:		equ 5Ch			; CMP PWM control				(RW)
   680  005D                    CMPFLTCR:		equ 5Dh			; CMP filter control			(RW)
   681  005E                    CMPCLK1:		equ 5Eh			; CMP clock 1					(RW)
   682  005F                    CMPCLK0:		equ 5Fh			; CMP clock 0					(RW)
   683                          
   684                          ;------------------------------------------------------
   685                          ;  Neon Real Time Clock Registers
   686                          ;------------------------------------------------------
   687  00A4                    RTCH:			equ A4h			; Real time current hour		(RW)
   688  00A5                    RTCM:			equ A5h			; Real time current minute		(RW)
   689  00A6                    RTCS:			equ A6h			; Real time current second		(RW)
   690  00A7                    RTCCR:			equ A7h			; Real time clock control		(RW)
   691                          
   692                          ;------------------------------------------------------
   693                          ;  Analog MUX Config Registers
   694                          ;------------------------------------------------------
   695                          
   696  006A                    AMUX_CFG1:			equ 6Ah  ; Analog MUX Configuration 1
   697  0020                    AMUX_CFG1_GOINVR:	equ 20h  ;
   698  0010                    AMUX_CFG1_GOINVL:  	equ 10h	 ;
   699  000C                    AMUX_CFG1_AMUXMODR:	equ 0Ch	 ;
   700  0003                    AMUX_CFG1_AMUXMODL:	equ 03h	 ;
   701                          
   702                          ;;=============================================================================
   703                          ;;      M8C System Macros
   704                          ;;  These macros should be used when their functions are needed.
   705                          ;;=============================================================================
   706                          
   707                          ;----------------------------------------------------
   708                          ;  Swapping Register Banks
   709                          ;----------------------------------------------------
   710                              macro M8C_SetBank0
   711                              and   F, ~FLAG_XIO_MASK
   712  0000'                       endm
   713                          
   714                              macro M8C_SetBank1
   715                              or    F, FLAG_XIO_MASK
   716  0000'                       endm
   717                          
   718                          ;----------------------------------------------------
   719                          ;  Global Interrupt Enable/Disable
   720                          ;----------------------------------------------------
   721                              macro M8C_EnableGInt
   722                              or    F, FLAG_GLOBAL_IE
   723  0000'                       endm
   724                          
   725                              macro M8C_DisableGInt
   726                              and   F, ~FLAG_GLOBAL_IE
   727  0000'                       endm
   728                          
   729                          ;----------------------------------------------------
   730                          ;  Enable/Disable Interrupt Mask
   731                          ;
   732                          ;  Use the following macros to enable/disable
   733                          ;  bits in the Interrupt mask registers,
   734                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   735                          ;
   736                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   737                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   738                          ;
   739                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   740                          ;        and MASK is the bit set to enable or disable
   741                          ;----------------------------------------------------
   742                          ; Disable Interrupt Bit Mask(s)
   743                              macro M8C_DisableIntMask
   744                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   745  0000'                       endm
   746                          
   747                          ; Enable Interrupt Bit Mask(s)
   748                              macro M8C_EnableIntMask
   749                              or    reg[@0], @1               ; enable specified interrupt enable bit
   750  0000'                       endm
   751                          
   752                          ;----------------------------------------------------
   753                          ;  Clear Posted Interrupt Flag Mask
   754                          ;
   755                          ;  Use the following macros to clear the
   756                          ;  bits in the Interrupt Clear registers,
   757                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   758                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   759                          ;
   760                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   761                          ;        and MASK is the bit set to enable or disable
   762                          ;----------------------------------------------------
   763                              macro M8C_ClearIntFlag
   764                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   765  0000'                       endm
   766                          
   767                          ;----------------------------------------------------
   768                          ;  Power-On Reset & WatchDog Timer Functions
   769                          ;----------------------------------------------------
   770                              macro M8C_EnableWatchDog
   771                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   772  0000'                       endm
   773                          
   774                              macro M8C_ClearWDT
   775                              mov   reg[RES_WDT], 00h
   776  0000'                       endm
   777                          
   778                              macro M8C_ClearWDTAndSleep
   779                              mov   reg[RES_WDT], 38h
   780  0000'                       endm
   781                          
   782                          ;----------------------------------------------------
   783                          ;  Sleep, CPU Stop & Software Reset
   784                          ;----------------------------------------------------
   785                              macro M8C_Sleep
   786                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   787                              ; The next instruction to be executed depends on the state of the
   788                              ; various interrupt enable bits. If some interrupts are enabled
   789                              ; and the global interrupts are disabled, the next instruction will
   790                              ; be the one that follows the invocation of this macro. If global
   791                              ; interrupts are also enabled then the next instruction will be
   792                              ; from the interrupt vector table. If no interrupts are enabled
   793                              ; then the CPU sleeps forever.
   794  0000'                       endm
   795                          
   796                              macro M8C_Stop
   797                              ; In general, you probably don't want to do this, but here's how:
   798                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   799                              ; Next instruction to be executed is located in the interrupt
   800                              ; vector table entry for Power-On Reset.
   801  0000'                       endm
   802                          
   803                              macro M8C_Reset
   804                              ; Restore CPU to the power-on reset state.
   805                              mov A, 0
   806                              SSC
   807                              ; Next non-supervisor instruction will be at interrupt vector 0.
   808  0000'                       endm
   809                          
   810                          ;----------------------------------------------------
   811                          ; ImageCraft Code Compressor Actions
   812                          ;----------------------------------------------------
   813                              ; Suspend Code Compressor
   814                              ; Must not span a RET or RETI instruction
   815                              ; without resuming code compression
   816                              macro Suspend_CodeCompressor
   817                              or   F, 0
   818  0000'                       endm
   819                          
   820                              ; Resume Code Compression
   821                              macro Resume_CodeCompressor
   822                              add  SP, 0
   823                              endm
      + 0000'                   
      + 0000'                   ; end of file m8c.inc
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;
     4                          ;;       FILENAME: Memory.inc
     5                          ;;
     6                          ;;    DESCRIPTION: Memory Model and Stack Parameter Definitions for 
     7                          ;;                 CY8C22045 PSoC devices.
     8                          ;;
     9                          ;;  LAST MODIFIED: August 17, 2004
    10                          ;;
    11                          ;;-----------------------------------------------------------------------------
    12                          ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
    13                          ;;*****************************************************************************
    14                          ;;*****************************************************************************
    15                          ;
    16                          ;
    17                          ;  ******** Define Memory Model and Stack parameters ********
    18                          ;
    19  0001                    IMAGECRAFT: equ 1   
    20  0002                    HITECH: equ 2   
    21  0002                    TOOLCHAIN: equ HITECH   
    22  0001                    SYSTEM_LARGE_MEMORY_MODEL: equ 1   
    23  0000                    SYSTEM_SMALL_MEMORY_MODEL: equ 0   
    24  0003                    SYSTEM_STACK_PAGE: equ 3   
    25  0000                    SYSTEM_STACK_PAGE_OFFSET: equ 0   
    26  0002                    SYSTEM_TOOLS: equ 2   
    27  0000                    SYSTEM_IDXPG_TRACKS_STK_PP: equ 0   
    28  0001                    SYSTEM_IDXPG_TRACKS_IDX_PP: equ 1   
    29  0000                    SYSTEM_MULTIPAGE_STACK: equ 0 
    30                          
    31                          
    32                          ;  ******* Function Class Definitions *******
    33                          ;
    34                          ;  These definitions are used to describe RAM access patterns. They provide
    35                          ;  documentation and they control prologue and epilogue macros that perform
    36                          ;  the necessary housekeeping functions for large memory model devices like
    37                          ;  the CY8C22045.
    38                          
    39  0001                    RAM_USE_CLASS_1:               equ 1   ; PUSH, POP & I/O access
    40  0002                    RAM_USE_CLASS_2:               equ 2   ; Indexed address mode on stack page
    41  0004                    RAM_USE_CLASS_3:               equ 4   ; Indexed address mode to any page
    42  0008                    RAM_USE_CLASS_4:               equ 8   ; Direct/Indirect address mode access
    43                          
    44                          ; ******* Hi Tech Specific *******
    45                          ; Turn on the expansion of all macros by default
    46                          IF (TOOLCHAIN & HITECH)
    47                          OPT EXPAND
    48                          ENDIF
    49                          ; ******* Page Pointer Manipulation Macros *******
    50                          ;
    51                          ;  ******* Page Pointer Manipulation Macros *******
    52                          ;
    53                          ;  Most of the following macros are conditionally compiled so they only
    54                          ;  produce code if the large memory model is selected.
    55                          
    56                             ;-----------------------------------------------
    57                             ;  Set Stack Page Macro
    58                             ;-----------------------------------------------
    59                             ;
    60                             ;  DESC: Modify STK_PP in the large or small memory Models.
    61                             ;
    62                             ; INPUT: Constant (e.g., SYSTEM_STACK_PAGE) that specifies the RAM page on
    63                             ;        which stack operations like PUSH and POP store and retrieve their
    64                             ;        data
    65                             ;
    66                             ;  COST: 8 instruction cycles (in LMM only)
    67                          
    68                             macro RAM_SETPAGE_STK( PG_NUMBER )
    69                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    70                                mov reg[STK_PP], @PG_NUMBER
    71                             ENDIF
    72  0000'                      endm
    73                          
    74                             ;-----------------------------------------------
    75                             ;  Set Current Page Macro
    76                             ;-----------------------------------------------
    77                             ;
    78                             ;  DESC: Modify CUR_PP in the large or small memory Models.
    79                             ;
    80                             ; INPUT: Constant value (e.g., >bFoo) for the RAM page number used in
    81                             ;        calculation of effective direct-mode address operands.
    82                             ;
    83                             ;  COST: 8 instruction cycles (in LMM only)
    84                          
    85                             macro RAM_SETPAGE_CUR( PG_NUMBER )
    86                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    87                                mov reg[CUR_PP], @PG_NUMBER
    88                             ENDIF
    89  0000'                      endm
    90                          
    91                             ;-----------------------------------------------
    92                             ;  Set Index Page Macro
    93                             ;-----------------------------------------------
    94                             ;
    95                             ;  DESC: Modify IDX_PP in the large or small emory Models.
    96                             ;
    97                             ; INPUT: Constant value (e.g., >caFoo) for the RAM page number used in
    98                             ;         calculation of effective index-mode address operands.
    99                             ;
   100                             ;  COST: 8 instruction cycles (in LMM only)
   101                          
   102                             macro RAM_SETPAGE_IDX( PG_NUMBER )
   103                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   104                                mov reg[IDX_PP], @PG_NUMBER
   105                             ENDIF
   106  0000'                      endm
   107                          
   108                             ;-----------------------------------------------
   109                             ;  Set MVI Read Page Macro
   110                             ;-----------------------------------------------
   111                             ;
   112                             ;  DESC: Modify MVR_PP in the large or small memory Models.
   113                             ;
   114                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   115                             ;        calculation of indirect address operands used in the
   116                             ;        "mvi A, [pFoo]" instructions.
   117                             ;
   118                             ;  COST: 8 instruction cycles (in LMM only)
   119                          
   120                             macro RAM_SETPAGE_MVR( PG_NUMBER )
   121                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   122                                mov reg[MVR_PP], @PG_NUMBER
   123                             ENDIF
   124  0000'                      endm
   125                          
   126                             ;-----------------------------------------------
   127                             ;  Set MVI Write Page Macro
   128                             ;-----------------------------------------------
   129                             ;
   130                             ;  DESC: Modify MVW_PP in the large or small memory Models.
   131                             ;
   132                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   133                             ;        calculation of indirect address operands used in the
   134                             ;        "mvi [pFoo], A" instructions.
   135                             ;
   136                             ;  COST: 8 instruction cycles (in LMM only)
   137                          
   138                             macro RAM_SETPAGE_MVW( PG_NUMBER )
   139                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   140                                mov reg[MVW_PP], @PG_NUMBER
   141                             ENDIF
   142  0000'                      endm
   143                          
   144                             ;-----------------------------------------------
   145                             ;  Force Index Page Pointer to Stack Page
   146                             ;-----------------------------------------------
   147                             ;
   148                             ;  DESC: Map index-mode operands onto the stack page by modifying IDX_PP.
   149                             ;        See also RAM_LOCK_INDEX_TO_STACKPAGE.
   150                             ;
   151                             ; INPUT: None
   152                             ;
   153                             ;  COST: 8 instruction cycles (in LMM only)
   154                          
   155                             macro RAM_SETPAGE_IDX2STK
   156                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   157                                IF ( SYSTEM_MULTIPAGE_STACK )
   158                                   mov   A, reg[STK_PP]
   159                                   mov   reg[IDX_PP], A
   160                                ELSE
   161                                   RAM_SETPAGE_IDX SYSTEM_STACK_PAGE
   162                                ENDIF
   163                             ENDIF
   164  0000'                      endm
   165                          
   166                             ;-----------------------------------------------
   167                             ;  Change Memory Mode
   168                             ;-----------------------------------------------
   169                             ;
   170                             ;  DESC: Modify FLAG_PAGEMODE bits in the large and small memory Models.
   171                             ;
   172                             ; INPUT: Constant value for PGMODE bitfield of CPU Flag register, F.
   173                             ;        See FLAG_PGMODE_{x} constants in M8C.INC.
   174                             ;
   175                             ;  COST: 8 instruction cycles (in LMM only)
   176                          
   177                             macro RAM_CHANGE_PAGE_MODE( MODE )
   178                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   179                                and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
   180                                or    F,  FLAG_PGMODE_MASK & @MODE
   181                             ENDIF
   182  0000'                      endm
   183                          
   184                             ;-----------------------------------------------
   185                             ;  Set Large Memory Model Native Paging Mode
   186                             ;-----------------------------------------------
   187                             ;
   188                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   189                             ;        paging mode *IFF* a simple "OR" is guaranteed to work---for
   190                             ;        example, in an ISR, when the PGMODE bits have been cleared
   191                             ;        to zero. If a simple "OR" is not guaranteed to work, use
   192                             ;        the slower RAM_RESTORE_NATIVE_PAGING instead.
   193                             ;
   194                             ; INPUT: none
   195                             ;
   196                             ;  COST: 4 instruction cycles (in LMM only)
   197                          
   198                             macro RAM_SET_NATIVE_PAGING
   199                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   200                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   201                                or    F,  FLAG_PGMODE_11b            ; LMM w/ IndexPage<==>StackPage
   202                             ENDIF ;  PGMODE LOCKED
   203                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   204                                or    F,  FLAG_PGMODE_10b            ; LMM with independent IndexPage
   205                             ENDIF ; PGMODE FREE
   206                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   207  0000'                      endm
   208                          
   209                             ;-----------------------------------------------
   210                             ; Restore Large Memory Model Native Paging Mode
   211                             ;-----------------------------------------------
   212                             ;
   213                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   214                             ;        paging mode. Always works because it clears the PGMODE bits
   215                             ;        before OR-ing in the new ones. See RAM_RESTORE_NATIVE_PAGING
   216                             ;        for a faster method.
   217                             ;
   218                             ; INPUT: none
   219                             ;
   220                             ;  COST: 8 instruction cycles (in LMM only)
   221                          
   222                             macro RAM_RESTORE_NATIVE_PAGING
   223                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   224                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   225                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_11b ; LMM w/ IndexPage<==>StackPage
   226                             ENDIF ;  PGMODE LOCKED
   227                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   228                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b ; LMM with independent IndexPage
   229                             ENDIF ; PGMODE FREE
   230                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   231  0000'                      endm
   232                          
   233                             ;-----------------------------------------------
   234                             ; Force indexed addr mode operands to Stack Pg
   235                             ;-----------------------------------------------
   236                             ;
   237                             ;  DESC: Force instructions that use indexed address mode to reference the
   238                             ;        stack page (as defined by STK_PP). This macro sets the "Indexed
   239                             ;        Stack Mode" bit (LSB) of the PGMODE bit field in the CPU Flag
   240                             ;        register, F. (See also RAM_SETPAGE_IDX2STK, above.)
   241                             ;
   242                             ; INPUT: none
   243                             ;
   244                             ;  COST: 4 instruction cycles (in LMM only)
   245                          
   246                             macro RAM_X_POINTS_TO_STACKPAGE
   247                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   248                                or   F, FLAG_PGMODE_01b
   249                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   250  0000'                      endm
   251                          
   252                             ;-----------------------------------------------
   253                             ;  Force indexed addr mode operands to Index Pg
   254                             ;-----------------------------------------------
   255                             ;
   256                             ;  DESC: Permit instructions that use indexed address mode to reference page
   257                             ;        zero or the page pointed to by the IDX_PP register, depending on the
   258                             ;        setting of the MSb (or "Direct Page Mode" bit) of the PGMODE bits
   259                             ;        in the CPU Flag register, F. (This macro clears the PGMODE LSb.)
   260                             ;
   261                             ; INPUT: none
   262                             ;
   263                             ;  COST: 4 instruction cycles (in LMM only)
   264                          
   265                             macro RAM_X_POINTS_TO_INDEXPAGE
   266                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   267                                and  F, ~FLAG_PGMODE_01b
   268                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   269  0000'                      endm
   270                          
   271                             ;-----------------------------------------------
   272                             ;  Function Prologue
   273                             ;-----------------------------------------------
   274                             ;
   275                             ;  Prologue for functions that run in the LMM and SMM.
   276                             ;
   277                          
   278                             macro RAM_PROLOGUE( ACTUAL_CLASS )
   279                          
   280                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   281                             ; Nothing to do
   282                             ENDIF ; RAM_USE_CLASS_1
   283                          
   284                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   285                                IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   286                                   RAM_X_POINTS_TO_STACKPAGE         ; exit native paging mode!
   287                                ENDIF
   288                             ENDIF ; RAM_USE_CLASS_2
   289                          
   290                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   291                                IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   292                                   RAM_X_POINTS_TO_INDEXPAGE         ; exit native paging mode!
   293                                ENDIF
   294                             ENDIF ; RAM_USE_CLASS_3
   295                          
   296                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   297                             ; Nothing to do
   298                             ENDIF ; RAM_USE_CLASS_4
   299                          
   300  0000'                      endm
   301                          
   302                             ;-----------------------------------------------
   303                             ;  Function Epilogue
   304                             ;-----------------------------------------------
   305                             ;
   306                             ;  Prologue for functions that run in the LMM and SMM.
   307                             ;
   308                          
   309                             macro RAM_EPILOGUE( ACTUAL_CLASS )
   310                          
   311                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   312                             ; Nothing to do
   313                             ENDIF ; RAM_USE_CLASS_1
   314                          
   315                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   316                                RAM_RESTORE_NATIVE_PAGING
   317                             ENDIF ; RAM_USE_CLASS_2
   318                          
   319                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   320                                RAM_RESTORE_NATIVE_PAGING
   321                             ENDIF ; RAM_USE_CLASS_3
   322                          
   323                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   324                             ; Nothing to do
   325                             ENDIF ; RAM_USE_CLASS_4
   326                          
   327  0000'                      endm
   328                          
   329                             ;-----------------------------------------------
   330                             ;  Preserve Register
   331                             ;-----------------------------------------------
   332                             ;
   333                             ;  DESC: Preserve a register value on the stack
   334                             ;
   335                             ; INPUT: Name or address of register in I/O Space
   336                             ;        The I/O bank is an implicit parameter. That is, this function will
   337                             ;        Access the I/O bank currently specified by the CPU Flag register.
   338                             ;
   339                             ;  USES: CPU 'A' register
   340                             ;
   341                             ;  COST: 9 instruction cycles
   342                          
   343                             macro REG_PRESERVE( IOReg )
   344                             mov   A, reg[ @IOReg ]
   345                             push  A
   346  0000'                      endm
   347                          
   348                             ;-----------------------------------------------
   349                             ;  Restore Register
   350                             ;-----------------------------------------------
   351                             ;
   352                             ;  DESC: Restore a register value from the stack
   353                             ;
   354                             ; INPUT: Name or address of register in I/O Space
   355                             ;        The I/O bank is an implicit parameter. That is, this function will
   356                             ;        Access the I/O bank currently specified by the CPU Flag register.
   357                             ;
   358                             ;  USES: CPU 'A' register
   359                             ;
   360                             ;  COST: 10 instruction cycles
   361                          
   362                             macro REG_RESTORE( IOReg )
   363                             pop   A
   364                             mov   reg[ @IOReg ], A
   365  0000'                      endm
   366                          
   367                             ;-----------------------------------------------
   368                             ;  Preserve Volatile Page Pointer Registers
   369                             ;-----------------------------------------------
   370                             ;
   371                             ;  DESC: Invoked by ISRs before switching to the LMM mode and calling
   372                             ;        functions that require on it.
   373                             ;
   374                             ; INPUT: none
   375                             ;
   376                             ;  USES: CPU 'A' register
   377                             ;
   378                             ;  COST: 45 instruction cycles (in LMM only)
   379                          
   380                             macro ISR_PRESERVE_PAGE_POINTERS
   381                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   382                                REG_PRESERVE CUR_PP
   383                                REG_PRESERVE IDX_PP
   384                                REG_PRESERVE MVR_PP
   385                                REG_PRESERVE MVW_PP
   386                             ENDIF
   387  0000'                      endm
   388                          
   389                             ;-----------------------------------------------
   390                             ;  Restore Volatile Page Pointer Registers
   391                             ;-----------------------------------------------
   392                             ;
   393                             ;  DESC: Undo for RAM_PRESERVE_PAGE_POINTERS macro. Invoked by ISRs after
   394                             ;        calling functions that run in the LMM mode and before executing
   395                             ;        the RETI instruction.
   396                             ;
   397                             ; INPUT: none
   398                             ;
   399                             ;  USES: CPU 'A' register
   400                             ;
   401                             ;  COST: 50 instruction cycles (in LMM only)
   402                          
   403                             macro ISR_RESTORE_PAGE_POINTERS
   404                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   405                                REG_RESTORE MVW_PP
   406                                REG_RESTORE MVR_PP
   407                                REG_RESTORE IDX_PP
   408                                REG_RESTORE CUR_PP
   409                             ENDIF
   410                             endm
      + 0000'                   
      + 0000'                   ; end of file Memory.inc
      + 0000'                   ;;*****************************************************************************
;;******************
      +                         ***********************************************************
;;  FILENAME: Timer16.inc
;;   Version: 
      +                         2.6, Updated on 2013/5/19 at 10:44:39
;;  Generated by PSoC Designer 5.4.2946
;;
;;  DESCRIPTION: As
      +                         sembler declarations for the Timer16 user module interface
;;---------------------------------------
      +                         --------------------------------------
;;  Copyright (c) Cypress Semiconductor 2013. All Rights Rese
      +                         rved.
;;*****************************************************************************
;;************
      +                         *****************************************************************
   824                          
   825                          ; end of file m8c.inc
    29  00C0                    FLAG_PGMODE_MASK:  equ 0C0h     ; Paging control for > 256 bytes of RAM
    30  0000                    FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
    31  0040                    FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
    32  0080                    FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
    33  00C0                    FLAG_PGMODE_3:     equ 0C0h       ; Direct to CUR_PP page, indexed to STK_PP page
    34  0000                    FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
    35  0040                    FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
    36  0080                    FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
    37  00C0                    FLAG_PGMODE_11b:   equ 0C0h       ; Same as PGMODE_3
    38  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    39  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    40  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    41  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    42  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    43                          
    44                          
    45                          ;;=============================================================================
    46                          ;;      Register Space, Bank 0
    47                          ;;=============================================================================
    48                          
    49                          ;------------------------------------------------
    50                          ;  Port Registers
    51                          ;  Note: Also see this address range in Bank 1.
    52                          ;------------------------------------------------
    53                          ; Port 0
    54  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    55  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    56  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    57  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    58                          ; Port 1
    59  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    60  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    61  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    62  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    63                          ; Port 2
    64  0008                    PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
    65  0009                    PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
    66  000A                    PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
    67  000B                    PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
    68                          ; Port 3
    69  000C                    PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
    70  000D                    PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
    71  000E                    PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
    72  000F                    PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
    73                          ; Port 4
    74  0010                    PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
    75  0011                    PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
    76  0012                    PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
    77  0013                    PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
    78                          
    79                          ;------------------------------------------------
    80                          ;  Digital PSoC(tm) block Registers
    81                          ;  Note: Also see this address range in Bank 1.
    82                          ;------------------------------------------------
    83                          ; Digital PSoC block 00, Basic Type C
    84  0020                    DBC00DR0:     equ 20h          ; data register 0                          (#)
    85  0021                    DBC00DR1:     equ 21h          ; data register 1                          (W)
    86  0022                    DBC00DR2:     equ 22h          ; data register 2                          (RW)
    87  0023                    DBC00CR0:     equ 23h          ; control & status register 0              (#)
    88                          
    89                          ; Digital PSoC block 01, Basic Type C
    90  0024                    DBC01DR0:     equ 24h          ; data register 0                          (#)
    91  0025                    DBC01DR1:     equ 25h          ; data register 1                          (W)
    92  0026                    DBC01DR2:     equ 26h          ; data register 2                          (RW)
    93  0027                    DBC01CR0:     equ 27h          ; control & status register 0              (#)
    94                          
    95                          ; Digital PSoC block 02, Communications Type C
    96  0028                    DCC02DR0:     equ 28h          ; data register 0                          (#)
    97  0029                    DCC02DR1:     equ 29h          ; data register 1                          (W)
    98  002A                    DCC02DR2:     equ 2Ah          ; data register 2                          (RW)
    99  002B                    DCC02CR0:     equ 2Bh          ; control & status register 0              (#)
   100                          
   101                          ; Digital PSoC block 03, Communications Type C
   102  002C                    DCC03DR0:     equ 2Ch          ; data register 0                          (#)
   103  002D                    DCC03DR1:     equ 2Dh          ; data register 1                          (W)
   104  002E                    DCC03DR2:     equ 2Eh          ; data register 2                          (RW)
   105  002F                    DCC03CR0:     equ 2Fh          ; control & status register 0              (#)
   106                          
   107                          ; Digital PSoC block 10, Basic Type C
   108  0030                    DBC10DR0:     equ 30h          ; data register 0                          (#)
   109  0031                    DBC10DR1:     equ 31h          ; data register 1                          (W)
   110  0032                    DBC10DR2:     equ 32h          ; data register 2                          (RW)
   111  0033                    DBC10CR0:     equ 33h          ; control & status register 0              (#)
   112                          
   113                          ; Digital PSoC block 11, Basic Type C
   114  0034                    DBC11DR0:     equ 34h          ; data register 0                          (#)
   115  0035                    DBC11DR1:     equ 35h          ; data register 1                          (W)
   116  0036                    DBC11DR2:     equ 36h          ; data register 2                          (RW)
   117  0037                    DBC11CR0:     equ 37h          ; control & status register 0              (#)
   118                          
   119                          ; Digital PSoC block 12, Communications Type C
   120  0038                    DCC12DR0:     equ 38h          ; data register 0                          (#)
   121  0039                    DCC12DR1:     equ 39h          ; data register 1                          (W)
   122  003A                    DCC12DR2:     equ 3Ah          ; data register 2                          (RW)
   123  003B                    DCC12CR0:     equ 3Bh          ; control & status register 0              (#)
   124                          
   125                          ; Digital PSoC block 13, Communications Type C
   126  003C                    DCC13DR0:     equ 3Ch          ; data register 0                          (#)
   127  003D                    DCC13DR1:     equ 3Dh          ; data register 1                          (W)
   128  003E                    DCC13DR2:     equ 3Eh          ; data register 2                          (RW)
   129  003F                    DCC13CR0:     equ 3Fh          ; control & status register 0              (#)
   130                          
   131                          ;-------------------------------------
   132                          ;  Analog Control Registers
   133                          ;-------------------------------------
   134  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
   135  00C0                    AMX_IN_ACI3:          equ C0h    ; MASK: column 3 input mux
   136  0030                    AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
   137  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
   138  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
   139                          
   140  0061                    AMUX_CFG:      equ 61h          ; Analog MUX Configuration
   141  0030                    AMUX_CFG_INTCAP:       equ 30h    ;
   142  000E                    AMUX_CFG_MUXCLK:  	  equ 0Eh	 ;
   143  0001                    AMUX_CFG_EN:		  	  equ 01h	 ;
   144                          
   145                          ; old declarations DO NOT USE
   146  0061                    AMUXCFG:      equ 61h          ; Analog MUX Configuration
   147  0030                    AMUXCFG_INTCAP:       equ 30h    ;
   148  000E                    AMUXCFG_MUXCLK:  	  equ 0Eh	 ;
   149  0001                    AMUXCFG_EN:		  	  equ 01h	 ;
   150                          
   151  0062                    PWM_CR:       equ 62h          ; Pulse-Width Modulator Control
   152  0038                    PWM_CR_HIGH:          equ 38h    ; MASK: PWM high time
   153  0006                    PWM_CR_LOW:           equ 06h	 ; MASK: PWM low time
   154  0001                    PWM_CR_EN:            equ 01h	 ; MASK: Enable/Disable PWM function
   155                          
   156  0063                    ARF_CR:       equ 63h          ; Analog Reference Control
   157                          
   158  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus Register           (#)
   159  0080                    CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
   160  0040                    CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
   161  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
   162  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
   163  0008                    CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
   164  0004                    CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
   165  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
   166  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   167                          
   168  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   169  0020                    CMP_CR1_CLDIS1:       equ 20h    ; MASK: Column 1 comparator output latch
   170  0010                    CMP_CR1_CLDIS0:	      equ 10h    ; MASK: Column 0 comparator output latch
   171                          
   172  0068                    ADC0_CR:      equ 68h          ; Analog Column 0 Configuration
   173  0080                    ADC0_CR_CMPST:        equ 80h    ;
   174  0040                    ADC0_CR_LOREN:        equ 40h    ;
   175  0020                    ADC0_CR_SHEN:         equ 20h    ;
   176  0008                    ADC0_CR_CBSRC:        equ 08h    ;
   177  0004                    ADC0_CR_ADCM:         equ 04h    ;
   178  0001                    ADC0_CR_EN:	          equ 01h    ;
   179                          
   180  0069                    ADC1_CR:      equ 69h          ; Analog Column 1 Configuration
   181  0080                    ADC1_CR_CMPST:        equ 80h    ;
   182  0040                    ADC1_CR_LOREN:        equ 40h    ;
   183  0020                    ADC1_CR_SHEN:         equ 20h    ;
   184  0008                    ADC1_CR_CBSRC:        equ 08h    ;
   185  0004                    ADC1_CR_ADCM:         equ 04h    ;
   186  0001                    ADC1_CR_EN:	          equ 01h    ;
   187                          
   188                          ; Continuous Time PSoC block Type E Row 0 Col 0
   189  0072                    ACE00CR1:     equ 72h          ; Control register 1                       (RW)
   190  0073                    ACE00CR2:     equ 73h          ; Control register 2                       (RW)
   191                          
   192                          ; Continuous Time PSoC block Type E Row 0 Col 1
   193  0076                    ACE01CR1:     equ 76h          ; Control register 1                       (RW)
   194  0077                    ACE01CR2:     equ 77h          ; Control register 2                       (RW)
   195                          
   196                          ; Switched Cap PSoC blockType E Row 1 Col 0
   197  0080                    ASE10CR0:     equ 80h          ; Control register 0                       (RW)
   198                          
   199                          ; Switched Cap PSoC blockType E Row 1 Col 1
   200  0084                    ASE11CR0:     equ 84h          ; Control register 0                       (RW)
   201                          
   202                          ;-----------------------------------------------
   203                          ;  Global General Purpose Data Registers
   204                          ;-----------------------------------------------
   205  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   206  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   207  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   208  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   209                          
   210                          ;------------------------------------------------
   211                          ;  Row Digital Interconnects
   212                          ;
   213                          ;  Note: the following registers are mapped into
   214                          ;  both register bank 0 AND register bank 1.
   215                          ;------------------------------------------------
   216                          
   217  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   218  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   219  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   220  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   221  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   222  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   223  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   224                          
   225  00B8                    RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
   226  00B9                    RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
   227  00BA                    RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
   228  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   229  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   230  00BD                    RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
   231  00BE                    RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
   232                          
   233                          ;-----------------------------------------------
   234                          ;  Ram Page Pointers
   235                          ;-----------------------------------------------
   236  00D0                    CUR_PP:      equ 0D0h           ; Current   Page Pointer
   237  00D1                    STK_PP:      equ 0D1h           ; Stack     Page Pointer
   238  00D3                    IDX_PP:      equ 0D3h           ; Index     Page Pointer
   239  00D4                    MVR_PP:      equ 0D4h           ; MVI Read  Page Pointer
   240  00D5                    MVW_PP:      equ 0D5h           ; MVI Write Page Pointer
   241                          
   242                          ;------------------------------------------------
   243                          ;  I2C Configuration Registers
   244                          ;------------------------------------------------
   245  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   246  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   247  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   248  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   249  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   250  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   251  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   252  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   253  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   254  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   255                          
   256  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   257  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   258  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   259  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   260  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   261  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   262  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   263  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   264  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   265                          
   266  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   267                          
   268  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   269  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   270  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   271  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   272  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   273                          
   274                          ;------------------------------------------------
   275                          ;  System and Global Resource Registers
   276                          ;------------------------------------------------
   277  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   278                                                         ; Use INT_MSK0 bit field masks
   279  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   280                                                         ; Use INT_MSK1 bit field masks
   281  00DC                    INT_CLR2:     equ 0DCh          ; Interrupt Clear Register 2               (RW)
   282                                                         ; Use INT_MSK2 bit field masks
   283  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   284                                                         ; Use INT_MSK3 bit field masks
   285                          
   286  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   287  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   288  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   289                          
   290  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   291  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   292  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   293  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   294  0010                    INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
   295  0008                    INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
   296  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   297  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   298  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   299                          
   300  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   301  0080                    INT_MSK1_DCC13:            equ 80h ; MASK: enable/disable DCC13 block interrupt
   302  0040                    INT_MSK1_DCC12:            equ 40h ; MASK: enable/disable DCC12 block interrupt
   303  0020                    INT_MSK1_DBC11:            equ 20h ; MASK: enable/disable DBC11 block interrupt
   304  0010                    INT_MSK1_DBC10:            equ 10h ; MASK: enable/disable DBC10 block interrupt
   305  0008                    INT_MSK1_DCC03:            equ 08h ; MASK: enable/disable DCC03 block interrupt
   306  0004                    INT_MSK1_DCC02:            equ 04h ; MASK: enable/disable DCC02 block interrupt
   307  0002                    INT_MSK1_DBC01:            equ 02h ; MASK: enable/disable DBC01 block interrupt
   308  0001                    INT_MSK1_DBC00:            equ 01h ; MASK: enable/disable DBC00 block interrupt
   309                          
   310  00DF                    INT_MSK2:     equ DFh			; Custom block Mask Register			   (RW)
   311  0010                    INT_MSK2_SARADC:           equ 10h ; MASK: enable/disable SARADC block interrupt
   312  0020                    INT_MSK2_CSD0:             equ 20h ; MASK: enable/disable CSD0 block interrupt
   313  0040                    INT_MSK2_CSD1:             equ 40h ; MASK: enable/disable CSD1 block interrupt
   314  0080                    INT_MSK2_RTC:              equ 80h ; MASK: enable/disable RTC block interrupt
   315                          
   316  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   317  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   318                          
   319                          ;------------------------------------------------------
   320                          ;  MAC Registers
   321                          ;------------------------------------------------------
   322                          
   323  00E8                    MUL0_X:       equ 0E8h          ; Multiply Input X Register                (W)
   324  00E9                    MUL0_Y:       equ 0E9h          ; Multiply Input Y Register                (W)
   325  00EA                    MUL0_DH:      equ 0EAh          ; Multiply Result High Byte Register       (R)
   326  00EB                    MUL0_DL:      equ 0EBh          ; Multiply Result Low Byte Register        (R)
   327                          
   328  00EC                    ACC0_DR1:     equ 0ECh          ; Accumulator Data Register 1              (RW)
   329  00ED                    ACC0_DR0:     equ 0EDh          ; Accumulator Data Register 0              (RW)
   330  00EE                    ACC0_DR3:     equ 0EEh          ; Accumulator Data Register 3              (RW)
   331  00EF                    ACC0_DR2:     equ 0EFh          ; Accumulator Data Register 2              (RW)
   332                          
   333                          ; DECIMATOR Control Registers
   334  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   335  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   336                          
   337                          ;------------------------------------------------------
   338                          ;  System Status and Control Registers
   339                          ;
   340                          ;  Note: The following registers are mapped into both
   341                          ;        register bank 0 AND register bank 1.
   342                          ;------------------------------------------------------
   343  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   344                                                             ; Use FLAG_ masks defined at top of file
   345                          
   346  00FD                    DAC_D:        equ 0FDh		   ; DAC Data Register                        (RW)
   347                          
   348  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   349  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: flag, Internal Reset Status bit
   350  0010                    CPU_SCR1_SLIMO:         equ 10h	   ; MASK: Slow IMO (internal main osc) enable
   351  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   352  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   353  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   354                          
   355  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   356  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   357  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   358  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   359  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   360  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   361                          
   362                          ;------------------------------------------------------
   363                          ;  Neon Capsense Digital Control Registers
   364                          ;------------------------------------------------------
   365  0050                    CSD0_DR0_L:				equ 50h		; Capsense 0 data low 0				(RW)
   366  0054                    CSD0_DR0_H:				equ 54h		; Capsense 0 data high 0			(RW)
   367  0058                    CSD1_DR0_L:				equ 58h		; Capsense 1 data low 0				(RW)
   368  005C                    CSD1_DR0_H:				equ 5Ch		; Capsense 1 data high 0			(RW)
   369  0051                    CSD0_DR1_L:				equ 51h		; Capsense 0 data low 1				(RW)
   370  0055                    CSD0_DR1_H:				equ 55h		; Capsense 0 data high 1			(RW)
   371  0059                    CSD1_DR1_L:				equ 59h		; Capsense 1 data low 1				(RW)
   372  005D                    CSD1_DR1_H:				equ 5Dh		; Capsense 1 data high 1			(RW)
   373  0052                    CSD0_CNT_L:				equ 52h		; Capsense 0 counter low			(RW)
   374  0056                    CSD0_CNT_H:				equ 56h		; Capsense 0 counter high			(RW)
   375  005A                    CSD1_CNT_L:				equ 5Ah		; Capsense 1 counter low			(RW)
   376  005E                    CSD1_CNT_H:				equ	5Eh		; Capsense 1 counter high			(RW)
   377  0053                    CSD0_CR0:				equ 53h		; Capsense 0 control 0				(RW)
   378  005B                    CSD1_CR0:				equ 5Bh		; Capsense 1 control 0				(RW)
   379  0057                    CSD0_CR1:				equ 57h		; Capsense 0 control 1				(RW)
   380  005F                    CSD1_CR1:				equ 5Fh		; Capsense 1 control 1				(RW)
   381                          
   382                          ;------------------------------------------------------
   383                          ;  Neon Analog Registers
   384                          ;------------------------------------------------------
   385  0065                    ASY_CR:					equ 65h		; Analog Synchronization Control	(RW)
   386  006A                    ADC_DH:					equ 6Ah		; ADC data high						(RW)
   387  006B                    ADC_DL:					equ 6Bh		; ADC data low						(RW)
   388  00C8                    PWMVREF0:				equ C8h		; PWM Voltage Reference 0			(RW)
   389  00C9                    PWMVREF1:				equ C9h		; PWM Voltage Reference 1			(RW)
   390  00CB                    PWMSRC:					equ CBh		; PWM Source						(RW)
   391  00CA                    IDACMODE:				equ CAh		; IDAC Mode							(RW)
   392  00FC                    IDACR_D:				equ FCh		; Analog Mux DAC data 0				(RW)
   393  00FD                    IDACL_D:				equ FDh		; Analog Mux DAC data 1				(RW)
   394                          
   395                          ;------------------------------------------------------
   396                          ;  Neon Digital Registers
   397                          ;------------------------------------------------------
   398  00B7                    RDI0DSM:				equ B7h		; Row Digital Interconnect input select 0	(RW)
   399  00BF                    RDI1DSM:				equ BFh		; Row Digital Interconnect input select 1	(RW)
   400                          
   401                          ;------------------------------------------------------
   402                          ;  Neon Test Registers
   403                          ;------------------------------------------------------
   404  00CC                    TSCR0:					equ CCh		; Tsource 0							(RW)
   405  00CD                    TSCMPH:					equ CDh		; TSCMP high						(RW)
   406  00CE                    TSCMPL:					equ CEh		; TSCMP low							(RW)
   407  00CF                    TSCR1:					equ CFh		; Tsource 1							(RW)
   408                          
   409                          ;;=============================================================================
   410                          ;;      Register Space, Bank 1
   411                          ;;=============================================================================
   412                          
   413                          ;------------------------------------------------
   414                          ;  Port Registers
   415                          ;  Note: Also see this address range in Bank 0.
   416                          ;------------------------------------------------
   417                          ; Port 0
   418  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   419  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   420  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   421  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   422                          
   423                          ; Port 1
   424  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   425  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   426  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   427  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   428                          
   429                          ; Port 2
   430  0008                    PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
   431  0009                    PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
   432  000A                    PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
   433  000B                    PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
   434                          
   435                          ; Port 3
   436  000C                    PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
   437  000D                    PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
   438  000E                    PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
   439  000F                    PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
   440                          
   441                          ; Port 4
   442  0010                    PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
   443  0011                    PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
   444  0012                    PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
   445  0013                    PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
   446                          
   447                          ;------------------------------------------------
   448                          ;  Digital PSoC(tm) block Registers
   449                          ;  Note: Also see this address range in Bank 0.
   450                          ;------------------------------------------------
   451                          
   452                          ; Digital PSoC block 00, Basic Type C
   453  0020                    DBC00FN:      equ 20h          ; Function Register                        (RW)
   454  0021                    DBC00IN:      equ 21h          ;    Input Register                        (RW)
   455  0022                    DBC00OU:      equ 22h          ;   Output Register                        (RW)
   456  0023                    DBC00CR1:     equ 23h          ;   control & status register 1            (RW)
   457                          
   458                          ; Digital PSoC block 01, Basic Type C
   459  0024                    DBC01FN:      equ 24h          ; Function Register                        (RW)
   460  0025                    DBC01IN:      equ 25h          ;    Input Register                        (RW)
   461  0026                    DBC01OU:      equ 26h          ;   Output Register                        (RW)
   462  0027                    DBC01CR1:     equ 27h          ;   control & status register 1            (RW)
   463                          
   464                          ; Digital PSoC block 02, Communications Type C
   465  0028                    DCC02FN:      equ 28h          ; Function Register                        (RW)
   466  0029                    DCC02IN:      equ 29h          ;    Input Register                        (RW)
   467  002A                    DCC02OU:      equ 2Ah          ;   Output Register                        (RW)
   468  002B                    DBC02CR1:     equ 2Bh          ;   control & status register 1            (RW)
   469                          
   470                          ; Digital PSoC block 03, Communications Type C
   471  002C                    DCC03FN:      equ 2Ch          ; Function Register                        (RW)
   472  002D                    DCC03IN:      equ 2Dh          ;    Input Register                        (RW)
   473  002E                    DCC03OU:      equ 2Eh          ;   Output Register                        (RW)
   474  0029                    DBC03CR1:     equ 29h          ;   control & status register 1            (RW)
   475                          
   476                          ; Digital PSoC block 10, Basic Type C
   477  0030                    DBC10FN:      equ 30h          ; Function Register                        (RW)
   478  0031                    DBC10IN:      equ 31h          ;    Input Register                        (RW)
   479  0032                    DBC10OU:      equ 32h          ;   Output Register                        (RW)
   480  0033                    DBC10CR1:     equ 33h          ;   control & status register 1            (RW)
   481                          
   482                          ; Digital PSoC block 11, Basic Type C
   483  0034                    DBC11FN:      equ 34h          ; Function Register                        (RW)
   484  0035                    DBC11IN:      equ 35h          ;    Input Register                        (RW)
   485  0036                    DBC11OU:      equ 36h          ;   Output Register                        (RW)
   486  0037                    DBC11CR1:     equ 37h          ;   control & status register 1            (RW)
   487                          
   488                          ; Digital PSoC block 12, Communications Type C
   489  0038                    DCC12FN:      equ 38h          ; Function Register                        (RW)
   490  0039                    DCC12IN:      equ 39h          ;    Input Register                        (RW)
   491  003A                    DCC12OU:      equ 3Ah          ;   Output Register                        (RW)
   492  003B                    DBC12CR1:     equ 3Bh          ;   control & status register 1            (RW)
   493                          
   494                          ; Digital PSoC block 13, Communications Type C
   495  003C                    DCC13FN:      equ 3Ch          ; Function Register                        (RW)
   496  003D                    DCC13IN:      equ 3Dh          ;    Input Register                        (RW)
   497  003E                    DCC13OU:      equ 3Eh          ;   Output Register                        (RW)
   498  003F                    DBC13CR1:     equ 3Fh          ;   control & status register 1            (RW)
   499                          
   500                          ;------------------------------------------------
   501                          ;  System and Global Resource Registers
   502                          ;  Note: Also see this address range in Bank 0.
   503                          ;------------------------------------------------
   504                          
   505  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   506  00C0                    CLK_CR0_ACOLUMN_3:    equ C0h    ; MASK: Specify clock for analog cloumn
   507  0030                    CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
   508  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   509  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   510                          
   511  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   512  0018                    CLK_CR1_ACLK1:        equ 18h    ; MASK: Digital PSoC block for analog source
   513  0003                    CLK_CR1_ACLK0:        equ 03h    ; MASK: Digital PSoC block for analog source
   514                          
   515  0003                    CLK_CR1_ACLK2:        equ 03h    ; Deprecated do not use
   516                          
   517  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   518  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   519                          
   520  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   521  000F                    AMD_CR0_AMOD0:        equ 0Fh    ; MASK: Modulation source for analog column 0
   522                          
   523  0064                    CMP_GO_EN:    equ 64h          ; Comparator Bus To Global Out Enable      (RW)
   524  0080                    CMP_GO_EN_GOO5:       equ 80h    ; MASK: Selected Col 1 signal to GOO5
   525  0040                    CMP_GO_EN_GOO1:       equ 40h    ; MASK: Selected Col 1 signal to GOO1
   526  0030                    CMP_GO_EN_SEL1:       equ 30h    ; MASK: Column 1 Signal Select
   527  0008                    CMP_GO_EN_GOO4:       equ 08h    ; MASK: Selected Col 0 signal to GOO4
   528  0004                    CMP_GO_EN_GOO0:       equ 04h    ; MASK: Selected Col 0 signal to GOO0
   529  0003                    CMP_GO_EN_SEL0:       equ 03h    ; MASK: Column 0 Signal Select
   530                          
   531  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   532  000F                    AMD_CR1_AMOD1:        equ 0Fh    ; MASK: Modulation ctrl for analog column 1
   533                          
   534  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   535  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   536  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   537                          
   538  006B                    CLK_CR3:      equ 6Bh          ; Analog Clock Source Control Register 3   (RW)
   539  0040                    CLK_CR3_SYS1:         equ 40h    ; MASK: Analog Clock 1 selection
   540  0030                    CLK_CR3_DIVCLK1:      equ 30h    ; MASK: Analog Clock 1 divider
   541  0004                    CLK_CR3_SYS0:         equ 04h    ; MASK: Analog Clock 0 selection
   542  0003                    CLK_CR3_DIVCLK0:      equ 03h    ; MASK: Analog Clock 0 divider
   543                          
   544                          ;------------------------------------------------
   545                          ;  Global Digital Interconnects
   546                          ;------------------------------------------------
   547                          
   548  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   549  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   550  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   551  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   552                          
   553  00A0                    GDI_O_IN_CR:  equ 0A0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   554  00A1                    GDI_E_IN_CR:  equ 0A1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   555  00A2                    GDI_O_OU_CR:  equ 0A2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   556  00A3                    GDI_E_OU_CR:  equ 0A3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   557                          
   558  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   559  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   560                          
   561                          ;------------------------------------------------
   562                          ;  Analog Mux Bus Port Enable Bits
   563                          ;------------------------------------------------
   564  00D8                    MUX_CR0:      equ 0D8h          ; Analog Mux Port 0 Bit Enables Register
   565  00D9                    MUX_CR1:      equ 0D9h          ; Analog Mux Port 1 Bit Enables Register
   566  00DA                    MUX_CR2:      equ 0DAh          ; Analog Mux Port 2 Bit Enables Register
   567  00DB                    MUX_CR3:      equ 0DBh          ; Analog Mux Port 3 Bit Enables Register
   568  00EC                    MUX_CR4:      equ 0ECh          ; Analog Mux Port 4 Bit Enables Register
   569                          
   570                          ;------------------------------------------------
   571                          ;  Clock and System Control Registers
   572                          ;------------------------------------------------
   573                          
   574  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   575  0080                    OSC_GO_EN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   576  0040                    OSC_GO_EN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   577  0020                    OSC_GO_EN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   578  0010                    OSC_GO_EN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   579  0008                    OSC_GO_EN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   580  0004                    OSC_GO_EN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   581  0002                    OSC_GO_EN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   582  0001                    OSC_GO_EN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   583                          
   584  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   585  0003                    OSC_CR4_VC3SEL:       equ 03h    ; MASK: System VC3 Clock source
   586                          
   587  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   588                          
   589  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   590  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   591  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   592  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   593  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   594  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   595  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   596  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   597  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   598  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   599  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   600  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   601  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   602  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   603  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   604  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   605  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   606  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   607                          
   608  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   609  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   610  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   611                          
   612  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   613  0080                    OSC_CR2_PLLGAIN:      equ 80h    ; MASK: High/Low gain
   614  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   615  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   616  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   617                          
   618  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   619  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   620  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   621  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   622  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   623  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   624  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   625  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   626                          
   627  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   628  0008                    VLT_CMP_NOWRITE:      equ 08h    ; MASK: Vcc below Flash Write level
   629  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   630  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   631  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   632                          
   633  00E5                    ADC0_TR:      equ 0E5h          ; ADC Column 0 Trim Register
   634  00E6                    ADC1_TR:      equ 0E6h          ; ADC Column 1 Trim Register
   635                          
   636  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   637  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   638  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   639  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   640                          
   641  00FA                    FLS_PR1:      equ 0FAh          ; Flash Program Register 1                 (RW)
   642  0003                    FLS_PR1_BANK:         equ 03h    ; MASK: Select Active Flash Bank
   643                          
   644  00FD                    DAC_CR0:       equ 0FDh          ; Analog Mux DAC Control Register 0
   645  00DC                    DAC_CR1:       equ 0DCh          ; Analog Mux DAC Control Register 1
   646  0008                    DAC_CR_IRANGE:        equ 08h    ; MASK: Sets the DAC Range low or high
   647  0006                    DAC_CR_OSCMODE:       equ 06h    ; MASK: Defines the reset mode for AMux
   648  0001                    DAC_CR_ENABLE:        equ 01h    ; MASK: Enable/Disable DAC function
   649                          
   650                          ;------------------------------------------------
   651                          ;  I2C Control Registers
   652                          ;------------------------------------------------
   653                          
   654  00AD                    I2C_ADDR:    equ 0ADh          ; I2C Address Register (RW)
   655                          
   656                          ;------------------------------------------------------
   657                          ;  Neon Analog Registers
   658                          ;------------------------------------------------------
   659  0053                    VDAC50CR0:		equ 53h			; V DAC5 control 0				(RW)
   660  0057                    VDAC51CR0:		equ 57h			; V DAC5 control 1				(RW)
   661  00A8                    ADC_CR0:		equ A8h			; ADC control 0					(RW)
   662  00A9                    ADC_CR1:		equ A9h			; ADC control 1					(RW)
   663  00AA                    ADC_CR2:		equ AAh			; ADC control 2					(RW)
   664  00AB                    ADC_CR3TRIM:	equ ABh			; ADC control 3					(RW)
   665  00AC                    ADC_CR4:		equ ACh			; ADC control 4					(RW)
   666  00E7                    VDAC_TRIM:		equ E7h			; V DAC trim					(RW)
   667                          
   668                          ;------------------------------------------------------
   669                          ;  Neon Current Sense CMP Registers
   670                          ;------------------------------------------------------
   671  0050                    CMP0CR1:		equ 50h			; CMP0 control 1				(RW)
   672  0051                    CMP0CR2:		equ 51h			; CMP0 control 2				(RW)
   673  0054                    CMP1CR1:		equ 54h			; CMP1 control 1				(RW)
   674  0055                    CMP1CR2:		equ 55h			; CMP1 control 2				(RW)
   675  0058                    CSCMPCR0:		equ 58h			; CSCMP control 0				(RW)
   676  0059                    CSCMPGOEN:		equ 59h			; CSCMO global out enable		(RW)
   677  005A                    CSLUTCR0:		equ 5Ah			; CSLUT control 0				(RW)
   678  005B                    CMPCOLMUX:		equ 5Bh			; CMP Column Mux				(RW)
   679  005C                    CMPPWMCR:		equ 5Ch			; CMP PWM control				(RW)
   680  005D                    CMPFLTCR:		equ 5Dh			; CMP filter control			(RW)
   681  005E                    CMPCLK1:		equ 5Eh			; CMP clock 1					(RW)
   682  005F                    CMPCLK0:		equ 5Fh			; CMP clock 0					(RW)
   683                          
   684                          ;------------------------------------------------------
   685                          ;  Neon Real Time Clock Registers
   686                          ;------------------------------------------------------
   687  00A4                    RTCH:			equ A4h			; Real time current hour		(RW)
   688  00A5                    RTCM:			equ A5h			; Real time current minute		(RW)
   689  00A6                    RTCS:			equ A6h			; Real time current second		(RW)
   690  00A7                    RTCCR:			equ A7h			; Real time clock control		(RW)
   691                          
   692                          ;------------------------------------------------------
   693                          ;  Analog MUX Config Registers
   694                          ;------------------------------------------------------
   695                          
   696  006A                    AMUX_CFG1:			equ 6Ah  ; Analog MUX Configuration 1
   697  0020                    AMUX_CFG1_GOINVR:	equ 20h  ;
   698  0010                    AMUX_CFG1_GOINVL:  	equ 10h	 ;
   699  000C                    AMUX_CFG1_AMUXMODR:	equ 0Ch	 ;
   700  0003                    AMUX_CFG1_AMUXMODL:	equ 03h	 ;
   701                          
   702                          ;;=============================================================================
   703                          ;;      M8C System Macros
   704                          ;;  These macros should be used when their functions are needed.
   705                          ;;=============================================================================
   706                          
   707                          ;----------------------------------------------------
   708                          ;  Swapping Register Banks
   709                          ;----------------------------------------------------
   710                              macro M8C_SetBank0
   711                              and   F, ~FLAG_XIO_MASK
   712  0000'                       endm
   713                          
   714                              macro M8C_SetBank1
   715                              or    F, FLAG_XIO_MASK
   716  0000'                       endm
   717                          
   718                          ;----------------------------------------------------
   719                          ;  Global Interrupt Enable/Disable
   720                          ;----------------------------------------------------
   721                              macro M8C_EnableGInt
   722                              or    F, FLAG_GLOBAL_IE
   723  0000'                       endm
   724                          
   725                              macro M8C_DisableGInt
   726                              and   F, ~FLAG_GLOBAL_IE
   727  0000'                       endm
   728                          
   729                          ;----------------------------------------------------
   730                          ;  Enable/Disable Interrupt Mask
   731                          ;
   732                          ;  Use the following macros to enable/disable
   733                          ;  bits in the Interrupt mask registers,
   734                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   735                          ;
   736                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   737                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   738                          ;
   739                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   740                          ;        and MASK is the bit set to enable or disable
   741                          ;----------------------------------------------------
   742                          ; Disable Interrupt Bit Mask(s)
   743                              macro M8C_DisableIntMask
   744                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   745  0000'                       endm
   746                          
   747                          ; Enable Interrupt Bit Mask(s)
   748                              macro M8C_EnableIntMask
   749                              or    reg[@0], @1               ; enable specified interrupt enable bit
   750  0000'                       endm
   751                          
   752                          ;----------------------------------------------------
   753                          ;  Clear Posted Interrupt Flag Mask
   754                          ;
   755                          ;  Use the following macros to clear the
   756                          ;  bits in the Interrupt Clear registers,
   757                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   758                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   759                          ;
   760                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   761                          ;        and MASK is the bit set to enable or disable
   762                          ;----------------------------------------------------
   763                              macro M8C_ClearIntFlag
   764                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   765  0000'                       endm
   766                          
   767                          ;----------------------------------------------------
   768                          ;  Power-On Reset & WatchDog Timer Functions
   769                          ;----------------------------------------------------
   770                              macro M8C_EnableWatchDog
   771                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   772  0000'                       endm
   773                          
   774                              macro M8C_ClearWDT
   775                              mov   reg[RES_WDT], 00h
   776  0000'                       endm
   777                          
   778                              macro M8C_ClearWDTAndSleep
   779                              mov   reg[RES_WDT], 38h
   780  0000'                       endm
   781                          
   782                          ;----------------------------------------------------
   783                          ;  Sleep, CPU Stop & Software Reset
   784                          ;----------------------------------------------------
   785                              macro M8C_Sleep
   786                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   787                              ; The next instruction to be executed depends on the state of the
   788                              ; various interrupt enable bits. If some interrupts are enabled
   789                              ; and the global interrupts are disabled, the next instruction will
   790                              ; be the one that follows the invocation of this macro. If global
   791                              ; interrupts are also enabled then the next instruction will be
   792                              ; from the interrupt vector table. If no interrupts are enabled
   793                              ; then the CPU sleeps forever.
   794  0000'                       endm
   795                          
   796                              macro M8C_Stop
   797                              ; In general, you probably don't want to do this, but here's how:
   798                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   799                              ; Next instruction to be executed is located in the interrupt
   800                              ; vector table entry for Power-On Reset.
   801  0000'                       endm
   802                          
   803                              macro M8C_Reset
   804                              ; Restore CPU to the power-on reset state.
   805                              mov A, 0
   806                              SSC
   807                              ; Next non-supervisor instruction will be at interrupt vector 0.
   808  0000'                       endm
   809                          
   810                          ;----------------------------------------------------
   811                          ; ImageCraft Code Compressor Actions
   812                          ;----------------------------------------------------
   813                              ; Suspend Code Compressor
   814                              ; Must not span a RET or RETI instruction
   815                              ; without resuming code compression
   816                              macro Suspend_CodeCompressor
   817                              or   F, 0
   818  0000'                       endm
   819                          
   820                              ; Resume Code Compression
   821                              macro Resume_CodeCompressor
   822                              add  SP, 0
   823  0000'                       endm
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  FILENAME: Timer16.inc
     4                          ;;   Version: 2.6, Updated on 2013/5/19 at 10:44:39
     5                          ;;  Generated by PSoC Designer 5.4.2946
     6                          ;;
     7                          ;;  DESCRIPTION: Assembler declarations for the Timer16 user module interface
     8                          ;;-----------------------------------------------------------------------------
     9                          ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
    10                          ;;*****************************************************************************
    11                          ;;*****************************************************************************
    12                          
    13                          include "m8c.inc"
    14                          
    15                          
    16                          ;--------------------------------------------------
    17                          ; Constants for Timer16 API's.
    18                          ;--------------------------------------------------
    19                          
    20  0001                    Timer16_CONTROL_REG_START_BIT:             equ 0x01    ; Control register start bit
    21  00E1                    Timer16_INT_REG:                           equ 0x0e1
    22  0002                    Timer16_INT_MASK:                          equ 0x02
    23                          
    24                          
    25                          ;--------------------------------------------------
    26                          ; Constants for Timer16 user defined values
    27                          ;--------------------------------------------------
    28                          
    29  2580                    Timer16_PERIOD:                            equ 0x2580
    30  2328                    Timer16_COMPARE_VALUE:                     equ 0x2328
    31                          
    32                          
    33                          ;--------------------------------------------------
    34                          ; Register Address Constants for Timer16
    35                          ;--------------------------------------------------
    36                          
    37  0020                    Timer16_COUNTER_LSB_REG:               equ 0x20   ; DR0 Counter register
    38  0024                    Timer16_COUNTER_MSB_REG:               equ 0x24
    39  0021                    Timer16_PERIOD_LSB_REG:                equ 0x21   ; DR1 Period register
    40  0025                    Timer16_PERIOD_MSB_REG:                equ 0x25
    41  0022                    Timer16_COMPARE_LSB_REG:               equ 0x22   ; DR2 CompareValue register
    42  0026                    Timer16_COMPARE_MSB_REG:               equ 0x26
    43  0023                    Timer16_CONTROL_LSB_REG:               equ 0x23   ; Control register
    44  0027                    Timer16_CONTROL_MSB_REG:               equ 0x27
    45  0020                    Timer16_FUNC_LSB_REG:                  equ 0x20   ; Function register
    46  0024                    Timer16_FUNC_MSB_REG:                  equ 0x24
    47  0021                    Timer16_INPUT_LSB_REG:                 equ 0x21   ; Input register
    48  0025                    Timer16_INPUT_MSB_REG:                 equ 0x25
    49  0022                    Timer16_OUTPUT_LSB_REG:                equ 0x22   ; Output register
    50  0026                    Timer16_OUTPUT_MSB_REG:                equ 0x26
    51                          
    52                          
    53                          ;--------------------------------------------------
    54                          ; Timer16 Macro 'Functions'
    55                          ;--------------------------------------------------
    56                          
    57                             macro Timer16_Start_M
    58                             or    reg[Timer16_CONTROL_LSB_REG],  Timer16_CONTROL_REG_START_BIT
    59  0000'                      endm
    60                          
    61                             macro Timer16_Stop_M
    62                             and   reg[Timer16_CONTROL_LSB_REG], ~Timer16_CONTROL_REG_START_BIT
    63  0000'                      endm
    64                          
    65                             macro Timer16_EnableInt_M
    66                             M8C_EnableIntMask Timer16_INT_REG, Timer16_INT_MASK
    67  0000'                      endm
    68                          
    69                             macro Timer16_DisableInt_M
    70                             M8C_DisableIntMask Timer16_INT_REG, Timer16_INT_MASK
    71  0000'                      endm
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  FILENAME: Timer16INT.asm
     4                          ;;   Version: 2.6, Updated on 2013/5/19 at 10:44:39
     5                          ;;  Generated by PSoC Designer 5.4.2946
     6                          ;;
     7                          ;;  DESCRIPTION: Timer16 Interrupt Service Routine
     8                          ;;-----------------------------------------------------------------------------
     9                          ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
    10                          ;;*****************************************************************************
    11                          ;;*****************************************************************************
    12                          
    13                          include "m8c.inc"
    14                          include "memory.inc"
    15                          include "Timer16.inc"
    16                          
    17                          
    18                          ;-----------------------------------------------
    19                          ;  Global Symbols
    20                          ;-----------------------------------------------
    21                          export  _Timer16_ISR
    22                          
    23                          
    24                          AREA InterruptRAM (RAM,REL,CON)
    25                          
    26                          ;@PSoC_UserCode_INIT@ (Do not change this line.)
    27                          ;---------------------------------------------------
    28                          ; Insert your custom declarations below this banner
    29                          ;---------------------------------------------------
    30                          
    31                          ;------------------------
    32                          ; Includes
    33                          ;------------------------
    34                          
    35                          	
    36                          ;------------------------
    37                          ;  Constant Definitions
    38                          ;------------------------
    39                          
    40                          
    41                          ;------------------------
    42                          ; Variable Allocation
    43                          ;------------------------
    44                          
    45                          
    46                          ;---------------------------------------------------
    47                          ; Insert your custom declarations above this banner
    48                          ;---------------------------------------------------
    49                          ;@PSoC_UserCode_END@ (Do not change this line.)
    50                          
    51                          
    52                          AREA UserModules (ROM, REL)
    53                          
    54                          ;-----------------------------------------------------------------------------
    55                          ;  FUNCTION NAME: _Timer16_ISR
    56                          ;
    57                          ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
    58                          ;
    59                          ;-----------------------------------------------------------------------------
    60                          ;
    61                          
    62  0000'                   _Timer16_ISR:
    63                          
    64                             ;@PSoC_UserCode_BODY@ (Do not change this line.)
    65                             ;---------------------------------------------------
    66                             ; Insert your custom assembly code below this banner
    67                             ;---------------------------------------------------
    68                             ;   NOTE: interrupt service routines must preserve
    69                             ;   the values of the A and X CPU registers.
    70                             
    71                             ;---------------------------------------------------
    72                             ; Insert your custom assembly code above this banner
    73                             ;---------------------------------------------------
    74                             
    75                             ;---------------------------------------------------
    76                             ; Insert a lcall to a C function below this banner
    77                             ; and un-comment the lines between these banners
    78                             ;---------------------------------------------------
    79                             
    80                             ;PRESERVE_CPU_CONTEXT
    81                             ;lcall _My_C_Function
    82                             ;RESTORE_CPU_CONTEXT
    83                             
    84                             ;---------------------------------------------------
    85                             ; Insert a lcall to a C function above this banner
    86                             ; and un-comment the lines between these banners
    87                             ;---------------------------------------------------
    88                             ;@PSoC_UserCode_END@ (Do not change this line.)
    89                          
    90  0000' 7E                   reti
HI-TECH Software Macro Assembler (PSoC MCU) V9.61
Symbol Table                                                                                               Fri Jun 12 09:25:11 2015
                 _Timer16_ISR 0000                         HITECH 0002                      TOOLCHAIN 0002  
HI-TECH Software Macro Assembler (PSoC MCU) V9.61
                                                                                                           Fri Jun 12 09:25:11 2015
     1                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     2                          ;;;
     3                          ;;;  M8C.INC -- Microcontroller Device System Declarations
     4                          ;;;
     5                          ;;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
     6                          ;;;
     7                          ;;;  This file provides address constants, bit field masks and a set of macro
     8                          ;;;  facilities for the Cypress Semiconductor CY8C22045 Microcontroller devices.
     9                          ;;;
    10                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    11                          
    12                          ;;=============================================================================
    13                          ;; Definition of abbreviations used in the descriptions below
    14                          ;;  (RW)   The register or bit supports reads and writes
    15                          ;;  (W)    The register or bit is write-only
    16                          ;;  (R)    The register or bit is read-only
    17                          ;;  (#)    Access to the register is bit specific (see the family datasheet)
    18                          ;;  (RC)   The register or bit can be read, but writing a 0 will clear it,
    19                          ;;         writing a 1 will have no effect.
    20                          ;;=============================================================================
    21                          
    22                          ;;=============================================================================
    23                          ;;      System Registers
    24                          ;;=============================================================================
    25                          
    26                          ;----------------------------
    27                          ;  Flag Register Bit Fields
    28                          ;----------------------------
    29  00C0                    FLAG_PGMODE_MASK:  equ 0C0h     ; Paging control for > 256 bytes of RAM
    30  0000                    FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
    31  0040                    FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
    32  0080                    FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
    33  00C0                    FLAG_PGMODE_3:     equ 0C0h       ; Direct to CUR_PP page, indexed to STK_PP page
    34  0000                    FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
    35  0040                    FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
    36  0080                    FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
    37  00C0                    FLAG_PGMODE_11b:   equ 0C0h       ; Same as PGMODE_3
    38  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    39  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    40  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    41  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    42  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    43                          
    44                          
    45                          ;;=============================================================================
    46                          ;;      Register Space, Bank 0
    47                          ;;=============================================================================
    48                          
    49                          ;------------------------------------------------
    50                          ;  Port Registers
    51                          ;  Note: Also see this address range in Bank 1.
    52                          ;------------------------------------------------
    53                          ; Port 0
    54  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    55  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    56  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    57  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    58                          ; Port 1
    59  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    60  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    61  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    62  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    63                          ; Port 2
    64  0008                    PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
    65  0009                    PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
    66  000A                    PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
    67  000B                    PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
    68                          ; Port 3
    69  000C                    PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
    70  000D                    PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
    71  000E                    PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
    72  000F                    PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
    73                          ; Port 4
    74  0010                    PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
    75  0011                    PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
    76  0012                    PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
    77  0013                    PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
    78                          
    79                          ;------------------------------------------------
    80                          ;  Digital PSoC(tm) block Registers
    81                          ;  Note: Also see this address range in Bank 1.
    82                          ;------------------------------------------------
    83                          ; Digital PSoC block 00, Basic Type C
    84  0020                    DBC00DR0:     equ 20h          ; data register 0                          (#)
    85  0021                    DBC00DR1:     equ 21h          ; data register 1                          (W)
    86  0022                    DBC00DR2:     equ 22h          ; data register 2                          (RW)
    87  0023                    DBC00CR0:     equ 23h          ; control & status register 0              (#)
    88                          
    89                          ; Digital PSoC block 01, Basic Type C
    90  0024                    DBC01DR0:     equ 24h          ; data register 0                          (#)
    91  0025                    DBC01DR1:     equ 25h          ; data register 1                          (W)
    92  0026                    DBC01DR2:     equ 26h          ; data register 2                          (RW)
    93  0027                    DBC01CR0:     equ 27h          ; control & status register 0              (#)
    94                          
    95                          ; Digital PSoC block 02, Communications Type C
    96  0028                    DCC02DR0:     equ 28h          ; data register 0                          (#)
    97  0029                    DCC02DR1:     equ 29h          ; data register 1                          (W)
    98  002A                    DCC02DR2:     equ 2Ah          ; data register 2                          (RW)
    99  002B                    DCC02CR0:     equ 2Bh          ; control & status register 0              (#)
   100                          
   101                          ; Digital PSoC block 03, Communications Type C
   102  002C                    DCC03DR0:     equ 2Ch          ; data register 0                          (#)
   103  002D                    DCC03DR1:     equ 2Dh          ; data register 1                          (W)
   104  002E                    DCC03DR2:     equ 2Eh          ; data register 2                          (RW)
   105  002F                    DCC03CR0:     equ 2Fh          ; control & status register 0              (#)
   106                          
   107                          ; Digital PSoC block 10, Basic Type C
   108  0030                    DBC10DR0:     equ 30h          ; data register 0                          (#)
   109  0031                    DBC10DR1:     equ 31h          ; data register 1                          (W)
   110  0032                    DBC10DR2:     equ 32h          ; data register 2                          (RW)
   111  0033                    DBC10CR0:     equ 33h          ; control & status register 0              (#)
   112                          
   113                          ; Digital PSoC block 11, Basic Type C
   114  0034                    DBC11DR0:     equ 34h          ; data register 0                          (#)
   115  0035                    DBC11DR1:     equ 35h          ; data register 1                          (W)
   116  0036                    DBC11DR2:     equ 36h          ; data register 2                          (RW)
   117  0037                    DBC11CR0:     equ 37h          ; control & status register 0              (#)
   118                          
   119                          ; Digital PSoC block 12, Communications Type C
   120  0038                    DCC12DR0:     equ 38h          ; data register 0                          (#)
   121  0039                    DCC12DR1:     equ 39h          ; data register 1                          (W)
   122  003A                    DCC12DR2:     equ 3Ah          ; data register 2                          (RW)
   123  003B                    DCC12CR0:     equ 3Bh          ; control & status register 0              (#)
   124                          
   125                          ; Digital PSoC block 13, Communications Type C
   126  003C                    DCC13DR0:     equ 3Ch          ; data register 0                          (#)
   127  003D                    DCC13DR1:     equ 3Dh          ; data register 1                          (W)
   128  003E                    DCC13DR2:     equ 3Eh          ; data register 2                          (RW)
   129  003F                    DCC13CR0:     equ 3Fh          ; control & status register 0              (#)
   130                          
   131                          ;-------------------------------------
   132                          ;  Analog Control Registers
   133                          ;-------------------------------------
   134  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
   135  00C0                    AMX_IN_ACI3:          equ C0h    ; MASK: column 3 input mux
   136  0030                    AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
   137  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
   138  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
   139                          
   140  0061                    AMUX_CFG:      equ 61h          ; Analog MUX Configuration
   141  0030                    AMUX_CFG_INTCAP:       equ 30h    ;
   142  000E                    AMUX_CFG_MUXCLK:  	  equ 0Eh	 ;
   143  0001                    AMUX_CFG_EN:		  	  equ 01h	 ;
   144                          
   145                          ; old declarations DO NOT USE
   146  0061                    AMUXCFG:      equ 61h          ; Analog MUX Configuration
   147  0030                    AMUXCFG_INTCAP:       equ 30h    ;
   148  000E                    AMUXCFG_MUXCLK:  	  equ 0Eh	 ;
   149  0001                    AMUXCFG_EN:		  	  equ 01h	 ;
   150                          
   151  0062                    PWM_CR:       equ 62h          ; Pulse-Width Modulator Control
   152  0038                    PWM_CR_HIGH:          equ 38h    ; MASK: PWM high time
   153  0006                    PWM_CR_LOW:           equ 06h	 ; MASK: PWM low time
   154  0001                    PWM_CR_EN:            equ 01h	 ; MASK: Enable/Disable PWM function
   155                          
   156  0063                    ARF_CR:       equ 63h          ; Analog Reference Control
   157                          
   158  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus Register           (#)
   159  0080                    CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
   160  0040                    CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
   161  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
   162  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
   163  0008                    CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
   164  0004                    CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
   165  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
   166  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   167                          
   168  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   169  0020                    CMP_CR1_CLDIS1:       equ 20h    ; MASK: Column 1 comparator output latch
   170  0010                    CMP_CR1_CLDIS0:	      equ 10h    ; MASK: Column 0 comparator output latch
   171                          
   172  0068                    ADC0_CR:      equ 68h          ; Analog Column 0 Configuration
   173  0080                    ADC0_CR_CMPST:        equ 80h    ;
   174  0040                    ADC0_CR_LOREN:        equ 40h    ;
   175  0020                    ADC0_CR_SHEN:         equ 20h    ;
   176  0008                    ADC0_CR_CBSRC:        equ 08h    ;
   177  0004                    ADC0_CR_ADCM:         equ 04h    ;
   178  0001                    ADC0_CR_EN:	          equ 01h    ;
   179                          
   180  0069                    ADC1_CR:      equ 69h          ; Analog Column 1 Configuration
   181  0080                    ADC1_CR_CMPST:        equ 80h    ;
   182  0040                    ADC1_CR_LOREN:        equ 40h    ;
   183  0020                    ADC1_CR_SHEN:         equ 20h    ;
   184  0008                    ADC1_CR_CBSRC:        equ 08h    ;
   185  0004                    ADC1_CR_ADCM:         equ 04h    ;
   186  0001                    ADC1_CR_EN:	          equ 01h    ;
   187                          
   188                          ; Continuous Time PSoC block Type E Row 0 Col 0
   189  0072                    ACE00CR1:     equ 72h          ; Control register 1                       (RW)
   190  0073                    ACE00CR2:     equ 73h          ; Control register 2                       (RW)
   191                          
   192                          ; Continuous Time PSoC block Type E Row 0 Col 1
   193  0076                    ACE01CR1:     equ 76h          ; Control register 1                       (RW)
   194  0077                    ACE01CR2:     equ 77h          ; Control register 2                       (RW)
   195                          
   196                          ; Switched Cap PSoC blockType E Row 1 Col 0
   197  0080                    ASE10CR0:     equ 80h          ; Control register 0                       (RW)
   198                          
   199                          ; Switched Cap PSoC blockType E Row 1 Col 1
   200  0084                    ASE11CR0:     equ 84h          ; Control register 0                       (RW)
   201                          
   202                          ;-----------------------------------------------
   203                          ;  Global General Purpose Data Registers
   204                          ;-----------------------------------------------
   205  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   206  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   207  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   208  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   209                          
   210                          ;------------------------------------------------
   211                          ;  Row Digital Interconnects
   212                          ;
   213                          ;  Note: the following registers are mapped into
   214                          ;  both register bank 0 AND register bank 1.
   215                          ;------------------------------------------------
   216                          
   217  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   218  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   219  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   220  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   221  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   222  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   223  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   224                          
   225  00B8                    RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
   226  00B9                    RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
   227  00BA                    RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
   228  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   229  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   230  00BD                    RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
   231  00BE                    RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
   232                          
   233                          ;-----------------------------------------------
   234                          ;  Ram Page Pointers
   235                          ;-----------------------------------------------
   236  00D0                    CUR_PP:      equ 0D0h           ; Current   Page Pointer
   237  00D1                    STK_PP:      equ 0D1h           ; Stack     Page Pointer
   238  00D3                    IDX_PP:      equ 0D3h           ; Index     Page Pointer
   239  00D4                    MVR_PP:      equ 0D4h           ; MVI Read  Page Pointer
   240  00D5                    MVW_PP:      equ 0D5h           ; MVI Write Page Pointer
   241                          
   242                          ;------------------------------------------------
   243                          ;  I2C Configuration Registers
   244                          ;------------------------------------------------
   245  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   246  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   247  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   248  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   249  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   250  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   251  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   252  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   253  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   254  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   255                          
   256  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   257  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   258  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   259  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   260  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   261  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   262  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   263  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   264  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   265                          
   266  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   267                          
   268  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   269  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   270  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   271  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   272  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   273                          
   274                          ;------------------------------------------------
   275                          ;  System and Global Resource Registers
   276                          ;------------------------------------------------
   277  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   278                                                         ; Use INT_MSK0 bit field masks
   279  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   280                                                         ; Use INT_MSK1 bit field masks
   281  00DC                    INT_CLR2:     equ 0DCh          ; Interrupt Clear Register 2               (RW)
   282                                                         ; Use INT_MSK2 bit field masks
   283  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   284                                                         ; Use INT_MSK3 bit field masks
   285                          
   286  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   287  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   288  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   289                          
   290  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   291  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   292  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   293  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   294  0010                    INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
   295  0008                    INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
   296  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   297  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   298  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   299                          
   300  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   301  0080                    INT_MSK1_DCC13:            equ 80h ; MASK: enable/disable DCC13 block interrupt
   302  0040                    INT_MSK1_DCC12:            equ 40h ; MASK: enable/disable DCC12 block interrupt
   303  0020                    INT_MSK1_DBC11:            equ 20h ; MASK: enable/disable DBC11 block interrupt
   304  0010                    INT_MSK1_DBC10:            equ 10h ; MASK: enable/disable DBC10 block interrupt
   305  0008                    INT_MSK1_DCC03:            equ 08h ; MASK: enable/disable DCC03 block interrupt
   306  0004                    INT_MSK1_DCC02:            equ 04h ; MASK: enable/disable DCC02 block interrupt
   307  0002                    INT_MSK1_DBC01:            equ 02h ; MASK: enable/disable DBC01 block interrupt
   308  0001                    INT_MSK1_DBC00:            equ 01h ; MASK: enable/disable DBC00 block interrupt
   309                          
   310  00DF                    INT_MSK2:     equ DFh			; Custom block Mask Register			   (RW)
   311  0010                    INT_MSK2_SARADC:           equ 10h ; MASK: enable/disable SARADC block interrupt
   312  0020                    INT_MSK2_CSD0:             equ 20h ; MASK: enable/disable CSD0 block interrupt
   313  0040                    INT_MSK2_CSD1:             equ 40h ; MASK: enable/disable CSD1 block interrupt
   314  0080                    INT_MSK2_RTC:              equ 80h ; MASK: enable/disable RTC block interrupt
   315                          
   316  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   317  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   318                          
   319                          ;------------------------------------------------------
   320                          ;  MAC Registers
   321                          ;------------------------------------------------------
   322                          
   323  00E8                    MUL0_X:       equ 0E8h          ; Multiply Input X Register                (W)
   324  00E9                    MUL0_Y:       equ 0E9h          ; Multiply Input Y Register                (W)
   325  00EA                    MUL0_DH:      equ 0EAh          ; Multiply Result High Byte Register       (R)
   326  00EB                    MUL0_DL:      equ 0EBh          ; Multiply Result Low Byte Register        (R)
   327                          
   328  00EC                    ACC0_DR1:     equ 0ECh          ; Accumulator Data Register 1              (RW)
   329  00ED                    ACC0_DR0:     equ 0EDh          ; Accumulator Data Register 0              (RW)
   330  00EE                    ACC0_DR3:     equ 0EEh          ; Accumulator Data Register 3              (RW)
   331  00EF                    ACC0_DR2:     equ 0EFh          ; Accumulator Data Register 2              (RW)
   332                          
   333                          ; DECIMATOR Control Registers
   334  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   335  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   336                          
   337                          ;------------------------------------------------------
   338                          ;  System Status and Control Registers
   339                          ;
   340                          ;  Note: The following registers are mapped into both
   341                          ;        register bank 0 AND register bank 1.
   342                          ;------------------------------------------------------
   343  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   344                                                             ; Use FLAG_ masks defined at top of file
   345                          
   346  00FD                    DAC_D:        equ 0FDh		   ; DAC Data Register                        (RW)
   347                          
   348  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   349  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: flag, Internal Reset Status bit
   350  0010                    CPU_SCR1_SLIMO:         equ 10h	   ; MASK: Slow IMO (internal main osc) enable
   351  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   352  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   353  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   354                          
   355  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   356  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   357  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   358  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   359  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   360  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   361                          
   362                          ;------------------------------------------------------
   363                          ;  Neon Capsense Digital Control Registers
   364                          ;------------------------------------------------------
   365  0050                    CSD0_DR0_L:				equ 50h		; Capsense 0 data low 0				(RW)
   366  0054                    CSD0_DR0_H:				equ 54h		; Capsense 0 data high 0			(RW)
   367  0058                    CSD1_DR0_L:				equ 58h		; Capsense 1 data low 0				(RW)
   368  005C                    CSD1_DR0_H:				equ 5Ch		; Capsense 1 data high 0			(RW)
   369  0051                    CSD0_DR1_L:				equ 51h		; Capsense 0 data low 1				(RW)
   370  0055                    CSD0_DR1_H:				equ 55h		; Capsense 0 data high 1			(RW)
   371  0059                    CSD1_DR1_L:				equ 59h		; Capsense 1 data low 1				(RW)
   372  005D                    CSD1_DR1_H:				equ 5Dh		; Capsense 1 data high 1			(RW)
   373  0052                    CSD0_CNT_L:				equ 52h		; Capsense 0 counter low			(RW)
   374  0056                    CSD0_CNT_H:				equ 56h		; Capsense 0 counter high			(RW)
   375  005A                    CSD1_CNT_L:				equ 5Ah		; Capsense 1 counter low			(RW)
   376  005E                    CSD1_CNT_H:				equ	5Eh		; Capsense 1 counter high			(RW)
   377  0053                    CSD0_CR0:				equ 53h		; Capsense 0 control 0				(RW)
   378  005B                    CSD1_CR0:				equ 5Bh		; Capsense 1 control 0				(RW)
   379  0057                    CSD0_CR1:				equ 57h		; Capsense 0 control 1				(RW)
   380  005F                    CSD1_CR1:				equ 5Fh		; Capsense 1 control 1				(RW)
   381                          
   382                          ;------------------------------------------------------
   383                          ;  Neon Analog Registers
   384                          ;------------------------------------------------------
   385  0065                    ASY_CR:					equ 65h		; Analog Synchronization Control	(RW)
   386  006A                    ADC_DH:					equ 6Ah		; ADC data high						(RW)
   387  006B                    ADC_DL:					equ 6Bh		; ADC data low						(RW)
   388  00C8                    PWMVREF0:				equ C8h		; PWM Voltage Reference 0			(RW)
   389  00C9                    PWMVREF1:				equ C9h		; PWM Voltage Reference 1			(RW)
   390  00CB                    PWMSRC:					equ CBh		; PWM Source						(RW)
   391  00CA                    IDACMODE:				equ CAh		; IDAC Mode							(RW)
   392  00FC                    IDACR_D:				equ FCh		; Analog Mux DAC data 0				(RW)
   393  00FD                    IDACL_D:				equ FDh		; Analog Mux DAC data 1				(RW)
   394                          
   395                          ;------------------------------------------------------
   396                          ;  Neon Digital Registers
   397                          ;------------------------------------------------------
   398  00B7                    RDI0DSM:				equ B7h		; Row Digital Interconnect input select 0	(RW)
   399  00BF                    RDI1DSM:				equ BFh		; Row Digital Interconnect input select 1	(RW)
   400                          
   401                          ;------------------------------------------------------
   402                          ;  Neon Test Registers
   403                          ;------------------------------------------------------
   404  00CC                    TSCR0:					equ CCh		; Tsource 0							(RW)
   405  00CD                    TSCMPH:					equ CDh		; TSCMP high						(RW)
   406  00CE                    TSCMPL:					equ CEh		; TSCMP low							(RW)
   407  00CF                    TSCR1:					equ CFh		; Tsource 1							(RW)
   408                          
   409                          ;;=============================================================================
   410                          ;;      Register Space, Bank 1
   411                          ;;=============================================================================
   412                          
   413                          ;------------------------------------------------
   414                          ;  Port Registers
   415                          ;  Note: Also see this address range in Bank 0.
   416                          ;------------------------------------------------
   417                          ; Port 0
   418  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   419  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   420  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   421  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   422                          
   423                          ; Port 1
   424  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   425  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   426  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   427  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   428                          
   429                          ; Port 2
   430  0008                    PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
   431  0009                    PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
   432  000A                    PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
   433  000B                    PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
   434                          
   435                          ; Port 3
   436  000C                    PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
   437  000D                    PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
   438  000E                    PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
   439  000F                    PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
   440                          
   441                          ; Port 4
   442  0010                    PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
   443  0011                    PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
   444  0012                    PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
   445  0013                    PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
   446                          
   447                          ;------------------------------------------------
   448                          ;  Digital PSoC(tm) block Registers
   449                          ;  Note: Also see this address range in Bank 0.
   450                          ;------------------------------------------------
   451                          
   452                          ; Digital PSoC block 00, Basic Type C
   453  0020                    DBC00FN:      equ 20h          ; Function Register                        (RW)
   454  0021                    DBC00IN:      equ 21h          ;    Input Register                        (RW)
   455  0022                    DBC00OU:      equ 22h          ;   Output Register                        (RW)
   456  0023                    DBC00CR1:     equ 23h          ;   control & status register 1            (RW)
   457                          
   458                          ; Digital PSoC block 01, Basic Type C
   459  0024                    DBC01FN:      equ 24h          ; Function Register                        (RW)
   460  0025                    DBC01IN:      equ 25h          ;    Input Register                        (RW)
   461  0026                    DBC01OU:      equ 26h          ;   Output Register                        (RW)
   462  0027                    DBC01CR1:     equ 27h          ;   control & status register 1            (RW)
   463                          
   464                          ; Digital PSoC block 02, Communications Type C
   465  0028                    DCC02FN:      equ 28h          ; Function Register                        (RW)
   466  0029                    DCC02IN:      equ 29h          ;    Input Register                        (RW)
   467  002A                    DCC02OU:      equ 2Ah          ;   Output Register                        (RW)
   468  002B                    DBC02CR1:     equ 2Bh          ;   control & status register 1            (RW)
   469                          
   470                          ; Digital PSoC block 03, Communications Type C
   471  002C                    DCC03FN:      equ 2Ch          ; Function Register                        (RW)
   472  002D                    DCC03IN:      equ 2Dh          ;    Input Register                        (RW)
   473  002E                    DCC03OU:      equ 2Eh          ;   Output Register                        (RW)
   474  0029                    DBC03CR1:     equ 29h          ;   control & status register 1            (RW)
   475                          
   476                          ; Digital PSoC block 10, Basic Type C
   477  0030                    DBC10FN:      equ 30h          ; Function Register                        (RW)
   478  0031                    DBC10IN:      equ 31h          ;    Input Register                        (RW)
   479  0032                    DBC10OU:      equ 32h          ;   Output Register                        (RW)
   480  0033                    DBC10CR1:     equ 33h          ;   control & status register 1            (RW)
   481                          
   482                          ; Digital PSoC block 11, Basic Type C
   483  0034                    DBC11FN:      equ 34h          ; Function Register                        (RW)
   484  0035                    DBC11IN:      equ 35h          ;    Input Register                        (RW)
   485  0036                    DBC11OU:      equ 36h          ;   Output Register                        (RW)
   486  0037                    DBC11CR1:     equ 37h          ;   control & status register 1            (RW)
   487                          
   488                          ; Digital PSoC block 12, Communications Type C
   489  0038                    DCC12FN:      equ 38h          ; Function Register                        (RW)
   490  0039                    DCC12IN:      equ 39h          ;    Input Register                        (RW)
   491  003A                    DCC12OU:      equ 3Ah          ;   Output Register                        (RW)
   492  003B                    DBC12CR1:     equ 3Bh          ;   control & status register 1            (RW)
   493                          
   494                          ; Digital PSoC block 13, Communications Type C
   495  003C                    DCC13FN:      equ 3Ch          ; Function Register                        (RW)
   496  003D                    DCC13IN:      equ 3Dh          ;    Input Register                        (RW)
   497  003E                    DCC13OU:      equ 3Eh          ;   Output Register                        (RW)
   498  003F                    DBC13CR1:     equ 3Fh          ;   control & status register 1            (RW)
   499                          
   500                          ;------------------------------------------------
   501                          ;  System and Global Resource Registers
   502                          ;  Note: Also see this address range in Bank 0.
   503                          ;------------------------------------------------
   504                          
   505  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   506  00C0                    CLK_CR0_ACOLUMN_3:    equ C0h    ; MASK: Specify clock for analog cloumn
   507  0030                    CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
   508  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   509  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   510                          
   511  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   512  0018                    CLK_CR1_ACLK1:        equ 18h    ; MASK: Digital PSoC block for analog source
   513  0003                    CLK_CR1_ACLK0:        equ 03h    ; MASK: Digital PSoC block for analog source
   514                          
   515  0003                    CLK_CR1_ACLK2:        equ 03h    ; Deprecated do not use
   516                          
   517  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   518  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   519                          
   520  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   521  000F                    AMD_CR0_AMOD0:        equ 0Fh    ; MASK: Modulation source for analog column 0
   522                          
   523  0064                    CMP_GO_EN:    equ 64h          ; Comparator Bus To Global Out Enable      (RW)
   524  0080                    CMP_GO_EN_GOO5:       equ 80h    ; MASK: Selected Col 1 signal to GOO5
   525  0040                    CMP_GO_EN_GOO1:       equ 40h    ; MASK: Selected Col 1 signal to GOO1
   526  0030                    CMP_GO_EN_SEL1:       equ 30h    ; MASK: Column 1 Signal Select
   527  0008                    CMP_GO_EN_GOO4:       equ 08h    ; MASK: Selected Col 0 signal to GOO4
   528  0004                    CMP_GO_EN_GOO0:       equ 04h    ; MASK: Selected Col 0 signal to GOO0
   529  0003                    CMP_GO_EN_SEL0:       equ 03h    ; MASK: Column 0 Signal Select
   530                          
   531  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   532  000F                    AMD_CR1_AMOD1:        equ 0Fh    ; MASK: Modulation ctrl for analog column 1
   533                          
   534  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   535  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   536  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   537                          
   538  006B                    CLK_CR3:      equ 6Bh          ; Analog Clock Source Control Register 3   (RW)
   539  0040                    CLK_CR3_SYS1:         equ 40h    ; MASK: Analog Clock 1 selection
   540  0030                    CLK_CR3_DIVCLK1:      equ 30h    ; MASK: Analog Clock 1 divider
   541  0004                    CLK_CR3_SYS0:         equ 04h    ; MASK: Analog Clock 0 selection
   542  0003                    CLK_CR3_DIVCLK0:      equ 03h    ; MASK: Analog Clock 0 divider
   543                          
   544                          ;------------------------------------------------
   545                          ;  Global Digital Interconnects
   546                          ;------------------------------------------------
   547                          
   548  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   549  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   550  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   551  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   552                          
   553  00A0                    GDI_O_IN_CR:  equ 0A0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   554  00A1                    GDI_E_IN_CR:  equ 0A1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   555  00A2                    GDI_O_OU_CR:  equ 0A2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   556  00A3                    GDI_E_OU_CR:  equ 0A3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   557                          
   558  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   559  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   560                          
   561                          ;------------------------------------------------
   562                          ;  Analog Mux Bus Port Enable Bits
   563                          ;------------------------------------------------
   564  00D8                    MUX_CR0:      equ 0D8h          ; Analog Mux Port 0 Bit Enables Register
   565  00D9                    MUX_CR1:      equ 0D9h          ; Analog Mux Port 1 Bit Enables Register
   566  00DA                    MUX_CR2:      equ 0DAh          ; Analog Mux Port 2 Bit Enables Register
   567  00DB                    MUX_CR3:      equ 0DBh          ; Analog Mux Port 3 Bit Enables Register
   568  00EC                    MUX_CR4:      equ 0ECh          ; Analog Mux Port 4 Bit Enables Register
   569                          
   570                          ;------------------------------------------------
   571                          ;  Clock and System Control Registers
   572                          ;------------------------------------------------
   573                          
   574  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   575  0080                    OSC_GO_EN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   576  0040                    OSC_GO_EN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   577  0020                    OSC_GO_EN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   578  0010                    OSC_GO_EN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   579  0008                    OSC_GO_EN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   580  0004                    OSC_GO_EN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   581  0002                    OSC_GO_EN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   582  0001                    OSC_GO_EN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   583                          
   584  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   585  0003                    OSC_CR4_VC3SEL:       equ 03h    ; MASK: System VC3 Clock source
   586                          
   587  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   588                          
   589  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   590  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   591  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   592  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   593  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   594  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   595  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   596  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   597  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   598  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   599  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   600  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   601  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   602  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   603  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   604  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   605  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   606  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   607                          
   608  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   609  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   610  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   611                          
   612  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   613  0080                    OSC_CR2_PLLGAIN:      equ 80h    ; MASK: High/Low gain
   614  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   615  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   616  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   617                          
   618  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   619  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   620  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   621  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   622  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   623  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   624  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   625  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   626                          
   627  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   628  0008                    VLT_CMP_NOWRITE:      equ 08h    ; MASK: Vcc below Flash Write level
   629  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   630  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   631  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   632                          
   633  00E5                    ADC0_TR:      equ 0E5h          ; ADC Column 0 Trim Register
   634  00E6                    ADC1_TR:      equ 0E6h          ; ADC Column 1 Trim Register
   635                          
   636  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   637  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   638  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   639  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   640                          
   641  00FA                    FLS_PR1:      equ 0FAh          ; Flash Program Register 1                 (RW)
   642  0003                    FLS_PR1_BANK:         equ 03h    ; MASK: Select Active Flash Bank
   643                          
   644  00FD                    DAC_CR0:       equ 0FDh          ; Analog Mux DAC Control Register 0
   645  00DC                    DAC_CR1:       equ 0DCh          ; Analog Mux DAC Control Register 1
   646  0008                    DAC_CR_IRANGE:        equ 08h    ; MASK: Sets the DAC Range low or high
   647  0006                    DAC_CR_OSCMODE:       equ 06h    ; MASK: Defines the reset mode for AMux
   648  0001                    DAC_CR_ENABLE:        equ 01h    ; MASK: Enable/Disable DAC function
   649                          
   650                          ;------------------------------------------------
   651                          ;  I2C Control Registers
   652                          ;------------------------------------------------
   653                          
   654  00AD                    I2C_ADDR:    equ 0ADh          ; I2C Address Register (RW)
   655                          
   656                          ;------------------------------------------------------
   657                          ;  Neon Analog Registers
   658                          ;------------------------------------------------------
   659  0053                    VDAC50CR0:		equ 53h			; V DAC5 control 0				(RW)
   660  0057                    VDAC51CR0:		equ 57h			; V DAC5 control 1				(RW)
   661  00A8                    ADC_CR0:		equ A8h			; ADC control 0					(RW)
   662  00A9                    ADC_CR1:		equ A9h			; ADC control 1					(RW)
   663  00AA                    ADC_CR2:		equ AAh			; ADC control 2					(RW)
   664  00AB                    ADC_CR3TRIM:	equ ABh			; ADC control 3					(RW)
   665  00AC                    ADC_CR4:		equ ACh			; ADC control 4					(RW)
   666  00E7                    VDAC_TRIM:		equ E7h			; V DAC trim					(RW)
   667                          
   668                          ;------------------------------------------------------
   669                          ;  Neon Current Sense CMP Registers
   670                          ;------------------------------------------------------
   671  0050                    CMP0CR1:		equ 50h			; CMP0 control 1				(RW)
   672  0051                    CMP0CR2:		equ 51h			; CMP0 control 2				(RW)
   673  0054                    CMP1CR1:		equ 54h			; CMP1 control 1				(RW)
   674  0055                    CMP1CR2:		equ 55h			; CMP1 control 2				(RW)
   675  0058                    CSCMPCR0:		equ 58h			; CSCMP control 0				(RW)
   676  0059                    CSCMPGOEN:		equ 59h			; CSCMO global out enable		(RW)
   677  005A                    CSLUTCR0:		equ 5Ah			; CSLUT control 0				(RW)
   678  005B                    CMPCOLMUX:		equ 5Bh			; CMP Column Mux				(RW)
   679  005C                    CMPPWMCR:		equ 5Ch			; CMP PWM control				(RW)
   680  005D                    CMPFLTCR:		equ 5Dh			; CMP filter control			(RW)
   681  005E                    CMPCLK1:		equ 5Eh			; CMP clock 1					(RW)
   682  005F                    CMPCLK0:		equ 5Fh			; CMP clock 0					(RW)
   683                          
   684                          ;------------------------------------------------------
   685                          ;  Neon Real Time Clock Registers
   686                          ;------------------------------------------------------
   687  00A4                    RTCH:			equ A4h			; Real time current hour		(RW)
   688  00A5                    RTCM:			equ A5h			; Real time current minute		(RW)
   689  00A6                    RTCS:			equ A6h			; Real time current second		(RW)
   690  00A7                    RTCCR:			equ A7h			; Real time clock control		(RW)
   691                          
   692                          ;------------------------------------------------------
   693                          ;  Analog MUX Config Registers
   694                          ;------------------------------------------------------
   695                          
   696  006A                    AMUX_CFG1:			equ 6Ah  ; Analog MUX Configuration 1
   697  0020                    AMUX_CFG1_GOINVR:	equ 20h  ;
   698  0010                    AMUX_CFG1_GOINVL:  	equ 10h	 ;
   699  000C                    AMUX_CFG1_AMUXMODR:	equ 0Ch	 ;
   700  0003                    AMUX_CFG1_AMUXMODL:	equ 03h	 ;
   701                          
   702                          ;;=============================================================================
   703                          ;;      M8C System Macros
   704                          ;;  These macros should be used when their functions are needed.
   705                          ;;=============================================================================
   706                          
   707                          ;----------------------------------------------------
   708                          ;  Swapping Register Banks
   709                          ;----------------------------------------------------
   710                              macro M8C_SetBank0
   711                              and   F, ~FLAG_XIO_MASK
   712  3C51                        endm
   713                          
   714                              macro M8C_SetBank1
   715                              or    F, FLAG_XIO_MASK
   716  3C51                        endm
   717                          
   718                          ;----------------------------------------------------
   719                          ;  Global Interrupt Enable/Disable
   720                          ;----------------------------------------------------
   721                              macro M8C_EnableGInt
   722                              or    F, FLAG_GLOBAL_IE
   723  3C51                        endm
   724                          
   725                              macro M8C_DisableGInt
   726                              and   F, ~FLAG_GLOBAL_IE
   727  3C51                        endm
   728                          
   729                          ;----------------------------------------------------
   730                          ;  Enable/Disable Interrupt Mask
   731                          ;
   732                          ;  Use the following macros to enable/disable
   733                          ;  bits in the Interrupt mask registers,
   734                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   735                          ;
   736                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   737                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   738                          ;
   739                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   740                          ;        and MASK is the bit set to enable or disable
   741                          ;----------------------------------------------------
   742                          ; Disable Interrupt Bit Mask(s)
   743                              macro M8C_DisableIntMask
   744                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   745  3C51                        endm
   746                          
   747                          ; Enable Interrupt Bit Mask(s)
   748                              macro M8C_EnableIntMask
   749                              or    reg[@0], @1               ; enable specified interrupt enable bit
   750  3C51                        endm
   751                          
   752                          ;----------------------------------------------------
   753                          ;  Clear Posted Interrupt Flag Mask
   754                          ;
   755                          ;  Use the following macros to clear the
   756                          ;  bits in the Interrupt Clear registers,
   757                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   758                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   759                          ;
   760                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   761                          ;        and MASK is the bit set to enable or disable
   762                          ;----------------------------------------------------
   763                              macro M8C_ClearIntFlag
   764                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   765  3C51                        endm
   766                          
   767                          ;----------------------------------------------------
   768                          ;  Power-On Reset & WatchDog Timer Functions
   769                          ;----------------------------------------------------
   770                              macro M8C_EnableWatchDog
   771                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   772  3C51                        endm
   773                          
   774                              macro M8C_ClearWDT
   775                              mov   reg[RES_WDT], 00h
   776  3C51                        endm
   777                          
   778                              macro M8C_ClearWDTAndSleep
   779                              mov   reg[RES_WDT], 38h
   780  3C51                        endm
   781                          
   782                          ;----------------------------------------------------
   783                          ;  Sleep, CPU Stop & Software Reset
   784                          ;----------------------------------------------------
   785                              macro M8C_Sleep
   786                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   787                              ; The next instruction to be executed depends on the state of the
   788                              ; various interrupt enable bits. If some interrupts are enabled
   789                              ; and the global interrupts are disabled, the next instruction will
   790                              ; be the one that follows the invocation of this macro. If global
   791                              ; interrupts are also enabled then the next instruction will be
   792                              ; from the interrupt vector table. If no interrupts are enabled
   793                              ; then the CPU sleeps forever.
   794  3C51                        endm
   795                          
   796                              macro M8C_Stop
   797                              ; In general, you probably don't want to do this, but here's how:
   798                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   799                              ; Next instruction to be executed is located in the interrupt
   800                              ; vector table entry for Power-On Reset.
   801  3C51                        endm
   802                          
   803                              macro M8C_Reset
   804                              ; Restore CPU to the power-on reset state.
   805                              mov A, 0
   806                              SSC
   807                              ; Next non-supervisor instruction will be at interrupt vector 0.
   808  3C51                        endm
   809                          
   810                          ;----------------------------------------------------
   811                          ; ImageCraft Code Compressor Actions
   812                          ;----------------------------------------------------
   813                              ; Suspend Code Compressor
   814                              ; Must not span a RET or RETI instruction
   815                              ; without resuming code compression
   816                              macro Suspend_CodeCompressor
   817                              or   F, 0
   818  3C51                        endm
   819                          
   820                              ; Resume Code Compression
   821                              macro Resume_CodeCompressor
   822                              add  SP, 0
   823                              endm
      + 3C51                    
      + 3C51                    ; end of file m8c.inc
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;
     4                          ;;       FILENAME: Memory.inc
     5                          ;;
     6                          ;;    DESCRIPTION: Memory Model and Stack Parameter Definitions for 
     7                          ;;                 CY8C22045 PSoC devices.
     8                          ;;
     9                          ;;  LAST MODIFIED: August 17, 2004
    10                          ;;
    11                          ;;-----------------------------------------------------------------------------
    12                          ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
    13                          ;;*****************************************************************************
    14                          ;;*****************************************************************************
    15                          ;
    16                          ;
    17                          ;  ******** Define Memory Model and Stack parameters ********
    18                          ;
    19  0001                    IMAGECRAFT: equ 1   
    20  0002                    HITECH: equ 2   
    21  0002                    TOOLCHAIN: equ HITECH   
    22  0001                    SYSTEM_LARGE_MEMORY_MODEL: equ 1   
    23  0000                    SYSTEM_SMALL_MEMORY_MODEL: equ 0   
    24  0003                    SYSTEM_STACK_PAGE: equ 3   
    25  0000                    SYSTEM_STACK_PAGE_OFFSET: equ 0   
    26  0002                    SYSTEM_TOOLS: equ 2   
    27  0000                    SYSTEM_IDXPG_TRACKS_STK_PP: equ 0   
    28  0001                    SYSTEM_IDXPG_TRACKS_IDX_PP: equ 1   
    29  0000                    SYSTEM_MULTIPAGE_STACK: equ 0 
    30                          
    31                          
    32                          ;  ******* Function Class Definitions *******
    33                          ;
    34                          ;  These definitions are used to describe RAM access patterns. They provide
    35                          ;  documentation and they control prologue and epilogue macros that perform
    36                          ;  the necessary housekeeping functions for large memory model devices like
    37                          ;  the CY8C22045.
    38                          
    39  0001                    RAM_USE_CLASS_1:               equ 1   ; PUSH, POP & I/O access
    40  0002                    RAM_USE_CLASS_2:               equ 2   ; Indexed address mode on stack page
    41  0004                    RAM_USE_CLASS_3:               equ 4   ; Indexed address mode to any page
    42  0008                    RAM_USE_CLASS_4:               equ 8   ; Direct/Indirect address mode access
    43                          
    44                          ; ******* Hi Tech Specific *******
    45                          ; Turn on the expansion of all macros by default
    46                          IF (TOOLCHAIN & HITECH)
    47                          OPT EXPAND
    48                          ENDIF
    49                          ; ******* Page Pointer Manipulation Macros *******
    50                          ;
    51                          ;  ******* Page Pointer Manipulation Macros *******
    52                          ;
    53                          ;  Most of the following macros are conditionally compiled so they only
    54                          ;  produce code if the large memory model is selected.
    55                          
    56                             ;-----------------------------------------------
    57                             ;  Set Stack Page Macro
    58                             ;-----------------------------------------------
    59                             ;
    60                             ;  DESC: Modify STK_PP in the large or small memory Models.
    61                             ;
    62                             ; INPUT: Constant (e.g., SYSTEM_STACK_PAGE) that specifies the RAM page on
    63                             ;        which stack operations like PUSH and POP store and retrieve their
    64                             ;        data
    65                             ;
    66                             ;  COST: 8 instruction cycles (in LMM only)
    67                          
    68                             macro RAM_SETPAGE_STK( PG_NUMBER )
    69                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    70                                mov reg[STK_PP], @PG_NUMBER
    71                             ENDIF
    72  3C51                       endm
    73                          
    74                             ;-----------------------------------------------
    75                             ;  Set Current Page Macro
    76                             ;-----------------------------------------------
    77                             ;
    78                             ;  DESC: Modify CUR_PP in the large or small memory Models.
    79                             ;
    80                             ; INPUT: Constant value (e.g., >bFoo) for the RAM page number used in
    81                             ;        calculation of effective direct-mode address operands.
    82                             ;
    83                             ;  COST: 8 instruction cycles (in LMM only)
    84                          
    85                             macro RAM_SETPAGE_CUR( PG_NUMBER )
    86                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    87                                mov reg[CUR_PP], @PG_NUMBER
    88                             ENDIF
    89  3C51                       endm
    90                          
    91                             ;-----------------------------------------------
    92                             ;  Set Index Page Macro
    93                             ;-----------------------------------------------
    94                             ;
    95                             ;  DESC: Modify IDX_PP in the large or small emory Models.
    96                             ;
    97                             ; INPUT: Constant value (e.g., >caFoo) for the RAM page number used in
    98                             ;         calculation of effective index-mode address operands.
    99                             ;
   100                             ;  COST: 8 instruction cycles (in LMM only)
   101                          
   102                             macro RAM_SETPAGE_IDX( PG_NUMBER )
   103                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   104                                mov reg[IDX_PP], @PG_NUMBER
   105                             ENDIF
   106  3C51                       endm
   107                          
   108                             ;-----------------------------------------------
   109                             ;  Set MVI Read Page Macro
   110                             ;-----------------------------------------------
   111                             ;
   112                             ;  DESC: Modify MVR_PP in the large or small memory Models.
   113                             ;
   114                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   115                             ;        calculation of indirect address operands used in the
   116                             ;        "mvi A, [pFoo]" instructions.
   117                             ;
   118                             ;  COST: 8 instruction cycles (in LMM only)
   119                          
   120                             macro RAM_SETPAGE_MVR( PG_NUMBER )
   121                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   122                                mov reg[MVR_PP], @PG_NUMBER
   123                             ENDIF
   124  3C51                       endm
   125                          
   126                             ;-----------------------------------------------
   127                             ;  Set MVI Write Page Macro
   128                             ;-----------------------------------------------
   129                             ;
   130                             ;  DESC: Modify MVW_PP in the large or small memory Models.
   131                             ;
   132                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   133                             ;        calculation of indirect address operands used in the
   134                             ;        "mvi [pFoo], A" instructions.
   135                             ;
   136                             ;  COST: 8 instruction cycles (in LMM only)
   137                          
   138                             macro RAM_SETPAGE_MVW( PG_NUMBER )
   139                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   140                                mov reg[MVW_PP], @PG_NUMBER
   141                             ENDIF
   142  3C51                       endm
   143                          
   144                             ;-----------------------------------------------
   145                             ;  Force Index Page Pointer to Stack Page
   146                             ;-----------------------------------------------
   147                             ;
   148                             ;  DESC: Map index-mode operands onto the stack page by modifying IDX_PP.
   149                             ;        See also RAM_LOCK_INDEX_TO_STACKPAGE.
   150                             ;
   151                             ; INPUT: None
   152                             ;
   153                             ;  COST: 8 instruction cycles (in LMM only)
   154                          
   155                             macro RAM_SETPAGE_IDX2STK
   156                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   157                                IF ( SYSTEM_MULTIPAGE_STACK )
   158                                   mov   A, reg[STK_PP]
   159                                   mov   reg[IDX_PP], A
   160                                ELSE
   161                                   RAM_SETPAGE_IDX SYSTEM_STACK_PAGE
   162                                ENDIF
   163                             ENDIF
   164  3C51                       endm
   165                          
   166                             ;-----------------------------------------------
   167                             ;  Change Memory Mode
   168                             ;-----------------------------------------------
   169                             ;
   170                             ;  DESC: Modify FLAG_PAGEMODE bits in the large and small memory Models.
   171                             ;
   172                             ; INPUT: Constant value for PGMODE bitfield of CPU Flag register, F.
   173                             ;        See FLAG_PGMODE_{x} constants in M8C.INC.
   174                             ;
   175                             ;  COST: 8 instruction cycles (in LMM only)
   176                          
   177                             macro RAM_CHANGE_PAGE_MODE( MODE )
   178                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   179                                and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
   180                                or    F,  FLAG_PGMODE_MASK & @MODE
   181                             ENDIF
   182  3C51                       endm
   183                          
   184                             ;-----------------------------------------------
   185                             ;  Set Large Memory Model Native Paging Mode
   186                             ;-----------------------------------------------
   187                             ;
   188                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   189                             ;        paging mode *IFF* a simple "OR" is guaranteed to work---for
   190                             ;        example, in an ISR, when the PGMODE bits have been cleared
   191                             ;        to zero. If a simple "OR" is not guaranteed to work, use
   192                             ;        the slower RAM_RESTORE_NATIVE_PAGING instead.
   193                             ;
   194                             ; INPUT: none
   195                             ;
   196                             ;  COST: 4 instruction cycles (in LMM only)
   197                          
   198                             macro RAM_SET_NATIVE_PAGING
   199                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   200                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   201                                or    F,  FLAG_PGMODE_11b            ; LMM w/ IndexPage<==>StackPage
   202                             ENDIF ;  PGMODE LOCKED
   203                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   204                                or    F,  FLAG_PGMODE_10b            ; LMM with independent IndexPage
   205                             ENDIF ; PGMODE FREE
   206                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   207  3C51                       endm
   208                          
   209                             ;-----------------------------------------------
   210                             ; Restore Large Memory Model Native Paging Mode
   211                             ;-----------------------------------------------
   212                             ;
   213                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   214                             ;        paging mode. Always works because it clears the PGMODE bits
   215                             ;        before OR-ing in the new ones. See RAM_RESTORE_NATIVE_PAGING
   216                             ;        for a faster method.
   217                             ;
   218                             ; INPUT: none
   219                             ;
   220                             ;  COST: 8 instruction cycles (in LMM only)
   221                          
   222                             macro RAM_RESTORE_NATIVE_PAGING
   223                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   224                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   225                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_11b ; LMM w/ IndexPage<==>StackPage
   226                             ENDIF ;  PGMODE LOCKED
   227                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   228                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b ; LMM with independent IndexPage
   229                             ENDIF ; PGMODE FREE
   230                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   231  3C51                       endm
   232                          
   233                             ;-----------------------------------------------
   234                             ; Force indexed addr mode operands to Stack Pg
   235                             ;-----------------------------------------------
   236                             ;
   237                             ;  DESC: Force instructions that use indexed address mode to reference the
   238                             ;        stack page (as defined by STK_PP). This macro sets the "Indexed
   239                             ;        Stack Mode" bit (LSB) of the PGMODE bit field in the CPU Flag
   240                             ;        register, F. (See also RAM_SETPAGE_IDX2STK, above.)
   241                             ;
   242                             ; INPUT: none
   243                             ;
   244                             ;  COST: 4 instruction cycles (in LMM only)
   245                          
   246                             macro RAM_X_POINTS_TO_STACKPAGE
   247                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   248                                or   F, FLAG_PGMODE_01b
   249                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   250  3C51                       endm
   251                          
   252                             ;-----------------------------------------------
   253                             ;  Force indexed addr mode operands to Index Pg
   254                             ;-----------------------------------------------
   255                             ;
   256                             ;  DESC: Permit instructions that use indexed address mode to reference page
   257                             ;        zero or the page pointed to by the IDX_PP register, depending on the
   258                             ;        setting of the MSb (or "Direct Page Mode" bit) of the PGMODE bits
   259                             ;        in the CPU Flag register, F. (This macro clears the PGMODE LSb.)
   260                             ;
   261                             ; INPUT: none
   262                             ;
   263                             ;  COST: 4 instruction cycles (in LMM only)
   264                          
   265                             macro RAM_X_POINTS_TO_INDEXPAGE
   266                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   267                                and  F, ~FLAG_PGMODE_01b
   268                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   269  3C51                       endm
   270                          
   271                             ;-----------------------------------------------
   272                             ;  Function Prologue
   273                             ;-----------------------------------------------
   274                             ;
   275                             ;  Prologue for functions that run in the LMM and SMM.
   276                             ;
   277                          
   278                             macro RAM_PROLOGUE( ACTUAL_CLASS )
   279                          
   280                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   281                             ; Nothing to do
   282                             ENDIF ; RAM_USE_CLASS_1
   283                          
   284                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   285                                IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   286                                   RAM_X_POINTS_TO_STACKPAGE         ; exit native paging mode!
   287                                ENDIF
   288                             ENDIF ; RAM_USE_CLASS_2
   289                          
   290                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   291                                IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   292                                   RAM_X_POINTS_TO_INDEXPAGE         ; exit native paging mode!
   293                                ENDIF
   294                             ENDIF ; RAM_USE_CLASS_3
   295                          
   296                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   297                             ; Nothing to do
   298                             ENDIF ; RAM_USE_CLASS_4
   299                          
   300  3C51                       endm
   301                          
   302                             ;-----------------------------------------------
   303                             ;  Function Epilogue
   304                             ;-----------------------------------------------
   305                             ;
   306                             ;  Prologue for functions that run in the LMM and SMM.
   307                             ;
   308                          
   309                             macro RAM_EPILOGUE( ACTUAL_CLASS )
   310                          
   311                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   312                             ; Nothing to do
   313                             ENDIF ; RAM_USE_CLASS_1
   314                          
   315                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   316                                RAM_RESTORE_NATIVE_PAGING
   317                             ENDIF ; RAM_USE_CLASS_2
   318                          
   319                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   320                                RAM_RESTORE_NATIVE_PAGING
   321                             ENDIF ; RAM_USE_CLASS_3
   322                          
   323                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   324                             ; Nothing to do
   325                             ENDIF ; RAM_USE_CLASS_4
   326                          
   327  3C51                       endm
   328                          
   329                             ;-----------------------------------------------
   330                             ;  Preserve Register
   331                             ;-----------------------------------------------
   332                             ;
   333                             ;  DESC: Preserve a register value on the stack
   334                             ;
   335                             ; INPUT: Name or address of register in I/O Space
   336                             ;        The I/O bank is an implicit parameter. That is, this function will
   337                             ;        Access the I/O bank currently specified by the CPU Flag register.
   338                             ;
   339                             ;  USES: CPU 'A' register
   340                             ;
   341                             ;  COST: 9 instruction cycles
   342                          
   343                             macro REG_PRESERVE( IOReg )
   344                             mov   A, reg[ @IOReg ]
   345                             push  A
   346  3C51                       endm
   347                          
   348                             ;-----------------------------------------------
   349                             ;  Restore Register
   350                             ;-----------------------------------------------
   351                             ;
   352                             ;  DESC: Restore a register value from the stack
   353                             ;
   354                             ; INPUT: Name or address of register in I/O Space
   355                             ;        The I/O bank is an implicit parameter. That is, this function will
   356                             ;        Access the I/O bank currently specified by the CPU Flag register.
   357                             ;
   358                             ;  USES: CPU 'A' register
   359                             ;
   360                             ;  COST: 10 instruction cycles
   361                          
   362                             macro REG_RESTORE( IOReg )
   363                             pop   A
   364                             mov   reg[ @IOReg ], A
   365  3C51                       endm
   366                          
   367                             ;-----------------------------------------------
   368                             ;  Preserve Volatile Page Pointer Registers
   369                             ;-----------------------------------------------
   370                             ;
   371                             ;  DESC: Invoked by ISRs before switching to the LMM mode and calling
   372                             ;        functions that require on it.
   373                             ;
   374                             ; INPUT: none
   375                             ;
   376                             ;  USES: CPU 'A' register
   377                             ;
   378                             ;  COST: 45 instruction cycles (in LMM only)
   379                          
   380                             macro ISR_PRESERVE_PAGE_POINTERS
   381                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   382                                REG_PRESERVE CUR_PP
   383                                REG_PRESERVE IDX_PP
   384                                REG_PRESERVE MVR_PP
   385                                REG_PRESERVE MVW_PP
   386                             ENDIF
   387  3C51                       endm
   388                          
   389                             ;-----------------------------------------------
   390                             ;  Restore Volatile Page Pointer Registers
   391                             ;-----------------------------------------------
   392                             ;
   393                             ;  DESC: Undo for RAM_PRESERVE_PAGE_POINTERS macro. Invoked by ISRs after
   394                             ;        calling functions that run in the LMM mode and before executing
   395                             ;        the RETI instruction.
   396                             ;
   397                             ; INPUT: none
   398                             ;
   399                             ;  USES: CPU 'A' register
   400                             ;
   401                             ;  COST: 50 instruction cycles (in LMM only)
   402                          
   403                             macro ISR_RESTORE_PAGE_POINTERS
   404                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   405                                REG_RESTORE MVW_PP
   406                                REG_RESTORE MVR_PP
   407                                REG_RESTORE IDX_PP
   408                                REG_RESTORE CUR_PP
   409                             ENDIF
   410                             endm
      + 3C51                    
      + 3C51                    ; end of file Memory.inc
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  FILENAME:   UART_Board.inc
     4                          ;;  Version: 5.3, Updated on 2013/5/19 at 10:44:49
     5                          ;;  Generated by PSoC Designer 5.4.2946
     6                          ;;
     7                          ;;  DESCRIPTION:  Assembler declarations for the UART user module.
     8                          ;;-----------------------------------------------------------------------------
     9                          ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
    10                          ;;*****************************************************************************
    11                          ;;*****************************************************************************
    12                          
    13                          ;--------------------------------------------------
    14                          ; Constants for UART_Board API's
    15                          ;--------------------------------------------------
    16                          
    17                          ;mask value for global int reg bit for TX instance
    18  0040                    UART_Board_TX_INT_MASK:                      equ 0x40
    19  00E1                    UART_Board_TX_INT_REG:                       equ 0x0e1  ;TX interrupt address
    20  0080                    UART_Board_RX_INT_MASK:                      equ 0x80  ;mask value for global int reg bit for RX ins
                                tance
    21  00E1                    UART_Board_RX_INT_REG:                       equ 0x0e1  ;RX interrupt address
    22                          
    23  0000                    UART_Board_RXBUF_ENABLE:                     equ 0
    24                          
    25                          ; Interrupt control masks
    26  0001                    UART_Board_ENABLE_RX_INT:                    equ 0x01
    27  0000                    UART_Board_DISABLE_RX_INT:                   equ 0x00
    28  0002                    UART_Board_ENABLE_TX_INT:                    equ 0x02
    29  0000                    UART_Board_DISABLE_TX_INT:                   equ 0x00
    30                          
    31  0000                    UART_Board_INT_MODE_TX_REG_EMPTY:            equ 0x00
    32  0001                    UART_Board_INT_MODE_TX_COMPLETE:             equ 0x01
    33                          
    34  0020                    UART_Board_RX_IGNORE_BELOW:                  equ 0x20
    35  0010                    UART_Board_RX_BUFFER_SIZE:                   equ 0x10
    36  000D                    UART_Board_CMD_TERM:                         equ 0xd
    37  0020                    UART_Board_DELIMITER:                        equ 0x20
    38  0000                    UART_Board_BACKSPACE_ENABLE:                 equ 0x0
    39                          
    40                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    41                          ;       WARNING WARNING WARNING
    42                          ; The following equates are for backwards
    43                          ; compatibility only and should not be used
    44                          ; for new designs.
    45                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    46                          
    47                          ;------------------------------------
    48                          ;  Parity masks
    49                          ;------------------------------------
    50  0000                    UART_PARITY_NONE:       equ   00h
    51  0002                    UART_PARITY_EVEN:       equ   02h
    52  0006                    UART_PARITY_ODD:        equ   06h
    53                          
    54                          ;------------------------------------
    55                          ;  TX Status Register masks
    56                          ;------------------------------------
    57  0020                    UART_TX_COMPLETE:       equ   20h
    58  0010                    UART_TX_BUFFER_EMPTY:   equ   10h
    59                          
    60                          ;------------------------------------
    61                          ;  RX Status Register masks
    62                          ;------------------------------------
    63  0010                    UART_RX_ACTIVE:         equ   10h
    64  0008                    UART_RX_COMPLETE:       equ   08h
    65  0080                    UART_RX_PARITY_ERROR:   equ   80h
    66  0040                    UART_RX_OVERRUN_ERROR:  equ   40h
    67  0020                    UART_RX_FRAMING_ERROR:  equ   20h
    68  00E0                    UART_RX_NO_ERROR:       equ   E0h
    69                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    70                          ;             END WARNING
    71                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    72                          
    73                          
    74                          
    75                          ;------------------------------------
    76                          ;  Parity masks
    77                          ;------------------------------------
    78  0000                    UART_Board_PARITY_NONE:                 equ   00h
    79  0002                    UART_Board_PARITY_EVEN:                 equ   02h
    80  0006                    UART_Board_PARITY_ODD:                  equ   06h
    81                          
    82                          ;------------------------------------
    83                          ;  TX Status Register masks
    84                          ;------------------------------------
    85  0020                    UART_Board_TX_COMPLETE:                 equ   20h
    86  0010                    UART_Board_TX_BUFFER_EMPTY:             equ   10h
    87                          
    88                          ;------------------------------------
    89                          ;  RX Status Register masks
    90                          ;------------------------------------
    91  0010                    UART_Board_RX_ACTIVE:                   equ   10h
    92  0008                    UART_Board_RX_COMPLETE:                 equ   08h
    93  0008                    UART_Board_RX_REG_FULL:                 equ   08h
    94  0080                    UART_Board_RX_PARITY_ERROR:             equ   80h
    95  0040                    UART_Board_RX_OVERRUN_ERROR:            equ   40h
    96  0020                    UART_Board_RX_FRAMING_ERROR:            equ   20h
    97  00E0                    UART_Board_RX_ERROR:                    equ   E0h
    98  0001                    UART_Board_RX_ENABLE:                   equ   01h
    99                          
   100  00F0                    UART_Board_RX_BUF_ERROR:                equ   F0h  ; Mask for any Rx that may occur.
   101  0010                    UART_Board_RX_BUF_OVERRUN:              equ   10h  ; This indicates the software buffer has
   102                                                                                  ; been over run.
   103  0001                    UART_Board_RX_BUF_CMDTERM:              equ   01h  ; Command terminator has been received.
   104                          
   105  0001                    UART_Board_RX_NO_DATA:                  equ   01h
   106  00E0                    UART_Board_RX_NO_ERROR:                 equ   E0h
   107                          
   108                          
   109                          ;--------------------------------------------------
   110                          ; Registers Address Constants for UART_Board
   111                          ;--------------------------------------------------
   112                          ;---------------------------------
   113                          ;  Registers used by TX
   114                          ;---------------------------------
   115  003B                    UART_Board_TX_CONTROL_REG:  equ 3bh            ; Control register
   116  0038                    UART_Board_TX_SHIFT_REG:    equ 38h               ; TX Shift Register register
   117  0039                    UART_Board_TX_BUFFER_REG:   equ 39h               ; TX Buffer Register
   118  0038                    UART_Board_TX_FUNC_REG: equ 38h         ; Function register
   119  0039                    UART_Board_TX_INPUT_REG:    equ 39h            ; Input register
   120  003A                    UART_Board_TX_OUTPUT_REG:   equ 3ah           ; Output register
   121                          
   122                          ;---------------------------------
   123                          ;  Registers used by RX
   124                          ;---------------------------------
   125  003F                    UART_Board_RX_CONTROL_REG:  equ 3fh            ; Control register
   126  003C                    UART_Board_RX_SHIFT_REG:    equ 3ch               ; RX Shift Register register
   127  003E                    UART_Board_RX_BUFFER_REG:   equ 3eh               ; RX Buffer Register
   128  003C                    UART_Board_RX_FUNC_REG: equ 3ch         ; Function register
   129  003D                    UART_Board_RX_INPUT_REG:    equ 3dh            ; Input register
   130  003E                    UART_Board_RX_OUTPUT_REG:   equ 3eh           ; Output register
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  Filename:   UART_Board.asm
     4                          ;;  Version: 5.3, Updated on 2013/5/19 at 10:44:49
     5                          ;;  Generated by PSoC Designer 5.4.2946
     6                          ;;
     7                          ;;  DESCRIPTION:  UART User Module software implementation file for the
     8                          ;;                22/24/25/26/27xxx families.
     9                          ;;
    10                          ;;
    11                          ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
    12                          ;;        arguments and observe the associated "Registers are volatile" policy.
    13                          ;;        This means it is the caller's responsibility to preserve any values
    14                          ;;        in the X and A registers that are still needed after the API functions
    15                          ;;        returns. For Large Memory Model devices it is also the caller's 
    16                          ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
    17                          ;;        MVW_PP registers. Even though some of these registers may not be modified
    18                          ;;        now, there is no guarantee that will remain the case in future releases.
    19                          ;;-----------------------------------------------------------------------------
    20                          ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
    21                          ;;*****************************************************************************
    22                          ;;*****************************************************************************
    23                          
    24                          
    25                          include "m8c.inc"
    26                          include "memory.inc"
    27                          include "UART_Board.inc"
    28                          
    29                          ;-----------------------------------------------
    30                          ;  Global Symbols
    31                          ;-----------------------------------------------
    32                          ;-------------------------------------------------------------------
    33                          ;  Declare the functions global for both assembler and C compiler.
    34                          ;
    35                          ;  Note that there are two names for each API. First name is
    36                          ;  assembler reference. Name with underscore is name refence for
    37                          ;  C compiler.  Calling function in C source code does not require
    38                          ;  the underscore.
    39                          ;-------------------------------------------------------------------
    40                          export  UART_Board_SetTxIntMode
    41                          export _UART_Board_SetTxIntMode
    42                          export  UART_Board_EnableInt
    43                          export _UART_Board_EnableInt
    44                          export  UART_Board_DisableInt
    45                          export _UART_Board_DisableInt
    46                          
    47                          export  UART_Board_Start
    48                          export _UART_Board_Start
    49                          export  UART_Board_Stop
    50                          export _UART_Board_Stop
    51                          export  UART_Board_SendData
    52                          export _UART_Board_SendData
    53                          export  UART_Board_bReadTxStatus
    54                          export _UART_Board_bReadTxStatus
    55                          export  UART_Board_bReadRxData
    56                          export _UART_Board_bReadRxData
    57                          export  UART_Board_bReadRxStatus
    58                          export _UART_Board_bReadRxStatus
    59                          
    60                          export  UART_Board_IntCntl
    61                          export _UART_Board_IntCntl
    62                          
    63                          export  UART_Board_TxIntMode
    64                          export _UART_Board_TxIntMode
    65                          
    66                          export  UART_Board_PutSHexByte
    67                          export _UART_Board_PutSHexByte
    68                          export  UART_Board_PutSHexInt
    69                          export _UART_Board_PutSHexInt
    70                          
    71                          export  UART_Board_CPutString
    72                          export _UART_Board_CPutString
    73                          export  UART_Board_PutString
    74                          export _UART_Board_PutString
    75                          export  UART_Board_PutChar
    76                          export _UART_Board_PutChar
    77                          export  UART_Board_Write
    78                          export _UART_Board_Write
    79                          export  UART_Board_CWrite
    80                          export _UART_Board_CWrite
    81                          
    82                          export  UART_Board_cGetChar
    83                          export _UART_Board_cGetChar
    84                          export  UART_Board_cReadChar
    85                          export _UART_Board_cReadChar
    86                          export  UART_Board_iReadChar
    87                          export _UART_Board_iReadChar
    88                          export  UART_Board_PutCRLF
    89                          export _UART_Board_PutCRLF
    90                          
    91                          IF (UART_Board_RXBUF_ENABLE)
    92                          export  UART_Board_CmdReset
    93                          export _UART_Board_CmdReset
    94                          export  UART_Board_bCmdCheck
    95                          export _UART_Board_bCmdCheck
    96                          export  UART_Board_bCmdLength
    97                          export _UART_Board_bCmdLength
    98                          export  UART_Board_bErrCheck
    99                          export _UART_Board_bErrCheck
   100                          
   101                          export  UART_Board_szGetParam
   102                          export _UART_Board_szGetParam
   103                          export  UART_Board_szGetRestOfParams
   104                          export _UART_Board_szGetRestOfParams
   105                          ENDIF
   106                          
   107                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   108                          ; WARNING WARNING WARNING
   109                          ; The following exports are for backwards compatibility only and should
   110                          ; not be used for new designs. They may be eliminated in a future release.
   111                          ; Their status is "NO FURTHER MAINTENANCE". 
   112                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   113                          export  bUART_Board_ReadTxStatus
   114                          export _bUART_Board_ReadTxStatus
   115                          export  bUART_Board_ReadRxData
   116                          export _bUART_Board_ReadRxData
   117                          export  bUART_Board_ReadRxStatus
   118                          export _bUART_Board_ReadRxStatus
   119                          	
   120                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   121                          ;             END WARNING
   122                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   123                          
   124                          ;-----------------------------------------------
   125                          ; Variable Allocation
   126                          ;-----------------------------------------------
   127                          IF (UART_Board_RXBUF_ENABLE)
   128                              
   129                          area UART_Board_RAM (RAM, REL, CON)
   130                              
   131                           ptrParam:   BLK  1
   132                          
   133                          ENDIF
   134                          
   135                          area text (ROM,REL)
   136                          
   137                          ;-----------------------------------------------
   138                          ;  EQUATES
   139                          ;-----------------------------------------------
   140  0001                    bfCONTROL_REG_START_BIT:        equ    1    ; Control register start bit
   141  0010                    bfFUNCTION_REG_TX_INT_MODE_BIT: equ 0x10    ; the TX Int Mode bit
   142                          
   143                          area UserModules (ROM, REL, CON)
   144                          
   145                          ;=============================================================================
   146                          ;=============================================================================
   147                          ;
   148                          ;     Low-Level Commands
   149                          ;
   150                          ;=============================================================================
   151                          ;=============================================================================
   152                          
   153                          .SECTION
   154                          ;-----------------------------------------------------------------------------
   155                          ;  FUNCTION NAME: UART_Board_EnableInt
   156                          ;
   157                          ;  DESCRIPTION:
   158                          ;     Enables this UART's interrupt by setting the interrupt enable mask
   159                          ;     bit associated with this User Module. Remember to call the global
   160                          ;     interrupt enable function by using the macro: M8C_EnableGInt.
   161                          ;-----------------------------------------------------------------------------
   162                          ;
   163                          ;  ARGUMENTS:
   164                          ;     none.
   165                          ;
   166                          ;  RETURNS:
   167                          ;     none.
   168                          ;
   169                          ;  SIDE EFFECTS:
   170                          ;    The A and X registers may be modified by this or future implementations
   171                          ;    of this function.  The same is true for all RAM page pointer registers in
   172                          ;    the Large Memory Model.  When necessary, it is the calling function's
   173                          ;    responsibility to perserve their values across calls to fastcall16 
   174                          ;    functions.
   175                          ;
   176  2DEC                     UART_Board_EnableInt:
   177  2DEC                    _UART_Board_EnableInt:
   178                             RAM_PROLOGUE RAM_USE_CLASS_1
   179  2DEC  43 E1 40             M8C_EnableIntMask UART_Board_TX_INT_REG, UART_Board_TX_INT_MASK
   180  2DEF  43 E1 80             M8C_EnableIntMask UART_Board_RX_INT_REG, UART_Board_RX_INT_MASK
   181                             RAM_EPILOGUE RAM_USE_CLASS_1
   182  2DF2  7F                   ret
   183                          .ENDSECTION
   184                          
   185                              
   186                          .SECTION
   187                          ;-----------------------------------------------------------------------------
   188                          ;  FUNCTION NAME: UART_Board_DisableInt
   189                          ;
   190                          ;  DESCRIPTION:
   191                          ;     Disables this UART's interrupt by clearing the interrupt enable mask bit
   192                          ;     associated with this User Module.
   193                          ;-----------------------------------------------------------------------------
   194                          ;
   195                          ;  ARGUMENTS:
   196                          ;     none.
   197                          ;
   198                          ;  RETURNS:
   199                          ;     none.
   200                          ;
   201                          ;  SIDE EFFECTS:
   202                          ;    The A and X registers may be modified by this or future implementations
   203                          ;    of this function.  The same is true for all RAM page pointer registers in
   204                          ;    the Large Memory Model.  When necessary, it is the calling function's
   205                          ;    responsibility to perserve their values across calls to fastcall16 
   206                          ;    functions.
   207                          ;
   208  2DF3                     UART_Board_DisableInt:
   209  2DF3                    _UART_Board_DisableInt:
   210                             RAM_PROLOGUE RAM_USE_CLASS_1
   211  2DF3  41 E1 BF             M8C_DisableIntMask UART_Board_TX_INT_REG, UART_Board_TX_INT_MASK
   212  2DF6  41 E1 7F             M8C_DisableIntMask UART_Board_RX_INT_REG, UART_Board_RX_INT_MASK
   213                             RAM_EPILOGUE RAM_USE_CLASS_1
   214  2DF9  7F                   ret
   215                          .ENDSECTION
   216                          
   217                          
   218                          .SECTION
   219                          ;-----------------------------------------------------------------------------
   220                          ;  FUNCTION NAME: UART_Board_SetTxIntMode(BYTE bTxIntMode)
   221                          ;
   222                          ;  DESCRIPTION:
   223                          ;     Sets the Tx Interrupt Mode bit in the Function Register.
   224                          ;-----------------------------------------------------------------------------
   225                          ;
   226                          ;  ARGUMENTS:
   227                          ;     BYTE bTxIntMode - The TX Interrupt mode setting. Use defined masks.
   228                          ;        Passed in the A register
   229                          ;
   230                          ;  RETURNS:
   231                          ;     none.
   232                          ;
   233                          ;  SIDE EFFECTS:
   234                          ;    The A and X registers may be modified by this or future implementations
   235                          ;    of this function.  The same is true for all RAM page pointer registers in
   236                          ;    the Large Memory Model.  When necessary, it is the calling function's
   237                          ;    responsibility to perserve their values across calls to fastcall16 
   238                          ;    functions.
   239                          ;
   240                          ;  THEORY of OPERATION OR PROCEDURE:
   241                          ;     Sets the TX interrupt mode bit to define whether the interrupt occurs
   242                          ;     on TX register empty or TX transmit complete
   243                          ;
   244  2DFA                     UART_Board_SetTxIntMode:
   245  2DFA                    _UART_Board_SetTxIntMode:
   246                             RAM_PROLOGUE RAM_USE_CLASS_1
   247  2DFA  71 10                M8C_SetBank1
   248  2DFC  21 01                and   A, UART_Board_INT_MODE_TX_COMPLETE
   249  2DFE  A007                 jz    .SetModeRegEmpty
   250  2E00  43 38 10             or    REG[UART_Board_TX_FUNC_REG], bfFUNCTION_REG_TX_INT_MODE_BIT
   251  2E03  70 EF                M8C_SetBank0
   252                             RAM_EPILOGUE RAM_USE_CLASS_1
   253  2E05  7F                   ret
   254                          
   255  2E06                    .SetModeRegEmpty:
   256  2E06  41 38 EF             and   REG[UART_Board_TX_FUNC_REG], ~bfFUNCTION_REG_TX_INT_MODE_BIT
   257  2E09  70 EF                M8C_SetBank0
   258                             RAM_EPILOGUE RAM_USE_CLASS_1
   259  2E0B  7F                   ret
   260                          .ENDSECTION
   261                          
   262                          
   263                          .SECTION
   264                          ;-----------------------------------------------------------------------------
   265                          ;  FUNCTION NAME: UART_Board_Start(BYTE bParity)
   266                          ;
   267                          ;  DESCRIPTION:
   268                          ;     Sets the start bit and parity in the Control register of this user module.
   269                          ;-----------------------------------------------------------------------------
   270                          ;
   271                          ;  ARGUMENTS:
   272                          ;     BYTE bParity - parity setting for the Transmitter and receiver. Use defined masks.
   273                          ;        Passed in the A register.
   274                          ;
   275                          ;  RETURNS:
   276                          ;     none.
   277                          ;
   278                          ;  SIDE EFFECTS:
   279                          ;    The A and X registers may be modified by this or future implementations
   280                          ;    of this function.  The same is true for all RAM page pointer registers in
   281                          ;    the Large Memory Model.  When necessary, it is the calling function's
   282                          ;    responsibility to perserve their values across calls to fastcall16 
   283                          ;    functions.
   284                          ;
   285  2E0C                     UART_Board_Start:
   286  2E0C                    _UART_Board_Start:
   287                             RAM_PROLOGUE RAM_USE_CLASS_1
   288                             ; Note, Proxy Class 4 only if receive buffer used; otherwise Proxy Class 1.
   289                          
   290  2E0C  29 01                or    A, bfCONTROL_REG_START_BIT
   291  2E0E  60 3B                mov   REG[UART_Board_TX_CONTROL_REG], A
   292  2E10  60 3F                mov   REG[UART_Board_RX_CONTROL_REG], A
   293                          IF ( UART_Board_RXBUF_ENABLE )
   294                             call  _UART_Board_CmdReset
   295                          ENDIF
   296                             RAM_EPILOGUE RAM_USE_CLASS_1
   297  2E12  7F                   ret
   298                          .ENDSECTION
   299                          
   300                          
   301                          .SECTION
   302                          ;-----------------------------------------------------------------------------
   303                          ;  FUNCTION NAME: UART_Board_Stop
   304                          ;
   305                          ;  DESCRIPTION:
   306                          ;     Disables UART operation.
   307                          ;-----------------------------------------------------------------------------
   308                          ;
   309                          ;  ARGUMENTS:
   310                          ;     none.
   311                          ;
   312                          ;  RETURNS:
   313                          ;     none.
   314                          ;
   315                          ;  SIDE EFFECTS:
   316                          ;    The A and X registers may be modified by this or future implementations
   317                          ;    of this function.  The same is true for all RAM page pointer registers in
   318                          ;    the Large Memory Model.  When necessary, it is the calling function's
   319                          ;    responsibility to perserve their values across calls to fastcall16 
   320                          ;    functions.
   321                          ;
   322  2E13                     UART_Board_Stop:
   323  2E13                    _UART_Board_Stop:
   324                             RAM_PROLOGUE RAM_USE_CLASS_1
   325  2E13  41 3B FE             and   REG[UART_Board_TX_CONTROL_REG], ~bfCONTROL_REG_START_BIT
   326  2E16  41 3F FE             and   REG[UART_Board_RX_CONTROL_REG], ~bfCONTROL_REG_START_BIT
   327                             RAM_EPILOGUE RAM_USE_CLASS_1
   328  2E19  7F                   ret
   329                          .ENDSECTION
   330                          
   331                          
   332                          .SECTION
   333                          ;-----------------------------------------------------------------------------
   334                          ;  FUNCTION NAME: UART_Board_SendData
   335                          ;
   336                          ;  DESCRIPTION:
   337                          ;     Initiates a transmission of data.
   338                          ;-----------------------------------------------------------------------------
   339                          ;
   340                          ;  ARGUMENTS:
   341                          ;     BYTE  TxData - data to transmit. PASSED in A register.
   342                          ;
   343                          ;  RETURNS:
   344                          ;     none.
   345                          ;
   346                          ;  SIDE EFFECTS:
   347                          ;    The A and X registers may be modified by this or future implementations
   348                          ;    of this function.  The same is true for all RAM page pointer registers in
   349                          ;    the Large Memory Model.  When necessary, it is the calling function's
   350                          ;    responsibility to perserve their values across calls to fastcall16 
   351                          ;    functions.
   352                          ;
   353  2E1A                     UART_Board_SendData:
   354  2E1A                    _UART_Board_SendData:
   355                             RAM_PROLOGUE RAM_USE_CLASS_1
   356  2E1A  60 39                mov REG[UART_Board_TX_BUFFER_REG], A
   357                             RAM_EPILOGUE RAM_USE_CLASS_1
   358  2E1C  7F                   ret
   359                          .ENDSECTION
   360                          
   361                          
   362                          .SECTION
   363                          ;-----------------------------------------------------------------------------
   364                          ;  FUNCTION NAME: UART_Board_bReadTxStatus
   365                          ;
   366                          ;  DESCRIPTION:
   367                          ;     Reads the Tx Status bits in the Control/Status register.
   368                          ;-----------------------------------------------------------------------------
   369                          ;
   370                          ;  ARGUMENTS:
   371                          ;     none.
   372                          ;
   373                          ;  RETURNS:
   374                          ;     BYTE  bTxStatus - transmit status data.  Use defined masks for detecting
   375                          ;           status bits (returned in A)
   376                          ;
   377                          ;  SIDE EFFECTS:
   378                          ;    The A and X registers may be modified by this or future implementations
   379                          ;    of this function.  The same is true for all RAM page pointer registers in
   380                          ;    the Large Memory Model.  When necessary, it is the calling function's
   381                          ;    responsibility to perserve their values across calls to fastcall16 
   382                          ;    functions.
   383                          ;
   384  2E1D                     UART_Board_bReadTxStatus:
   385  2E1D                    _UART_Board_bReadTxStatus:
   386  2E1D                     bUART_Board_ReadTxStatus:                       ; For backwards compatibility only
   387  2E1D                    _bUART_Board_ReadTxStatus:                       ; For backwards compatibility only
   388                             RAM_PROLOGUE RAM_USE_CLASS_1
   389  2E1D  5D 3B                mov A,  REG[UART_Board_TX_CONTROL_REG]
   390                             RAM_EPILOGUE RAM_USE_CLASS_1
   391  2E1F  7F                   ret
   392                          .ENDSECTION
   393                          
   394                          
   395                          .SECTION
   396                          ;-----------------------------------------------------------------------------
   397                          ;  FUNCTION NAME: UART_Board_bReadRxData
   398                          ;
   399                          ;  DESCRIPTION:
   400                          ;     Reads the RX buffer register.  Should check the status regiser to make
   401                          ;     sure data is valid.
   402                          ;-----------------------------------------------------------------------------
   403                          ;
   404                          ;  ARGUMENTS:
   405                          ;     none.
   406                          ;
   407                          ;  RETURNS:
   408                          ;     bRxData - returned in A.
   409                          ;
   410                          ;  SIDE EFFECTS:
   411                          ;    The A and X registers may be modified by this or future implementations
   412                          ;    of this function.  The same is true for all RAM page pointer registers in
   413                          ;    the Large Memory Model.  When necessary, it is the calling function's
   414                          ;    responsibility to perserve their values across calls to fastcall16 
   415                          ;    functions.
   416                          ;
   417  2E20                     UART_Board_bReadRxData:
   418  2E20                    _UART_Board_bReadRxData:
   419  2E20                     bUART_Board_ReadRxData:                         ; For backwards compatibility only
   420  2E20                    _bUART_Board_ReadRxData:                         ; For backwards compatibility only
   421                             RAM_PROLOGUE RAM_USE_CLASS_1
   422  2E20  5D 3E                mov A, REG[UART_Board_RX_BUFFER_REG]
   423                             RAM_EPILOGUE RAM_USE_CLASS_1
   424  2E22  7F                   ret
   425                          .ENDSECTION
   426                          
   427                          
   428                          .SECTION
   429                          ;-----------------------------------------------------------------------------
   430                          ;  FUNCTION NAME: UART_Board_bReadRxStatus
   431                          ;
   432                          ;  DESCRIPTION:
   433                          ;     Reads the RX Status bits in the Control/Status register.
   434                          ;-----------------------------------------------------------------------------
   435                          ;
   436                          ;  ARGUMENTS:
   437                          ;     none.
   438                          ;
   439                          ;  RETURNS:
   440                          ;     BYTE  bRXStatus - receive status data.  Use the following defined bits
   441                          ;                       masks: RX_COMPLETE and RX_BUFFER_EMPTY
   442                          ;           returned in A.
   443                          ;
   444                          ;  SIDE EFFECTS:
   445                          ;    The A and X registers may be modified by this or future implementations
   446                          ;    of this function.  The same is true for all RAM page pointer registers in
   447                          ;    the Large Memory Model.  When necessary, it is the calling function's
   448                          ;    responsibility to perserve their values across calls to fastcall16 
   449                          ;    functions.
   450                          ;
   451  2E23                     UART_Board_bReadRxStatus:
   452  2E23                    _UART_Board_bReadRxStatus:
   453  2E23                     bUART_Board_ReadRxStatus:                       ; For backwards compatibility only
   454  2E23                    _bUART_Board_ReadRxStatus:                       ; For backwards compatibility only
   455                             RAM_PROLOGUE RAM_USE_CLASS_1
   456  2E23  5D 3F                mov A,  REG[UART_Board_RX_CONTROL_REG]
   457                             RAM_EPILOGUE RAM_USE_CLASS_1
   458  2E25  7F                   ret
   459                          .ENDSECTION
   460                          
   461                          
   462                          .SECTION
   463                          ;-----------------------------------------------------------------------------
   464                          ;  FUNCTION NAME: UART_Board_TxIntMode
   465                          ;
   466                          ;  DESCRIPTION:
   467                          ;     This function is used to change the TX Interrupt mode.
   468                          ;-----------------------------------------------------------------------------
   469                          ;
   470                          ;  ARGUMENTS:
   471                          ;     A => Tx Interrupt mode
   472                          ;             0 => Interrupt on TX_Reg_Empty  (Default)
   473                          ;             1 => Interrupt on TX Complete
   474                          ;
   475                          ;  RETURNS:
   476                          ;     none.
   477                          ;
   478                          ;  SIDE EFFECTS:
   479                          ;    The A and X registers may be modified by this or future implementations
   480                          ;    of this function.  The same is true for all RAM page pointer registers in
   481                          ;    the Large Memory Model.  When necessary, it is the calling function's
   482                          ;    responsibility to perserve their values across calls to fastcall16 
   483                          ;    functions.
   484                          ;
   485  2E26                     UART_Board_TxIntMode:
   486  2E26                    _UART_Board_TxIntMode:
   487                             RAM_PROLOGUE RAM_USE_CLASS_1
   488                          
   489  2E26  21 01                and  A,UART_Board_INT_MODE_TX_COMPLETE
   490  2E28  71 10                M8C_SetBank1
   491  2E2A  39 01                cmp  A,UART_Board_INT_MODE_TX_COMPLETE
   492  2E2C  A006                 jz   .SetTxCmpMode
   493                          
   494  2E2E  41 38 EF             and  reg[UART_Board_TX_FUNC_REG],0xEF         ; Set Interrupt on Tx_Reg_Empty
   495  2E31  8004                 jmp  .TxIntMode_End
   496                          
   497  2E33                    .SetTxCmpMode:                                       ; Set Interrupt on TX Complete
   498  2E33  43 38 10             or   reg[UART_Board_TX_FUNC_REG],0x10
   499                          
   500  2E36                    .TxIntMode_End:
   501  2E36  70 EF                M8C_SetBank0
   502                             RAM_EPILOGUE RAM_USE_CLASS_1
   503  2E38  7F                   ret
   504                          .ENDSECTION
   505                          
   506                              
   507                          .SECTION
   508                          ;-----------------------------------------------------------------------------
   509                          ;  FUNCTION NAME: UART_Board_IntCntl
   510                          ;
   511                          ;  DESCRIPTION:
   512                          ;     This function is used to enable/disable the Rx and Tx interrupt.
   513                          ;-----------------------------------------------------------------------------
   514                          ;
   515                          ;  ARGUMENTS:
   516                          ;     A => Interrupt mask
   517                          ;
   518                          ;  RETURNS:
   519                          ;     none.
   520                          ;
   521                          ;  SIDE EFFECTS:
   522                          ;    The A and X registers may be modified by this or future implementations
   523                          ;    of this function.  The same is true for all RAM page pointer registers in
   524                          ;    the Large Memory Model.  When necessary, it is the calling function's
   525                          ;    responsibility to perserve their values across calls to fastcall16 
   526                          ;    functions.
   527                          ;
   528                          ;  THEORY of OPERATION or PROCEDURE:
   529                          ;     Set or Clears the Tx/Rx user module interrupt enable mask bit in the TX
   530                          ;     and RX block.
   531                          ;
   532  2E39                     UART_Board_IntCntl:
   533  2E39                    _UART_Board_IntCntl:
   534                             RAM_PROLOGUE RAM_USE_CLASS_1
   535                          
   536  2E39  08                   push A
   537  2E3A  21 01                and  A,UART_Board_ENABLE_RX_INT
   538  2E3C  A006                 jz   .DisRxInt
   539                               ; Enable Rx Interrupt
   540  2E3E  43 E1 80             M8C_EnableIntMask UART_Board_RX_INT_REG, UART_Board_RX_INT_MASK
   541  2E41  8004                 jmp  .CheckTxInt
   542  2E43                    .DisRxInt:
   543                               ; Disable Rx Interrupt
   544  2E43  41 E1 7F             M8C_DisableIntMask UART_Board_RX_INT_REG, UART_Board_RX_INT_MASK
   545                          
   546  2E46                    .CheckTxInt:
   547  2E46  18                   pop  A
   548  2E47  21 02                and  A,UART_Board_ENABLE_TX_INT
   549  2E49  A006                 jz   .DisTxInt
   550                               ; Enable Tx Interrupt
   551  2E4B  43 E1 40             M8C_EnableIntMask UART_Board_TX_INT_REG, UART_Board_TX_INT_MASK
   552  2E4E  8004                 jmp  .End_IntCntl
   553  2E50                    .DisTxInt:
   554                               ; Disable Tx Interrupt
   555  2E50  41 E1 BF             M8C_DisableIntMask UART_Board_TX_INT_REG, UART_Board_TX_INT_MASK
   556                          
   557  2E53                    .End_IntCntl:
   558                             RAM_EPILOGUE RAM_USE_CLASS_1
   559  2E53  7F                   ret
   560                          .ENDSECTION
   561                          
   562                          
   563                          ;=============================================================================
   564                          ;=============================================================================
   565                          ;
   566                          ;     High-Level Commands
   567                          ;
   568                          ;=============================================================================
   569                          ;=============================================================================
   570                          
   571                          
   572                          ;-----------------------------------------------------------------------------
   573                          ;  FUNCTION NAME: UART_Board_PutSHexByte
   574                          ;
   575                          ;  DESCRIPTION:
   576                          ;     Print a byte in Hex (two characters) to the UART Tx
   577                          ;-----------------------------------------------------------------------------
   578                          ;
   579                          ;  ARGUMENTS:
   580                          ;     A  => (BYTE) Data/char to be printed
   581                          ;
   582                          ;  RETURNS:
   583                          ;     none.
   584                          ;
   585                          ;  SIDE EFFECTS:
   586                          ;    The A and X registers may be modified by this or future implementations
   587                          ;    of this function.  The same is true for all RAM page pointer registers in
   588                          ;    the Large Memory Model.  When necessary, it is the calling function's
   589                          ;    responsibility to perserve their values across calls to fastcall16 
   590                          ;    functions.
   591                          ;
   592                          .LITERAL
   593  2E54                    UART_Board_HEX_STR:
   594  2E54  30 31 32 33 34 35      DS    "0123456789ABCDEF"
              36 37 38 39 41 42 
              43 44 45 46       
   595                          .ENDLITERAL
   596                          
   597                          .SECTION
   598  2E64                     UART_Board_PutSHexByte:
   599  2E64                    _UART_Board_PutSHexByte:
   600                             RAM_PROLOGUE RAM_USE_CLASS_1
   601  2E64  08                   push  A                             ; Save lower nibble
   602  2E65  67                   asr   A                             ; Shift high nibble to right
   603  2E66  67                   asr   A
   604  2E67  67                   asr   A
   605  2E68  67                   asr   A
   606  2E69  21 0F                and   A,0Fh                         ; Mask off nibble
   607  2E6B  FFE7                 index UART_Board_HEX_STR            ; Get Hex value
   608  2E6D  900F                 call  UART_Board_PutChar            ; Write data to screen
   609  2E6F  18                   pop   A                             ; Restore value
   610  2E70  21 0F                and   A,0Fh                         ; Mask off lower nibble
   611  2E72  FFE0                 index UART_Board_HEX_STR            ; Get Hex value
   612  2E74  9008                 call  UART_Board_PutChar            ; Write data to screen
   613                             RAM_EPILOGUE RAM_USE_CLASS_1
   614  2E76  7F                   ret
   615                          .ENDSECTION
   616                          
   617                          
   618                          .SECTION
   619                          ;-----------------------------------------------------------------------------
   620                          ;  FUNCTION NAME: UART_Board_PutSHexInt
   621                          ;
   622                          ;  DESCRIPTION:
   623                          ;     Print an Int in Hex (four characters) to UART Tx
   624                          ;-----------------------------------------------------------------------------
   625                          ;
   626                          ;  ARGUMENTS:
   627                          ;     Pointer to string
   628                          ;     A  => ASB of Int
   629                          ;     X  => MSB of Int
   630                          ;
   631                          ;  RETURNS:
   632                          ;     none.
   633                          ;
   634                          ;  SIDE EFFECTS:
   635                          ;    The A and X registers may be modified by this or future implementations
   636                          ;    of this function.  The same is true for all RAM page pointer registers in
   637                          ;    the Large Memory Model.  When necessary, it is the calling function's
   638                          ;    responsibility to perserve their values across calls to fastcall16 
   639                          ;    functions.
   640                          ;
   641                          
   642  2E77                     UART_Board_PutSHexInt:
   643  2E77                    _UART_Board_PutSHexInt:
   644                             RAM_PROLOGUE RAM_USE_CLASS_1
   645  2E77  4B                   swap  A,X
   646  2E78  9FEA                 call  UART_Board_PutSHexByte        ; Print MSB
   647  2E7A  5B                   mov   A,X                           ; Move LSB into position
   648  2E7B  9FE7                 call  UART_Board_PutSHexByte        ; Print LSB
   649                             RAM_EPILOGUE RAM_USE_CLASS_1
   650  2E7D  7F                   ret
   651                          .ENDSECTION
   652                          
   653                          
   654                          .SECTION
   655                          ;-----------------------------------------------------------------------------
   656                          ;  FUNCTION NAME: UART_Board_PutChar
   657                          ;
   658                          ;  DESCRIPTION:
   659                          ;     Send character out through UART TX port.
   660                          ;-----------------------------------------------------------------------------
   661                          ;
   662                          ;  ARGUMENTS:
   663                          ;     A has Character to send to UART Tx Port
   664                          ;
   665                          ;  RETURNS:
   666                          ;     none
   667                          ;
   668                          ;  SIDE EFFECTS:
   669                          ;    The A and X registers may be modified by this or future implementations
   670                          ;    of this function.  The same is true for all RAM page pointer registers in
   671                          ;    the Large Memory Model.  When necessary, it is the calling function's
   672                          ;    responsibility to perserve their values across calls to fastcall16 
   673                          ;    functions.
   674                          ;
   675                          
   676                             macro InLinePutChar( Source )
   677                          .BufEmptyWaitLoop:
   678                             tst REG[UART_Board_TX_CONTROL_REG], UART_Board_TX_BUFFER_EMPTY     ; Check Tx Status
   679                             jz  .BufEmptyWaitLoop
   680                             mov REG[UART_Board_TX_BUFFER_REG], @Source    ; Write data to Tx Port
   681  2E7E                       endm
   682                          
   683  2E7E                     UART_Board_PutChar:
   684  2E7E                    _UART_Board_PutChar:
   685                             RAM_PROLOGUE RAM_USE_CLASS_1
   686                             InLinePutChar A
      + 2E7E                    ; Nothing to do
??0000:
      + 2E7E  49 3B 10          	tst	reg[59], 16
      + 2E81  AFFC              	jz	??0000
      + 2E83  60 39             	mov	reg[57], a
   687                             RAM_EPILOGUE RAM_USE_CLASS_1
   688  2E85  7F                   ret
   689                          .ENDSECTION
   690                          
   691                          
   692                          .SECTION
   693                          ;-----------------------------------------------------------------------------
   694                          ;  FUNCTION NAME: UART_Board_cGetChar
   695                          ;
   696                          ;  DESCRIPTION:
   697                          ;     Read character from UART RX port.
   698                          ;-----------------------------------------------------------------------------
   699                          ;
   700                          ;  ARGUMENTS:
   701                          ;      none
   702                          ;
   703                          ;  RETURNS:
   704                          ;     char that is returned from UART
   705                          ;
   706                          ;  SIDE EFFECTS:
   707                          ;    The A and X registers may be modified by this or future implementations
   708                          ;    of this function.  The same is true for all RAM page pointer registers in
   709                          ;    the Large Memory Model.  When necessary, it is the calling function's
   710                          ;    responsibility to perserve their values across calls to fastcall16 
   711                          ;    functions.
   712                          ;
   713                          ;    Program flow will stay in this function until a character is received.
   714                          ;    If the watchdog timer is used, care must be taken to make sure that
   715                          ;    the delay between characters is less than the watchdog timeout.
   716                          ;
   717  2E86                     UART_Board_cGetChar:
   718  2E86                    _UART_Board_cGetChar:
   719                             RAM_PROLOGUE RAM_USE_CLASS_1
   720  2E86  49 3F 08             tst REG[UART_Board_RX_CONTROL_REG],UART_Board_RX_REG_FULL    ; Check if a character is ready
   721  2E89  AFFC                 jz  UART_Board_cGetChar                              ; If not loop
   722  2E8B  5D 3E                mov A, REG[UART_Board_RX_BUFFER_REG]                 ; Get character
   723                             RAM_EPILOGUE RAM_USE_CLASS_1
   724  2E8D  7F                   ret
   725                          .ENDSECTION
   726                          
   727                          
   728                          .SECTION
   729                          ;-----------------------------------------------------------------------------
   730                          ;  FUNCTION NAME: UART_Board_cReadChar
   731                          ;
   732                          ;  DESCRIPTION:
   733                          ;     Read character from UART RX port.
   734                          ;-----------------------------------------------------------------------------
   735                          ;
   736                          ;  ARGUMENTS:
   737                          ;      none
   738                          ;
   739                          ;  RETURNS:
   740                          ;     char that is returned from UART
   741                          ;
   742                          ;  SIDE EFFECTS:
   743                          ;    The A and X registers may be modified by this or future implementations
   744                          ;    of this function.  The same is true for all RAM page pointer registers in
   745                          ;    the Large Memory Model.  When necessary, it is the calling function's
   746                          ;    responsibility to perserve their values across calls to fastcall16 
   747                          ;    functions.
   748                          ;
   749                          ;    A valid 0x00 character will be ignored, since a 0x00 return value
   750                          ;    implies a valid character or an error condition occured.
   751                          ;
   752  2E8E                     UART_Board_cReadChar:
   753  2E8E                    _UART_Board_cReadChar:
   754                             RAM_PROLOGUE RAM_USE_CLASS_1
   755  2E8E  5D 3F                mov  A,REG[UART_Board_RX_CONTROL_REG]                   ; Get Status of RX
   756  2E90  08                   push A
   757  2E91  21 08                and  A,UART_Board_RX_COMPLETE                           ; Check if a character is ready
   758  2E93  B004                 jnz  .RX_DATA_RDY                                       ; Data Ready go read it.
   759  2E95  18                   pop  A
   760  2E96  800B                 jmp  .RX_NO_VALID_CHAR
   761                          
   762  2E98                    .RX_DATA_RDY:
   763  2E98  5D 3E                mov  A,REG[UART_Board_RX_BUFFER_REG ]          
   764  2E9A  4B                   swap A,X                                                ; determine if data is valid
   765                          
   766  2E9B  18                   pop  A                                                  ; Check for errors
   767  2E9C  21 A0                and  A,(UART_Board_RX_PARITY_ERROR | UART_Board_RX_FRAMING_ERROR)
   768  2E9E  B003                 jnz  .RX_NO_VALID_CHAR                                  ; No character, exit
   769  2EA0  4B                   swap A,X                                                ; Put data in A and exit
   770                             RAM_EPILOGUE RAM_USE_CLASS_1
   771  2EA1  7F                   ret
   772                          
   773  2EA2                    .RX_NO_VALID_CHAR:
   774  2EA2  50 00                mov A,0x00                                              ; Zero out character
   775                          
   776  2EA4                     End_UART_Board_cReadChar:
   777                             RAM_EPILOGUE RAM_USE_CLASS_1
   778  2EA4  7F                   ret
   779                          .ENDSECTION
   780                          
   781                          
   782                          .SECTION
   783                          ;-----------------------------------------------------------------------------
   784                          ;  FUNCTION NAME: UART_Board_iReadChar
   785                          ;
   786                          ;  WARNING WARNING WARNING  Negative return value not correct!!!!  We may want
   787                          ;  to just set a value in the upper byte if error conditions exists.
   788                          ;
   789                          ;  DESCRIPTION:
   790                          ;     Read character from UART RX port.
   791                          ;-----------------------------------------------------------------------------
   792                          ;
   793                          ;  ARGUMENTS:
   794                          ;      none
   795                          ;
   796                          ;  RETURNS:
   797                          ;     An integer value is returned.  A negative value inplies and error
   798                          ;     condition, a positive value between 0 and 255 is the return character.
   799                          ;
   800                          ;     Error Codes:
   801                          ;        0x80CC    Parity Error
   802                          ;        0x40CC    Overrun Error
   803                          ;        0x20CC    Framing Error
   804                          ;        0x01CC    No Data available
   805                          ;
   806                          ;  SIDE EFFECTS:
   807                          ;    The A and X registers may be modified by this or future implementations
   808                          ;    of this function.  The same is true for all RAM page pointer registers in
   809                          ;    the Large Memory Model.  When necessary, it is the calling function's
   810                          ;    responsibility to perserve their values across calls to fastcall16 
   811                          ;    functions.
   812                          ;
   813  2EA5                     UART_Board_iReadChar:
   814  2EA5                    _UART_Board_iReadChar:
   815                             RAM_PROLOGUE RAM_USE_CLASS_1
   816  2EA5  5D 3F                mov  A,REG[UART_Board_RX_CONTROL_REG]                   ; Get Status of RX
   817                                                                                     ; Mask only errors and data ready
   818  2EA7  21 E8                and  A,(UART_Board_RX_ERROR|UART_Board_RX_REG_FULL)
   819  2EA9  08                   push A
   820  2EAA  21 08                and  A,UART_Board_RX_COMPLETE                           ; Check if a character is ready
   821  2EAC  B007                 jnz  .RX_GET_DATA                                       ; Data Ready go read it.
   822  2EAE  18                   pop  A
   823  2EAF  29 01                or   A,UART_Board_RX_NO_DATA                            ; Add no data flag
   824  2EB1  4B                   swap A,X
   825  2EB2  8007                 jmp  End_UART_Board_iReadChar
   826                          
   827  2EB4                    .RX_GET_DATA:
   828  2EB4  18                   pop  A
   829  2EB5  21 E0                and  A,UART_Board_RX_ERROR
   830  2EB7  4B                   swap A,X
   831  2EB8  5D 3E                mov  A,REG[UART_Board_RX_BUFFER_REG ]                   ; Read data first, then
   832                                                                                     ; determine if data is valid
   833                          
   834  2EBA                     End_UART_Board_iReadChar:
   835                             RAM_EPILOGUE RAM_USE_CLASS_1
   836  2EBA  7F                   ret
   837                          .ENDSECTION
   838                          
   839                          
   840                          .SECTION
   841                          ;-----------------------------------------------------------------------------
   842                          ;  FUNCTION NAME: UART_Board_PutString
   843                          ;
   844                          ;  DESCRIPTION:
   845                          ;     Send String out through UART TX port.
   846                          ;-----------------------------------------------------------------------------
   847                          ;
   848                          ;  ARGUMENTS:
   849                          ;     Pointer to String
   850                          ;     A has MSB of string address
   851                          ;     X has LSB of string address
   852                          ;
   853                          ;  RETURNS:
   854                          ;     none
   855                          ;
   856                          ;  SIDE EFFECTS:
   857                          ;    The A and X registers may be modified by this or future implementations
   858                          ;    of this function.  The same is true for all RAM page pointer registers in
   859                          ;    the Large Memory Model.  When necessary, it is the calling function's
   860                          ;    responsibility to perserve their values across calls to fastcall16 
   861                          ;    functions.
   862                          ;          
   863                          ;    Currently only the page pointer registers listed below are modified: 
   864                          ;          IDX_PP
   865                          ;
   866  2EBB                     UART_Board_PutString:
   867  2EBB                    _UART_Board_PutString:
   868                             RAM_PROLOGUE RAM_USE_CLASS_3
   869  2EBB  60 D3                RAM_SETPAGE_IDX A
   870  2EBD                    .PutStringLoop:
   871  2EBD  52 00                mov   A,[X]                                   ; Get value pointed to by X
   872  2EBF  A006                 jz    End_PutString                           ; Check for end of string
   873  2EC1  9FBB                 call  UART_Board_PutChar                      ; Send character to Tx port
   874  2EC3  75                   inc   X                                       ; Advance pointer to next character
   875  2EC4  8FF8                 jmp   .PutStringLoop                          ; Get next character
   876                          
   877  2EC6                    End_PutString:
   878                             RAM_EPILOGUE RAM_USE_CLASS_3
      + 2EC6  70 3F             	and	f, 0x3F
      + 2EC8  71 80             	or	f, 0x80
   879  2ECA  7F                   ret
   880                          .ENDSECTION
   881                              
   882                          .SECTION
   883                          ;-----------------------------------------------------------------------------
   884                          ;  FUNCTION NAME: UART_Board_Write
   885                          ;
   886                          ;  DESCRIPTION:
   887                          ;     Send String of length X to serial port
   888                          ;-----------------------------------------------------------------------------
   889                          ;
   890                          ;  ARGUMENTS:
   891                          ;     Pointer to String
   892                          ;     [SP-5] Count of characters to send
   893                          ;     [SP-4] has MSB of string address
   894                          ;     [SP-3] has LSB of string address
   895                          ;
   896                          ;  RETURNS:
   897                          ;     none
   898                          ;
   899                          ;  SIDE EFFECTS:
   900                          ;    The A and X registers may be modified by this or future implementations
   901                          ;    of this function.  The same is true for all RAM page pointer registers in
   902                          ;    the Large Memory Model.  When necessary, it is the calling function's
   903                          ;    responsibility to perserve their values across calls to fastcall16 
   904                          ;    functions.
   905                          ;          
   906                          ;    Currently only the page pointer registers listed below are modified: 
   907                          ;          IDX_PP
   908                          ;
   909  FFFFFFFB                    CNT_LEN:    equ -5                               ; Length of data to send
   910  FFFFFFFC                    STR_MSB:    equ -4                               ; MSB pointer of string 
   911  FFFFFFFD                    STR_LSB:    equ -3                               ; LSB pointer of string 
   912                          
   913  2ECB                     UART_Board_Write:
   914  2ECB                    _UART_Board_Write:
   915                             RAM_PROLOGUE RAM_USE_CLASS_3
   916  2ECB  62 D3 03             RAM_SETPAGE_IDX2STK                           ; Refer indexed addrs to the stack
   917  2ECE  4F                   mov   X, SP                                   ; Establish the frame pointer 
   918                          
   919  2ECF                    .NextByteLoop:
   920  2ECF  52 FB                mov   A, [X+CNT_LEN]                          ; End of the string?
   921  2ED1  A01A                 jz    .End_Write                              ;   Yes, prepare to exit
   922  2ED3  7B FB                dec   [X+CNT_LEN]                             ; Decrement counter
   923                          
   924                             IF SYSTEM_LARGE_MEMORY_MODEL
   925  2ED5  52 FC                mov   A, [X+STR_MSB]                          ; Load pointer to char to send
   926                             ENDIF
   927                          
   928  2ED7  59 FD                mov   X, [X+STR_LSB]                          ; Load pointer to char to send
   929  2ED9  60 D3                RAM_SETPAGE_IDX A                             ; switch index pages
   930  2EDB  52 00                mov   A, [X]                                  ; Grab the data
   931                             InLinePutChar A                               ; Put data in empty TX buf reg
      + 2EDD                    ??0001:
      + 2EDD  49 3B 10          	tst	reg[59], 16
      + 2EE0  AFFC              	jz	??0001
      + 2EE2  60 39             	mov	reg[57], a
   932  2EE4  4F                   mov   X, SP                                   ; Recover frame pointer
   933  2EE5  62 D3 03             RAM_SETPAGE_IDX2STK                           ; Prepare for stack access
   934  2EE8  77 FD                inc   [X+STR_LSB]                             ; Point to next byte, but do not
   935  2EEA  8FE4                 jmp   .NextByteLoop                           ;    cross RAM page boundary!
   936                          
   937  2EEC                    .End_Write:
   938                             RAM_EPILOGUE RAM_USE_CLASS_3
      + 2EEC  70 3F             	and	f, 0x3F
      + 2EEE  71 80             	or	f, 0x80
   939  2EF0  7F                   ret
   940                          .ENDSECTION
   941                              
   942                          
   943                          .SECTION
   944                          ;-----------------------------------------------------------------------------
   945                          ;  FUNCTION NAME: UART_Board_CWrite
   946                          ;
   947                          ;             WARNING WARNING NOT COMPLETE
   948                          ;
   949                          ;  DESCRIPTION:
   950                          ;     Send String of length X to serial port
   951                          ;-----------------------------------------------------------------------------
   952                          ;
   953                          ;  ARGUMENTS:
   954                          ;     [SP-4] MSB of Count of character to send
   955                          ;     [SP-3] LSB of Count of character to send
   956                          ;     [SP-2] has MSB of string address
   957                          ;     [SP-1] has LSB of string address
   958                          ;
   959                          ;  RETURNS:
   960                          ;     none
   961                          ;
   962                          ;  SIDE EFFECTS:
   963                          ;    The A and X registers may be modified by this or future implementations
   964                          ;    of this function.  The same is true for all RAM page pointer registers in
   965                          ;    the Large Memory Model.  When necessary, it is the calling function's
   966                          ;    responsibility to perserve their values across calls to fastcall16 
   967                          ;    functions.
   968                          ;
   969  FFFFFFFA                    CLEN_MSB:   equ -6           ; MSB Length of data to send
   970  FFFFFFFB                    CLEN_LSB:   equ -5           ; LSB Length of data to send
   971  FFFFFFFC                    CSTR_MSB:   equ -4           ; MSB pointer of string
   972  FFFFFFFD                    CSTR_LSB:   equ -3           ; LSB pointer of string
   973                          
   974  2EF1                     UART_Board_CWrite:
   975  2EF1                    _UART_Board_CWrite:
   976  2EF1  71 40                RAM_PROLOGUE RAM_USE_CLASS_2
   977  2EF3  4F                   mov   X,SP
   978  2EF4                    .CW_Loop:
   979  2EF4  3D FA 00             cmp   [X+CLEN_MSB],0x00                  ; Check for zero counter
   980  2EF7  B006                 jnz   .CW_WRITEIT
   981  2EF9  3D FB 00             cmp   [X+CLEN_LSB],0x00
   982  2EFC  A01D                 jz    .End_CWrite                        ; Leave if done
   983                          
   984  2EFE                    .CW_WRITEIT:                                
   985  2EFE  10                   push  X                                  ; Save frame pointer
   986  2EFF  52 FC                mov   A,[X+CSTR_MSB]
   987  2F01  59 FD                mov   X,[X+CSTR_LSB]
   988  2F03  28                   romx                                     ; Get character from ROM
   989                             InLinePutChar A                          ; Put data in empty TX buf reg
      + 2F04                    ??0002:
      + 2F04  49 3B 10          	tst	reg[59], 16
      + 2F07  AFFC              	jz	??0002
      + 2F09  60 39             	mov	reg[57], a
   990  2F0B  20                   pop   X                                  ; Restore frame pointer
   991  2F0C  07 FD 01             add   [X+CSTR_LSB],1                     ; Increment the string pointer
   992  2F0F  0F FC 00             adc   [X+CSTR_MSB],0
   993  2F12  17 FB 01             sub   [X+CLEN_LSB],0x01                  ; Dec the counter
   994  2F15  1F FA 00             sbb   [X+CLEN_MSB],0x00
   995  2F18  8FDB                 jmp   .CW_Loop
   996                          
   997  2F1A                    .End_CWrite:
   998                             RAM_EPILOGUE RAM_USE_CLASS_2
      + 2F1A  70 3F             	and	f, 0x3F
      + 2F1C  71 80             	or	f, 0x80
   999  2F1E  7F                   ret
  1000                          .ENDSECTION
  1001                          
  1002                          
  1003                          .SECTION
  1004                          ;-----------------------------------------------------------------------------
  1005                          ;  FUNCTION NAME: UART_Board_CPutString
  1006                          ;
  1007                          ;  DESCRIPTION:
  1008                          ;     Send String out through UART TX port.
  1009                          ;-----------------------------------------------------------------------------
  1010                          ;
  1011                          ;  ARGUMENTS:
  1012                          ;     Pointer to String
  1013                          ;     A has MSB of string address
  1014                          ;     X has LSB of string address
  1015                          ;
  1016                          ;  RETURNS:
  1017                          ;     none
  1018                          ;
  1019                          ;  SIDE EFFECTS:
  1020                          ;    The A and X registers may be modified by this or future implementations
  1021                          ;    of this function.  The same is true for all RAM page pointer registers in
  1022                          ;    the Large Memory Model.  When necessary, it is the calling function's
  1023                          ;    responsibility to perserve their values across calls to fastcall16 
  1024                          ;    functions.
  1025                          ;
  1026  2F1F                     UART_Board_CPutString:
  1027  2F1F                    _UART_Board_CPutString:
  1028                             RAM_PROLOGUE RAM_USE_CLASS_1
  1029  2F1F  08                   push  A                                       ; Store ROM pointer
  1030  2F20  10                   push  X
  1031  2F21  28                   romx                                          ; Get character from ROM
  1032  2F22  A00B                 jz    .End_CPutString
  1033  2F24  9F58                 call  UART_Board_PutChar                      ; Print character
  1034  2F26  20                   pop   X
  1035  2F27  18                   pop   A
  1036  2F28  75                   inc   X                                       ; Inc LSB of pointer
  1037  2F29  DFF5                 jnc   UART_Board_CPutString                   ; Check for carry
  1038  2F2B  74                   inc   A                                       ; Inc MSB of pointer
  1039  2F2C  8FF2                 jmp   UART_Board_CPutString
  1040                          
  1041                          
  1042  2F2E                    .End_CPutString:
  1043  2F2E  38 FE                add   SP, -2
  1044                             RAM_EPILOGUE RAM_USE_CLASS_1
  1045  2F30  7F                   ret
  1046                          .ENDSECTION
  1047                          
  1048                          
  1049                          .SECTION
  1050                          ;-----------------------------------------------------------------------------
  1051                          ;  FUNCTION NAME: UART_Board_PutCRLF
  1052                          ;
  1053                          ;  DESCRIPTION:
  1054                          ;     Send a CR and LF
  1055                          ;-----------------------------------------------------------------------------
  1056                          ;
  1057                          ;  ARGUMENTS:
  1058                          ;     none.
  1059                          ;
  1060                          ;  RETURNS:
  1061                          ;     none.
  1062                          ;
  1063                          ;  SIDE EFFECTS:
  1064                          ;    The A and X registers may be modified by this or future implementations
  1065                          ;    of this function.  The same is true for all RAM page pointer registers in
  1066                          ;    the Large Memory Model.  When necessary, it is the calling function's
  1067                          ;    responsibility to perserve their values across calls to fastcall16 
  1068                          ;    functions.
  1069                          ;
  1070  2F31                     UART_Board_PutCRLF:
  1071  2F31                    _UART_Board_PutCRLF:
  1072                             RAM_PROLOGUE RAM_USE_CLASS_1
  1073  2F31  50 0D                mov  A,0x0D                        ; Send CR
  1074  2F33  9F49                 call UART_Board_PutChar
  1075  2F35  50 0A                mov  A,0x0A                        ; Send LF
  1076  2F37  9F45                 call UART_Board_PutChar
  1077                             RAM_EPILOGUE RAM_USE_CLASS_1
  1078  2F39  7F                   ret
HI-TECH Software Macro Assembler (PSoC MCU) V9.61
Symbol Table                                                                                               Fri Jun 12 09:25:11 2015
            _UART_Board_SendData 2E1A         UART_Board_TX_CONTROL_REG 003B              _UART_Board_cGetChar 2E86  
          UART_Board_RX_INT_MASK 0080        UART_Board_TX_BUFFER_EMPTY 0010            UART_Board_RX_REG_FULL 0008  
              UART_Board_IntCntl 2E39        UART_Board_RX_PARITY_ERROR 0080             _UART_Board_cReadChar 2E8E  
           _UART_Board_TxIntMode 2E26               UART_Board_RX_ERROR 00E0                UART_Board_PutCRLF 2F31  
                        CLEN_LSB FFFFFFFB                          CLEN_MSB FFFFFFFA          End_UART_Board_cReadChar 2EA4  
              UART_Board_PutChar 2E7E            bUART_Board_ReadRxData 2E20             _UART_Board_PutString 2EBB  
           UART_Board_PutSHexInt 2E77            UART_Board_TX_FUNC_REG 0038         _bUART_Board_ReadRxStatus 2E23  
          UART_Board_TX_INT_MASK 0040                  _UART_Board_Stop 2E13         _bUART_Board_ReadTxStatus 2E1D  
                        CSTR_LSB FFFFFFFD                          CSTR_MSB FFFFFFFC           bfCONTROL_REG_START_BIT 0001  
           _UART_Board_iReadChar 2EA5            _UART_Board_PutSHexInt 2E77                            ??0000 2E7E  
                          ??0001 2EDD                            ??0002 2F04          End_UART_Board_iReadChar 2EBA  
        UART_Board_bReadRxStatus 2E23                     End_PutString 2EC6               UART_Board_SendData 2E1A  
             UART_Board_cGetChar 2E86          UART_Board_bReadTxStatus 2E1D   UART_Board_INT_MODE_TX_COMPLETE 0001  
         _bUART_Board_ReadRxData 2E20                  UART_Board_Start 2E0C                  UART_Board_Write 2ECB  
                          HITECH 0002            UART_Board_bReadRxData 2E20                   FLAG_PGMODE_01b 0040  
                 FLAG_PGMODE_10b 0080                            IDX_PP 00D3           UART_Board_SetTxIntMode 2DFA  
         UART_Board_RXBUF_ENABLE 0000            UART_Board_PutSHexByte 2E64              UART_Board_EnableInt 2DEC  
           UART_Board_CPutString 2F1F          UART_Board_ENABLE_RX_INT 0001          UART_Board_ENABLE_TX_INT 0002  
               _UART_Board_Start 2E0C                 _UART_Board_Write 2ECB            _UART_Board_CPutString 2F1F  
         _UART_Board_bReadRxData 2E20          UART_Board_TX_BUFFER_REG 0039           _UART_Board_PutSHexByte 2E64  
             _UART_Board_IntCntl 2E39         SYSTEM_LARGE_MEMORY_MODEL 0001               _UART_Board_PutCRLF 2F31  
               UART_Board_CWrite 2EF1               _UART_Board_PutChar 2E7E             UART_Board_RX_INT_REG 00E1  
          SYSTEM_MULTIPAGE_STACK 0000             UART_Board_RX_NO_DATA 0001          _UART_Board_SetTxIntMode 2DFA  
     UART_Board_RX_FRAMING_ERROR 0020                         TOOLCHAIN 0002              UART_Board_cReadChar 2E8E  
            UART_Board_TxIntMode 2E26                           CNT_LEN FFFFFFFB             UART_Board_TX_INT_REG 00E1  
                FLAG_PGMODE_MASK 00C0              UART_Board_PutString 2EBB                   RAM_USE_CLASS_1 0001  
                 RAM_USE_CLASS_2 0002                   RAM_USE_CLASS_3 0004                   RAM_USE_CLASS_4 0008  
                 UART_Board_Stop 2E13                           STR_LSB FFFFFFFD                           STR_MSB FFFFFFFC  
            UART_Board_iReadChar 2EA5             UART_Board_DisableInt 2DF3          bUART_Board_ReadRxStatus 2E23  
  bfFUNCTION_REG_TX_INT_MODE_BIT 0010          bUART_Board_ReadTxStatus 2E1D                _UART_Board_CWrite 2EF1  
       _UART_Board_bReadRxStatus 2E23            _UART_Board_DisableInt 2DF3         _UART_Board_bReadTxStatus 2E1D  
           _UART_Board_EnableInt 2DEC                 SYSTEM_STACK_PAGE 0003                     FLAG_XIO_MASK 0010  
        UART_Board_RX_BUFFER_REG 003E        SYSTEM_IDXPG_TRACKS_IDX_PP 0001        SYSTEM_IDXPG_TRACKS_STK_PP 0000  
          UART_Board_RX_COMPLETE 0008                UART_Board_HEX_STR 2E54         UART_Board_RX_CONTROL_REG 003F  
HI-TECH Software Macro Assembler (PSoC MCU) V9.61
                                                                                                           Fri Jun 12 09:25:11 2015
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  FILENAME:   UART_Board.inc
     4                          ;;  Version: 5.3, Updated on 2013/5/19 at 10:44:49
     5                          ;;  Generated by PSoC Designer 5.4.2946
     6                          ;;
     7                          ;;  DESCRIPTION:  Assembler declarations for the UART user module.
     8                          ;;-----------------------------------------------------------------------------
     9                          ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
    10                          ;;*****************************************************************************
    11                          ;;*****************************************************************************
    12                          
    13                          ;--------------------------------------------------
    14                          ; Constants for UART_Board API's
    15                          ;--------------------------------------------------
    16                          
    17                          ;mask value for global int reg bit for TX instance
    18  0040                    UART_Board_TX_INT_MASK:                      equ 0x40
    19  00E1                    UART_Board_TX_INT_REG:                       equ 0x0e1  ;TX interrupt address
    20  0080                    UART_Board_RX_INT_MASK:                      equ 0x80  ;mask value for global int reg bit for RX ins
                                tance
    21  00E1                    UART_Board_RX_INT_REG:                       equ 0x0e1  ;RX interrupt address
    22                          
    23  0000                    UART_Board_RXBUF_ENABLE:                     equ 0
    24                          
    25                          ; Interrupt control masks
    26  0001                    UART_Board_ENABLE_RX_INT:                    equ 0x01
    27  0000                    UART_Board_DISABLE_RX_INT:                   equ 0x00
    28  0002                    UART_Board_ENABLE_TX_INT:                    equ 0x02
    29  0000                    UART_Board_DISABLE_TX_INT:                   equ 0x00
    30                          
    31  0000                    UART_Board_INT_MODE_TX_REG_EMPTY:            equ 0x00
    32  0001                    UART_Board_INT_MODE_TX_COMPLETE:             equ 0x01
    33                          
    34  0020                    UART_Board_RX_IGNORE_BELOW:                  equ 0x20
    35  0010                    UART_Board_RX_BUFFER_SIZE:                   equ 0x10
    36  000D                    UART_Board_CMD_TERM:                         equ 0xd
    37  0020                    UART_Board_DELIMITER:                        equ 0x20
    38  0000                    UART_Board_BACKSPACE_ENABLE:                 equ 0x0
    39                          
    40                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    41                          ;       WARNING WARNING WARNING
    42                          ; The following equates are for backwards
    43                          ; compatibility only and should not be used
    44                          ; for new designs.
    45                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    46                          
    47                          ;------------------------------------
    48                          ;  Parity masks
    49                          ;------------------------------------
    50  0000                    UART_PARITY_NONE:       equ   00h
    51  0002                    UART_PARITY_EVEN:       equ   02h
    52  0006                    UART_PARITY_ODD:        equ   06h
    53                          
    54                          ;------------------------------------
    55                          ;  TX Status Register masks
    56                          ;------------------------------------
    57  0020                    UART_TX_COMPLETE:       equ   20h
    58  0010                    UART_TX_BUFFER_EMPTY:   equ   10h
    59                          
    60                          ;------------------------------------
    61                          ;  RX Status Register masks
    62                          ;------------------------------------
    63  0010                    UART_RX_ACTIVE:         equ   10h
    64  0008                    UART_RX_COMPLETE:       equ   08h
    65  0080                    UART_RX_PARITY_ERROR:   equ   80h
    66  0040                    UART_RX_OVERRUN_ERROR:  equ   40h
    67  0020                    UART_RX_FRAMING_ERROR:  equ   20h
    68  00E0                    UART_RX_NO_ERROR:       equ   E0h
    69                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    70                          ;             END WARNING
    71                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    72                          
    73                          
    74                          
    75                          ;------------------------------------
    76                          ;  Parity masks
    77                          ;------------------------------------
    78  0000                    UART_Board_PARITY_NONE:                 equ   00h
    79  0002                    UART_Board_PARITY_EVEN:                 equ   02h
    80  0006                    UART_Board_PARITY_ODD:                  equ   06h
    81                          
    82                          ;------------------------------------
    83                          ;  TX Status Register masks
    84                          ;------------------------------------
    85  0020                    UART_Board_TX_COMPLETE:                 equ   20h
    86  0010                    UART_Board_TX_BUFFER_EMPTY:             equ   10h
    87                          
    88                          ;------------------------------------
    89                          ;  RX Status Register masks
    90                          ;------------------------------------
    91  0010                    UART_Board_RX_ACTIVE:                   equ   10h
    92  0008                    UART_Board_RX_COMPLETE:                 equ   08h
    93  0008                    UART_Board_RX_REG_FULL:                 equ   08h
    94  0080                    UART_Board_RX_PARITY_ERROR:             equ   80h
    95  0040                    UART_Board_RX_OVERRUN_ERROR:            equ   40h
    96  0020                    UART_Board_RX_FRAMING_ERROR:            equ   20h
    97  00E0                    UART_Board_RX_ERROR:                    equ   E0h
    98  0001                    UART_Board_RX_ENABLE:                   equ   01h
    99                          
   100  00F0                    UART_Board_RX_BUF_ERROR:                equ   F0h  ; Mask for any Rx that may occur.
   101  0010                    UART_Board_RX_BUF_OVERRUN:              equ   10h  ; This indicates the software buffer has
   102                                                                                  ; been over run.
   103  0001                    UART_Board_RX_BUF_CMDTERM:              equ   01h  ; Command terminator has been received.
   104                          
   105  0001                    UART_Board_RX_NO_DATA:                  equ   01h
   106  00E0                    UART_Board_RX_NO_ERROR:                 equ   E0h
   107                          
   108                          
   109                          ;--------------------------------------------------
   110                          ; Registers Address Constants for UART_Board
   111                          ;--------------------------------------------------
   112                          ;---------------------------------
   113                          ;  Registers used by TX
   114                          ;---------------------------------
   115  003B                    UART_Board_TX_CONTROL_REG:  equ 3bh            ; Control register
   116  0038                    UART_Board_TX_SHIFT_REG:    equ 38h               ; TX Shift Register register
   117  0039                    UART_Board_TX_BUFFER_REG:   equ 39h               ; TX Buffer Register
   118  0038                    UART_Board_TX_FUNC_REG: equ 38h         ; Function register
   119  0039                    UART_Board_TX_INPUT_REG:    equ 39h            ; Input register
   120  003A                    UART_Board_TX_OUTPUT_REG:   equ 3ah           ; Output register
   121                          
   122                          ;---------------------------------
   123                          ;  Registers used by RX
   124                          ;---------------------------------
   125  003F                    UART_Board_RX_CONTROL_REG:  equ 3fh            ; Control register
   126  003C                    UART_Board_RX_SHIFT_REG:    equ 3ch               ; RX Shift Register register
   127  003E                    UART_Board_RX_BUFFER_REG:   equ 3eh               ; RX Buffer Register
   128  003C                    UART_Board_RX_FUNC_REG: equ 3ch         ; Function register
   129  003D                    UART_Board_RX_INPUT_REG:    equ 3dh            ; Input register
   130                          UART_Board_RX_OUTPUT_REG:   equ 3eh           ; Output register
      + 003E                    UART_Board_RX_OUTPUT_REG	equ	62
      + 3C51                    ; end of file UART_Board.inc
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;
     4                          ;;       FILENAME: Memory.inc
     5                          ;;
     6                          ;;    DESCRIPTION: Memory Model and Stack Parameter Definitions for 
     7                          ;;                 CY8C22045 PSoC devices.
     8                          ;;
     9                          ;;  LAST MODIFIED: August 17, 2004
    10                          ;;
    11                          ;;-----------------------------------------------------------------------------
    12                          ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
    13                          ;;*****************************************************************************
    14                          ;;*****************************************************************************
    15                          ;
    16                          ;
    17                          ;  ******** Define Memory Model and Stack parameters ********
    18                          ;
    19  0001                    IMAGECRAFT: equ 1   
    20  0002                    HITECH: equ 2   
    21  0002                    TOOLCHAIN: equ HITECH   
    22  0001                    SYSTEM_LARGE_MEMORY_MODEL: equ 1   
    23  0000                    SYSTEM_SMALL_MEMORY_MODEL: equ 0   
    24  0003                    SYSTEM_STACK_PAGE: equ 3   
    25  0000                    SYSTEM_STACK_PAGE_OFFSET: equ 0   
    26  0002                    SYSTEM_TOOLS: equ 2   
    27  0000                    SYSTEM_IDXPG_TRACKS_STK_PP: equ 0   
    28  0001                    SYSTEM_IDXPG_TRACKS_IDX_PP: equ 1   
    29  0000                    SYSTEM_MULTIPAGE_STACK: equ 0 
    30                          
    31                          
    32                          ;  ******* Function Class Definitions *******
    33                          ;
    34                          ;  These definitions are used to describe RAM access patterns. They provide
    35                          ;  documentation and they control prologue and epilogue macros that perform
    36                          ;  the necessary housekeeping functions for large memory model devices like
    37                          ;  the CY8C22045.
    38                          
    39  0001                    RAM_USE_CLASS_1:               equ 1   ; PUSH, POP & I/O access
    40  0002                    RAM_USE_CLASS_2:               equ 2   ; Indexed address mode on stack page
    41  0004                    RAM_USE_CLASS_3:               equ 4   ; Indexed address mode to any page
    42  0008                    RAM_USE_CLASS_4:               equ 8   ; Direct/Indirect address mode access
    43                          
    44                          ; ******* Hi Tech Specific *******
    45                          ; Turn on the expansion of all macros by default
    46                          IF (TOOLCHAIN & HITECH)
    47                          OPT EXPAND
    48                          ENDIF
    49                          ; ******* Page Pointer Manipulation Macros *******
    50                          ;
    51                          ;  ******* Page Pointer Manipulation Macros *******
    52                          ;
    53                          ;  Most of the following macros are conditionally compiled so they only
    54                          ;  produce code if the large memory model is selected.
    55                          
    56                             ;-----------------------------------------------
    57                             ;  Set Stack Page Macro
    58                             ;-----------------------------------------------
    59                             ;
    60                             ;  DESC: Modify STK_PP in the large or small memory Models.
    61                             ;
    62                             ; INPUT: Constant (e.g., SYSTEM_STACK_PAGE) that specifies the RAM page on
    63                             ;        which stack operations like PUSH and POP store and retrieve their
    64                             ;        data
    65                             ;
    66                             ;  COST: 8 instruction cycles (in LMM only)
    67                          
    68                             macro RAM_SETPAGE_STK( PG_NUMBER )
    69                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    70                                mov reg[STK_PP], @PG_NUMBER
    71                             ENDIF
    72  3C51                       endm
    73                          
    74                             ;-----------------------------------------------
    75                             ;  Set Current Page Macro
    76                             ;-----------------------------------------------
    77                             ;
    78                             ;  DESC: Modify CUR_PP in the large or small memory Models.
    79                             ;
    80                             ; INPUT: Constant value (e.g., >bFoo) for the RAM page number used in
    81                             ;        calculation of effective direct-mode address operands.
    82                             ;
    83                             ;  COST: 8 instruction cycles (in LMM only)
    84                          
    85                             macro RAM_SETPAGE_CUR( PG_NUMBER )
    86                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    87                                mov reg[CUR_PP], @PG_NUMBER
    88                             ENDIF
    89  3C51                       endm
    90                          
    91                             ;-----------------------------------------------
    92                             ;  Set Index Page Macro
    93                             ;-----------------------------------------------
    94                             ;
    95                             ;  DESC: Modify IDX_PP in the large or small emory Models.
    96                             ;
    97                             ; INPUT: Constant value (e.g., >caFoo) for the RAM page number used in
    98                             ;         calculation of effective index-mode address operands.
    99                             ;
   100                             ;  COST: 8 instruction cycles (in LMM only)
   101                          
   102                             macro RAM_SETPAGE_IDX( PG_NUMBER )
   103                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   104                                mov reg[IDX_PP], @PG_NUMBER
   105                             ENDIF
   106  3C51                       endm
   107                          
   108                             ;-----------------------------------------------
   109                             ;  Set MVI Read Page Macro
   110                             ;-----------------------------------------------
   111                             ;
   112                             ;  DESC: Modify MVR_PP in the large or small memory Models.
   113                             ;
   114                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   115                             ;        calculation of indirect address operands used in the
   116                             ;        "mvi A, [pFoo]" instructions.
   117                             ;
   118                             ;  COST: 8 instruction cycles (in LMM only)
   119                          
   120                             macro RAM_SETPAGE_MVR( PG_NUMBER )
   121                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   122                                mov reg[MVR_PP], @PG_NUMBER
   123                             ENDIF
   124  3C51                       endm
   125                          
   126                             ;-----------------------------------------------
   127                             ;  Set MVI Write Page Macro
   128                             ;-----------------------------------------------
   129                             ;
   130                             ;  DESC: Modify MVW_PP in the large or small memory Models.
   131                             ;
   132                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   133                             ;        calculation of indirect address operands used in the
   134                             ;        "mvi [pFoo], A" instructions.
   135                             ;
   136                             ;  COST: 8 instruction cycles (in LMM only)
   137                          
   138                             macro RAM_SETPAGE_MVW( PG_NUMBER )
   139                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   140                                mov reg[MVW_PP], @PG_NUMBER
   141                             ENDIF
   142  3C51                       endm
   143                          
   144                             ;-----------------------------------------------
   145                             ;  Force Index Page Pointer to Stack Page
   146                             ;-----------------------------------------------
   147                             ;
   148                             ;  DESC: Map index-mode operands onto the stack page by modifying IDX_PP.
   149                             ;        See also RAM_LOCK_INDEX_TO_STACKPAGE.
   150                             ;
   151                             ; INPUT: None
   152                             ;
   153                             ;  COST: 8 instruction cycles (in LMM only)
   154                          
   155                             macro RAM_SETPAGE_IDX2STK
   156                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   157                                IF ( SYSTEM_MULTIPAGE_STACK )
   158                                   mov   A, reg[STK_PP]
   159                                   mov   reg[IDX_PP], A
   160                                ELSE
   161                                   RAM_SETPAGE_IDX SYSTEM_STACK_PAGE
   162                                ENDIF
   163                             ENDIF
   164  3C51                       endm
   165                          
   166                             ;-----------------------------------------------
   167                             ;  Change Memory Mode
   168                             ;-----------------------------------------------
   169                             ;
   170                             ;  DESC: Modify FLAG_PAGEMODE bits in the large and small memory Models.
   171                             ;
   172                             ; INPUT: Constant value for PGMODE bitfield of CPU Flag register, F.
   173                             ;        See FLAG_PGMODE_{x} constants in M8C.INC.
   174                             ;
   175                             ;  COST: 8 instruction cycles (in LMM only)
   176                          
   177                             macro RAM_CHANGE_PAGE_MODE( MODE )
   178                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   179                                and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
   180                                or    F,  FLAG_PGMODE_MASK & @MODE
   181                             ENDIF
   182  3C51                       endm
   183                          
   184                             ;-----------------------------------------------
   185                             ;  Set Large Memory Model Native Paging Mode
   186                             ;-----------------------------------------------
   187                             ;
   188                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   189                             ;        paging mode *IFF* a simple "OR" is guaranteed to work---for
   190                             ;        example, in an ISR, when the PGMODE bits have been cleared
   191                             ;        to zero. If a simple "OR" is not guaranteed to work, use
   192                             ;        the slower RAM_RESTORE_NATIVE_PAGING instead.
   193                             ;
   194                             ; INPUT: none
   195                             ;
   196                             ;  COST: 4 instruction cycles (in LMM only)
   197                          
   198                             macro RAM_SET_NATIVE_PAGING
   199                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   200                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   201                                or    F,  FLAG_PGMODE_11b            ; LMM w/ IndexPage<==>StackPage
   202                             ENDIF ;  PGMODE LOCKED
   203                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   204                                or    F,  FLAG_PGMODE_10b            ; LMM with independent IndexPage
   205                             ENDIF ; PGMODE FREE
   206                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   207  3C51                       endm
   208                          
   209                             ;-----------------------------------------------
   210                             ; Restore Large Memory Model Native Paging Mode
   211                             ;-----------------------------------------------
   212                             ;
   213                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   214                             ;        paging mode. Always works because it clears the PGMODE bits
   215                             ;        before OR-ing in the new ones. See RAM_RESTORE_NATIVE_PAGING
   216                             ;        for a faster method.
   217                             ;
   218                             ; INPUT: none
   219                             ;
   220                             ;  COST: 8 instruction cycles (in LMM only)
   221                          
   222                             macro RAM_RESTORE_NATIVE_PAGING
   223                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   224                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   225                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_11b ; LMM w/ IndexPage<==>StackPage
   226                             ENDIF ;  PGMODE LOCKED
   227                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   228                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b ; LMM with independent IndexPage
   229                             ENDIF ; PGMODE FREE
   230                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   231  3C51                       endm
   232                          
   233                             ;-----------------------------------------------
   234                             ; Force indexed addr mode operands to Stack Pg
   235                             ;-----------------------------------------------
   236                             ;
   237                             ;  DESC: Force instructions that use indexed address mode to reference the
   238                             ;        stack page (as defined by STK_PP). This macro sets the "Indexed
   239                             ;        Stack Mode" bit (LSB) of the PGMODE bit field in the CPU Flag
   240                             ;        register, F. (See also RAM_SETPAGE_IDX2STK, above.)
   241                             ;
   242                             ; INPUT: none
   243                             ;
   244                             ;  COST: 4 instruction cycles (in LMM only)
   245                          
   246                             macro RAM_X_POINTS_TO_STACKPAGE
   247                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   248                                or   F, FLAG_PGMODE_01b
   249                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   250  3C51                       endm
   251                          
   252                             ;-----------------------------------------------
   253                             ;  Force indexed addr mode operands to Index Pg
   254                             ;-----------------------------------------------
   255                             ;
   256                             ;  DESC: Permit instructions that use indexed address mode to reference page
   257                             ;        zero or the page pointed to by the IDX_PP register, depending on the
   258                             ;        setting of the MSb (or "Direct Page Mode" bit) of the PGMODE bits
   259                             ;        in the CPU Flag register, F. (This macro clears the PGMODE LSb.)
   260                             ;
   261                             ; INPUT: none
   262                             ;
   263                             ;  COST: 4 instruction cycles (in LMM only)
   264                          
   265                             macro RAM_X_POINTS_TO_INDEXPAGE
   266                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   267                                and  F, ~FLAG_PGMODE_01b
   268                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   269  3C51                       endm
   270                          
   271                             ;-----------------------------------------------
   272                             ;  Function Prologue
   273                             ;-----------------------------------------------
   274                             ;
   275                             ;  Prologue for functions that run in the LMM and SMM.
   276                             ;
   277                          
   278                             macro RAM_PROLOGUE( ACTUAL_CLASS )
   279                          
   280                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   281                             ; Nothing to do
   282                             ENDIF ; RAM_USE_CLASS_1
   283                          
   284                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   285                                IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   286                                   RAM_X_POINTS_TO_STACKPAGE         ; exit native paging mode!
   287                                ENDIF
   288                             ENDIF ; RAM_USE_CLASS_2
   289                          
   290                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   291                                IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   292                                   RAM_X_POINTS_TO_INDEXPAGE         ; exit native paging mode!
   293                                ENDIF
   294                             ENDIF ; RAM_USE_CLASS_3
   295                          
   296                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   297                             ; Nothing to do
   298                             ENDIF ; RAM_USE_CLASS_4
   299                          
   300  3C51                       endm
   301                          
   302                             ;-----------------------------------------------
   303                             ;  Function Epilogue
   304                             ;-----------------------------------------------
   305                             ;
   306                             ;  Prologue for functions that run in the LMM and SMM.
   307                             ;
   308                          
   309                             macro RAM_EPILOGUE( ACTUAL_CLASS )
   310                          
   311                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   312                             ; Nothing to do
   313                             ENDIF ; RAM_USE_CLASS_1
   314                          
   315                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   316                                RAM_RESTORE_NATIVE_PAGING
   317                             ENDIF ; RAM_USE_CLASS_2
   318                          
   319                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   320                                RAM_RESTORE_NATIVE_PAGING
   321                             ENDIF ; RAM_USE_CLASS_3
   322                          
   323                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   324                             ; Nothing to do
   325                             ENDIF ; RAM_USE_CLASS_4
   326                          
   327  3C51                       endm
   328                          
   329                             ;-----------------------------------------------
   330                             ;  Preserve Register
   331                             ;-----------------------------------------------
   332                             ;
   333                             ;  DESC: Preserve a register value on the stack
   334                             ;
   335                             ; INPUT: Name or address of register in I/O Space
   336                             ;        The I/O bank is an implicit parameter. That is, this function will
   337                             ;        Access the I/O bank currently specified by the CPU Flag register.
   338                             ;
   339                             ;  USES: CPU 'A' register
   340                             ;
   341                             ;  COST: 9 instruction cycles
   342                          
   343                             macro REG_PRESERVE( IOReg )
   344                             mov   A, reg[ @IOReg ]
   345                             push  A
   346  3C51                       endm
   347                          
   348                             ;-----------------------------------------------
   349                             ;  Restore Register
   350                             ;-----------------------------------------------
   351                             ;
   352                             ;  DESC: Restore a register value from the stack
   353                             ;
   354                             ; INPUT: Name or address of register in I/O Space
   355                             ;        The I/O bank is an implicit parameter. That is, this function will
   356                             ;        Access the I/O bank currently specified by the CPU Flag register.
   357                             ;
   358                             ;  USES: CPU 'A' register
   359                             ;
   360                             ;  COST: 10 instruction cycles
   361                          
   362                             macro REG_RESTORE( IOReg )
   363                             pop   A
   364                             mov   reg[ @IOReg ], A
   365  3C51                       endm
   366                          
   367                             ;-----------------------------------------------
   368                             ;  Preserve Volatile Page Pointer Registers
   369                             ;-----------------------------------------------
   370                             ;
   371                             ;  DESC: Invoked by ISRs before switching to the LMM mode and calling
   372                             ;        functions that require on it.
   373                             ;
   374                             ; INPUT: none
   375                             ;
   376                             ;  USES: CPU 'A' register
   377                             ;
   378                             ;  COST: 45 instruction cycles (in LMM only)
   379                          
   380                             macro ISR_PRESERVE_PAGE_POINTERS
   381                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   382                                REG_PRESERVE CUR_PP
   383                                REG_PRESERVE IDX_PP
   384                                REG_PRESERVE MVR_PP
   385                                REG_PRESERVE MVW_PP
   386                             ENDIF
   387  3C51                       endm
   388                          
   389                             ;-----------------------------------------------
   390                             ;  Restore Volatile Page Pointer Registers
   391                             ;-----------------------------------------------
   392                             ;
   393                             ;  DESC: Undo for RAM_PRESERVE_PAGE_POINTERS macro. Invoked by ISRs after
   394                             ;        calling functions that run in the LMM mode and before executing
   395                             ;        the RETI instruction.
   396                             ;
   397                             ; INPUT: none
   398                             ;
   399                             ;  USES: CPU 'A' register
   400                             ;
   401                             ;  COST: 50 instruction cycles (in LMM only)
   402                          
   403                             macro ISR_RESTORE_PAGE_POINTERS
   404                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   405                                REG_RESTORE MVW_PP
   406                                REG_RESTORE MVR_PP
   407                                REG_RESTORE IDX_PP
   408                                REG_RESTORE CUR_PP
   409                             ENDIF
   410                             endm
      + 3C51                    
      + 3C51                    ; end of file Memory.inc
     1                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     2                          ;;;
     3                          ;;;  M8C.INC -- Microcontroller Device System Declarations
     4                          ;;;
     5                          ;;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
     6                          ;;;
     7                          ;;;  This file provides address constants, bit field masks and a set of macro
     8                          ;;;  facilities for the Cypress Semiconductor CY8C22045 Microcontroller devices.
     9                          ;;;
    10                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    11                          
    12                          ;;=============================================================================
    13                          ;; Definition of abbreviations used in the descriptions below
    14                          ;;  (RW)   The register or bit supports reads and writes
    15                          ;;  (W)    The register or bit is write-only
    16                          ;;  (R)    The register or bit is read-only
    17                          ;;  (#)    Access to the register is bit specific (see the family datasheet)
    18                          ;;  (RC)   The register or bit can be read, but writing a 0 will clear it,
    19                          ;;         writing a 1 will have no effect.
    20                          ;;=============================================================================
    21                          
    22                          ;;=============================================================================
    23                          ;;      System Registers
    24                          ;;=============================================================================
    25                          
    26                          ;----------------------------
    27                          ;  Flag Register Bit Fields
    28                          ;----------------------------
    29  00C0                    FLAG_PGMODE_MASK:  equ 0C0h     ; Paging control for > 256 bytes of RAM
    30  0000                    FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
    31  0040                    FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
    32  0080                    FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
    33  00C0                    FLAG_PGMODE_3:     equ 0C0h       ; Direct to CUR_PP page, indexed to STK_PP page
    34  0000                    FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
    35  0040                    FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
    36  0080                    FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
    37  00C0                    FLAG_PGMODE_11b:   equ 0C0h       ; Same as PGMODE_3
    38  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    39  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    40  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    41  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    42  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    43                          
    44                          
    45                          ;;=============================================================================
    46                          ;;      Register Space, Bank 0
    47                          ;;=============================================================================
    48                          
    49                          ;------------------------------------------------
    50                          ;  Port Registers
    51                          ;  Note: Also see this address range in Bank 1.
    52                          ;------------------------------------------------
    53                          ; Port 0
    54  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    55  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    56  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    57  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    58                          ; Port 1
    59  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    60  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    61  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    62  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    63                          ; Port 2
    64  0008                    PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
    65  0009                    PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
    66  000A                    PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
    67  000B                    PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
    68                          ; Port 3
    69  000C                    PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
    70  000D                    PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
    71  000E                    PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
    72  000F                    PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
    73                          ; Port 4
    74  0010                    PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
    75  0011                    PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
    76  0012                    PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
    77  0013                    PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
    78                          
    79                          ;------------------------------------------------
    80                          ;  Digital PSoC(tm) block Registers
    81                          ;  Note: Also see this address range in Bank 1.
    82                          ;------------------------------------------------
    83                          ; Digital PSoC block 00, Basic Type C
    84  0020                    DBC00DR0:     equ 20h          ; data register 0                          (#)
    85  0021                    DBC00DR1:     equ 21h          ; data register 1                          (W)
    86  0022                    DBC00DR2:     equ 22h          ; data register 2                          (RW)
    87  0023                    DBC00CR0:     equ 23h          ; control & status register 0              (#)
    88                          
    89                          ; Digital PSoC block 01, Basic Type C
    90  0024                    DBC01DR0:     equ 24h          ; data register 0                          (#)
    91  0025                    DBC01DR1:     equ 25h          ; data register 1                          (W)
    92  0026                    DBC01DR2:     equ 26h          ; data register 2                          (RW)
    93  0027                    DBC01CR0:     equ 27h          ; control & status register 0              (#)
    94                          
    95                          ; Digital PSoC block 02, Communications Type C
    96  0028                    DCC02DR0:     equ 28h          ; data register 0                          (#)
    97  0029                    DCC02DR1:     equ 29h          ; data register 1                          (W)
    98  002A                    DCC02DR2:     equ 2Ah          ; data register 2                          (RW)
    99  002B                    DCC02CR0:     equ 2Bh          ; control & status register 0              (#)
   100                          
   101                          ; Digital PSoC block 03, Communications Type C
   102  002C                    DCC03DR0:     equ 2Ch          ; data register 0                          (#)
   103  002D                    DCC03DR1:     equ 2Dh          ; data register 1                          (W)
   104  002E                    DCC03DR2:     equ 2Eh          ; data register 2                          (RW)
   105  002F                    DCC03CR0:     equ 2Fh          ; control & status register 0              (#)
   106                          
   107                          ; Digital PSoC block 10, Basic Type C
   108  0030                    DBC10DR0:     equ 30h          ; data register 0                          (#)
   109  0031                    DBC10DR1:     equ 31h          ; data register 1                          (W)
   110  0032                    DBC10DR2:     equ 32h          ; data register 2                          (RW)
   111  0033                    DBC10CR0:     equ 33h          ; control & status register 0              (#)
   112                          
   113                          ; Digital PSoC block 11, Basic Type C
   114  0034                    DBC11DR0:     equ 34h          ; data register 0                          (#)
   115  0035                    DBC11DR1:     equ 35h          ; data register 1                          (W)
   116  0036                    DBC11DR2:     equ 36h          ; data register 2                          (RW)
   117  0037                    DBC11CR0:     equ 37h          ; control & status register 0              (#)
   118                          
   119                          ; Digital PSoC block 12, Communications Type C
   120  0038                    DCC12DR0:     equ 38h          ; data register 0                          (#)
   121  0039                    DCC12DR1:     equ 39h          ; data register 1                          (W)
   122  003A                    DCC12DR2:     equ 3Ah          ; data register 2                          (RW)
   123  003B                    DCC12CR0:     equ 3Bh          ; control & status register 0              (#)
   124                          
   125                          ; Digital PSoC block 13, Communications Type C
   126  003C                    DCC13DR0:     equ 3Ch          ; data register 0                          (#)
   127  003D                    DCC13DR1:     equ 3Dh          ; data register 1                          (W)
   128  003E                    DCC13DR2:     equ 3Eh          ; data register 2                          (RW)
   129  003F                    DCC13CR0:     equ 3Fh          ; control & status register 0              (#)
   130                          
   131                          ;-------------------------------------
   132                          ;  Analog Control Registers
   133                          ;-------------------------------------
   134  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
   135  00C0                    AMX_IN_ACI3:          equ C0h    ; MASK: column 3 input mux
   136  0030                    AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
   137  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
   138  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
   139                          
   140  0061                    AMUX_CFG:      equ 61h          ; Analog MUX Configuration
   141  0030                    AMUX_CFG_INTCAP:       equ 30h    ;
   142  000E                    AMUX_CFG_MUXCLK:  	  equ 0Eh	 ;
   143  0001                    AMUX_CFG_EN:		  	  equ 01h	 ;
   144                          
   145                          ; old declarations DO NOT USE
   146  0061                    AMUXCFG:      equ 61h          ; Analog MUX Configuration
   147  0030                    AMUXCFG_INTCAP:       equ 30h    ;
   148  000E                    AMUXCFG_MUXCLK:  	  equ 0Eh	 ;
   149  0001                    AMUXCFG_EN:		  	  equ 01h	 ;
   150                          
   151  0062                    PWM_CR:       equ 62h          ; Pulse-Width Modulator Control
   152  0038                    PWM_CR_HIGH:          equ 38h    ; MASK: PWM high time
   153  0006                    PWM_CR_LOW:           equ 06h	 ; MASK: PWM low time
   154  0001                    PWM_CR_EN:            equ 01h	 ; MASK: Enable/Disable PWM function
   155                          
   156  0063                    ARF_CR:       equ 63h          ; Analog Reference Control
   157                          
   158  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus Register           (#)
   159  0080                    CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
   160  0040                    CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
   161  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
   162  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
   163  0008                    CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
   164  0004                    CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
   165  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
   166  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   167                          
   168  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   169+ 0020                    CMP_CR1_CLDIS1:       equ 20h    ; MASK: Column 1 comparator output latch
   170+ 0010                    CMP_CR1_CLDIS0:	      equ 10h    ; MASK: Column 0 comparator output latch
   171                          
   172  0068                    ADC0_CR:      equ 68h          ; Analog Column 0 Configuration
   173  0080                    ADC0_CR_CMPST:        equ 80h    ;
   174  0040                    ADC0_CR_LOREN:        equ 40h    ;
   175  0020                    ADC0_CR_SHEN:         equ 20h    ;
   176  0008                    ADC0_CR_CBSRC:        equ 08h    ;
   177  0004                    ADC0_CR_ADCM:         equ 04h    ;
   178  0001                    ADC0_CR_EN:	          equ 01h    ;
   179                          
   180  0069                    ADC1_CR:      equ 69h          ; Analog Column 1 Configuration
   181  0080                    ADC1_CR_CMPST:        equ 80h    ;
   182  0040                    ADC1_CR_LOREN:        equ 40h    ;
   183  0020                    ADC1_CR_SHEN:         equ 20h    ;
   184  0008                    ADC1_CR_CBSRC:        equ 08h    ;
   185  0004                    ADC1_CR_ADCM:         equ 04h    ;
   186  0001                    ADC1_CR_EN:	          equ 01h    ;
   187                          
   188                          ; Continuous Time PSoC block Type E Row 0 Col 0
   189  0072                    ACE00CR1:     equ 72h          ; Control register 1                       (RW)
   190  0073                    ACE00CR2:     equ 73h          ; Control register 2                       (RW)
   191                          
   192                          ; Continuous Time PSoC block Type E Row 0 Col 1
   193  0076                    ACE01CR1:     equ 76h          ; Control register 1                       (RW)
   194  0077                    ACE01CR2:     equ 77h          ; Control register 2                       (RW)
   195                          
   196                          ; Switched Cap PSoC blockType E Row 1 Col 0
   197  0080                    ASE10CR0:     equ 80h          ; Control register 0                       (RW)
   198                          
   199                          ; Switched Cap PSoC blockType E Row 1 Col 1
   200  0084                    ASE11CR0:     equ 84h          ; Control register 0                       (RW)
   201                          
   202                          ;-----------------------------------------------
   203                          ;  Global General Purpose Data Registers
   204                          ;-----------------------------------------------
   205  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   206  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   207  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   208  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   209                          
   210                          ;------------------------------------------------
   211                          ;  Row Digital Interconnects
   212                          ;
   213                          ;  Note: the following registers are mapped into
   214                          ;  both register bank 0 AND register bank 1.
   215                          ;------------------------------------------------
   216                          
   217  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   218  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   219  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   220  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   221  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   222  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   223  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   224                          
   225  00B8                    RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
   226  00B9                    RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
   227  00BA                    RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
   228  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   229  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   230  00BD                    RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
   231  00BE                    RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
   232                          
   233                          ;-----------------------------------------------
   234                          ;  Ram Page Pointers
   235                          ;-----------------------------------------------
   236  00D0                    CUR_PP:      equ 0D0h           ; Current   Page Pointer
   237  00D1                    STK_PP:      equ 0D1h           ; Stack     Page Pointer
   238  00D3                    IDX_PP:      equ 0D3h           ; Index     Page Pointer
   239  00D4                    MVR_PP:      equ 0D4h           ; MVI Read  Page Pointer
   240  00D5                    MVW_PP:      equ 0D5h           ; MVI Write Page Pointer
   241                          
   242                          ;------------------------------------------------
   243                          ;  I2C Configuration Registers
   244                          ;------------------------------------------------
   245  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   246  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   247  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   248  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   249  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   250  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   251  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   252  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   253  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   254  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   255                          
   256  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   257  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   258  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   259  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   260  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   261  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   262  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   263  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   264  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   265                          
   266  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   267                          
   268  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   269  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   270  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   271  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   272  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   273                          
   274                          ;------------------------------------------------
   275                          ;  System and Global Resource Registers
   276                          ;------------------------------------------------
   277  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   278                                                         ; Use INT_MSK0 bit field masks
   279  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   280                                                         ; Use INT_MSK1 bit field masks
   281  00DC                    INT_CLR2:     equ 0DCh          ; Interrupt Clear Register 2               (RW)
   282                                                         ; Use INT_MSK2 bit field masks
   283  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   284                                                         ; Use INT_MSK3 bit field masks
   285                          
   286  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   287  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   288  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   289                          
   290  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   291  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   292  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   293  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   294  0010                    INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
   295  0008                    INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
   296  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   297  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   298  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   299                          
   300  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   301  0080                    INT_MSK1_DCC13:            equ 80h ; MASK: enable/disable DCC13 block interrupt
   302  0040                    INT_MSK1_DCC12:            equ 40h ; MASK: enable/disable DCC12 block interrupt
   303  0020                    INT_MSK1_DBC11:            equ 20h ; MASK: enable/disable DBC11 block interrupt
   304  0010                    INT_MSK1_DBC10:            equ 10h ; MASK: enable/disable DBC10 block interrupt
   305  0008                    INT_MSK1_DCC03:            equ 08h ; MASK: enable/disable DCC03 block interrupt
   306  0004                    INT_MSK1_DCC02:            equ 04h ; MASK: enable/disable DCC02 block interrupt
   307  0002                    INT_MSK1_DBC01:            equ 02h ; MASK: enable/disable DBC01 block interrupt
   308  0001                    INT_MSK1_DBC00:            equ 01h ; MASK: enable/disable DBC00 block interrupt
   309                          
   310  00DF                    INT_MSK2:     equ DFh			; Custom block Mask Register			   (RW)
   311  0010                    INT_MSK2_SARADC:           equ 10h ; MASK: enable/disable SARADC block interrupt
   312  0020                    INT_MSK2_CSD0:             equ 20h ; MASK: enable/disable CSD0 block interrupt
   313  0040                    INT_MSK2_CSD1:             equ 40h ; MASK: enable/disable CSD1 block interrupt
   314  0080                    INT_MSK2_RTC:              equ 80h ; MASK: enable/disable RTC block interrupt
   315                          
   316  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   317  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   318                          
   319                          ;------------------------------------------------------
   320                          ;  MAC Registers
   321                          ;------------------------------------------------------
   322                          
   323  00E8                    MUL0_X:       equ 0E8h          ; Multiply Input X Register                (W)
   324  00E9                    MUL0_Y:       equ 0E9h          ; Multiply Input Y Register                (W)
   325  00EA                    MUL0_DH:      equ 0EAh          ; Multiply Result High Byte Register       (R)
   326  00EB                    MUL0_DL:      equ 0EBh          ; Multiply Result Low Byte Register        (R)
   327                          
   328  00EC                    ACC0_DR1:     equ 0ECh          ; Accumulator Data Register 1              (RW)
   329  00ED                    ACC0_DR0:     equ 0EDh          ; Accumulator Data Register 0              (RW)
   330  00EE                    ACC0_DR3:     equ 0EEh          ; Accumulator Data Register 3              (RW)
   331  00EF                    ACC0_DR2:     equ 0EFh          ; Accumulator Data Register 2              (RW)
   332                          
   333                          ; DECIMATOR Control Registers
   334  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   335  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   336                          
   337                          ;------------------------------------------------------
   338                          ;  System Status and Control Registers
   339                          ;
   340                          ;  Note: The following registers are mapped into both
   341                          ;        register bank 0 AND register bank 1.
   342                          ;------------------------------------------------------
   343  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   344                                                             ; Use FLAG_ masks defined at top of file
   345                          
   346  00FD                    DAC_D:        equ 0FDh		   ; DAC Data Register                        (RW)
   347                          
   348  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   349  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: flag, Internal Reset Status bit
   350  0010                    CPU_SCR1_SLIMO:         equ 10h	   ; MASK: Slow IMO (internal main osc) enable
   351  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   352  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   353  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   354                          
   355  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   356  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   357  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   358  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   359  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   360  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   361                          
   362                          ;------------------------------------------------------
   363                          ;  Neon Capsense Digital Control Registers
   364                          ;------------------------------------------------------
   365  0050                    CSD0_DR0_L:				equ 50h		; Capsense 0 data low 0				(RW)
   366  0054                    CSD0_DR0_H:				equ 54h		; Capsense 0 data high 0			(RW)
   367  0058                    CSD1_DR0_L:				equ 58h		; Capsense 1 data low 0				(RW)
   368  005C                    CSD1_DR0_H:				equ 5Ch		; Capsense 1 data high 0			(RW)
   369  0051                    CSD0_DR1_L:				equ 51h		; Capsense 0 data low 1				(RW)
   370  0055                    CSD0_DR1_H:				equ 55h		; Capsense 0 data high 1			(RW)
   371  0059                    CSD1_DR1_L:				equ 59h		; Capsense 1 data low 1				(RW)
   372  005D                    CSD1_DR1_H:				equ 5Dh		; Capsense 1 data high 1			(RW)
   373  0052                    CSD0_CNT_L:				equ 52h		; Capsense 0 counter low			(RW)
   374  0056                    CSD0_CNT_H:				equ 56h		; Capsense 0 counter high			(RW)
   375  005A                    CSD1_CNT_L:				equ 5Ah		; Capsense 1 counter low			(RW)
   376  005E                    CSD1_CNT_H:				equ	5Eh		; Capsense 1 counter high			(RW)
   377  0053                    CSD0_CR0:				equ 53h		; Capsense 0 control 0				(RW)
   378  005B                    CSD1_CR0:				equ 5Bh		; Capsense 1 control 0				(RW)
   379  0057                    CSD0_CR1:				equ 57h		; Capsense 0 control 1				(RW)
   380  005F                    CSD1_CR1:				equ 5Fh		; Capsense 1 control 1				(RW)
   381                          
   382                          ;------------------------------------------------------
   383                          ;  Neon Analog Registers
   384                          ;------------------------------------------------------
   385  0065                    ASY_CR:					equ 65h		; Analog Synchronization Control	(RW)
   386  006A                    ADC_DH:					equ 6Ah		; ADC data high						(RW)
   387  006B                    ADC_DL:					equ 6Bh		; ADC data low						(RW)
   388  00C8                    PWMVREF0:				equ C8h		; PWM Voltage Reference 0			(RW)
   389  00C9                    PWMVREF1:				equ C9h		; PWM Voltage Reference 1			(RW)
   390  00CB                    PWMSRC:					equ CBh		; PWM Source						(RW)
   391  00CA                    IDACMODE:				equ CAh		; IDAC Mode							(RW)
   392  00FC                    IDACR_D:				equ FCh		; Analog Mux DAC data 0				(RW)
   393  00FD                    IDACL_D:				equ FDh		; Analog Mux DAC data 1				(RW)
   394                          
   395                          ;------------------------------------------------------
   396                          ;  Neon Digital Registers
   397                          ;------------------------------------------------------
   398  00B7                    RDI0DSM:				equ B7h		; Row Digital Interconnect input select 0	(RW)
   399  00BF                    RDI1DSM:				equ BFh		; Row Digital Interconnect input select 1	(RW)
   400                          
   401                          ;------------------------------------------------------
   402                          ;  Neon Test Registers
   403                          ;------------------------------------------------------
   404  00CC                    TSCR0:					equ CCh		; Tsource 0							(RW)
   405  00CD                    TSCMPH:					equ CDh		; TSCMP high						(RW)
   406  00CE                    TSCMPL:					equ CEh		; TSCMP low							(RW)
   407  00CF                    TSCR1:					equ CFh		; Tsource 1							(RW)
   408                          
   409                          ;;=============================================================================
   410                          ;;      Register Space, Bank 1
   411                          ;;=============================================================================
   412                          
   413                          ;------------------------------------------------
   414                          ;  Port Registers
   415                          ;  Note: Also see this address range in Bank 0.
   416                          ;------------------------------------------------
   417                          ; Port 0
   418  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   419  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   420  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   421  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   422                          
   423                          ; Port 1
   424  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   425  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   426  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   427  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   428                          
   429                          ; Port 2
   430  0008                    PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
   431  0009                    PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
   432  000A                    PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
   433  000B                    PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
   434                          
   435                          ; Port 3
   436  000C                    PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
   437  000D                    PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
   438  000E                    PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
   439  000F                    PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
   440                          
   441                          ; Port 4
   442  0010                    PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
   443  0011                    PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
   444  0012                    PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
   445  0013                    PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
   446                          
   447                          ;------------------------------------------------
   448                          ;  Digital PSoC(tm) block Registers
   449                          ;  Note: Also see this address range in Bank 0.
   450                          ;------------------------------------------------
   451                          
   452                          ; Digital PSoC block 00, Basic Type C
   453  0020                    DBC00FN:      equ 20h          ; Function Register                        (RW)
   454  0021                    DBC00IN:      equ 21h          ;    Input Register                        (RW)
   455  0022                    DBC00OU:      equ 22h          ;   Output Register                        (RW)
   456  0023                    DBC00CR1:     equ 23h          ;   control & status register 1            (RW)
   457                          
   458                          ; Digital PSoC block 01, Basic Type C
   459  0024                    DBC01FN:      equ 24h          ; Function Register                        (RW)
   460  0025                    DBC01IN:      equ 25h          ;    Input Register                        (RW)
   461  0026                    DBC01OU:      equ 26h          ;   Output Register                        (RW)
   462  0027                    DBC01CR1:     equ 27h          ;   control & status register 1            (RW)
   463                          
   464                          ; Digital PSoC block 02, Communications Type C
   465  0028                    DCC02FN:      equ 28h          ; Function Register                        (RW)
   466  0029                    DCC02IN:      equ 29h          ;    Input Register                        (RW)
   467  002A                    DCC02OU:      equ 2Ah          ;   Output Register                        (RW)
   468  002B                    DBC02CR1:     equ 2Bh          ;   control & status register 1            (RW)
   469                          
   470                          ; Digital PSoC block 03, Communications Type C
   471  002C                    DCC03FN:      equ 2Ch          ; Function Register                        (RW)
   472  002D                    DCC03IN:      equ 2Dh          ;    Input Register                        (RW)
   473  002E                    DCC03OU:      equ 2Eh          ;   Output Register                        (RW)
   474  0029                    DBC03CR1:     equ 29h          ;   control & status register 1            (RW)
   475                          
   476                          ; Digital PSoC block 10, Basic Type C
   477  0030                    DBC10FN:      equ 30h          ; Function Register                        (RW)
   478  0031                    DBC10IN:      equ 31h          ;    Input Register                        (RW)
   479  0032                    DBC10OU:      equ 32h          ;   Output Register                        (RW)
   480  0033                    DBC10CR1:     equ 33h          ;   control & status register 1            (RW)
   481                          
   482                          ; Digital PSoC block 11, Basic Type C
   483  0034                    DBC11FN:      equ 34h          ; Function Register                        (RW)
   484  0035                    DBC11IN:      equ 35h          ;    Input Register                        (RW)
   485  0036                    DBC11OU:      equ 36h          ;   Output Register                        (RW)
   486  0037                    DBC11CR1:     equ 37h          ;   control & status register 1            (RW)
   487                          
   488                          ; Digital PSoC block 12, Communications Type C
   489  0038                    DCC12FN:      equ 38h          ; Function Register                        (RW)
   490  0039                    DCC12IN:      equ 39h          ;    Input Register                        (RW)
   491  003A                    DCC12OU:      equ 3Ah          ;   Output Register                        (RW)
   492  003B                    DBC12CR1:     equ 3Bh          ;   control & status register 1            (RW)
   493                          
   494                          ; Digital PSoC block 13, Communications Type C
   495  003C                    DCC13FN:      equ 3Ch          ; Function Register                        (RW)
   496  003D                    DCC13IN:      equ 3Dh          ;    Input Register                        (RW)
   497  003E                    DCC13OU:      equ 3Eh          ;   Output Register                        (RW)
   498  003F                    DBC13CR1:     equ 3Fh          ;   control & status register 1            (RW)
   499                          
   500                          ;------------------------------------------------
   501                          ;  System and Global Resource Registers
   502                          ;  Note: Also see this address range in Bank 0.
   503                          ;------------------------------------------------
   504                          
   505  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   506  00C0                    CLK_CR0_ACOLUMN_3:    equ C0h    ; MASK: Specify clock for analog cloumn
   507  0030                    CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
   508  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   509  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   510                          
   511  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   512  0018                    CLK_CR1_ACLK1:        equ 18h    ; MASK: Digital PSoC block for analog source
   513  0003                    CLK_CR1_ACLK0:        equ 03h    ; MASK: Digital PSoC block for analog source
   514                          
   515  0003                    CLK_CR1_ACLK2:        equ 03h    ; Deprecated do not use
   516                          
   517  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   518  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   519                          
   520  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   521  000F                    AMD_CR0_AMOD0:        equ 0Fh    ; MASK: Modulation source for analog column 0
   522                          
   523  0064                    CMP_GO_EN:    equ 64h          ; Comparator Bus To Global Out Enable      (RW)
   524  0080                    CMP_GO_EN_GOO5:       equ 80h    ; MASK: Selected Col 1 signal to GOO5
   525  0040                    CMP_GO_EN_GOO1:       equ 40h    ; MASK: Selected Col 1 signal to GOO1
   526  0030                    CMP_GO_EN_SEL1:       equ 30h    ; MASK: Column 1 Signal Select
   527  0008                    CMP_GO_EN_GOO4:       equ 08h    ; MASK: Selected Col 0 signal to GOO4
   528  0004                    CMP_GO_EN_GOO0:       equ 04h    ; MASK: Selected Col 0 signal to GOO0
   529  0003                    CMP_GO_EN_SEL0:       equ 03h    ; MASK: Column 0 Signal Select
   530                          
   531  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   532  000F                    AMD_CR1_AMOD1:        equ 0Fh    ; MASK: Modulation ctrl for analog column 1
   533                          
   534  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   535  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   536  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   537                          
   538  006B                    CLK_CR3:      equ 6Bh          ; Analog Clock Source Control Register 3   (RW)
   539  0040                    CLK_CR3_SYS1:         equ 40h    ; MASK: Analog Clock 1 selection
   540  0030                    CLK_CR3_DIVCLK1:      equ 30h    ; MASK: Analog Clock 1 divider
   541  0004                    CLK_CR3_SYS0:         equ 04h    ; MASK: Analog Clock 0 selection
   542  0003                    CLK_CR3_DIVCLK0:      equ 03h    ; MASK: Analog Clock 0 divider
   543                          
   544                          ;------------------------------------------------
   545                          ;  Global Digital Interconnects
   546                          ;------------------------------------------------
   547                          
   548  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   549  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   550  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   551  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   552                          
   553  00A0                    GDI_O_IN_CR:  equ 0A0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   554  00A1                    GDI_E_IN_CR:  equ 0A1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   555  00A2                    GDI_O_OU_CR:  equ 0A2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   556  00A3                    GDI_E_OU_CR:  equ 0A3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   557                          
   558  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   559  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   560                          
   561                          ;------------------------------------------------
   562                          ;  Analog Mux Bus Port Enable Bits
   563                          ;------------------------------------------------
   564  00D8                    MUX_CR0:      equ 0D8h          ; Analog Mux Port 0 Bit Enables Register
   565  00D9                    MUX_CR1:      equ 0D9h          ; Analog Mux Port 1 Bit Enables Register
   566  00DA                    MUX_CR2:      equ 0DAh          ; Analog Mux Port 2 Bit Enables Register
   567  00DB                    MUX_CR3:      equ 0DBh          ; Analog Mux Port 3 Bit Enables Register
   568  00EC                    MUX_CR4:      equ 0ECh          ; Analog Mux Port 4 Bit Enables Register
   569                          
   570                          ;------------------------------------------------
   571                          ;  Clock and System Control Registers
   572                          ;------------------------------------------------
   573                          
   574  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   575  0080                    OSC_GO_EN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   576  0040                    OSC_GO_EN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   577  0020                    OSC_GO_EN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   578  0010                    OSC_GO_EN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   579  0008                    OSC_GO_EN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   580  0004                    OSC_GO_EN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   581  0002                    OSC_GO_EN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   582  0001                    OSC_GO_EN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   583                          
   584  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   585  0003                    OSC_CR4_VC3SEL:       equ 03h    ; MASK: System VC3 Clock source
   586                          
   587  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   588                          
   589  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   590  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   591  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   592  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   593  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   594  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   595  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   596  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   597  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   598  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   599  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   600  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   601  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   602  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   603  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   604  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   605  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   606  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   607                          
   608  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   609  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   610  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   611                          
   612  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   613  0080                    OSC_CR2_PLLGAIN:      equ 80h    ; MASK: High/Low gain
   614  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   615  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   616  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   617                          
   618  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   619  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   620  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   621  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   622  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   623  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   624  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   625  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   626                          
   627  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   628  0008                    VLT_CMP_NOWRITE:      equ 08h    ; MASK: Vcc below Flash Write level
   629  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   630  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   631  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   632                          
   633  00E5                    ADC0_TR:      equ 0E5h          ; ADC Column 0 Trim Register
   634  00E6                    ADC1_TR:      equ 0E6h          ; ADC Column 1 Trim Register
   635                          
   636  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   637  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   638  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   639  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   640                          
   641  00FA                    FLS_PR1:      equ 0FAh          ; Flash Program Register 1                 (RW)
   642  0003                    FLS_PR1_BANK:         equ 03h    ; MASK: Select Active Flash Bank
   643                          
   644  00FD                    DAC_CR0:       equ 0FDh          ; Analog Mux DAC Control Register 0
   645  00DC                    DAC_CR1:       equ 0DCh          ; Analog Mux DAC Control Register 1
   646  0008                    DAC_CR_IRANGE:        equ 08h    ; MASK: Sets the DAC Range low or high
   647  0006                    DAC_CR_OSCMODE:       equ 06h    ; MASK: Defines the reset mode for AMux
   648  0001                    DAC_CR_ENABLE:        equ 01h    ; MASK: Enable/Disable DAC function
   649                          
   650                          ;------------------------------------------------
   651                          ;  I2C Control Registers
   652                          ;------------------------------------------------
   653                          
   654  00AD                    I2C_ADDR:    equ 0ADh          ; I2C Address Register (RW)
   655                          
   656                          ;------------------------------------------------------
   657                          ;  Neon Analog Registers
   658                          ;------------------------------------------------------
   659  0053                    VDAC50CR0:		equ 53h			; V DAC5 control 0				(RW)
   660  0057                    VDAC51CR0:		equ 57h			; V DAC5 control 1				(RW)
   661  00A8                    ADC_CR0:		equ A8h			; ADC control 0					(RW)
   662  00A9                    ADC_CR1:		equ A9h			; ADC control 1					(RW)
   663  00AA                    ADC_CR2:		equ AAh			; ADC control 2					(RW)
   664  00AB                    ADC_CR3TRIM:	equ ABh			; ADC control 3					(RW)
   665  00AC                    ADC_CR4:		equ ACh			; ADC control 4					(RW)
   666  00E7                    VDAC_TRIM:		equ E7h			; V DAC trim					(RW)
   667                          
   668                          ;------------------------------------------------------
   669                          ;  Neon Current Sense CMP Registers
   670                          ;------------------------------------------------------
   671  0050                    CMP0CR1:		equ 50h			; CMP0 control 1				(RW)
   672  0051                    CMP0CR2:		equ 51h			; CMP0 control 2				(RW)
   673  0054                    CMP1CR1:		equ 54h			; CMP1 control 1				(RW)
   674  0055                    CMP1CR2:		equ 55h			; CMP1 control 2				(RW)
   675  0058                    CSCMPCR0:		equ 58h			; CSCMP control 0				(RW)
   676  0059                    CSCMPGOEN:		equ 59h			; CSCMO global out enable		(RW)
   677  005A                    CSLUTCR0:		equ 5Ah			; CSLUT control 0				(RW)
   678  005B                    CMPCOLMUX:		equ 5Bh			; CMP Column Mux				(RW)
   679  005C                    CMPPWMCR:		equ 5Ch			; CMP PWM control				(RW)
   680  005D                    CMPFLTCR:		equ 5Dh			; CMP filter control			(RW)
   681  005E                    CMPCLK1:		equ 5Eh			; CMP clock 1					(RW)
   682  005F                    CMPCLK0:		equ 5Fh			; CMP clock 0					(RW)
   683                          
   684                          ;------------------------------------------------------
   685                          ;  Neon Real Time Clock Registers
   686                          ;------------------------------------------------------
   687  00A4                    RTCH:			equ A4h			; Real time current hour		(RW)
   688  00A5                    RTCM:			equ A5h			; Real time current minute		(RW)
   689  00A6                    RTCS:			equ A6h			; Real time current second		(RW)
   690  00A7                    RTCCR:			equ A7h			; Real time clock control		(RW)
   691                          
   692                          ;------------------------------------------------------
   693                          ;  Analog MUX Config Registers
   694                          ;------------------------------------------------------
   695                          
   696  006A                    AMUX_CFG1:			equ 6Ah  ; Analog MUX Configuration 1
   697  0020                    AMUX_CFG1_GOINVR:	equ 20h  ;
   698  0010                    AMUX_CFG1_GOINVL:  	equ 10h	 ;
   699  000C                    AMUX_CFG1_AMUXMODR:	equ 0Ch	 ;
   700  0003                    AMUX_CFG1_AMUXMODL:	equ 03h	 ;
   701                          
   702                          ;;=============================================================================
   703                          ;;      M8C System Macros
   704                          ;;  These macros should be used when their functions are needed.
   705                          ;;=============================================================================
   706                          
   707                          ;----------------------------------------------------
   708                          ;  Swapping Register Banks
   709                          ;----------------------------------------------------
   710                              macro M8C_SetBank0
   711                              and   F, ~FLAG_XIO_MASK
   712  3C51                        endm
   713                          
   714                              macro M8C_SetBank1
   715                              or    F, FLAG_XIO_MASK
   716  3C51                        endm
   717                          
   718                          ;----------------------------------------------------
   719                          ;  Global Interrupt Enable/Disable
   720                          ;----------------------------------------------------
   721                              macro M8C_EnableGInt
   722                              or    F, FLAG_GLOBAL_IE
   723  3C51                        endm
   724                          
   725                              macro M8C_DisableGInt
   726                              and   F, ~FLAG_GLOBAL_IE
   727  3C51                        endm
   728                          
   729                          ;----------------------------------------------------
   730                          ;  Enable/Disable Interrupt Mask
   731                          ;
   732                          ;  Use the following macros to enable/disable
   733                          ;  bits in the Interrupt mask registers,
   734                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   735                          ;
   736                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   737                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   738                          ;
   739                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   740                          ;        and MASK is the bit set to enable or disable
   741                          ;----------------------------------------------------
   742                          ; Disable Interrupt Bit Mask(s)
   743                              macro M8C_DisableIntMask
   744                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   745  3C51                        endm
   746                          
   747                          ; Enable Interrupt Bit Mask(s)
   748                              macro M8C_EnableIntMask
   749                              or    reg[@0], @1               ; enable specified interrupt enable bit
   750  3C51                        endm
   751                          
   752                          ;----------------------------------------------------
   753                          ;  Clear Posted Interrupt Flag Mask
   754                          ;
   755                          ;  Use the following macros to clear the
   756                          ;  bits in the Interrupt Clear registers,
   757                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   758                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   759                          ;
   760                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   761                          ;        and MASK is the bit set to enable or disable
   762                          ;----------------------------------------------------
   763                              macro M8C_ClearIntFlag
   764                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   765  3C51                        endm
   766                          
   767                          ;----------------------------------------------------
   768                          ;  Power-On Reset & WatchDog Timer Functions
   769                          ;----------------------------------------------------
   770                              macro M8C_EnableWatchDog
   771                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   772  3C51                        endm
   773                          
   774                              macro M8C_ClearWDT
   775                              mov   reg[RES_WDT], 00h
   776  3C51                        endm
   777                          
   778                              macro M8C_ClearWDTAndSleep
   779                              mov   reg[RES_WDT], 38h
   780  3C51                        endm
   781                          
   782                          ;----------------------------------------------------
   783                          ;  Sleep, CPU Stop & Software Reset
   784                          ;----------------------------------------------------
   785                              macro M8C_Sleep
   786                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   787                              ; The next instruction to be executed depends on the state of the
   788                              ; various interrupt enable bits. If some interrupts are enabled
   789                              ; and the global interrupts are disabled, the next instruction will
   790                              ; be the one that follows the invocation of this macro. If global
   791                              ; interrupts are also enabled then the next instruction will be
   792                              ; from the interrupt vector table. If no interrupts are enabled
   793                              ; then the CPU sleeps forever.
   794  3C51                        endm
   795                          
   796                              macro M8C_Stop
   797                              ; In general, you probably don't want to do this, but here's how:
   798                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   799                              ; Next instruction to be executed is located in the interrupt
   800                              ; vector table entry for Power-On Reset.
   801  3C51                        endm
   802                          
   803                              macro M8C_Reset
   804                              ; Restore CPU to the power-on reset state.
   805                              mov A, 0
   806                              SSC
   807                              ; Next non-supervisor instruction will be at interrupt vector 0.
   808  3C51                        endm
   809                          
   810                          ;----------------------------------------------------
   811                          ; ImageCraft Code Compressor Actions
   812                          ;----------------------------------------------------
   813                              ; Suspend Code Compressor
   814                              ; Must not span a RET or RETI instruction
   815                              ; without resuming code compression
   816                              macro Suspend_CodeCompressor
   817                              or   F, 0
   818  3C51                        endm
   819                          
   820                              ; Resume Code Compression
   821                              macro Resume_CodeCompressor
   822                              add  SP, 0
   823  3C51                        endm
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  FILENAME:   UART_BoardINT.asm
     4                          ;;  Version: 5.3, Updated on 2013/5/19 at 10:44:49
     5                          ;;  Generated by PSoC Designer 5.4.2946
     6                          ;;
     7                          ;;  DESCRIPTION:  UART Interrupt Service Routine.
     8                          ;;-----------------------------------------------------------------------------
     9                          ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
    10                          ;;*****************************************************************************
    11                          ;;*****************************************************************************
    12                          
    13                          
    14                          include "UART_Board.inc"
    15                          include "memory.inc"
    16                          include "m8c.inc"
    17                          
    18                          ;-----------------------------------------------
    19                          ;  Global Symbols
    20                          ;-----------------------------------------------
    21                          export  _UART_Board_TX_ISR
    22                          export  _UART_Board_RX_ISR
    23                          
    24                          IF (UART_Board_RXBUF_ENABLE)
    25                          export  UART_Board_aRxBuffer
    26                          export _UART_Board_aRxBuffer
    27                          export  UART_Board_bRxCnt
    28                          export _UART_Board_bRxCnt
    29                          export  UART_Board_fStatus
    30                          export _UART_Board_fStatus
    31                          ENDIF
    32                          
    33                          
    34                          ;-----------------------------------------------
    35                          ; Variable Allocation
    36                          ;-----------------------------------------------
    37                          AREA InterruptRAM (RAM, REL, CON)
    38                          
    39                          IF (UART_Board_RXBUF_ENABLE)
    40                           UART_Board_fStatus:
    41                          _UART_Board_fStatus:      BLK  1
    42                           UART_Board_bRxCnt:
    43                          _UART_Board_bRxCnt:       BLK  1
    44                          AREA UART_Board_RAM (RAM, REL, CON)
    45                           UART_Board_aRxBuffer:
    46                          _UART_Board_aRxBuffer:    BLK UART_Board_RX_BUFFER_SIZE
    47                          ENDIF
    48                          
    49                          AREA InterruptRAM (RAM, REL, CON)
    50                          
    51                          ;@PSoC_UserCode_INIT@ (Do not change this line.)
    52                          ;---------------------------------------------------
    53                          ; Insert your custom declarations below this banner
    54                          ;---------------------------------------------------
    55                          
    56                          ;------------------------
    57                          ;  Includes
    58                          ;------------------------
    59                          
    60                          
    61                          ;------------------------
    62                          ;  Constant Definitions
    63                          ;------------------------
    64                          
    65                          
    66                          ;------------------------
    67                          ; Variable Allocation
    68                          ;------------------------
    69                          
    70                          
    71                          ;---------------------------------------------------
    72                          ; Insert your custom declarations above this banner
    73                          ;---------------------------------------------------
    74                          ;@PSoC_UserCode_END@ (Do not change this line.)
    75                          
    76                          
    77                          AREA UserModules (ROM, REL, CON)
    78                          
    79                          ;-----------------------------------------------------------------------------
    80                          ;  FUNCTION NAME: _UART_Board_TX_ISR
    81                          ;
    82                          ;  DESCRIPTION:
    83                          ;     UART TX interrupt handler for instance UART_Board.
    84                          ;
    85                          ;     This is a place holder function.  If the user requires use of an interrupt
    86                          ;     handler for this function, then place code where specified.
    87                          ;-----------------------------------------------------------------------------
    88                          
    89  2F3A                    _UART_Board_TX_ISR:
    90                             ;@PSoC_UserCode_BODY_1@ (Do not change this line.)
    91                             ;---------------------------------------------------
    92                             ; Insert your custom assembly code below this banner
    93                             ;---------------------------------------------------
    94                             ;   NOTE: interrupt service routines must preserve
    95                             ;   the values of the A and X CPU registers.
    96                             
    97                             ;---------------------------------------------------
    98                             ; Insert your custom assembly code above this banner
    99                             ;---------------------------------------------------
   100                             
   101                             ;---------------------------------------------------
   102                             ; Insert a lcall to a C function below this banner
   103                             ; and un-comment the lines between these banners
   104                             ;---------------------------------------------------
   105                             
   106                             ;PRESERVE_CPU_CONTEXT
   107                             ;lcall _My_C_Function
   108                             ;RESTORE_CPU_CONTEXT
   109                             
   110                             ;---------------------------------------------------
   111                             ; Insert a lcall to a C function above this banner
   112                             ; and un-comment the lines between these banners
   113                             ;---------------------------------------------------
   114                             ;@PSoC_UserCode_END@ (Do not change this line.)
   115  2F3A  7E                   reti
   116                          
   117                          
   118                          ;-----------------------------------------------------------------------------
   119                          ;  FUNCTION NAME: _UART_Board_RX_ISR
   120                          ;
   121                          ;  DESCRIPTION:
   122                          ;     UART RX interrupt handler for instance UART_Board.
   123                          ;     This ISR handles the background processing of received characters if
   124                          ;     the buffer is enabled.
   125                          ;
   126                          ;
   127                          ;  The following assumes that the RX buffer feature has been enabled.
   128                          ;
   129                          ;  SIDE EFFECTS:
   130                          ;     There are 3 posible errors that may occur with the serial port.
   131                          ;      1) Parity Error
   132                          ;      2) Framing Error
   133                          ;      3) OverRun Error
   134                          ;
   135                          ;  This user module check for parity and framing error.  If either of these
   136                          ;  two errors are detected, the data is read and ignored.  When an overRun
   137                          ;  error occurs, the last byte was lost, but the current byte is valid.  For
   138                          ;  this reason this error is ignored at this time.  Code could be added to
   139                          ;  this ISR to set a flag if an error condition occurs.
   140                          ;
   141                          ;  THEORY of OPERATION:
   142                          ;     When using the RX buffer feature, the ISR collects received characters
   143                          ;     in a buffer until the user defined command terminator is detected.  After
   144                          ;     the command terminator is detected, the command bit is set and all other
   145                          ;     characters will be ignored until the command bit is reset.  Up to
   146                          ;     buffer_size - 1 characters will be collected waiting for a command
   147                          ;     terminator.  After that, the characters will be discarded, although
   148                          ;     a command determinator will still cause the command bit to be set.
   149                          ;
   150                          ;-----------------------------------------------------------------------------
   151  2F3B                    _UART_Board_RX_ISR:
   152                          
   153                             ;@PSoC_UserCode_BODY_2@ (Do not change this line.)
   154                             ;---------------------------------------------------
   155                             ; Insert your custom assembly code below this banner
   156                             ;---------------------------------------------------
   157                             ;   NOTE: interrupt service routines must preserve
   158                             ;   the values of the A and X CPU registers.
   159                             
   160                             ;---------------------------------------------------
   161                             ; Insert your custom assembly code above this banner
   162                             ;---------------------------------------------------
   163                             
   164                             ;---------------------------------------------------
   165                             ; Insert a lcall to a C function below this banner
   166                             ; and un-comment the lines between these banners
   167                             ;---------------------------------------------------
   168                             
   169                             ;PRESERVE_CPU_CONTEXT
   170                             ;lcall _My_C_Function
   171                             ;RESTORE_CPU_CONTEXT
   172                             
   173                             ;---------------------------------------------------
   174                             ; Insert a lcall to a C function above this banner
   175                             ; and un-comment the lines between these banners
   176                             ;---------------------------------------------------
   177                             ;@PSoC_UserCode_END@ (Do not change this line.)
   178                          
   179                          IF (UART_Board_RXBUF_ENABLE)
   180                             push A
   181                             push X
   182                             
   183                             IF SYSTEM_LARGE_MEMORY_MODEL
   184                                REG_PRESERVE IDX_PP
   185                             ENDIF
   186                             
   187                             mov  X,[UART_Board_bRxCnt]                              ; Load X with byte counter
   188                             mov  A,REG[UART_Board_RX_CONTROL_REG]                   ; Read the control register
   189                             push A                                                  ; Store copy for later test
   190                                                                                     ; IF real RX interrupt
   191                             and  A,UART_Board_RX_REG_FULL                           ; Did really really get an IRQ
   192                             jnz  .UARTRX_ReadRx                                     ; Data ready, go get it
   193                             pop  A                                                  ; Restore stack
   194                             jmp  .RESTORE_IDX_PP
   195                          
   196                          .UARTRX_ReadRx:
   197                             pop  A                                                  ; Restore status flags
   198                                                                                     ; IF there is no error, get data
   199                                                                                     ; Check for parity or framing error
   200                             and  A,UART_Board_RX_ERROR
   201                             jz   .UARTRX_NO_ERROR                                   ; If there is not an Error go read data
   202                          
   203                             or   [UART_Board_fStatus],A                             ; Set error flags (parity,framing,overrun
                                ) bits
   204                             tst  REG[UART_Board_RX_BUFFER_REG], 0x00                ; Read the data buffer to clear it.
   205                             and  A,UART_Board_RX_FRAMING_ERROR                      ; Check for framing error special case
   206                             jz   .RESTORE_IDX_PP                                    ; Not framing error, all done
   207                          
   208                                                                                     ; Disable and re-enable RX to reset after
   209                                                                                     ; framing error.
   210                             and   REG[UART_Board_RX_CONTROL_REG], ~UART_Board_RX_ENABLE   ; Disable RX
   211                             or    REG[UART_Board_RX_CONTROL_REG],  UART_Board_RX_ENABLE   ; Enable RX
   212                             jmp  .RESTORE_IDX_PP                                    ; Done with framing error, leave.
   213                          
   214                          
   215                          .UARTRX_NO_ERROR:
   216                             mov  A,REG[UART_Board_RX_BUFFER_REG ]                   ; Read the data buffer
   217                          
   218                                                                                     ; IF buffer not full
   219                             tst  [UART_Board_fStatus],UART_Board_RX_BUF_CMDTERM     ; Check for buffer full
   220                             jnz  .RESTORE_IDX_PP                                    ; All done
   221                          
   222                             cmp  A,UART_Board_CMD_TERM                              ; Check for End of command
   223                             jnz  .UARTRX_CHK_BACKSPACE
   224                             or   [UART_Board_fStatus],UART_Board_RX_BUF_CMDTERM     ; Set command ready bit
   225                          
   226                          
   227                          
   228                             RAM_SETPAGE_IDX >UART_Board_aRxBuffer
   229                             RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
   230                             mov  [X + UART_Board_aRxBuffer],00h                     ; Zero out last data
   231                             RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
   232                             jmp  .RESTORE_IDX_PP
   233                          
   234                          .UARTRX_CHK_BACKSPACE:                                     ; 
   235                          IF(UART_Board_BACKSPACE_ENABLE)                            ; Enable if backspace/delete mode
   236                             cmp  A,UART_Board_BACKSPACE_ENABLE                      ; Check for backspace character
   237                             jnz  .UARTRX_IGNORE                                     ; If not, skip the backspace stuff
   238                             cmp  [UART_Board_bRxCnt],00h                            ; Check if buffer empty
   239                             jz   .RESTORE_IDX_PP                                    ; 
   240                             dec  [UART_Board_bRxCnt]                                ; Decrement buffer count by one.
   241                             jmp  .RESTORE_IDX_PP
   242                          ENDIF                                                      ; 
   243                          
   244                          .UARTRX_IGNORE:
   245                          IF(UART_Board_RX_IGNORE_BELOW)                             ; Ignore charaters below this value
   246                             cmp  A,UART_Board_RX_IGNORE_BELOW                       ; If ignore char is set to 0x00, do not
   247                             jc   .RESTORE_IDX_PP                                    ; ignore any characters.
   248                          ENDIF
   249                          
   250                          .UARTRX_CHK_OVFL:                                          ; Check for MAX String here
   251                          	
   252                             RAM_SETPAGE_IDX >UART_Board_aRxBuffer                   ;   using idexed address mode
   253                             cmp  [UART_Board_bRxCnt],(UART_Board_RX_BUFFER_SIZE - 1)
   254                             jc   .UARTRX_ISR_GETDATA
   255                             RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
   256                             mov  [X + UART_Board_aRxBuffer],00h                     ; Zero out last data in the buffer
   257                             RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
   258                             or   [UART_Board_fStatus],UART_Board_RX_BUF_OVERRUN     ; Set error flags (parity,framing,overrun
                                ) bits
   259                             jmp  .RESTORE_IDX_PP
   260                          
   261                          .UARTRX_ISR_GETDATA:                                       ; IF input data == "CR", then end of comm
                                and
   262                                                                                     ; X is already loaded with pointer
   263                             RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
   264                             mov  [X+UART_Board_aRxBuffer],A                         ; store data in array
   265                             RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
   266                             inc  X                                                  ; Inc the pointer
   267                             mov  [UART_Board_bRxCnt],X                              ; Restore the pointer
   268                                                                                     ; ENDIF max string size
   269                          .RESTORE_IDX_PP:
   270                             IF SYSTEM_LARGE_MEMORY_MODEL
   271                                REG_RESTORE IDX_PP
   272                             ENDIF
   273                          
   274                          .END_UARTRX_ISR:
   275                             pop  X
   276                             pop  A
   277                          
   278                          ENDIF
   279                          
   280  2F3B                    UART_Board_RX_ISR_END:
   281  2F3B  7E                   reti
HI-TECH Software Macro Assembler (PSoC MCU) V9.61
Symbol Table                                                                                               Fri Jun 12 09:25:11 2015
                          HITECH 0002           UART_Board_RXBUF_ENABLE 0000             UART_Board_RX_ISR_END 2F3B  
                       TOOLCHAIN 0002                _UART_Board_RX_ISR 2F3B                _UART_Board_TX_ISR 2F3A  
HI-TECH Software Macro Assembler (PSoC MCU) V9.61
                                                                                                           Fri Jun 12 09:25:11 2015
     1                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     2                          ;;;
     3                          ;;;  M8C.INC -- Microcontroller Device System Declarations
     4                          ;;;
     5                          ;;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
     6                          ;;;
     7                          ;;;  This file provides address constants, bit field masks and a set of macro
     8                          ;;;  facilities for the Cypress Semiconductor CY8C22045 Microcontroller devices.
     9                          ;;;
    10                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    11                          
    12                          ;;=============================================================================
    13                          ;; Definition of abbreviations used in the descriptions below
    14                          ;;  (RW)   The register or bit supports reads and writes
    15                          ;;  (W)    The register or bit is write-only
    16                          ;;  (R)    The register or bit is read-only
    17                          ;;  (#)    Access to the register is bit specific (see the family datasheet)
    18                          ;;  (RC)   The register or bit can be read, but writing a 0 will clear it,
    19                          ;;         writing a 1 will have no effect.
    20                          ;;=============================================================================
    21                          
    22                          ;;=============================================================================
    23                          ;;      System Registers
    24                          ;;=============================================================================
    25                          
    26                          ;----------------------------
    27                          ;  Flag Register Bit Fields
    28                          ;----------------------------
    29  00C0                    FLAG_PGMODE_MASK:  equ 0C0h     ; Paging control for > 256 bytes of RAM
    30  0000                    FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
    31  0040                    FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
    32  0080                    FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
    33  00C0                    FLAG_PGMODE_3:     equ 0C0h       ; Direct to CUR_PP page, indexed to STK_PP page
    34  0000                    FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
    35  0040                    FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
    36  0080                    FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
    37  00C0                    FLAG_PGMODE_11b:   equ 0C0h       ; Same as PGMODE_3
    38  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    39  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    40  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    41  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    42  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    43                          
    44                          
    45                          ;;=============================================================================
    46                          ;;      Register Space, Bank 0
    47                          ;;=============================================================================
    48                          
    49                          ;------------------------------------------------
    50                          ;  Port Registers
    51                          ;  Note: Also see this address range in Bank 1.
    52                          ;------------------------------------------------
    53                          ; Port 0
    54  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    55  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    56  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    57  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    58                          ; Port 1
    59  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    60  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    61  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    62  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    63                          ; Port 2
    64  0008                    PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
    65  0009                    PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
    66  000A                    PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
    67  000B                    PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
    68                          ; Port 3
    69  000C                    PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
    70  000D                    PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
    71  000E                    PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
    72  000F                    PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
    73                          ; Port 4
    74  0010                    PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
    75  0011                    PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
    76  0012                    PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
    77  0013                    PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
    78                          
    79                          ;------------------------------------------------
    80                          ;  Digital PSoC(tm) block Registers
    81                          ;  Note: Also see this address range in Bank 1.
    82                          ;------------------------------------------------
    83                          ; Digital PSoC block 00, Basic Type C
    84  0020                    DBC00DR0:     equ 20h          ; data register 0                          (#)
    85  0021                    DBC00DR1:     equ 21h          ; data register 1                          (W)
    86  0022                    DBC00DR2:     equ 22h          ; data register 2                          (RW)
    87  0023                    DBC00CR0:     equ 23h          ; control & status register 0              (#)
    88                          
    89                          ; Digital PSoC block 01, Basic Type C
    90  0024                    DBC01DR0:     equ 24h          ; data register 0                          (#)
    91  0025                    DBC01DR1:     equ 25h          ; data register 1                          (W)
    92  0026                    DBC01DR2:     equ 26h          ; data register 2                          (RW)
    93  0027                    DBC01CR0:     equ 27h          ; control & status register 0              (#)
    94                          
    95                          ; Digital PSoC block 02, Communications Type C
    96  0028                    DCC02DR0:     equ 28h          ; data register 0                          (#)
    97  0029                    DCC02DR1:     equ 29h          ; data register 1                          (W)
    98  002A                    DCC02DR2:     equ 2Ah          ; data register 2                          (RW)
    99  002B                    DCC02CR0:     equ 2Bh          ; control & status register 0              (#)
   100                          
   101                          ; Digital PSoC block 03, Communications Type C
   102  002C                    DCC03DR0:     equ 2Ch          ; data register 0                          (#)
   103  002D                    DCC03DR1:     equ 2Dh          ; data register 1                          (W)
   104  002E                    DCC03DR2:     equ 2Eh          ; data register 2                          (RW)
   105  002F                    DCC03CR0:     equ 2Fh          ; control & status register 0              (#)
   106                          
   107                          ; Digital PSoC block 10, Basic Type C
   108  0030                    DBC10DR0:     equ 30h          ; data register 0                          (#)
   109  0031                    DBC10DR1:     equ 31h          ; data register 1                          (W)
   110  0032                    DBC10DR2:     equ 32h          ; data register 2                          (RW)
   111  0033                    DBC10CR0:     equ 33h          ; control & status register 0              (#)
   112                          
   113                          ; Digital PSoC block 11, Basic Type C
   114  0034                    DBC11DR0:     equ 34h          ; data register 0                          (#)
   115  0035                    DBC11DR1:     equ 35h          ; data register 1                          (W)
   116  0036                    DBC11DR2:     equ 36h          ; data register 2                          (RW)
   117  0037                    DBC11CR0:     equ 37h          ; control & status register 0              (#)
   118                          
   119                          ; Digital PSoC block 12, Communications Type C
   120  0038                    DCC12DR0:     equ 38h          ; data register 0                          (#)
   121  0039                    DCC12DR1:     equ 39h          ; data register 1                          (W)
   122  003A                    DCC12DR2:     equ 3Ah          ; data register 2                          (RW)
   123  003B                    DCC12CR0:     equ 3Bh          ; control & status register 0              (#)
   124                          
   125                          ; Digital PSoC block 13, Communications Type C
   126  003C                    DCC13DR0:     equ 3Ch          ; data register 0                          (#)
   127  003D                    DCC13DR1:     equ 3Dh          ; data register 1                          (W)
   128  003E                    DCC13DR2:     equ 3Eh          ; data register 2                          (RW)
   129  003F                    DCC13CR0:     equ 3Fh          ; control & status register 0              (#)
   130                          
   131                          ;-------------------------------------
   132                          ;  Analog Control Registers
   133                          ;-------------------------------------
   134  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
   135  00C0                    AMX_IN_ACI3:          equ C0h    ; MASK: column 3 input mux
   136  0030                    AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
   137  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
   138  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
   139                          
   140  0061                    AMUX_CFG:      equ 61h          ; Analog MUX Configuration
   141  0030                    AMUX_CFG_INTCAP:       equ 30h    ;
   142  000E                    AMUX_CFG_MUXCLK:  	  equ 0Eh	 ;
   143  0001                    AMUX_CFG_EN:		  	  equ 01h	 ;
   144                          
   145                          ; old declarations DO NOT USE
   146  0061                    AMUXCFG:      equ 61h          ; Analog MUX Configuration
   147  0030                    AMUXCFG_INTCAP:       equ 30h    ;
   148  000E                    AMUXCFG_MUXCLK:  	  equ 0Eh	 ;
   149  0001                    AMUXCFG_EN:		  	  equ 01h	 ;
   150                          
   151  0062                    PWM_CR:       equ 62h          ; Pulse-Width Modulator Control
   152  0038                    PWM_CR_HIGH:          equ 38h    ; MASK: PWM high time
   153  0006                    PWM_CR_LOW:           equ 06h	 ; MASK: PWM low time
   154  0001                    PWM_CR_EN:            equ 01h	 ; MASK: Enable/Disable PWM function
   155                          
   156  0063                    ARF_CR:       equ 63h          ; Analog Reference Control
   157                          
   158  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus Register           (#)
   159  0080                    CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
   160  0040                    CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
   161  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
   162  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
   163  0008                    CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
   164  0004                    CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
   165  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
   166  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   167                          
   168  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   169  0020                    CMP_CR1_CLDIS1:       equ 20h    ; MASK: Column 1 comparator output latch
   170  0010                    CMP_CR1_CLDIS0:	      equ 10h    ; MASK: Column 0 comparator output latch
   171                          
   172  0068                    ADC0_CR:      equ 68h          ; Analog Column 0 Configuration
   173  0080                    ADC0_CR_CMPST:        equ 80h    ;
   174  0040                    ADC0_CR_LOREN:        equ 40h    ;
   175  0020                    ADC0_CR_SHEN:         equ 20h    ;
   176  0008                    ADC0_CR_CBSRC:        equ 08h    ;
   177  0004                    ADC0_CR_ADCM:         equ 04h    ;
   178  0001                    ADC0_CR_EN:	          equ 01h    ;
   179                          
   180  0069                    ADC1_CR:      equ 69h          ; Analog Column 1 Configuration
   181  0080                    ADC1_CR_CMPST:        equ 80h    ;
   182  0040                    ADC1_CR_LOREN:        equ 40h    ;
   183  0020                    ADC1_CR_SHEN:         equ 20h    ;
   184  0008                    ADC1_CR_CBSRC:        equ 08h    ;
   185  0004                    ADC1_CR_ADCM:         equ 04h    ;
   186  0001                    ADC1_CR_EN:	          equ 01h    ;
   187                          
   188                          ; Continuous Time PSoC block Type E Row 0 Col 0
   189  0072                    ACE00CR1:     equ 72h          ; Control register 1                       (RW)
   190  0073                    ACE00CR2:     equ 73h          ; Control register 2                       (RW)
   191                          
   192                          ; Continuous Time PSoC block Type E Row 0 Col 1
   193  0076                    ACE01CR1:     equ 76h          ; Control register 1                       (RW)
   194  0077                    ACE01CR2:     equ 77h          ; Control register 2                       (RW)
   195                          
   196                          ; Switched Cap PSoC blockType E Row 1 Col 0
   197  0080                    ASE10CR0:     equ 80h          ; Control register 0                       (RW)
   198                          
   199                          ; Switched Cap PSoC blockType E Row 1 Col 1
   200  0084                    ASE11CR0:     equ 84h          ; Control register 0                       (RW)
   201                          
   202                          ;-----------------------------------------------
   203                          ;  Global General Purpose Data Registers
   204                          ;-----------------------------------------------
   205  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   206  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   207  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   208  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   209                          
   210                          ;------------------------------------------------
   211                          ;  Row Digital Interconnects
   212                          ;
   213                          ;  Note: the following registers are mapped into
   214                          ;  both register bank 0 AND register bank 1.
   215                          ;------------------------------------------------
   216                          
   217  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   218  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   219  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   220  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   221  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   222  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   223  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   224                          
   225  00B8                    RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
   226  00B9                    RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
   227  00BA                    RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
   228  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   229  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   230  00BD                    RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
   231  00BE                    RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
   232                          
   233                          ;-----------------------------------------------
   234                          ;  Ram Page Pointers
   235                          ;-----------------------------------------------
   236  00D0                    CUR_PP:      equ 0D0h           ; Current   Page Pointer
   237  00D1                    STK_PP:      equ 0D1h           ; Stack     Page Pointer
   238  00D3                    IDX_PP:      equ 0D3h           ; Index     Page Pointer
   239  00D4                    MVR_PP:      equ 0D4h           ; MVI Read  Page Pointer
   240  00D5                    MVW_PP:      equ 0D5h           ; MVI Write Page Pointer
   241                          
   242                          ;------------------------------------------------
   243                          ;  I2C Configuration Registers
   244                          ;------------------------------------------------
   245  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   246  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   247  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   248  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   249  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   250  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   251  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   252  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   253  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   254  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   255                          
   256  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   257  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   258  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   259  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   260  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   261  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   262  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   263  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   264  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   265                          
   266  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   267                          
   268  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   269  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   270  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   271  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   272  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   273                          
   274                          ;------------------------------------------------
   275                          ;  System and Global Resource Registers
   276                          ;------------------------------------------------
   277  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   278                                                         ; Use INT_MSK0 bit field masks
   279  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   280                                                         ; Use INT_MSK1 bit field masks
   281  00DC                    INT_CLR2:     equ 0DCh          ; Interrupt Clear Register 2               (RW)
   282                                                         ; Use INT_MSK2 bit field masks
   283  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   284                                                         ; Use INT_MSK3 bit field masks
   285                          
   286  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   287  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   288  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   289                          
   290  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   291  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   292  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   293  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   294  0010                    INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
   295  0008                    INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
   296  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   297  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   298  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   299                          
   300  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   301  0080                    INT_MSK1_DCC13:            equ 80h ; MASK: enable/disable DCC13 block interrupt
   302  0040                    INT_MSK1_DCC12:            equ 40h ; MASK: enable/disable DCC12 block interrupt
   303  0020                    INT_MSK1_DBC11:            equ 20h ; MASK: enable/disable DBC11 block interrupt
   304  0010                    INT_MSK1_DBC10:            equ 10h ; MASK: enable/disable DBC10 block interrupt
   305  0008                    INT_MSK1_DCC03:            equ 08h ; MASK: enable/disable DCC03 block interrupt
   306  0004                    INT_MSK1_DCC02:            equ 04h ; MASK: enable/disable DCC02 block interrupt
   307  0002                    INT_MSK1_DBC01:            equ 02h ; MASK: enable/disable DBC01 block interrupt
   308  0001                    INT_MSK1_DBC00:            equ 01h ; MASK: enable/disable DBC00 block interrupt
   309                          
   310  00DF                    INT_MSK2:     equ DFh			; Custom block Mask Register			   (RW)
   311  0010                    INT_MSK2_SARADC:           equ 10h ; MASK: enable/disable SARADC block interrupt
   312  0020                    INT_MSK2_CSD0:             equ 20h ; MASK: enable/disable CSD0 block interrupt
   313  0040                    INT_MSK2_CSD1:             equ 40h ; MASK: enable/disable CSD1 block interrupt
   314  0080                    INT_MSK2_RTC:              equ 80h ; MASK: enable/disable RTC block interrupt
   315                          
   316  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   317  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   318                          
   319                          ;------------------------------------------------------
   320                          ;  MAC Registers
   321                          ;------------------------------------------------------
   322                          
   323  00E8                    MUL0_X:       equ 0E8h          ; Multiply Input X Register                (W)
   324  00E9                    MUL0_Y:       equ 0E9h          ; Multiply Input Y Register                (W)
   325  00EA                    MUL0_DH:      equ 0EAh          ; Multiply Result High Byte Register       (R)
   326  00EB                    MUL0_DL:      equ 0EBh          ; Multiply Result Low Byte Register        (R)
   327                          
   328  00EC                    ACC0_DR1:     equ 0ECh          ; Accumulator Data Register 1              (RW)
   329  00ED                    ACC0_DR0:     equ 0EDh          ; Accumulator Data Register 0              (RW)
   330  00EE                    ACC0_DR3:     equ 0EEh          ; Accumulator Data Register 3              (RW)
   331  00EF                    ACC0_DR2:     equ 0EFh          ; Accumulator Data Register 2              (RW)
   332                          
   333                          ; DECIMATOR Control Registers
   334  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   335  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   336                          
   337                          ;------------------------------------------------------
   338                          ;  System Status and Control Registers
   339                          ;
   340                          ;  Note: The following registers are mapped into both
   341                          ;        register bank 0 AND register bank 1.
   342                          ;------------------------------------------------------
   343  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   344                                                             ; Use FLAG_ masks defined at top of file
   345                          
   346  00FD                    DAC_D:        equ 0FDh		   ; DAC Data Register                        (RW)
   347                          
   348  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   349  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: flag, Internal Reset Status bit
   350  0010                    CPU_SCR1_SLIMO:         equ 10h	   ; MASK: Slow IMO (internal main osc) enable
   351  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   352  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   353  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   354                          
   355  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   356  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   357  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   358  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   359  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   360  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   361                          
   362                          ;------------------------------------------------------
   363                          ;  Neon Capsense Digital Control Registers
   364                          ;------------------------------------------------------
   365  0050                    CSD0_DR0_L:				equ 50h		; Capsense 0 data low 0				(RW)
   366  0054                    CSD0_DR0_H:				equ 54h		; Capsense 0 data high 0			(RW)
   367  0058                    CSD1_DR0_L:				equ 58h		; Capsense 1 data low 0				(RW)
   368  005C                    CSD1_DR0_H:				equ 5Ch		; Capsense 1 data high 0			(RW)
   369  0051                    CSD0_DR1_L:				equ 51h		; Capsense 0 data low 1				(RW)
   370  0055                    CSD0_DR1_H:				equ 55h		; Capsense 0 data high 1			(RW)
   371  0059                    CSD1_DR1_L:				equ 59h		; Capsense 1 data low 1				(RW)
   372  005D                    CSD1_DR1_H:				equ 5Dh		; Capsense 1 data high 1			(RW)
   373  0052                    CSD0_CNT_L:				equ 52h		; Capsense 0 counter low			(RW)
   374  0056                    CSD0_CNT_H:				equ 56h		; Capsense 0 counter high			(RW)
   375  005A                    CSD1_CNT_L:				equ 5Ah		; Capsense 1 counter low			(RW)
   376  005E                    CSD1_CNT_H:				equ	5Eh		; Capsense 1 counter high			(RW)
   377  0053                    CSD0_CR0:				equ 53h		; Capsense 0 control 0				(RW)
   378  005B                    CSD1_CR0:				equ 5Bh		; Capsense 1 control 0				(RW)
   379  0057                    CSD0_CR1:				equ 57h		; Capsense 0 control 1				(RW)
   380  005F                    CSD1_CR1:				equ 5Fh		; Capsense 1 control 1				(RW)
   381                          
   382                          ;------------------------------------------------------
   383                          ;  Neon Analog Registers
   384                          ;------------------------------------------------------
   385  0065                    ASY_CR:					equ 65h		; Analog Synchronization Control	(RW)
   386  006A                    ADC_DH:					equ 6Ah		; ADC data high						(RW)
   387  006B                    ADC_DL:					equ 6Bh		; ADC data low						(RW)
   388  00C8                    PWMVREF0:				equ C8h		; PWM Voltage Reference 0			(RW)
   389  00C9                    PWMVREF1:				equ C9h		; PWM Voltage Reference 1			(RW)
   390  00CB                    PWMSRC:					equ CBh		; PWM Source						(RW)
   391  00CA                    IDACMODE:				equ CAh		; IDAC Mode							(RW)
   392  00FC                    IDACR_D:				equ FCh		; Analog Mux DAC data 0				(RW)
   393  00FD                    IDACL_D:				equ FDh		; Analog Mux DAC data 1				(RW)
   394                          
   395                          ;------------------------------------------------------
   396                          ;  Neon Digital Registers
   397                          ;------------------------------------------------------
   398  00B7                    RDI0DSM:				equ B7h		; Row Digital Interconnect input select 0	(RW)
   399  00BF                    RDI1DSM:				equ BFh		; Row Digital Interconnect input select 1	(RW)
   400                          
   401                          ;------------------------------------------------------
   402                          ;  Neon Test Registers
   403                          ;------------------------------------------------------
   404  00CC                    TSCR0:					equ CCh		; Tsource 0							(RW)
   405  00CD                    TSCMPH:					equ CDh		; TSCMP high						(RW)
   406  00CE                    TSCMPL:					equ CEh		; TSCMP low							(RW)
   407  00CF                    TSCR1:					equ CFh		; Tsource 1							(RW)
   408                          
   409                          ;;=============================================================================
   410                          ;;      Register Space, Bank 1
   411                          ;;=============================================================================
   412                          
   413                          ;------------------------------------------------
   414                          ;  Port Registers
   415                          ;  Note: Also see this address range in Bank 0.
   416                          ;------------------------------------------------
   417                          ; Port 0
   418  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   419  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   420  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   421  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   422                          
   423                          ; Port 1
   424  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   425  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   426  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   427  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   428                          
   429                          ; Port 2
   430  0008                    PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
   431  0009                    PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
   432  000A                    PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
   433  000B                    PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
   434                          
   435                          ; Port 3
   436  000C                    PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
   437  000D                    PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
   438  000E                    PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
   439  000F                    PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
   440                          
   441                          ; Port 4
   442  0010                    PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
   443  0011                    PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
   444  0012                    PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
   445  0013                    PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
   446                          
   447                          ;------------------------------------------------
   448                          ;  Digital PSoC(tm) block Registers
   449                          ;  Note: Also see this address range in Bank 0.
   450                          ;------------------------------------------------
   451                          
   452                          ; Digital PSoC block 00, Basic Type C
   453  0020                    DBC00FN:      equ 20h          ; Function Register                        (RW)
   454  0021                    DBC00IN:      equ 21h          ;    Input Register                        (RW)
   455  0022                    DBC00OU:      equ 22h          ;   Output Register                        (RW)
   456  0023                    DBC00CR1:     equ 23h          ;   control & status register 1            (RW)
   457                          
   458                          ; Digital PSoC block 01, Basic Type C
   459  0024                    DBC01FN:      equ 24h          ; Function Register                        (RW)
   460  0025                    DBC01IN:      equ 25h          ;    Input Register                        (RW)
   461  0026                    DBC01OU:      equ 26h          ;   Output Register                        (RW)
   462  0027                    DBC01CR1:     equ 27h          ;   control & status register 1            (RW)
   463                          
   464                          ; Digital PSoC block 02, Communications Type C
   465  0028                    DCC02FN:      equ 28h          ; Function Register                        (RW)
   466  0029                    DCC02IN:      equ 29h          ;    Input Register                        (RW)
   467  002A                    DCC02OU:      equ 2Ah          ;   Output Register                        (RW)
   468  002B                    DBC02CR1:     equ 2Bh          ;   control & status register 1            (RW)
   469                          
   470                          ; Digital PSoC block 03, Communications Type C
   471  002C                    DCC03FN:      equ 2Ch          ; Function Register                        (RW)
   472  002D                    DCC03IN:      equ 2Dh          ;    Input Register                        (RW)
   473  002E                    DCC03OU:      equ 2Eh          ;   Output Register                        (RW)
   474  0029                    DBC03CR1:     equ 29h          ;   control & status register 1            (RW)
   475                          
   476                          ; Digital PSoC block 10, Basic Type C
   477  0030                    DBC10FN:      equ 30h          ; Function Register                        (RW)
   478  0031                    DBC10IN:      equ 31h          ;    Input Register                        (RW)
   479  0032                    DBC10OU:      equ 32h          ;   Output Register                        (RW)
   480  0033                    DBC10CR1:     equ 33h          ;   control & status register 1            (RW)
   481                          
   482                          ; Digital PSoC block 11, Basic Type C
   483  0034                    DBC11FN:      equ 34h          ; Function Register                        (RW)
   484  0035                    DBC11IN:      equ 35h          ;    Input Register                        (RW)
   485  0036                    DBC11OU:      equ 36h          ;   Output Register                        (RW)
   486  0037                    DBC11CR1:     equ 37h          ;   control & status register 1            (RW)
   487                          
   488                          ; Digital PSoC block 12, Communications Type C
   489  0038                    DCC12FN:      equ 38h          ; Function Register                        (RW)
   490  0039                    DCC12IN:      equ 39h          ;    Input Register                        (RW)
   491  003A                    DCC12OU:      equ 3Ah          ;   Output Register                        (RW)
   492  003B                    DBC12CR1:     equ 3Bh          ;   control & status register 1            (RW)
   493                          
   494                          ; Digital PSoC block 13, Communications Type C
   495  003C                    DCC13FN:      equ 3Ch          ; Function Register                        (RW)
   496  003D                    DCC13IN:      equ 3Dh          ;    Input Register                        (RW)
   497  003E                    DCC13OU:      equ 3Eh          ;   Output Register                        (RW)
   498  003F                    DBC13CR1:     equ 3Fh          ;   control & status register 1            (RW)
   499                          
   500                          ;------------------------------------------------
   501                          ;  System and Global Resource Registers
   502                          ;  Note: Also see this address range in Bank 0.
   503                          ;------------------------------------------------
   504                          
   505  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   506  00C0                    CLK_CR0_ACOLUMN_3:    equ C0h    ; MASK: Specify clock for analog cloumn
   507  0030                    CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
   508  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   509  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   510                          
   511  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   512  0018                    CLK_CR1_ACLK1:        equ 18h    ; MASK: Digital PSoC block for analog source
   513  0003                    CLK_CR1_ACLK0:        equ 03h    ; MASK: Digital PSoC block for analog source
   514                          
   515  0003                    CLK_CR1_ACLK2:        equ 03h    ; Deprecated do not use
   516                          
   517  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   518  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   519                          
   520  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   521  000F                    AMD_CR0_AMOD0:        equ 0Fh    ; MASK: Modulation source for analog column 0
   522                          
   523  0064                    CMP_GO_EN:    equ 64h          ; Comparator Bus To Global Out Enable      (RW)
   524  0080                    CMP_GO_EN_GOO5:       equ 80h    ; MASK: Selected Col 1 signal to GOO5
   525  0040                    CMP_GO_EN_GOO1:       equ 40h    ; MASK: Selected Col 1 signal to GOO1
   526  0030                    CMP_GO_EN_SEL1:       equ 30h    ; MASK: Column 1 Signal Select
   527  0008                    CMP_GO_EN_GOO4:       equ 08h    ; MASK: Selected Col 0 signal to GOO4
   528  0004                    CMP_GO_EN_GOO0:       equ 04h    ; MASK: Selected Col 0 signal to GOO0
   529  0003                    CMP_GO_EN_SEL0:       equ 03h    ; MASK: Column 0 Signal Select
   530                          
   531  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   532  000F                    AMD_CR1_AMOD1:        equ 0Fh    ; MASK: Modulation ctrl for analog column 1
   533                          
   534  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   535  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   536  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   537                          
   538  006B                    CLK_CR3:      equ 6Bh          ; Analog Clock Source Control Register 3   (RW)
   539  0040                    CLK_CR3_SYS1:         equ 40h    ; MASK: Analog Clock 1 selection
   540  0030                    CLK_CR3_DIVCLK1:      equ 30h    ; MASK: Analog Clock 1 divider
   541  0004                    CLK_CR3_SYS0:         equ 04h    ; MASK: Analog Clock 0 selection
   542  0003                    CLK_CR3_DIVCLK0:      equ 03h    ; MASK: Analog Clock 0 divider
   543                          
   544                          ;------------------------------------------------
   545                          ;  Global Digital Interconnects
   546                          ;------------------------------------------------
   547                          
   548  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   549  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   550  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   551  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   552                          
   553  00A0                    GDI_O_IN_CR:  equ 0A0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   554  00A1                    GDI_E_IN_CR:  equ 0A1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   555  00A2                    GDI_O_OU_CR:  equ 0A2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   556  00A3                    GDI_E_OU_CR:  equ 0A3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   557                          
   558  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   559  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   560                          
   561                          ;------------------------------------------------
   562                          ;  Analog Mux Bus Port Enable Bits
   563                          ;------------------------------------------------
   564  00D8                    MUX_CR0:      equ 0D8h          ; Analog Mux Port 0 Bit Enables Register
   565  00D9                    MUX_CR1:      equ 0D9h          ; Analog Mux Port 1 Bit Enables Register
   566  00DA                    MUX_CR2:      equ 0DAh          ; Analog Mux Port 2 Bit Enables Register
   567  00DB                    MUX_CR3:      equ 0DBh          ; Analog Mux Port 3 Bit Enables Register
   568  00EC                    MUX_CR4:      equ 0ECh          ; Analog Mux Port 4 Bit Enables Register
   569                          
   570                          ;------------------------------------------------
   571                          ;  Clock and System Control Registers
   572                          ;------------------------------------------------
   573                          
   574  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   575  0080                    OSC_GO_EN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   576  0040                    OSC_GO_EN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   577  0020                    OSC_GO_EN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   578  0010                    OSC_GO_EN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   579  0008                    OSC_GO_EN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   580  0004                    OSC_GO_EN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   581  0002                    OSC_GO_EN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   582  0001                    OSC_GO_EN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   583                          
   584  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   585  0003                    OSC_CR4_VC3SEL:       equ 03h    ; MASK: System VC3 Clock source
   586                          
   587  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   588                          
   589  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   590  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   591  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   592  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   593  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   594  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   595  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   596  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   597  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   598  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   599  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   600  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   601  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   602  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   603  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   604  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   605  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   606  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   607                          
   608  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   609  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   610  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   611                          
   612  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   613  0080                    OSC_CR2_PLLGAIN:      equ 80h    ; MASK: High/Low gain
   614  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   615  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   616  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   617                          
   618  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   619  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   620  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   621  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   622  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   623  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   624  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   625  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   626                          
   627  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   628  0008                    VLT_CMP_NOWRITE:      equ 08h    ; MASK: Vcc below Flash Write level
   629  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   630  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   631  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   632                          
   633  00E5                    ADC0_TR:      equ 0E5h          ; ADC Column 0 Trim Register
   634  00E6                    ADC1_TR:      equ 0E6h          ; ADC Column 1 Trim Register
   635                          
   636  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   637  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   638  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   639  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   640                          
   641  00FA                    FLS_PR1:      equ 0FAh          ; Flash Program Register 1                 (RW)
   642  0003                    FLS_PR1_BANK:         equ 03h    ; MASK: Select Active Flash Bank
   643                          
   644  00FD                    DAC_CR0:       equ 0FDh          ; Analog Mux DAC Control Register 0
   645  00DC                    DAC_CR1:       equ 0DCh          ; Analog Mux DAC Control Register 1
   646  0008                    DAC_CR_IRANGE:        equ 08h    ; MASK: Sets the DAC Range low or high
   647  0006                    DAC_CR_OSCMODE:       equ 06h    ; MASK: Defines the reset mode for AMux
   648  0001                    DAC_CR_ENABLE:        equ 01h    ; MASK: Enable/Disable DAC function
   649                          
   650                          ;------------------------------------------------
   651                          ;  I2C Control Registers
   652                          ;------------------------------------------------
   653                          
   654  00AD                    I2C_ADDR:    equ 0ADh          ; I2C Address Register (RW)
   655                          
   656                          ;------------------------------------------------------
   657                          ;  Neon Analog Registers
   658                          ;------------------------------------------------------
   659  0053                    VDAC50CR0:		equ 53h			; V DAC5 control 0				(RW)
   660  0057                    VDAC51CR0:		equ 57h			; V DAC5 control 1				(RW)
   661  00A8                    ADC_CR0:		equ A8h			; ADC control 0					(RW)
   662  00A9                    ADC_CR1:		equ A9h			; ADC control 1					(RW)
   663  00AA                    ADC_CR2:		equ AAh			; ADC control 2					(RW)
   664  00AB                    ADC_CR3TRIM:	equ ABh			; ADC control 3					(RW)
   665  00AC                    ADC_CR4:		equ ACh			; ADC control 4					(RW)
   666  00E7                    VDAC_TRIM:		equ E7h			; V DAC trim					(RW)
   667                          
   668                          ;------------------------------------------------------
   669                          ;  Neon Current Sense CMP Registers
   670                          ;------------------------------------------------------
   671  0050                    CMP0CR1:		equ 50h			; CMP0 control 1				(RW)
   672  0051                    CMP0CR2:		equ 51h			; CMP0 control 2				(RW)
   673  0054                    CMP1CR1:		equ 54h			; CMP1 control 1				(RW)
   674  0055                    CMP1CR2:		equ 55h			; CMP1 control 2				(RW)
   675  0058                    CSCMPCR0:		equ 58h			; CSCMP control 0				(RW)
   676  0059                    CSCMPGOEN:		equ 59h			; CSCMO global out enable		(RW)
   677  005A                    CSLUTCR0:		equ 5Ah			; CSLUT control 0				(RW)
   678  005B                    CMPCOLMUX:		equ 5Bh			; CMP Column Mux				(RW)
   679  005C                    CMPPWMCR:		equ 5Ch			; CMP PWM control				(RW)
   680  005D                    CMPFLTCR:		equ 5Dh			; CMP filter control			(RW)
   681  005E                    CMPCLK1:		equ 5Eh			; CMP clock 1					(RW)
   682  005F                    CMPCLK0:		equ 5Fh			; CMP clock 0					(RW)
   683                          
   684                          ;------------------------------------------------------
   685                          ;  Neon Real Time Clock Registers
   686                          ;------------------------------------------------------
   687  00A4                    RTCH:			equ A4h			; Real time current hour		(RW)
   688  00A5                    RTCM:			equ A5h			; Real time current minute		(RW)
   689  00A6                    RTCS:			equ A6h			; Real time current second		(RW)
   690  00A7                    RTCCR:			equ A7h			; Real time clock control		(RW)
   691                          
   692                          ;------------------------------------------------------
   693                          ;  Analog MUX Config Registers
   694                          ;------------------------------------------------------
   695                          
   696  006A                    AMUX_CFG1:			equ 6Ah  ; Analog MUX Configuration 1
   697  0020                    AMUX_CFG1_GOINVR:	equ 20h  ;
   698  0010                    AMUX_CFG1_GOINVL:  	equ 10h	 ;
   699  000C                    AMUX_CFG1_AMUXMODR:	equ 0Ch	 ;
   700  0003                    AMUX_CFG1_AMUXMODL:	equ 03h	 ;
   701                          
   702                          ;;=============================================================================
   703                          ;;      M8C System Macros
   704                          ;;  These macros should be used when their functions are needed.
   705                          ;;=============================================================================
   706                          
   707                          ;----------------------------------------------------
   708                          ;  Swapping Register Banks
   709                          ;----------------------------------------------------
   710                              macro M8C_SetBank0
   711                              and   F, ~FLAG_XIO_MASK
   712  3C51                        endm
   713                          
   714                              macro M8C_SetBank1
   715                              or    F, FLAG_XIO_MASK
   716  3C51                        endm
   717                          
   718                          ;----------------------------------------------------
   719                          ;  Global Interrupt Enable/Disable
   720                          ;----------------------------------------------------
   721                              macro M8C_EnableGInt
   722                              or    F, FLAG_GLOBAL_IE
   723  3C51                        endm
   724                          
   725                              macro M8C_DisableGInt
   726                              and   F, ~FLAG_GLOBAL_IE
   727  3C51                        endm
   728                          
   729                          ;----------------------------------------------------
   730                          ;  Enable/Disable Interrupt Mask
   731                          ;
   732                          ;  Use the following macros to enable/disable
   733                          ;  bits in the Interrupt mask registers,
   734                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   735                          ;
   736                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   737                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   738                          ;
   739                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   740                          ;        and MASK is the bit set to enable or disable
   741                          ;----------------------------------------------------
   742                          ; Disable Interrupt Bit Mask(s)
   743                              macro M8C_DisableIntMask
   744                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   745  3C51                        endm
   746                          
   747                          ; Enable Interrupt Bit Mask(s)
   748                              macro M8C_EnableIntMask
   749                              or    reg[@0], @1               ; enable specified interrupt enable bit
   750  3C51                        endm
   751                          
   752                          ;----------------------------------------------------
   753                          ;  Clear Posted Interrupt Flag Mask
   754                          ;
   755                          ;  Use the following macros to clear the
   756                          ;  bits in the Interrupt Clear registers,
   757                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   758                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   759                          ;
   760                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   761                          ;        and MASK is the bit set to enable or disable
   762                          ;----------------------------------------------------
   763                              macro M8C_ClearIntFlag
   764                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   765  3C51                        endm
   766                          
   767                          ;----------------------------------------------------
   768                          ;  Power-On Reset & WatchDog Timer Functions
   769                          ;----------------------------------------------------
   770                              macro M8C_EnableWatchDog
   771                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   772  3C51                        endm
   773                          
   774                              macro M8C_ClearWDT
   775                              mov   reg[RES_WDT], 00h
   776  3C51                        endm
   777                          
   778                              macro M8C_ClearWDTAndSleep
   779                              mov   reg[RES_WDT], 38h
   780  3C51                        endm
   781                          
   782                          ;----------------------------------------------------
   783                          ;  Sleep, CPU Stop & Software Reset
   784                          ;----------------------------------------------------
   785                              macro M8C_Sleep
   786                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   787                              ; The next instruction to be executed depends on the state of the
   788                              ; various interrupt enable bits. If some interrupts are enabled
   789                              ; and the global interrupts are disabled, the next instruction will
   790                              ; be the one that follows the invocation of this macro. If global
   791                              ; interrupts are also enabled then the next instruction will be
   792                              ; from the interrupt vector table. If no interrupts are enabled
   793                              ; then the CPU sleeps forever.
   794  3C51                        endm
   795                          
   796                              macro M8C_Stop
   797                              ; In general, you probably don't want to do this, but here's how:
   798                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   799                              ; Next instruction to be executed is located in the interrupt
   800                              ; vector table entry for Power-On Reset.
   801  3C51                        endm
   802                          
   803                              macro M8C_Reset
   804                              ; Restore CPU to the power-on reset state.
   805                              mov A, 0
   806                              SSC
   807                              ; Next non-supervisor instruction will be at interrupt vector 0.
   808  3C51                        endm
   809                          
   810                          ;----------------------------------------------------
   811                          ; ImageCraft Code Compressor Actions
   812                          ;----------------------------------------------------
   813                              ; Suspend Code Compressor
   814                              ; Must not span a RET or RETI instruction
   815                              ; without resuming code compression
   816                              macro Suspend_CodeCompressor
   817                              or   F, 0
   818  3C51                        endm
   819                          
   820                              ; Resume Code Compression
   821                              macro Resume_CodeCompressor
   822                              add  SP, 0
   823                              endm
      + 3C51                    
      + 3C51                    ; end of file m8c.inc
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;
     4                          ;;       FILENAME: Memory.inc
     5                          ;;
     6                          ;;    DESCRIPTION: Memory Model and Stack Parameter Definitions for 
     7                          ;;                 CY8C22045 PSoC devices.
     8                          ;;
     9                          ;;  LAST MODIFIED: August 17, 2004
    10                          ;;
    11                          ;;-----------------------------------------------------------------------------
    12                          ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
    13                          ;;*****************************************************************************
    14                          ;;*****************************************************************************
    15                          ;
    16                          ;
    17                          ;  ******** Define Memory Model and Stack parameters ********
    18                          ;
    19  0001                    IMAGECRAFT: equ 1   
    20  0002                    HITECH: equ 2   
    21  0002                    TOOLCHAIN: equ HITECH   
    22  0001                    SYSTEM_LARGE_MEMORY_MODEL: equ 1   
    23  0000                    SYSTEM_SMALL_MEMORY_MODEL: equ 0   
    24  0003                    SYSTEM_STACK_PAGE: equ 3   
    25  0000                    SYSTEM_STACK_PAGE_OFFSET: equ 0   
    26  0002                    SYSTEM_TOOLS: equ 2   
    27  0000                    SYSTEM_IDXPG_TRACKS_STK_PP: equ 0   
    28  0001                    SYSTEM_IDXPG_TRACKS_IDX_PP: equ 1   
    29  0000                    SYSTEM_MULTIPAGE_STACK: equ 0 
    30                          
    31                          
    32                          ;  ******* Function Class Definitions *******
    33                          ;
    34                          ;  These definitions are used to describe RAM access patterns. They provide
    35                          ;  documentation and they control prologue and epilogue macros that perform
    36                          ;  the necessary housekeeping functions for large memory model devices like
    37                          ;  the CY8C22045.
    38                          
    39  0001                    RAM_USE_CLASS_1:               equ 1   ; PUSH, POP & I/O access
    40  0002                    RAM_USE_CLASS_2:               equ 2   ; Indexed address mode on stack page
    41  0004                    RAM_USE_CLASS_3:               equ 4   ; Indexed address mode to any page
    42  0008                    RAM_USE_CLASS_4:               equ 8   ; Direct/Indirect address mode access
    43                          
    44                          ; ******* Hi Tech Specific *******
    45                          ; Turn on the expansion of all macros by default
    46                          IF (TOOLCHAIN & HITECH)
    47                          OPT EXPAND
    48                          ENDIF
    49                          ; ******* Page Pointer Manipulation Macros *******
    50                          ;
    51                          ;  ******* Page Pointer Manipulation Macros *******
    52                          ;
    53                          ;  Most of the following macros are conditionally compiled so they only
    54                          ;  produce code if the large memory model is selected.
    55                          
    56                             ;-----------------------------------------------
    57                             ;  Set Stack Page Macro
    58                             ;-----------------------------------------------
    59                             ;
    60                             ;  DESC: Modify STK_PP in the large or small memory Models.
    61                             ;
    62                             ; INPUT: Constant (e.g., SYSTEM_STACK_PAGE) that specifies the RAM page on
    63                             ;        which stack operations like PUSH and POP store and retrieve their
    64                             ;        data
    65                             ;
    66                             ;  COST: 8 instruction cycles (in LMM only)
    67                          
    68                             macro RAM_SETPAGE_STK( PG_NUMBER )
    69                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    70                                mov reg[STK_PP], @PG_NUMBER
    71                             ENDIF
    72  3C51                       endm
    73                          
    74                             ;-----------------------------------------------
    75                             ;  Set Current Page Macro
    76                             ;-----------------------------------------------
    77                             ;
    78                             ;  DESC: Modify CUR_PP in the large or small memory Models.
    79                             ;
    80                             ; INPUT: Constant value (e.g., >bFoo) for the RAM page number used in
    81                             ;        calculation of effective direct-mode address operands.
    82                             ;
    83                             ;  COST: 8 instruction cycles (in LMM only)
    84                          
    85                             macro RAM_SETPAGE_CUR( PG_NUMBER )
    86                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    87                                mov reg[CUR_PP], @PG_NUMBER
    88                             ENDIF
    89  3C51                       endm
    90                          
    91                             ;-----------------------------------------------
    92                             ;  Set Index Page Macro
    93                             ;-----------------------------------------------
    94                             ;
    95                             ;  DESC: Modify IDX_PP in the large or small emory Models.
    96                             ;
    97                             ; INPUT: Constant value (e.g., >caFoo) for the RAM page number used in
    98                             ;         calculation of effective index-mode address operands.
    99                             ;
   100                             ;  COST: 8 instruction cycles (in LMM only)
   101                          
   102                             macro RAM_SETPAGE_IDX( PG_NUMBER )
   103                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   104                                mov reg[IDX_PP], @PG_NUMBER
   105                             ENDIF
   106  3C51                       endm
   107                          
   108                             ;-----------------------------------------------
   109                             ;  Set MVI Read Page Macro
   110                             ;-----------------------------------------------
   111                             ;
   112                             ;  DESC: Modify MVR_PP in the large or small memory Models.
   113                             ;
   114                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   115                             ;        calculation of indirect address operands used in the
   116                             ;        "mvi A, [pFoo]" instructions.
   117                             ;
   118                             ;  COST: 8 instruction cycles (in LMM only)
   119                          
   120                             macro RAM_SETPAGE_MVR( PG_NUMBER )
   121                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   122                                mov reg[MVR_PP], @PG_NUMBER
   123                             ENDIF
   124  3C51                       endm
   125                          
   126                             ;-----------------------------------------------
   127                             ;  Set MVI Write Page Macro
   128                             ;-----------------------------------------------
   129                             ;
   130                             ;  DESC: Modify MVW_PP in the large or small memory Models.
   131                             ;
   132                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   133                             ;        calculation of indirect address operands used in the
   134                             ;        "mvi [pFoo], A" instructions.
   135                             ;
   136                             ;  COST: 8 instruction cycles (in LMM only)
   137                          
   138                             macro RAM_SETPAGE_MVW( PG_NUMBER )
   139                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   140                                mov reg[MVW_PP], @PG_NUMBER
   141                             ENDIF
   142  3C51                       endm
   143                          
   144                             ;-----------------------------------------------
   145                             ;  Force Index Page Pointer to Stack Page
   146                             ;-----------------------------------------------
   147                             ;
   148                             ;  DESC: Map index-mode operands onto the stack page by modifying IDX_PP.
   149                             ;        See also RAM_LOCK_INDEX_TO_STACKPAGE.
   150                             ;
   151                             ; INPUT: None
   152                             ;
   153                             ;  COST: 8 instruction cycles (in LMM only)
   154                          
   155                             macro RAM_SETPAGE_IDX2STK
   156                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   157                                IF ( SYSTEM_MULTIPAGE_STACK )
   158                                   mov   A, reg[STK_PP]
   159                                   mov   reg[IDX_PP], A
   160                                ELSE
   161                                   RAM_SETPAGE_IDX SYSTEM_STACK_PAGE
   162                                ENDIF
   163                             ENDIF
   164  3C51                       endm
   165                          
   166                             ;-----------------------------------------------
   167                             ;  Change Memory Mode
   168                             ;-----------------------------------------------
   169                             ;
   170                             ;  DESC: Modify FLAG_PAGEMODE bits in the large and small memory Models.
   171                             ;
   172                             ; INPUT: Constant value for PGMODE bitfield of CPU Flag register, F.
   173                             ;        See FLAG_PGMODE_{x} constants in M8C.INC.
   174                             ;
   175                             ;  COST: 8 instruction cycles (in LMM only)
   176                          
   177                             macro RAM_CHANGE_PAGE_MODE( MODE )
   178                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   179                                and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
   180                                or    F,  FLAG_PGMODE_MASK & @MODE
   181                             ENDIF
   182  3C51                       endm
   183                          
   184                             ;-----------------------------------------------
   185                             ;  Set Large Memory Model Native Paging Mode
   186                             ;-----------------------------------------------
   187                             ;
   188                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   189                             ;        paging mode *IFF* a simple "OR" is guaranteed to work---for
   190                             ;        example, in an ISR, when the PGMODE bits have been cleared
   191                             ;        to zero. If a simple "OR" is not guaranteed to work, use
   192                             ;        the slower RAM_RESTORE_NATIVE_PAGING instead.
   193                             ;
   194                             ; INPUT: none
   195                             ;
   196                             ;  COST: 4 instruction cycles (in LMM only)
   197                          
   198                             macro RAM_SET_NATIVE_PAGING
   199                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   200                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   201                                or    F,  FLAG_PGMODE_11b            ; LMM w/ IndexPage<==>StackPage
   202                             ENDIF ;  PGMODE LOCKED
   203                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   204                                or    F,  FLAG_PGMODE_10b            ; LMM with independent IndexPage
   205                             ENDIF ; PGMODE FREE
   206                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   207  3C51                       endm
   208                          
   209                             ;-----------------------------------------------
   210                             ; Restore Large Memory Model Native Paging Mode
   211                             ;-----------------------------------------------
   212                             ;
   213                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   214                             ;        paging mode. Always works because it clears the PGMODE bits
   215                             ;        before OR-ing in the new ones. See RAM_RESTORE_NATIVE_PAGING
   216                             ;        for a faster method.
   217                             ;
   218                             ; INPUT: none
   219                             ;
   220                             ;  COST: 8 instruction cycles (in LMM only)
   221                          
   222                             macro RAM_RESTORE_NATIVE_PAGING
   223                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   224                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   225                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_11b ; LMM w/ IndexPage<==>StackPage
   226                             ENDIF ;  PGMODE LOCKED
   227                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   228                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b ; LMM with independent IndexPage
   229                             ENDIF ; PGMODE FREE
   230                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   231  3C51                       endm
   232                          
   233                             ;-----------------------------------------------
   234                             ; Force indexed addr mode operands to Stack Pg
   235                             ;-----------------------------------------------
   236                             ;
   237                             ;  DESC: Force instructions that use indexed address mode to reference the
   238                             ;        stack page (as defined by STK_PP). This macro sets the "Indexed
   239                             ;        Stack Mode" bit (LSB) of the PGMODE bit field in the CPU Flag
   240                             ;        register, F. (See also RAM_SETPAGE_IDX2STK, above.)
   241                             ;
   242                             ; INPUT: none
   243                             ;
   244                             ;  COST: 4 instruction cycles (in LMM only)
   245                          
   246                             macro RAM_X_POINTS_TO_STACKPAGE
   247                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   248                                or   F, FLAG_PGMODE_01b
   249                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   250  3C51                       endm
   251                          
   252                             ;-----------------------------------------------
   253                             ;  Force indexed addr mode operands to Index Pg
   254                             ;-----------------------------------------------
   255                             ;
   256                             ;  DESC: Permit instructions that use indexed address mode to reference page
   257                             ;        zero or the page pointed to by the IDX_PP register, depending on the
   258                             ;        setting of the MSb (or "Direct Page Mode" bit) of the PGMODE bits
   259                             ;        in the CPU Flag register, F. (This macro clears the PGMODE LSb.)
   260                             ;
   261                             ; INPUT: none
   262                             ;
   263                             ;  COST: 4 instruction cycles (in LMM only)
   264                          
   265                             macro RAM_X_POINTS_TO_INDEXPAGE
   266                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   267                                and  F, ~FLAG_PGMODE_01b
   268                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   269  3C51                       endm
   270                          
   271                             ;-----------------------------------------------
   272                             ;  Function Prologue
   273                             ;-----------------------------------------------
   274                             ;
   275                             ;  Prologue for functions that run in the LMM and SMM.
   276                             ;
   277                          
   278                             macro RAM_PROLOGUE( ACTUAL_CLASS )
   279                          
   280                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   281                             ; Nothing to do
   282                             ENDIF ; RAM_USE_CLASS_1
   283                          
   284                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   285                                IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   286                                   RAM_X_POINTS_TO_STACKPAGE         ; exit native paging mode!
   287                                ENDIF
   288                             ENDIF ; RAM_USE_CLASS_2
   289                          
   290                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   291                                IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   292                                   RAM_X_POINTS_TO_INDEXPAGE         ; exit native paging mode!
   293                                ENDIF
   294                             ENDIF ; RAM_USE_CLASS_3
   295                          
   296                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   297                             ; Nothing to do
   298                             ENDIF ; RAM_USE_CLASS_4
   299                          
   300  3C51                       endm
   301                          
   302                             ;-----------------------------------------------
   303                             ;  Function Epilogue
   304                             ;-----------------------------------------------
   305                             ;
   306                             ;  Prologue for functions that run in the LMM and SMM.
   307                             ;
   308                          
   309                             macro RAM_EPILOGUE( ACTUAL_CLASS )
   310                          
   311                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   312                             ; Nothing to do
   313                             ENDIF ; RAM_USE_CLASS_1
   314                          
   315                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   316                                RAM_RESTORE_NATIVE_PAGING
   317                             ENDIF ; RAM_USE_CLASS_2
   318                          
   319                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   320                                RAM_RESTORE_NATIVE_PAGING
   321                             ENDIF ; RAM_USE_CLASS_3
   322                          
   323                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   324                             ; Nothing to do
   325                             ENDIF ; RAM_USE_CLASS_4
   326                          
   327  3C51                       endm
   328                          
   329                             ;-----------------------------------------------
   330                             ;  Preserve Register
   331                             ;-----------------------------------------------
   332                             ;
   333                             ;  DESC: Preserve a register value on the stack
   334                             ;
   335                             ; INPUT: Name or address of register in I/O Space
   336                             ;        The I/O bank is an implicit parameter. That is, this function will
   337                             ;        Access the I/O bank currently specified by the CPU Flag register.
   338                             ;
   339                             ;  USES: CPU 'A' register
   340                             ;
   341                             ;  COST: 9 instruction cycles
   342                          
   343                             macro REG_PRESERVE( IOReg )
   344                             mov   A, reg[ @IOReg ]
   345                             push  A
   346  3C51                       endm
   347                          
   348                             ;-----------------------------------------------
   349                             ;  Restore Register
   350                             ;-----------------------------------------------
   351                             ;
   352                             ;  DESC: Restore a register value from the stack
   353                             ;
   354                             ; INPUT: Name or address of register in I/O Space
   355                             ;        The I/O bank is an implicit parameter. That is, this function will
   356                             ;        Access the I/O bank currently specified by the CPU Flag register.
   357                             ;
   358                             ;  USES: CPU 'A' register
   359                             ;
   360                             ;  COST: 10 instruction cycles
   361                          
   362                             macro REG_RESTORE( IOReg )
   363                             pop   A
   364                             mov   reg[ @IOReg ], A
   365  3C51                       endm
   366                          
   367                             ;-----------------------------------------------
   368                             ;  Preserve Volatile Page Pointer Registers
   369                             ;-----------------------------------------------
   370                             ;
   371                             ;  DESC: Invoked by ISRs before switching to the LMM mode and calling
   372                             ;        functions that require on it.
   373                             ;
   374                             ; INPUT: none
   375                             ;
   376                             ;  USES: CPU 'A' register
   377                             ;
   378                             ;  COST: 45 instruction cycles (in LMM only)
   379                          
   380                             macro ISR_PRESERVE_PAGE_POINTERS
   381                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   382                                REG_PRESERVE CUR_PP
   383                                REG_PRESERVE IDX_PP
   384                                REG_PRESERVE MVR_PP
   385                                REG_PRESERVE MVW_PP
   386                             ENDIF
   387  3C51                       endm
   388                          
   389                             ;-----------------------------------------------
   390                             ;  Restore Volatile Page Pointer Registers
   391                             ;-----------------------------------------------
   392                             ;
   393                             ;  DESC: Undo for RAM_PRESERVE_PAGE_POINTERS macro. Invoked by ISRs after
   394                             ;        calling functions that run in the LMM mode and before executing
   395                             ;        the RETI instruction.
   396                             ;
   397                             ; INPUT: none
   398                             ;
   399                             ;  USES: CPU 'A' register
   400                             ;
   401                             ;  COST: 50 instruction cycles (in LMM only)
   402                          
   403                             macro ISR_RESTORE_PAGE_POINTERS
   404                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   405                                REG_RESTORE MVW_PP
   406                                REG_RESTORE MVR_PP
   407                                REG_RESTORE IDX_PP
   408                                REG_RESTORE CUR_PP
   409                             ENDIF
   410                             endm
      + 3C51                    
      + 3C51                    ; end of file Memory.inc
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  FILENAME:   UART_Sensor.inc
     4                          ;;  Version: 5.3, Updated on 2013/5/19 at 10:44:49
     5                          ;;  Generated by PSoC Designer 5.4.2946
     6                          ;;
     7                          ;;  DESCRIPTION:  Assembler declarations for the UART user module.
     8                          ;;-----------------------------------------------------------------------------
     9                          ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
    10                          ;;*****************************************************************************
    11                          ;;*****************************************************************************
    12                          
    13                          ;--------------------------------------------------
    14                          ; Constants for UART_Sensor API's
    15                          ;--------------------------------------------------
    16                          
    17                          ;mask value for global int reg bit for TX instance
    18  0004                    UART_Sensor_TX_INT_MASK:                     equ 0x04
    19  00E1                    UART_Sensor_TX_INT_REG:                      equ 0x0e1  ;TX interrupt address
    20  0008                    UART_Sensor_RX_INT_MASK:                     equ 0x08  ;mask value for global int reg bit for RX ins
                                tance
    21  00E1                    UART_Sensor_RX_INT_REG:                      equ 0x0e1  ;RX interrupt address
    22                          
    23  0000                    UART_Sensor_RXBUF_ENABLE:                    equ 0
    24                          
    25                          ; Interrupt control masks
    26  0001                    UART_Sensor_ENABLE_RX_INT:                   equ 0x01
    27  0000                    UART_Sensor_DISABLE_RX_INT:                  equ 0x00
    28  0002                    UART_Sensor_ENABLE_TX_INT:                   equ 0x02
    29  0000                    UART_Sensor_DISABLE_TX_INT:                  equ 0x00
    30                          
    31  0000                    UART_Sensor_INT_MODE_TX_REG_EMPTY:           equ 0x00
    32  0001                    UART_Sensor_INT_MODE_TX_COMPLETE:            equ 0x01
    33                          
    34  0020                    UART_Sensor_RX_IGNORE_BELOW:                 equ 0x20
    35  0010                    UART_Sensor_RX_BUFFER_SIZE:                  equ 0x10
    36  000D                    UART_Sensor_CMD_TERM:                        equ 0xd
    37  0020                    UART_Sensor_DELIMITER:                       equ 0x20
    38  0000                    UART_Sensor_BACKSPACE_ENABLE:                equ 0x0
    39                          
    40                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    41                          ;       WARNING WARNING WARNING
    42                          ; The following equates are for backwards
    43                          ; compatibility only and should not be used
    44                          ; for new designs.
    45                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    46                          
    47                          ;------------------------------------
    48                          ;  Parity masks
    49                          ;------------------------------------
    50  0000                    UART_PARITY_NONE:       equ   00h
    51  0002                    UART_PARITY_EVEN:       equ   02h
    52  0006                    UART_PARITY_ODD:        equ   06h
    53                          
    54                          ;------------------------------------
    55                          ;  TX Status Register masks
    56                          ;------------------------------------
    57  0020                    UART_TX_COMPLETE:       equ   20h
    58  0010                    UART_TX_BUFFER_EMPTY:   equ   10h
    59                          
    60                          ;------------------------------------
    61                          ;  RX Status Register masks
    62                          ;------------------------------------
    63  0010                    UART_RX_ACTIVE:         equ   10h
    64  0008                    UART_RX_COMPLETE:       equ   08h
    65  0080                    UART_RX_PARITY_ERROR:   equ   80h
    66  0040                    UART_RX_OVERRUN_ERROR:  equ   40h
    67  0020                    UART_RX_FRAMING_ERROR:  equ   20h
    68  00E0                    UART_RX_NO_ERROR:       equ   E0h
    69                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    70                          ;             END WARNING
    71                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    72                          
    73                          
    74                          
    75                          ;------------------------------------
    76                          ;  Parity masks
    77                          ;------------------------------------
    78  0000                    UART_Sensor_PARITY_NONE:                equ   00h
    79  0002                    UART_Sensor_PARITY_EVEN:                equ   02h
    80  0006                    UART_Sensor_PARITY_ODD:                 equ   06h
    81                          
    82                          ;------------------------------------
    83                          ;  TX Status Register masks
    84                          ;------------------------------------
    85  0020                    UART_Sensor_TX_COMPLETE:                equ   20h
    86  0010                    UART_Sensor_TX_BUFFER_EMPTY:            equ   10h
    87                          
    88                          ;------------------------------------
    89                          ;  RX Status Register masks
    90                          ;------------------------------------
    91  0010                    UART_Sensor_RX_ACTIVE:                  equ   10h
    92  0008                    UART_Sensor_RX_COMPLETE:                equ   08h
    93  0008                    UART_Sensor_RX_REG_FULL:                equ   08h
    94  0080                    UART_Sensor_RX_PARITY_ERROR:            equ   80h
    95  0040                    UART_Sensor_RX_OVERRUN_ERROR:           equ   40h
    96  0020                    UART_Sensor_RX_FRAMING_ERROR:           equ   20h
    97  00E0                    UART_Sensor_RX_ERROR:                   equ   E0h
    98  0001                    UART_Sensor_RX_ENABLE:                  equ   01h
    99                          
   100  00F0                    UART_Sensor_RX_BUF_ERROR:               equ   F0h  ; Mask for any Rx that may occur.
   101  0010                    UART_Sensor_RX_BUF_OVERRUN:             equ   10h  ; This indicates the software buffer has
   102                                                                                  ; been over run.
   103  0001                    UART_Sensor_RX_BUF_CMDTERM:             equ   01h  ; Command terminator has been received.
   104                          
   105  0001                    UART_Sensor_RX_NO_DATA:                 equ   01h
   106  00E0                    UART_Sensor_RX_NO_ERROR:                equ   E0h
   107                          
   108                          
   109                          ;--------------------------------------------------
   110                          ; Registers Address Constants for UART_Sensor
   111                          ;--------------------------------------------------
   112                          ;---------------------------------
   113                          ;  Registers used by TX
   114                          ;---------------------------------
   115  002B                    UART_Sensor_TX_CONTROL_REG: equ 2bh            ; Control register
   116  0028                    UART_Sensor_TX_SHIFT_REG:   equ 28h               ; TX Shift Register register
   117  0029                    UART_Sensor_TX_BUFFER_REG:  equ 29h               ; TX Buffer Register
   118  0028                    UART_Sensor_TX_FUNC_REG:    equ 28h     ; Function register
   119  0029                    UART_Sensor_TX_INPUT_REG:   equ 29h            ; Input register
   120  002A                    UART_Sensor_TX_OUTPUT_REG:  equ 2ah           ; Output register
   121                          
   122                          ;---------------------------------
   123                          ;  Registers used by RX
   124                          ;---------------------------------
   125  002F                    UART_Sensor_RX_CONTROL_REG: equ 2fh            ; Control register
   126  002C                    UART_Sensor_RX_SHIFT_REG:   equ 2ch               ; RX Shift Register register
   127  002E                    UART_Sensor_RX_BUFFER_REG:  equ 2eh               ; RX Buffer Register
   128  002C                    UART_Sensor_RX_FUNC_REG:    equ 2ch     ; Function register
   129  002D                    UART_Sensor_RX_INPUT_REG:   equ 2dh            ; Input register
   130  002E                    UART_Sensor_RX_OUTPUT_REG:  equ 2eh           ; Output register
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  Filename:   UART_Sensor.asm
     4                          ;;  Version: 5.3, Updated on 2013/5/19 at 10:44:49
     5                          ;;  Generated by PSoC Designer 5.4.2946
     6                          ;;
     7                          ;;  DESCRIPTION:  UART User Module software implementation file for the
     8                          ;;                22/24/25/26/27xxx families.
     9                          ;;
    10                          ;;
    11                          ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
    12                          ;;        arguments and observe the associated "Registers are volatile" policy.
    13                          ;;        This means it is the caller's responsibility to preserve any values
    14                          ;;        in the X and A registers that are still needed after the API functions
    15                          ;;        returns. For Large Memory Model devices it is also the caller's 
    16                          ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
    17                          ;;        MVW_PP registers. Even though some of these registers may not be modified
    18                          ;;        now, there is no guarantee that will remain the case in future releases.
    19                          ;;-----------------------------------------------------------------------------
    20                          ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
    21                          ;;*****************************************************************************
    22                          ;;*****************************************************************************
    23                          
    24                          
    25                          include "m8c.inc"
    26                          include "memory.inc"
    27                          include "UART_Sensor.inc"
    28                          
    29                          ;-----------------------------------------------
    30                          ;  Global Symbols
    31                          ;-----------------------------------------------
    32                          ;-------------------------------------------------------------------
    33                          ;  Declare the functions global for both assembler and C compiler.
    34                          ;
    35                          ;  Note that there are two names for each API. First name is
    36                          ;  assembler reference. Name with underscore is name refence for
    37                          ;  C compiler.  Calling function in C source code does not require
    38                          ;  the underscore.
    39                          ;-------------------------------------------------------------------
    40                          export  UART_Sensor_SetTxIntMode
    41                          export _UART_Sensor_SetTxIntMode
    42                          export  UART_Sensor_EnableInt
    43                          export _UART_Sensor_EnableInt
    44                          export  UART_Sensor_DisableInt
    45                          export _UART_Sensor_DisableInt
    46                          
    47                          export  UART_Sensor_Start
    48                          export _UART_Sensor_Start
    49                          export  UART_Sensor_Stop
    50                          export _UART_Sensor_Stop
    51                          export  UART_Sensor_SendData
    52                          export _UART_Sensor_SendData
    53                          export  UART_Sensor_bReadTxStatus
    54                          export _UART_Sensor_bReadTxStatus
    55                          export  UART_Sensor_bReadRxData
    56                          export _UART_Sensor_bReadRxData
    57                          export  UART_Sensor_bReadRxStatus
    58                          export _UART_Sensor_bReadRxStatus
    59                          
    60                          export  UART_Sensor_IntCntl
    61                          export _UART_Sensor_IntCntl
    62                          
    63                          export  UART_Sensor_TxIntMode
    64                          export _UART_Sensor_TxIntMode
    65                          
    66                          export  UART_Sensor_PutSHexByte
    67                          export _UART_Sensor_PutSHexByte
    68                          export  UART_Sensor_PutSHexInt
    69                          export _UART_Sensor_PutSHexInt
    70                          
    71                          export  UART_Sensor_CPutString
    72                          export _UART_Sensor_CPutString
    73                          export  UART_Sensor_PutString
    74                          export _UART_Sensor_PutString
    75                          export  UART_Sensor_PutChar
    76                          export _UART_Sensor_PutChar
    77                          export  UART_Sensor_Write
    78                          export _UART_Sensor_Write
    79                          export  UART_Sensor_CWrite
    80                          export _UART_Sensor_CWrite
    81                          
    82                          export  UART_Sensor_cGetChar
    83                          export _UART_Sensor_cGetChar
    84                          export  UART_Sensor_cReadChar
    85                          export _UART_Sensor_cReadChar
    86                          export  UART_Sensor_iReadChar
    87                          export _UART_Sensor_iReadChar
    88                          export  UART_Sensor_PutCRLF
    89                          export _UART_Sensor_PutCRLF
    90                          
    91                          IF (UART_Sensor_RXBUF_ENABLE)
    92                          export  UART_Sensor_CmdReset
    93                          export _UART_Sensor_CmdReset
    94                          export  UART_Sensor_bCmdCheck
    95                          export _UART_Sensor_bCmdCheck
    96                          export  UART_Sensor_bCmdLength
    97                          export _UART_Sensor_bCmdLength
    98                          export  UART_Sensor_bErrCheck
    99                          export _UART_Sensor_bErrCheck
   100                          
   101                          export  UART_Sensor_szGetParam
   102                          export _UART_Sensor_szGetParam
   103                          export  UART_Sensor_szGetRestOfParams
   104                          export _UART_Sensor_szGetRestOfParams
   105                          ENDIF
   106                          
   107                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   108                          ; WARNING WARNING WARNING
   109                          ; The following exports are for backwards compatibility only and should
   110                          ; not be used for new designs. They may be eliminated in a future release.
   111                          ; Their status is "NO FURTHER MAINTENANCE". 
   112                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   113                          export  bUART_Sensor_ReadTxStatus
   114                          export _bUART_Sensor_ReadTxStatus
   115                          export  bUART_Sensor_ReadRxData
   116                          export _bUART_Sensor_ReadRxData
   117                          export  bUART_Sensor_ReadRxStatus
   118                          export _bUART_Sensor_ReadRxStatus
   119                          	
   120                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   121                          ;             END WARNING
   122                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   123                          
   124                          ;-----------------------------------------------
   125                          ; Variable Allocation
   126                          ;-----------------------------------------------
   127                          IF (UART_Sensor_RXBUF_ENABLE)
   128                              
   129                          area UART_Sensor_RAM (RAM, REL, CON)
   130                              
   131                           ptrParam:   BLK  1
   132                          
   133                          ENDIF
   134                          
   135                          area text (ROM,REL)
   136                          
   137                          ;-----------------------------------------------
   138                          ;  EQUATES
   139                          ;-----------------------------------------------
   140  0001                    bfCONTROL_REG_START_BIT:        equ    1    ; Control register start bit
   141  0010                    bfFUNCTION_REG_TX_INT_MODE_BIT: equ 0x10    ; the TX Int Mode bit
   142                          
   143                          area UserModules (ROM, REL, CON)
   144                          
   145                          ;=============================================================================
   146                          ;=============================================================================
   147                          ;
   148                          ;     Low-Level Commands
   149                          ;
   150                          ;=============================================================================
   151                          ;=============================================================================
   152                          
   153                          .SECTION
   154                          ;-----------------------------------------------------------------------------
   155                          ;  FUNCTION NAME: UART_Sensor_EnableInt
   156                          ;
   157                          ;  DESCRIPTION:
   158                          ;     Enables this UART's interrupt by setting the interrupt enable mask
   159                          ;     bit associated with this User Module. Remember to call the global
   160                          ;     interrupt enable function by using the macro: M8C_EnableGInt.
   161                          ;-----------------------------------------------------------------------------
   162                          ;
   163                          ;  ARGUMENTS:
   164                          ;     none.
   165                          ;
   166                          ;  RETURNS:
   167                          ;     none.
   168                          ;
   169                          ;  SIDE EFFECTS:
   170                          ;    The A and X registers may be modified by this or future implementations
   171                          ;    of this function.  The same is true for all RAM page pointer registers in
   172                          ;    the Large Memory Model.  When necessary, it is the calling function's
   173                          ;    responsibility to perserve their values across calls to fastcall16 
   174                          ;    functions.
   175                          ;
   176  2F3C                     UART_Sensor_EnableInt:
   177  2F3C                    _UART_Sensor_EnableInt:
   178                             RAM_PROLOGUE RAM_USE_CLASS_1
   179  2F3C  43 E1 04             M8C_EnableIntMask UART_Sensor_TX_INT_REG, UART_Sensor_TX_INT_MASK
   180  2F3F  43 E1 08             M8C_EnableIntMask UART_Sensor_RX_INT_REG, UART_Sensor_RX_INT_MASK
   181                             RAM_EPILOGUE RAM_USE_CLASS_1
   182  2F42  7F                   ret
   183                          .ENDSECTION
   184                          
   185                              
   186                          .SECTION
   187                          ;-----------------------------------------------------------------------------
   188                          ;  FUNCTION NAME: UART_Sensor_DisableInt
   189                          ;
   190                          ;  DESCRIPTION:
   191                          ;     Disables this UART's interrupt by clearing the interrupt enable mask bit
   192                          ;     associated with this User Module.
   193                          ;-----------------------------------------------------------------------------
   194                          ;
   195                          ;  ARGUMENTS:
   196                          ;     none.
   197                          ;
   198                          ;  RETURNS:
   199                          ;     none.
   200                          ;
   201                          ;  SIDE EFFECTS:
   202                          ;    The A and X registers may be modified by this or future implementations
   203                          ;    of this function.  The same is true for all RAM page pointer registers in
   204                          ;    the Large Memory Model.  When necessary, it is the calling function's
   205                          ;    responsibility to perserve their values across calls to fastcall16 
   206                          ;    functions.
   207                          ;
   208  2F43                     UART_Sensor_DisableInt:
   209  2F43                    _UART_Sensor_DisableInt:
   210                             RAM_PROLOGUE RAM_USE_CLASS_1
   211  2F43  41 E1 FB             M8C_DisableIntMask UART_Sensor_TX_INT_REG, UART_Sensor_TX_INT_MASK
   212  2F46  41 E1 F7             M8C_DisableIntMask UART_Sensor_RX_INT_REG, UART_Sensor_RX_INT_MASK
   213                             RAM_EPILOGUE RAM_USE_CLASS_1
   214  2F49  7F                   ret
   215                          .ENDSECTION
   216                          
   217                          
   218                          .SECTION
   219                          ;-----------------------------------------------------------------------------
   220                          ;  FUNCTION NAME: UART_Sensor_SetTxIntMode(BYTE bTxIntMode)
   221                          ;
   222                          ;  DESCRIPTION:
   223                          ;     Sets the Tx Interrupt Mode bit in the Function Register.
   224                          ;-----------------------------------------------------------------------------
   225                          ;
   226                          ;  ARGUMENTS:
   227                          ;     BYTE bTxIntMode - The TX Interrupt mode setting. Use defined masks.
   228                          ;        Passed in the A register
   229                          ;
   230                          ;  RETURNS:
   231                          ;     none.
   232                          ;
   233                          ;  SIDE EFFECTS:
   234                          ;    The A and X registers may be modified by this or future implementations
   235                          ;    of this function.  The same is true for all RAM page pointer registers in
   236                          ;    the Large Memory Model.  When necessary, it is the calling function's
   237                          ;    responsibility to perserve their values across calls to fastcall16 
   238                          ;    functions.
   239                          ;
   240                          ;  THEORY of OPERATION OR PROCEDURE:
   241                          ;     Sets the TX interrupt mode bit to define whether the interrupt occurs
   242                          ;     on TX register empty or TX transmit complete
   243                          ;
   244  2F4A                     UART_Sensor_SetTxIntMode:
   245  2F4A                    _UART_Sensor_SetTxIntMode:
   246                             RAM_PROLOGUE RAM_USE_CLASS_1
   247  2F4A  71 10                M8C_SetBank1
   248  2F4C  21 01                and   A, UART_Sensor_INT_MODE_TX_COMPLETE
   249  2F4E  A007                 jz    .SetModeRegEmpty
   250  2F50  43 28 10             or    REG[UART_Sensor_TX_FUNC_REG], bfFUNCTION_REG_TX_INT_MODE_BIT
   251  2F53  70 EF                M8C_SetBank0
   252                             RAM_EPILOGUE RAM_USE_CLASS_1
   253  2F55  7F                   ret
   254                          
   255  2F56                    .SetModeRegEmpty:
   256  2F56  41 28 EF             and   REG[UART_Sensor_TX_FUNC_REG], ~bfFUNCTION_REG_TX_INT_MODE_BIT
   257  2F59  70 EF                M8C_SetBank0
   258                             RAM_EPILOGUE RAM_USE_CLASS_1
   259  2F5B  7F                   ret
   260                          .ENDSECTION
   261                          
   262                          
   263                          .SECTION
   264                          ;-----------------------------------------------------------------------------
   265                          ;  FUNCTION NAME: UART_Sensor_Start(BYTE bParity)
   266                          ;
   267                          ;  DESCRIPTION:
   268                          ;     Sets the start bit and parity in the Control register of this user module.
   269                          ;-----------------------------------------------------------------------------
   270                          ;
   271                          ;  ARGUMENTS:
   272                          ;     BYTE bParity - parity setting for the Transmitter and receiver. Use defined masks.
   273                          ;        Passed in the A register.
   274                          ;
   275                          ;  RETURNS:
   276                          ;     none.
   277                          ;
   278                          ;  SIDE EFFECTS:
   279                          ;    The A and X registers may be modified by this or future implementations
   280                          ;    of this function.  The same is true for all RAM page pointer registers in
   281                          ;    the Large Memory Model.  When necessary, it is the calling function's
   282                          ;    responsibility to perserve their values across calls to fastcall16 
   283                          ;    functions.
   284                          ;
   285  2F5C                     UART_Sensor_Start:
   286  2F5C                    _UART_Sensor_Start:
   287                             RAM_PROLOGUE RAM_USE_CLASS_1
   288                             ; Note, Proxy Class 4 only if receive buffer used; otherwise Proxy Class 1.
   289                          
   290  2F5C  29 01                or    A, bfCONTROL_REG_START_BIT
   291  2F5E  60 2B                mov   REG[UART_Sensor_TX_CONTROL_REG], A
   292  2F60  60 2F                mov   REG[UART_Sensor_RX_CONTROL_REG], A
   293                          IF ( UART_Sensor_RXBUF_ENABLE )
   294                             call  _UART_Sensor_CmdReset
   295                          ENDIF
   296                             RAM_EPILOGUE RAM_USE_CLASS_1
   297  2F62  7F                   ret
   298                          .ENDSECTION
   299                          
   300                          
   301                          .SECTION
   302                          ;-----------------------------------------------------------------------------
   303                          ;  FUNCTION NAME: UART_Sensor_Stop
   304                          ;
   305                          ;  DESCRIPTION:
   306                          ;     Disables UART operation.
   307                          ;-----------------------------------------------------------------------------
   308                          ;
   309                          ;  ARGUMENTS:
   310                          ;     none.
   311                          ;
   312                          ;  RETURNS:
   313                          ;     none.
   314                          ;
   315                          ;  SIDE EFFECTS:
   316                          ;    The A and X registers may be modified by this or future implementations
   317                          ;    of this function.  The same is true for all RAM page pointer registers in
   318                          ;    the Large Memory Model.  When necessary, it is the calling function's
   319                          ;    responsibility to perserve their values across calls to fastcall16 
   320                          ;    functions.
   321                          ;
   322  2F63                     UART_Sensor_Stop:
   323  2F63                    _UART_Sensor_Stop:
   324                             RAM_PROLOGUE RAM_USE_CLASS_1
   325  2F63  41 2B FE             and   REG[UART_Sensor_TX_CONTROL_REG], ~bfCONTROL_REG_START_BIT
   326  2F66  41 2F FE             and   REG[UART_Sensor_RX_CONTROL_REG], ~bfCONTROL_REG_START_BIT
   327                             RAM_EPILOGUE RAM_USE_CLASS_1
   328  2F69  7F                   ret
   329                          .ENDSECTION
   330                          
   331                          
   332                          .SECTION
   333                          ;-----------------------------------------------------------------------------
   334                          ;  FUNCTION NAME: UART_Sensor_SendData
   335                          ;
   336                          ;  DESCRIPTION:
   337                          ;     Initiates a transmission of data.
   338                          ;-----------------------------------------------------------------------------
   339                          ;
   340                          ;  ARGUMENTS:
   341                          ;     BYTE  TxData - data to transmit. PASSED in A register.
   342                          ;
   343                          ;  RETURNS:
   344                          ;     none.
   345                          ;
   346                          ;  SIDE EFFECTS:
   347                          ;    The A and X registers may be modified by this or future implementations
   348                          ;    of this function.  The same is true for all RAM page pointer registers in
   349                          ;    the Large Memory Model.  When necessary, it is the calling function's
   350                          ;    responsibility to perserve their values across calls to fastcall16 
   351                          ;    functions.
   352                          ;
   353  2F6A                     UART_Sensor_SendData:
   354  2F6A                    _UART_Sensor_SendData:
   355                             RAM_PROLOGUE RAM_USE_CLASS_1
   356  2F6A  60 29                mov REG[UART_Sensor_TX_BUFFER_REG], A
   357                             RAM_EPILOGUE RAM_USE_CLASS_1
   358  2F6C  7F                   ret
   359                          .ENDSECTION
   360                          
   361                          
   362                          .SECTION
   363                          ;-----------------------------------------------------------------------------
   364                          ;  FUNCTION NAME: UART_Sensor_bReadTxStatus
   365                          ;
   366                          ;  DESCRIPTION:
   367                          ;     Reads the Tx Status bits in the Control/Status register.
   368                          ;-----------------------------------------------------------------------------
   369                          ;
   370                          ;  ARGUMENTS:
   371                          ;     none.
   372                          ;
   373                          ;  RETURNS:
   374                          ;     BYTE  bTxStatus - transmit status data.  Use defined masks for detecting
   375                          ;           status bits (returned in A)
   376                          ;
   377                          ;  SIDE EFFECTS:
   378                          ;    The A and X registers may be modified by this or future implementations
   379                          ;    of this function.  The same is true for all RAM page pointer registers in
   380                          ;    the Large Memory Model.  When necessary, it is the calling function's
   381                          ;    responsibility to perserve their values across calls to fastcall16 
   382                          ;    functions.
   383                          ;
   384  2F6D                     UART_Sensor_bReadTxStatus:
   385  2F6D                    _UART_Sensor_bReadTxStatus:
   386  2F6D                     bUART_Sensor_ReadTxStatus:                      ; For backwards compatibility only
   387  2F6D                    _bUART_Sensor_ReadTxStatus:                      ; For backwards compatibility only
   388                             RAM_PROLOGUE RAM_USE_CLASS_1
   389  2F6D  5D 2B                mov A,  REG[UART_Sensor_TX_CONTROL_REG]
   390                             RAM_EPILOGUE RAM_USE_CLASS_1
   391  2F6F  7F                   ret
   392                          .ENDSECTION
   393                          
   394                          
   395                          .SECTION
   396                          ;-----------------------------------------------------------------------------
   397                          ;  FUNCTION NAME: UART_Sensor_bReadRxData
   398                          ;
   399                          ;  DESCRIPTION:
   400                          ;     Reads the RX buffer register.  Should check the status regiser to make
   401                          ;     sure data is valid.
   402                          ;-----------------------------------------------------------------------------
   403                          ;
   404                          ;  ARGUMENTS:
   405                          ;     none.
   406                          ;
   407                          ;  RETURNS:
   408                          ;     bRxData - returned in A.
   409                          ;
   410                          ;  SIDE EFFECTS:
   411                          ;    The A and X registers may be modified by this or future implementations
   412                          ;    of this function.  The same is true for all RAM page pointer registers in
   413                          ;    the Large Memory Model.  When necessary, it is the calling function's
   414                          ;    responsibility to perserve their values across calls to fastcall16 
   415                          ;    functions.
   416                          ;
   417  2F70                     UART_Sensor_bReadRxData:
   418  2F70                    _UART_Sensor_bReadRxData:
   419  2F70                     bUART_Sensor_ReadRxData:                        ; For backwards compatibility only
   420  2F70                    _bUART_Sensor_ReadRxData:                        ; For backwards compatibility only
   421                             RAM_PROLOGUE RAM_USE_CLASS_1
   422  2F70  5D 2E                mov A, REG[UART_Sensor_RX_BUFFER_REG]
   423                             RAM_EPILOGUE RAM_USE_CLASS_1
   424  2F72  7F                   ret
   425                          .ENDSECTION
   426                          
   427                          
   428                          .SECTION
   429                          ;-----------------------------------------------------------------------------
   430                          ;  FUNCTION NAME: UART_Sensor_bReadRxStatus
   431                          ;
   432                          ;  DESCRIPTION:
   433                          ;     Reads the RX Status bits in the Control/Status register.
   434                          ;-----------------------------------------------------------------------------
   435                          ;
   436                          ;  ARGUMENTS:
   437                          ;     none.
   438                          ;
   439                          ;  RETURNS:
   440                          ;     BYTE  bRXStatus - receive status data.  Use the following defined bits
   441                          ;                       masks: RX_COMPLETE and RX_BUFFER_EMPTY
   442                          ;           returned in A.
   443                          ;
   444                          ;  SIDE EFFECTS:
   445                          ;    The A and X registers may be modified by this or future implementations
   446                          ;    of this function.  The same is true for all RAM page pointer registers in
   447                          ;    the Large Memory Model.  When necessary, it is the calling function's
   448                          ;    responsibility to perserve their values across calls to fastcall16 
   449                          ;    functions.
   450                          ;
   451  2F73                     UART_Sensor_bReadRxStatus:
   452  2F73                    _UART_Sensor_bReadRxStatus:
   453  2F73                     bUART_Sensor_ReadRxStatus:                      ; For backwards compatibility only
   454  2F73                    _bUART_Sensor_ReadRxStatus:                      ; For backwards compatibility only
   455                             RAM_PROLOGUE RAM_USE_CLASS_1
   456  2F73  5D 2F                mov A,  REG[UART_Sensor_RX_CONTROL_REG]
   457                             RAM_EPILOGUE RAM_USE_CLASS_1
   458  2F75  7F                   ret
   459                          .ENDSECTION
   460                          
   461                          
   462                          .SECTION
   463                          ;-----------------------------------------------------------------------------
   464                          ;  FUNCTION NAME: UART_Sensor_TxIntMode
   465                          ;
   466                          ;  DESCRIPTION:
   467                          ;     This function is used to change the TX Interrupt mode.
   468                          ;-----------------------------------------------------------------------------
   469                          ;
   470                          ;  ARGUMENTS:
   471                          ;     A => Tx Interrupt mode
   472                          ;             0 => Interrupt on TX_Reg_Empty  (Default)
   473                          ;             1 => Interrupt on TX Complete
   474                          ;
   475                          ;  RETURNS:
   476                          ;     none.
   477                          ;
   478                          ;  SIDE EFFECTS:
   479                          ;    The A and X registers may be modified by this or future implementations
   480                          ;    of this function.  The same is true for all RAM page pointer registers in
   481                          ;    the Large Memory Model.  When necessary, it is the calling function's
   482                          ;    responsibility to perserve their values across calls to fastcall16 
   483                          ;    functions.
   484                          ;
   485  2F76                     UART_Sensor_TxIntMode:
   486  2F76                    _UART_Sensor_TxIntMode:
   487                             RAM_PROLOGUE RAM_USE_CLASS_1
   488                          
   489  2F76  21 01                and  A,UART_Sensor_INT_MODE_TX_COMPLETE
   490  2F78  71 10                M8C_SetBank1
   491  2F7A  39 01                cmp  A,UART_Sensor_INT_MODE_TX_COMPLETE
   492  2F7C  A006                 jz   .SetTxCmpMode
   493                          
   494  2F7E  41 28 EF             and  reg[UART_Sensor_TX_FUNC_REG],0xEF        ; Set Interrupt on Tx_Reg_Empty
   495  2F81  8004                 jmp  .TxIntMode_End
   496                          
   497  2F83                    .SetTxCmpMode:                                       ; Set Interrupt on TX Complete
   498  2F83  43 28 10             or   reg[UART_Sensor_TX_FUNC_REG],0x10
   499                          
   500  2F86                    .TxIntMode_End:
   501  2F86  70 EF                M8C_SetBank0
   502                             RAM_EPILOGUE RAM_USE_CLASS_1
   503  2F88  7F                   ret
   504                          .ENDSECTION
   505                          
   506                              
   507                          .SECTION
   508                          ;-----------------------------------------------------------------------------
   509                          ;  FUNCTION NAME: UART_Sensor_IntCntl
   510                          ;
   511                          ;  DESCRIPTION:
   512                          ;     This function is used to enable/disable the Rx and Tx interrupt.
   513                          ;-----------------------------------------------------------------------------
   514                          ;
   515                          ;  ARGUMENTS:
   516                          ;     A => Interrupt mask
   517                          ;
   518                          ;  RETURNS:
   519                          ;     none.
   520                          ;
   521                          ;  SIDE EFFECTS:
   522                          ;    The A and X registers may be modified by this or future implementations
   523                          ;    of this function.  The same is true for all RAM page pointer registers in
   524                          ;    the Large Memory Model.  When necessary, it is the calling function's
   525                          ;    responsibility to perserve their values across calls to fastcall16 
   526                          ;    functions.
   527                          ;
   528                          ;  THEORY of OPERATION or PROCEDURE:
   529                          ;     Set or Clears the Tx/Rx user module interrupt enable mask bit in the TX
   530                          ;     and RX block.
   531                          ;
   532  2F89                     UART_Sensor_IntCntl:
   533  2F89                    _UART_Sensor_IntCntl:
   534                             RAM_PROLOGUE RAM_USE_CLASS_1
   535                          
   536  2F89  08                   push A
   537  2F8A  21 01                and  A,UART_Sensor_ENABLE_RX_INT
   538  2F8C  A006                 jz   .DisRxInt
   539                               ; Enable Rx Interrupt
   540  2F8E  43 E1 08             M8C_EnableIntMask UART_Sensor_RX_INT_REG, UART_Sensor_RX_INT_MASK
   541  2F91  8004                 jmp  .CheckTxInt
   542  2F93                    .DisRxInt:
   543                               ; Disable Rx Interrupt
   544  2F93  41 E1 F7             M8C_DisableIntMask UART_Sensor_RX_INT_REG, UART_Sensor_RX_INT_MASK
   545                          
   546  2F96                    .CheckTxInt:
   547  2F96  18                   pop  A
   548  2F97  21 02                and  A,UART_Sensor_ENABLE_TX_INT
   549  2F99  A006                 jz   .DisTxInt
   550                               ; Enable Tx Interrupt
   551  2F9B  43 E1 04             M8C_EnableIntMask UART_Sensor_TX_INT_REG, UART_Sensor_TX_INT_MASK
   552  2F9E  8004                 jmp  .End_IntCntl
   553  2FA0                    .DisTxInt:
   554                               ; Disable Tx Interrupt
   555  2FA0  41 E1 FB             M8C_DisableIntMask UART_Sensor_TX_INT_REG, UART_Sensor_TX_INT_MASK
   556                          
   557  2FA3                    .End_IntCntl:
   558                             RAM_EPILOGUE RAM_USE_CLASS_1
   559  2FA3  7F                   ret
   560                          .ENDSECTION
   561                          
   562                          
   563                          ;=============================================================================
   564                          ;=============================================================================
   565                          ;
   566                          ;     High-Level Commands
   567                          ;
   568                          ;=============================================================================
   569                          ;=============================================================================
   570                          
   571                          
   572                          ;-----------------------------------------------------------------------------
   573                          ;  FUNCTION NAME: UART_Sensor_PutSHexByte
   574                          ;
   575                          ;  DESCRIPTION:
   576                          ;     Print a byte in Hex (two characters) to the UART Tx
   577                          ;-----------------------------------------------------------------------------
   578                          ;
   579                          ;  ARGUMENTS:
   580                          ;     A  => (BYTE) Data/char to be printed
   581                          ;
   582                          ;  RETURNS:
   583                          ;     none.
   584                          ;
   585                          ;  SIDE EFFECTS:
   586                          ;    The A and X registers may be modified by this or future implementations
   587                          ;    of this function.  The same is true for all RAM page pointer registers in
   588                          ;    the Large Memory Model.  When necessary, it is the calling function's
   589                          ;    responsibility to perserve their values across calls to fastcall16 
   590                          ;    functions.
   591                          ;
   592                          .LITERAL
   593  2FA4                    UART_Sensor_HEX_STR:
   594  2FA4  30 31 32 33 34 35      DS    "0123456789ABCDEF"
              36 37 38 39 41 42 
              43 44 45 46       
   595                          .ENDLITERAL
   596                          
   597                          .SECTION
   598  2FB4                     UART_Sensor_PutSHexByte:
   599  2FB4                    _UART_Sensor_PutSHexByte:
   600                             RAM_PROLOGUE RAM_USE_CLASS_1
   601  2FB4  08                   push  A                             ; Save lower nibble
   602  2FB5  67                   asr   A                             ; Shift high nibble to right
   603  2FB6  67                   asr   A
   604  2FB7  67                   asr   A
   605  2FB8  67                   asr   A
   606  2FB9  21 0F                and   A,0Fh                         ; Mask off nibble
   607  2FBB  FFE7                 index UART_Sensor_HEX_STR           ; Get Hex value
   608  2FBD  900F                 call  UART_Sensor_PutChar           ; Write data to screen
   609  2FBF  18                   pop   A                             ; Restore value
   610  2FC0  21 0F                and   A,0Fh                         ; Mask off lower nibble
   611  2FC2  FFE0                 index UART_Sensor_HEX_STR           ; Get Hex value
   612  2FC4  9008                 call  UART_Sensor_PutChar           ; Write data to screen
   613                             RAM_EPILOGUE RAM_USE_CLASS_1
   614  2FC6  7F                   ret
   615                          .ENDSECTION
   616                          
   617                          
   618                          .SECTION
   619                          ;-----------------------------------------------------------------------------
   620                          ;  FUNCTION NAME: UART_Sensor_PutSHexInt
   621                          ;
   622                          ;  DESCRIPTION:
   623                          ;     Print an Int in Hex (four characters) to UART Tx
   624                          ;-----------------------------------------------------------------------------
   625                          ;
   626                          ;  ARGUMENTS:
   627                          ;     Pointer to string
   628                          ;     A  => ASB of Int
   629                          ;     X  => MSB of Int
   630                          ;
   631                          ;  RETURNS:
   632                          ;     none.
   633                          ;
   634                          ;  SIDE EFFECTS:
   635                          ;    The A and X registers may be modified by this or future implementations
   636                          ;    of this function.  The same is true for all RAM page pointer registers in
   637                          ;    the Large Memory Model.  When necessary, it is the calling function's
   638                          ;    responsibility to perserve their values across calls to fastcall16 
   639                          ;    functions.
   640                          ;
   641                          
   642  2FC7                     UART_Sensor_PutSHexInt:
   643  2FC7                    _UART_Sensor_PutSHexInt:
   644                             RAM_PROLOGUE RAM_USE_CLASS_1
   645  2FC7  4B                   swap  A,X
   646  2FC8  9FEA                 call  UART_Sensor_PutSHexByte       ; Print MSB
   647  2FCA  5B                   mov   A,X                           ; Move LSB into position
   648  2FCB  9FE7                 call  UART_Sensor_PutSHexByte       ; Print LSB
   649                             RAM_EPILOGUE RAM_USE_CLASS_1
   650  2FCD  7F                   ret
   651                          .ENDSECTION
   652                          
   653                          
   654                          .SECTION
   655                          ;-----------------------------------------------------------------------------
   656                          ;  FUNCTION NAME: UART_Sensor_PutChar
   657                          ;
   658                          ;  DESCRIPTION:
   659                          ;     Send character out through UART TX port.
   660                          ;-----------------------------------------------------------------------------
   661                          ;
   662                          ;  ARGUMENTS:
   663                          ;     A has Character to send to UART Tx Port
   664                          ;
   665                          ;  RETURNS:
   666                          ;     none
   667                          ;
   668                          ;  SIDE EFFECTS:
   669                          ;    The A and X registers may be modified by this or future implementations
   670                          ;    of this function.  The same is true for all RAM page pointer registers in
   671                          ;    the Large Memory Model.  When necessary, it is the calling function's
   672                          ;    responsibility to perserve their values across calls to fastcall16 
   673                          ;    functions.
   674                          ;
   675                          
   676                             macro InLinePutChar( Source )
   677                          .BufEmptyWaitLoop:
   678                             tst REG[UART_Sensor_TX_CONTROL_REG], UART_Sensor_TX_BUFFER_EMPTY     ; Check Tx Status
   679                             jz  .BufEmptyWaitLoop
   680                             mov REG[UART_Sensor_TX_BUFFER_REG], @Source     ; Write data to Tx Port
   681  2FCE                       endm
   682                          
   683  2FCE                     UART_Sensor_PutChar:
   684  2FCE                    _UART_Sensor_PutChar:
   685                             RAM_PROLOGUE RAM_USE_CLASS_1
   686                             InLinePutChar A
      + 2FCE                    ; Nothing to do
??0000:
      + 2FCE  49 2B 10          	tst	reg[43], 16
      + 2FD1  AFFC              	jz	??0000
      + 2FD3  60 29             	mov	reg[41], a
   687                             RAM_EPILOGUE RAM_USE_CLASS_1
   688  2FD5  7F                   ret
   689                          .ENDSECTION
   690                          
   691                          
   692                          .SECTION
   693                          ;-----------------------------------------------------------------------------
   694                          ;  FUNCTION NAME: UART_Sensor_cGetChar
   695                          ;
   696                          ;  DESCRIPTION:
   697                          ;     Read character from UART RX port.
   698                          ;-----------------------------------------------------------------------------
   699                          ;
   700                          ;  ARGUMENTS:
   701                          ;      none
   702                          ;
   703                          ;  RETURNS:
   704                          ;     char that is returned from UART
   705                          ;
   706                          ;  SIDE EFFECTS:
   707                          ;    The A and X registers may be modified by this or future implementations
   708                          ;    of this function.  The same is true for all RAM page pointer registers in
   709                          ;    the Large Memory Model.  When necessary, it is the calling function's
   710                          ;    responsibility to perserve their values across calls to fastcall16 
   711                          ;    functions.
   712                          ;
   713                          ;    Program flow will stay in this function until a character is received.
   714                          ;    If the watchdog timer is used, care must be taken to make sure that
   715                          ;    the delay between characters is less than the watchdog timeout.
   716                          ;
   717  2FD6                     UART_Sensor_cGetChar:
   718  2FD6                    _UART_Sensor_cGetChar:
   719                             RAM_PROLOGUE RAM_USE_CLASS_1
   720  2FD6  49 2F 08             tst REG[UART_Sensor_RX_CONTROL_REG],UART_Sensor_RX_REG_FULL    ; Check if a character is ready
   721  2FD9  AFFC                 jz  UART_Sensor_cGetChar                              ; If not loop
   722  2FDB  5D 2E                mov A, REG[UART_Sensor_RX_BUFFER_REG]                 ; Get character
   723                             RAM_EPILOGUE RAM_USE_CLASS_1
   724  2FDD  7F                   ret
   725                          .ENDSECTION
   726                          
   727                          
   728                          .SECTION
   729                          ;-----------------------------------------------------------------------------
   730                          ;  FUNCTION NAME: UART_Sensor_cReadChar
   731                          ;
   732                          ;  DESCRIPTION:
   733                          ;     Read character from UART RX port.
   734                          ;-----------------------------------------------------------------------------
   735                          ;
   736                          ;  ARGUMENTS:
   737                          ;      none
   738                          ;
   739                          ;  RETURNS:
   740                          ;     char that is returned from UART
   741                          ;
   742                          ;  SIDE EFFECTS:
   743                          ;    The A and X registers may be modified by this or future implementations
   744                          ;    of this function.  The same is true for all RAM page pointer registers in
   745                          ;    the Large Memory Model.  When necessary, it is the calling function's
   746                          ;    responsibility to perserve their values across calls to fastcall16 
   747                          ;    functions.
   748                          ;
   749                          ;    A valid 0x00 character will be ignored, since a 0x00 return value
   750                          ;    implies a valid character or an error condition occured.
   751                          ;
   752  2FDE                     UART_Sensor_cReadChar:
   753  2FDE                    _UART_Sensor_cReadChar:
   754                             RAM_PROLOGUE RAM_USE_CLASS_1
   755  2FDE  5D 2F                mov  A,REG[UART_Sensor_RX_CONTROL_REG]                  ; Get Status of RX
   756  2FE0  08                   push A
   757  2FE1  21 08                and  A,UART_Sensor_RX_COMPLETE                          ; Check if a character is ready
   758  2FE3  B004                 jnz  .RX_DATA_RDY                                       ; Data Ready go read it.
   759  2FE5  18                   pop  A
   760  2FE6  800B                 jmp  .RX_NO_VALID_CHAR
   761                          
   762  2FE8                    .RX_DATA_RDY:
   763  2FE8  5D 2E                mov  A,REG[UART_Sensor_RX_BUFFER_REG ]          
   764  2FEA  4B                   swap A,X                                                ; determine if data is valid
   765                          
   766  2FEB  18                   pop  A                                                  ; Check for errors
   767  2FEC  21 A0                and  A,(UART_Sensor_RX_PARITY_ERROR | UART_Sensor_RX_FRAMING_ERROR)
   768  2FEE  B003                 jnz  .RX_NO_VALID_CHAR                                  ; No character, exit
   769  2FF0  4B                   swap A,X                                                ; Put data in A and exit
   770                             RAM_EPILOGUE RAM_USE_CLASS_1
   771  2FF1  7F                   ret
   772                          
   773  2FF2                    .RX_NO_VALID_CHAR:
   774  2FF2  50 00                mov A,0x00                                              ; Zero out character
   775                          
   776  2FF4                     End_UART_Sensor_cReadChar:
   777                             RAM_EPILOGUE RAM_USE_CLASS_1
   778  2FF4  7F                   ret
   779                          .ENDSECTION
   780                          
   781                          
   782                          .SECTION
   783                          ;-----------------------------------------------------------------------------
   784                          ;  FUNCTION NAME: UART_Sensor_iReadChar
   785                          ;
   786                          ;  WARNING WARNING WARNING  Negative return value not correct!!!!  We may want
   787                          ;  to just set a value in the upper byte if error conditions exists.
   788                          ;
   789                          ;  DESCRIPTION:
   790                          ;     Read character from UART RX port.
   791                          ;-----------------------------------------------------------------------------
   792                          ;
   793                          ;  ARGUMENTS:
   794                          ;      none
   795                          ;
   796                          ;  RETURNS:
   797                          ;     An integer value is returned.  A negative value inplies and error
   798                          ;     condition, a positive value between 0 and 255 is the return character.
   799                          ;
   800                          ;     Error Codes:
   801                          ;        0x80CC    Parity Error
   802                          ;        0x40CC    Overrun Error
   803                          ;        0x20CC    Framing Error
   804                          ;        0x01CC    No Data available
   805                          ;
   806                          ;  SIDE EFFECTS:
   807                          ;    The A and X registers may be modified by this or future implementations
   808                          ;    of this function.  The same is true for all RAM page pointer registers in
   809                          ;    the Large Memory Model.  When necessary, it is the calling function's
   810                          ;    responsibility to perserve their values across calls to fastcall16 
   811                          ;    functions.
   812                          ;
   813  2FF5                     UART_Sensor_iReadChar:
   814  2FF5                    _UART_Sensor_iReadChar:
   815                             RAM_PROLOGUE RAM_USE_CLASS_1
   816  2FF5  5D 2F                mov  A,REG[UART_Sensor_RX_CONTROL_REG]                  ; Get Status of RX
   817                                                                                     ; Mask only errors and data ready
   818  2FF7  21 E8                and  A,(UART_Sensor_RX_ERROR|UART_Sensor_RX_REG_FULL)
   819  2FF9  08                   push A
   820  2FFA  21 08                and  A,UART_Sensor_RX_COMPLETE                          ; Check if a character is ready
   821  2FFC  B007                 jnz  .RX_GET_DATA                                       ; Data Ready go read it.
   822  2FFE  18                   pop  A
   823  2FFF  29 01                or   A,UART_Sensor_RX_NO_DATA                           ; Add no data flag
   824  3001  4B                   swap A,X
   825  3002  8007                 jmp  End_UART_Sensor_iReadChar
   826                          
   827  3004                    .RX_GET_DATA:
   828  3004  18                   pop  A
   829  3005  21 E0                and  A,UART_Sensor_RX_ERROR
   830  3007  4B                   swap A,X
   831  3008  5D 2E                mov  A,REG[UART_Sensor_RX_BUFFER_REG ]                  ; Read data first, then
   832                                                                                     ; determine if data is valid
   833                          
   834  300A                     End_UART_Sensor_iReadChar:
   835                             RAM_EPILOGUE RAM_USE_CLASS_1
   836  300A  7F                   ret
   837                          .ENDSECTION
   838                          
   839                          
   840                          .SECTION
   841                          ;-----------------------------------------------------------------------------
   842                          ;  FUNCTION NAME: UART_Sensor_PutString
   843                          ;
   844                          ;  DESCRIPTION:
   845                          ;     Send String out through UART TX port.
   846                          ;-----------------------------------------------------------------------------
   847                          ;
   848                          ;  ARGUMENTS:
   849                          ;     Pointer to String
   850                          ;     A has MSB of string address
   851                          ;     X has LSB of string address
   852                          ;
   853                          ;  RETURNS:
   854                          ;     none
   855                          ;
   856                          ;  SIDE EFFECTS:
   857                          ;    The A and X registers may be modified by this or future implementations
   858                          ;    of this function.  The same is true for all RAM page pointer registers in
   859                          ;    the Large Memory Model.  When necessary, it is the calling function's
   860                          ;    responsibility to perserve their values across calls to fastcall16 
   861                          ;    functions.
   862                          ;          
   863                          ;    Currently only the page pointer registers listed below are modified: 
   864                          ;          IDX_PP
   865                          ;
   866  300B                     UART_Sensor_PutString:
   867  300B                    _UART_Sensor_PutString:
   868                             RAM_PROLOGUE RAM_USE_CLASS_3
   869  300B  60 D3                RAM_SETPAGE_IDX A
   870  300D                    .PutStringLoop:
   871  300D  52 00                mov   A,[X]                                   ; Get value pointed to by X
   872  300F  A006                 jz    End_PutString                           ; Check for end of string
   873  3011  9FBB                 call  UART_Sensor_PutChar                     ; Send character to Tx port
   874  3013  75                   inc   X                                       ; Advance pointer to next character
   875  3014  8FF8                 jmp   .PutStringLoop                          ; Get next character
   876                          
   877  3016                    End_PutString:
   878                             RAM_EPILOGUE RAM_USE_CLASS_3
      + 3016  70 3F             	and	f, 0x3F
      + 3018  71 80             	or	f, 0x80
   879  301A  7F                   ret
   880                          .ENDSECTION
   881                              
   882                          .SECTION
   883                          ;-----------------------------------------------------------------------------
   884                          ;  FUNCTION NAME: UART_Sensor_Write
   885                          ;
   886                          ;  DESCRIPTION:
   887                          ;     Send String of length X to serial port
   888                          ;-----------------------------------------------------------------------------
   889                          ;
   890                          ;  ARGUMENTS:
   891                          ;     Pointer to String
   892                          ;     [SP-5] Count of characters to send
   893                          ;     [SP-4] has MSB of string address
   894                          ;     [SP-3] has LSB of string address
   895                          ;
   896                          ;  RETURNS:
   897                          ;     none
   898                          ;
   899                          ;  SIDE EFFECTS:
   900                          ;    The A and X registers may be modified by this or future implementations
   901                          ;    of this function.  The same is true for all RAM page pointer registers in
   902                          ;    the Large Memory Model.  When necessary, it is the calling function's
   903                          ;    responsibility to perserve their values across calls to fastcall16 
   904                          ;    functions.
   905                          ;          
   906                          ;    Currently only the page pointer registers listed below are modified: 
   907                          ;          IDX_PP
   908                          ;
   909  FFFFFFFB                    CNT_LEN:    equ -5                               ; Length of data to send
   910  FFFFFFFC                    STR_MSB:    equ -4                               ; MSB pointer of string 
   911  FFFFFFFD                    STR_LSB:    equ -3                               ; LSB pointer of string 
   912                          
   913  301B                     UART_Sensor_Write:
   914  301B                    _UART_Sensor_Write:
   915                             RAM_PROLOGUE RAM_USE_CLASS_3
   916  301B  62 D3 03             RAM_SETPAGE_IDX2STK                           ; Refer indexed addrs to the stack
   917  301E  4F                   mov   X, SP                                   ; Establish the frame pointer 
   918                          
   919  301F                    .NextByteLoop:
   920  301F  52 FB                mov   A, [X+CNT_LEN]                          ; End of the string?
   921  3021  A01A                 jz    .End_Write                              ;   Yes, prepare to exit
   922  3023  7B FB                dec   [X+CNT_LEN]                             ; Decrement counter
   923                          
   924                             IF SYSTEM_LARGE_MEMORY_MODEL
   925  3025  52 FC                mov   A, [X+STR_MSB]                          ; Load pointer to char to send
   926                             ENDIF
   927                          
   928  3027  59 FD                mov   X, [X+STR_LSB]                          ; Load pointer to char to send
   929  3029  60 D3                RAM_SETPAGE_IDX A                             ; switch index pages
   930  302B  52 00                mov   A, [X]                                  ; Grab the data
   931                             InLinePutChar A                               ; Put data in empty TX buf reg
      + 302D                    ??0001:
      + 302D  49 2B 10          	tst	reg[43], 16
      + 3030  AFFC              	jz	??0001
      + 3032  60 29             	mov	reg[41], a
   932  3034  4F                   mov   X, SP                                   ; Recover frame pointer
   933  3035  62 D3 03             RAM_SETPAGE_IDX2STK                           ; Prepare for stack access
   934  3038  77 FD                inc   [X+STR_LSB]                             ; Point to next byte, but do not
   935  303A  8FE4                 jmp   .NextByteLoop                           ;    cross RAM page boundary!
   936                          
   937  303C                    .End_Write:
   938                             RAM_EPILOGUE RAM_USE_CLASS_3
      + 303C  70 3F             	and	f, 0x3F
      + 303E  71 80             	or	f, 0x80
   939  3040  7F                   ret
   940                          .ENDSECTION
   941                              
   942                          
   943                          .SECTION
   944                          ;-----------------------------------------------------------------------------
   945                          ;  FUNCTION NAME: UART_Sensor_CWrite
   946                          ;
   947                          ;             WARNING WARNING NOT COMPLETE
   948                          ;
   949                          ;  DESCRIPTION:
   950                          ;     Send String of length X to serial port
   951                          ;-----------------------------------------------------------------------------
   952                          ;
   953                          ;  ARGUMENTS:
   954                          ;     [SP-4] MSB of Count of character to send
   955                          ;     [SP-3] LSB of Count of character to send
   956                          ;     [SP-2] has MSB of string address
   957                          ;     [SP-1] has LSB of string address
   958                          ;
   959                          ;  RETURNS:
   960                          ;     none
   961                          ;
   962                          ;  SIDE EFFECTS:
   963                          ;    The A and X registers may be modified by this or future implementations
   964                          ;    of this function.  The same is true for all RAM page pointer registers in
   965                          ;    the Large Memory Model.  When necessary, it is the calling function's
   966                          ;    responsibility to perserve their values across calls to fastcall16 
   967                          ;    functions.
   968                          ;
   969  FFFFFFFA                    CLEN_MSB:   equ -6           ; MSB Length of data to send
   970  FFFFFFFB                    CLEN_LSB:   equ -5           ; LSB Length of data to send
   971  FFFFFFFC                    CSTR_MSB:   equ -4           ; MSB pointer of string
   972  FFFFFFFD                    CSTR_LSB:   equ -3           ; LSB pointer of string
   973                          
   974  3041                     UART_Sensor_CWrite:
   975  3041                    _UART_Sensor_CWrite:
   976  3041  71 40                RAM_PROLOGUE RAM_USE_CLASS_2
   977  3043  4F                   mov   X,SP
   978  3044                    .CW_Loop:
   979  3044  3D FA 00             cmp   [X+CLEN_MSB],0x00                  ; Check for zero counter
   980  3047  B006                 jnz   .CW_WRITEIT
   981  3049  3D FB 00             cmp   [X+CLEN_LSB],0x00
   982  304C  A01D                 jz    .End_CWrite                        ; Leave if done
   983                          
   984  304E                    .CW_WRITEIT:                                
   985  304E  10                   push  X                                  ; Save frame pointer
   986  304F  52 FC                mov   A,[X+CSTR_MSB]
   987  3051  59 FD                mov   X,[X+CSTR_LSB]
   988  3053  28                   romx                                     ; Get character from ROM
   989                             InLinePutChar A                          ; Put data in empty TX buf reg
      + 3054                    ??0002:
      + 3054  49 2B 10          	tst	reg[43], 16
      + 3057  AFFC              	jz	??0002
      + 3059  60 29             	mov	reg[41], a
   990  305B  20                   pop   X                                  ; Restore frame pointer
   991  305C  07 FD 01             add   [X+CSTR_LSB],1                     ; Increment the string pointer
   992  305F  0F FC 00             adc   [X+CSTR_MSB],0
   993  3062  17 FB 01             sub   [X+CLEN_LSB],0x01                  ; Dec the counter
   994  3065  1F FA 00             sbb   [X+CLEN_MSB],0x00
   995  3068  8FDB                 jmp   .CW_Loop
   996                          
   997  306A                    .End_CWrite:
   998                             RAM_EPILOGUE RAM_USE_CLASS_2
      + 306A  70 3F             	and	f, 0x3F
      + 306C  71 80             	or	f, 0x80
   999  306E  7F                   ret
  1000                          .ENDSECTION
  1001                          
  1002                          
  1003                          .SECTION
  1004                          ;-----------------------------------------------------------------------------
  1005                          ;  FUNCTION NAME: UART_Sensor_CPutString
  1006                          ;
  1007                          ;  DESCRIPTION:
  1008                          ;     Send String out through UART TX port.
  1009                          ;-----------------------------------------------------------------------------
  1010                          ;
  1011                          ;  ARGUMENTS:
  1012                          ;     Pointer to String
  1013                          ;     A has MSB of string address
  1014                          ;     X has LSB of string address
  1015                          ;
  1016                          ;  RETURNS:
  1017                          ;     none
  1018                          ;
  1019                          ;  SIDE EFFECTS:
  1020                          ;    The A and X registers may be modified by this or future implementations
  1021                          ;    of this function.  The same is true for all RAM page pointer registers in
  1022                          ;    the Large Memory Model.  When necessary, it is the calling function's
  1023                          ;    responsibility to perserve their values across calls to fastcall16 
  1024                          ;    functions.
  1025                          ;
  1026  306F                     UART_Sensor_CPutString:
  1027  306F                    _UART_Sensor_CPutString:
  1028                             RAM_PROLOGUE RAM_USE_CLASS_1
  1029  306F  08                   push  A                                       ; Store ROM pointer
  1030  3070  10                   push  X
  1031  3071  28                   romx                                          ; Get character from ROM
  1032  3072  A00B                 jz    .End_CPutString
  1033  3074  9F58                 call  UART_Sensor_PutChar                     ; Print character
  1034  3076  20                   pop   X
  1035  3077  18                   pop   A
  1036  3078  75                   inc   X                                       ; Inc LSB of pointer
  1037  3079  DFF5                 jnc   UART_Sensor_CPutString                  ; Check for carry
  1038  307B  74                   inc   A                                       ; Inc MSB of pointer
  1039  307C  8FF2                 jmp   UART_Sensor_CPutString
  1040                          
  1041                          
  1042  307E                    .End_CPutString:
  1043  307E  38 FE                add   SP, -2
  1044                             RAM_EPILOGUE RAM_USE_CLASS_1
  1045  3080  7F                   ret
  1046                          .ENDSECTION
  1047                          
  1048                          
  1049                          .SECTION
  1050                          ;-----------------------------------------------------------------------------
  1051                          ;  FUNCTION NAME: UART_Sensor_PutCRLF
  1052                          ;
  1053                          ;  DESCRIPTION:
  1054                          ;     Send a CR and LF
  1055                          ;-----------------------------------------------------------------------------
  1056                          ;
  1057                          ;  ARGUMENTS:
  1058                          ;     none.
  1059                          ;
  1060                          ;  RETURNS:
  1061                          ;     none.
  1062                          ;
  1063                          ;  SIDE EFFECTS:
  1064                          ;    The A and X registers may be modified by this or future implementations
  1065                          ;    of this function.  The same is true for all RAM page pointer registers in
  1066                          ;    the Large Memory Model.  When necessary, it is the calling function's
  1067                          ;    responsibility to perserve their values across calls to fastcall16 
  1068                          ;    functions.
  1069                          ;
  1070  3081                     UART_Sensor_PutCRLF:
  1071  3081                    _UART_Sensor_PutCRLF:
  1072                             RAM_PROLOGUE RAM_USE_CLASS_1
  1073  3081  50 0D                mov  A,0x0D                        ; Send CR
  1074  3083  9F49                 call UART_Sensor_PutChar
  1075  3085  50 0A                mov  A,0x0A                        ; Send LF
  1076  3087  9F45                 call UART_Sensor_PutChar
  1077                             RAM_EPILOGUE RAM_USE_CLASS_1
  1078  3089  7F                   ret
HI-TECH Software Macro Assembler (PSoC MCU) V9.61
Symbol Table                                                                                               Fri Jun 12 09:25:11 2015
          UART_Sensor_TX_FUNC_REG 0028             UART_Sensor_TX_INT_REG 00E1            UART_Sensor_TX_INT_MASK 0004  
            UART_Sensor_EnableInt 2F3C         UART_Sensor_RX_CONTROL_REG 002F           _bUART_Sensor_ReadRxData 2F70  
       UART_Sensor_TX_CONTROL_REG 002B             _UART_Sensor_EnableInt 2F3C             UART_Sensor_DisableInt 2F43  
            _UART_Sensor_SendData 2F6A            UART_Sensor_bReadRxData 2F70                           CLEN_LSB FFFFFFFB  
                         CLEN_MSB FFFFFFFA              _UART_Sensor_cGetChar 2FD6            UART_Sensor_PutSHexByte 2FB4  
                         CSTR_LSB FFFFFFFD                           CSTR_MSB FFFFFFFC            bfCONTROL_REG_START_BIT 0001  
          _UART_Sensor_DisableInt 2F43                             ??0000 2FCE                             ??0001 302D  
                           ??0002 3054                      End_PutString 3016              UART_Sensor_cReadChar 2FDE  
            UART_Sensor_TxIntMode 2F76                             HITECH 0002          UART_Sensor_RX_BUFFER_REG 002E  
                  FLAG_PGMODE_01b 0040                    FLAG_PGMODE_10b 0080                             IDX_PP 00D3  
            UART_Sensor_PutString 300B             _UART_Sensor_cReadChar 2FDE                   UART_Sensor_Stop 2F63  
           _UART_Sensor_TxIntMode 2F76                 UART_Sensor_CWrite 3041          bUART_Sensor_ReadRxStatus 2F73  
         _UART_Sensor_bReadRxData 2F70              UART_Sensor_iReadChar 2FF5          bUART_Sensor_ReadTxStatus 2F6D  
           _UART_Sensor_PutString 300B          End_UART_Sensor_cReadChar 2FF4           _UART_Sensor_PutSHexByte 2FB4  
                _UART_Sensor_Stop 2F63             _UART_Sensor_iReadChar 2FF5       UART_Sensor_RX_FRAMING_ERROR 0020  
             UART_Sensor_RX_ERROR 00E0          _UART_Sensor_SetTxIntMode 2F4A          SYSTEM_LARGE_MEMORY_MODEL 0001  
        End_UART_Sensor_iReadChar 300A             SYSTEM_MULTIPAGE_STACK 0000               _UART_Sensor_IntCntl 2F89  
             _UART_Sensor_PutCRLF 3081                          TOOLCHAIN 0002             UART_Sensor_PutSHexInt 2FC7  
             _UART_Sensor_PutChar 2FCE                            CNT_LEN FFFFFFFB               UART_Sensor_SendData 2F6A  
             UART_Sensor_cGetChar 2FD6          UART_Sensor_bReadRxStatus 2F73                   FLAG_PGMODE_MASK 00C0  
        UART_Sensor_bReadTxStatus 2F6D                    RAM_USE_CLASS_1 0001                    RAM_USE_CLASS_2 0002  
                  RAM_USE_CLASS_3 0004                    RAM_USE_CLASS_4 0008   UART_Sensor_INT_MODE_TX_COMPLETE 0001  
                          STR_LSB FFFFFFFD                            STR_MSB FFFFFFFC                UART_Sensor_HEX_STR 2FA4  
   bfFUNCTION_REG_TX_INT_MODE_BIT 0010         _bUART_Sensor_ReadRxStatus 2F73            _UART_Sensor_PutSHexInt 2FC7  
       _bUART_Sensor_ReadTxStatus 2F6D                  UART_Sensor_Start 2F5C                  UART_Sensor_Write 301B  
              _UART_Sensor_CWrite 3041          UART_Sensor_ENABLE_RX_INT 0001          UART_Sensor_ENABLE_TX_INT 0002  
           UART_Sensor_CPutString 306F                UART_Sensor_IntCntl 2F89          UART_Sensor_TX_BUFFER_REG 0029  
              UART_Sensor_PutCRLF 3081                UART_Sensor_PutChar 2FCE            UART_Sensor_RX_COMPLETE 0008  
          bUART_Sensor_ReadRxData 2F70        UART_Sensor_TX_BUFFER_EMPTY 0010            _UART_Sensor_CPutString 306F  
               _UART_Sensor_Start 2F5C            UART_Sensor_RX_INT_MASK 0008                 _UART_Sensor_Write 301B  
                SYSTEM_STACK_PAGE 0003        UART_Sensor_RX_PARITY_ERROR 0080            UART_Sensor_RX_REG_FULL 0008  
                    FLAG_XIO_MASK 0010         _UART_Sensor_bReadRxStatus 2F73         SYSTEM_IDXPG_TRACKS_IDX_PP 0001  
       _UART_Sensor_bReadTxStatus 2F6D             UART_Sensor_RX_INT_REG 00E1         SYSTEM_IDXPG_TRACKS_STK_PP 0000  
           UART_Sensor_RX_NO_DATA 0001           UART_Sensor_SetTxIntMode 2F4A           UART_Sensor_RXBUF_ENABLE 0000  
HI-TECH Software Macro Assembler (PSoC MCU) V9.61
                                                                                                           Fri Jun 12 09:25:11 2015
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  FILENAME:   UART_Sensor.inc
     4                          ;;  Version: 5.3, Updated on 2013/5/19 at 10:44:49
     5                          ;;  Generated by PSoC Designer 5.4.2946
     6                          ;;
     7                          ;;  DESCRIPTION:  Assembler declarations for the UART user module.
     8                          ;;-----------------------------------------------------------------------------
     9                          ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
    10                          ;;*****************************************************************************
    11                          ;;*****************************************************************************
    12                          
    13                          ;--------------------------------------------------
    14                          ; Constants for UART_Sensor API's
    15                          ;--------------------------------------------------
    16                          
    17                          ;mask value for global int reg bit for TX instance
    18  0004                    UART_Sensor_TX_INT_MASK:                     equ 0x04
    19  00E1                    UART_Sensor_TX_INT_REG:                      equ 0x0e1  ;TX interrupt address
    20  0008                    UART_Sensor_RX_INT_MASK:                     equ 0x08  ;mask value for global int reg bit for RX ins
                                tance
    21  00E1                    UART_Sensor_RX_INT_REG:                      equ 0x0e1  ;RX interrupt address
    22                          
    23  0000                    UART_Sensor_RXBUF_ENABLE:                    equ 0
    24                          
    25                          ; Interrupt control masks
    26  0001                    UART_Sensor_ENABLE_RX_INT:                   equ 0x01
    27  0000                    UART_Sensor_DISABLE_RX_INT:                  equ 0x00
    28  0002                    UART_Sensor_ENABLE_TX_INT:                   equ 0x02
    29  0000                    UART_Sensor_DISABLE_TX_INT:                  equ 0x00
    30                          
    31  0000                    UART_Sensor_INT_MODE_TX_REG_EMPTY:           equ 0x00
    32  0001                    UART_Sensor_INT_MODE_TX_COMPLETE:            equ 0x01
    33                          
    34  0020                    UART_Sensor_RX_IGNORE_BELOW:                 equ 0x20
    35  0010                    UART_Sensor_RX_BUFFER_SIZE:                  equ 0x10
    36  000D                    UART_Sensor_CMD_TERM:                        equ 0xd
    37  0020                    UART_Sensor_DELIMITER:                       equ 0x20
    38  0000                    UART_Sensor_BACKSPACE_ENABLE:                equ 0x0
    39                          
    40                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    41                          ;       WARNING WARNING WARNING
    42                          ; The following equates are for backwards
    43                          ; compatibility only and should not be used
    44                          ; for new designs.
    45                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    46                          
    47                          ;------------------------------------
    48                          ;  Parity masks
    49                          ;------------------------------------
    50  0000                    UART_PARITY_NONE:       equ   00h
    51  0002                    UART_PARITY_EVEN:       equ   02h
    52  0006                    UART_PARITY_ODD:        equ   06h
    53                          
    54                          ;------------------------------------
    55                          ;  TX Status Register masks
    56                          ;------------------------------------
    57  0020                    UART_TX_COMPLETE:       equ   20h
    58  0010                    UART_TX_BUFFER_EMPTY:   equ   10h
    59                          
    60                          ;------------------------------------
    61                          ;  RX Status Register masks
    62                          ;------------------------------------
    63  0010                    UART_RX_ACTIVE:         equ   10h
    64  0008                    UART_RX_COMPLETE:       equ   08h
    65  0080                    UART_RX_PARITY_ERROR:   equ   80h
    66  0040                    UART_RX_OVERRUN_ERROR:  equ   40h
    67  0020                    UART_RX_FRAMING_ERROR:  equ   20h
    68  00E0                    UART_RX_NO_ERROR:       equ   E0h
    69                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    70                          ;             END WARNING
    71                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    72                          
    73                          
    74                          
    75                          ;------------------------------------
    76                          ;  Parity masks
    77                          ;------------------------------------
    78  0000                    UART_Sensor_PARITY_NONE:                equ   00h
    79  0002                    UART_Sensor_PARITY_EVEN:                equ   02h
    80  0006                    UART_Sensor_PARITY_ODD:                 equ   06h
    81                          
    82                          ;------------------------------------
    83                          ;  TX Status Register masks
    84                          ;------------------------------------
    85  0020                    UART_Sensor_TX_COMPLETE:                equ   20h
    86  0010                    UART_Sensor_TX_BUFFER_EMPTY:            equ   10h
    87                          
    88                          ;------------------------------------
    89                          ;  RX Status Register masks
    90                          ;------------------------------------
    91  0010                    UART_Sensor_RX_ACTIVE:                  equ   10h
    92  0008                    UART_Sensor_RX_COMPLETE:                equ   08h
    93  0008                    UART_Sensor_RX_REG_FULL:                equ   08h
    94  0080                    UART_Sensor_RX_PARITY_ERROR:            equ   80h
    95  0040                    UART_Sensor_RX_OVERRUN_ERROR:           equ   40h
    96  0020                    UART_Sensor_RX_FRAMING_ERROR:           equ   20h
    97  00E0                    UART_Sensor_RX_ERROR:                   equ   E0h
    98  0001                    UART_Sensor_RX_ENABLE:                  equ   01h
    99                          
   100  00F0                    UART_Sensor_RX_BUF_ERROR:               equ   F0h  ; Mask for any Rx that may occur.
   101  0010                    UART_Sensor_RX_BUF_OVERRUN:             equ   10h  ; This indicates the software buffer has
   102                                                                                  ; been over run.
   103  0001                    UART_Sensor_RX_BUF_CMDTERM:             equ   01h  ; Command terminator has been received.
   104                          
   105  0001                    UART_Sensor_RX_NO_DATA:                 equ   01h
   106  00E0                    UART_Sensor_RX_NO_ERROR:                equ   E0h
   107                          
   108                          
   109                          ;--------------------------------------------------
   110                          ; Registers Address Constants for UART_Sensor
   111                          ;--------------------------------------------------
   112                          ;---------------------------------
   113                          ;  Registers used by TX
   114                          ;---------------------------------
   115  002B                    UART_Sensor_TX_CONTROL_REG: equ 2bh            ; Control register
   116  0028                    UART_Sensor_TX_SHIFT_REG:   equ 28h               ; TX Shift Register register
   117  0029                    UART_Sensor_TX_BUFFER_REG:  equ 29h               ; TX Buffer Register
   118  0028                    UART_Sensor_TX_FUNC_REG:    equ 28h     ; Function register
   119  0029                    UART_Sensor_TX_INPUT_REG:   equ 29h            ; Input register
   120  002A                    UART_Sensor_TX_OUTPUT_REG:  equ 2ah           ; Output register
   121                          
   122                          ;---------------------------------
   123                          ;  Registers used by RX
   124                          ;---------------------------------
   125  002F                    UART_Sensor_RX_CONTROL_REG: equ 2fh            ; Control register
   126  002C                    UART_Sensor_RX_SHIFT_REG:   equ 2ch               ; RX Shift Register register
   127  002E                    UART_Sensor_RX_BUFFER_REG:  equ 2eh               ; RX Buffer Register
   128  002C                    UART_Sensor_RX_FUNC_REG:    equ 2ch     ; Function register
   129  002D                    UART_Sensor_RX_INPUT_REG:   equ 2dh            ; Input register
   130                          UART_Sensor_RX_OUTPUT_REG:  equ 2eh           ; Output register
      + 002E                    UART_Sensor_RX_OUTPUT_REG	equ	46
      + 3C51                    ; end of file UART_Sensor.inc
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;
     4                          ;;       FILENAME: Memory.inc
     5                          ;;
     6                          ;;    DESCRIPTION: Memory Model and Stack Parameter Definitions for 
     7                          ;;                 CY8C22045 PSoC devices.
     8                          ;;
     9                          ;;  LAST MODIFIED: August 17, 2004
    10                          ;;
    11                          ;;-----------------------------------------------------------------------------
    12                          ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
    13                          ;;*****************************************************************************
    14                          ;;*****************************************************************************
    15                          ;
    16                          ;
    17                          ;  ******** Define Memory Model and Stack parameters ********
    18                          ;
    19  0001                    IMAGECRAFT: equ 1   
    20  0002                    HITECH: equ 2   
    21  0002                    TOOLCHAIN: equ HITECH   
    22  0001                    SYSTEM_LARGE_MEMORY_MODEL: equ 1   
    23  0000                    SYSTEM_SMALL_MEMORY_MODEL: equ 0   
    24  0003                    SYSTEM_STACK_PAGE: equ 3   
    25  0000                    SYSTEM_STACK_PAGE_OFFSET: equ 0   
    26  0002                    SYSTEM_TOOLS: equ 2   
    27  0000                    SYSTEM_IDXPG_TRACKS_STK_PP: equ 0   
    28  0001                    SYSTEM_IDXPG_TRACKS_IDX_PP: equ 1   
    29  0000                    SYSTEM_MULTIPAGE_STACK: equ 0 
    30                          
    31                          
    32                          ;  ******* Function Class Definitions *******
    33                          ;
    34                          ;  These definitions are used to describe RAM access patterns. They provide
    35                          ;  documentation and they control prologue and epilogue macros that perform
    36                          ;  the necessary housekeeping functions for large memory model devices like
    37                          ;  the CY8C22045.
    38                          
    39  0001                    RAM_USE_CLASS_1:               equ 1   ; PUSH, POP & I/O access
    40  0002                    RAM_USE_CLASS_2:               equ 2   ; Indexed address mode on stack page
    41  0004                    RAM_USE_CLASS_3:               equ 4   ; Indexed address mode to any page
    42  0008                    RAM_USE_CLASS_4:               equ 8   ; Direct/Indirect address mode access
    43                          
    44                          ; ******* Hi Tech Specific *******
    45                          ; Turn on the expansion of all macros by default
    46                          IF (TOOLCHAIN & HITECH)
    47                          OPT EXPAND
    48                          ENDIF
    49                          ; ******* Page Pointer Manipulation Macros *******
    50                          ;
    51                          ;  ******* Page Pointer Manipulation Macros *******
    52                          ;
    53                          ;  Most of the following macros are conditionally compiled so they only
    54                          ;  produce code if the large memory model is selected.
    55                          
    56                             ;-----------------------------------------------
    57                             ;  Set Stack Page Macro
    58                             ;-----------------------------------------------
    59                             ;
    60                             ;  DESC: Modify STK_PP in the large or small memory Models.
    61                             ;
    62                             ; INPUT: Constant (e.g., SYSTEM_STACK_PAGE) that specifies the RAM page on
    63                             ;        which stack operations like PUSH and POP store and retrieve their
    64                             ;        data
    65                             ;
    66                             ;  COST: 8 instruction cycles (in LMM only)
    67                          
    68                             macro RAM_SETPAGE_STK( PG_NUMBER )
    69                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    70                                mov reg[STK_PP], @PG_NUMBER
    71                             ENDIF
    72  3C51                       endm
    73                          
    74                             ;-----------------------------------------------
    75                             ;  Set Current Page Macro
    76                             ;-----------------------------------------------
    77                             ;
    78                             ;  DESC: Modify CUR_PP in the large or small memory Models.
    79                             ;
    80                             ; INPUT: Constant value (e.g., >bFoo) for the RAM page number used in
    81                             ;        calculation of effective direct-mode address operands.
    82                             ;
    83                             ;  COST: 8 instruction cycles (in LMM only)
    84                          
    85                             macro RAM_SETPAGE_CUR( PG_NUMBER )
    86                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    87                                mov reg[CUR_PP], @PG_NUMBER
    88                             ENDIF
    89  3C51                       endm
    90                          
    91                             ;-----------------------------------------------
    92                             ;  Set Index Page Macro
    93                             ;-----------------------------------------------
    94                             ;
    95                             ;  DESC: Modify IDX_PP in the large or small emory Models.
    96                             ;
    97                             ; INPUT: Constant value (e.g., >caFoo) for the RAM page number used in
    98                             ;         calculation of effective index-mode address operands.
    99                             ;
   100                             ;  COST: 8 instruction cycles (in LMM only)
   101                          
   102                             macro RAM_SETPAGE_IDX( PG_NUMBER )
   103                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   104                                mov reg[IDX_PP], @PG_NUMBER
   105                             ENDIF
   106  3C51                       endm
   107                          
   108                             ;-----------------------------------------------
   109                             ;  Set MVI Read Page Macro
   110                             ;-----------------------------------------------
   111                             ;
   112                             ;  DESC: Modify MVR_PP in the large or small memory Models.
   113                             ;
   114                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   115                             ;        calculation of indirect address operands used in the
   116                             ;        "mvi A, [pFoo]" instructions.
   117                             ;
   118                             ;  COST: 8 instruction cycles (in LMM only)
   119                          
   120                             macro RAM_SETPAGE_MVR( PG_NUMBER )
   121                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   122                                mov reg[MVR_PP], @PG_NUMBER
   123                             ENDIF
   124  3C51                       endm
   125                          
   126                             ;-----------------------------------------------
   127                             ;  Set MVI Write Page Macro
   128                             ;-----------------------------------------------
   129                             ;
   130                             ;  DESC: Modify MVW_PP in the large or small memory Models.
   131                             ;
   132                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   133                             ;        calculation of indirect address operands used in the
   134                             ;        "mvi [pFoo], A" instructions.
   135                             ;
   136                             ;  COST: 8 instruction cycles (in LMM only)
   137                          
   138                             macro RAM_SETPAGE_MVW( PG_NUMBER )
   139                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   140                                mov reg[MVW_PP], @PG_NUMBER
   141                             ENDIF
   142  3C51                       endm
   143                          
   144                             ;-----------------------------------------------
   145                             ;  Force Index Page Pointer to Stack Page
   146                             ;-----------------------------------------------
   147                             ;
   148                             ;  DESC: Map index-mode operands onto the stack page by modifying IDX_PP.
   149                             ;        See also RAM_LOCK_INDEX_TO_STACKPAGE.
   150                             ;
   151                             ; INPUT: None
   152                             ;
   153                             ;  COST: 8 instruction cycles (in LMM only)
   154                          
   155                             macro RAM_SETPAGE_IDX2STK
   156                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   157                                IF ( SYSTEM_MULTIPAGE_STACK )
   158                                   mov   A, reg[STK_PP]
   159                                   mov   reg[IDX_PP], A
   160                                ELSE
   161                                   RAM_SETPAGE_IDX SYSTEM_STACK_PAGE
   162                                ENDIF
   163                             ENDIF
   164  3C51                       endm
   165                          
   166                             ;-----------------------------------------------
   167                             ;  Change Memory Mode
   168                             ;-----------------------------------------------
   169                             ;
   170                             ;  DESC: Modify FLAG_PAGEMODE bits in the large and small memory Models.
   171                             ;
   172                             ; INPUT: Constant value for PGMODE bitfield of CPU Flag register, F.
   173                             ;        See FLAG_PGMODE_{x} constants in M8C.INC.
   174                             ;
   175                             ;  COST: 8 instruction cycles (in LMM only)
   176                          
   177                             macro RAM_CHANGE_PAGE_MODE( MODE )
   178                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   179                                and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
   180                                or    F,  FLAG_PGMODE_MASK & @MODE
   181                             ENDIF
   182  3C51                       endm
   183                          
   184                             ;-----------------------------------------------
   185                             ;  Set Large Memory Model Native Paging Mode
   186                             ;-----------------------------------------------
   187                             ;
   188                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   189                             ;        paging mode *IFF* a simple "OR" is guaranteed to work---for
   190                             ;        example, in an ISR, when the PGMODE bits have been cleared
   191                             ;        to zero. If a simple "OR" is not guaranteed to work, use
   192                             ;        the slower RAM_RESTORE_NATIVE_PAGING instead.
   193                             ;
   194                             ; INPUT: none
   195                             ;
   196                             ;  COST: 4 instruction cycles (in LMM only)
   197                          
   198                             macro RAM_SET_NATIVE_PAGING
   199                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   200                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   201                                or    F,  FLAG_PGMODE_11b            ; LMM w/ IndexPage<==>StackPage
   202                             ENDIF ;  PGMODE LOCKED
   203                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   204                                or    F,  FLAG_PGMODE_10b            ; LMM with independent IndexPage
   205                             ENDIF ; PGMODE FREE
   206                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   207  3C51                       endm
   208                          
   209                             ;-----------------------------------------------
   210                             ; Restore Large Memory Model Native Paging Mode
   211                             ;-----------------------------------------------
   212                             ;
   213                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   214                             ;        paging mode. Always works because it clears the PGMODE bits
   215                             ;        before OR-ing in the new ones. See RAM_RESTORE_NATIVE_PAGING
   216                             ;        for a faster method.
   217                             ;
   218                             ; INPUT: none
   219                             ;
   220                             ;  COST: 8 instruction cycles (in LMM only)
   221                          
   222                             macro RAM_RESTORE_NATIVE_PAGING
   223                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   224                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   225                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_11b ; LMM w/ IndexPage<==>StackPage
   226                             ENDIF ;  PGMODE LOCKED
   227                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   228                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b ; LMM with independent IndexPage
   229                             ENDIF ; PGMODE FREE
   230                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   231  3C51                       endm
   232                          
   233                             ;-----------------------------------------------
   234                             ; Force indexed addr mode operands to Stack Pg
   235                             ;-----------------------------------------------
   236                             ;
   237                             ;  DESC: Force instructions that use indexed address mode to reference the
   238                             ;        stack page (as defined by STK_PP). This macro sets the "Indexed
   239                             ;        Stack Mode" bit (LSB) of the PGMODE bit field in the CPU Flag
   240                             ;        register, F. (See also RAM_SETPAGE_IDX2STK, above.)
   241                             ;
   242                             ; INPUT: none
   243                             ;
   244                             ;  COST: 4 instruction cycles (in LMM only)
   245                          
   246                             macro RAM_X_POINTS_TO_STACKPAGE
   247                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   248                                or   F, FLAG_PGMODE_01b
   249                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   250  3C51                       endm
   251                          
   252                             ;-----------------------------------------------
   253                             ;  Force indexed addr mode operands to Index Pg
   254                             ;-----------------------------------------------
   255                             ;
   256                             ;  DESC: Permit instructions that use indexed address mode to reference page
   257                             ;        zero or the page pointed to by the IDX_PP register, depending on the
   258                             ;        setting of the MSb (or "Direct Page Mode" bit) of the PGMODE bits
   259                             ;        in the CPU Flag register, F. (This macro clears the PGMODE LSb.)
   260                             ;
   261                             ; INPUT: none
   262                             ;
   263                             ;  COST: 4 instruction cycles (in LMM only)
   264                          
   265                             macro RAM_X_POINTS_TO_INDEXPAGE
   266                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   267                                and  F, ~FLAG_PGMODE_01b
   268                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   269  3C51                       endm
   270                          
   271                             ;-----------------------------------------------
   272                             ;  Function Prologue
   273                             ;-----------------------------------------------
   274                             ;
   275                             ;  Prologue for functions that run in the LMM and SMM.
   276                             ;
   277                          
   278                             macro RAM_PROLOGUE( ACTUAL_CLASS )
   279                          
   280                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   281                             ; Nothing to do
   282                             ENDIF ; RAM_USE_CLASS_1
   283                          
   284                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   285                                IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   286                                   RAM_X_POINTS_TO_STACKPAGE         ; exit native paging mode!
   287                                ENDIF
   288                             ENDIF ; RAM_USE_CLASS_2
   289                          
   290                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   291                                IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   292                                   RAM_X_POINTS_TO_INDEXPAGE         ; exit native paging mode!
   293                                ENDIF
   294                             ENDIF ; RAM_USE_CLASS_3
   295                          
   296                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   297                             ; Nothing to do
   298                             ENDIF ; RAM_USE_CLASS_4
   299                          
   300  3C51                       endm
   301                          
   302                             ;-----------------------------------------------
   303                             ;  Function Epilogue
   304                             ;-----------------------------------------------
   305                             ;
   306                             ;  Prologue for functions that run in the LMM and SMM.
   307                             ;
   308                          
   309                             macro RAM_EPILOGUE( ACTUAL_CLASS )
   310                          
   311                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   312                             ; Nothing to do
   313                             ENDIF ; RAM_USE_CLASS_1
   314                          
   315                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   316                                RAM_RESTORE_NATIVE_PAGING
   317                             ENDIF ; RAM_USE_CLASS_2
   318                          
   319                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   320                                RAM_RESTORE_NATIVE_PAGING
   321                             ENDIF ; RAM_USE_CLASS_3
   322                          
   323                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   324                             ; Nothing to do
   325                             ENDIF ; RAM_USE_CLASS_4
   326                          
   327  3C51                       endm
   328                          
   329                             ;-----------------------------------------------
   330                             ;  Preserve Register
   331                             ;-----------------------------------------------
   332                             ;
   333                             ;  DESC: Preserve a register value on the stack
   334                             ;
   335                             ; INPUT: Name or address of register in I/O Space
   336                             ;        The I/O bank is an implicit parameter. That is, this function will
   337                             ;        Access the I/O bank currently specified by the CPU Flag register.
   338                             ;
   339                             ;  USES: CPU 'A' register
   340                             ;
   341                             ;  COST: 9 instruction cycles
   342                          
   343                             macro REG_PRESERVE( IOReg )
   344                             mov   A, reg[ @IOReg ]
   345                             push  A
   346  3C51                       endm
   347                          
   348                             ;-----------------------------------------------
   349                             ;  Restore Register
   350                             ;-----------------------------------------------
   351                             ;
   352                             ;  DESC: Restore a register value from the stack
   353                             ;
   354                             ; INPUT: Name or address of register in I/O Space
   355                             ;        The I/O bank is an implicit parameter. That is, this function will
   356                             ;        Access the I/O bank currently specified by the CPU Flag register.
   357                             ;
   358                             ;  USES: CPU 'A' register
   359                             ;
   360                             ;  COST: 10 instruction cycles
   361                          
   362                             macro REG_RESTORE( IOReg )
   363                             pop   A
   364                             mov   reg[ @IOReg ], A
   365  3C51                       endm
   366                          
   367                             ;-----------------------------------------------
   368                             ;  Preserve Volatile Page Pointer Registers
   369                             ;-----------------------------------------------
   370                             ;
   371                             ;  DESC: Invoked by ISRs before switching to the LMM mode and calling
   372                             ;        functions that require on it.
   373                             ;
   374                             ; INPUT: none
   375                             ;
   376                             ;  USES: CPU 'A' register
   377                             ;
   378                             ;  COST: 45 instruction cycles (in LMM only)
   379                          
   380                             macro ISR_PRESERVE_PAGE_POINTERS
   381                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   382                                REG_PRESERVE CUR_PP
   383                                REG_PRESERVE IDX_PP
   384                                REG_PRESERVE MVR_PP
   385                                REG_PRESERVE MVW_PP
   386                             ENDIF
   387  3C51                       endm
   388                          
   389                             ;-----------------------------------------------
   390                             ;  Restore Volatile Page Pointer Registers
   391                             ;-----------------------------------------------
   392                             ;
   393                             ;  DESC: Undo for RAM_PRESERVE_PAGE_POINTERS macro. Invoked by ISRs after
   394                             ;        calling functions that run in the LMM mode and before executing
   395                             ;        the RETI instruction.
   396                             ;
   397                             ; INPUT: none
   398                             ;
   399                             ;  USES: CPU 'A' register
   400                             ;
   401                             ;  COST: 50 instruction cycles (in LMM only)
   402                          
   403                             macro ISR_RESTORE_PAGE_POINTERS
   404                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   405                                REG_RESTORE MVW_PP
   406                                REG_RESTORE MVR_PP
   407                                REG_RESTORE IDX_PP
   408                                REG_RESTORE CUR_PP
   409                             ENDIF
   410                             endm
      + 3C51                    
      + 3C51                    ; end of file Memory.inc
     1                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     2                          ;;;
     3                          ;;;  M8C.INC -- Microcontroller Device System Declarations
     4                          ;;;
     5                          ;;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
     6                          ;;;
     7                          ;;;  This file provides address constants, bit field masks and a set of macro
     8                          ;;;  facilities for the Cypress Semiconductor CY8C22045 Microcontroller devices.
     9                          ;;;
    10                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    11                          
    12                          ;;=============================================================================
    13                          ;; Definition of abbreviations used in the descriptions below
    14                          ;;  (RW)   The register or bit supports reads and writes
    15                          ;;  (W)    The register or bit is write-only
    16                          ;;  (R)    The register or bit is read-only
    17                          ;;  (#)    Access to the register is bit specific (see the family datasheet)
    18                          ;;  (RC)   The register or bit can be read, but writing a 0 will clear it,
    19                          ;;         writing a 1 will have no effect.
    20                          ;;=============================================================================
    21                          
    22                          ;;=============================================================================
    23                          ;;      System Registers
    24                          ;;=============================================================================
    25                          
    26                          ;----------------------------
    27                          ;  Flag Register Bit Fields
    28                          ;----------------------------
    29  00C0                    FLAG_PGMODE_MASK:  equ 0C0h     ; Paging control for > 256 bytes of RAM
    30  0000                    FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
    31  0040                    FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
    32  0080                    FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
    33  00C0                    FLAG_PGMODE_3:     equ 0C0h       ; Direct to CUR_PP page, indexed to STK_PP page
    34  0000                    FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
    35  0040                    FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
    36  0080                    FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
    37  00C0                    FLAG_PGMODE_11b:   equ 0C0h       ; Same as PGMODE_3
    38  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    39  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    40  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    41  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    42  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    43                          
    44                          
    45                          ;;=============================================================================
    46                          ;;      Register Space, Bank 0
    47                          ;;=============================================================================
    48                          
    49                          ;------------------------------------------------
    50                          ;  Port Registers
    51                          ;  Note: Also see this address range in Bank 1.
    52                          ;------------------------------------------------
    53                          ; Port 0
    54  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    55  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    56  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    57  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    58                          ; Port 1
    59  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    60  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    61  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    62  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    63                          ; Port 2
    64  0008                    PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
    65  0009                    PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
    66  000A                    PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
    67  000B                    PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
    68                          ; Port 3
    69  000C                    PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
    70  000D                    PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
    71  000E                    PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
    72  000F                    PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
    73                          ; Port 4
    74  0010                    PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
    75  0011                    PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
    76  0012                    PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
    77  0013                    PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
    78                          
    79                          ;------------------------------------------------
    80                          ;  Digital PSoC(tm) block Registers
    81                          ;  Note: Also see this address range in Bank 1.
    82                          ;------------------------------------------------
    83                          ; Digital PSoC block 00, Basic Type C
    84  0020                    DBC00DR0:     equ 20h          ; data register 0                          (#)
    85  0021                    DBC00DR1:     equ 21h          ; data register 1                          (W)
    86  0022                    DBC00DR2:     equ 22h          ; data register 2                          (RW)
    87  0023                    DBC00CR0:     equ 23h          ; control & status register 0              (#)
    88                          
    89                          ; Digital PSoC block 01, Basic Type C
    90  0024                    DBC01DR0:     equ 24h          ; data register 0                          (#)
    91  0025                    DBC01DR1:     equ 25h          ; data register 1                          (W)
    92  0026                    DBC01DR2:     equ 26h          ; data register 2                          (RW)
    93  0027                    DBC01CR0:     equ 27h          ; control & status register 0              (#)
    94                          
    95                          ; Digital PSoC block 02, Communications Type C
    96  0028                    DCC02DR0:     equ 28h          ; data register 0                          (#)
    97  0029                    DCC02DR1:     equ 29h          ; data register 1                          (W)
    98  002A                    DCC02DR2:     equ 2Ah          ; data register 2                          (RW)
    99  002B                    DCC02CR0:     equ 2Bh          ; control & status register 0              (#)
   100                          
   101                          ; Digital PSoC block 03, Communications Type C
   102  002C                    DCC03DR0:     equ 2Ch          ; data register 0                          (#)
   103  002D                    DCC03DR1:     equ 2Dh          ; data register 1                          (W)
   104  002E                    DCC03DR2:     equ 2Eh          ; data register 2                          (RW)
   105  002F                    DCC03CR0:     equ 2Fh          ; control & status register 0              (#)
   106                          
   107                          ; Digital PSoC block 10, Basic Type C
   108  0030                    DBC10DR0:     equ 30h          ; data register 0                          (#)
   109  0031                    DBC10DR1:     equ 31h          ; data register 1                          (W)
   110  0032                    DBC10DR2:     equ 32h          ; data register 2                          (RW)
   111  0033                    DBC10CR0:     equ 33h          ; control & status register 0              (#)
   112                          
   113                          ; Digital PSoC block 11, Basic Type C
   114  0034                    DBC11DR0:     equ 34h          ; data register 0                          (#)
   115  0035                    DBC11DR1:     equ 35h          ; data register 1                          (W)
   116  0036                    DBC11DR2:     equ 36h          ; data register 2                          (RW)
   117  0037                    DBC11CR0:     equ 37h          ; control & status register 0              (#)
   118                          
   119                          ; Digital PSoC block 12, Communications Type C
   120  0038                    DCC12DR0:     equ 38h          ; data register 0                          (#)
   121  0039                    DCC12DR1:     equ 39h          ; data register 1                          (W)
   122  003A                    DCC12DR2:     equ 3Ah          ; data register 2                          (RW)
   123  003B                    DCC12CR0:     equ 3Bh          ; control & status register 0              (#)
   124                          
   125                          ; Digital PSoC block 13, Communications Type C
   126  003C                    DCC13DR0:     equ 3Ch          ; data register 0                          (#)
   127  003D                    DCC13DR1:     equ 3Dh          ; data register 1                          (W)
   128  003E                    DCC13DR2:     equ 3Eh          ; data register 2                          (RW)
   129  003F                    DCC13CR0:     equ 3Fh          ; control & status register 0              (#)
   130                          
   131                          ;-------------------------------------
   132                          ;  Analog Control Registers
   133                          ;-------------------------------------
   134  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
   135  00C0                    AMX_IN_ACI3:          equ C0h    ; MASK: column 3 input mux
   136  0030                    AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
   137  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
   138  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
   139                          
   140  0061                    AMUX_CFG:      equ 61h          ; Analog MUX Configuration
   141  0030                    AMUX_CFG_INTCAP:       equ 30h    ;
   142  000E                    AMUX_CFG_MUXCLK:  	  equ 0Eh	 ;
   143  0001                    AMUX_CFG_EN:		  	  equ 01h	 ;
   144+                         
   145+                         ; old declarations DO NOT USE
   146+ 0061                    AMUXCFG:      equ 61h          ; Analog MUX Configuration
   147+ 0030                    AMUXCFG_INTCAP:       equ 30h    ;
   148  000E                    AMUXCFG_MUXCLK:  	  equ 0Eh	 ;
   149  0001                    AMUXCFG_EN:		  	  equ 01h	 ;
   150                          
   151  0062                    PWM_CR:       equ 62h          ; Pulse-Width Modulator Control
   152  0038                    PWM_CR_HIGH:          equ 38h    ; MASK: PWM high time
   153  0006                    PWM_CR_LOW:           equ 06h	 ; MASK: PWM low time
   154  0001                    PWM_CR_EN:            equ 01h	 ; MASK: Enable/Disable PWM function
   155                          
   156  0063                    ARF_CR:       equ 63h          ; Analog Reference Control
   157                          
   158  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus Register           (#)
   159  0080                    CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
   160  0040                    CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
   161  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
   162  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
   163  0008                    CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
   164  0004                    CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
   165  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
   166  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   167                          
   168  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   169  0020                    CMP_CR1_CLDIS1:       equ 20h    ; MASK: Column 1 comparator output latch
   170  0010                    CMP_CR1_CLDIS0:	      equ 10h    ; MASK: Column 0 comparator output latch
   171                          
   172  0068                    ADC0_CR:      equ 68h          ; Analog Column 0 Configuration
   173  0080                    ADC0_CR_CMPST:        equ 80h    ;
   174  0040                    ADC0_CR_LOREN:        equ 40h    ;
   175  0020                    ADC0_CR_SHEN:         equ 20h    ;
   176  0008                    ADC0_CR_CBSRC:        equ 08h    ;
   177  0004                    ADC0_CR_ADCM:         equ 04h    ;
   178  0001                    ADC0_CR_EN:	          equ 01h    ;
   179                          
   180  0069                    ADC1_CR:      equ 69h          ; Analog Column 1 Configuration
   181  0080                    ADC1_CR_CMPST:        equ 80h    ;
   182  0040                    ADC1_CR_LOREN:        equ 40h    ;
   183  0020                    ADC1_CR_SHEN:         equ 20h    ;
   184  0008                    ADC1_CR_CBSRC:        equ 08h    ;
   185  0004                    ADC1_CR_ADCM:         equ 04h    ;
   186  0001                    ADC1_CR_EN:	          equ 01h    ;
   187                          
   188                          ; Continuous Time PSoC block Type E Row 0 Col 0
   189  0072                    ACE00CR1:     equ 72h          ; Control register 1                       (RW)
   190  0073                    ACE00CR2:     equ 73h          ; Control register 2                       (RW)
   191                          
   192                          ; Continuous Time PSoC block Type E Row 0 Col 1
   193  0076                    ACE01CR1:     equ 76h          ; Control register 1                       (RW)
   194  0077                    ACE01CR2:     equ 77h          ; Control register 2                       (RW)
   195                          
   196                          ; Switched Cap PSoC blockType E Row 1 Col 0
   197  0080                    ASE10CR0:     equ 80h          ; Control register 0                       (RW)
   198                          
   199                          ; Switched Cap PSoC blockType E Row 1 Col 1
   200  0084                    ASE11CR0:     equ 84h          ; Control register 0                       (RW)
   201                          
   202                          ;-----------------------------------------------
   203                          ;  Global General Purpose Data Registers
   204                          ;-----------------------------------------------
   205  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   206  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   207  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   208  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   209                          
   210                          ;------------------------------------------------
   211                          ;  Row Digital Interconnects
   212                          ;
   213                          ;  Note: the following registers are mapped into
   214                          ;  both register bank 0 AND register bank 1.
   215                          ;------------------------------------------------
   216                          
   217  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   218  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   219  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   220  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   221  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   222  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   223  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   224                          
   225  00B8                    RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
   226  00B9                    RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
   227  00BA                    RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
   228+ 00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   229+ 00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   230  00BD                    RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
   231  00BE                    RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
   232                          
   233                          ;-----------------------------------------------
   234                          ;  Ram Page Pointers
   235                          ;-----------------------------------------------
   236  00D0                    CUR_PP:      equ 0D0h           ; Current   Page Pointer
   237  00D1                    STK_PP:      equ 0D1h           ; Stack     Page Pointer
   238  00D3                    IDX_PP:      equ 0D3h           ; Index     Page Pointer
   239  00D4                    MVR_PP:      equ 0D4h           ; MVI Read  Page Pointer
   240  00D5                    MVW_PP:      equ 0D5h           ; MVI Write Page Pointer
   241                          
   242                          ;------------------------------------------------
   243                          ;  I2C Configuration Registers
   244                          ;------------------------------------------------
   245  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   246  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   247  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   248  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   249  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   250  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   251  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   252  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   253  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   254  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   255                          
   256  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   257  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   258  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   259  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   260  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   261  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   262  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   263  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   264  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   265                          
   266  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   267                          
   268  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   269  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   270  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   271  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   272  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   273                          
   274                          ;------------------------------------------------
   275                          ;  System and Global Resource Registers
   276                          ;------------------------------------------------
   277  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   278                                                         ; Use INT_MSK0 bit field masks
   279  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   280                                                         ; Use INT_MSK1 bit field masks
   281  00DC                    INT_CLR2:     equ 0DCh          ; Interrupt Clear Register 2               (RW)
   282                                                         ; Use INT_MSK2 bit field masks
   283  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   284                                                         ; Use INT_MSK3 bit field masks
   285                          
   286  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   287  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   288  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   289                          
   290  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   291  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   292  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   293  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   294  0010                    INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
   295  0008                    INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
   296  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   297  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   298  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   299                          
   300  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   301  0080                    INT_MSK1_DCC13:            equ 80h ; MASK: enable/disable DCC13 block interrupt
   302  0040                    INT_MSK1_DCC12:            equ 40h ; MASK: enable/disable DCC12 block interrupt
   303  0020                    INT_MSK1_DBC11:            equ 20h ; MASK: enable/disable DBC11 block interrupt
   304  0010                    INT_MSK1_DBC10:            equ 10h ; MASK: enable/disable DBC10 block interrupt
   305  0008                    INT_MSK1_DCC03:            equ 08h ; MASK: enable/disable DCC03 block interrupt
   306  0004                    INT_MSK1_DCC02:            equ 04h ; MASK: enable/disable DCC02 block interrupt
   307  0002                    INT_MSK1_DBC01:            equ 02h ; MASK: enable/disable DBC01 block interrupt
   308  0001                    INT_MSK1_DBC00:            equ 01h ; MASK: enable/disable DBC00 block interrupt
   309                          
   310  00DF                    INT_MSK2:     equ DFh			; Custom block Mask Register			   (RW)
   311  0010                    INT_MSK2_SARADC:           equ 10h ; MASK: enable/disable SARADC block interrupt
   312  0020                    INT_MSK2_CSD0:             equ 20h ; MASK: enable/disable CSD0 block interrupt
   313  0040                    INT_MSK2_CSD1:             equ 40h ; MASK: enable/disable CSD1 block interrupt
   314  0080                    INT_MSK2_RTC:              equ 80h ; MASK: enable/disable RTC block interrupt
   315                          
   316  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   317  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   318                          
   319                          ;------------------------------------------------------
   320                          ;  MAC Registers
   321                          ;------------------------------------------------------
   322                          
   323  00E8                    MUL0_X:       equ 0E8h          ; Multiply Input X Register                (W)
   324  00E9                    MUL0_Y:       equ 0E9h          ; Multiply Input Y Register                (W)
   325  00EA                    MUL0_DH:      equ 0EAh          ; Multiply Result High Byte Register       (R)
   326  00EB                    MUL0_DL:      equ 0EBh          ; Multiply Result Low Byte Register        (R)
   327                          
   328  00EC                    ACC0_DR1:     equ 0ECh          ; Accumulator Data Register 1              (RW)
   329  00ED                    ACC0_DR0:     equ 0EDh          ; Accumulator Data Register 0              (RW)
   330  00EE                    ACC0_DR3:     equ 0EEh          ; Accumulator Data Register 3              (RW)
   331  00EF                    ACC0_DR2:     equ 0EFh          ; Accumulator Data Register 2              (RW)
   332                          
   333                          ; DECIMATOR Control Registers
   334  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   335  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   336                          
   337                          ;------------------------------------------------------
   338                          ;  System Status and Control Registers
   339                          ;
   340                          ;  Note: The following registers are mapped into both
   341                          ;        register bank 0 AND register bank 1.
   342                          ;------------------------------------------------------
   343  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   344                                                             ; Use FLAG_ masks defined at top of file
   345                          
   346  00FD                    DAC_D:        equ 0FDh		   ; DAC Data Register                        (RW)
   347                          
   348  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   349  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: flag, Internal Reset Status bit
   350  0010                    CPU_SCR1_SLIMO:         equ 10h	   ; MASK: Slow IMO (internal main osc) enable
   351  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   352  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   353  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   354                          
   355  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   356  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   357  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   358  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   359  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   360  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   361                          
   362                          ;------------------------------------------------------
   363                          ;  Neon Capsense Digital Control Registers
   364                          ;------------------------------------------------------
   365  0050                    CSD0_DR0_L:				equ 50h		; Capsense 0 data low 0				(RW)
   366  0054                    CSD0_DR0_H:				equ 54h		; Capsense 0 data high 0			(RW)
   367  0058                    CSD1_DR0_L:				equ 58h		; Capsense 1 data low 0				(RW)
   368  005C                    CSD1_DR0_H:				equ 5Ch		; Capsense 1 data high 0			(RW)
   369  0051                    CSD0_DR1_L:				equ 51h		; Capsense 0 data low 1				(RW)
   370  0055                    CSD0_DR1_H:				equ 55h		; Capsense 0 data high 1			(RW)
   371  0059                    CSD1_DR1_L:				equ 59h		; Capsense 1 data low 1				(RW)
   372  005D                    CSD1_DR1_H:				equ 5Dh		; Capsense 1 data high 1			(RW)
   373  0052                    CSD0_CNT_L:				equ 52h		; Capsense 0 counter low			(RW)
   374  0056                    CSD0_CNT_H:				equ 56h		; Capsense 0 counter high			(RW)
   375  005A                    CSD1_CNT_L:				equ 5Ah		; Capsense 1 counter low			(RW)
   376  005E                    CSD1_CNT_H:				equ	5Eh		; Capsense 1 counter high			(RW)
   377  0053                    CSD0_CR0:				equ 53h		; Capsense 0 control 0				(RW)
   378  005B                    CSD1_CR0:				equ 5Bh		; Capsense 1 control 0				(RW)
   379  0057                    CSD0_CR1:				equ 57h		; Capsense 0 control 1				(RW)
   380  005F                    CSD1_CR1:				equ 5Fh		; Capsense 1 control 1				(RW)
   381                          
   382                          ;------------------------------------------------------
   383                          ;  Neon Analog Registers
   384                          ;------------------------------------------------------
   385  0065                    ASY_CR:					equ 65h		; Analog Synchronization Control	(RW)
   386  006A                    ADC_DH:					equ 6Ah		; ADC data high						(RW)
   387  006B                    ADC_DL:					equ 6Bh		; ADC data low						(RW)
   388  00C8                    PWMVREF0:				equ C8h		; PWM Voltage Reference 0			(RW)
   389  00C9                    PWMVREF1:				equ C9h		; PWM Voltage Reference 1			(RW)
   390  00CB                    PWMSRC:					equ CBh		; PWM Source						(RW)
   391  00CA                    IDACMODE:				equ CAh		; IDAC Mode							(RW)
   392  00FC                    IDACR_D:				equ FCh		; Analog Mux DAC data 0				(RW)
   393  00FD                    IDACL_D:				equ FDh		; Analog Mux DAC data 1				(RW)
   394                          
   395                          ;------------------------------------------------------
   396                          ;  Neon Digital Registers
   397                          ;------------------------------------------------------
   398  00B7                    RDI0DSM:				equ B7h		; Row Digital Interconnect input select 0	(RW)
   399  00BF                    RDI1DSM:				equ BFh		; Row Digital Interconnect input select 1	(RW)
   400                          
   401                          ;------------------------------------------------------
   402                          ;  Neon Test Registers
   403                          ;------------------------------------------------------
   404  00CC                    TSCR0:					equ CCh		; Tsource 0							(RW)
   405  00CD                    TSCMPH:					equ CDh		; TSCMP high						(RW)
   406  00CE                    TSCMPL:					equ CEh		; TSCMP low							(RW)
   407  00CF                    TSCR1:					equ CFh		; Tsource 1							(RW)
   408                          
   409                          ;;=============================================================================
   410                          ;;      Register Space, Bank 1
   411                          ;;=============================================================================
   412                          
   413                          ;------------------------------------------------
   414                          ;  Port Registers
   415                          ;  Note: Also see this address range in Bank 0.
   416                          ;------------------------------------------------
   417                          ; Port 0
   418  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   419  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   420  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   421  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   422                          
   423                          ; Port 1
   424  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   425  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   426  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   427  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   428                          
   429                          ; Port 2
   430  0008                    PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
   431  0009                    PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
   432  000A                    PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
   433  000B                    PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
   434                          
   435                          ; Port 3
   436  000C                    PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
   437  000D                    PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
   438  000E                    PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
   439  000F                    PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
   440                          
   441                          ; Port 4
   442  0010                    PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
   443  0011                    PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
   444  0012                    PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
   445  0013                    PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
   446                          
   447                          ;------------------------------------------------
   448                          ;  Digital PSoC(tm) block Registers
   449                          ;  Note: Also see this address range in Bank 0.
   450                          ;------------------------------------------------
   451                          
   452                          ; Digital PSoC block 00, Basic Type C
   453  0020                    DBC00FN:      equ 20h          ; Function Register                        (RW)
   454  0021                    DBC00IN:      equ 21h          ;    Input Register                        (RW)
   455  0022                    DBC00OU:      equ 22h          ;   Output Register                        (RW)
   456  0023                    DBC00CR1:     equ 23h          ;   control & status register 1            (RW)
   457                          
   458                          ; Digital PSoC block 01, Basic Type C
   459  0024                    DBC01FN:      equ 24h          ; Function Register                        (RW)
   460  0025                    DBC01IN:      equ 25h          ;    Input Register                        (RW)
   461  0026                    DBC01OU:      equ 26h          ;   Output Register                        (RW)
   462  0027                    DBC01CR1:     equ 27h          ;   control & status register 1            (RW)
   463                          
   464                          ; Digital PSoC block 02, Communications Type C
   465  0028                    DCC02FN:      equ 28h          ; Function Register                        (RW)
   466  0029                    DCC02IN:      equ 29h          ;    Input Register                        (RW)
   467  002A                    DCC02OU:      equ 2Ah          ;   Output Register                        (RW)
   468  002B                    DBC02CR1:     equ 2Bh          ;   control & status register 1            (RW)
   469                          
   470                          ; Digital PSoC block 03, Communications Type C
   471  002C                    DCC03FN:      equ 2Ch          ; Function Register                        (RW)
   472  002D                    DCC03IN:      equ 2Dh          ;    Input Register                        (RW)
   473  002E                    DCC03OU:      equ 2Eh          ;   Output Register                        (RW)
   474  0029                    DBC03CR1:     equ 29h          ;   control & status register 1            (RW)
   475                          
   476                          ; Digital PSoC block 10, Basic Type C
   477  0030                    DBC10FN:      equ 30h          ; Function Register                        (RW)
   478  0031                    DBC10IN:      equ 31h          ;    Input Register                        (RW)
   479  0032                    DBC10OU:      equ 32h          ;   Output Register                        (RW)
   480  0033                    DBC10CR1:     equ 33h          ;   control & status register 1            (RW)
   481                          
   482                          ; Digital PSoC block 11, Basic Type C
   483  0034                    DBC11FN:      equ 34h          ; Function Register                        (RW)
   484  0035                    DBC11IN:      equ 35h          ;    Input Register                        (RW)
   485  0036                    DBC11OU:      equ 36h          ;   Output Register                        (RW)
   486  0037                    DBC11CR1:     equ 37h          ;   control & status register 1            (RW)
   487                          
   488                          ; Digital PSoC block 12, Communications Type C
   489  0038                    DCC12FN:      equ 38h          ; Function Register                        (RW)
   490  0039                    DCC12IN:      equ 39h          ;    Input Register                        (RW)
   491  003A                    DCC12OU:      equ 3Ah          ;   Output Register                        (RW)
   492  003B                    DBC12CR1:     equ 3Bh          ;   control & status register 1            (RW)
   493                          
   494                          ; Digital PSoC block 13, Communications Type C
   495  003C                    DCC13FN:      equ 3Ch          ; Function Register                        (RW)
   496  003D                    DCC13IN:      equ 3Dh          ;    Input Register                        (RW)
   497  003E                    DCC13OU:      equ 3Eh          ;   Output Register                        (RW)
   498  003F                    DBC13CR1:     equ 3Fh          ;   control & status register 1            (RW)
   499                          
   500                          ;------------------------------------------------
   501                          ;  System and Global Resource Registers
   502                          ;  Note: Also see this address range in Bank 0.
   503                          ;------------------------------------------------
   504                          
   505  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   506  00C0                    CLK_CR0_ACOLUMN_3:    equ C0h    ; MASK: Specify clock for analog cloumn
   507  0030                    CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
   508  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   509  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   510                          
   511  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   512  0018                    CLK_CR1_ACLK1:        equ 18h    ; MASK: Digital PSoC block for analog source
   513  0003                    CLK_CR1_ACLK0:        equ 03h    ; MASK: Digital PSoC block for analog source
   514                          
   515  0003                    CLK_CR1_ACLK2:        equ 03h    ; Deprecated do not use
   516                          
   517  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   518  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   519                          
   520  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   521  000F                    AMD_CR0_AMOD0:        equ 0Fh    ; MASK: Modulation source for analog column 0
   522                          
   523  0064                    CMP_GO_EN:    equ 64h          ; Comparator Bus To Global Out Enable      (RW)
   524  0080                    CMP_GO_EN_GOO5:       equ 80h    ; MASK: Selected Col 1 signal to GOO5
   525  0040                    CMP_GO_EN_GOO1:       equ 40h    ; MASK: Selected Col 1 signal to GOO1
   526  0030                    CMP_GO_EN_SEL1:       equ 30h    ; MASK: Column 1 Signal Select
   527  0008                    CMP_GO_EN_GOO4:       equ 08h    ; MASK: Selected Col 0 signal to GOO4
   528  0004                    CMP_GO_EN_GOO0:       equ 04h    ; MASK: Selected Col 0 signal to GOO0
   529  0003                    CMP_GO_EN_SEL0:       equ 03h    ; MASK: Column 0 Signal Select
   530                          
   531  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   532  000F                    AMD_CR1_AMOD1:        equ 0Fh    ; MASK: Modulation ctrl for analog column 1
   533                          
   534  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   535  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   536  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   537                          
   538  006B                    CLK_CR3:      equ 6Bh          ; Analog Clock Source Control Register 3   (RW)
   539  0040                    CLK_CR3_SYS1:         equ 40h    ; MASK: Analog Clock 1 selection
   540  0030                    CLK_CR3_DIVCLK1:      equ 30h    ; MASK: Analog Clock 1 divider
   541  0004                    CLK_CR3_SYS0:         equ 04h    ; MASK: Analog Clock 0 selection
   542  0003                    CLK_CR3_DIVCLK0:      equ 03h    ; MASK: Analog Clock 0 divider
   543                          
   544                          ;------------------------------------------------
   545                          ;  Global Digital Interconnects
   546                          ;------------------------------------------------
   547                          
   548  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   549  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   550  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   551  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   552                          
   553  00A0                    GDI_O_IN_CR:  equ 0A0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   554  00A1                    GDI_E_IN_CR:  equ 0A1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   555  00A2                    GDI_O_OU_CR:  equ 0A2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   556  00A3                    GDI_E_OU_CR:  equ 0A3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   557                          
   558  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   559  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   560                          
   561                          ;------------------------------------------------
   562                          ;  Analog Mux Bus Port Enable Bits
   563                          ;------------------------------------------------
   564  00D8                    MUX_CR0:      equ 0D8h          ; Analog Mux Port 0 Bit Enables Register
   565  00D9                    MUX_CR1:      equ 0D9h          ; Analog Mux Port 1 Bit Enables Register
   566  00DA                    MUX_CR2:      equ 0DAh          ; Analog Mux Port 2 Bit Enables Register
   567  00DB                    MUX_CR3:      equ 0DBh          ; Analog Mux Port 3 Bit Enables Register
   568  00EC                    MUX_CR4:      equ 0ECh          ; Analog Mux Port 4 Bit Enables Register
   569                          
   570                          ;------------------------------------------------
   571                          ;  Clock and System Control Registers
   572                          ;------------------------------------------------
   573                          
   574  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   575  0080                    OSC_GO_EN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   576  0040                    OSC_GO_EN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   577  0020                    OSC_GO_EN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   578  0010                    OSC_GO_EN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   579  0008                    OSC_GO_EN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   580  0004                    OSC_GO_EN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   581  0002                    OSC_GO_EN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   582  0001                    OSC_GO_EN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   583                          
   584  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   585  0003                    OSC_CR4_VC3SEL:       equ 03h    ; MASK: System VC3 Clock source
   586                          
   587  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   588                          
   589  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   590  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   591  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   592  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   593  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   594  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   595  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   596  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   597  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   598  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   599  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   600  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   601  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   602  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   603  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   604  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   605  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   606  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   607                          
   608  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   609  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   610  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   611                          
   612  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   613  0080                    OSC_CR2_PLLGAIN:      equ 80h    ; MASK: High/Low gain
   614  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   615  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   616  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   617                          
   618  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   619  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   620  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   621  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   622  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   623  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   624  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   625  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   626                          
   627  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   628  0008                    VLT_CMP_NOWRITE:      equ 08h    ; MASK: Vcc below Flash Write level
   629  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   630  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   631  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   632                          
   633  00E5                    ADC0_TR:      equ 0E5h          ; ADC Column 0 Trim Register
   634  00E6                    ADC1_TR:      equ 0E6h          ; ADC Column 1 Trim Register
   635                          
   636  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   637  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   638  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   639  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   640                          
   641  00FA                    FLS_PR1:      equ 0FAh          ; Flash Program Register 1                 (RW)
   642  0003                    FLS_PR1_BANK:         equ 03h    ; MASK: Select Active Flash Bank
   643                          
   644  00FD                    DAC_CR0:       equ 0FDh          ; Analog Mux DAC Control Register 0
   645  00DC                    DAC_CR1:       equ 0DCh          ; Analog Mux DAC Control Register 1
   646  0008                    DAC_CR_IRANGE:        equ 08h    ; MASK: Sets the DAC Range low or high
   647  0006                    DAC_CR_OSCMODE:       equ 06h    ; MASK: Defines the reset mode for AMux
   648  0001                    DAC_CR_ENABLE:        equ 01h    ; MASK: Enable/Disable DAC function
   649                          
   650                          ;------------------------------------------------
   651                          ;  I2C Control Registers
   652                          ;------------------------------------------------
   653                          
   654  00AD                    I2C_ADDR:    equ 0ADh          ; I2C Address Register (RW)
   655                          
   656                          ;------------------------------------------------------
   657                          ;  Neon Analog Registers
   658                          ;------------------------------------------------------
   659  0053                    VDAC50CR0:		equ 53h			; V DAC5 control 0				(RW)
   660  0057                    VDAC51CR0:		equ 57h			; V DAC5 control 1				(RW)
   661  00A8                    ADC_CR0:		equ A8h			; ADC control 0					(RW)
   662  00A9                    ADC_CR1:		equ A9h			; ADC control 1					(RW)
   663  00AA                    ADC_CR2:		equ AAh			; ADC control 2					(RW)
   664  00AB                    ADC_CR3TRIM:	equ ABh			; ADC control 3					(RW)
   665  00AC                    ADC_CR4:		equ ACh			; ADC control 4					(RW)
   666  00E7                    VDAC_TRIM:		equ E7h			; V DAC trim					(RW)
   667                          
   668                          ;------------------------------------------------------
   669                          ;  Neon Current Sense CMP Registers
   670                          ;------------------------------------------------------
   671  0050                    CMP0CR1:		equ 50h			; CMP0 control 1				(RW)
   672  0051                    CMP0CR2:		equ 51h			; CMP0 control 2				(RW)
   673  0054                    CMP1CR1:		equ 54h			; CMP1 control 1				(RW)
   674  0055                    CMP1CR2:		equ 55h			; CMP1 control 2				(RW)
   675  0058                    CSCMPCR0:		equ 58h			; CSCMP control 0				(RW)
   676  0059                    CSCMPGOEN:		equ 59h			; CSCMO global out enable		(RW)
   677  005A                    CSLUTCR0:		equ 5Ah			; CSLUT control 0				(RW)
   678  005B                    CMPCOLMUX:		equ 5Bh			; CMP Column Mux				(RW)
   679  005C                    CMPPWMCR:		equ 5Ch			; CMP PWM control				(RW)
   680  005D                    CMPFLTCR:		equ 5Dh			; CMP filter control			(RW)
   681  005E                    CMPCLK1:		equ 5Eh			; CMP clock 1					(RW)
   682  005F                    CMPCLK0:		equ 5Fh			; CMP clock 0					(RW)
   683                          
   684                          ;------------------------------------------------------
   685                          ;  Neon Real Time Clock Registers
   686                          ;------------------------------------------------------
   687  00A4                    RTCH:			equ A4h			; Real time current hour		(RW)
   688  00A5                    RTCM:			equ A5h			; Real time current minute		(RW)
   689  00A6                    RTCS:			equ A6h			; Real time current second		(RW)
   690  00A7                    RTCCR:			equ A7h			; Real time clock control		(RW)
   691                          
   692                          ;------------------------------------------------------
   693                          ;  Analog MUX Config Registers
   694                          ;------------------------------------------------------
   695                          
   696  006A                    AMUX_CFG1:			equ 6Ah  ; Analog MUX Configuration 1
   697  0020                    AMUX_CFG1_GOINVR:	equ 20h  ;
   698  0010                    AMUX_CFG1_GOINVL:  	equ 10h	 ;
   699  000C                    AMUX_CFG1_AMUXMODR:	equ 0Ch	 ;
   700  0003                    AMUX_CFG1_AMUXMODL:	equ 03h	 ;
   701                          
   702                          ;;=============================================================================
   703                          ;;      M8C System Macros
   704                          ;;  These macros should be used when their functions are needed.
   705                          ;;=============================================================================
   706                          
   707                          ;----------------------------------------------------
   708                          ;  Swapping Register Banks
   709                          ;----------------------------------------------------
   710                              macro M8C_SetBank0
   711                              and   F, ~FLAG_XIO_MASK
   712  3C51                        endm
   713                          
   714                              macro M8C_SetBank1
   715                              or    F, FLAG_XIO_MASK
   716  3C51                        endm
   717                          
   718                          ;----------------------------------------------------
   719                          ;  Global Interrupt Enable/Disable
   720                          ;----------------------------------------------------
   721                              macro M8C_EnableGInt
   722                              or    F, FLAG_GLOBAL_IE
   723  3C51                        endm
   724                          
   725                              macro M8C_DisableGInt
   726                              and   F, ~FLAG_GLOBAL_IE
   727  3C51                        endm
   728                          
   729                          ;----------------------------------------------------
   730                          ;  Enable/Disable Interrupt Mask
   731                          ;
   732                          ;  Use the following macros to enable/disable
   733                          ;  bits in the Interrupt mask registers,
   734                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   735                          ;
   736                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   737                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   738                          ;
   739                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   740                          ;        and MASK is the bit set to enable or disable
   741                          ;----------------------------------------------------
   742                          ; Disable Interrupt Bit Mask(s)
   743                              macro M8C_DisableIntMask
   744                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   745  3C51                        endm
   746                          
   747                          ; Enable Interrupt Bit Mask(s)
   748                              macro M8C_EnableIntMask
   749                              or    reg[@0], @1               ; enable specified interrupt enable bit
   750  3C51                        endm
   751                          
   752                          ;----------------------------------------------------
   753                          ;  Clear Posted Interrupt Flag Mask
   754                          ;
   755                          ;  Use the following macros to clear the
   756                          ;  bits in the Interrupt Clear registers,
   757                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   758                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   759                          ;
   760                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   761                          ;        and MASK is the bit set to enable or disable
   762                          ;----------------------------------------------------
   763                              macro M8C_ClearIntFlag
   764                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   765  3C51                        endm
   766                          
   767                          ;----------------------------------------------------
   768                          ;  Power-On Reset & WatchDog Timer Functions
   769                          ;----------------------------------------------------
   770                              macro M8C_EnableWatchDog
   771                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   772  3C51                        endm
   773                          
   774                              macro M8C_ClearWDT
   775                              mov   reg[RES_WDT], 00h
   776  3C51                        endm
   777                          
   778                              macro M8C_ClearWDTAndSleep
   779                              mov   reg[RES_WDT], 38h
   780  3C51                        endm
   781                          
   782                          ;----------------------------------------------------
   783                          ;  Sleep, CPU Stop & Software Reset
   784                          ;----------------------------------------------------
   785                              macro M8C_Sleep
   786                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   787                              ; The next instruction to be executed depends on the state of the
   788                              ; various interrupt enable bits. If some interrupts are enabled
   789                              ; and the global interrupts are disabled, the next instruction will
   790                              ; be the one that follows the invocation of this macro. If global
   791                              ; interrupts are also enabled then the next instruction will be
   792                              ; from the interrupt vector table. If no interrupts are enabled
   793                              ; then the CPU sleeps forever.
   794  3C51                        endm
   795                          
   796                              macro M8C_Stop
   797                              ; In general, you probably don't want to do this, but here's how:
   798                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   799                              ; Next instruction to be executed is located in the interrupt
   800                              ; vector table entry for Power-On Reset.
   801  3C51                        endm
   802                          
   803                              macro M8C_Reset
   804                              ; Restore CPU to the power-on reset state.
   805                              mov A, 0
   806                              SSC
   807                              ; Next non-supervisor instruction will be at interrupt vector 0.
   808  3C51                        endm
   809                          
   810                          ;----------------------------------------------------
   811                          ; ImageCraft Code Compressor Actions
   812                          ;----------------------------------------------------
   813                              ; Suspend Code Compressor
   814                              ; Must not span a RET or RETI instruction
   815                              ; without resuming code compression
   816                              macro Suspend_CodeCompressor
   817                              or   F, 0
   818  3C51                        endm
   819                          
   820                              ; Resume Code Compression
   821                              macro Resume_CodeCompressor
   822                              add  SP, 0
   823  3C51                        endm
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  FILENAME:   UART_SensorINT.asm
     4                          ;;  Version: 5.3, Updated on 2013/5/19 at 10:44:49
     5                          ;;  Generated by PSoC Designer 5.4.2946
     6                          ;;
     7                          ;;  DESCRIPTION:  UART Interrupt Service Routine.
     8                          ;;-----------------------------------------------------------------------------
     9                          ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
    10                          ;;*****************************************************************************
    11                          ;;*****************************************************************************
    12                          
    13                          
    14                          include "UART_Sensor.inc"
    15                          include "memory.inc"
    16                          include "m8c.inc"
    17                          
    18                          ;-----------------------------------------------
    19                          ;  Global Symbols
    20                          ;-----------------------------------------------
    21                          export  _UART_Sensor_TX_ISR
    22                          export  _UART_Sensor_RX_ISR
    23                          
    24                          IF (UART_Sensor_RXBUF_ENABLE)
    25                          export  UART_Sensor_aRxBuffer
    26                          export _UART_Sensor_aRxBuffer
    27                          export  UART_Sensor_bRxCnt
    28                          export _UART_Sensor_bRxCnt
    29                          export  UART_Sensor_fStatus
    30                          export _UART_Sensor_fStatus
    31                          ENDIF
    32                          
    33                          
    34                          ;-----------------------------------------------
    35                          ; Variable Allocation
    36                          ;-----------------------------------------------
    37                          AREA InterruptRAM (RAM, REL, CON)
    38                          
    39                          IF (UART_Sensor_RXBUF_ENABLE)
    40                           UART_Sensor_fStatus:
    41                          _UART_Sensor_fStatus:      BLK  1
    42                           UART_Sensor_bRxCnt:
    43                          _UART_Sensor_bRxCnt:       BLK  1
    44                          AREA UART_Sensor_RAM (RAM, REL, CON)
    45                           UART_Sensor_aRxBuffer:
    46                          _UART_Sensor_aRxBuffer:    BLK UART_Sensor_RX_BUFFER_SIZE
    47                          ENDIF
    48                          
    49                          AREA InterruptRAM (RAM, REL, CON)
    50                          
    51                          ;@PSoC_UserCode_INIT@ (Do not change this line.)
    52                          ;---------------------------------------------------
    53                          ; Insert your custom declarations below this banner
    54                          ;---------------------------------------------------
    55                          
    56                          ;------------------------
    57                          ;  Includes
    58                          ;------------------------
    59                          
    60                          
    61                          ;------------------------
    62                          ;  Constant Definitions
    63                          ;------------------------
    64                          
    65                          
    66                          ;------------------------
    67                          ; Variable Allocation
    68                          ;------------------------
    69                          
    70                          
    71                          ;---------------------------------------------------
    72                          ; Insert your custom declarations above this banner
    73                          ;---------------------------------------------------
    74                          ;@PSoC_UserCode_END@ (Do not change this line.)
    75                          
    76                          
    77                          AREA UserModules (ROM, REL, CON)
    78                          
    79                          ;-----------------------------------------------------------------------------
    80                          ;  FUNCTION NAME: _UART_Sensor_TX_ISR
    81                          ;
    82                          ;  DESCRIPTION:
    83                          ;     UART TX interrupt handler for instance UART_Sensor.
    84                          ;
    85                          ;     This is a place holder function.  If the user requires use of an interrupt
    86                          ;     handler for this function, then place code where specified.
    87                          ;-----------------------------------------------------------------------------
    88                          
    89  308A                    _UART_Sensor_TX_ISR:
    90                             ;@PSoC_UserCode_BODY_1@ (Do not change this line.)
    91                             ;---------------------------------------------------
    92                             ; Insert your custom assembly code below this banner
    93                             ;---------------------------------------------------
    94                             ;   NOTE: interrupt service routines must preserve
    95                             ;   the values of the A and X CPU registers.
    96                             
    97                             ;---------------------------------------------------
    98                             ; Insert your custom assembly code above this banner
    99                             ;---------------------------------------------------
   100                             
   101                             ;---------------------------------------------------
   102                             ; Insert a lcall to a C function below this banner
   103                             ; and un-comment the lines between these banners
   104                             ;---------------------------------------------------
   105                             
   106                             ;PRESERVE_CPU_CONTEXT
   107                             ;lcall _My_C_Function
   108                             ;RESTORE_CPU_CONTEXT
   109                             
   110                             ;---------------------------------------------------
   111                             ; Insert a lcall to a C function above this banner
   112                             ; and un-comment the lines between these banners
   113                             ;---------------------------------------------------
   114                             ;@PSoC_UserCode_END@ (Do not change this line.)
   115  308A  7E                   reti
   116                          
   117                          
   118                          ;-----------------------------------------------------------------------------
   119                          ;  FUNCTION NAME: _UART_Sensor_RX_ISR
   120                          ;
   121                          ;  DESCRIPTION:
   122                          ;     UART RX interrupt handler for instance UART_Sensor.
   123                          ;     This ISR handles the background processing of received characters if
   124                          ;     the buffer is enabled.
   125                          ;
   126                          ;
   127                          ;  The following assumes that the RX buffer feature has been enabled.
   128                          ;
   129                          ;  SIDE EFFECTS:
   130                          ;     There are 3 posible errors that may occur with the serial port.
   131                          ;      1) Parity Error
   132                          ;      2) Framing Error
   133                          ;      3) OverRun Error
   134                          ;
   135                          ;  This user module check for parity and framing error.  If either of these
   136                          ;  two errors are detected, the data is read and ignored.  When an overRun
   137                          ;  error occurs, the last byte was lost, but the current byte is valid.  For
   138                          ;  this reason this error is ignored at this time.  Code could be added to
   139                          ;  this ISR to set a flag if an error condition occurs.
   140                          ;
   141                          ;  THEORY of OPERATION:
   142                          ;     When using the RX buffer feature, the ISR collects received characters
   143                          ;     in a buffer until the user defined command terminator is detected.  After
   144                          ;     the command terminator is detected, the command bit is set and all other
   145                          ;     characters will be ignored until the command bit is reset.  Up to
   146                          ;     buffer_size - 1 characters will be collected waiting for a command
   147                          ;     terminator.  After that, the characters will be discarded, although
   148                          ;     a command determinator will still cause the command bit to be set.
   149                          ;
   150                          ;-----------------------------------------------------------------------------
   151  308B                    _UART_Sensor_RX_ISR:
   152                          
   153                             ;@PSoC_UserCode_BODY_2@ (Do not change this line.)
   154                             ;---------------------------------------------------
   155                             ; Insert your custom assembly code below this banner
   156                             ;---------------------------------------------------
   157                             ;   NOTE: interrupt service routines must preserve
   158                             ;   the values of the A and X CPU registers.
   159                             
   160                             ;---------------------------------------------------
   161                             ; Insert your custom assembly code above this banner
   162                             ;---------------------------------------------------
   163                             
   164                             ;---------------------------------------------------
   165                             ; Insert a lcall to a C function below this banner
   166                             ; and un-comment the lines between these banners
   167                             ;---------------------------------------------------
   168                             
   169                             ;PRESERVE_CPU_CONTEXT
   170                             ;lcall _My_C_Function
   171                             ;RESTORE_CPU_CONTEXT
   172                             
   173                             ;---------------------------------------------------
   174                             ; Insert a lcall to a C function above this banner
   175                             ; and un-comment the lines between these banners
   176                             ;---------------------------------------------------
   177                             ;@PSoC_UserCode_END@ (Do not change this line.)
   178                          
   179                          IF (UART_Sensor_RXBUF_ENABLE)
   180                             push A
   181                             push X
   182                             
   183                             IF SYSTEM_LARGE_MEMORY_MODEL
   184                                REG_PRESERVE IDX_PP
   185                             ENDIF
   186                             
   187                             mov  X,[UART_Sensor_bRxCnt]                             ; Load X with byte counter
   188                             mov  A,REG[UART_Sensor_RX_CONTROL_REG]                  ; Read the control register
   189                             push A                                                  ; Store copy for later test
   190                                                                                     ; IF real RX interrupt
   191                             and  A,UART_Sensor_RX_REG_FULL                          ; Did really really get an IRQ
   192                             jnz  .UARTRX_ReadRx                                     ; Data ready, go get it
   193                             pop  A                                                  ; Restore stack
   194                             jmp  .RESTORE_IDX_PP
   195                          
   196                          .UARTRX_ReadRx:
   197                             pop  A                                                  ; Restore status flags
   198                                                                                     ; IF there is no error, get data
   199                                                                                     ; Check for parity or framing error
   200                             and  A,UART_Sensor_RX_ERROR
   201                             jz   .UARTRX_NO_ERROR                                   ; If there is not an Error go read data
   202                          
   203                             or   [UART_Sensor_fStatus],A                            ; Set error flags (parity,framing,overrun
                                ) bits
   204                             tst  REG[UART_Sensor_RX_BUFFER_REG], 0x00               ; Read the data buffer to clear it.
   205                             and  A,UART_Sensor_RX_FRAMING_ERROR                     ; Check for framing error special case
   206                             jz   .RESTORE_IDX_PP                                    ; Not framing error, all done
   207                          
   208                                                                                     ; Disable and re-enable RX to reset after
   209                                                                                     ; framing error.
   210                             and   REG[UART_Sensor_RX_CONTROL_REG], ~UART_Sensor_RX_ENABLE   ; Disable RX
   211                             or    REG[UART_Sensor_RX_CONTROL_REG],  UART_Sensor_RX_ENABLE   ; Enable RX
   212                             jmp  .RESTORE_IDX_PP                                    ; Done with framing error, leave.
   213                          
   214                          
   215                          .UARTRX_NO_ERROR:
   216                             mov  A,REG[UART_Sensor_RX_BUFFER_REG ]                  ; Read the data buffer
   217                          
   218                                                                                     ; IF buffer not full
   219                             tst  [UART_Sensor_fStatus],UART_Sensor_RX_BUF_CMDTERM     ; Check for buffer full
   220                             jnz  .RESTORE_IDX_PP                                    ; All done
   221                          
   222                             cmp  A,UART_Sensor_CMD_TERM                             ; Check for End of command
   223                             jnz  .UARTRX_CHK_BACKSPACE
   224                             or   [UART_Sensor_fStatus],UART_Sensor_RX_BUF_CMDTERM   ; Set command ready bit
   225                          
   226                          
   227                          
   228                             RAM_SETPAGE_IDX >UART_Sensor_aRxBuffer
   229                             RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
   230                             mov  [X + UART_Sensor_aRxBuffer],00h                    ; Zero out last data
   231                             RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
   232                             jmp  .RESTORE_IDX_PP
   233                          
   234                          .UARTRX_CHK_BACKSPACE:                                     ; 
   235                          IF(UART_Sensor_BACKSPACE_ENABLE)                           ; Enable if backspace/delete mode
   236                             cmp  A,UART_Sensor_BACKSPACE_ENABLE                     ; Check for backspace character
   237                             jnz  .UARTRX_IGNORE                                     ; If not, skip the backspace stuff
   238                             cmp  [UART_Sensor_bRxCnt],00h                           ; Check if buffer empty
   239                             jz   .RESTORE_IDX_PP                                    ; 
   240                             dec  [UART_Sensor_bRxCnt]                               ; Decrement buffer count by one.
   241                             jmp  .RESTORE_IDX_PP
   242                          ENDIF                                                      ; 
   243                          
   244                          .UARTRX_IGNORE:
   245                          IF(UART_Sensor_RX_IGNORE_BELOW)                            ; Ignore charaters below this value
   246                             cmp  A,UART_Sensor_RX_IGNORE_BELOW                      ; If ignore char is set to 0x00, do not
   247                             jc   .RESTORE_IDX_PP                                    ; ignore any characters.
   248                          ENDIF
   249                          
   250                          .UARTRX_CHK_OVFL:                                          ; Check for MAX String here
   251                          	
   252                             RAM_SETPAGE_IDX >UART_Sensor_aRxBuffer                  ;   using idexed address mode
   253                             cmp  [UART_Sensor_bRxCnt],(UART_Sensor_RX_BUFFER_SIZE - 1)
   254                             jc   .UARTRX_ISR_GETDATA
   255                             RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
   256                             mov  [X + UART_Sensor_aRxBuffer],00h                    ; Zero out last data in the buffer
   257                             RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
   258                             or   [UART_Sensor_fStatus],UART_Sensor_RX_BUF_OVERRUN   ; Set error flags (parity,framing,overrun
                                ) bits
   259                             jmp  .RESTORE_IDX_PP
   260                          
   261                          .UARTRX_ISR_GETDATA:                                       ; IF input data == "CR", then end of comm
                                and
   262                                                                                     ; X is already loaded with pointer
   263                             RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
   264                             mov  [X+UART_Sensor_aRxBuffer],A                        ; store data in array
   265                             RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
   266                             inc  X                                                  ; Inc the pointer
   267                             mov  [UART_Sensor_bRxCnt],X                             ; Restore the pointer
   268                                                                                     ; ENDIF max string size
   269                          .RESTORE_IDX_PP:
   270                             IF SYSTEM_LARGE_MEMORY_MODEL
   271                                REG_RESTORE IDX_PP
   272                             ENDIF
   273                          
   274                          .END_UARTRX_ISR:
   275                             pop  X
   276                             pop  A
   277                          
   278                          ENDIF
   279                          
   280  308B                    UART_Sensor_RX_ISR_END:
   281  308B  7E                   reti
HI-TECH Software Macro Assembler (PSoC MCU) V9.61
Symbol Table                                                                                               Fri Jun 12 09:25:11 2015
                           HITECH 0002                          TOOLCHAIN 0002                _UART_Sensor_RX_ISR 308B  
              _UART_Sensor_TX_ISR 308A             UART_Sensor_RX_ISR_END 308B           UART_Sensor_RXBUF_ENABLE 0000  
HI-TECH Software Macro Assembler (PSoC MCU) V9.61
                                                                                                           Fri Jun 12 09:25:12 2015
     1                          ;  Generated by PSoC Designer 5.4.2946
     2                          ;
     3                          ;=============================================================================
     4                          ;  FILENAME:   GlobalParams.inc
     5                          ;  DATE:       27 September 2004
     6                          ;
     7                          ;  DESCRIPTION:
     8                          ;  Constants describing many of the global parameter settings.
     9                          ;  This file contains equates to support oscillator register initialization
    10                          ;  for the CY8C22345
    11                          ;
    12                          ;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
    13                          ;
    14                          ; NOTES:
    15                          ; Do not modify this file. It is generated by PSoC Designer each time the
    16                          ; generate application function is run. The values of the parameters in this
    17                          ; file can be modified by changing the values of the global parameters in the
    18                          ; device editor.
    19                          ;=============================================================================
    20                          ;
    21                          
    22  0003                    CPU_CLOCK:				equ	3h	;CPU clock value
    23  0007                    CPU_CLOCK_MASK:			equ	7h	;CPU clock mask
    24  0003                    CPU_CLOCK_JUST:			equ	3h	;CPU clock value justified
    25  0000                    SELECT_32K:				equ	0h		;32K select value
    26  0080                    SELECT_32K_MASK:		equ	80h		;32K select mask
    27  0000                    SELECT_32K_JUST:		equ	0h		;32K select value justified
    28  0000                    PLL_MODE:				equ	0h		;PLL mode value
    29  0040                    PLL_MODE_MASK:			equ	40h		;PLL mode mask
    30  0000                    PLL_MODE_JUST:			equ	0h		;PLL mode value justified
    31                          
    32  0002                    SLEEP_TIMER:			equ	2h		;Sleep Timer value
    33  0018                    SLEEP_TIMER_MASK:		equ	18h		;Sleep Timer mask
    34  0010                    SLEEP_TIMER_JUST:		equ	10h		;Sleep Timer value justified
    35                          
    36  0000                    SLEEP_TIMER2:			equ	0h		;Sleep Extend value
    37  0010                    SLEEP_TIMER_MASK2:		equ	10h		;Sleep Extend mask
    38  0000                    SLEEP_TIMER_JUST2:		equ	0h		;Sleep Extend value justified
    39                          
    40  0001                    SWITCH_MODE_PUMP:		equ	1h	;Switch Mode Pump setting
    41  0080                    SWITCH_MODE_PUMP_MASK:	equ	80h	;Switch Mode Pump mask
    42  0080                    SWITCH_MODE_PUMP_JUST:	equ	80h	;Switch Mode Pump justified
    43  0000                    LVD_TBEN:               equ 0   ; Low Voltage Throttle-back enable value
    44  0008                    LVD_TBEN_MASK:          equ 8  ; Low Voltage Throttle-back enable mask
    45  0000                    LVD_TBEN_JUST:          equ 0  ; Low Voltage Throttle-back enable justified
    46  0007                    TRIP_VOLTAGE:			equ	7h   ;Trip Voltage value
    47  0007                    TRIP_VOLTAGE_MASK:      equ 7h  ;Trip Voltage mask
    48  0007                    TRIP_VOLTAGE_JUST:      equ 7h  ;Trip Voltage justified
    49                                                        
    50  0010                    POWER_SETTING:			equ	10h
    51  0010                    POWER_SET_5V0:          equ 10h  ; MASK for 5.0V operation, fast and slow 
    52  0010                    POWER_SET_5V0_24MHZ:    equ 10h  ; Power Setting value for 5.0V fast      
    53  0011                    POWER_SET_5V0_6MHZ:     equ 11h  ; Power Setting value for 5.0V slow      
    54  0008                    POWER_SET_3V3:          equ 08h  ; MASK for 3.3V operation, fast and slow 
    55  0008                    POWER_SET_3V3_24MHZ:    equ 08h	 ; Power Setting value for 3.3V fast      
    56  0009                    POWER_SET_3V3_6MHZ:     equ 09h	 ; Power Setting value for 3.3V slow      
    57  0006                    POWER_SET_2V7:          equ 06h  ; MASK for 2.7V operation, fast and slow
    58  0004                    POWER_SET_2V7_12MHZ:    equ 04h	 ; MASK for 2.7V, 12MHZ operation
    59  0002                    POWER_SET_2V7_6MHZ:     equ 02h	 ; MASK for 2.7V,  6MHZ operation
    60  0001                    POWER_SET_SLOW_IMO:     equ 01h  ; MASK for slow Internal Main Oscillator (IMO) 
    61                          
    62  0001                    COMM_RX_PRESENT:		equ	1	;1 = TRUE
    63  0001                    WATCHDOG_ENABLE:		equ 1	;Watchdog Enable 1 = Enable
    64                          
    65  0007                    CLOCK_DIV_VC1:			equ	7h	;VC1 clock divider
    66  00F0                    CLOCK_DIV_VC1_MASK:		equ	f0h	;VC1 clock divider mask
    67  0070                    CLOCK_DIV_VC1_JUST:		equ	70h	;VC1 clock divider justified
    68  000F                    CLOCK_DIV_VC2:			equ	fh	;VC2 clock divider
    69  000F                    CLOCK_DIV_VC2_MASK:		equ	fh	;VC2 clock divider mask
    70  000F                    CLOCK_DIV_VC2_JUST:		equ	fh	;VC2 clock divider justified
    71  0001                    CLOCK_INPUT_VC3:		equ	1h	;VC3 clock source
    72  0003                    CLOCK_INPUT_VC3_MASK:	equ	3h	;VC3 clock source mask
    73  0001                    CLOCK_INPUT_VC3_JUST:	equ	1h	;VC3 clock source justified
    74  0026                    CLOCK_DIV_VC3:			equ	26h	;VC3 clock divider
    75  00FF                    CLOCK_DIV_VC3_MASK:		equ	ffh	;VC3 clock divider mask
    76  0026                    CLOCK_DIV_VC3_JUST:		equ	26h	;VC3 clock divider justified
    77  0000                    SYSCLK_SOURCE:				equ	(0h | 0h)	;SysClk Source setting
    78  0006                    SYSCLK_SOURCE_MASK:			equ	(4h | 2h)	;SysClk Source setting mask
    79  0000                    SYSCLK_SOURCE_JUST:			equ	(0h | 0h)	;SysClk Source setting justified
    80  0000                    SYSCLK_2_DISABLE:				equ	0h	;SysClk*2 Disable setting
    81  0001                    SYSCLK_2_DISABLE_MASK:			equ	1h	;SysClk*2 Disable setting mask
    82  0000                    SYSCLK_2_DISABLE_JUST:			equ	0h	;SysClk*2 Disable setting justified
    83                          ;
    84                          ; register initial values
    85                          ;
    86  0000                    ANALOG_IO_CONTROL:		equ 0h	;Analog IO Control register (ABF_CR)
    87  0011                    PORT_0_GLOBAL_SELECT:	equ 11h	;Port 0 global select register (PRT0GS)
    88  00FE                    PORT_0_DRIVE_0:			equ feh	;Port 0 drive mode 0 register (PRT0DM0)
    89  0001                    PORT_0_DRIVE_1:			equ 1h	;Port 0 drive mode 1 register (PRT0DM1)
    90  0000                    PORT_0_DRIVE_2:			equ 0h	;Port 0 drive mode 2 register (PRT0DM2)
    91  0000                    PORT_0_INTENABLE:		equ 0h	;Port 0 interrupt enable register (PRT0IE)
    92  0000                    PORT_0_INTCTRL_0:		equ 0h	;Port 0 interrupt control 0 register (PRT0IC0)
    93  0000                    PORT_0_INTCTRL_1:		equ 0h	;Port 0 interrupt control 1 register (PRT0IC1)
    94  0000                    PORT_1_GLOBAL_SELECT:	equ 0h	;Port 1 global select register (PRT1GS)
    95  00A0                    PORT_1_DRIVE_0:			equ a0h	;Port 1 drive mode 0 register (PRT1DM0)
    96  00FF                    PORT_1_DRIVE_1:			equ ffh	;Port 1 drive mode 1 register (PRT1DM1)
    97  00FF                    PORT_1_DRIVE_2:			equ ffh	;Port 1 drive mode 2 register (PRT1DM2)
    98  0000                    PORT_1_INTENABLE:		equ 0h	;Port 1 interrupt enable register (PRT1IE)
    99  0000                    PORT_1_INTCTRL_0:		equ 0h	;Port 1 interrupt control 0 register (PRT1IC0)
   100  0000                    PORT_1_INTCTRL_1:		equ 0h	;Port 1 interrupt control 1 register (PRT1IC1)
   101  0019                    PORT_2_GLOBAL_SELECT:	equ 19h	;Port 2 global select register (PRT2GS)
   102  0009                    PORT_2_DRIVE_0:			equ 9h	;Port 2 drive mode 0 register (PRT2DM0)
   103  00F6                    PORT_2_DRIVE_1:			equ f6h	;Port 2 drive mode 1 register (PRT2DM1)
   104  00E6                    PORT_2_DRIVE_2:			equ e6h	;Port 2 drive mode 2 register (PRT2DM2)
   105  0000                    PORT_2_INTENABLE:		equ 0h	;Port 2 interrupt enable register (PRT2IE)
   106  0000                    PORT_2_INTCTRL_0:		equ 0h	;Port 2 interrupt control 0 register (PRT2IC0)
   107  0000                    PORT_2_INTCTRL_1:		equ 0h	;Port 2 interrupt control 1 register (PRT2IC1)
   108  0000                    PORT_3_GLOBAL_SELECT:	equ 0h	;Port 3 global select register (PRT3GS)
   109  0000                    PORT_3_DRIVE_0:			equ 0h	;Port 3 drive mode 0 register (PRT3DM0)
   110  0000                    PORT_3_DRIVE_1:			equ 0h	;Port 3 drive mode 1 register (PRT3DM1)
   111  0000                    PORT_3_DRIVE_2:			equ 0h	;Port 3 drive mode 2 register (PRT3DM2)
   112  0000                    PORT_3_INTENABLE:		equ 0h	;Port 3 interrupt enable register (PRT3IE)
   113  0000                    PORT_3_INTCTRL_0:		equ 0h	;Port 3 interrupt control 0 register (PRT3IC0)
   114                          PORT_3_INTCTRL_1:		equ 0h	;Port 3 interrupt control 1 register (PRT3IC1)
      + 0000                    PORT_3_INTCTRL_1	equ	0
      + 3C51                    ; end of file GlobalParams.inc
     1                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     2                          ;;;
     3                          ;;;  M8C.INC -- Microcontroller Device System Declarations
     4                          ;;;
     5                          ;;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
     6                          ;;;
     7                          ;;;  This file provides address constants, bit field masks and a set of macro
     8                          ;;;  facilities for the Cypress Semiconductor CY8C22045 Microcontroller devices.
     9                          ;;;
    10                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    11                          
    12                          ;;=============================================================================
    13                          ;; Definition of abbreviations used in the descriptions below
    14                          ;;  (RW)   The register or bit supports reads and writes
    15                          ;;  (W)    The register or bit is write-only
    16                          ;;  (R)    The register or bit is read-only
    17                          ;;  (#)    Access to the register is bit specific (see the family datasheet)
    18                          ;;  (RC)   The register or bit can be read, but writing a 0 will clear it,
    19                          ;;         writing a 1 will have no effect.
    20                          ;;=============================================================================
    21                          
    22                          ;;=============================================================================
    23                          ;;      System Registers
    24                          ;;=============================================================================
    25                          
    26                          ;----------------------------
    27                          ;  Flag Register Bit Fields
    28                          ;----------------------------
    29  00C0                    FLAG_PGMODE_MASK:  equ 0C0h     ; Paging control for > 256 bytes of RAM
    30  0000                    FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
    31  0040                    FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
    32  0080                    FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
    33  00C0                    FLAG_PGMODE_3:     equ 0C0h       ; Direct to CUR_PP page, indexed to STK_PP page
    34  0000                    FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
    35  0040                    FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
    36  0080                    FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
    37  00C0                    FLAG_PGMODE_11b:   equ 0C0h       ; Same as PGMODE_3
    38  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    39  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    40  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    41  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    42  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    43                          
    44                          
    45                          ;;=============================================================================
    46                          ;;      Register Space, Bank 0
    47                          ;;=============================================================================
    48                          
    49                          ;------------------------------------------------
    50                          ;  Port Registers
    51                          ;  Note: Also see this address range in Bank 1.
    52                          ;------------------------------------------------
    53                          ; Port 0
    54  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    55  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    56  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    57  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    58                          ; Port 1
    59  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    60  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    61  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    62  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    63                          ; Port 2
    64  0008                    PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
    65  0009                    PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
    66  000A                    PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
    67  000B                    PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
    68                          ; Port 3
    69  000C                    PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
    70  000D                    PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
    71  000E                    PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
    72  000F                    PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
    73                          ; Port 4
    74  0010                    PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
    75  0011                    PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
    76  0012                    PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
    77  0013                    PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
    78                          
    79                          ;------------------------------------------------
    80                          ;  Digital PSoC(tm) block Registers
    81                          ;  Note: Also see this address range in Bank 1.
    82                          ;------------------------------------------------
    83                          ; Digital PSoC block 00, Basic Type C
    84  0020                    DBC00DR0:     equ 20h          ; data register 0                          (#)
    85  0021                    DBC00DR1:     equ 21h          ; data register 1                          (W)
    86  0022                    DBC00DR2:     equ 22h          ; data register 2                          (RW)
    87  0023                    DBC00CR0:     equ 23h          ; control & status register 0              (#)
    88                          
    89                          ; Digital PSoC block 01, Basic Type C
    90  0024                    DBC01DR0:     equ 24h          ; data register 0                          (#)
    91  0025                    DBC01DR1:     equ 25h          ; data register 1                          (W)
    92  0026                    DBC01DR2:     equ 26h          ; data register 2                          (RW)
    93  0027                    DBC01CR0:     equ 27h          ; control & status register 0              (#)
    94                          
    95                          ; Digital PSoC block 02, Communications Type C
    96  0028                    DCC02DR0:     equ 28h          ; data register 0                          (#)
    97  0029                    DCC02DR1:     equ 29h          ; data register 1                          (W)
    98  002A                    DCC02DR2:     equ 2Ah          ; data register 2                          (RW)
    99  002B                    DCC02CR0:     equ 2Bh          ; control & status register 0              (#)
   100                          
   101                          ; Digital PSoC block 03, Communications Type C
   102  002C                    DCC03DR0:     equ 2Ch          ; data register 0                          (#)
   103  002D                    DCC03DR1:     equ 2Dh          ; data register 1                          (W)
   104  002E                    DCC03DR2:     equ 2Eh          ; data register 2                          (RW)
   105  002F                    DCC03CR0:     equ 2Fh          ; control & status register 0              (#)
   106                          
   107                          ; Digital PSoC block 10, Basic Type C
   108  0030                    DBC10DR0:     equ 30h          ; data register 0                          (#)
   109  0031                    DBC10DR1:     equ 31h          ; data register 1                          (W)
   110  0032                    DBC10DR2:     equ 32h          ; data register 2                          (RW)
   111  0033                    DBC10CR0:     equ 33h          ; control & status register 0              (#)
   112                          
   113                          ; Digital PSoC block 11, Basic Type C
   114  0034                    DBC11DR0:     equ 34h          ; data register 0                          (#)
   115  0035                    DBC11DR1:     equ 35h          ; data register 1                          (W)
   116  0036                    DBC11DR2:     equ 36h          ; data register 2                          (RW)
   117  0037                    DBC11CR0:     equ 37h          ; control & status register 0              (#)
   118                          
   119                          ; Digital PSoC block 12, Communications Type C
   120  0038                    DCC12DR0:     equ 38h          ; data register 0                          (#)
   121  0039                    DCC12DR1:     equ 39h          ; data register 1                          (W)
   122  003A                    DCC12DR2:     equ 3Ah          ; data register 2                          (RW)
   123  003B                    DCC12CR0:     equ 3Bh          ; control & status register 0              (#)
   124                          
   125                          ; Digital PSoC block 13, Communications Type C
   126  003C                    DCC13DR0:     equ 3Ch          ; data register 0                          (#)
   127  003D                    DCC13DR1:     equ 3Dh          ; data register 1                          (W)
   128  003E                    DCC13DR2:     equ 3Eh          ; data register 2                          (RW)
   129  003F                    DCC13CR0:     equ 3Fh          ; control & status register 0              (#)
   130                          
   131                          ;-------------------------------------
   132                          ;  Analog Control Registers
   133                          ;-------------------------------------
   134  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
   135  00C0                    AMX_IN_ACI3:          equ C0h    ; MASK: column 3 input mux
   136  0030                    AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
   137  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
   138  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
   139                          
   140  0061                    AMUX_CFG:      equ 61h          ; Analog MUX Configuration
   141  0030                    AMUX_CFG_INTCAP:       equ 30h    ;
   142  000E                    AMUX_CFG_MUXCLK:  	  equ 0Eh	 ;
   143  0001                    AMUX_CFG_EN:		  	  equ 01h	 ;
   144                          
   145                          ; old declarations DO NOT USE
   146  0061                    AMUXCFG:      equ 61h          ; Analog MUX Configuration
   147  0030                    AMUXCFG_INTCAP:       equ 30h    ;
   148  000E                    AMUXCFG_MUXCLK:  	  equ 0Eh	 ;
   149  0001                    AMUXCFG_EN:		  	  equ 01h	 ;
   150                          
   151  0062                    PWM_CR:       equ 62h          ; Pulse-Width Modulator Control
   152  0038                    PWM_CR_HIGH:          equ 38h    ; MASK: PWM high time
   153  0006                    PWM_CR_LOW:           equ 06h	 ; MASK: PWM low time
   154  0001                    PWM_CR_EN:            equ 01h	 ; MASK: Enable/Disable PWM function
   155                          
   156  0063                    ARF_CR:       equ 63h          ; Analog Reference Control
   157                          
   158  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus Register           (#)
   159  0080                    CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
   160  0040                    CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
   161  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
   162  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
   163  0008                    CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
   164  0004                    CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
   165  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
   166  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   167                          
   168  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   169  0020                    CMP_CR1_CLDIS1:       equ 20h    ; MASK: Column 1 comparator output latch
   170  0010                    CMP_CR1_CLDIS0:	      equ 10h    ; MASK: Column 0 comparator output latch
   171                          
   172  0068                    ADC0_CR:      equ 68h          ; Analog Column 0 Configuration
   173  0080                    ADC0_CR_CMPST:        equ 80h    ;
   174  0040                    ADC0_CR_LOREN:        equ 40h    ;
   175  0020                    ADC0_CR_SHEN:         equ 20h    ;
   176  0008                    ADC0_CR_CBSRC:        equ 08h    ;
   177  0004                    ADC0_CR_ADCM:         equ 04h    ;
   178  0001                    ADC0_CR_EN:	          equ 01h    ;
   179                          
   180  0069                    ADC1_CR:      equ 69h          ; Analog Column 1 Configuration
   181  0080                    ADC1_CR_CMPST:        equ 80h    ;
   182  0040                    ADC1_CR_LOREN:        equ 40h    ;
   183  0020                    ADC1_CR_SHEN:         equ 20h    ;
   184  0008                    ADC1_CR_CBSRC:        equ 08h    ;
   185  0004                    ADC1_CR_ADCM:         equ 04h    ;
   186  0001                    ADC1_CR_EN:	          equ 01h    ;
   187                          
   188                          ; Continuous Time PSoC block Type E Row 0 Col 0
   189  0072                    ACE00CR1:     equ 72h          ; Control register 1                       (RW)
   190  0073                    ACE00CR2:     equ 73h          ; Control register 2                       (RW)
   191                          
   192                          ; Continuous Time PSoC block Type E Row 0 Col 1
   193  0076                    ACE01CR1:     equ 76h          ; Control register 1                       (RW)
   194  0077                    ACE01CR2:     equ 77h          ; Control register 2                       (RW)
   195                          
   196                          ; Switched Cap PSoC blockType E Row 1 Col 0
   197  0080                    ASE10CR0:     equ 80h          ; Control register 0                       (RW)
   198                          
   199                          ; Switched Cap PSoC blockType E Row 1 Col 1
   200  0084                    ASE11CR0:     equ 84h          ; Control register 0                       (RW)
   201                          
   202                          ;-----------------------------------------------
   203                          ;  Global General Purpose Data Registers
   204                          ;-----------------------------------------------
   205  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   206  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   207  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   208  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   209                          
   210                          ;------------------------------------------------
   211                          ;  Row Digital Interconnects
   212                          ;
   213                          ;  Note: the following registers are mapped into
   214                          ;  both register bank 0 AND register bank 1.
   215                          ;------------------------------------------------
   216                          
   217  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   218  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   219  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   220  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   221  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   222  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   223  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   224                          
   225  00B8                    RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
   226  00B9                    RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
   227  00BA                    RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
   228  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   229  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   230  00BD                    RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
   231  00BE                    RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
   232                          
   233                          ;-----------------------------------------------
   234                          ;  Ram Page Pointers
   235                          ;-----------------------------------------------
   236  00D0                    CUR_PP:      equ 0D0h           ; Current   Page Pointer
   237  00D1                    STK_PP:      equ 0D1h           ; Stack     Page Pointer
   238  00D3                    IDX_PP:      equ 0D3h           ; Index     Page Pointer
   239  00D4                    MVR_PP:      equ 0D4h           ; MVI Read  Page Pointer
   240  00D5                    MVW_PP:      equ 0D5h           ; MVI Write Page Pointer
   241                          
   242                          ;------------------------------------------------
   243                          ;  I2C Configuration Registers
   244                          ;------------------------------------------------
   245  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   246  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   247  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   248  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   249  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   250  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   251  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   252  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   253  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   254  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   255                          
   256  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   257  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   258  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   259  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   260  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   261  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   262  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   263  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   264  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   265                          
   266  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   267                          
   268  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   269  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   270  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   271  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   272  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   273                          
   274                          ;------------------------------------------------
   275                          ;  System and Global Resource Registers
   276                          ;------------------------------------------------
   277  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   278                                                         ; Use INT_MSK0 bit field masks
   279  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   280                                                         ; Use INT_MSK1 bit field masks
   281  00DC                    INT_CLR2:     equ 0DCh          ; Interrupt Clear Register 2               (RW)
   282                                                         ; Use INT_MSK2 bit field masks
   283  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   284                                                         ; Use INT_MSK3 bit field masks
   285                          
   286  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   287  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   288  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   289                          
   290  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   291  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   292  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   293  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   294  0010                    INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
   295  0008                    INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
   296  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   297  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   298  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   299                          
   300  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   301  0080                    INT_MSK1_DCC13:            equ 80h ; MASK: enable/disable DCC13 block interrupt
   302  0040                    INT_MSK1_DCC12:            equ 40h ; MASK: enable/disable DCC12 block interrupt
   303  0020                    INT_MSK1_DBC11:            equ 20h ; MASK: enable/disable DBC11 block interrupt
   304  0010                    INT_MSK1_DBC10:            equ 10h ; MASK: enable/disable DBC10 block interrupt
   305  0008                    INT_MSK1_DCC03:            equ 08h ; MASK: enable/disable DCC03 block interrupt
   306  0004                    INT_MSK1_DCC02:            equ 04h ; MASK: enable/disable DCC02 block interrupt
   307  0002                    INT_MSK1_DBC01:            equ 02h ; MASK: enable/disable DBC01 block interrupt
   308  0001                    INT_MSK1_DBC00:            equ 01h ; MASK: enable/disable DBC00 block interrupt
   309                          
   310  00DF                    INT_MSK2:     equ DFh			; Custom block Mask Register			   (RW)
   311  0010                    INT_MSK2_SARADC:           equ 10h ; MASK: enable/disable SARADC block interrupt
   312  0020                    INT_MSK2_CSD0:             equ 20h ; MASK: enable/disable CSD0 block interrupt
   313  0040                    INT_MSK2_CSD1:             equ 40h ; MASK: enable/disable CSD1 block interrupt
   314  0080                    INT_MSK2_RTC:              equ 80h ; MASK: enable/disable RTC block interrupt
   315                          
   316  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   317  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   318                          
   319                          ;------------------------------------------------------
   320                          ;  MAC Registers
   321                          ;------------------------------------------------------
   322                          
   323  00E8                    MUL0_X:       equ 0E8h          ; Multiply Input X Register                (W)
   324  00E9                    MUL0_Y:       equ 0E9h          ; Multiply Input Y Register                (W)
   325  00EA                    MUL0_DH:      equ 0EAh          ; Multiply Result High Byte Register       (R)
   326  00EB                    MUL0_DL:      equ 0EBh          ; Multiply Result Low Byte Register        (R)
   327                          
   328  00EC                    ACC0_DR1:     equ 0ECh          ; Accumulator Data Register 1              (RW)
   329  00ED                    ACC0_DR0:     equ 0EDh          ; Accumulator Data Register 0              (RW)
   330  00EE                    ACC0_DR3:     equ 0EEh          ; Accumulator Data Register 3              (RW)
   331  00EF                    ACC0_DR2:     equ 0EFh          ; Accumulator Data Register 2              (RW)
   332                          
   333                          ; DECIMATOR Control Registers
   334  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   335  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   336                          
   337                          ;------------------------------------------------------
   338                          ;  System Status and Control Registers
   339                          ;
   340                          ;  Note: The following registers are mapped into both
   341                          ;        register bank 0 AND register bank 1.
   342                          ;------------------------------------------------------
   343  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   344                                                             ; Use FLAG_ masks defined at top of file
   345                          
   346  00FD                    DAC_D:        equ 0FDh		   ; DAC Data Register                        (RW)
   347                          
   348  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   349  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: flag, Internal Reset Status bit
   350  0010                    CPU_SCR1_SLIMO:         equ 10h	   ; MASK: Slow IMO (internal main osc) enable
   351  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   352  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   353  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   354                          
   355  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   356  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   357  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   358  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   359  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   360  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   361                          
   362                          ;------------------------------------------------------
   363                          ;  Neon Capsense Digital Control Registers
   364                          ;------------------------------------------------------
   365  0050                    CSD0_DR0_L:				equ 50h		; Capsense 0 data low 0				(RW)
   366  0054                    CSD0_DR0_H:				equ 54h		; Capsense 0 data high 0			(RW)
   367  0058                    CSD1_DR0_L:				equ 58h		; Capsense 1 data low 0				(RW)
   368  005C                    CSD1_DR0_H:				equ 5Ch		; Capsense 1 data high 0			(RW)
   369  0051                    CSD0_DR1_L:				equ 51h		; Capsense 0 data low 1				(RW)
   370  0055                    CSD0_DR1_H:				equ 55h		; Capsense 0 data high 1			(RW)
   371  0059                    CSD1_DR1_L:				equ 59h		; Capsense 1 data low 1				(RW)
   372  005D                    CSD1_DR1_H:				equ 5Dh		; Capsense 1 data high 1			(RW)
   373  0052                    CSD0_CNT_L:				equ 52h		; Capsense 0 counter low			(RW)
   374  0056                    CSD0_CNT_H:				equ 56h		; Capsense 0 counter high			(RW)
   375  005A                    CSD1_CNT_L:				equ 5Ah		; Capsense 1 counter low			(RW)
   376  005E                    CSD1_CNT_H:				equ	5Eh		; Capsense 1 counter high			(RW)
   377  0053                    CSD0_CR0:				equ 53h		; Capsense 0 control 0				(RW)
   378  005B                    CSD1_CR0:				equ 5Bh		; Capsense 1 control 0				(RW)
   379  0057                    CSD0_CR1:				equ 57h		; Capsense 0 control 1				(RW)
   380  005F                    CSD1_CR1:				equ 5Fh		; Capsense 1 control 1				(RW)
   381                          
   382                          ;------------------------------------------------------
   383                          ;  Neon Analog Registers
   384                          ;------------------------------------------------------
   385  0065                    ASY_CR:					equ 65h		; Analog Synchronization Control	(RW)
   386  006A                    ADC_DH:					equ 6Ah		; ADC data high						(RW)
   387  006B                    ADC_DL:					equ 6Bh		; ADC data low						(RW)
   388  00C8                    PWMVREF0:				equ C8h		; PWM Voltage Reference 0			(RW)
   389  00C9                    PWMVREF1:				equ C9h		; PWM Voltage Reference 1			(RW)
   390  00CB                    PWMSRC:					equ CBh		; PWM Source						(RW)
   391  00CA                    IDACMODE:				equ CAh		; IDAC Mode							(RW)
   392  00FC                    IDACR_D:				equ FCh		; Analog Mux DAC data 0				(RW)
   393  00FD                    IDACL_D:				equ FDh		; Analog Mux DAC data 1				(RW)
   394                          
   395                          ;------------------------------------------------------
   396                          ;  Neon Digital Registers
   397                          ;------------------------------------------------------
   398  00B7                    RDI0DSM:				equ B7h		; Row Digital Interconnect input select 0	(RW)
   399  00BF                    RDI1DSM:				equ BFh		; Row Digital Interconnect input select 1	(RW)
   400                          
   401                          ;------------------------------------------------------
   402                          ;  Neon Test Registers
   403                          ;------------------------------------------------------
   404  00CC                    TSCR0:					equ CCh		; Tsource 0							(RW)
   405  00CD                    TSCMPH:					equ CDh		; TSCMP high						(RW)
   406  00CE                    TSCMPL:					equ CEh		; TSCMP low							(RW)
   407  00CF                    TSCR1:					equ CFh		; Tsource 1							(RW)
   408                          
   409                          ;;=============================================================================
   410                          ;;      Register Space, Bank 1
   411                          ;;=============================================================================
   412                          
   413                          ;------------------------------------------------
   414                          ;  Port Registers
   415                          ;  Note: Also see this address range in Bank 0.
   416                          ;------------------------------------------------
   417                          ; Port 0
   418  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   419  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   420  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   421  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   422                          
   423                          ; Port 1
   424  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   425  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   426  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   427  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   428                          
   429                          ; Port 2
   430  0008                    PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
   431  0009                    PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
   432  000A                    PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
   433  000B                    PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
   434                          
   435                          ; Port 3
   436  000C                    PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
   437  000D                    PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
   438  000E                    PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
   439  000F                    PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
   440                          
   441                          ; Port 4
   442  0010                    PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
   443  0011                    PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
   444  0012                    PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
   445  0013                    PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
   446                          
   447                          ;------------------------------------------------
   448                          ;  Digital PSoC(tm) block Registers
   449                          ;  Note: Also see this address range in Bank 0.
   450                          ;------------------------------------------------
   451                          
   452                          ; Digital PSoC block 00, Basic Type C
   453  0020                    DBC00FN:      equ 20h          ; Function Register                        (RW)
   454  0021                    DBC00IN:      equ 21h          ;    Input Register                        (RW)
   455  0022                    DBC00OU:      equ 22h          ;   Output Register                        (RW)
   456  0023                    DBC00CR1:     equ 23h          ;   control & status register 1            (RW)
   457                          
   458                          ; Digital PSoC block 01, Basic Type C
   459  0024                    DBC01FN:      equ 24h          ; Function Register                        (RW)
   460  0025                    DBC01IN:      equ 25h          ;    Input Register                        (RW)
   461  0026                    DBC01OU:      equ 26h          ;   Output Register                        (RW)
   462  0027                    DBC01CR1:     equ 27h          ;   control & status register 1            (RW)
   463                          
   464                          ; Digital PSoC block 02, Communications Type C
   465  0028                    DCC02FN:      equ 28h          ; Function Register                        (RW)
   466  0029                    DCC02IN:      equ 29h          ;    Input Register                        (RW)
   467  002A                    DCC02OU:      equ 2Ah          ;   Output Register                        (RW)
   468  002B                    DBC02CR1:     equ 2Bh          ;   control & status register 1            (RW)
   469                          
   470                          ; Digital PSoC block 03, Communications Type C
   471  002C                    DCC03FN:      equ 2Ch          ; Function Register                        (RW)
   472  002D                    DCC03IN:      equ 2Dh          ;    Input Register                        (RW)
   473  002E                    DCC03OU:      equ 2Eh          ;   Output Register                        (RW)
   474  0029                    DBC03CR1:     equ 29h          ;   control & status register 1            (RW)
   475                          
   476                          ; Digital PSoC block 10, Basic Type C
   477  0030                    DBC10FN:      equ 30h          ; Function Register                        (RW)
   478  0031                    DBC10IN:      equ 31h          ;    Input Register                        (RW)
   479  0032                    DBC10OU:      equ 32h          ;   Output Register                        (RW)
   480  0033                    DBC10CR1:     equ 33h          ;   control & status register 1            (RW)
   481                          
   482                          ; Digital PSoC block 11, Basic Type C
   483  0034                    DBC11FN:      equ 34h          ; Function Register                        (RW)
   484  0035                    DBC11IN:      equ 35h          ;    Input Register                        (RW)
   485  0036                    DBC11OU:      equ 36h          ;   Output Register                        (RW)
   486  0037                    DBC11CR1:     equ 37h          ;   control & status register 1            (RW)
   487                          
   488                          ; Digital PSoC block 12, Communications Type C
   489  0038                    DCC12FN:      equ 38h          ; Function Register                        (RW)
   490  0039                    DCC12IN:      equ 39h          ;    Input Register                        (RW)
   491  003A                    DCC12OU:      equ 3Ah          ;   Output Register                        (RW)
   492  003B                    DBC12CR1:     equ 3Bh          ;   control & status register 1            (RW)
   493                          
   494                          ; Digital PSoC block 13, Communications Type C
   495  003C                    DCC13FN:      equ 3Ch          ; Function Register                        (RW)
   496  003D                    DCC13IN:      equ 3Dh          ;    Input Register                        (RW)
   497  003E                    DCC13OU:      equ 3Eh          ;   Output Register                        (RW)
   498  003F                    DBC13CR1:     equ 3Fh          ;   control & status register 1            (RW)
   499                          
   500                          ;------------------------------------------------
   501                          ;  System and Global Resource Registers
   502                          ;  Note: Also see this address range in Bank 0.
   503                          ;------------------------------------------------
   504                          
   505  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   506  00C0                    CLK_CR0_ACOLUMN_3:    equ C0h    ; MASK: Specify clock for analog cloumn
   507  0030                    CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
   508  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   509  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   510                          
   511  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   512  0018                    CLK_CR1_ACLK1:        equ 18h    ; MASK: Digital PSoC block for analog source
   513  0003                    CLK_CR1_ACLK0:        equ 03h    ; MASK: Digital PSoC block for analog source
   514                          
   515  0003                    CLK_CR1_ACLK2:        equ 03h    ; Deprecated do not use
   516                          
   517  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   518  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   519                          
   520  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   521  000F                    AMD_CR0_AMOD0:        equ 0Fh    ; MASK: Modulation source for analog column 0
   522                          
   523  0064                    CMP_GO_EN:    equ 64h          ; Comparator Bus To Global Out Enable      (RW)
   524  0080                    CMP_GO_EN_GOO5:       equ 80h    ; MASK: Selected Col 1 signal to GOO5
   525  0040                    CMP_GO_EN_GOO1:       equ 40h    ; MASK: Selected Col 1 signal to GOO1
   526  0030                    CMP_GO_EN_SEL1:       equ 30h    ; MASK: Column 1 Signal Select
   527  0008                    CMP_GO_EN_GOO4:       equ 08h    ; MASK: Selected Col 0 signal to GOO4
   528  0004                    CMP_GO_EN_GOO0:       equ 04h    ; MASK: Selected Col 0 signal to GOO0
   529  0003                    CMP_GO_EN_SEL0:       equ 03h    ; MASK: Column 0 Signal Select
   530                          
   531  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   532  000F                    AMD_CR1_AMOD1:        equ 0Fh    ; MASK: Modulation ctrl for analog column 1
   533                          
   534  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   535  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   536  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   537                          
   538  006B                    CLK_CR3:      equ 6Bh          ; Analog Clock Source Control Register 3   (RW)
   539  0040                    CLK_CR3_SYS1:         equ 40h    ; MASK: Analog Clock 1 selection
   540  0030                    CLK_CR3_DIVCLK1:      equ 30h    ; MASK: Analog Clock 1 divider
   541  0004                    CLK_CR3_SYS0:         equ 04h    ; MASK: Analog Clock 0 selection
   542  0003                    CLK_CR3_DIVCLK0:      equ 03h    ; MASK: Analog Clock 0 divider
   543                          
   544                          ;------------------------------------------------
   545                          ;  Global Digital Interconnects
   546                          ;------------------------------------------------
   547                          
   548  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   549  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   550  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   551  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   552                          
   553  00A0                    GDI_O_IN_CR:  equ 0A0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   554  00A1                    GDI_E_IN_CR:  equ 0A1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   555  00A2                    GDI_O_OU_CR:  equ 0A2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   556  00A3                    GDI_E_OU_CR:  equ 0A3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   557                          
   558  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   559  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   560                          
   561                          ;------------------------------------------------
   562                          ;  Analog Mux Bus Port Enable Bits
   563                          ;------------------------------------------------
   564  00D8                    MUX_CR0:      equ 0D8h          ; Analog Mux Port 0 Bit Enables Register
   565  00D9                    MUX_CR1:      equ 0D9h          ; Analog Mux Port 1 Bit Enables Register
   566  00DA                    MUX_CR2:      equ 0DAh          ; Analog Mux Port 2 Bit Enables Register
   567  00DB                    MUX_CR3:      equ 0DBh          ; Analog Mux Port 3 Bit Enables Register
   568  00EC                    MUX_CR4:      equ 0ECh          ; Analog Mux Port 4 Bit Enables Register
   569                          
   570                          ;------------------------------------------------
   571                          ;  Clock and System Control Registers
   572                          ;------------------------------------------------
   573                          
   574  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   575  0080                    OSC_GO_EN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   576  0040                    OSC_GO_EN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   577  0020                    OSC_GO_EN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   578  0010                    OSC_GO_EN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   579  0008                    OSC_GO_EN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   580  0004                    OSC_GO_EN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   581  0002                    OSC_GO_EN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   582  0001                    OSC_GO_EN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   583                          
   584  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   585  0003                    OSC_CR4_VC3SEL:       equ 03h    ; MASK: System VC3 Clock source
   586                          
   587  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   588                          
   589  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   590  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   591  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   592  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   593  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   594  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   595  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   596  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   597  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   598  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   599  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   600  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   601  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   602  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   603  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   604  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   605  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   606  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   607                          
   608  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   609  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   610  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   611                          
   612  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   613  0080                    OSC_CR2_PLLGAIN:      equ 80h    ; MASK: High/Low gain
   614  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   615  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   616  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   617                          
   618  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   619  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   620  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   621  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   622  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   623  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   624  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   625  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   626                          
   627  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   628  0008                    VLT_CMP_NOWRITE:      equ 08h    ; MASK: Vcc below Flash Write level
   629  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   630  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   631  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   632                          
   633  00E5                    ADC0_TR:      equ 0E5h          ; ADC Column 0 Trim Register
   634  00E6                    ADC1_TR:      equ 0E6h          ; ADC Column 1 Trim Register
   635                          
   636  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   637  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   638  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   639  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   640                          
   641  00FA                    FLS_PR1:      equ 0FAh          ; Flash Program Register 1                 (RW)
   642  0003                    FLS_PR1_BANK:         equ 03h    ; MASK: Select Active Flash Bank
   643                          
   644  00FD                    DAC_CR0:       equ 0FDh          ; Analog Mux DAC Control Register 0
   645  00DC                    DAC_CR1:       equ 0DCh          ; Analog Mux DAC Control Register 1
   646  0008                    DAC_CR_IRANGE:        equ 08h    ; MASK: Sets the DAC Range low or high
   647  0006                    DAC_CR_OSCMODE:       equ 06h    ; MASK: Defines the reset mode for AMux
   648  0001                    DAC_CR_ENABLE:        equ 01h    ; MASK: Enable/Disable DAC function
   649                          
   650                          ;------------------------------------------------
   651                          ;  I2C Control Registers
   652                          ;------------------------------------------------
   653                          
   654  00AD                    I2C_ADDR:    equ 0ADh          ; I2C Address Register (RW)
   655                          
   656                          ;------------------------------------------------------
   657                          ;  Neon Analog Registers
   658                          ;------------------------------------------------------
   659  0053                    VDAC50CR0:		equ 53h			; V DAC5 control 0				(RW)
   660  0057                    VDAC51CR0:		equ 57h			; V DAC5 control 1				(RW)
   661  00A8                    ADC_CR0:		equ A8h			; ADC control 0					(RW)
   662  00A9                    ADC_CR1:		equ A9h			; ADC control 1					(RW)
   663  00AA                    ADC_CR2:		equ AAh			; ADC control 2					(RW)
   664  00AB                    ADC_CR3TRIM:	equ ABh			; ADC control 3					(RW)
   665  00AC                    ADC_CR4:		equ ACh			; ADC control 4					(RW)
   666  00E7                    VDAC_TRIM:		equ E7h			; V DAC trim					(RW)
   667                          
   668                          ;------------------------------------------------------
   669                          ;  Neon Current Sense CMP Registers
   670                          ;------------------------------------------------------
   671  0050                    CMP0CR1:		equ 50h			; CMP0 control 1				(RW)
   672  0051                    CMP0CR2:		equ 51h			; CMP0 control 2				(RW)
   673  0054                    CMP1CR1:		equ 54h			; CMP1 control 1				(RW)
   674  0055                    CMP1CR2:		equ 55h			; CMP1 control 2				(RW)
   675  0058                    CSCMPCR0:		equ 58h			; CSCMP control 0				(RW)
   676  0059                    CSCMPGOEN:		equ 59h			; CSCMO global out enable		(RW)
   677  005A                    CSLUTCR0:		equ 5Ah			; CSLUT control 0				(RW)
   678  005B                    CMPCOLMUX:		equ 5Bh			; CMP Column Mux				(RW)
   679  005C                    CMPPWMCR:		equ 5Ch			; CMP PWM control				(RW)
   680  005D                    CMPFLTCR:		equ 5Dh			; CMP filter control			(RW)
   681  005E                    CMPCLK1:		equ 5Eh			; CMP clock 1					(RW)
   682  005F                    CMPCLK0:		equ 5Fh			; CMP clock 0					(RW)
   683                          
   684                          ;------------------------------------------------------
   685                          ;  Neon Real Time Clock Registers
   686                          ;------------------------------------------------------
   687  00A4                    RTCH:			equ A4h			; Real time current hour		(RW)
   688  00A5                    RTCM:			equ A5h			; Real time current minute		(RW)
   689  00A6                    RTCS:			equ A6h			; Real time current second		(RW)
   690  00A7                    RTCCR:			equ A7h			; Real time clock control		(RW)
   691                          
   692                          ;------------------------------------------------------
   693                          ;  Analog MUX Config Registers
   694                          ;------------------------------------------------------
   695                          
   696  006A                    AMUX_CFG1:			equ 6Ah  ; Analog MUX Configuration 1
   697  0020                    AMUX_CFG1_GOINVR:	equ 20h  ;
   698  0010                    AMUX_CFG1_GOINVL:  	equ 10h	 ;
   699  000C                    AMUX_CFG1_AMUXMODR:	equ 0Ch	 ;
   700  0003                    AMUX_CFG1_AMUXMODL:	equ 03h	 ;
   701                          
   702                          ;;=============================================================================
   703                          ;;      M8C System Macros
   704                          ;;  These macros should be used when their functions are needed.
   705                          ;;=============================================================================
   706                          
   707                          ;----------------------------------------------------
   708                          ;  Swapping Register Banks
   709                          ;----------------------------------------------------
   710                              macro M8C_SetBank0
   711                              and   F, ~FLAG_XIO_MASK
   712  3C51                        endm
   713                          
   714                              macro M8C_SetBank1
   715                              or    F, FLAG_XIO_MASK
   716  3C51                        endm
   717                          
   718                          ;----------------------------------------------------
   719                          ;  Global Interrupt Enable/Disable
   720                          ;----------------------------------------------------
   721                              macro M8C_EnableGInt
   722                              or    F, FLAG_GLOBAL_IE
   723  3C51                        endm
   724                          
   725                              macro M8C_DisableGInt
   726                              and   F, ~FLAG_GLOBAL_IE
   727  3C51                        endm
   728                          
   729                          ;----------------------------------------------------
   730                          ;  Enable/Disable Interrupt Mask
   731                          ;
   732                          ;  Use the following macros to enable/disable
   733                          ;  bits in the Interrupt mask registers,
   734                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   735                          ;
   736                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   737                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   738                          ;
   739                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   740                          ;        and MASK is the bit set to enable or disable
   741                          ;----------------------------------------------------
   742                          ; Disable Interrupt Bit Mask(s)
   743                              macro M8C_DisableIntMask
   744                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   745  3C51                        endm
   746                          
   747                          ; Enable Interrupt Bit Mask(s)
   748                              macro M8C_EnableIntMask
   749                              or    reg[@0], @1               ; enable specified interrupt enable bit
   750  3C51                        endm
   751                          
   752                          ;----------------------------------------------------
   753                          ;  Clear Posted Interrupt Flag Mask
   754                          ;
   755                          ;  Use the following macros to clear the
   756                          ;  bits in the Interrupt Clear registers,
   757                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   758                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   759                          ;
   760                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   761                          ;        and MASK is the bit set to enable or disable
   762                          ;----------------------------------------------------
   763                              macro M8C_ClearIntFlag
   764                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   765  3C51                        endm
   766                          
   767                          ;----------------------------------------------------
   768                          ;  Power-On Reset & WatchDog Timer Functions
   769                          ;----------------------------------------------------
   770                              macro M8C_EnableWatchDog
   771                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   772  3C51                        endm
   773                          
   774                              macro M8C_ClearWDT
   775                              mov   reg[RES_WDT], 00h
   776  3C51                        endm
   777                          
   778                              macro M8C_ClearWDTAndSleep
   779                              mov   reg[RES_WDT], 38h
   780  3C51                        endm
   781                          
   782                          ;----------------------------------------------------
   783                          ;  Sleep, CPU Stop & Software Reset
   784                          ;----------------------------------------------------
   785                              macro M8C_Sleep
   786                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   787                              ; The next instruction to be executed depends on the state of the
   788                              ; various interrupt enable bits. If some interrupts are enabled
   789                              ; and the global interrupts are disabled, the next instruction will
   790                              ; be the one that follows the invocation of this macro. If global
   791                              ; interrupts are also enabled then the next instruction will be
   792                              ; from the interrupt vector table. If no interrupts are enabled
   793                              ; then the CPU sleeps forever.
   794  3C51                        endm
   795                          
   796                              macro M8C_Stop
   797                              ; In general, you probably don't want to do this, but here's how:
   798                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   799                              ; Next instruction to be executed is located in the interrupt
   800                              ; vector table entry for Power-On Reset.
   801  3C51                        endm
   802                          
   803                              macro M8C_Reset
   804                              ; Restore CPU to the power-on reset state.
   805                              mov A, 0
   806                              SSC
   807                              ; Next non-supervisor instruction will be at interrupt vector 0.
   808  3C51                        endm
   809                          
   810                          ;----------------------------------------------------
   811                          ; ImageCraft Code Compressor Actions
   812                          ;----------------------------------------------------
   813                              ; Suspend Code Compressor
   814                              ; Must not span a RET or RETI instruction
   815                              ; without resuming code compression
   816                              macro Suspend_CodeCompressor
   817                              or   F, 0
   818  3C51                        endm
   819                          
   820                              ; Resume Code Compression
   821                              macro Resume_CodeCompressor
   822                              add  SP, 0
   823                              endm
      + 3C51                    
      + 3C51                    ; end of file m8c.inc
     1                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     2                          ;;;
     3                          ;;;  M8SSC.INC -- CY8C22045 Microcontroller Device SSC Declarations
     4                          ;;;
     5                          ;;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
     6                          ;;;
     7                          ;;;
     8                          ;;;  This file provides address constants, bit field masks and a set of macro
     9                          ;;;  facilities for the Cypress MicroSystems CY8C22045 Microcontroller family.
    10                          ;;;
    11                          ;;;  Last Modified: August 17, 2004
    12                          ;;;
    13                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    14                          
    15                          ;----------------------------------
    16                          ; Common Supervisory Code Variables
    17                          ;----------------------------------
    18  00F8                    bSSC_KEY1:                          equ      0F8h   ; supervisory key
    19  00F9                    bSSC_KEYSP:                         equ      0F9h   ; supervisory stack ptr key
    20  00FA                    bSSC_TABLE_TableId:                 equ      0FAh   ; table ID
    21                          
    22  003A                    OPER_KEY:                           equ      3Ah   ; operation key
    23                          
    24                          ;----------------------------------
    25                          ; SSC_Action macro command codes
    26                          ;----------------------------------
    27  0001                    FLASH_READ:                         equ      1     ; flash read command
    28  0002                    FLASH_WRITE:                        equ      2     ; flash write command
    29  0003                    FLASH_ERASE:                        equ      3     ; flash erase command
    30  0004                    PROTECT_BLOCK:                      equ      4     ; flash protect block command
    31  0006                    TABLE_READ:                         equ      6     ; table read command
    32  0007                    FLASH_CHECKSUM:                     equ      7     ; flash checksum calculation command
    33  0008                    CALIBRATE0:                         equ      8     ; Calibrate without checksum
    34  0009                    CALIBRATE1:                         equ      9     ; Calibrate with checksum
    35                          
    36                          ;----------------------------------
    37                          ; SSC_Action Flash table addresses
    38                          ;----------------------------------
    39                          ; Table 0 Values
    40  00F8                    SILICON_ID_1:                       equ      0F8h   ; Table 0 first byte of silicon ID
    41  00F9                    SILICON_ID_0:                       equ      0F9h   ; Table 0 second byte of silicon ID
    42                          
    43                          ; Table 1 Values
    44  00F8                    SSCTBL1_TRIM_BGR_3V:                equ      0F8h   ; 3.3V bandgap ref voltage trim
    45  00F9                    SSCTBL1_TRIM_IMO_3V_24MHZ:          equ      0F9h   ; 3.3V internal main oscillator trim (24MHz)
    46  00FA                    SSCTBL1_CAL_ROOM_3V:                equ      0FAh   ; 3.3V Room Temp Calibration
    47  00FB                    SSCTBL1_CAL_HOT_3V:                 equ      0FBh   ; 3.3V Hot  Temp Calibration
    48  00FC                    SSCTBL1_TRIM_BGR_5V:                equ      0FCh   ; 5.0V bandgap ref voltage trim
    49  00FD                    SSCTBL1_TRIM_IMO_5V_24MHZ:          equ      0FDh   ; 5.0V internal main oscillator trim (24MHz)
    50  00FE                    SSCTBL1_CAL_ROOM_5V:                equ      0FEh   ; 5.0V Room Temp Calibration
    51  00FF                    SSCTBL1_CAL_HOT_5V:                 equ      0FFh   ; 5.0V Hot  Temp Calibration
    52                              ; legacy names:
    53  00F8                        VOLTAGE_TRIM_3V:                equ      0F8h   ; Table 1 3.3V bandgap ref voltage trim value
    54  00F9                        OSCILLATOR_TRIM_3V:             equ      0F9h   ; Table 1 3.3V internal main oscillator trim val
                                ue
    55  00FC                        VOLTAGE_TRIM_5V:                equ      0FCh   ; Table 1 5.0V bandgap ref voltage trim value
    56  00FD                        OSCILLATOR_TRIM_5V:             equ      0FDh   ; Table 1 5.0V internal main oscillator trim val
                                ue
    57                          
    58                          ; Table 2 Values
    59  00F8                    SSCTBL2_TRIM_BGR_2V:                equ      0F8h   ; 2.7V bandgap ref voltage trim
    60  00F9                    SSCTBL2_TRIM_IMO_2V_12MHZ:          equ      0F9h   ; 2.7V internal main oscillator trim (12MHz)
    61  00FA                    SSCTBL2_CAL_ROOM_2V:                equ      0FAh   ; 2.7V Room Temp Calibration
    62  00FB                    SSCTBL2_CAL_HOT_2V:                 equ      0FBh   ; 2.7V Hot  Temp Calibration
    63  00FC                    SSCTBL2_TRIM_IMO_3V_6MHZ:           equ      0FCh   ; 3.3V IMO Trim for SLOWIMO 6MHz operation
    64  00FD                    SSCTBL2_TRIM_IMO_2V_6MHZ:           equ      0FDh   ; 2.7V IMO Trim for SLOWIMO 6MHz operation
    65  00FE                    SSCTBL2_TRIM_IMO_5V_6MHZ:           equ      0FEh   ; 5.0V IMO Trim for SLOWIMO 6MHz operation
    66                          
    67                          
    68                          ;-----------------------------------------------------------------------------
    69                          ;  MACRO SSC_Action( OpCode )
    70                          ;
    71                          ;  DESCRIPTION:
    72                          ;     Performs supervisory operations defined in Supervisory ROM (SROM)
    73                          ;     section of Technical Reference Manual and/or Datasheet.
    74                          ;-----------------------------------------------------------------------------
    75                          ;
    76                          ;  ARGUMENTS:
    77                          ;     BYTE  OpCode   - specified supervisory operation - defined operations
    78                          ;                      are:  FLASH_WRITE, FLASH_ERASE, FLASH_READ, TABLE_READ,
    79                          ;                            FLASH_CHECKSUM, PROTECT_BLOCK
    80                          ;  RETURNS:
    81                          ;     Nothing
    82                          ;
    83                          ;  SIDE EFFECTS:
    84                          ;     The values of the A and X registers are modified
    85                          ;
    86                          ;  PROCEDURE:
    87                          ;     1) specify a 3 byte stack frame.  Save in [KEYSP]
    88                          ;     2) insert the flash Supervisory key in [KEY1]
    89                          ;     3) store function code in A
    90                          ;     4) call the supervisory code
    91                          ;
    92                              macro SSC_Action( OpCode )
    93                          ;   !!! DO NOT CHANGE THIS CODE !!!
    94                          ;       This sequence of opcodes provides a
    95                          ;       signature for the debugger and ICE.
    96                              mov   X, SP                            ; copy SP into X
    97                              mov   A, X                             ; mov to A
    98                              add   A, 3                             ; create 3 byte stack frame
    99                              mov   [bSSC_KEYSP], A                  ; save stack frame for supervisory code
   100                              mov   [bSSC_KEY1], OPER_KEY            ; load the code for supervisory operations
   101                              mov   A, @OpCode                       ; load A with specific Flash operation
   102                              SSC                                    ; SSC call the supervisory code
   103                          ;   !!! DO NOT CHANGE THIS CODE !!!
   104  3C51                        endm
   105                          
   106                          
   107                          ;-----------------------------------------------------------------------------
   108                          ;  MACRO M8SSC_SetTableTrims( Table, IMO_Trim, Volt_Trim )
   109                          ;
   110                          ;  DESCRIPTION:
   111                          ;     Loads Bandgap Voltage and Internal Main Oscillator (IMO) Trim
   112                          ;     registers with values from from the specified flash System Parameter
   113                          ;     table entries. Note that both trim values must come from the same table.
   114                          ;     Also, see M8SSC_Set2TableTrims below.
   115                          ;-----------------------------------------------------------------------------
   116                          ;
   117                          ;  ARGUMENTS:
   118                          ;     BYTE Table     - 0..3 for the desired system parameter table
   119                          ;     BYTE Volt_Trim - Address (F8 - FF) of the voltage trim value desired
   120                          ;     BYTE IMP_Trim  - Address (F8 - FF) of the IMO trim value desired
   121                          ;
   122                          ;  RETURNS:
   123                          ;     Nothing
   124                          ;
   125                          ;  SIDE EFFECTS:
   126                          ;     The values of the A and X registers are modified
   127                          ;
   128                              macro M8SSC_SetTableTrims( Table, IMO_Trim, Volt_Trim )
   129                              mov A, reg[0xD0]  ; CUR_PP
   130                          	push A
   131                          	mov reg[0xD0], 0
   132                              mov   [bSSC_TABLE_TableId], @Table     ; Point to requested Flash Table
   133                              SSC_Action TABLE_READ                  ; Perform a table read supervisor call
   134                              M8C_SetBank1
   135                              mov   A, [@IMO_Trim]
   136                              mov   reg[IMO_TR], A                   ; Load the 3V trim oscillator setting
   137                              mov   A, [@Volt_Trim]
   138                              mov   reg[BDG_TR], A                   ; Load the bandgap trim setting for 3V
   139                              M8C_SetBank0
   140                          	pop A
   141                          	mov reg[0xD0], A
   142  3C51                        endm
   143                          
   144                          
   145                          ;-----------------------------------------------------------------------------
   146                          ;  MACRO M8SSC_Set2TableTrims( TableA, IMO_Trim, TableB, Volt_Trim )
   147                          ;
   148                          ;  DESCRIPTION:
   149                          ;     Loads Bandgap Voltage and Internal Main Oscillator (IMO) Trim
   150                          ;     registers with values from from the specified flash System Parameter
   151                          ;     table entries. Each trim value comes from a different table.
   152                          ;     Also, see M8SSC_SetTableTrims above.
   153                          ;-----------------------------------------------------------------------------
   154                          ;
   155                          ;  ARGUMENTS:
   156                          ;     BYTE TableA    - 0..3 for the parameter table holding the Volt Trim
   157                          ;     BYTE Volt_Trim - Address (F8 - FF) of the voltage trim value desired
   158                          ;     BYTE TableB    - 0..3 for the parameter table holding the IMO Trim
   159                          ;     BYTE IMP_Trim  - Address (F8 - FF) of the IMO trim value desired
   160                          ;
   161                          ;  RETURNS:
   162                          ;     Nothing
   163                          ;
   164                          ;  SIDE EFFECTS:
   165                          ;     The values of the A and X registers are modified
   166                          ;
   167                              macro M8SSC_Set2TableTrims( TableA, IMO_Trim, TableB, Volt_Trim )
   168                              mov A, reg[0xD0]  ; CUR_PP
   169                          	push A
   170                          	mov reg[0xD0], 0
   171                              mov   [bSSC_TABLE_TableId], @TableA    ; Point to Flash Table for IMO Trim
   172                              SSC_Action TABLE_READ                  ; Copy table data to RAM F8-FF
   173                              M8C_SetBank1                           ; (Note, preserved across next SSC!)
   174                              mov   A, [@IMO_Trim]                   ; Set the main oscillator trim
   175                              mov   reg[IMO_TR], A
   176                              mov   [bSSC_TABLE_TableId], @TableB    ; Point to Flash Table for Volt Trim
   177                              SSC_Action TABLE_READ                  ; Copy table data to RAM F8-FF
   178                              mov   A, [@Volt_Trim]                  ; Set the bandgap voltage trim
   179                              mov   reg[BDG_TR], A                   ; Load the bandgap trim setting for 3V
   180                              M8C_SetBank0
   181                          	pop A
   182                          	mov reg[0xD0], A
   183  3C51                        endm
   184                          
   185                          
   186                          ;-----------------------------------------------------------------------------
   187                          ;  MACRO M8SSC_SetTableVoltageTrim( Table, Volt_Trim )
   188                          ;
   189                          ;  DESCRIPTION:
   190                          ;     Loads Bandgap Voltage Trim register with values from from the
   191                          ;     specified flash System Parameter table entry.
   192                          ;-----------------------------------------------------------------------------
   193                          ;
   194                          ;  ARGUMENTS:
   195                          ;     BYTE Table     - 0..3 for the parameter table holding the Volt Trim
   196                          ;     BYTE Volt_Trim - Address (F8 - FF) of the voltage trim value desired
   197                          ;
   198                          ;  RETURNS:
   199                          ;     Nothing
   200                          ;
   201                          ;  SIDE EFFECTS:
   202                          ;     The values of the A and X registers are modified
   203                          ;
   204                              macro M8SSC_SetTableVoltageTrim( Table, Volt_Trim )
   205                              mov A, reg[0xD0]  ; CUR_PP
   206                          	push A
   207                          	mov reg[0xD0], 0
   208                              mov   [bSSC_TABLE_TableId], @Table     ; Point to Flash Table
   209                              SSC_Action TABLE_READ                  ; Perform a table read supervisor call
   210                              M8C_SetBank1
   211                              mov   A, [@Volt_Trim]                  ; Get the bandgap trim seting
   212                              mov   reg[BDG_TR], A                   ; Update the register value
   213                              M8C_SetBank0
   214                          	pop A
   215                          	mov reg[0xD0], A
   216  3C51                        endm
   217                          
   218                          
   219                          ;-----------------------------------------------------------------------------
   220                          ;  MACRO M8SSC_SetTableIMOTrim( Table, IMO_Trim )
   221                          ;
   222                          ;  DESCRIPTION:
   223                          ;     Loads Internal Main Oscillator (IMO) Trim register with values from
   224                          ;     from the specified flash System Parameter table entry.
   225                          ;-----------------------------------------------------------------------------
   226                          ;
   227                          ;  ARGUMENTS:
   228                          ;     BYTE Table     - 0..3 for the parameter table holding the IMO Trim
   229                          ;     BYTE IMO_Trim  - Address (F8 - FF) of the voltage trim value desired
   230                          ;
   231                          ;  RETURNS:
   232                          ;     Nothing
   233                          ;
   234                          ;  SIDE EFFECTS:
   235                          ;     The values of the A and X registers are modified
   236                          ;
   237                              macro M8SSC_SetTableIMOTrim( Table, IMO_Trim )
   238                              mov A, reg[0xD0]  ; CUR_PP
   239                          	push A
   240                          	mov reg[0xD0], 0
   241                              mov   [bSSC_TABLE_TableId], @Table ; Point to Flash Table 1
   242                              SSC_Action TABLE_READ              ; Perform a table read supervisor call
   243                              M8C_SetBank1
   244                              mov   A, [@IMO_Trim]               ; Get the IMO trim seting
   245                              mov   reg[IMO_TR], A               ; Update the register value
   246                              M8C_SetBank0
   247                          	pop A
   248                          	mov reg[0xD0], A
   249                              endm
      + 3C51                    
      + 3C51                    ; end of file m8ssc.inc
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;
     4                          ;;       FILENAME: Memory.inc
     5                          ;;
     6                          ;;    DESCRIPTION: Memory Model and Stack Parameter Definitions for 
     7                          ;;                 CY8C22045 PSoC devices.
     8                          ;;
     9                          ;;  LAST MODIFIED: August 17, 2004
    10                          ;;
    11                          ;;-----------------------------------------------------------------------------
    12                          ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
    13                          ;;*****************************************************************************
    14                          ;;*****************************************************************************
    15                          ;
    16                          ;
    17                          ;  ******** Define Memory Model and Stack parameters ********
    18                          ;
    19  0001                    IMAGECRAFT: equ 1   
    20  0002                    HITECH: equ 2   
    21  0002                    TOOLCHAIN: equ HITECH   
    22  0001                    SYSTEM_LARGE_MEMORY_MODEL: equ 1   
    23  0000                    SYSTEM_SMALL_MEMORY_MODEL: equ 0   
    24  0003                    SYSTEM_STACK_PAGE: equ 3   
    25  0000                    SYSTEM_STACK_PAGE_OFFSET: equ 0   
    26  0002                    SYSTEM_TOOLS: equ 2   
    27  0000                    SYSTEM_IDXPG_TRACKS_STK_PP: equ 0   
    28  0001                    SYSTEM_IDXPG_TRACKS_IDX_PP: equ 1   
    29  0000                    SYSTEM_MULTIPAGE_STACK: equ 0 
    30                          
    31                          
    32                          ;  ******* Function Class Definitions *******
    33                          ;
    34                          ;  These definitions are used to describe RAM access patterns. They provide
    35                          ;  documentation and they control prologue and epilogue macros that perform
    36                          ;  the necessary housekeeping functions for large memory model devices like
    37                          ;  the CY8C22045.
    38                          
    39  0001                    RAM_USE_CLASS_1:               equ 1   ; PUSH, POP & I/O access
    40  0002                    RAM_USE_CLASS_2:               equ 2   ; Indexed address mode on stack page
    41  0004                    RAM_USE_CLASS_3:               equ 4   ; Indexed address mode to any page
    42  0008                    RAM_USE_CLASS_4:               equ 8   ; Direct/Indirect address mode access
    43                          
    44                          ; ******* Hi Tech Specific *******
    45                          ; Turn on the expansion of all macros by default
    46                          IF (TOOLCHAIN & HITECH)
    47                          OPT EXPAND
    48                          ENDIF
    49                          ; ******* Page Pointer Manipulation Macros *******
    50                          ;
    51                          ;  ******* Page Pointer Manipulation Macros *******
    52                          ;
    53                          ;  Most of the following macros are conditionally compiled so they only
    54                          ;  produce code if the large memory model is selected.
    55                          
    56                             ;-----------------------------------------------
    57                             ;  Set Stack Page Macro
    58                             ;-----------------------------------------------
    59                             ;
    60                             ;  DESC: Modify STK_PP in the large or small memory Models.
    61                             ;
    62                             ; INPUT: Constant (e.g., SYSTEM_STACK_PAGE) that specifies the RAM page on
    63                             ;        which stack operations like PUSH and POP store and retrieve their
    64                             ;        data
    65                             ;
    66                             ;  COST: 8 instruction cycles (in LMM only)
    67                          
    68                             macro RAM_SETPAGE_STK( PG_NUMBER )
    69                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    70                                mov reg[STK_PP], @PG_NUMBER
    71                             ENDIF
    72  3C51                       endm
    73                          
    74                             ;-----------------------------------------------
    75                             ;  Set Current Page Macro
    76                             ;-----------------------------------------------
    77                             ;
    78                             ;  DESC: Modify CUR_PP in the large or small memory Models.
    79                             ;
    80                             ; INPUT: Constant value (e.g., >bFoo) for the RAM page number used in
    81                             ;        calculation of effective direct-mode address operands.
    82                             ;
    83                             ;  COST: 8 instruction cycles (in LMM only)
    84                          
    85                             macro RAM_SETPAGE_CUR( PG_NUMBER )
    86                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    87                                mov reg[CUR_PP], @PG_NUMBER
    88                             ENDIF
    89  3C51                       endm
    90                          
    91                             ;-----------------------------------------------
    92                             ;  Set Index Page Macro
    93                             ;-----------------------------------------------
    94                             ;
    95                             ;  DESC: Modify IDX_PP in the large or small emory Models.
    96                             ;
    97                             ; INPUT: Constant value (e.g., >caFoo) for the RAM page number used in
    98                             ;         calculation of effective index-mode address operands.
    99                             ;
   100                             ;  COST: 8 instruction cycles (in LMM only)
   101                          
   102                             macro RAM_SETPAGE_IDX( PG_NUMBER )
   103                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   104                                mov reg[IDX_PP], @PG_NUMBER
   105                             ENDIF
   106  3C51                       endm
   107                          
   108                             ;-----------------------------------------------
   109                             ;  Set MVI Read Page Macro
   110                             ;-----------------------------------------------
   111                             ;
   112                             ;  DESC: Modify MVR_PP in the large or small memory Models.
   113                             ;
   114                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   115                             ;        calculation of indirect address operands used in the
   116                             ;        "mvi A, [pFoo]" instructions.
   117                             ;
   118                             ;  COST: 8 instruction cycles (in LMM only)
   119                          
   120                             macro RAM_SETPAGE_MVR( PG_NUMBER )
   121                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   122                                mov reg[MVR_PP], @PG_NUMBER
   123                             ENDIF
   124  3C51                       endm
   125                          
   126                             ;-----------------------------------------------
   127                             ;  Set MVI Write Page Macro
   128                             ;-----------------------------------------------
   129                             ;
   130                             ;  DESC: Modify MVW_PP in the large or small memory Models.
   131                             ;
   132                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   133                             ;        calculation of indirect address operands used in the
   134                             ;        "mvi [pFoo], A" instructions.
   135                             ;
   136                             ;  COST: 8 instruction cycles (in LMM only)
   137                          
   138                             macro RAM_SETPAGE_MVW( PG_NUMBER )
   139                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   140                                mov reg[MVW_PP], @PG_NUMBER
   141                             ENDIF
   142  3C51                       endm
   143                          
   144                             ;-----------------------------------------------
   145                             ;  Force Index Page Pointer to Stack Page
   146                             ;-----------------------------------------------
   147                             ;
   148                             ;  DESC: Map index-mode operands onto the stack page by modifying IDX_PP.
   149                             ;        See also RAM_LOCK_INDEX_TO_STACKPAGE.
   150                             ;
   151                             ; INPUT: None
   152                             ;
   153                             ;  COST: 8 instruction cycles (in LMM only)
   154                          
   155                             macro RAM_SETPAGE_IDX2STK
   156                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   157                                IF ( SYSTEM_MULTIPAGE_STACK )
   158                                   mov   A, reg[STK_PP]
   159                                   mov   reg[IDX_PP], A
   160                                ELSE
   161                                   RAM_SETPAGE_IDX SYSTEM_STACK_PAGE
   162                                ENDIF
   163                             ENDIF
   164  3C51                       endm
   165                          
   166                             ;-----------------------------------------------
   167                             ;  Change Memory Mode
   168                             ;-----------------------------------------------
   169                             ;
   170                             ;  DESC: Modify FLAG_PAGEMODE bits in the large and small memory Models.
   171                             ;
   172                             ; INPUT: Constant value for PGMODE bitfield of CPU Flag register, F.
   173                             ;        See FLAG_PGMODE_{x} constants in M8C.INC.
   174                             ;
   175                             ;  COST: 8 instruction cycles (in LMM only)
   176                          
   177                             macro RAM_CHANGE_PAGE_MODE( MODE )
   178                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   179                                and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
   180                                or    F,  FLAG_PGMODE_MASK & @MODE
   181                             ENDIF
   182  3C51                       endm
   183                          
   184                             ;-----------------------------------------------
   185                             ;  Set Large Memory Model Native Paging Mode
   186                             ;-----------------------------------------------
   187                             ;
   188                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   189                             ;        paging mode *IFF* a simple "OR" is guaranteed to work---for
   190                             ;        example, in an ISR, when the PGMODE bits have been cleared
   191                             ;        to zero. If a simple "OR" is not guaranteed to work, use
   192                             ;        the slower RAM_RESTORE_NATIVE_PAGING instead.
   193                             ;
   194                             ; INPUT: none
   195                             ;
   196                             ;  COST: 4 instruction cycles (in LMM only)
   197                          
   198                             macro RAM_SET_NATIVE_PAGING
   199                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   200                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   201                                or    F,  FLAG_PGMODE_11b            ; LMM w/ IndexPage<==>StackPage
   202                             ENDIF ;  PGMODE LOCKED
   203                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   204                                or    F,  FLAG_PGMODE_10b            ; LMM with independent IndexPage
   205                             ENDIF ; PGMODE FREE
   206                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   207  3C51                       endm
   208                          
   209                             ;-----------------------------------------------
   210                             ; Restore Large Memory Model Native Paging Mode
   211                             ;-----------------------------------------------
   212                             ;
   213                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   214                             ;        paging mode. Always works because it clears the PGMODE bits
   215                             ;        before OR-ing in the new ones. See RAM_RESTORE_NATIVE_PAGING
   216                             ;        for a faster method.
   217                             ;
   218                             ; INPUT: none
   219                             ;
   220                             ;  COST: 8 instruction cycles (in LMM only)
   221                          
   222                             macro RAM_RESTORE_NATIVE_PAGING
   223                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   224                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   225                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_11b ; LMM w/ IndexPage<==>StackPage
   226                             ENDIF ;  PGMODE LOCKED
   227                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   228                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b ; LMM with independent IndexPage
   229                             ENDIF ; PGMODE FREE
   230                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   231  3C51                       endm
   232                          
   233                             ;-----------------------------------------------
   234                             ; Force indexed addr mode operands to Stack Pg
   235                             ;-----------------------------------------------
   236                             ;
   237                             ;  DESC: Force instructions that use indexed address mode to reference the
   238                             ;        stack page (as defined by STK_PP). This macro sets the "Indexed
   239                             ;        Stack Mode" bit (LSB) of the PGMODE bit field in the CPU Flag
   240                             ;        register, F. (See also RAM_SETPAGE_IDX2STK, above.)
   241                             ;
   242                             ; INPUT: none
   243                             ;
   244                             ;  COST: 4 instruction cycles (in LMM only)
   245                          
   246                             macro RAM_X_POINTS_TO_STACKPAGE
   247                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   248                                or   F, FLAG_PGMODE_01b
   249                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   250  3C51                       endm
   251                          
   252                             ;-----------------------------------------------
   253                             ;  Force indexed addr mode operands to Index Pg
   254                             ;-----------------------------------------------
   255                             ;
   256                             ;  DESC: Permit instructions that use indexed address mode to reference page
   257                             ;        zero or the page pointed to by the IDX_PP register, depending on the
   258                             ;        setting of the MSb (or "Direct Page Mode" bit) of the PGMODE bits
   259                             ;        in the CPU Flag register, F. (This macro clears the PGMODE LSb.)
   260                             ;
   261                             ; INPUT: none
   262                             ;
   263                             ;  COST: 4 instruction cycles (in LMM only)
   264                          
   265                             macro RAM_X_POINTS_TO_INDEXPAGE
   266                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   267                                and  F, ~FLAG_PGMODE_01b
   268                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   269  3C51                       endm
   270                          
   271                             ;-----------------------------------------------
   272                             ;  Function Prologue
   273                             ;-----------------------------------------------
   274                             ;
   275                             ;  Prologue for functions that run in the LMM and SMM.
   276                             ;
   277                          
   278                             macro RAM_PROLOGUE( ACTUAL_CLASS )
   279                          
   280                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   281                             ; Nothing to do
   282                             ENDIF ; RAM_USE_CLASS_1
   283                          
   284                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   285                                IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   286                                   RAM_X_POINTS_TO_STACKPAGE         ; exit native paging mode!
   287                                ENDIF
   288                             ENDIF ; RAM_USE_CLASS_2
   289                          
   290                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   291                                IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   292                                   RAM_X_POINTS_TO_INDEXPAGE         ; exit native paging mode!
   293                                ENDIF
   294                             ENDIF ; RAM_USE_CLASS_3
   295                          
   296                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   297                             ; Nothing to do
   298                             ENDIF ; RAM_USE_CLASS_4
   299                          
   300  3C51                       endm
   301                          
   302                             ;-----------------------------------------------
   303                             ;  Function Epilogue
   304                             ;-----------------------------------------------
   305                             ;
   306                             ;  Prologue for functions that run in the LMM and SMM.
   307                             ;
   308                          
   309                             macro RAM_EPILOGUE( ACTUAL_CLASS )
   310                          
   311                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   312                             ; Nothing to do
   313                             ENDIF ; RAM_USE_CLASS_1
   314                          
   315                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   316                                RAM_RESTORE_NATIVE_PAGING
   317                             ENDIF ; RAM_USE_CLASS_2
   318                          
   319                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   320                                RAM_RESTORE_NATIVE_PAGING
   321                             ENDIF ; RAM_USE_CLASS_3
   322                          
   323                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   324                             ; Nothing to do
   325                             ENDIF ; RAM_USE_CLASS_4
   326                          
   327  3C51                       endm
   328                          
   329                             ;-----------------------------------------------
   330                             ;  Preserve Register
   331                             ;-----------------------------------------------
   332                             ;
   333                             ;  DESC: Preserve a register value on the stack
   334                             ;
   335                             ; INPUT: Name or address of register in I/O Space
   336                             ;        The I/O bank is an implicit parameter. That is, this function will
   337                             ;        Access the I/O bank currently specified by the CPU Flag register.
   338                             ;
   339                             ;  USES: CPU 'A' register
   340                             ;
   341                             ;  COST: 9 instruction cycles
   342                          
   343                             macro REG_PRESERVE( IOReg )
   344                             mov   A, reg[ @IOReg ]
   345                             push  A
   346  3C51                       endm
   347                          
   348                             ;-----------------------------------------------
   349                             ;  Restore Register
   350                             ;-----------------------------------------------
   351                             ;
   352                             ;  DESC: Restore a register value from the stack
   353                             ;
   354                             ; INPUT: Name or address of register in I/O Space
   355                             ;        The I/O bank is an implicit parameter. That is, this function will
   356                             ;        Access the I/O bank currently specified by the CPU Flag register.
   357                             ;
   358                             ;  USES: CPU 'A' register
   359                             ;
   360                             ;  COST: 10 instruction cycles
   361                          
   362                             macro REG_RESTORE( IOReg )
   363                             pop   A
   364                             mov   reg[ @IOReg ], A
   365  3C51                       endm
   366                          
   367                             ;-----------------------------------------------
   368                             ;  Preserve Volatile Page Pointer Registers
   369                             ;-----------------------------------------------
   370                             ;
   371                             ;  DESC: Invoked by ISRs before switching to the LMM mode and calling
   372                             ;        functions that require on it.
   373                             ;
   374                             ; INPUT: none
   375                             ;
   376                             ;  USES: CPU 'A' register
   377                             ;
   378                             ;  COST: 45 instruction cycles (in LMM only)
   379                          
   380                             macro ISR_PRESERVE_PAGE_POINTERS
   381                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   382                                REG_PRESERVE CUR_PP
   383                                REG_PRESERVE IDX_PP
   384                                REG_PRESERVE MVR_PP
   385                                REG_PRESERVE MVW_PP
   386                             ENDIF
   387  3C51                       endm
   388                          
   389                             ;-----------------------------------------------
   390                             ;  Restore Volatile Page Pointer Registers
   391                             ;-----------------------------------------------
   392                             ;
   393                             ;  DESC: Undo for RAM_PRESERVE_PAGE_POINTERS macro. Invoked by ISRs after
   394                             ;        calling functions that run in the LMM mode and before executing
   395                             ;        the RETI instruction.
   396                             ;
   397                             ; INPUT: none
   398                             ;
   399                             ;  USES: CPU 'A' register
   400                             ;
   401                             ;  COST: 50 instruction cycles (in LMM only)
   402                          
   403                             macro ISR_RESTORE_PAGE_POINTERS
   404                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   405                                REG_RESTORE MVW_PP
   406                                REG_RESTORE MVR_PP
   407                                REG_RESTORE IDX_PP
   408                                REG_RESTORE CUR_PP
   409                             ENDIF
   410  3C51                       endm
     1                          ;  Generated by PSoC Designer 5.4.2946
     2                          ;
     3                          ;@Id: boot.tpl#904 @
     4                          ;=============================================================================
     5                          ;  FILENAME:   boot.asm
     6                          ;  Version:    1.50
     7                          ;
     8                          ;  DESCRIPTION:
     9                          ;  M8C Boot Code for CY8C22x45 microcontroller devices.
    10                          ;
    11                          ;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
    12                          ;
    13                          ; NOTES:
    14                          ; PSoC Designer's Device Editor uses a template file, BOOT.TPL, located in
    15                          ; the project's root directory to create BOOT.ASM. Any changes made to
    16                          ; BOOT.ASM will be  overwritten every time the project is generated; therefore
    17                          ; changes should be made to BOOT.TPL not BOOT.ASM. Care must be taken when
    18                          ; modifying BOOT.TPL so that replacement strings (such as @PROJECT_NAME)
    19                          ; are not accidentally modified.
    20                          ;
    21                          ;=============================================================================
    22                          
    23                          include ".\lib\GlobalParams.inc"	;File generated by PSoC Designer (Project dependent)
    24                          include "m8c.inc"			;Part specific file
    25                          include "m8ssc.inc"			;Part specific file
    26                          include "memory.inc"			;File generated by PSoC Designer (Project dependent)
    27                          
    28                          ;--------------------------------------
    29                          ; Export Declarations
    30                          ;--------------------------------------
    31                          
    32                          export __Start
    33                          IF	(TOOLCHAIN & HITECH)
    34                          ELSE
    35                          export __bss_start
    36                          export __data_start
    37                          export __idata_start
    38                          export __func_lit_start
    39                          export __text_start
    40                          ENDIF
    41                          export  _bGetPowerSetting
    42                          export   bGetPowerSetting
    43                          
    44                          
    45                          ;--------------------------------------
    46                          ; Optimization flags
    47                          ;--------------------------------------
    48                          ;
    49                          ; To change the value of these flags, modify the file boot.tpl, not
    50                          ; boot.asm. See the notes in the banner comment at the beginning of
    51                          ; this file.
    52                          
    53                          ; Optimization for Assembly language (only) projects and C-language projects
    54                          ; that do not depend on the C compiler to initialize the values of RAM variables.
    55                          ;   Set to 1: Support for C Run-time Environment initialization
    56                          ;   Set to 0: Support for C not included. Faster start up, smaller code space.
    57                          ;
    58                          IF	(TOOLCHAIN & HITECH)
    59                          ; The C compiler will customize the startup code - it's not required here
    60                          
    61  0000                    C_LANGUAGE_SUPPORT:              equ 0
    62                          ELSE
    63                          C_LANGUAGE_SUPPORT:              equ 1
    64                          ENDIF
    65                          
    66                          
    67                          ; For historical reasons, by default the boot code uses an lcall instruction
    68                          ; to invoke the user's _main code. If _main executes a return instruction,
    69                          ; boot provides an infinite loop. By changing the following equate from zero
    70                          ; to 1, boot's lcall will be replaced by a ljmp instruction, saving two
    71                          ; bytes on the stack which are otherwise required for the return address. If
    72                          ; this option is enabled, _main must not return. (Beginning with the 4.2
    73                          ; release, the C compiler automatically places an infinite loop at the end
    74                          ; of main, rather than a return instruction.)
    75                          ;
    76  0000                    ENABLE_LJMP_TO_MAIN:             equ 0
    77                          
    78                          ; The following equate is required for proper operation. Reseting its value
    79                          ; is discouraged.  WAIT_FOR_32K is effective only if the crystal oscillator is
    80                          ; selected.  If the designer chooses to not wait then stabilization of the ECO
    81                          ; and PLL_Lock must take place within user code. See the family data sheet for
    82                          ; the requirements of starting the ECO and PLL lock mode.
    83                          ;
    84                          ;   Set to 1: Wait for XTAL (& PLL if selected) to stabilize before
    85                          ;                invoking main
    86                          ;   Set to 0: Boot code does not wait; clock may not have stabilized by
    87                          ;               the time code in main starts executing.
    88                          ;
    89  0001                    WAIT_FOR_32K:                    equ 1
    90                          
    91                          ;-----------------------------------------------------------------------------
    92                          ; Interrupt Vector Table
    93                          ;-----------------------------------------------------------------------------
    94                          ;
    95                          ; Interrupt vector table entries are 4 bytes long.  Each one contains
    96                          ; a jump instruction to an ISR (Interrupt Service Routine), although
    97                          ; very short ISRs could be encoded within the table itself. Normally,
    98                          ; vector jump targets are modified automatically according to the user
    99                          ; modules selected. This occurs when the 'Generate Application' opera-
   100                          ; tion is run causing PSoC Designer to create boot.asm and the other
   101                          ; configuration files. If you need to hard code a vector, update the
   102                          ; file boot.tpl, not boot.asm. See the banner comment at the beginning
   103                          ; of this file.
   104                          ;-----------------------------------------------------------------------------
   105                          
   106                              AREA TOP (ROM, ABS, CON)
   107                          
   108  0000                        org   0                        ;Reset Interrupt Vector
   109                          IF	(TOOLCHAIN & HITECH)
   110                          ;   jmp   __Start                  ;C compiler fills in this vector
   111                          ELSE
   112                              jmp   __Start                  ;First instruction executed following a Reset
   113                          ENDIF
   114                              ;@PSoC_BOOT_ISR_UserCode_START@
   115                              ;---------------------------------------------------
   116                              ; Insert your custom code below this banner
   117                              ;---------------------------------------------------
   118                          
   119  0004                        org   04h                      ;Low Voltage Detect (LVD) Interrupt Vector
   120  0004  30                    halt                           ;Stop execution if power falls too low
   121                          
   122  0008                        org   08h                      ;Analog Column 0 Interrupt Vector
   123                              // call	void_handler
   124  0008  7E                    reti
   125                          
   126  000C                        org   0Ch                      ;Analog Column 1 Interrupt Vector
   127                              // call	void_handler
   128  000C  7E                    reti
   129                          
   130  0010                        org   10h                      ;Analog Column 2 Interrupt Vector
   131                              // call	void_handler
   132  0010  7E                    reti
   133                          
   134  0014                        org   14h                      ;Analog Column 3 Interrupt Vector
   135                              // call	void_handler
   136  0014  7E                    reti
   137                              
   138  0018                        org   18h                      ;VC3 Interrupt Vector
   139                              // call	void_handler
   140  0018  7E                    reti
   141                          
   142  001C                        org   1Ch                      ;GPIO Interrupt Vector
   143                              // call	void_handler
   144  001C  7E                    reti
   145                          
   146  0020                        org   20h                      ;PSoC Block DBC00 Interrupt Vector
   147                              // call	void_handler
   148  0020  7E                    reti
   149                          
   150  0024                        org   24h                      ;PSoC Block DBC01 Interrupt Vector
   151  0024  7C 3BA3               lcall _Timer16ISR
   152  0027  7E                    reti
   153                          
   154  0028                        org   28h                      ;PSoC Block DCC02 Interrupt Vector
   155  0028  7D 308A               ljmp	_UART_Sensor_TX_ISR
   156  002B  7E                    reti
   157                          
   158  002C                        org   2Ch                      ;PSoC Block DCC03 Interrupt Vector
   159  002C  7C 3BD3               lcall _SensorUART
   160  002F  7E                    reti
   161                              
   162  0030                        org   30h                      ;PSoC Block DBC10 Interrupt Vector
   163  0030  7D 2CCA               ljmp	_PWM8_BL_ISR
   164  0033  7E                    reti
   165                          
   166  0034                        org   34h                      ;PSoC Block DBC11 Interrupt Vector
   167                              // call	void_handler
   168  0034  7E                    reti
   169                          
   170  0038                        org   38h                      ;PSoC Block DCC12 Interrupt Vector
   171  0038  7D 2F3A               ljmp	_UART_Board_TX_ISR
   172  003B  7E                    reti
   173                          
   174  003C                        org   3Ch                      ;PSoC Block DCC13 Interrupt Vector
   175  003C  7C 3B8A               lcall _BoardUART
   176  003F  7E                    reti
   177                          
   178  0050                        org   50h                      ;SARADC Interrupt Vector
   179  0050  7D 2D89               ljmp	_SAR10_ISR
   180  0053  7E                    reti
   181                          
   182  0054                        org   54h                      ;CSD0 Interrupt Vector
   183                              // call	void_handler
   184  0054  7E                    reti
   185                          
   186  0058                        org   58h                      ;CSD1 Interrupt Vector
   187                              // call	void_handler
   188  0058  7E                    reti
   189                          
   190  005C                        org   5Ch                      ;RTC Interrupt Vector
   191                              // call	void_handler
   192  005C  7E                    reti
   193                              
   194  0050                        org 50h                        ;SAR10 Interrupt Vector
   195  0050  7D 2D89               ljmp	_SAR10_ISR
   196  0053  7E                    reti
   197                          
   198  0060                        org   60h                      ;PSoC I2C Interrupt Vector
   199                              // call	void_handler
   200  0060  7E                    reti
   201                          
   202  0064                        org   64h                      ;Sleep Timer Interrupt Vector
   203                              // call	void_handler
   204  0064  7E                    reti
   205                              ;---------------------------------------------------
   206                              ; Insert your custom code above this banner
   207                              ;---------------------------------------------------
   208                              ;@PSoC_BOOT_ISR_UserCode_END@
   209                          
   210                          ;-----------------------------------------------------------------------------
   211                          ;  Start of Execution.
   212                          ;-----------------------------------------------------------------------------
   213                          ;  The Supervisory ROM SWBootReset function has already completed the
   214                          ;  calibrate1 process, loading trim values for 5 volt operation.
   215                          ;
   216                          
   217                          IF	(TOOLCHAIN & HITECH)
   218                           	AREA PD_startup(CODE, REL, CON)
   219                          ELSE
   220                              org 68h
   221                          ENDIF
   222  3F3B                    __Start:
   223                          
   224                              ; initialize SMP values for voltage stabilization, if required,
   225                              ; leaving power-on reset (POR) level at the default (low) level, at
   226                              ; least for now. 
   227                              ;
   228  3F3B  71 10                 M8C_SetBank1
   229  3F3D  62 E3 87              mov   reg[VLT_CR], SWITCH_MODE_PUMP_JUST | LVD_TBEN_JUST | TRIP_VOLTAGE_JUST
   230  3F40  70 EF                 M8C_SetBank0
   231                          
   232  3F42  62 E3 38          M8C_ClearWDTAndSleep			   ; Clear WDT before enabling it.
   233                          IF ( WATCHDOG_ENABLE )             ; WDT selected in Global Params
   234  3F45  41 FF EF              M8C_EnableWatchDog
   235                          ENDIF
   236                          
   237  3F48  43 FE 04              or reg[CPU_SCR1], CPU_SCR1_ECO_ALLOWED ; Allow ECO being enabled
   238                          
   239                              ;---------------------------
   240                              ; Set up the Temporary stack
   241                              ;---------------------------
   242                              ; A temporary stack is set up for the SSC instructions.
   243                              ; The real stack start will be assigned later.
   244                              ;
   245  0080                    _stack_start:          equ 80h
   246  3F4B  50 80                 mov   A, _stack_start          ; Set top of stack to end of used RAM
   247  3F4D  4E                    swap  SP, A                    ; This is only temporary if going to LMM
   248                          
   249                              ;------------------------
   250                              ; Set Power-related Trim 
   251                              ;------------------------
   252  3F4E  62 E3 38          M8C_ClearWDTAndSleep ; Clear WDT before enabling it.
   253                          IF ( POWER_SETTING & POWER_SET_5V0)            ; *** 5.0 Volt operation   ***
   254                           IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
   255                              or  reg[CPU_SCR1], CPU_SCR1_SLIMO
   256                              M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_5V_6MHZ, 1, SSCTBL1_TRIM_BGR_5V
   257                           ENDIF
   258                          ENDIF ; 5.0 V Operation
   259                          
   260                          IF ( POWER_SETTING & POWER_SET_3V3)            ; *** 3.3 Volt operation   ***
   261                           IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
   262                              or  reg[CPU_SCR1], CPU_SCR1_SLIMO
   263                              M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_3V_6MHZ, 1, SSCTBL1_TRIM_BGR_3V
   264                           ELSE                                          ; *** 12MHZ Main Oscillator ***
   265                              M8SSC_SetTableTrims  1, SSCTBL1_TRIM_IMO_3V_24MHZ, SSCTBL1_TRIM_BGR_3V
   266                           ENDIF
   267                          ENDIF ; 3.3 Volt Operation
   268                          
   269                          IF ( POWER_SETTING & POWER_SET_2V7_12MHZ)      ; *** 2.7 Volts / 12MHZ operation ***
   270                              or  reg[CPU_SCR1], CPU_SCR1_SLIMO
   271                              M8SSC_SetTableTrims  2, SSCTBL2_TRIM_IMO_2V_12MHZ, SSCTBL2_TRIM_BGR_2V
   272                          ENDIF ; *** 2.7 Volts / 12MHZ operation ***
   273                          
   274                          IF ( POWER_SETTING & POWER_SET_2V7_6MHZ)       ; *** 2.7 Volts /  6MHZ operation ***
   275                              or  reg[CPU_SCR1], CPU_SCR1_SLIMO
   276                              M8SSC_SetTableTrims  2, SSCTBL2_TRIM_IMO_2V_6MHZ,  SSCTBL2_TRIM_BGR_2V
   277                          ENDIF ; *** 2.7 Volts /  6MHZ operation ***
   278                          
   279  3F51  55 F8 00              mov  [bSSC_KEY1],  0           ; Lock out Flash and Supervisiory operations
   280  3F54  55 F9 00              mov  [bSSC_KEYSP], 0
   281                          
   282                              ;---------------------------------------
   283                              ; Initialize Crystal Oscillator and PLL
   284                              ;---------------------------------------
   285                          IF ( SELECT_32K & WAIT_FOR_32K )
   286                              ; If the user has requested the External Crystal Oscillator (ECO) then turn it
   287                              ; on and wait for it to stabilize and the system to switch over to it. The PLL
   288                              ; is left off.  The SleepTimer period is set to 1 sec to time the wait for
   289                              ; the ECO to stabilize.
   290                              ;
   291                              M8C_SetBank1
   292                              mov   reg[OSC_CR0], (SELECT_32K_JUST | OSC_CR0_SLEEP_1Hz | OSC_CR0_CPU_12MHz)
   293                              M8C_SetBank0
   294                              M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get a full second
   295                              or    reg[INT_MSK0], INT_MSK0_SLEEP   ; Enable latching of SleepTimer interrupt
   296                              mov   reg[INT_VC],   0                ; Clear all pending interrupts
   297                          .WaitFor1s:
   298                              tst   reg[INT_CLR0], INT_MSK0_SLEEP   ; Test the SleepTimer Interrupt Status
   299                              jz   .WaitFor1s                       ; Interrupt will latch but will not dispatch
   300                                                                    ;  since interrupts are not globally enabled
   301                          ELSE ; !( SELECT_32K & WAIT_FOR_32K )
   302                              ; Either no ECO, or waiting for stable clock is to be done in main
   303  3F57  71 10                 M8C_SetBank1
   304  3F59  62 E0 12              mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | OSC_CR0_CPU_12MHz)
   305  3F5C  70 EF                 M8C_SetBank0
   306  3F5E  62 E3 38              M8C_ClearWDTAndSleep           ; Reset the watch dog
   307                          
   308                          ENDIF ;( SELECT_32K & WAIT_FOR_32K )
   309                          
   310                          IF ( PLL_MODE )
   311                              ; Crystal is now fully operational (assuming WAIT_FOR_32K was enabled).
   312                              ; Now start up PLL if selected, and wait 16 msec for it to stabilize.
   313                              ;
   314                              M8C_SetBank1
   315                              mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_3MHz)
   316                              M8C_SetBank0
   317                              M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get full period
   318                              mov   reg[INT_VC], 0                  ; Clear all pending interrupts
   319                          
   320                          .WaitFor16ms:
   321                              tst   reg[INT_CLR0],INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
   322                              jz   .WaitFor16ms
   323                              M8C_SetBank1                          ; continue boot at CPU Speed of SYSCLK/2
   324                              mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_12MHz)
   325                              M8C_SetBank0
   326                          
   327                          IF      ( WAIT_FOR_32K )
   328                          ELSE ; !( WAIT_FOR_32K )
   329                              ; Option settings (PLL-Yes, ECO-No) are incompatible - force a syntax error
   330                              ERROR_PSoC Disabling WAIT_FOR_32K requires that the PLL_Lock must be enabled in user code.
   331                          ENDIF ;(WAIT_FOR_32K)
   332                          ENDIF ;(PLL_MODE)
   333                          
   334                          	;-------------------------------------------------------
   335                              ; Initialize Proper Drive Mode for External Clock Pin
   336                              ;-------------------------------------------------------
   337                          
   338                              ; Change EXTCLK pin from Hi-Z Analog (110b) drive mode to Hi-Z (010b) drive mode
   339                          
   340                          IF (SYSCLK_SOURCE)
   341                              and reg[PRT1DM2],  ~0x10        ; Clear bit 4 of EXTCLK pin's DM2 register 
   342                          ENDIF
   343                              ; EXTCLK pin is now in proper drive mode to input the external clock signal
   344                          
   345                          IF	(TOOLCHAIN & HITECH)
   346                              ;---------------------------------------------
   347                              ; HI-TECH initialization: Enter the Large Memory Model, if applicable
   348                              ;---------------------------------------------
   349                          	global		__Lstackps
   350  3F61  50 00             	mov     a,low __Lstackps
   351  3F63  4E                	swap    a,sp
   352                          
   353                          IF ( SYSTEM_LARGE_MEMORY_MODEL )
   354  3F64  62 D1 03              RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
   355  3F67  62 D3 03              RAM_SETPAGE_IDX2STK            ; initialize other page pointers
   356  3F6A  62 D0 00              RAM_SETPAGE_CUR 0
   357  3F6D  62 D5 00              RAM_SETPAGE_MVW 0
   358  3F70  62 D4 00              RAM_SETPAGE_MVR 0
   359                              IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
   360                                or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
   361                              ELSE
   362  3F73  71 80                   or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
   363                              ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
   364                          ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   365                          ELSE
   366                              ;---------------------------------------------
   367                              ; ImageCraft Enter the Large Memory Model, if applicable
   368                              ;---------------------------------------------
   369                          IF ( SYSTEM_LARGE_MEMORY_MODEL )
   370                              RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
   371                              mov   A, SYSTEM_STACK_BASE_ADDR        ;   and offset, if any
   372                              swap  A, SP
   373                              RAM_SETPAGE_IDX2STK            ; initialize other page pointers
   374                              RAM_SETPAGE_CUR 0
   375                              RAM_SETPAGE_MVW 0
   376                              RAM_SETPAGE_MVR 0
   377                          
   378                            IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
   379                              or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
   380                            ELSE
   381                              or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
   382                            ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
   383                          ELSE
   384                              mov   A, __ramareas_end        ; Set top of stack to end of used RAM
   385                              swap  SP, A
   386                          ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   387                          ENDIF ;	TOOLCHAIN
   388                          
   389                              ;@PSoC_BOOT_LOADCFG_UserCode_START@
   390                              ;---------------------------------------------------
   391                              ; Insert your custom code below this banner
   392                              ;---------------------------------------------------
   393                          
   394                              ;---------------------------------------------------
   395                              ; Insert your custom code above this banner
   396                              ;---------------------------------------------------
   397                              ;@PSoC_BOOT_LOADCFG_UserCode_END@ 
   398                          
   399                              ;-------------------------
   400                              ; Load Base Configuration
   401                              ;-------------------------
   402                              ; Load global parameter settings and load the user modules in the
   403                              ; base configuration. Exceptions: (1) Leave CPU Speed fast as possible
   404                              ; to minimize start up time; (2) We may still need to play with the
   405                              ; Sleep Timer.
   406                              ;
   407  3F75  7C 2AEC               lcall LoadConfigInit
   408                          
   409                              ;-----------------------------------
   410                              ; Initialize C Run-Time Environment
   411                              ;-----------------------------------
   412                          IF ( C_LANGUAGE_SUPPORT )
   413                          IF ( SYSTEM_SMALL_MEMORY_MODEL )
   414                              mov  A,0                           ; clear the 'bss' segment to zero
   415                              mov  [__r0],<__bss_start
   416                          BssLoop:
   417                              cmp  [__r0],<__bss_end
   418                              jz   BssDone
   419                              mvi  [__r0],A
   420                              jmp  BssLoop
   421                          BssDone:
   422                              mov  A,>__idata_start              ; copy idata to data segment
   423                              mov  X,<__idata_start
   424                              mov  [__r0],<__data_start
   425                          IDataLoop:
   426                              cmp  [__r0],<__data_end
   427                              jz   C_RTE_Done
   428                              push A
   429                              romx
   430                              mvi  [__r0],A
   431                              pop  A
   432                              inc  X
   433                              adc  A,0
   434                              jmp  IDataLoop
   435                          
   436                          ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
   437                          
   438                          IF ( SYSTEM_LARGE_MEMORY_MODEL )
   439                              mov   reg[CUR_PP], >__r0           ; force direct addr mode instructions
   440                                                                 ; to use the Virtual Register page.
   441                          
   442                              ; Dereference the constant (flash) pointer pXIData to access the start
   443                              ; of the extended idata area, "xidata." Xidata follows the end of the
   444                              ; text segment and may have been relocated by the Code Compressor.
   445                              ;
   446                              mov   A, >__pXIData                ; Get the address of the flash
   447                              mov   X, <__pXIData                ;   pointer to the xidata area.
   448                              push  A
   449                              romx                               ; get the MSB of xidata's address
   450                              mov   [__r0], A
   451                              pop   A
   452                              inc   X
   453                              adc   A, 0
   454                              romx                               ; get the LSB of xidata's address
   455                              swap  A, X
   456                              mov   A, [__r0]                    ; pXIData (in [A,X]) points to the
   457                                                                 ;   XIData structure list in flash
   458                              jmp   .AccessStruct
   459                          
   460                              ; Unpack one element in the xidata "structure list" that specifies the
   461                              ; values of C variables. Each structure contains 3 member elements.
   462                              ; The first is a pointer to a contiguous block of RAM to be initial-
   463                              ; ized. Blocks are always 255 bytes or less in length and never cross
   464                              ; RAM page boundaries. The list terminates when the MSB of the pointer
   465                              ; contains 0xFF. There are two formats for the struct depending on the
   466                              ; value in the second member element, an unsigned byte:
   467                              ; (1) If the value of the second element is non-zero, it represents
   468                              ; the 'size' of the block of RAM to be initialized. In this case, the
   469                              ; third member of the struct is an array of bytes of length 'size' and
   470                              ; the bytes are copied to the block of RAM.
   471                              ; (2) If the value of the second element is zero, the block of RAM is
   472                              ; to be cleared to zero. In this case, the third member of the struct
   473                              ; is an unsigned byte containing the number of bytes to clear.
   474                          
   475                          .AccessNextStructLoop:
   476                              inc   X                            ; pXIData++
   477                              adc   A, 0
   478                          .AccessStruct:                         ; Entry point for first block
   479                              ;
   480                              ; Assert: pXIData in [A,X] points to the beginning of an XIData struct.
   481                              ;
   482                              M8C_ClearWDT                       ; Clear the watchdog for long inits
   483                              push  A
   484                              romx                               ; MSB of RAM addr (CPU.A <- *pXIData)
   485                              mov   reg[MVW_PP], A               ;   for use with MVI write operations
   486                              inc   A                            ; End of Struct List? (MSB==0xFF?)
   487                              jz    .C_RTE_WrapUp                ;   Yes, C runtime environment complete
   488                              pop   A                            ; restore pXIData to [A,X]
   489                              inc   X                            ; pXIData++
   490                              adc   A, 0
   491                              push  A
   492                              romx                               ; LSB of RAM addr (CPU.A <- *pXIData)
   493                              mov   [__r0], A                    ; RAM Addr now in [reg[MVW_PP],[__r0]]
   494                              pop   A                            ; restore pXIData to [A,X]
   495                              inc   X                            ; pXIData++ (point to size)
   496                              adc   A, 0
   497                              push  A
   498                              romx                               ; Get the size (CPU.A <- *pXIData)
   499                              jz    .ClearRAMBlockToZero         ; If Size==0, then go clear RAM
   500                              mov   [__r1], A                    ;             else downcount in __r1
   501                              pop   A                            ; restore pXIData to [A,X]
   502                          
   503                          .CopyNextByteLoop:
   504                              ; For each byte in the structure's array member, copy from flash to RAM.
   505                              ; Assert: pXIData in [A,X] points to previous byte of flash source;
   506                              ;         [reg[MVW_PP],[__r0]] points to next RAM destination;
   507                              ;         __r1 holds a non-zero count of the number of bytes remaining.
   508                              ;
   509                              inc   X                            ; pXIData++ (point to next data byte)
   510                              adc   A, 0
   511                              push  A
   512                              romx                               ; Get the data value (CPU.A <- *pXIData)
   513                              mvi   [__r0], A                    ; Transfer the data to RAM
   514                              tst   [__r0], 0xff                 ; Check for page crossing
   515                              jnz   .CopyLoopTail                ;   No crossing, keep going
   516                              mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
   517                              inc   A
   518                              mov   reg[ MVW_PP], A
   519                          .CopyLoopTail:
   520                              pop   A                            ; restore pXIData to [A,X]
   521                              dec   [__r1]                       ; End of this array in flash?
   522                              jnz   .CopyNextByteLoop            ;   No,  more bytes to copy
   523                              jmp   .AccessNextStructLoop        ;   Yes, initialize another RAM block
   524                          
   525                          .ClearRAMBlockToZero:
   526                              pop   A                            ; restore pXIData to [A,X]
   527                              inc   X                            ; pXIData++ (point to next data byte)
   528                              adc   A, 0
   529                              push  A
   530                              romx                               ; Get the run length (CPU.A <- *pXIData)
   531                              mov   [__r1], A                    ; Initialize downcounter
   532                              mov   A, 0                         ; Initialize source data
   533                          
   534                          .ClearRAMBlockLoop:
   535                              ; Assert: [reg[MVW_PP],[__r0]] points to next RAM destination and
   536                              ;         __r1 holds a non-zero count of the number of bytes remaining.
   537                              ;
   538                              mvi   [__r0], A                    ; Clear a byte
   539                              tst   [__r0], 0xff                 ; Check for page crossing
   540                              jnz   .ClearLoopTail               ;   No crossing, keep going
   541                              mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
   542                              inc   A
   543                              mov   reg[ MVW_PP], A
   544                              mov   A, 0                         ; Restore the zero used for clearing
   545                          .ClearLoopTail:
   546                              dec   [__r1]                       ; Was this the last byte?
   547                              jnz   .ClearRAMBlockLoop           ;   No,  continue
   548                              pop   A                            ;   Yes, restore pXIData to [A,X] and
   549                              jmp   .AccessNextStructLoop        ;        initialize another RAM block
   550                          
   551                          .C_RTE_WrapUp:
   552                              pop   A                            ; balance stack
   553                          
   554                          ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   555                          
   556                          C_RTE_Done:
   557                          
   558                          ENDIF ; C_LANGUAGE_SUPPORT
   559                          
   560                              ;-------------------------------
   561                              ; Voltage Stabilization for SMP
   562                              ;-------------------------------
   563                          
   564                          IF ( POWER_SETTING & POWER_SET_5V0)    ; 5.0V Operation
   565                          IF ( SWITCH_MODE_PUMP ^ 1 )            ; SMP is operational
   566                              ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   567                              ; When using the SMP at 5V, we must wait for Vdd to slew from 3.1V to
   568                              ; 5V before enabling the Precision Power-On Reset (PPOR).
   569                              ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   570                              or   reg[INT_MSK0],INT_MSK0_SLEEP
   571                              M8C_SetBank1
   572                              and   reg[OSC_CR0], ~OSC_CR0_SLEEP
   573                              or    reg[OSC_CR0],  OSC_CR0_SLEEP_512Hz
   574                              M8C_SetBank0
   575                              M8C_ClearWDTAndSleep                   ; Restart the sleep timer
   576                              mov   reg[INT_VC], 0                   ; Clear all pending interrupts
   577                          .WaitFor2ms:
   578                              tst   reg[INT_CLR0], INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
   579                              jz   .WaitFor2ms                       ; Branch fails when 2 msec has passed
   580                          ENDIF ; SMP is operational
   581                          ENDIF ; 5.0V Operation
   582                          
   583                              ;-------------------------------
   584                              ; Set Power-On Reset (POR) Level
   585                              ;-------------------------------
   586                          
   587                              ; This checks for improper selection of CPU voltage and processer speed ratings. If an improper 
                                selection 
   588                              ; is made (in the global resources section of the device editor), a compilation error is created
                                , disallowing
   589                              ; this selection. If the selection is valid, the POR level is then set.
   590                              ; Invalid cases checked: 
   591                              ;   -At 3.3 volt operation, the cpu rate must be at or below 12 MHz
   592                              ;   -At 2.7 volt operation, the cpu rate must be at or below 3 MHz
   593                          
   594                          
   595                          IF (POWER_SETTING & POWER_SET_3V3)		; 3.3V Operation?
   596                           IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** SLIMO = 6MHZ, Do Nothing ***
   597                           ELSE
   598                             IF (CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz)	; Not 24 MHz, Do Nothing...
   599                             ELSE						; Otherwise, 24 MHz is selected... raise error
   600                          	ERROR_PSoC SEE COMMENTS			; Error - cannot use 24 MHz w/ 3.3V operation (Clock <= 12 MHz)
   601                             ENDIF
   602                           ENDIF
   603                          ELSE
   604                          IF (POWER_SETTING & POWER_SET_2V7_12MHZ)	; 2.7V Operation with 12 MHz SLIMO?
   605                             IF(CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz)	; Not 12 MHz, do nothing. ("OSC_CR0_CPU_24MHz" setting is 
                                actually IMO/1)
   606                             ELSE						; Otherwise, 12 MHz is selected... raise error
   607                                ERROR_PSoC SEE COMMENTS			; Error - cannot use 12 MHz w/ 2.7V operation (Clock <= 3 MHz)
   608                             ENDIF;
   609                             IF(CPU_CLOCK_JUST ^ OSC_CR0_CPU_12MHz)	; Not 6 MHz, do nothing. ("OSC_CR0_CPU_12MHz" setting is a
                                ctually IMO/2)
   610                             ELSE						; Otherwise, 6 MHz is selected... raise error
   611                                ERROR_PSoC SEE COMMENTS			; Error - Cannot use 6 MHz w/ 2.7V operation (Clock <= 3 MHz)
   612                             ENDIF;CPU_12MHz
   613                          ELSE
   614                          IF (POWER_SETTING & POWER_SET_2V7_6MHZ)		; 2.7V Operation with 6 MHz SLIMO?
   615                             IF(CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz)	; Not 6 MHz, do nothing. ("OSC_CR0_CPU_24MHz" setting is a
                                ctually IMO/1)
   616                             ELSE						; Otherwise, 6 MHz is selected... raise error
   617                          	ERROR_PSoC SEE COMMENTS			; Error - cannot use 6 MHz w/ 2.7V operation (Clock <= 3 MHz)
   618                             ENDIF
   619                          ENDIF ; 2.7v w/ 6 MHz
   620                          ENDIF ; 2.7v w/ 12 MHz
   621                          ENDIF ; 3.3V w/ 24 MHz
   622                              ;  The writes to the VLT_CR register below include setting the POR to VLT_CR_POR_HIGH, 
   623                              ;  VLT_CR_POR_MID or VLT_CR_POR_LOW. Correctly setting this value is critical to the proper 
   624                              ;  operation of the PSoC. The POR protects the M8C from mis-executing when Vdd falls low. 
   625                              ;  These values should not be changed from the settings here. See Section "POR and LVD" of 
   626                              ;  Technical Reference Manual #001-48461 for more information.
   627                          
   628  3F78  71 10                 M8C_SetBank1
   629                          
   630                          IF (POWER_SETTING & POWER_SET_2V7)             ; 2.7V Operation?
   631                                                                         ;  Yes, lowest trip already set
   632                          ELSE                                           ;   No, must adjust POR...
   633                          IF (POWER_SETTING & POWER_SET_3V3)             ; 3.3V Operation?
   634                              or   reg[VLT_CR], VLT_CR_POR_MID           ;   Yes, change to midpoint trip
   635                          ELSE
   636                          IF (POWER_SETTING & POWER_SET_5V0)             ; 5.0V Operation?
   637                           IF (POWER_SETTING & POWER_SET_SLOW_IMO)       ; and Slow Mode?
   638                              or   reg[VLT_CR], VLT_CR_POR_MID           ;   Yes, set to midpoint trip
   639                           ELSE                                          ;    No, fast mode
   640                            IF ( CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz )    ;      As fast as 24MHz?
   641                              or   reg[VLT_CR], VLT_CR_POR_MID           ;         No, change to midpoint trip
   642                            ELSE ; 24HMz                                 ;
   643  3F7A  43 E3 20              or    reg[VLT_CR], VLT_CR_POR_HIGH         ;        Yes, switch to	highest setting
   644                            ENDIF ; 24MHz
   645                           ENDIF ; Slow Mode
   646                          ENDIF ; 5.0V Operation
   647                          ENDIF ; 3.3V Operation
   648                          ENDIF ; 2.7V Operation
   649                          
   650  3F7D  70 EF                 M8C_SetBank0
   651                          
   652                              ;----------------------------
   653                              ; Wrap up and invoke "main"
   654                              ;----------------------------
   655                          
   656                              ; Disable the Sleep interrupt that was used for timing above.  In fact,
   657                              ; no interrupts should be enabled now, so may as well clear the register.
   658                              ;
   659  3F7F  62 E0 00              mov  reg[INT_MSK0],0
   660                          
   661                              ; Everything has started OK. Now select requested CPU & sleep frequency.
   662                              ;
   663  3F82  71 10                 M8C_SetBank1
   664  3F84  62 E0 13              mov reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | CPU_CLOCK_JUST)
   665  3F87  43 E2 00              or  reg[OSC_CR2], (SLEEP_TIMER_JUST2)
   666  3F8A  70 EF                 M8C_SetBank0
   667                          
   668                              ; Global Interrupt are NOT enabled, this should be done in main().
   669                              ; LVD is set but will not occur unless Global Interrupts are enabled.
   670                              ; Global Interrupts should be enabled as soon as possible in main().
   671                              ;
   672  3F8C  62 E2 00              mov  reg[INT_VC],0             ; Clear any pending interrupts which may
   673                                                             ; have been set during the boot process.
   674                          IF	(TOOLCHAIN & HITECH)
   675  3F8F  7D 3F95           	ljmp  startup                  ; Jump to C compiler startup code
   676                          ELSE
   677                          IF ENABLE_LJMP_TO_MAIN
   678                              ljmp  _main                    ; goto main (no return)
   679                          ELSE
   680                              lcall _main                    ; call main
   681                          .Exit:
   682                              jmp  .Exit                     ; Wait here after return till power-off or reset
   683                          ENDIF
   684                          ENDIF ; TOOLCHAIN
   685                          
   686                              ;---------------------------------
   687                              ; Library Access to Global Parms
   688                              ;---------------------------------
   689                              ;
   690  3F92                     bGetPowerSetting:
   691  3F92                    _bGetPowerSetting:
   692                              ; Returns value of POWER_SETTING in the A register.
   693                              ; No inputs. No Side Effects.
   694                              ;
   695                          IF (POWER_SETTING & POWER_SET_2V7)
   696                              mov   A, POWER_SETTING | POWER_SET_SLOW_IMO
   697                          ELSE
   698  3F92  50 10                 mov   A, POWER_SETTING          ; Supply voltage and internal main osc
   699                          ENDIF
   700  3F94  7F                    ret
HI-TECH Software Macro Assembler (PSoC MCU) V9.61
Symbol Table                                                                                               Fri Jun 12 09:25:12 2015
           SELECT_32K_JUST 0000                  __Lstackps 0300          C_LANGUAGE_SUPPORT 0000                 _Timer16ISR 3BA3  
             POWER_SET_2V7 0006               POWER_SET_3V3 0008               POWER_SETTING 0010               POWER_SET_5V0 0010  
               _SensorUART 3BD3            SLEEP_TIMER_JUST 0010                    CPU_SCR0 00FF                    CPU_SCR1 00FE  
          bGetPowerSetting 3F92                    INT_MSK0 00E0          POWER_SET_2V7_6MHZ 0002                    PLL_MODE 0000  
                    HITECH 0002             FLAG_PGMODE_10b 0080                      IDX_PP 00D3                      CUR_PP 00D0  
                    INT_VC 00E2              CPU_CLOCK_JUST 0003                      MVR_PP 00D4                      MVW_PP 00D5  
         _bGetPowerSetting 3F92                WAIT_FOR_32K 0001                      STK_PP 00D1               LVD_TBEN_JUST 0000  
                    VLT_CR 00E3             VLT_CR_POR_HIGH 0020       SWITCH_MODE_PUMP_JUST 0080           SLEEP_TIMER_JUST2 0000  
              _stack_start 0080                _PWM8_BL_ISR 2CCA                  _SAR10_ISR 2D89   SYSTEM_LARGE_MEMORY_MODEL 0001  
       POWER_SET_2V7_12MHZ 0004      SYSTEM_MULTIPAGE_STACK 0000          POWER_SET_SLOW_IMO 0001               PLL_MODE_JUST 0000  
                 TOOLCHAIN 0002            SWITCH_MODE_PUMP 0001               SYSCLK_SOURCE 0000                     OSC_CR0 00E0  
                   OSC_CR2 00E2                     RES_WDT 00E3          CPU_SCR0_PORS_MASK 0010             WATCHDOG_ENABLE 0001  
        _UART_Board_TX_ISR 2F3A                  bSSC_KEYSP 00F9        CPU_SCR1_ECO_ALLOWED 0004              LoadConfigInit 2AEC  
       _UART_Sensor_TX_ISR 308A                     __Start 3F3B                  _BoardUART 3B8A                   bSSC_KEY1 00F8  
         OSC_CR0_CPU_12MHz 0002           OSC_CR0_CPU_24MHz 0003                     startup 3F95           SYSTEM_STACK_PAGE 0003  
             FLAG_XIO_MASK 0010                  SELECT_32K 0000           TRIP_VOLTAGE_JUST 0007  SYSTEM_IDXPG_TRACKS_STK_PP 0000  
HI-TECH Software Macro Assembler (PSoC MCU) V9.61
                                                                                                           Fri Jun 12 10:41:26 2015
     1                          
     2                          	; HI-TECH C COMPILER (Cypress PSOC) V9.61
     3                          	; Copyright (C) 1984-2008 HI-TECH Software
     4                          	;Serial no. HCPSOC-679591
     5                          
     6                          	; Auto-generated runtime startup code for final link stage.
     7                          
     8                          	;
     9                          	; Compiler options:
    10                          	;
    11                          	; --asmlist --errformat --chip=CY8C22345 --WARN=0 --OPT=asm,9 \
    12                          	; -OLCD_display -Moutput/LCD_display.mp --OUTDIR=./output \
    13                          	; ./obj/boot.obj ./obj/boardcommunication.p1 ./obj/ht1621b.p1 \
    14                          	; ./obj/lcd.p1 ./obj/main.p1 ./obj/particlesensor.p1 ./obj/si7020.p1 \
    15                          	; ./obj/software_iic.p1 lib/libpsoc.lib lib/libpsoc.lpp \
    16                          	; D:/Cypress/PSOCDE~1/5.4/Common/CY110F~1/tools/lib/CY8C22045/cms.lib
    17                          	;
    18                          
    19                          
    20                          	processor	CY8C22345
    21                          	macro	M8C_ClearWDT
    22                          	mov reg[0xE3],0x38
    23  308C                    	endm
    24                          
    25                          	psect	PD_startup,class=CODE
    26                          	psect	init,class=CODE
    27                          	psect	end_init,class=CODE
    28                          	psect	powerup,class=CODE
    29                          	psect	vectors,ovrld,class=CODE
    30                          	psect	text,class=CODE
    31                          	psect	maintext,class=CODE
    32                          	psect	intrtext,class=CODE
    33                          	psect	fnauto,class=RAM,space=1
    34                          	psect	bss,class=RAM,space=1
    35                          	psect	InterruptRAM,class=RAM,space=1
    36                          	psect	cdata,class=ROM,space=0,reloc=256
    37                          	psect	psoc_config,class=ROM
    38                          	psect	UserModules,class=ROM
    39                          	psect	strings,class=ROM
    40                          	psect	SSCParmBlk,abs,ovrld,class=RAM,space=1
    41  00F8                    	org	0xF8
    42  00F8                    	blk	8
    43                          
    44                          	psect	stackps,class=RAM
    45                          	global	__Lstackps, __stack_start__
    46  0300                    __stack_start__:
    47                          	psect	bss0,class=RAM,space=1
    48                          	psect	nvram0,class=RAM,space=1
    49                          	psect	rbit0,bit,class=RAM,space=1
    50                          	psect	nvbit0,bit,class=RAM,space=1
    51                          	psect	ramdata0,class=RAM,space=1
    52                          	psect	romdata0,class=BANKROM,space=0
    53                          	psect	bss1,class=RAM,space=1
    54                          	psect	nvram1,class=RAM,space=1
    55                          	psect	rbit1,bit,class=RAM,space=1
    56                          	psect	nvbit1,bit,class=RAM,space=1
    57                          	psect	ramdata1,class=RAM,space=1
    58                          	psect	romdata1,class=BANKROM,space=0
    59                          	psect	bss2,class=RAM,space=1
    60                          	psect	nvram2,class=RAM,space=1
    61                          	psect	rbit2,bit,class=RAM,space=1
    62                          	psect	nvbit2,bit,class=RAM,space=1
    63                          	psect	ramdata2,class=RAM,space=1
    64                          	psect	romdata2,class=BANKROM,space=0
    65                          	psect	bss3,class=RAM,space=1
    66                          	psect	nvram3,class=RAM,space=1
    67                          	psect	rbit3,bit,class=RAM,space=1
    68                          	psect	nvbit3,bit,class=RAM,space=1
    69                          	psect	ramdata3,class=RAM,space=1
    70                          	psect	romdata3,class=BANKROM,space=0
    71                          
    72                          	global	start,startup,_main
    73                          	global	reset_vec,intlevel0,intlevel1,intlevel2
    74  0003                    intlevel0:
    75  0003                    intlevel1:
    76  0003                    intlevel2:		; for C funcs called from assembler
    77                          
    78                          	fnconf	fnauto,??,?
    79                          	fnroot	_main
    80  006C                    TMP_DR0	equ	108
    81  006D                    TMP_DR1	equ	109
    82  006E                    TMP_DR2	equ	110
    83  006F                    TMP_DR3	equ	111
    84  00D0                    CUR_PP	equ	208
    85  00D1                    STK_PP	equ	209
    86  00D3                    IDX_PP	equ	211
    87  00D4                    MVR_PP	equ	212
    88  00D5                    MVW_PP	equ	213
    89  00F7                    CPU_F	equ	247
    90                          	psect	vectors
    91  0000                    reset_vec:
    92  0000                    start:
    93                          	global	__Start
    94  0000  7D 3F3B           	ljmp	__Start
    95                          
    96                          	psect	init
    97  3F95                    startup:
    98  3F95  62 E3 38          	M8C_ClearWDT
    99  3F98  71 80             	or	f, 0x80	;select multiple RAM page mode
   100  3F9A  70 BF             	and	f, 0xBF
   101                          
   102                          ;	Clear uninitialized variables in bank 0
   103                          	global	__Lbss0
   104  3F9C  62 D1 00          	mov	reg[STK_PP],0
   105  3F9F  50 00             	mov	a,low __Lbss0
   106  3FA1  4E                	swap	a,sp
   107  3FA2  50 00             	mov	a,0
   108  3FA4  57 5A             	mov	x,90
   109  3FA6                    bssloop0:
   110  3FA6  08                	push	a
   111  3FA7  79                	dec	x
   112  3FA8  BFFD              	jnz	bssloop0
   113                          
   114                          ;	Copy initialized data into bank 0
   115                          	global	__Lromdata0,__Lramdata0
   116  3FAA  57 65             	mov	x,low __Lromdata0
   117  3FAC  50 5A             	mov	a,low __Lramdata0
   118  3FAE  4E                	swap	a,sp
   119  3FAF                    dataloop0:
   120  3FAF  50 00             	mov	a,high __Lromdata0
   121  3FB1  28                	romx
   122  3FB2  08                	push	a
   123  3FB3  75                	inc	x
   124  3FB4  5B                		mov	a,x
   125  3FB5  39 6C             cmp	a,low (__Lromdata0+7)
   126  3FB7  BFF7              	jnz	dataloop0
   127  3FB9  62 D0 00          	mov	reg[CUR_PP],0
   128  3FBC  62 D1 03          	mov	reg[STK_PP],3
   129  3FBF  50 00             	mov	a,low __Lstackps
   130  3FC1  4E                	swap	a,sp
   131                          
   132  3FC2  7D 3C51           	ljmp	_main
HI-TECH Software Macro Assembler (PSoC MCU) V9.61
Symbol Table                                                                                               Fri Jun 12 10:41:26 2015
    __Lramdata0 005A       __Lstackps 0300      __Lromdata0 0065            _main 3C51            start 0000        dataloop0 3FAF  
         CUR_PP 00D0           STK_PP 00D1        intlevel0 0003        intlevel1 0003        intlevel2 0003        reset_vec 0000  
       bssloop0 3FA6          __Lbss0 0000          __Start 3F3B          startup 3F95  __stack_start__ 0300  
