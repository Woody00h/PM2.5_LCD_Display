FILE: .\boot.asm                        (0001) ;  Generated by PSoC Designer 5.4.2946
                                        (0002) ;
                                        (0003) ;@Id: boot.tpl#904 @
                                        (0004) ;=============================================================================
                                        (0005) ;  FILENAME:   boot.asm
                                        (0006) ;  Version:    1.50
                                        (0007) ;
                                        (0008) ;  DESCRIPTION:
                                        (0009) ;  M8C Boot Code for CY8C22x45 microcontroller devices.
                                        (0010) ;
                                        (0011) ;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0012) ;
                                        (0013) ; NOTES:
                                        (0014) ; PSoC Designer's Device Editor uses a template file, BOOT.TPL, located in
                                        (0015) ; the project's root directory to create BOOT.ASM. Any changes made to
                                        (0016) ; BOOT.ASM will be  overwritten every time the project is generated; therefore
                                        (0017) ; changes should be made to BOOT.TPL not BOOT.ASM. Care must be taken when
                                        (0018) ; modifying BOOT.TPL so that replacement strings (such as @PROJECT_NAME)
                                        (0019) ; are not accidentally modified.
                                        (0020) ;
                                        (0021) ;=============================================================================
                                        (0022) 
                                        (0023) include ".\lib\GlobalParams.inc"	;File generated by PSoC Designer (Project dependent)
                                        (0024) include "m8c.inc"			;Part specific file
                                        (0025) include "m8ssc.inc"			;Part specific file
                                        (0026) include "memory.inc"			;File generated by PSoC Designer (Project dependent)
                                        (0027) 
                                        (0028) ;--------------------------------------
                                        (0029) ; Export Declarations
                                        (0030) ;--------------------------------------
                                        (0031) 
                                        (0032) export __Start
                                        (0033) IF	(TOOLCHAIN & HITECH)
                                        (0034) ELSE
                                        (0035) export __bss_start
                                        (0036) export __data_start
                                        (0037) export __idata_start
                                        (0038) export __func_lit_start
                                        (0039) export __text_start
                                        (0040) ENDIF
                                        (0041) export  _bGetPowerSetting
                                        (0042) export   bGetPowerSetting
                                        (0043) 
                                        (0044) 
                                        (0045) ;--------------------------------------
                                        (0046) ; Optimization flags
                                        (0047) ;--------------------------------------
                                        (0048) ;
                                        (0049) ; To change the value of these flags, modify the file boot.tpl, not
                                        (0050) ; boot.asm. See the notes in the banner comment at the beginning of
                                        (0051) ; this file.
                                        (0052) 
                                        (0053) ; Optimization for Assembly language (only) projects and C-language projects
                                        (0054) ; that do not depend on the C compiler to initialize the values of RAM variables.
                                        (0055) ;   Set to 1: Support for C Run-time Environment initialization
                                        (0056) ;   Set to 0: Support for C not included. Faster start up, smaller code space.
                                        (0057) ;
                                        (0058) IF	(TOOLCHAIN & HITECH)
                                        (0059) ; The C compiler will customize the startup code - it's not required here
                                        (0060) 
                                        (0061) C_LANGUAGE_SUPPORT:              equ 0
                                        (0062) ELSE
                                        (0063) C_LANGUAGE_SUPPORT:              equ 1
                                        (0064) ENDIF
                                        (0065) 
                                        (0066) 
                                        (0067) ; For historical reasons, by default the boot code uses an lcall instruction
                                        (0068) ; to invoke the user's _main code. If _main executes a return instruction,
                                        (0069) ; boot provides an infinite loop. By changing the following equate from zero
                                        (0070) ; to 1, boot's lcall will be replaced by a ljmp instruction, saving two
                                        (0071) ; bytes on the stack which are otherwise required for the return address. If
                                        (0072) ; this option is enabled, _main must not return. (Beginning with the 4.2
                                        (0073) ; release, the C compiler automatically places an infinite loop at the end
                                        (0074) ; of main, rather than a return instruction.)
                                        (0075) ;
                                        (0076) ENABLE_LJMP_TO_MAIN:             equ 0
                                        (0077) 
                                        (0078) ; The following equate is required for proper operation. Reseting its value
                                        (0079) ; is discouraged.  WAIT_FOR_32K is effective only if the crystal oscillator is
                                        (0080) ; selected.  If the designer chooses to not wait then stabilization of the ECO
                                        (0081) ; and PLL_Lock must take place within user code. See the family data sheet for
                                        (0082) ; the requirements of starting the ECO and PLL lock mode.
                                        (0083) ;
                                        (0084) ;   Set to 1: Wait for XTAL (& PLL if selected) to stabilize before
                                        (0085) ;                invoking main
                                        (0086) ;   Set to 0: Boot code does not wait; clock may not have stabilized by
                                        (0087) ;               the time code in main starts executing.
                                        (0088) ;
                                        (0089) WAIT_FOR_32K:                    equ 1
                                        (0090) 
                                        (0091) ;-----------------------------------------------------------------------------
                                        (0092) ; Interrupt Vector Table
                                        (0093) ;-----------------------------------------------------------------------------
                                        (0094) ;
                                        (0095) ; Interrupt vector table entries are 4 bytes long.  Each one contains
                                        (0096) ; a jump instruction to an ISR (Interrupt Service Routine), although
                                        (0097) ; very short ISRs could be encoded within the table itself. Normally,
                                        (0098) ; vector jump targets are modified automatically according to the user
                                        (0099) ; modules selected. This occurs when the 'Generate Application' opera-
                                        (0100) ; tion is run causing PSoC Designer to create boot.asm and the other
                                        (0101) ; configuration files. If you need to hard code a vector, update the
                                        (0102) ; file boot.tpl, not boot.asm. See the banner comment at the beginning
                                        (0103) ; of this file.
                                        (0104) ;-----------------------------------------------------------------------------
                                        (0105) 
                                        (0106)     AREA TOP (ROM, ABS, CON)
                                        (0107) 
                                        (0108)     org   0                        ;Reset Interrupt Vector
                                        (0109) IF	(TOOLCHAIN & HITECH)
                                        (0110) ;   jmp   __Start                  ;C compiler fills in this vector
                                        (0111) ELSE
0000: 80 67    JMP   0x0068             (0112)     jmp   __Start                  ;First instruction executed following a Reset
                                        (0113) ENDIF
                                        (0114)     ;@PSoC_BOOT_ISR_UserCode_START@
                                        (0115)     ;---------------------------------------------------
                                        (0116)     ; Insert your custom code below this banner
                                        (0117)     ;---------------------------------------------------
                                        (0118) 
                                        (0119)     org   04h                      ;Low Voltage Detect (LVD) Interrupt Vector
0004: 30       HALT                     (0120)     halt                           ;Stop execution if power falls too low
                                        (0121) 
                                        (0122)     org   08h                      ;Analog Column 0 Interrupt Vector
                                        (0123)     // call	void_handler
0008: 7E       RETI                     (0124)     reti
                                        (0125) 
                                        (0126)     org   0Ch                      ;Analog Column 1 Interrupt Vector
                                        (0127)     // call	void_handler
000C: 7E       RETI                     (0128)     reti
                                        (0129) 
                                        (0130)     org   10h                      ;Analog Column 2 Interrupt Vector
                                        (0131)     // call	void_handler
0010: 7E       RETI                     (0132)     reti
                                        (0133) 
                                        (0134)     org   14h                      ;Analog Column 3 Interrupt Vector
                                        (0135)     // call	void_handler
0014: 7E       RETI                     (0136)     reti
                                        (0137)     
                                        (0138)     org   18h                      ;VC3 Interrupt Vector
                                        (0139)     // call	void_handler
0018: 7E       RETI                     (0140)     reti
                                        (0141) 
                                        (0142)     org   1Ch                      ;GPIO Interrupt Vector
                                        (0143)     // call	void_handler
001C: 7E       RETI                     (0144)     reti
                                        (0145) 
                                        (0146)     org   20h                      ;PSoC Block DBC00 Interrupt Vector
                                        (0147)     // call	void_handler
0020: 7E       RETI                     (0148)     reti
                                        (0149) 
                                        (0150)     org   24h                      ;PSoC Block DBC01 Interrupt Vector
0024: 7C 0E DA LCALL _Timer16ISR        (0151)     lcall _Timer16ISR
0027: 7E       RETI                     (0152)     reti
                                        (0153) 
                                        (0154)     org   28h                      ;PSoC Block DCC02 Interrupt Vector
0028: 7D 03 C6 LJMP  _UART_Sensor_TX_ISR(0155)     ljmp	_UART_Sensor_TX_ISR
002B: 7E       RETI                     (0156)     reti
                                        (0157) 
                                        (0158)     org   2Ch                      ;PSoC Block DCC03 Interrupt Vector
002C: 7C 10 78 LCALL _SensorUART        (0159)     lcall _SensorUART
002F: 7E       RETI                     (0160)     reti
                                        (0161)     
                                        (0162)     org   30h                      ;PSoC Block DBC10 Interrupt Vector
0030: 7D 07 7D LJMP  _PWM8_BL_ISR       (0163)     ljmp	_PWM8_BL_ISR
0033: 7E       RETI                     (0164)     reti
                                        (0165) 
                                        (0166)     org   34h                      ;PSoC Block DBC11 Interrupt Vector
                                        (0167)     // call	void_handler
0034: 7E       RETI                     (0168)     reti
                                        (0169) 
                                        (0170)     org   38h                      ;PSoC Block DCC12 Interrupt Vector
0038: 7D 05 18 LJMP  _UART_Board_TX_ISR (0171)     ljmp	_UART_Board_TX_ISR
003B: 7E       RETI                     (0172)     reti
                                        (0173) 
                                        (0174)     org   3Ch                      ;PSoC Block DCC13 Interrupt Vector
003C: 7C 07 C4 LCALL __UserModules_end|_BoardUART|__text_start|_BoardUART(0175)     lcall _BoardUART
003F: 7E       RETI                     (0176)     reti
                                        (0177) 
                                        (0178)     org   50h                      ;SARADC Interrupt Vector
0050: 7D 06 CA LJMP  _SAR10_ISR         (0179)     ljmp	_SAR10_ISR
0053: 7E       RETI                     (0180)     reti
                                        (0181) 
                                        (0182)     org   54h                      ;CSD0 Interrupt Vector
                                        (0183)     // call	void_handler
0054: 7E       RETI                     (0184)     reti
                                        (0185) 
                                        (0186)     org   58h                      ;CSD1 Interrupt Vector
                                        (0187)     // call	void_handler
0058: 7E       RETI                     (0188)     reti
                                        (0189) 
                                        (0190)     org   5Ch                      ;RTC Interrupt Vector
                                        (0191)     // call	void_handler
005C: 7E       RETI                     (0192)     reti
                                        (0193)     
                                        (0194)     org 50h                        ;SAR10 Interrupt Vector
0050: 7D 06 CA LJMP  _SAR10_ISR         (0195)     ljmp	_SAR10_ISR
0053: 7E       RETI                     (0196)     reti
                                        (0197) 
                                        (0198)     org   60h                      ;PSoC I2C Interrupt Vector
                                        (0199)     // call	void_handler
0060: 7E       RETI                     (0200)     reti
                                        (0201) 
                                        (0202)     org   64h                      ;Sleep Timer Interrupt Vector
                                        (0203)     // call	void_handler
0064: 7E       RETI                     (0204)     reti
0068: 71 10    OR    F,0x10             
                                        (0205)     ;---------------------------------------------------
                                        (0206)     ; Insert your custom code above this banner
                                        (0207)     ;---------------------------------------------------
                                        (0208)     ;@PSoC_BOOT_ISR_UserCode_END@
                                        (0209) 
                                        (0210) ;-----------------------------------------------------------------------------
                                        (0211) ;  Start of Execution.
                                        (0212) ;-----------------------------------------------------------------------------
                                        (0213) ;  The Supervisory ROM SWBootReset function has already completed the
                                        (0214) ;  calibrate1 process, loading trim values for 5 volt operation.
                                        (0215) ;
                                        (0216) 
                                        (0217) IF	(TOOLCHAIN & HITECH)
                                        (0218)  	AREA PD_startup(CODE, REL, CON)
                                        (0219) ELSE
                                        (0220)     org 68h
                                        (0221) ENDIF
                                        (0222) __Start:
                                        (0223) 
                                        (0224)     ; initialize SMP values for voltage stabilization, if required,
                                        (0225)     ; leaving power-on reset (POR) level at the default (low) level, at
                                        (0226)     ; least for now. 
                                        (0227)     ;
                                        (0228)     M8C_SetBank1
006A: 62 E3 87 MOV   REG[0xE3],0x87     (0229)     mov   reg[VLT_CR], SWITCH_MODE_PUMP_JUST | LVD_TBEN_JUST | TRIP_VOLTAGE_JUST
006D: 70 EF    AND   F,0xEF             
006F: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0230)     M8C_SetBank0
                                        (0231) 
                                        (0232) M8C_ClearWDTAndSleep			   ; Clear WDT before enabling it.
                                        (0233) IF ( WATCHDOG_ENABLE )             ; WDT selected in Global Params
                                        (0234)     M8C_EnableWatchDog
                                        (0235) ENDIF
                                        (0236) 
0072: 43 FE 04 OR    REG[0xFE],0x4      (0237)     or reg[CPU_SCR1], CPU_SCR1_ECO_ALLOWED ; Allow ECO being enabled
                                        (0238) 
                                        (0239)     ;---------------------------
                                        (0240)     ; Set up the Temporary stack
                                        (0241)     ;---------------------------
                                        (0242)     ; A temporary stack is set up for the SSC instructions.
                                        (0243)     ; The real stack start will be assigned later.
                                        (0244)     ;
                                        (0245) _stack_start:          equ 80h
0075: 50 80    MOV   A,0x80             (0246)     mov   A, _stack_start          ; Set top of stack to end of used RAM
0077: 4E       SWAP  SP,A               (0247)     swap  SP, A                    ; This is only temporary if going to LMM
0078: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0248) 
                                        (0249)     ;------------------------
                                        (0250)     ; Set Power-related Trim 
                                        (0251)     ;------------------------
                                        (0252) M8C_ClearWDTAndSleep ; Clear WDT before enabling it.
                                        (0253) IF ( POWER_SETTING & POWER_SET_5V0)            ; *** 5.0 Volt operation   ***
                                        (0254)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0255)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0256)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_5V_6MHZ, 1, SSCTBL1_TRIM_BGR_5V
                                        (0257)  ENDIF
                                        (0258) ENDIF ; 5.0 V Operation
                                        (0259) 
                                        (0260) IF ( POWER_SETTING & POWER_SET_3V3)            ; *** 3.3 Volt operation   ***
                                        (0261)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0262)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0263)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_3V_6MHZ, 1, SSCTBL1_TRIM_BGR_3V
                                        (0264)  ELSE                                          ; *** 12MHZ Main Oscillator ***
                                        (0265)     M8SSC_SetTableTrims  1, SSCTBL1_TRIM_IMO_3V_24MHZ, SSCTBL1_TRIM_BGR_3V
                                        (0266)  ENDIF
                                        (0267) ENDIF ; 3.3 Volt Operation
                                        (0268) 
                                        (0269) IF ( POWER_SETTING & POWER_SET_2V7_12MHZ)      ; *** 2.7 Volts / 12MHZ operation ***
                                        (0270)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0271)     M8SSC_SetTableTrims  2, SSCTBL2_TRIM_IMO_2V_12MHZ, SSCTBL2_TRIM_BGR_2V
                                        (0272) ENDIF ; *** 2.7 Volts / 12MHZ operation ***
                                        (0273) 
                                        (0274) IF ( POWER_SETTING & POWER_SET_2V7_6MHZ)       ; *** 2.7 Volts /  6MHZ operation ***
                                        (0275)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0276)     M8SSC_SetTableTrims  2, SSCTBL2_TRIM_IMO_2V_6MHZ,  SSCTBL2_TRIM_BGR_2V
                                        (0277) ENDIF ; *** 2.7 Volts /  6MHZ operation ***
                                        (0278) 
007B: 55 F8 00 MOV   [eepromtype+151],0x0(0279)     mov  [bSSC_KEY1],  0           ; Lock out Flash and Supervisiory operations
007E: 55 F9 00 MOV   [eepromtype+152],0x0(0280)     mov  [bSSC_KEYSP], 0
0081: 71 10    OR    F,0x10             
                                        (0281) 
                                        (0282)     ;---------------------------------------
                                        (0283)     ; Initialize Crystal Oscillator and PLL
                                        (0284)     ;---------------------------------------
                                        (0285) IF ( SELECT_32K & WAIT_FOR_32K )
                                        (0286)     ; If the user has requested the External Crystal Oscillator (ECO) then turn it
                                        (0287)     ; on and wait for it to stabilize and the system to switch over to it. The PLL
                                        (0288)     ; is left off.  The SleepTimer period is set to 1 sec to time the wait for
                                        (0289)     ; the ECO to stabilize.
                                        (0290)     ;
                                        (0291)     M8C_SetBank1
                                        (0292)     mov   reg[OSC_CR0], (SELECT_32K_JUST | OSC_CR0_SLEEP_1Hz | OSC_CR0_CPU_12MHz)
                                        (0293)     M8C_SetBank0
                                        (0294)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get a full second
                                        (0295)     or    reg[INT_MSK0], INT_MSK0_SLEEP   ; Enable latching of SleepTimer interrupt
                                        (0296)     mov   reg[INT_VC],   0                ; Clear all pending interrupts
                                        (0297) .WaitFor1s:
                                        (0298)     tst   reg[INT_CLR0], INT_MSK0_SLEEP   ; Test the SleepTimer Interrupt Status
                                        (0299)     jz   .WaitFor1s                       ; Interrupt will latch but will not dispatch
                                        (0300)                                           ;  since interrupts are not globally enabled
                                        (0301) ELSE ; !( SELECT_32K & WAIT_FOR_32K )
                                        (0302)     ; Either no ECO, or waiting for stable clock is to be done in main
                                        (0303)     M8C_SetBank1
0083: 62 E0 02 MOV   REG[0xE0],0x2      (0304)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | OSC_CR0_CPU_12MHz)
0086: 70 EF    AND   F,0xEF             
0088: 62 E3 38 MOV   REG[0xE3],0x38     
008B: 62 D1 03 MOV   REG[0xD1],0x3      
                                        (0305)     M8C_SetBank0
                                        (0306)     M8C_ClearWDTAndSleep           ; Reset the watch dog
                                        (0307) 
                                        (0308) ENDIF ;( SELECT_32K & WAIT_FOR_32K )
                                        (0309) 
                                        (0310) IF ( PLL_MODE )
                                        (0311)     ; Crystal is now fully operational (assuming WAIT_FOR_32K was enabled).
                                        (0312)     ; Now start up PLL if selected, and wait 16 msec for it to stabilize.
                                        (0313)     ;
                                        (0314)     M8C_SetBank1
                                        (0315)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_3MHz)
                                        (0316)     M8C_SetBank0
                                        (0317)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get full period
                                        (0318)     mov   reg[INT_VC], 0                  ; Clear all pending interrupts
                                        (0319) 
                                        (0320) .WaitFor16ms:
                                        (0321)     tst   reg[INT_CLR0],INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0322)     jz   .WaitFor16ms
                                        (0323)     M8C_SetBank1                          ; continue boot at CPU Speed of SYSCLK/2
                                        (0324)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_12MHz)
                                        (0325)     M8C_SetBank0
                                        (0326) 
                                        (0327) IF      ( WAIT_FOR_32K )
                                        (0328) ELSE ; !( WAIT_FOR_32K )
                                        (0329)     ; Option settings (PLL-Yes, ECO-No) are incompatible - force a syntax error
                                        (0330)     ERROR_PSoC Disabling WAIT_FOR_32K requires that the PLL_Lock must be enabled in user code.
                                        (0331) ENDIF ;(WAIT_FOR_32K)
                                        (0332) ENDIF ;(PLL_MODE)
                                        (0333) 
                                        (0334) 	;-------------------------------------------------------
                                        (0335)     ; Initialize Proper Drive Mode for External Clock Pin
                                        (0336)     ;-------------------------------------------------------
                                        (0337) 
                                        (0338)     ; Change EXTCLK pin from Hi-Z Analog (110b) drive mode to Hi-Z (010b) drive mode
                                        (0339) 
                                        (0340) IF (SYSCLK_SOURCE)
                                        (0341)     and reg[PRT1DM2],  ~0x10        ; Clear bit 4 of EXTCLK pin's DM2 register 
                                        (0342) ENDIF
                                        (0343)     ; EXTCLK pin is now in proper drive mode to input the external clock signal
                                        (0344) 
                                        (0345) IF	(TOOLCHAIN & HITECH)
                                        (0346)     ;---------------------------------------------
                                        (0347)     ; HI-TECH initialization: Enter the Large Memory Model, if applicable
                                        (0348)     ;---------------------------------------------
                                        (0349) 	global		__Lstackps
                                        (0350) 	mov     a,low __Lstackps
                                        (0351) 	swap    a,sp
                                        (0352) 
                                        (0353) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0354)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
                                        (0355)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                        (0356)     RAM_SETPAGE_CUR 0
                                        (0357)     RAM_SETPAGE_MVW 0
                                        (0358)     RAM_SETPAGE_MVR 0
                                        (0359)     IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
                                        (0360)       or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0361)     ELSE
                                        (0362)       or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0363)     ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0364) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0365) ELSE
                                        (0366)     ;---------------------------------------------
                                        (0367)     ; ImageCraft Enter the Large Memory Model, if applicable
                                        (0368)     ;---------------------------------------------
                                        (0369) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0370)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
008E: 50 00    MOV   A,0x0              (0371)     mov   A, SYSTEM_STACK_BASE_ADDR        ;   and offset, if any
0090: 4E       SWAP  SP,A               (0372)     swap  A, SP
0091: 62 D3 03 MOV   REG[0xD3],0x3      
0094: 62 D0 00 MOV   REG[0xD0],0x0      
0097: 62 D5 00 MOV   REG[0xD5],0x0      
009A: 62 D4 00 MOV   REG[0xD4],0x0      
                                        (0373)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                        (0374)     RAM_SETPAGE_CUR 0
                                        (0375)     RAM_SETPAGE_MVW 0
                                        (0376)     RAM_SETPAGE_MVR 0
                                        (0377) 
                                        (0378)   IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
009D: 71 C0    OR    F,0xC0             (0379)     or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0380)   ELSE
                                        (0381)     or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0382)   ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0383) ELSE
                                        (0384)     mov   A, __ramareas_end        ; Set top of stack to end of used RAM
                                        (0385)     swap  SP, A
                                        (0386) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0387) ENDIF ;	TOOLCHAIN
                                        (0388) 
                                        (0389)     ;@PSoC_BOOT_LOADCFG_UserCode_START@
                                        (0390)     ;---------------------------------------------------
                                        (0391)     ; Insert your custom code below this banner
                                        (0392)     ;---------------------------------------------------
                                        (0393) 
                                        (0394)     ;---------------------------------------------------
                                        (0395)     ; Insert your custom code above this banner
                                        (0396)     ;---------------------------------------------------
                                        (0397)     ;@PSoC_BOOT_LOADCFG_UserCode_END@ 
                                        (0398) 
                                        (0399)     ;-------------------------
                                        (0400)     ; Load Base Configuration
                                        (0401)     ;-------------------------
                                        (0402)     ; Load global parameter settings and load the user modules in the
                                        (0403)     ; base configuration. Exceptions: (1) Leave CPU Speed fast as possible
                                        (0404)     ; to minimize start up time; (2) We may still need to play with the
                                        (0405)     ; Sleep Timer.
                                        (0406)     ;
009F: 7C 03 64 LCALL 0x0364             (0407)     lcall LoadConfigInit
                                        (0408) 
                                        (0409)     ;-----------------------------------
                                        (0410)     ; Initialize C Run-Time Environment
                                        (0411)     ;-----------------------------------
                                        (0412) IF ( C_LANGUAGE_SUPPORT )
                                        (0413) IF ( SYSTEM_SMALL_MEMORY_MODEL )
                                        (0414)     mov  A,0                           ; clear the 'bss' segment to zero
                                        (0415)     mov  [__r0],<__bss_start
                                        (0416) BssLoop:
                                        (0417)     cmp  [__r0],<__bss_end
                                        (0418)     jz   BssDone
                                        (0419)     mvi  [__r0],A
                                        (0420)     jmp  BssLoop
                                        (0421) BssDone:
                                        (0422)     mov  A,>__idata_start              ; copy idata to data segment
                                        (0423)     mov  X,<__idata_start
                                        (0424)     mov  [__r0],<__data_start
                                        (0425) IDataLoop:
                                        (0426)     cmp  [__r0],<__data_end
                                        (0427)     jz   C_RTE_Done
                                        (0428)     push A
                                        (0429)     romx
                                        (0430)     mvi  [__r0],A
                                        (0431)     pop  A
                                        (0432)     inc  X
                                        (0433)     adc  A,0
                                        (0434)     jmp  IDataLoop
                                        (0435) 
                                        (0436) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0437) 
                                        (0438) IF ( SYSTEM_LARGE_MEMORY_MODEL )
00A2: 62 D0 00 MOV   REG[0xD0],0x0      (0439)     mov   reg[CUR_PP], >__r0           ; force direct addr mode instructions
                                        (0440)                                        ; to use the Virtual Register page.
                                        (0441) 
                                        (0442)     ; Dereference the constant (flash) pointer pXIData to access the start
                                        (0443)     ; of the extended idata area, "xidata." Xidata follows the end of the
                                        (0444)     ; text segment and may have been relocated by the Code Compressor.
                                        (0445)     ;
00A5: 50 02    MOV   A,0x2              (0446)     mov   A, >__pXIData                ; Get the address of the flash
00A7: 57 BD    MOV   X,0xBD             (0447)     mov   X, <__pXIData                ;   pointer to the xidata area.
00A9: 08       PUSH  A                  (0448)     push  A
00AA: 28       ROMX                     (0449)     romx                               ; get the MSB of xidata's address
00AB: 53 3A    MOV   [__r0],A           (0450)     mov   [__r0], A
00AD: 18       POP   A                  (0451)     pop   A
00AE: 75       INC   X                  (0452)     inc   X
00AF: 09 00    ADC   A,0x0              (0453)     adc   A, 0
00B1: 28       ROMX                     (0454)     romx                               ; get the LSB of xidata's address
00B2: 4B       SWAP  A,X                (0455)     swap  A, X
00B3: 51 3A    MOV   A,[__r0]           (0456)     mov   A, [__r0]                    ; pXIData (in [A,X]) points to the
                                        (0457)                                        ;   XIData structure list in flash
00B5: 80 04    JMP   0x00BA             (0458)     jmp   .AccessStruct
                                        (0459) 
                                        (0460)     ; Unpack one element in the xidata "structure list" that specifies the
                                        (0461)     ; values of C variables. Each structure contains 3 member elements.
                                        (0462)     ; The first is a pointer to a contiguous block of RAM to be initial-
                                        (0463)     ; ized. Blocks are always 255 bytes or less in length and never cross
                                        (0464)     ; RAM page boundaries. The list terminates when the MSB of the pointer
                                        (0465)     ; contains 0xFF. There are two formats for the struct depending on the
                                        (0466)     ; value in the second member element, an unsigned byte:
                                        (0467)     ; (1) If the value of the second element is non-zero, it represents
                                        (0468)     ; the 'size' of the block of RAM to be initialized. In this case, the
                                        (0469)     ; third member of the struct is an array of bytes of length 'size' and
                                        (0470)     ; the bytes are copied to the block of RAM.
                                        (0471)     ; (2) If the value of the second element is zero, the block of RAM is
                                        (0472)     ; to be cleared to zero. In this case, the third member of the struct
                                        (0473)     ; is an unsigned byte containing the number of bytes to clear.
                                        (0474) 
                                        (0475) .AccessNextStructLoop:
00B7: 75       INC   X                  (0476)     inc   X                            ; pXIData++
00B8: 09 00    ADC   A,0x0              (0477)     adc   A, 0
00BA: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0478) .AccessStruct:                         ; Entry point for first block
                                        (0479)     ;
                                        (0480)     ; Assert: pXIData in [A,X] points to the beginning of an XIData struct.
                                        (0481)     ;
                                        (0482)     M8C_ClearWDT                       ; Clear the watchdog for long inits
00BD: 08       PUSH  A                  (0483)     push  A
00BE: 28       ROMX                     (0484)     romx                               ; MSB of RAM addr (CPU.A <- *pXIData)
00BF: 60 D5    MOV   REG[0xD5],A        (0485)     mov   reg[MVW_PP], A               ;   for use with MVI write operations
00C1: 74       INC   A                  (0486)     inc   A                            ; End of Struct List? (MSB==0xFF?)
00C2: A0 4B    JZ    0x010E             (0487)     jz    .C_RTE_WrapUp                ;   Yes, C runtime environment complete
00C4: 18       POP   A                  (0488)     pop   A                            ; restore pXIData to [A,X]
00C5: 75       INC   X                  (0489)     inc   X                            ; pXIData++
00C6: 09 00    ADC   A,0x0              (0490)     adc   A, 0
00C8: 08       PUSH  A                  (0491)     push  A
00C9: 28       ROMX                     (0492)     romx                               ; LSB of RAM addr (CPU.A <- *pXIData)
00CA: 53 3A    MOV   [__r0],A           (0493)     mov   [__r0], A                    ; RAM Addr now in [reg[MVW_PP],[__r0]]
00CC: 18       POP   A                  (0494)     pop   A                            ; restore pXIData to [A,X]
00CD: 75       INC   X                  (0495)     inc   X                            ; pXIData++ (point to size)
00CE: 09 00    ADC   A,0x0              (0496)     adc   A, 0
00D0: 08       PUSH  A                  (0497)     push  A
00D1: 28       ROMX                     (0498)     romx                               ; Get the size (CPU.A <- *pXIData)
00D2: A0 1C    JZ    0x00EF             (0499)     jz    .ClearRAMBlockToZero         ; If Size==0, then go clear RAM
00D4: 53 39    MOV   [__r1],A           (0500)     mov   [__r1], A                    ;             else downcount in __r1
00D6: 18       POP   A                  (0501)     pop   A                            ; restore pXIData to [A,X]
                                        (0502) 
                                        (0503) .CopyNextByteLoop:
                                        (0504)     ; For each byte in the structure's array member, copy from flash to RAM.
                                        (0505)     ; Assert: pXIData in [A,X] points to previous byte of flash source;
                                        (0506)     ;         [reg[MVW_PP],[__r0]] points to next RAM destination;
                                        (0507)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0508)     ;
00D7: 75       INC   X                  (0509)     inc   X                            ; pXIData++ (point to next data byte)
00D8: 09 00    ADC   A,0x0              (0510)     adc   A, 0
00DA: 08       PUSH  A                  (0511)     push  A
00DB: 28       ROMX                     (0512)     romx                               ; Get the data value (CPU.A <- *pXIData)
00DC: 3F 3A    MVI   [__r0],A           (0513)     mvi   [__r0], A                    ; Transfer the data to RAM
00DE: 47 3A FF TST   [__r0],0xFF        (0514)     tst   [__r0], 0xff                 ; Check for page crossing
00E1: B0 06    JNZ   0x00E8             (0515)     jnz   .CopyLoopTail                ;   No crossing, keep going
00E3: 5D D5    MOV   A,REG[0xD5]        (0516)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
00E5: 74       INC   A                  (0517)     inc   A
00E6: 60 D5    MOV   REG[0xD5],A        (0518)     mov   reg[ MVW_PP], A
                                        (0519) .CopyLoopTail:
00E8: 18       POP   A                  (0520)     pop   A                            ; restore pXIData to [A,X]
00E9: 7A 39    DEC   [__r1]             (0521)     dec   [__r1]                       ; End of this array in flash?
00EB: BF EB    JNZ   0x00D7             (0522)     jnz   .CopyNextByteLoop            ;   No,  more bytes to copy
00ED: 8F C9    JMP   0x00B7             (0523)     jmp   .AccessNextStructLoop        ;   Yes, initialize another RAM block
                                        (0524) 
                                        (0525) .ClearRAMBlockToZero:
00EF: 18       POP   A                  (0526)     pop   A                            ; restore pXIData to [A,X]
00F0: 75       INC   X                  (0527)     inc   X                            ; pXIData++ (point to next data byte)
00F1: 09 00    ADC   A,0x0              (0528)     adc   A, 0
00F3: 08       PUSH  A                  (0529)     push  A
00F4: 28       ROMX                     (0530)     romx                               ; Get the run length (CPU.A <- *pXIData)
00F5: 53 39    MOV   [__r1],A           (0531)     mov   [__r1], A                    ; Initialize downcounter
00F7: 50 00    MOV   A,0x0              (0532)     mov   A, 0                         ; Initialize source data
                                        (0533) 
                                        (0534) .ClearRAMBlockLoop:
                                        (0535)     ; Assert: [reg[MVW_PP],[__r0]] points to next RAM destination and
                                        (0536)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0537)     ;
00F9: 3F 3A    MVI   [__r0],A           (0538)     mvi   [__r0], A                    ; Clear a byte
00FB: 47 3A FF TST   [__r0],0xFF        (0539)     tst   [__r0], 0xff                 ; Check for page crossing
00FE: B0 08    JNZ   0x0107             (0540)     jnz   .ClearLoopTail               ;   No crossing, keep going
0100: 5D D5    MOV   A,REG[0xD5]        (0541)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
0102: 74       INC   A                  (0542)     inc   A
0103: 60 D5    MOV   REG[0xD5],A        (0543)     mov   reg[ MVW_PP], A
0105: 50 00    MOV   A,0x0              (0544)     mov   A, 0                         ; Restore the zero used for clearing
                                        (0545) .ClearLoopTail:
0107: 7A 39    DEC   [__r1]             (0546)     dec   [__r1]                       ; Was this the last byte?
0109: BF EF    JNZ   0x00F9             (0547)     jnz   .ClearRAMBlockLoop           ;   No,  continue
010B: 18       POP   A                  (0548)     pop   A                            ;   Yes, restore pXIData to [A,X] and
010C: 8F AA    JMP   0x00B7             (0549)     jmp   .AccessNextStructLoop        ;        initialize another RAM block
                                        (0550) 
                                        (0551) .C_RTE_WrapUp:
010E: 18       POP   A                  (0552)     pop   A                            ; balance stack
010F: 71 10    OR    F,0x10             
                                        (0553) 
                                        (0554) ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                                        (0555) 
                                        (0556) C_RTE_Done:
                                        (0557) 
                                        (0558) ENDIF ; C_LANGUAGE_SUPPORT
                                        (0559) 
                                        (0560)     ;-------------------------------
                                        (0561)     ; Voltage Stabilization for SMP
                                        (0562)     ;-------------------------------
                                        (0563) 
                                        (0564) IF ( POWER_SETTING & POWER_SET_5V0)    ; 5.0V Operation
                                        (0565) IF ( SWITCH_MODE_PUMP ^ 1 )            ; SMP is operational
                                        (0566)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0567)     ; When using the SMP at 5V, we must wait for Vdd to slew from 3.1V to
                                        (0568)     ; 5V before enabling the Precision Power-On Reset (PPOR).
                                        (0569)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0570)     or   reg[INT_MSK0],INT_MSK0_SLEEP
                                        (0571)     M8C_SetBank1
                                        (0572)     and   reg[OSC_CR0], ~OSC_CR0_SLEEP
                                        (0573)     or    reg[OSC_CR0],  OSC_CR0_SLEEP_512Hz
                                        (0574)     M8C_SetBank0
                                        (0575)     M8C_ClearWDTAndSleep                   ; Restart the sleep timer
                                        (0576)     mov   reg[INT_VC], 0                   ; Clear all pending interrupts
                                        (0577) .WaitFor2ms:
                                        (0578)     tst   reg[INT_CLR0], INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0579)     jz   .WaitFor2ms                       ; Branch fails when 2 msec has passed
                                        (0580) ENDIF ; SMP is operational
                                        (0581) ENDIF ; 5.0V Operation
                                        (0582) 
                                        (0583)     ;-------------------------------
                                        (0584)     ; Set Power-On Reset (POR) Level
                                        (0585)     ;-------------------------------
                                        (0586) 
                                        (0587)     ; This checks for improper selection of CPU voltage and processer speed ratings. If an improper selection 
                                        (0588)     ; is made (in the global resources section of the device editor), a compilation error is created, disallowing
                                        (0589)     ; this selection. If the selection is valid, the POR level is then set.
                                        (0590)     ; Invalid cases checked: 
                                        (0591)     ;   -At 3.3 volt operation, the cpu rate must be at or below 12 MHz
                                        (0592)     ;   -At 2.7 volt operation, the cpu rate must be at or below 3 MHz
                                        (0593) 
                                        (0594) 
                                        (0595) IF (POWER_SETTING & POWER_SET_3V3)		; 3.3V Operation?
                                        (0596)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** SLIMO = 6MHZ, Do Nothing ***
                                        (0597)  ELSE
                                        (0598)    IF (CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz)	; Not 24 MHz, Do Nothing...
                                        (0599)    ELSE						; Otherwise, 24 MHz is selected... raise error
                                        (0600) 	ERROR_PSoC SEE COMMENTS			; Error - cannot use 24 MHz w/ 3.3V operation (Clock <= 12 MHz)
                                        (0601)    ENDIF
                                        (0602)  ENDIF
                                        (0603) ELSE
                                        (0604) IF (POWER_SETTING & POWER_SET_2V7_12MHZ)	; 2.7V Operation with 12 MHz SLIMO?
                                        (0605)    IF(CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz)	; Not 12 MHz, do nothing. ("OSC_CR0_CPU_24MHz" setting is actually IMO/1)
                                        (0606)    ELSE						; Otherwise, 12 MHz is selected... raise error
                                        (0607)       ERROR_PSoC SEE COMMENTS			; Error - cannot use 12 MHz w/ 2.7V operation (Clock <= 3 MHz)
                                        (0608)    ENDIF;
                                        (0609)    IF(CPU_CLOCK_JUST ^ OSC_CR0_CPU_12MHz)	; Not 6 MHz, do nothing. ("OSC_CR0_CPU_12MHz" setting is actually IMO/2)
                                        (0610)    ELSE						; Otherwise, 6 MHz is selected... raise error
                                        (0611)       ERROR_PSoC SEE COMMENTS			; Error - Cannot use 6 MHz w/ 2.7V operation (Clock <= 3 MHz)
                                        (0612)    ENDIF;CPU_12MHz
                                        (0613) ELSE
                                        (0614) IF (POWER_SETTING & POWER_SET_2V7_6MHZ)		; 2.7V Operation with 6 MHz SLIMO?
                                        (0615)    IF(CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz)	; Not 6 MHz, do nothing. ("OSC_CR0_CPU_24MHz" setting is actually IMO/1)
                                        (0616)    ELSE						; Otherwise, 6 MHz is selected... raise error
                                        (0617) 	ERROR_PSoC SEE COMMENTS			; Error - cannot use 6 MHz w/ 2.7V operation (Clock <= 3 MHz)
                                        (0618)    ENDIF
                                        (0619) ENDIF ; 2.7v w/ 6 MHz
                                        (0620) ENDIF ; 2.7v w/ 12 MHz
                                        (0621) ENDIF ; 3.3V w/ 24 MHz
                                        (0622)     ;  The writes to the VLT_CR register below include setting the POR to VLT_CR_POR_HIGH, 
                                        (0623)     ;  VLT_CR_POR_MID or VLT_CR_POR_LOW. Correctly setting this value is critical to the proper 
                                        (0624)     ;  operation of the PSoC. The POR protects the M8C from mis-executing when Vdd falls low. 
                                        (0625)     ;  These values should not be changed from the settings here. See Section "POR and LVD" of 
                                        (0626)     ;  Technical Reference Manual #001-48461 for more information.
                                        (0627) 
                                        (0628)     M8C_SetBank1
                                        (0629) 
                                        (0630) IF (POWER_SETTING & POWER_SET_2V7)             ; 2.7V Operation?
                                        (0631)                                                ;  Yes, lowest trip already set
                                        (0632) ELSE                                           ;   No, must adjust POR...
                                        (0633) IF (POWER_SETTING & POWER_SET_3V3)             ; 3.3V Operation?
                                        (0634)     or   reg[VLT_CR], VLT_CR_POR_MID           ;   Yes, change to midpoint trip
                                        (0635) ELSE
                                        (0636) IF (POWER_SETTING & POWER_SET_5V0)             ; 5.0V Operation?
                                        (0637)  IF (POWER_SETTING & POWER_SET_SLOW_IMO)       ; and Slow Mode?
                                        (0638)     or   reg[VLT_CR], VLT_CR_POR_MID           ;   Yes, set to midpoint trip
                                        (0639)  ELSE                                          ;    No, fast mode
                                        (0640)   IF ( CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz )    ;      As fast as 24MHz?
                                        (0641)     or   reg[VLT_CR], VLT_CR_POR_MID           ;         No, change to midpoint trip
                                        (0642)   ELSE ; 24HMz                                 ;
0111: 43 E3 20 OR    REG[0xE3],0x20     (0643)     or    reg[VLT_CR], VLT_CR_POR_HIGH         ;        Yes, switch to	highest setting
0114: 70 EF    AND   F,0xEF             
                                        (0644)   ENDIF ; 24MHz
                                        (0645)  ENDIF ; Slow Mode
                                        (0646) ENDIF ; 5.0V Operation
                                        (0647) ENDIF ; 3.3V Operation
                                        (0648) ENDIF ; 2.7V Operation
                                        (0649) 
                                        (0650)     M8C_SetBank0
                                        (0651) 
                                        (0652)     ;----------------------------
                                        (0653)     ; Wrap up and invoke "main"
                                        (0654)     ;----------------------------
                                        (0655) 
                                        (0656)     ; Disable the Sleep interrupt that was used for timing above.  In fact,
                                        (0657)     ; no interrupts should be enabled now, so may as well clear the register.
                                        (0658)     ;
0116: 62 E0 00 MOV   REG[0xE0],0x0      (0659)     mov  reg[INT_MSK0],0
0119: 71 10    OR    F,0x10             
                                        (0660) 
                                        (0661)     ; Everything has started OK. Now select requested CPU & sleep frequency.
                                        (0662)     ;
                                        (0663)     M8C_SetBank1
011B: 62 E0 03 MOV   REG[0xE0],0x3      (0664)     mov reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | CPU_CLOCK_JUST)
011E: 43 E2 00 OR    REG[0xE2],0x0      (0665)     or  reg[OSC_CR2], (SLEEP_TIMER_JUST2)
0121: 70 EF    AND   F,0xEF             
                                        (0666)     M8C_SetBank0
                                        (0667) 
                                        (0668)     ; Global Interrupt are NOT enabled, this should be done in main().
                                        (0669)     ; LVD is set but will not occur unless Global Interrupts are enabled.
                                        (0670)     ; Global Interrupts should be enabled as soon as possible in main().
                                        (0671)     ;
0123: 62 E2 00 MOV   REG[0xE2],0x0      (0672)     mov  reg[INT_VC],0             ; Clear any pending interrupts which may
                                        (0673)                                    ; have been set during the boot process.
                                        (0674) IF	(TOOLCHAIN & HITECH)
                                        (0675) 	ljmp  startup                  ; Jump to C compiler startup code
                                        (0676) ELSE
                                        (0677) IF ENABLE_LJMP_TO_MAIN
                                        (0678)     ljmp  _main                    ; goto main (no return)
                                        (0679) ELSE
0126: 7C 0F 17 LCALL _main              (0680)     lcall _main                    ; call main
                                        (0681) .Exit:
0129: 8F FF    JMP   0x0129             (0682)     jmp  .Exit                     ; Wait here after return till power-off or reset
                                        (0683) ENDIF
                                        (0684) ENDIF ; TOOLCHAIN
                                        (0685) 
                                        (0686)     ;---------------------------------
                                        (0687)     ; Library Access to Global Parms
                                        (0688)     ;---------------------------------
                                        (0689)     ;
                                        (0690)  bGetPowerSetting:
                                        (0691) _bGetPowerSetting:
                                        (0692)     ; Returns value of POWER_SETTING in the A register.
                                        (0693)     ; No inputs. No Side Effects.
                                        (0694)     ;
                                        (0695) IF (POWER_SETTING & POWER_SET_2V7)
                                        (0696)     mov   A, POWER_SETTING | POWER_SET_SLOW_IMO
                                        (0697) ELSE
012B: 50 10    MOV   A,0x10             (0698)     mov   A, POWER_SETTING          ; Supply voltage and internal main osc
                                        (0699) ENDIF
012D: 7F       RET                      (0700)     ret
                                        (0701) 
                                        (0702) IF	(TOOLCHAIN & HITECH)
                                        (0703) ELSE
                                        (0704)     ;---------------------------------
                                        (0705)     ; Order Critical RAM & ROM AREAs
                                        (0706)     ;---------------------------------
                                        (0707)     ;  'TOP' is all that has been defined so far...
                                        (0708) 
                                        (0709)     ;  ROM AREAs for C CONST, static & global items
                                        (0710)     ;
                                        (0711)     AREA lit               (ROM, REL, CON, LIT)   ; 'const' definitions
                                        (0712)     AREA idata             (ROM, REL, CON, LIT)   ; Constants for initializing RAM
                                        (0713) __idata_start:
                                        (0714) 
                                        (0715)     AREA func_lit          (ROM, REL, CON, proclab)   ; Function Pointers
                                        (0716) __func_lit_start:
                                        (0717) 
                                        (0718) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0719)     ; We use the func_lit area to store a pointer to extended initialized
                                        (0720)     ; data (xidata) area that follows the text area. Func_lit isn't
                                        (0721)     ; relocated by the code compressor, but the text area may shrink and
                                        (0722)     ; that moves xidata around.
                                        (0723)     ;
                                        (0724) __pXIData:         word __text_end           ; ptr to extended idata
                                        (0725) ENDIF
                                        (0726) 
                                        (0727)     AREA psoc_config       (ROM, REL, CON)   ; Configuration Load & Unload
                                        (0728)     AREA UserModules       (ROM, REL, CON)   ; User Module APIs
                                        (0729) 
                                        (0730)     ; CODE segment for general use
                                        (0731)     ;
                                        (0732)     AREA text (ROM, REL, CON)
                                        (0733) __text_start:
                                        (0734) 
                                        (0735)     ; RAM area usage
                                        (0736)     ;
                                        (0737)     AREA data              (RAM, REL, CON)   ; initialized RAM
                                        (0738) __data_start:
                                        (0739) 
                                        (0740)     AREA virtual_registers (RAM, REL, CON)   ; Temp vars of C compiler
                                        (0741)     AREA InterruptRAM      (RAM, REL, CON)   ; Interrupts, on Page 0
                                        (0742)     AREA bss               (RAM, REL, CON)   ; general use
                                        (0743) __bss_start:
                                        (0744) ENDIF ; TOOLCHAIN
                                        (0745) ; end of file boot.asm
FILE: lib\psocconfigtbl.asm             (0001) ;  Generated by PSoC Designer 5.4.2946
02BF: 70 EF    AND   F,0xEF             (0002) ;
                                        (0003) ; =============================================================================
                                        (0004) ; FILENAME: PSoCConfigTBL.asm
                                        (0005) ;  
                                        (0006) ; Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0007) ;  
                                        (0008) ; NOTES:
                                        (0009) ; Do not modify this file. It is generated by PSoC Designer each time the
                                        (0010) ; generate application function is run. The values of the parameters in this
                                        (0011) ; file can be modified by changing the values of the global parameters in the
                                        (0012) ; device editor.
                                        (0013) ;  
                                        (0014) ; =============================================================================
                                        (0015)  
                                        (0016) include "m8c.inc"
                                        (0017) ;  Personalization tables 
                                        (0018) export LoadConfigTBL_led_display_Bank1
                                        (0019) export LoadConfigTBL_led_display_Bank0
                                        (0020) export LoadConfigTBL_led_display_Ordered
                                        (0021) AREA lit(rom, rel)
                                        (0022) LoadConfigTBL_led_display_Bank0:
                                        (0023) ;  Instance name PWM8_BL, User Module PWM8
                                        (0024) ;       Instance name PWM8_BL, Block Name PWM8(DBC10)
                                        (0025) 	db		33h, 00h		;PWM8_BL_CONTROL_REG(DBC10CR0)
                                        (0026) 	db		31h, 00h		;PWM8_BL_PERIOD_REG(DBC10DR1)
                                        (0027) 	db		32h, 00h		;PWM8_BL_COMPARE_REG(DBC10DR2)
                                        (0028) ;  Instance name SAR10, User Module SAR10
                                        (0029) ;  Instance name Timer16, User Module Timer16
                                        (0030) ;       Instance name Timer16, Block Name TIMER16_LSB(DBC00)
                                        (0031) 	db		23h, 00h		;Timer16_CONTROL_LSB_REG(DBC00CR0)
                                        (0032) 	db		21h, 80h		;Timer16_PERIOD_LSB_REG(DBC00DR1)
                                        (0033) 	db		22h, 28h		;Timer16_COMPARE_LSB_REG(DBC00DR2)
                                        (0034) ;       Instance name Timer16, Block Name TIMER16_MSB(DBC01)
                                        (0035) 	db		27h, 04h		;Timer16_CONTROL_MSB_REG(DBC01CR0)
                                        (0036) 	db		25h, 25h		;Timer16_PERIOD_MSB_REG(DBC01DR1)
                                        (0037) 	db		26h, 23h		;Timer16_COMPARE_MSB_REG(DBC01DR2)
                                        (0038) ;  Instance name UART_Board, User Module UART
                                        (0039) ;       Instance name UART_Board, Block Name RX(DCC13)
                                        (0040) 	db		3fh, 00h		;UART_Board_RX_CONTROL_REG(DCC13CR0)
                                        (0041) 	db		3dh, 00h		;UART_Board_(DCC13DR1)
                                        (0042) 	db		3eh, 00h		;UART_Board_RX_BUFFER_REG (DCC13DR2)
                                        (0043) ;       Instance name UART_Board, Block Name TX(DCC12)
                                        (0044) 	db		3bh, 00h		;UART_Board_TX_CONTROL_REG(DCC12CR0)
                                        (0045) 	db		39h, 00h		;UART_Board_TX_BUFFER_REG (DCC12DR1)
                                        (0046) 	db		3ah, 00h		;UART_Board_(DCC12DR2)
                                        (0047) ;  Instance name UART_Sensor, User Module UART
                                        (0048) ;       Instance name UART_Sensor, Block Name RX(DCC03)
                                        (0049) 	db		2fh, 00h		;UART_Sensor_RX_CONTROL_REG(DCC03CR0)
                                        (0050) 	db		2dh, 00h		;UART_Sensor_(DCC03DR1)
                                        (0051) 	db		2eh, 00h		;UART_Sensor_RX_BUFFER_REG (DCC03DR2)
                                        (0052) ;       Instance name UART_Sensor, Block Name TX(DCC02)
                                        (0053) 	db		2bh, 00h		;UART_Sensor_TX_CONTROL_REG(DCC02CR0)
                                        (0054) 	db		29h, 00h		;UART_Sensor_TX_BUFFER_REG (DCC02DR1)
                                        (0055) 	db		2ah, 00h		;UART_Sensor_(DCC02DR2)
                                        (0056) ;  Global Register values Bank 0
                                        (0057) 	db		6ah, 00h		; ADCDataHigh register (ADC_DH)
                                        (0058) 	db		6bh, 00h		; ADCDataLow register (ADC_DL)
                                        (0059) 	db		60h, 09h		; AnalogColumnInputSelect register (AMX_IN)
                                        (0060) 	db		66h, 00h		; AnalogComparatorControl1 register (CMP_CR1)
                                        (0061) 	db		61h, 00h		; AnalogMuxBusConfig register (AMUX_CFG)
                                        (0062) 	db		fch, 00h		; AnalogMuxDACData:0 register (IDACR_D)
                                        (0063) 	db		fdh, 00h		; AnalogMuxDACData:1 register (IDACL_D)
                                        (0064) 	db		65h, 00h		; AnalogSynchronizationControl register (ASY_CR)
                                        (0065) 	db		53h, 00h		; CSD0Control0 register (CSD0_CR0)
                                        (0066) 	db		57h, 00h		; CSD0Control1 register (CSD0_CR1)
                                        (0067) 	db		56h, 00h		; CSD0CounterHigh register (CSD0_CNT_H)
                                        (0068) 	db		52h, 00h		; CSD0CounterLow register (CSD0_CNT_L)
                                        (0069) 	db		54h, 00h		; CSD0Data0High register (CSD0_DR0_H)
                                        (0070) 	db		50h, 00h		; CSD0Data0Low register (CSD0_DR0_L)
                                        (0071) 	db		55h, 00h		; CSD0Data1High register (CSD0_DR1_H)
                                        (0072) 	db		51h, 00h		; CSD0Data1Low register (CSD0_DR1_L)
                                        (0073) 	db		5bh, 00h		; CSD1Control0 register (CSD1_CR0)
                                        (0074) 	db		5fh, 00h		; CSD1Control1 register (CSD1_CR1)
                                        (0075) 	db		5eh, 00h		; CSD1CounterHigh register (CSD1_CNT_H)
                                        (0076) 	db		5ah, 00h		; CSD1CounterLow register (CSD1_CNT_L)
                                        (0077) 	db		5ch, 00h		; CSD1Data0High register (CSD1_DR0_H)
                                        (0078) 	db		58h, 00h		; CSD1Data0Low register (CSD1_DR0_L)
                                        (0079) 	db		5dh, 00h		; CSD1Data1High register (CSD1_DR1_H)
                                        (0080) 	db		59h, 00h		; CSD1Data1Low register (CSD1_DR1_L)
                                        (0081) 	db		e6h, 00h		; DecimatorControl_0 register (DEC_CR0)
                                        (0082) 	db		e7h, 00h		; DecimatorControl_1 register (DEC_CR1)
                                        (0083) 	db		e4h, 00h		; DecimatorDataHigh register (DEC_DH)
                                        (0084) 	db		e5h, 00h		; DecimatorDataLow register (DEC_DL)
                                        (0085) 	db		d6h, 00h		; I2CConfig register (I2CCFG)
                                        (0086) 	db		cah, 00h		; IDACMode register (IDACMODE)
                                        (0087) 	db		cbh, 00h		; PWMSource register (PWMSRC)
                                        (0088) 	db		c8h, 00h		; PWMVoltageReference_0 register (PWMVREF0)
                                        (0089) 	db		c9h, 00h		; PWMVoltageReference_1 register (PWMVREF1)
                                        (0090) 	db		62h, 00h		; PWM_Control register (PWM_CR)
                                        (0091) 	db		b7h, 00h		; RowDigitalInterconnectInputSelect:0 register (RDI0DSM)
                                        (0092) 	db		bfh, 00h		; RowDigitalInterconnectInputSelect:1 register (RDI1DSM)
                                        (0093) 	db		b0h, 00h		; Row_0_InputMux register (RDI0RI)
                                        (0094) 	db		b1h, 00h		; Row_0_InputSync register (RDI0SYN)
                                        (0095) 	db		b2h, 00h		; Row_0_LogicInputAMux register (RDI0IS)
                                        (0096) 	db		b3h, 33h		; Row_0_LogicSelect_0 register (RDI0LT0)
                                        (0097) 	db		b4h, 33h		; Row_0_LogicSelect_1 register (RDI0LT1)
                                        (0098) 	db		b5h, 01h		; Row_0_OutputDrive_0 register (RDI0SRO0)
                                        (0099) 	db		b6h, 00h		; Row_0_OutputDrive_1 register (RDI0SRO1)
                                        (0100) 	db		b8h, 55h		; Row_1_InputMux register (RDI1RI)
                                        (0101) 	db		b9h, 00h		; Row_1_InputSync register (RDI1SYN)
                                        (0102) 	db		bah, 10h		; Row_1_LogicInputAMux register (RDI1IS)
                                        (0103) 	db		bbh, 33h		; Row_1_LogicSelect_0 register (RDI1LT0)
                                        (0104) 	db		bch, 33h		; Row_1_LogicSelect_1 register (RDI1LT1)
                                        (0105) 	db		bdh, 02h		; Row_1_OutputDrive_0 register (RDI1SRO0)
                                        (0106) 	db		beh, 10h		; Row_1_OutputDrive_1 register (RDI1SRO1)
                                        (0107) 	db		cdh, 00h		; TSCMPHigh register (TSCMPH)
                                        (0108) 	db		ceh, 00h		; TSCMPLow register (TSCMPL)
                                        (0109) 	db		cch, 00h		; TSource:0 register (TSCR0)
                                        (0110) 	db		cfh, 00h		; TSource:1 register (TSCR1)
                                        (0111) 	db		ffh
                                        (0112) LoadConfigTBL_led_display_Bank1:
                                        (0113) ;  Instance name PWM8_BL, User Module PWM8
                                        (0114) ;       Instance name PWM8_BL, Block Name PWM8(DBC10)
                                        (0115) 	db		33h, 00h		;PWM8_BL_(DBC10CR1)
                                        (0116) 	db		30h, 21h		;PWM8_BL_FUNC_REG(DBC10FN)
                                        (0117) 	db		31h, 11h		;PWM8_BL_INPUT_REG(DBC10IN)
                                        (0118) 	db		32h, 07h		;PWM8_BL_OUTPUT_REG(DBC10OU)
                                        (0119) ;  Instance name SAR10, User Module SAR10
                                        (0120) ;  Instance name Timer16, User Module Timer16
                                        (0121) ;       Instance name Timer16, Block Name TIMER16_LSB(DBC00)
                                        (0122) 	db		23h, 00h		;Timer16_(DBC00CR1)
                                        (0123) 	db		20h, 00h		;Timer16_FUNC_LSB_REG(DBC00FN)
                                        (0124) 	db		21h, 01h		;Timer16_INPUT_LSB_REG(DBC00IN)
                                        (0125) 	db		22h, 40h		;Timer16_OUTPUT_LSB_REG(DBC00OU)
                                        (0126) ;       Instance name Timer16, Block Name TIMER16_MSB(DBC01)
                                        (0127) 	db		27h, 00h		;Timer16_(DBC01CR1)
                                        (0128) 	db		24h, 20h		;Timer16_FUNC_MSB_REG(DBC01FN)
                                        (0129) 	db		25h, 31h		;Timer16_INPUT_MSB_REG(DBC01IN)
                                        (0130) 	db		26h, 40h		;Timer16_OUTPUT_MSB_REG(DBC01OU)
                                        (0131) ;  Instance name UART_Board, User Module UART
                                        (0132) ;       Instance name UART_Board, Block Name RX(DCC13)
                                        (0133) 	db		3fh, 00h		;UART_Board_(DCC13CR1)
                                        (0134) 	db		3ch, 05h		;UART_Board_RX_FUNC_REG   (DCC13FN)
                                        (0135) 	db		3dh, c1h		;UART_Board_RX_INPUT_REG  (DCC13IN)
                                        (0136) 	db		3eh, 40h		;UART_Board_RX_OUTPUT_REG (DCC13OU)
                                        (0137) ;       Instance name UART_Board, Block Name TX(DCC12)
                                        (0138) 	db		3bh, 00h		;UART_Board_(DCC12CR1)
                                        (0139) 	db		38h, 1dh		;UART_Board_TX_FUNC_REG   (DCC12FN)
                                        (0140) 	db		39h, 01h		;UART_Board_TX_INPUT_REG  (DCC12IN)
                                        (0141) 	db		3ah, 44h		;UART_Board_TX_OUTPUT_REG (DCC12OU)
                                        (0142) ;  Instance name UART_Sensor, User Module UART
                                        (0143) ;       Instance name UART_Sensor, Block Name RX(DCC03)
                                        (0144) 	db		2fh, 00h		;UART_Sensor_(DCC03CR1)
                                        (0145) 	db		2ch, 05h		;UART_Sensor_RX_FUNC_REG   (DCC03FN)
                                        (0146) 	db		2dh, c1h		;UART_Sensor_RX_INPUT_REG  (DCC03IN)
                                        (0147) 	db		2eh, 40h		;UART_Sensor_RX_OUTPUT_REG (DCC03OU)
                                        (0148) ;       Instance name UART_Sensor, Block Name TX(DCC02)
                                        (0149) 	db		2bh, 00h		;UART_Sensor_(DCC02CR1)
                                        (0150) 	db		28h, 1dh		;UART_Sensor_TX_FUNC_REG   (DCC02FN)
                                        (0151) 	db		29h, 01h		;UART_Sensor_TX_INPUT_REG  (DCC02IN)
                                        (0152) 	db		2ah, 44h		;UART_Sensor_TX_OUTPUT_REG (DCC02OU)
                                        (0153) ;  Global Register values Bank 1
                                        (0154) 	db		a8h, 60h		; ADCControl0 register (ADC_CR0)
                                        (0155) 	db		a9h, 0ah		; ADCControl1 register (ADC_CR1)
                                        (0156) 	db		aah, 00h		; ADCControl2 register (ADC_CR2)
                                        (0157) 	db		abh, 00h		; ADCControl3 register (ADC_CR3TRIM)
                                        (0158) 	db		ach, 00h		; ADCControl4 register (ADC_CR4)
                                        (0159) 	db		61h, 00h		; AnalogClockSelect1 register (CLK_CR1)
                                        (0160) 	db		69h, 00h		; AnalogClockSelect2 register (CLK_CR2)
                                        (0161) 	db		60h, 00h		; AnalogColumnClockSelect register (CLK_CR0)
                                        (0162) 	db		62h, 00h		; AnalogIOControl_0 register (ABF_CR0)
                                        (0163) 	db		67h, 33h		; AnalogLUTControl0 register (ALT_CR0)
                                        (0164) 	db		68h, 00h		; AnalogLUTControl1 register (ALT_CR1)
                                        (0165) 	db		5fh, 00h		; CMPClock:0 register (CMPCLK0)
                                        (0166) 	db		5eh, 00h		; CMPClock:1 register (CMPCLK1)
                                        (0167) 	db		5bh, 02h		; CMPColumnMux register (CMPCOLMUX)
                                        (0168) 	db		5dh, 00h		; CMPFilterControl register (CMPFLTCR)
                                        (0169) 	db		5ch, 00h		; CMPPWMControl register (CMPPWMCR)
                                        (0170) 	db		59h, 00h		; CSCMOGlobalOutEnable register (CSCMPGOEN)
                                        (0171) 	db		58h, 00h		; CSCMPControl:0 register (CSCMPCR0)
                                        (0172) 	db		5ah, 33h		; CSLUTControl register (CSLUTCR0)
                                        (0173) 	db		64h, 00h		; ComparatorGlobalOutEn register (CMP_GO_EN)
                                        (0174) 	db		65h, 00h		; ComparatorGlobalOutEn1 register (CMP_GO_EN1)
                                        (0175) 	db		fdh, 00h		; DAC_Control register (DAC_CR0)
                                        (0176) 	db		dch, 00h		; DAC_Control_1 register (DAC_CR1)
                                        (0177) 	db		d1h, 00h		; GlobalDigitalInterconnect_Drive_Even_Input register (GDI_E_IN)
                                        (0178) 	db		a1h, 00h		; GlobalDigitalInterconnect_Drive_Even_Input_Control register (GDI_E_IN_CR)
                                        (0179) 	db		d3h, 00h		; GlobalDigitalInterconnect_Drive_Even_Output register (GDI_E_OU)
                                        (0180) 	db		a3h, 00h		; GlobalDigitalInterconnect_Drive_Even_Output_Control register (GDI_E_OU_CR)
                                        (0181) 	db		d0h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Input register (GDI_O_IN)
                                        (0182) 	db		a0h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Input_Control register (GDI_O_IN_CR)
                                        (0183) 	db		d2h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Output register (GDI_O_OU)
                                        (0184) 	db		a2h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Output_Control register (GDI_O_OU_CR)
                                        (0185) 	db		adh, 00h		; I2CAddress register (I2C_ADDR)
                                        (0186) 	db		e1h, 7fh		; OscillatorControl_1 register (OSC_CR1)
                                        (0187) 	db		e2h, 00h		; OscillatorControl_2 register (OSC_CR2)
                                        (0188) 	db		dfh, 26h		; OscillatorControl_3 register (OSC_CR3)
                                        (0189) 	db		deh, 01h		; OscillatorControl_4 register (OSC_CR4)
                                        (0190) 	db		ddh, 00h		; OscillatorGlobalBusEnableControl register (OSC_GO_EN)
                                        (0191) 	db		d8h, 00h		; Port_0_MUXBusCtrl register (MUX_CR0)
                                        (0192) 	db		d9h, 00h		; Port_1_MUXBusCtrl register (MUX_CR1)
                                        (0193) 	db		dah, 00h		; Port_2_MUXBusCtrl register (MUX_CR2)
                                        (0194) 	db		dbh, 00h		; Port_3_MUXBusCtrl register (MUX_CR3)
                                        (0195) 	db		ech, 00h		; Port_4_MUXBusCtrl register (MUX_CR4)
                                        (0196) 	db		a7h, 00h		; RTClockControl register (RTCCR)
                                        (0197) 	db		a4h, 00h		; RTCurrentHour register (RTCH)
                                        (0198) 	db		a5h, 00h		; RTCurrentMinute register (RTCM)
                                        (0199) 	db		a6h, 00h		; RTCurrentSecond register (RTCS)
                                        (0200) 	db		53h, 00h		; VDAC5Control0:0 register (VDAC50CR0)
                                        (0201) 	db		57h, 00h		; VDAC5Control0:1 register (VDAC51CR0)
                                        (0202) 	db		e7h, 00h		; VDACTrim register (VDAC_TRIM)
                                        (0203) 	db		ffh
                                        (0204) AREA psoc_config(rom, rel)
                                        (0205) LoadConfigTBL_led_display_Ordered:
                                        (0206) ;  Ordered Global Register values
                                        (0207) 	M8C_SetBank0
02C1: 62 00 EE MOV   REG[0x0],0xEE      (0208) 	mov	reg[00h], eeh		; Port_0_Data register (PRT0DR)
02C4: 71 10    OR    F,0x10             
                                        (0209) 	M8C_SetBank1
02C6: 62 00 FE MOV   REG[0x0],0xFE      (0210) 	mov	reg[00h], feh		; Port_0_DriveMode_0 register (PRT0DM0)
02C9: 62 01 01 MOV   REG[0x1],0x1       (0211) 	mov	reg[01h], 01h		; Port_0_DriveMode_1 register (PRT0DM1)
02CC: 70 EF    AND   F,0xEF             
                                        (0212) 	M8C_SetBank0
02CE: 62 03 00 MOV   REG[0x3],0x0       (0213) 	mov	reg[03h], 00h		; Port_0_DriveMode_2 register (PRT0DM2)
02D1: 62 02 11 MOV   REG[0x2],0x11      (0214) 	mov	reg[02h], 11h		; Port_0_GlobalSelect register (PRT0GS)
02D4: 71 10    OR    F,0x10             
                                        (0215) 	M8C_SetBank1
02D6: 62 02 00 MOV   REG[0x2],0x0       (0216) 	mov	reg[02h], 00h		; Port_0_IntCtrl_0 register (PRT0IC0)
02D9: 62 03 00 MOV   REG[0x3],0x0       (0217) 	mov	reg[03h], 00h		; Port_0_IntCtrl_1 register (PRT0IC1)
02DC: 70 EF    AND   F,0xEF             
                                        (0218) 	M8C_SetBank0
02DE: 62 01 00 MOV   REG[0x1],0x0       (0219) 	mov	reg[01h], 00h		; Port_0_IntEn register (PRT0IE)
02E1: 62 04 A0 MOV   REG[0x4],0xA0      (0220) 	mov	reg[04h], a0h		; Port_1_Data register (PRT1DR)
02E4: 71 10    OR    F,0x10             
                                        (0221) 	M8C_SetBank1
02E6: 62 04 A0 MOV   REG[0x4],0xA0      (0222) 	mov	reg[04h], a0h		; Port_1_DriveMode_0 register (PRT1DM0)
02E9: 62 05 FF MOV   REG[0x5],0xFF      (0223) 	mov	reg[05h], ffh		; Port_1_DriveMode_1 register (PRT1DM1)
02EC: 70 EF    AND   F,0xEF             
                                        (0224) 	M8C_SetBank0
02EE: 62 07 FF MOV   REG[0x7],0xFF      (0225) 	mov	reg[07h], ffh		; Port_1_DriveMode_2 register (PRT1DM2)
02F1: 62 06 00 MOV   REG[0x6],0x0       (0226) 	mov	reg[06h], 00h		; Port_1_GlobalSelect register (PRT1GS)
02F4: 71 10    OR    F,0x10             
                                        (0227) 	M8C_SetBank1
02F6: 62 06 00 MOV   REG[0x6],0x0       (0228) 	mov	reg[06h], 00h		; Port_1_IntCtrl_0 register (PRT1IC0)
02F9: 62 07 00 MOV   REG[0x7],0x0       (0229) 	mov	reg[07h], 00h		; Port_1_IntCtrl_1 register (PRT1IC1)
02FC: 70 EF    AND   F,0xEF             
                                        (0230) 	M8C_SetBank0
02FE: 62 05 00 MOV   REG[0x5],0x0       (0231) 	mov	reg[05h], 00h		; Port_1_IntEn register (PRT1IE)
0301: 62 08 00 MOV   REG[0x8],0x0       (0232) 	mov	reg[08h], 00h		; Port_2_Data register (PRT2DR)
0304: 71 10    OR    F,0x10             
                                        (0233) 	M8C_SetBank1
0306: 62 08 09 MOV   REG[0x8],0x9       (0234) 	mov	reg[08h], 09h		; Port_2_DriveMode_0 register (PRT2DM0)
0309: 62 09 F6 MOV   REG[0x9],0xF6      (0235) 	mov	reg[09h], f6h		; Port_2_DriveMode_1 register (PRT2DM1)
030C: 70 EF    AND   F,0xEF             
                                        (0236) 	M8C_SetBank0
030E: 62 0B E6 MOV   REG[0xB],0xE6      (0237) 	mov	reg[0bh], e6h		; Port_2_DriveMode_2 register (PRT2DM2)
0311: 62 0A 19 MOV   REG[0xA],0x19      (0238) 	mov	reg[0ah], 19h		; Port_2_GlobalSelect register (PRT2GS)
0314: 71 10    OR    F,0x10             
                                        (0239) 	M8C_SetBank1
0316: 62 0A 00 MOV   REG[0xA],0x0       (0240) 	mov	reg[0ah], 00h		; Port_2_IntCtrl_0 register (PRT2IC0)
0319: 62 0B 00 MOV   REG[0xB],0x0       (0241) 	mov	reg[0bh], 00h		; Port_2_IntCtrl_1 register (PRT2IC1)
031C: 70 EF    AND   F,0xEF             
                                        (0242) 	M8C_SetBank0
031E: 62 09 00 MOV   REG[0x9],0x0       (0243) 	mov	reg[09h], 00h		; Port_2_IntEn register (PRT2IE)
0321: 62 0C 00 MOV   REG[0xC],0x0       (0244) 	mov	reg[0ch], 00h		; Port_3_Data register (PRT3DR)
0324: 71 10    OR    F,0x10             
                                        (0245) 	M8C_SetBank1
0326: 62 0C 00 MOV   REG[0xC],0x0       (0246) 	mov	reg[0ch], 00h		; Port_3_DriveMode_0 register (PRT3DM0)
0329: 62 0D 00 MOV   REG[0xD],0x0       (0247) 	mov	reg[0dh], 00h		; Port_3_DriveMode_1 register (PRT3DM1)
032C: 70 EF    AND   F,0xEF             
                                        (0248) 	M8C_SetBank0
032E: 62 0F 00 MOV   REG[0xF],0x0       (0249) 	mov	reg[0fh], 00h		; Port_3_DriveMode_2 register (PRT3DM2)
0331: 62 0E 00 MOV   REG[0xE],0x0       (0250) 	mov	reg[0eh], 00h		; Port_3_GlobalSelect register (PRT3GS)
0334: 71 10    OR    F,0x10             
                                        (0251) 	M8C_SetBank1
0336: 62 0E 00 MOV   REG[0xE],0x0       (0252) 	mov	reg[0eh], 00h		; Port_3_IntCtrl_0 register (PRT3IC0)
0339: 62 0F 00 MOV   REG[0xF],0x0       (0253) 	mov	reg[0fh], 00h		; Port_3_IntCtrl_1 register (PRT3IC1)
033C: 70 EF    AND   F,0xEF             
                                        (0254) 	M8C_SetBank0
033E: 62 0D 00 MOV   REG[0xD],0x0       (0255) 	mov	reg[0dh], 00h		; Port_3_IntEn register (PRT3IE)
0341: 62 10 00 MOV   REG[0x10],0x0      (0256) 	mov	reg[10h], 00h		; Port_4_Data register (PRT4DR)
0344: 71 10    OR    F,0x10             
                                        (0257) 	M8C_SetBank1
0346: 62 10 00 MOV   REG[0x10],0x0      (0258) 	mov	reg[10h], 00h		; Port_4_DriveMode_0 register (PRT4DM0)
0349: 62 11 00 MOV   REG[0x11],0x0      (0259) 	mov	reg[11h], 00h		; Port_4_DriveMode_1 register (PRT4DM1)
034C: 70 EF    AND   F,0xEF             
                                        (0260) 	M8C_SetBank0
034E: 62 13 00 MOV   REG[0x13],0x0      (0261) 	mov	reg[13h], 00h		; Port_4_DriveMode_2 register (PRT4DM2)
0351: 62 12 00 MOV   REG[0x12],0x0      (0262) 	mov	reg[12h], 00h		; Port_4_GlobalSelect register (PRT4GS)
0354: 71 10    OR    F,0x10             
                                        (0263) 	M8C_SetBank1
0356: 62 12 00 MOV   REG[0x12],0x0      (0264) 	mov	reg[12h], 00h		; Port_4_IntCtrl_0 register (PRT4IC0)
0359: 62 13 00 MOV   REG[0x13],0x0      (0265) 	mov	reg[13h], 00h		; Port_4_IntCtrl_1 register (PRT4IC1)
035C: 70 EF    AND   F,0xEF             
                                        (0266) 	M8C_SetBank0
035E: 62 11 00 MOV   REG[0x11],0x0      (0267) 	mov	reg[11h], 00h		; Port_4_IntEn register (PRT4IE)
0361: 70 EF    AND   F,0xEF             
                                        (0268) 	M8C_SetBank0
0363: 7F       RET                      (0269) 	ret
                                        (0270) 
                                        (0271) 
                                        (0272) ; PSoC Configuration file trailer PsocConfig.asm
FILE: lib\psocconfig.asm                (0001) ;  Generated by PSoC Designer 5.4.2946
                                        (0002) ;
                                        (0003) ;==========================================================================
                                        (0004) ;  PSoCConfig.asm
                                        (0005) ;  @PSOC_VERSION
                                        (0006) ;
                                        (0007) ;  Version: 0.85
                                        (0008) ;  Revised: June 22, 2004
                                        (0009) ;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0010) ;
                                        (0011) ;  This file is generated by the Device Editor on Application Generation.
                                        (0012) ;  It contains code which loads the configuration data table generated in
                                        (0013) ;  the file PSoCConfigTBL.asm
                                        (0014) ;
                                        (0015) ;  DO NOT EDIT THIS FILE MANUALLY, AS IT IS OVERWRITTEN!!!
                                        (0016) ;  Edits to this file will not be preserved.
                                        (0017) ;==========================================================================
                                        (0018) ;
                                        (0019) include "m8c.inc"
                                        (0020) include "memory.inc"
                                        (0021) include "GlobalParams.inc"
                                        (0022) 
                                        (0023) export LoadConfigInit
                                        (0024) export _LoadConfigInit
                                        (0025) export LoadConfig_led_display
                                        (0026) export _LoadConfig_led_display
                                        (0027) 
                                        (0028) export NO_SHADOW
                                        (0029) export _NO_SHADOW
                                        (0030) 
                                        (0031) FLAG_CFG_MASK:      equ 10h         ;M8C flag register REG address bit mask
                                        (0032) END_CONFIG_TABLE:   equ ffh         ;end of config table indicator
                                        (0033) 
                                        (0034) AREA psoc_config(rom, rel)
                                        (0035) 
                                        (0036) ;---------------------------------------------------------------------------
                                        (0037) ; LoadConfigInit - Establish the start-up configuration (except for a few
                                        (0038) ;                  parameters handled by boot code, like CPU speed). This
                                        (0039) ;                  function can be called from user code, but typically it
                                        (0040) ;                  is only called from boot.
                                        (0041) ;
                                        (0042) ;       INPUTS: None.
                                        (0043) ;      RETURNS: Nothing.
                                        (0044) ; SIDE EFFECTS: Registers are volatile: the A and X registers can be modified!
                                        (0045) ;               In the large memory model currently only the page
                                        (0046) ;               pointer registers listed below are modified.  This does
                                        (0047) ;               not guarantee that in future implementations of this
                                        (0048) ;               function other page pointer registers will not be
                                        (0049) ;               modified.
                                        (0050) ;          
                                        (0051) ;               Page Pointer Registers Modified: 
                                        (0052) ;               CUR_PP
                                        (0053) ;
                                        (0054) _LoadConfigInit:
                                        (0055)  LoadConfigInit:
                                        (0056)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0057)     
0364: 7C 03 6B LCALL 0x036B             (0058) 	lcall	LoadConfig_led_display
0367: 7C 02 BF LCALL 0x02BF             (0059) 	lcall	LoadConfigTBL_led_display_Ordered
                                        (0060) 
                                        (0061) 
                                        (0062)     RAM_EPILOGUE RAM_USE_CLASS_4
036A: 7F       RET                      (0063)     ret
                                        (0064) 
                                        (0065) ;---------------------------------------------------------------------------
                                        (0066) ; Load Configuration led_display
                                        (0067) ;
                                        (0068) ;    Load configuration registers for led_display.
                                        (0069) ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
                                        (0070) ;
                                        (0071) ;       INPUTS: None.
                                        (0072) ;      RETURNS: Nothing.
                                        (0073) ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
                                        (0074) ;               modified as may the Page Pointer registers!
                                        (0075) ;               In the large memory model currently only the page
                                        (0076) ;               pointer registers listed below are modified.  This does
                                        (0077) ;               not guarantee that in future implementations of this
                                        (0078) ;               function other page pointer registers will not be
                                        (0079) ;               modified.
                                        (0080) ;          
                                        (0081) ;               Page Pointer Registers Modified: 
                                        (0082) ;               CUR_PP
                                        (0083) ;
                                        (0084) _LoadConfig_led_display:
                                        (0085)  LoadConfig_led_display:
                                        (0086)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0087) 
036B: 10       PUSH  X                  (0088) 	push	x
036C: 70 EF    AND   F,0xEF             
                                        (0089)     M8C_SetBank0                    ; Force bank 0
036E: 50 00    MOV   A,0x0              (0090)     mov     a, 0                    ; Specify bank 0
0370: 67       ASR   A                  (0091)     asr     a                       ; Store in carry flag
                                        (0092)                                     ; Load bank 0 table:
0371: 50 01    MOV   A,0x1              (0093)     mov     A, >LoadConfigTBL_led_display_Bank0
0373: 57 8B    MOV   X,0x8B             (0094)     mov     X, <LoadConfigTBL_led_display_Bank0
0375: 7C 03 86 LCALL 0x0386             (0095)     lcall   LoadConfig              ; Load the bank 0 values
                                        (0096) 
0378: 50 01    MOV   A,0x1              (0097)     mov     a, 1                    ; Specify bank 1
037A: 67       ASR   A                  (0098)     asr     a                       ; Store in carry flag
                                        (0099)                                     ; Load bank 1 table:
037B: 50 02    MOV   A,0x2              (0100)     mov     A, >LoadConfigTBL_led_display_Bank1
037D: 57 22    MOV   X,0x22             (0101)     mov     X, <LoadConfigTBL_led_display_Bank1
037F: 7C 03 86 LCALL 0x0386             (0102)     lcall   LoadConfig              ; Load the bank 1 values
0382: 70 EF    AND   F,0xEF             
                                        (0103) 
                                        (0104)     M8C_SetBank0                    ; Force return to bank 0
0384: 20       POP   X                  (0105) 	pop		x
                                        (0106) 
                                        (0107)     RAM_EPILOGUE RAM_USE_CLASS_4
0385: 7F       RET                      (0108)     ret
                                        (0109) 
                                        (0110) 
                                        (0111) 
                                        (0112) 
                                        (0113) ;---------------------------------------------------------------------------
                                        (0114) ; LoadConfig - Set IO registers as specified in ROM table of (address,value)
                                        (0115) ;              pairs. Terminate on address=0xFF.
                                        (0116) ;
                                        (0117) ;  INPUTS:  [A,X] points to the table to be loaded
                                        (0118) ;           Flag Register Carry bit encodes the Register Bank
                                        (0119) ;           (Carry=0 => Bank 0; Carry=1 => Bank 1)
                                        (0120) ;
                                        (0121) ;  RETURNS: nothing.
                                        (0122) ;
                                        (0123) ;  STACK FRAME:  X-4 I/O Bank 0/1 indicator
                                        (0124) ;                X-3 Temporary store for register address
                                        (0125) ;                X-2 LSB of config table address
                                        (0126) ;                X-1 MSB of config table address
                                        (0127) ;
                                        (0128) LoadConfig:
                                        (0129)     RAM_PROLOGUE RAM_USE_CLASS_2
0386: 38 02    ADD   SP,0x2             (0130)     add     SP, 2                   ; Set up local vars
0388: 10       PUSH  X                  (0131)     push    X                       ; Save config table address on stack
0389: 08       PUSH  A                  (0132)     push    A
038A: 4F       MOV   X,SP               (0133)     mov     X, SP
038B: 56 FC 00 MOV   [X-4],0x0          (0134)     mov     [X-4], 0                ; Set default Destination to Bank 0
038E: D0 04    JNC   0x0393             (0135)     jnc     .BankSelectSaved        ; Carry says Bank 0 is OK
0390: 56 FC 01 MOV   [X-4],0x1          (0136)     mov     [X-4], 1                ; No Carry: default to Bank 1
                                        (0137) .BankSelectSaved:
0393: 18       POP   A                  (0138)     pop     A
0394: 20       POP   X                  (0139)     pop     X
0395: 70 EF    AND   F,0xEF             
0397: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0140) 
                                        (0141) LoadConfigLp:
                                        (0142)     M8C_SetBank0                    ; Switch to bank 0
                                        (0143)     M8C_ClearWDT                    ; Clear the watchdog for long inits
039A: 10       PUSH  X                  (0144)     push    X                       ; Preserve the config table address
039B: 08       PUSH  A                  (0145)     push    A
039C: 28       ROMX                     (0146)     romx                            ; Load register address from table
039D: 39 FF    CMP   A,0xFF             (0147)     cmp     A, END_CONFIG_TABLE     ; End of table?
039F: A0 1F    JZ    0x03BF             (0148)     jz      EndLoadConfig           ;   Yes, go wrap it up
03A1: 4F       MOV   X,SP               (0149)     mov     X, SP                   ;
03A2: 48 FC 01 TST   [X-4],0x1          (0150)     tst     [X-4], 1                ; Loading IO Bank 1?
03A5: A0 03    JZ    0x03A9             (0151)     jz      .IOBankNowSet           ;    No, Bank 0 is fine
03A7: 71 10    OR    F,0x10             
                                        (0152)     M8C_SetBank1                    ;   Yes, switch to Bank 1
                                        (0153) .IOBankNowSet:
03A9: 54 FD    MOV   [X-3],A            (0154)     mov     [X-3], A                ; Stash the register address
03AB: 18       POP   A                  (0155)     pop     A                       ; Retrieve the table address
03AC: 20       POP   X                  (0156)     pop     X
03AD: 75       INC   X                  (0157)     inc     X                       ; Advance to the data byte
03AE: 09 00    ADC   A,0x0              (0158)     adc     A, 0
03B0: 10       PUSH  X                  (0159)     push    X                       ; Save the config table address again
03B1: 08       PUSH  A                  (0160)     push    A
03B2: 28       ROMX                     (0161)     romx                            ; load config data from the table
03B3: 4F       MOV   X,SP               (0162)     mov     X, SP                   ; retrieve the register address
03B4: 59 FD    MOV   X,[X-3]            (0163)     mov     X, [X-3]
03B6: 61 00    MOV   REG[X+0x0],A       (0164)     mov     reg[X], A               ; Configure the register
03B8: 18       POP   A                  (0165)     pop     A                       ; retrieve the table address
03B9: 20       POP   X                  (0166)     pop     X
03BA: 75       INC   X                  (0167)     inc     X                       ; advance to next table entry
03BB: 09 00    ADC   A,0x0              (0168)     adc     A, 0
03BD: 8F D7    JMP   0x0395             (0169)     jmp     LoadConfigLp            ; loop to configure another register
                                        (0170) EndLoadConfig:
03BF: 38 FC    ADD   SP,0xFC            (0171)     add     SP, -4
03C1: 70 3F    AND   F,0x3F             
03C3: 71 C0    OR    F,0xC0             
                                        (0172)     RAM_EPILOGUE RAM_USE_CLASS_2
03C5: 7F       RET                      (0173)     ret
                                        (0174) 
                                        (0175) AREA InterruptRAM(ram, rel)
                                        (0176) 
                                        (0177) NO_SHADOW:
                                        (0178) _NO_SHADOW:
FILE: lib\uart_sensorint.asm            (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   UART_SensorINT.asm
                                        (0004) ;;  Version: 5.3, Updated on 2013/5/19 at 10:44:49
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  UART Interrupt Service Routine.
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) 
                                        (0014) include "UART_Sensor.inc"
                                        (0015) include "memory.inc"
                                        (0016) include "m8c.inc"
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _UART_Sensor_TX_ISR
                                        (0022) export  _UART_Sensor_RX_ISR
                                        (0023) 
                                        (0024) IF (UART_Sensor_RXBUF_ENABLE)
                                        (0025) export  UART_Sensor_aRxBuffer
                                        (0026) export _UART_Sensor_aRxBuffer
                                        (0027) export  UART_Sensor_bRxCnt
                                        (0028) export _UART_Sensor_bRxCnt
                                        (0029) export  UART_Sensor_fStatus
                                        (0030) export _UART_Sensor_fStatus
                                        (0031) ENDIF
                                        (0032) 
                                        (0033) 
                                        (0034) ;-----------------------------------------------
                                        (0035) ; Variable Allocation
                                        (0036) ;-----------------------------------------------
                                        (0037) AREA InterruptRAM (RAM, REL, CON)
                                        (0038) 
                                        (0039) IF (UART_Sensor_RXBUF_ENABLE)
                                        (0040)  UART_Sensor_fStatus:
                                        (0041) _UART_Sensor_fStatus:      BLK  1
                                        (0042)  UART_Sensor_bRxCnt:
                                        (0043) _UART_Sensor_bRxCnt:       BLK  1
                                        (0044) AREA UART_Sensor_RAM (RAM, REL, CON)
                                        (0045)  UART_Sensor_aRxBuffer:
                                        (0046) _UART_Sensor_aRxBuffer:    BLK UART_Sensor_RX_BUFFER_SIZE
                                        (0047) ENDIF
                                        (0048) 
                                        (0049) AREA InterruptRAM (RAM, REL, CON)
                                        (0050) 
                                        (0051) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0052) ;---------------------------------------------------
                                        (0053) ; Insert your custom declarations below this banner
                                        (0054) ;---------------------------------------------------
                                        (0055) 
                                        (0056) ;------------------------
                                        (0057) ;  Includes
                                        (0058) ;------------------------
                                        (0059) 
                                        (0060) 
                                        (0061) ;------------------------
                                        (0062) ;  Constant Definitions
                                        (0063) ;------------------------
                                        (0064) 
                                        (0065) 
                                        (0066) ;------------------------
                                        (0067) ; Variable Allocation
                                        (0068) ;------------------------
                                        (0069) 
                                        (0070) 
                                        (0071) ;---------------------------------------------------
                                        (0072) ; Insert your custom declarations above this banner
                                        (0073) ;---------------------------------------------------
                                        (0074) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0075) 
                                        (0076) 
                                        (0077) AREA UserModules (ROM, REL, CON)
                                        (0078) 
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;  FUNCTION NAME: _UART_Sensor_TX_ISR
                                        (0081) ;
                                        (0082) ;  DESCRIPTION:
                                        (0083) ;     UART TX interrupt handler for instance UART_Sensor.
                                        (0084) ;
                                        (0085) ;     This is a place holder function.  If the user requires use of an interrupt
                                        (0086) ;     handler for this function, then place code where specified.
                                        (0087) ;-----------------------------------------------------------------------------
                                        (0088) 
                                        (0089) _UART_Sensor_TX_ISR:
                                        (0090)    ;@PSoC_UserCode_BODY_1@ (Do not change this line.)
                                        (0091)    ;---------------------------------------------------
                                        (0092)    ; Insert your custom assembly code below this banner
                                        (0093)    ;---------------------------------------------------
                                        (0094)    ;   NOTE: interrupt service routines must preserve
                                        (0095)    ;   the values of the A and X CPU registers.
                                        (0096)    
                                        (0097)    ;---------------------------------------------------
                                        (0098)    ; Insert your custom assembly code above this banner
                                        (0099)    ;---------------------------------------------------
                                        (0100)    
                                        (0101)    ;---------------------------------------------------
                                        (0102)    ; Insert a lcall to a C function below this banner
                                        (0103)    ; and un-comment the lines between these banners
                                        (0104)    ;---------------------------------------------------
                                        (0105)    
                                        (0106)    ;PRESERVE_CPU_CONTEXT
                                        (0107)    ;lcall _My_C_Function
                                        (0108)    ;RESTORE_CPU_CONTEXT
                                        (0109)    
                                        (0110)    ;---------------------------------------------------
                                        (0111)    ; Insert a lcall to a C function above this banner
                                        (0112)    ; and un-comment the lines between these banners
                                        (0113)    ;---------------------------------------------------
                                        (0114)    ;@PSoC_UserCode_END@ (Do not change this line.)
03C6: 7E       RETI                     (0115)    reti
                                        (0116) 
                                        (0117) 
                                        (0118) ;-----------------------------------------------------------------------------
                                        (0119) ;  FUNCTION NAME: _UART_Sensor_RX_ISR
                                        (0120) ;
                                        (0121) ;  DESCRIPTION:
                                        (0122) ;     UART RX interrupt handler for instance UART_Sensor.
                                        (0123) ;     This ISR handles the background processing of received characters if
                                        (0124) ;     the buffer is enabled.
                                        (0125) ;
                                        (0126) ;
                                        (0127) ;  The following assumes that the RX buffer feature has been enabled.
                                        (0128) ;
                                        (0129) ;  SIDE EFFECTS:
                                        (0130) ;     There are 3 posible errors that may occur with the serial port.
                                        (0131) ;      1) Parity Error
                                        (0132) ;      2) Framing Error
                                        (0133) ;      3) OverRun Error
                                        (0134) ;
                                        (0135) ;  This user module check for parity and framing error.  If either of these
                                        (0136) ;  two errors are detected, the data is read and ignored.  When an overRun
                                        (0137) ;  error occurs, the last byte was lost, but the current byte is valid.  For
                                        (0138) ;  this reason this error is ignored at this time.  Code could be added to
                                        (0139) ;  this ISR to set a flag if an error condition occurs.
                                        (0140) ;
                                        (0141) ;  THEORY of OPERATION:
                                        (0142) ;     When using the RX buffer feature, the ISR collects received characters
                                        (0143) ;     in a buffer until the user defined command terminator is detected.  After
                                        (0144) ;     the command terminator is detected, the command bit is set and all other
                                        (0145) ;     characters will be ignored until the command bit is reset.  Up to
                                        (0146) ;     buffer_size - 1 characters will be collected waiting for a command
                                        (0147) ;     terminator.  After that, the characters will be discarded, although
                                        (0148) ;     a command determinator will still cause the command bit to be set.
                                        (0149) ;
                                        (0150) ;-----------------------------------------------------------------------------
                                        (0151) _UART_Sensor_RX_ISR:
                                        (0152) 
                                        (0153)    ;@PSoC_UserCode_BODY_2@ (Do not change this line.)
                                        (0154)    ;---------------------------------------------------
                                        (0155)    ; Insert your custom assembly code below this banner
                                        (0156)    ;---------------------------------------------------
                                        (0157)    ;   NOTE: interrupt service routines must preserve
                                        (0158)    ;   the values of the A and X CPU registers.
                                        (0159)    
                                        (0160)    ;---------------------------------------------------
                                        (0161)    ; Insert your custom assembly code above this banner
                                        (0162)    ;---------------------------------------------------
                                        (0163)    
                                        (0164)    ;---------------------------------------------------
                                        (0165)    ; Insert a lcall to a C function below this banner
                                        (0166)    ; and un-comment the lines between these banners
                                        (0167)    ;---------------------------------------------------
                                        (0168)    
                                        (0169)    ;PRESERVE_CPU_CONTEXT
                                        (0170)    ;lcall _My_C_Function
                                        (0171)    ;RESTORE_CPU_CONTEXT
                                        (0172)    
                                        (0173)    ;---------------------------------------------------
                                        (0174)    ; Insert a lcall to a C function above this banner
                                        (0175)    ; and un-comment the lines between these banners
                                        (0176)    ;---------------------------------------------------
                                        (0177)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0178) 
                                        (0179) IF (UART_Sensor_RXBUF_ENABLE)
                                        (0180)    push A
                                        (0181)    push X
                                        (0182)    
                                        (0183)    IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0184)       REG_PRESERVE IDX_PP
                                        (0185)    ENDIF
                                        (0186)    
                                        (0187)    mov  X,[UART_Sensor_bRxCnt]                             ; Load X with byte counter
                                        (0188)    mov  A,REG[UART_Sensor_RX_CONTROL_REG]                  ; Read the control register
                                        (0189)    push A                                                  ; Store copy for later test
                                        (0190)                                                            ; IF real RX interrupt
                                        (0191)    and  A,UART_Sensor_RX_REG_FULL                          ; Did really really get an IRQ
                                        (0192)    jnz  .UARTRX_ReadRx                                     ; Data ready, go get it
                                        (0193)    pop  A                                                  ; Restore stack
                                        (0194)    jmp  .RESTORE_IDX_PP
                                        (0195) 
                                        (0196) .UARTRX_ReadRx:
                                        (0197)    pop  A                                                  ; Restore status flags
                                        (0198)                                                            ; IF there is no error, get data
                                        (0199)                                                            ; Check for parity or framing error
                                        (0200)    and  A,UART_Sensor_RX_ERROR
                                        (0201)    jz   .UARTRX_NO_ERROR                                   ; If there is not an Error go read data
                                        (0202) 
                                        (0203)    or   [UART_Sensor_fStatus],A                            ; Set error flags (parity,framing,overrun) bits
                                        (0204)    tst  REG[UART_Sensor_RX_BUFFER_REG], 0x00               ; Read the data buffer to clear it.
                                        (0205)    and  A,UART_Sensor_RX_FRAMING_ERROR                     ; Check for framing error special case
                                        (0206)    jz   .RESTORE_IDX_PP                                    ; Not framing error, all done
                                        (0207) 
                                        (0208)                                                            ; Disable and re-enable RX to reset after
                                        (0209)                                                            ; framing error.
                                        (0210)    and   REG[UART_Sensor_RX_CONTROL_REG], ~UART_Sensor_RX_ENABLE   ; Disable RX
                                        (0211)    or    REG[UART_Sensor_RX_CONTROL_REG],  UART_Sensor_RX_ENABLE   ; Enable RX
                                        (0212)    jmp  .RESTORE_IDX_PP                                    ; Done with framing error, leave.
                                        (0213) 
                                        (0214) 
                                        (0215) .UARTRX_NO_ERROR:
                                        (0216)    mov  A,REG[UART_Sensor_RX_BUFFER_REG ]                  ; Read the data buffer
                                        (0217) 
                                        (0218)                                                            ; IF buffer not full
                                        (0219)    tst  [UART_Sensor_fStatus],UART_Sensor_RX_BUF_CMDTERM     ; Check for buffer full
                                        (0220)    jnz  .RESTORE_IDX_PP                                    ; All done
                                        (0221) 
                                        (0222)    cmp  A,UART_Sensor_CMD_TERM                             ; Check for End of command
                                        (0223)    jnz  .UARTRX_CHK_BACKSPACE
                                        (0224)    or   [UART_Sensor_fStatus],UART_Sensor_RX_BUF_CMDTERM   ; Set command ready bit
                                        (0225) 
                                        (0226) 
                                        (0227) 
                                        (0228)    RAM_SETPAGE_IDX >UART_Sensor_aRxBuffer
                                        (0229)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
                                        (0230)    mov  [X + UART_Sensor_aRxBuffer],00h                    ; Zero out last data
                                        (0231)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
                                        (0232)    jmp  .RESTORE_IDX_PP
                                        (0233) 
                                        (0234) .UARTRX_CHK_BACKSPACE:                                     ; 
                                        (0235) IF(UART_Sensor_BACKSPACE_ENABLE)                           ; Enable if backspace/delete mode
                                        (0236)    cmp  A,UART_Sensor_BACKSPACE_ENABLE                     ; Check for backspace character
                                        (0237)    jnz  .UARTRX_IGNORE                                     ; If not, skip the backspace stuff
                                        (0238)    cmp  [UART_Sensor_bRxCnt],00h                           ; Check if buffer empty
                                        (0239)    jz   .RESTORE_IDX_PP                                    ; 
                                        (0240)    dec  [UART_Sensor_bRxCnt]                               ; Decrement buffer count by one.
                                        (0241)    jmp  .RESTORE_IDX_PP
                                        (0242) ENDIF                                                      ; 
                                        (0243) 
                                        (0244) .UARTRX_IGNORE:
                                        (0245) IF(UART_Sensor_RX_IGNORE_BELOW)                            ; Ignore charaters below this value
                                        (0246)    cmp  A,UART_Sensor_RX_IGNORE_BELOW                      ; If ignore char is set to 0x00, do not
                                        (0247)    jc   .RESTORE_IDX_PP                                    ; ignore any characters.
                                        (0248) ENDIF
                                        (0249) 
                                        (0250) .UARTRX_CHK_OVFL:                                          ; Check for MAX String here
                                        (0251) 	
                                        (0252)    RAM_SETPAGE_IDX >UART_Sensor_aRxBuffer                  ;   using idexed address mode
                                        (0253)    cmp  [UART_Sensor_bRxCnt],(UART_Sensor_RX_BUFFER_SIZE - 1)
                                        (0254)    jc   .UARTRX_ISR_GETDATA
                                        (0255)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
                                        (0256)    mov  [X + UART_Sensor_aRxBuffer],00h                    ; Zero out last data in the buffer
                                        (0257)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
                                        (0258)    or   [UART_Sensor_fStatus],UART_Sensor_RX_BUF_OVERRUN   ; Set error flags (parity,framing,overrun) bits
                                        (0259)    jmp  .RESTORE_IDX_PP
                                        (0260) 
                                        (0261) .UARTRX_ISR_GETDATA:                                       ; IF input data == "CR", then end of command
                                        (0262)                                                            ; X is already loaded with pointer
                                        (0263)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
                                        (0264)    mov  [X+UART_Sensor_aRxBuffer],A                        ; store data in array
                                        (0265)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
                                        (0266)    inc  X                                                  ; Inc the pointer
                                        (0267)    mov  [UART_Sensor_bRxCnt],X                             ; Restore the pointer
                                        (0268)                                                            ; ENDIF max string size
                                        (0269) .RESTORE_IDX_PP:
                                        (0270)    IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0271)       REG_RESTORE IDX_PP
                                        (0272)    ENDIF
                                        (0273) 
                                        (0274) .END_UARTRX_ISR:
                                        (0275)    pop  X
                                        (0276)    pop  A
                                        (0277) 
                                        (0278) ENDIF
                                        (0279) 
                                        (0280) UART_Sensor_RX_ISR_END:
03C7: 7E       RETI                     (0281)    reti
                                        (0282) 
                                        (0283) ; end of file UART_SensorINT.asm
                                        (0284) 
FILE: lib\uart_sensor.asm               (0001) ;;*****************************************************************************
03C8: 43 E1 04 OR    REG[0xE1],0x4      (0002) ;;*****************************************************************************
03CB: 43 E1 08 OR    REG[0xE1],0x8      
                                        (0003) ;;  Filename:   UART_Sensor.asm
                                        (0004) ;;  Version: 5.3, Updated on 2013/5/19 at 10:44:49
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  UART User Module software implementation file for the
                                        (0008) ;;                22/24/25/26/27xxx families.
                                        (0009) ;;
                                        (0010) ;;
                                        (0011) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0012) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0013) ;;        This means it is the caller's responsibility to preserve any values
                                        (0014) ;;        in the X and A registers that are still needed after the API functions
                                        (0015) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0016) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0017) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0018) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0019) ;;-----------------------------------------------------------------------------
                                        (0020) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0021) ;;*****************************************************************************
                                        (0022) ;;*****************************************************************************
                                        (0023) 
                                        (0024) 
                                        (0025) include "m8c.inc"
                                        (0026) include "memory.inc"
                                        (0027) include "UART_Sensor.inc"
                                        (0028) 
                                        (0029) ;-----------------------------------------------
                                        (0030) ;  Global Symbols
                                        (0031) ;-----------------------------------------------
                                        (0032) ;-------------------------------------------------------------------
                                        (0033) ;  Declare the functions global for both assembler and C compiler.
                                        (0034) ;
                                        (0035) ;  Note that there are two names for each API. First name is
                                        (0036) ;  assembler reference. Name with underscore is name refence for
                                        (0037) ;  C compiler.  Calling function in C source code does not require
                                        (0038) ;  the underscore.
                                        (0039) ;-------------------------------------------------------------------
                                        (0040) export  UART_Sensor_SetTxIntMode
                                        (0041) export _UART_Sensor_SetTxIntMode
                                        (0042) export  UART_Sensor_EnableInt
                                        (0043) export _UART_Sensor_EnableInt
                                        (0044) export  UART_Sensor_DisableInt
                                        (0045) export _UART_Sensor_DisableInt
                                        (0046) 
                                        (0047) export  UART_Sensor_Start
                                        (0048) export _UART_Sensor_Start
                                        (0049) export  UART_Sensor_Stop
                                        (0050) export _UART_Sensor_Stop
                                        (0051) export  UART_Sensor_SendData
                                        (0052) export _UART_Sensor_SendData
                                        (0053) export  UART_Sensor_bReadTxStatus
                                        (0054) export _UART_Sensor_bReadTxStatus
                                        (0055) export  UART_Sensor_bReadRxData
                                        (0056) export _UART_Sensor_bReadRxData
                                        (0057) export  UART_Sensor_bReadRxStatus
                                        (0058) export _UART_Sensor_bReadRxStatus
                                        (0059) 
                                        (0060) export  UART_Sensor_IntCntl
                                        (0061) export _UART_Sensor_IntCntl
                                        (0062) 
                                        (0063) export  UART_Sensor_TxIntMode
                                        (0064) export _UART_Sensor_TxIntMode
                                        (0065) 
                                        (0066) export  UART_Sensor_PutSHexByte
                                        (0067) export _UART_Sensor_PutSHexByte
                                        (0068) export  UART_Sensor_PutSHexInt
                                        (0069) export _UART_Sensor_PutSHexInt
                                        (0070) 
                                        (0071) export  UART_Sensor_CPutString
                                        (0072) export _UART_Sensor_CPutString
                                        (0073) export  UART_Sensor_PutString
                                        (0074) export _UART_Sensor_PutString
                                        (0075) export  UART_Sensor_PutChar
                                        (0076) export _UART_Sensor_PutChar
                                        (0077) export  UART_Sensor_Write
                                        (0078) export _UART_Sensor_Write
                                        (0079) export  UART_Sensor_CWrite
                                        (0080) export _UART_Sensor_CWrite
                                        (0081) 
                                        (0082) export  UART_Sensor_cGetChar
                                        (0083) export _UART_Sensor_cGetChar
                                        (0084) export  UART_Sensor_cReadChar
                                        (0085) export _UART_Sensor_cReadChar
                                        (0086) export  UART_Sensor_iReadChar
                                        (0087) export _UART_Sensor_iReadChar
                                        (0088) export  UART_Sensor_PutCRLF
                                        (0089) export _UART_Sensor_PutCRLF
                                        (0090) 
                                        (0091) IF (UART_Sensor_RXBUF_ENABLE)
                                        (0092) export  UART_Sensor_CmdReset
                                        (0093) export _UART_Sensor_CmdReset
                                        (0094) export  UART_Sensor_bCmdCheck
                                        (0095) export _UART_Sensor_bCmdCheck
                                        (0096) export  UART_Sensor_bCmdLength
                                        (0097) export _UART_Sensor_bCmdLength
                                        (0098) export  UART_Sensor_bErrCheck
                                        (0099) export _UART_Sensor_bErrCheck
                                        (0100) 
                                        (0101) export  UART_Sensor_szGetParam
                                        (0102) export _UART_Sensor_szGetParam
                                        (0103) export  UART_Sensor_szGetRestOfParams
                                        (0104) export _UART_Sensor_szGetRestOfParams
                                        (0105) ENDIF
                                        (0106) 
                                        (0107) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0108) ; WARNING WARNING WARNING
                                        (0109) ; The following exports are for backwards compatibility only and should
                                        (0110) ; not be used for new designs. They may be eliminated in a future release.
                                        (0111) ; Their status is "NO FURTHER MAINTENANCE". 
                                        (0112) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0113) export  bUART_Sensor_ReadTxStatus
                                        (0114) export _bUART_Sensor_ReadTxStatus
                                        (0115) export  bUART_Sensor_ReadRxData
                                        (0116) export _bUART_Sensor_ReadRxData
                                        (0117) export  bUART_Sensor_ReadRxStatus
                                        (0118) export _bUART_Sensor_ReadRxStatus
                                        (0119) 	
                                        (0120) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0121) ;             END WARNING
                                        (0122) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0123) 
                                        (0124) ;-----------------------------------------------
                                        (0125) ; Variable Allocation
                                        (0126) ;-----------------------------------------------
                                        (0127) IF (UART_Sensor_RXBUF_ENABLE)
                                        (0128)     
                                        (0129) area UART_Sensor_RAM (RAM, REL, CON)
                                        (0130)     
                                        (0131)  ptrParam:   BLK  1
                                        (0132) 
                                        (0133) ENDIF
                                        (0134) 
                                        (0135) area text (ROM,REL)
                                        (0136) 
                                        (0137) ;-----------------------------------------------
                                        (0138) ;  EQUATES
                                        (0139) ;-----------------------------------------------
                                        (0140) bfCONTROL_REG_START_BIT:        equ    1    ; Control register start bit
                                        (0141) bfFUNCTION_REG_TX_INT_MODE_BIT: equ 0x10    ; the TX Int Mode bit
                                        (0142) 
                                        (0143) area UserModules (ROM, REL, CON)
                                        (0144) 
                                        (0145) ;=============================================================================
                                        (0146) ;=============================================================================
                                        (0147) ;
                                        (0148) ;     Low-Level Commands
                                        (0149) ;
                                        (0150) ;=============================================================================
                                        (0151) ;=============================================================================
                                        (0152) 
                                        (0153) .SECTION
                                        (0154) ;-----------------------------------------------------------------------------
                                        (0155) ;  FUNCTION NAME: UART_Sensor_EnableInt
                                        (0156) ;
                                        (0157) ;  DESCRIPTION:
                                        (0158) ;     Enables this UART's interrupt by setting the interrupt enable mask
                                        (0159) ;     bit associated with this User Module. Remember to call the global
                                        (0160) ;     interrupt enable function by using the macro: M8C_EnableGInt.
                                        (0161) ;-----------------------------------------------------------------------------
                                        (0162) ;
                                        (0163) ;  ARGUMENTS:
                                        (0164) ;     none.
                                        (0165) ;
                                        (0166) ;  RETURNS:
                                        (0167) ;     none.
                                        (0168) ;
                                        (0169) ;  SIDE EFFECTS:
                                        (0170) ;    The A and X registers may be modified by this or future implementations
                                        (0171) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0172) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0173) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0174) ;    functions.
                                        (0175) ;
                                        (0176)  UART_Sensor_EnableInt:
                                        (0177) _UART_Sensor_EnableInt:
                                        (0178)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0179)    M8C_EnableIntMask UART_Sensor_TX_INT_REG, UART_Sensor_TX_INT_MASK
                                        (0180)    M8C_EnableIntMask UART_Sensor_RX_INT_REG, UART_Sensor_RX_INT_MASK
                                        (0181)    RAM_EPILOGUE RAM_USE_CLASS_1
03CE: 7F       RET                      (0182)    ret
03CF: 41 E1 FB AND   REG[0xE1],0xFB     
03D2: 41 E1 F7 AND   REG[0xE1],0xF7     
                                        (0183) .ENDSECTION
                                        (0184) 
                                        (0185)     
                                        (0186) .SECTION
                                        (0187) ;-----------------------------------------------------------------------------
                                        (0188) ;  FUNCTION NAME: UART_Sensor_DisableInt
                                        (0189) ;
                                        (0190) ;  DESCRIPTION:
                                        (0191) ;     Disables this UART's interrupt by clearing the interrupt enable mask bit
                                        (0192) ;     associated with this User Module.
                                        (0193) ;-----------------------------------------------------------------------------
                                        (0194) ;
                                        (0195) ;  ARGUMENTS:
                                        (0196) ;     none.
                                        (0197) ;
                                        (0198) ;  RETURNS:
                                        (0199) ;     none.
                                        (0200) ;
                                        (0201) ;  SIDE EFFECTS:
                                        (0202) ;    The A and X registers may be modified by this or future implementations
                                        (0203) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0204) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0205) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0206) ;    functions.
                                        (0207) ;
                                        (0208)  UART_Sensor_DisableInt:
                                        (0209) _UART_Sensor_DisableInt:
                                        (0210)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0211)    M8C_DisableIntMask UART_Sensor_TX_INT_REG, UART_Sensor_TX_INT_MASK
                                        (0212)    M8C_DisableIntMask UART_Sensor_RX_INT_REG, UART_Sensor_RX_INT_MASK
                                        (0213)    RAM_EPILOGUE RAM_USE_CLASS_1
03D5: 7F       RET                      (0214)    ret
03D6: 71 10    OR    F,0x10             
                                        (0215) .ENDSECTION
                                        (0216) 
                                        (0217) 
                                        (0218) .SECTION
                                        (0219) ;-----------------------------------------------------------------------------
                                        (0220) ;  FUNCTION NAME: UART_Sensor_SetTxIntMode(BYTE bTxIntMode)
                                        (0221) ;
                                        (0222) ;  DESCRIPTION:
                                        (0223) ;     Sets the Tx Interrupt Mode bit in the Function Register.
                                        (0224) ;-----------------------------------------------------------------------------
                                        (0225) ;
                                        (0226) ;  ARGUMENTS:
                                        (0227) ;     BYTE bTxIntMode - The TX Interrupt mode setting. Use defined masks.
                                        (0228) ;        Passed in the A register
                                        (0229) ;
                                        (0230) ;  RETURNS:
                                        (0231) ;     none.
                                        (0232) ;
                                        (0233) ;  SIDE EFFECTS:
                                        (0234) ;    The A and X registers may be modified by this or future implementations
                                        (0235) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0236) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0237) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0238) ;    functions.
                                        (0239) ;
                                        (0240) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0241) ;     Sets the TX interrupt mode bit to define whether the interrupt occurs
                                        (0242) ;     on TX register empty or TX transmit complete
                                        (0243) ;
                                        (0244)  UART_Sensor_SetTxIntMode:
                                        (0245) _UART_Sensor_SetTxIntMode:
                                        (0246)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0247)    M8C_SetBank1
03D8: 21 01    AND   A,0x1              (0248)    and   A, UART_Sensor_INT_MODE_TX_COMPLETE
03DA: A0 07    JZ    0x03E2             (0249)    jz    .SetModeRegEmpty
03DC: 43 28 10 OR    REG[0x28],0x10     (0250)    or    REG[UART_Sensor_TX_FUNC_REG], bfFUNCTION_REG_TX_INT_MODE_BIT
03DF: 70 EF    AND   F,0xEF             
                                        (0251)    M8C_SetBank0
                                        (0252)    RAM_EPILOGUE RAM_USE_CLASS_1
03E1: 7F       RET                      (0253)    ret
                                        (0254) 
                                        (0255) .SetModeRegEmpty:
03E2: 41 28 EF AND   REG[0x28],0xEF     (0256)    and   REG[UART_Sensor_TX_FUNC_REG], ~bfFUNCTION_REG_TX_INT_MODE_BIT
03E5: 70 EF    AND   F,0xEF             
                                        (0257)    M8C_SetBank0
                                        (0258)    RAM_EPILOGUE RAM_USE_CLASS_1
03E7: 7F       RET                      (0259)    ret
                                        (0260) .ENDSECTION
                                        (0261) 
                                        (0262) 
                                        (0263) .SECTION
                                        (0264) ;-----------------------------------------------------------------------------
                                        (0265) ;  FUNCTION NAME: UART_Sensor_Start(BYTE bParity)
                                        (0266) ;
                                        (0267) ;  DESCRIPTION:
                                        (0268) ;     Sets the start bit and parity in the Control register of this user module.
                                        (0269) ;-----------------------------------------------------------------------------
                                        (0270) ;
                                        (0271) ;  ARGUMENTS:
                                        (0272) ;     BYTE bParity - parity setting for the Transmitter and receiver. Use defined masks.
                                        (0273) ;        Passed in the A register.
                                        (0274) ;
                                        (0275) ;  RETURNS:
                                        (0276) ;     none.
                                        (0277) ;
                                        (0278) ;  SIDE EFFECTS:
                                        (0279) ;    The A and X registers may be modified by this or future implementations
                                        (0280) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0281) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0282) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0283) ;    functions.
                                        (0284) ;
                                        (0285)  UART_Sensor_Start:
                                        (0286) _UART_Sensor_Start:
                                        (0287)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0288)    ; Note, Proxy Class 4 only if receive buffer used; otherwise Proxy Class 1.
                                        (0289) 
03E8: 29 01    OR    A,0x1              (0290)    or    A, bfCONTROL_REG_START_BIT
03EA: 60 2B    MOV   REG[0x2B],A        (0291)    mov   REG[UART_Sensor_TX_CONTROL_REG], A
03EC: 60 2F    MOV   REG[0x2F],A        (0292)    mov   REG[UART_Sensor_RX_CONTROL_REG], A
                                        (0293) IF ( UART_Sensor_RXBUF_ENABLE )
                                        (0294)    call  _UART_Sensor_CmdReset
                                        (0295) ENDIF
                                        (0296)    RAM_EPILOGUE RAM_USE_CLASS_1
03EE: 7F       RET                      (0297)    ret
                                        (0298) .ENDSECTION
                                        (0299) 
                                        (0300) 
                                        (0301) .SECTION
                                        (0302) ;-----------------------------------------------------------------------------
                                        (0303) ;  FUNCTION NAME: UART_Sensor_Stop
                                        (0304) ;
                                        (0305) ;  DESCRIPTION:
                                        (0306) ;     Disables UART operation.
                                        (0307) ;-----------------------------------------------------------------------------
                                        (0308) ;
                                        (0309) ;  ARGUMENTS:
                                        (0310) ;     none.
                                        (0311) ;
                                        (0312) ;  RETURNS:
                                        (0313) ;     none.
                                        (0314) ;
                                        (0315) ;  SIDE EFFECTS:
                                        (0316) ;    The A and X registers may be modified by this or future implementations
                                        (0317) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0318) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0319) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0320) ;    functions.
                                        (0321) ;
                                        (0322)  UART_Sensor_Stop:
                                        (0323) _UART_Sensor_Stop:
                                        (0324)    RAM_PROLOGUE RAM_USE_CLASS_1
03EF: 41 2B FE AND   REG[0x2B],0xFE     (0325)    and   REG[UART_Sensor_TX_CONTROL_REG], ~bfCONTROL_REG_START_BIT
03F2: 41 2F FE AND   REG[0x2F],0xFE     (0326)    and   REG[UART_Sensor_RX_CONTROL_REG], ~bfCONTROL_REG_START_BIT
                                        (0327)    RAM_EPILOGUE RAM_USE_CLASS_1
03F5: 7F       RET                      (0328)    ret
                                        (0329) .ENDSECTION
                                        (0330) 
                                        (0331) 
                                        (0332) .SECTION
                                        (0333) ;-----------------------------------------------------------------------------
                                        (0334) ;  FUNCTION NAME: UART_Sensor_SendData
                                        (0335) ;
                                        (0336) ;  DESCRIPTION:
                                        (0337) ;     Initiates a transmission of data.
                                        (0338) ;-----------------------------------------------------------------------------
                                        (0339) ;
                                        (0340) ;  ARGUMENTS:
                                        (0341) ;     BYTE  TxData - data to transmit. PASSED in A register.
                                        (0342) ;
                                        (0343) ;  RETURNS:
                                        (0344) ;     none.
                                        (0345) ;
                                        (0346) ;  SIDE EFFECTS:
                                        (0347) ;    The A and X registers may be modified by this or future implementations
                                        (0348) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0349) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0350) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0351) ;    functions.
                                        (0352) ;
                                        (0353)  UART_Sensor_SendData:
                                        (0354) _UART_Sensor_SendData:
                                        (0355)    RAM_PROLOGUE RAM_USE_CLASS_1
03F6: 60 29    MOV   REG[0x29],A        (0356)    mov REG[UART_Sensor_TX_BUFFER_REG], A
                                        (0357)    RAM_EPILOGUE RAM_USE_CLASS_1
03F8: 7F       RET                      (0358)    ret
                                        (0359) .ENDSECTION
                                        (0360) 
                                        (0361) 
                                        (0362) .SECTION
                                        (0363) ;-----------------------------------------------------------------------------
                                        (0364) ;  FUNCTION NAME: UART_Sensor_bReadTxStatus
                                        (0365) ;
                                        (0366) ;  DESCRIPTION:
                                        (0367) ;     Reads the Tx Status bits in the Control/Status register.
                                        (0368) ;-----------------------------------------------------------------------------
                                        (0369) ;
                                        (0370) ;  ARGUMENTS:
                                        (0371) ;     none.
                                        (0372) ;
                                        (0373) ;  RETURNS:
                                        (0374) ;     BYTE  bTxStatus - transmit status data.  Use defined masks for detecting
                                        (0375) ;           status bits (returned in A)
                                        (0376) ;
                                        (0377) ;  SIDE EFFECTS:
                                        (0378) ;    The A and X registers may be modified by this or future implementations
                                        (0379) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0380) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0381) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0382) ;    functions.
                                        (0383) ;
                                        (0384)  UART_Sensor_bReadTxStatus:
                                        (0385) _UART_Sensor_bReadTxStatus:
                                        (0386)  bUART_Sensor_ReadTxStatus:                      ; For backwards compatibility only
                                        (0387) _bUART_Sensor_ReadTxStatus:                      ; For backwards compatibility only
                                        (0388)    RAM_PROLOGUE RAM_USE_CLASS_1
03F9: 5D 2B    MOV   A,REG[0x2B]        (0389)    mov A,  REG[UART_Sensor_TX_CONTROL_REG]
                                        (0390)    RAM_EPILOGUE RAM_USE_CLASS_1
03FB: 7F       RET                      (0391)    ret
                                        (0392) .ENDSECTION
                                        (0393) 
                                        (0394) 
                                        (0395) .SECTION
                                        (0396) ;-----------------------------------------------------------------------------
                                        (0397) ;  FUNCTION NAME: UART_Sensor_bReadRxData
                                        (0398) ;
                                        (0399) ;  DESCRIPTION:
                                        (0400) ;     Reads the RX buffer register.  Should check the status regiser to make
                                        (0401) ;     sure data is valid.
                                        (0402) ;-----------------------------------------------------------------------------
                                        (0403) ;
                                        (0404) ;  ARGUMENTS:
                                        (0405) ;     none.
                                        (0406) ;
                                        (0407) ;  RETURNS:
                                        (0408) ;     bRxData - returned in A.
                                        (0409) ;
                                        (0410) ;  SIDE EFFECTS:
                                        (0411) ;    The A and X registers may be modified by this or future implementations
                                        (0412) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0413) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0414) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0415) ;    functions.
                                        (0416) ;
                                        (0417)  UART_Sensor_bReadRxData:
                                        (0418) _UART_Sensor_bReadRxData:
                                        (0419)  bUART_Sensor_ReadRxData:                        ; For backwards compatibility only
                                        (0420) _bUART_Sensor_ReadRxData:                        ; For backwards compatibility only
                                        (0421)    RAM_PROLOGUE RAM_USE_CLASS_1
03FC: 5D 2E    MOV   A,REG[0x2E]        (0422)    mov A, REG[UART_Sensor_RX_BUFFER_REG]
                                        (0423)    RAM_EPILOGUE RAM_USE_CLASS_1
03FE: 7F       RET                      (0424)    ret
                                        (0425) .ENDSECTION
                                        (0426) 
                                        (0427) 
                                        (0428) .SECTION
                                        (0429) ;-----------------------------------------------------------------------------
                                        (0430) ;  FUNCTION NAME: UART_Sensor_bReadRxStatus
                                        (0431) ;
                                        (0432) ;  DESCRIPTION:
                                        (0433) ;     Reads the RX Status bits in the Control/Status register.
                                        (0434) ;-----------------------------------------------------------------------------
                                        (0435) ;
                                        (0436) ;  ARGUMENTS:
                                        (0437) ;     none.
                                        (0438) ;
                                        (0439) ;  RETURNS:
                                        (0440) ;     BYTE  bRXStatus - receive status data.  Use the following defined bits
                                        (0441) ;                       masks: RX_COMPLETE and RX_BUFFER_EMPTY
                                        (0442) ;           returned in A.
                                        (0443) ;
                                        (0444) ;  SIDE EFFECTS:
                                        (0445) ;    The A and X registers may be modified by this or future implementations
                                        (0446) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0447) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0448) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0449) ;    functions.
                                        (0450) ;
                                        (0451)  UART_Sensor_bReadRxStatus:
                                        (0452) _UART_Sensor_bReadRxStatus:
                                        (0453)  bUART_Sensor_ReadRxStatus:                      ; For backwards compatibility only
                                        (0454) _bUART_Sensor_ReadRxStatus:                      ; For backwards compatibility only
                                        (0455)    RAM_PROLOGUE RAM_USE_CLASS_1
03FF: 5D 2F    MOV   A,REG[0x2F]        (0456)    mov A,  REG[UART_Sensor_RX_CONTROL_REG]
                                        (0457)    RAM_EPILOGUE RAM_USE_CLASS_1
0401: 7F       RET                      (0458)    ret
                                        (0459) .ENDSECTION
                                        (0460) 
                                        (0461) 
                                        (0462) .SECTION
                                        (0463) ;-----------------------------------------------------------------------------
                                        (0464) ;  FUNCTION NAME: UART_Sensor_TxIntMode
                                        (0465) ;
                                        (0466) ;  DESCRIPTION:
                                        (0467) ;     This function is used to change the TX Interrupt mode.
                                        (0468) ;-----------------------------------------------------------------------------
                                        (0469) ;
                                        (0470) ;  ARGUMENTS:
                                        (0471) ;     A => Tx Interrupt mode
                                        (0472) ;             0 => Interrupt on TX_Reg_Empty  (Default)
                                        (0473) ;             1 => Interrupt on TX Complete
                                        (0474) ;
                                        (0475) ;  RETURNS:
                                        (0476) ;     none.
                                        (0477) ;
                                        (0478) ;  SIDE EFFECTS:
                                        (0479) ;    The A and X registers may be modified by this or future implementations
                                        (0480) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0481) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0482) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0483) ;    functions.
                                        (0484) ;
                                        (0485)  UART_Sensor_TxIntMode:
                                        (0486) _UART_Sensor_TxIntMode:
                                        (0487)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0488) 
0402: 21 01    AND   A,0x1              (0489)    and  A,UART_Sensor_INT_MODE_TX_COMPLETE
0404: 71 10    OR    F,0x10             
                                        (0490)    M8C_SetBank1
0406: 39 01    CMP   A,0x1              (0491)    cmp  A,UART_Sensor_INT_MODE_TX_COMPLETE
0408: A0 06    JZ    0x040F             (0492)    jz   .SetTxCmpMode
                                        (0493) 
040A: 41 28 EF AND   REG[0x28],0xEF     (0494)    and  reg[UART_Sensor_TX_FUNC_REG],0xEF        ; Set Interrupt on Tx_Reg_Empty
040D: 80 04    JMP   0x0412             (0495)    jmp  .TxIntMode_End
                                        (0496) 
                                        (0497) .SetTxCmpMode:                                       ; Set Interrupt on TX Complete
040F: 43 28 10 OR    REG[0x28],0x10     (0498)    or   reg[UART_Sensor_TX_FUNC_REG],0x10
0412: 70 EF    AND   F,0xEF             
                                        (0499) 
                                        (0500) .TxIntMode_End:
                                        (0501)    M8C_SetBank0
                                        (0502)    RAM_EPILOGUE RAM_USE_CLASS_1
0414: 7F       RET                      (0503)    ret
                                        (0504) .ENDSECTION
                                        (0505) 
                                        (0506)     
                                        (0507) .SECTION
                                        (0508) ;-----------------------------------------------------------------------------
                                        (0509) ;  FUNCTION NAME: UART_Sensor_IntCntl
                                        (0510) ;
                                        (0511) ;  DESCRIPTION:
                                        (0512) ;     This function is used to enable/disable the Rx and Tx interrupt.
                                        (0513) ;-----------------------------------------------------------------------------
                                        (0514) ;
                                        (0515) ;  ARGUMENTS:
                                        (0516) ;     A => Interrupt mask
                                        (0517) ;
                                        (0518) ;  RETURNS:
                                        (0519) ;     none.
                                        (0520) ;
                                        (0521) ;  SIDE EFFECTS:
                                        (0522) ;    The A and X registers may be modified by this or future implementations
                                        (0523) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0524) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0525) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0526) ;    functions.
                                        (0527) ;
                                        (0528) ;  THEORY of OPERATION or PROCEDURE:
                                        (0529) ;     Set or Clears the Tx/Rx user module interrupt enable mask bit in the TX
                                        (0530) ;     and RX block.
                                        (0531) ;
                                        (0532)  UART_Sensor_IntCntl:
                                        (0533) _UART_Sensor_IntCntl:
                                        (0534)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0535) 
0415: 08       PUSH  A                  (0536)    push A
0416: 21 01    AND   A,0x1              (0537)    and  A,UART_Sensor_ENABLE_RX_INT
0418: A0 06    JZ    0x041F             (0538)    jz   .DisRxInt
041A: 43 E1 08 OR    REG[0xE1],0x8      
                                        (0539)      ; Enable Rx Interrupt
                                        (0540)    M8C_EnableIntMask UART_Sensor_RX_INT_REG, UART_Sensor_RX_INT_MASK
041D: 80 04    JMP   0x0422             (0541)    jmp  .CheckTxInt
041F: 41 E1 F7 AND   REG[0xE1],0xF7     
                                        (0542) .DisRxInt:
                                        (0543)      ; Disable Rx Interrupt
                                        (0544)    M8C_DisableIntMask UART_Sensor_RX_INT_REG, UART_Sensor_RX_INT_MASK
                                        (0545) 
                                        (0546) .CheckTxInt:
0422: 18       POP   A                  (0547)    pop  A
0423: 21 02    AND   A,0x2              (0548)    and  A,UART_Sensor_ENABLE_TX_INT
0425: A0 06    JZ    0x042C             (0549)    jz   .DisTxInt
0427: 43 E1 04 OR    REG[0xE1],0x4      
                                        (0550)      ; Enable Tx Interrupt
                                        (0551)    M8C_EnableIntMask UART_Sensor_TX_INT_REG, UART_Sensor_TX_INT_MASK
042A: 80 04    JMP   0x042F             (0552)    jmp  .End_IntCntl
042C: 41 E1 FB AND   REG[0xE1],0xFB     
                                        (0553) .DisTxInt:
                                        (0554)      ; Disable Tx Interrupt
                                        (0555)    M8C_DisableIntMask UART_Sensor_TX_INT_REG, UART_Sensor_TX_INT_MASK
                                        (0556) 
                                        (0557) .End_IntCntl:
                                        (0558)    RAM_EPILOGUE RAM_USE_CLASS_1
042F: 7F       RET                      (0559)    ret
                                        (0560) .ENDSECTION
                                        (0561) 
                                        (0562) 
                                        (0563) ;=============================================================================
                                        (0564) ;=============================================================================
                                        (0565) ;
                                        (0566) ;     High-Level Commands
                                        (0567) ;
                                        (0568) ;=============================================================================
                                        (0569) ;=============================================================================
                                        (0570) 
                                        (0571) 
                                        (0572) ;-----------------------------------------------------------------------------
                                        (0573) ;  FUNCTION NAME: UART_Sensor_PutSHexByte
                                        (0574) ;
                                        (0575) ;  DESCRIPTION:
                                        (0576) ;     Print a byte in Hex (two characters) to the UART Tx
                                        (0577) ;-----------------------------------------------------------------------------
                                        (0578) ;
                                        (0579) ;  ARGUMENTS:
                                        (0580) ;     A  => (BYTE) Data/char to be printed
                                        (0581) ;
                                        (0582) ;  RETURNS:
                                        (0583) ;     none.
                                        (0584) ;
                                        (0585) ;  SIDE EFFECTS:
                                        (0586) ;    The A and X registers may be modified by this or future implementations
                                        (0587) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0588) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0589) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0590) ;    functions.
                                        (0591) ;
                                        (0592) .LITERAL
                                        (0593) UART_Sensor_HEX_STR:
                                        (0594)      DS    "0123456789ABCDEF"
                                        (0595) .ENDLITERAL
                                        (0596) 
                                        (0597) .SECTION
                                        (0598)  UART_Sensor_PutSHexByte:
                                        (0599) _UART_Sensor_PutSHexByte:
                                        (0600)    RAM_PROLOGUE RAM_USE_CLASS_1
0440: 08       PUSH  A                  (0601)    push  A                             ; Save lower nibble
0441: 67       ASR   A                  (0602)    asr   A                             ; Shift high nibble to right
0442: 67       ASR   A                  (0603)    asr   A
0443: 67       ASR   A                  (0604)    asr   A
0444: 67       ASR   A                  (0605)    asr   A
0445: 21 0F    AND   A,0xF              (0606)    and   A,0Fh                         ; Mask off nibble
0447: FF E7    INDEX 0x0430             (0607)    index UART_Sensor_HEX_STR           ; Get Hex value
0449: 90 0F    CALL  _UART_Sensor_PutChar(0608)    call  UART_Sensor_PutChar           ; Write data to screen
044B: 18       POP   A                  (0609)    pop   A                             ; Restore value
044C: 21 0F    AND   A,0xF              (0610)    and   A,0Fh                         ; Mask off lower nibble
044E: FF E0    INDEX 0x0430             (0611)    index UART_Sensor_HEX_STR           ; Get Hex value
0450: 90 08    CALL  _UART_Sensor_PutChar(0612)    call  UART_Sensor_PutChar           ; Write data to screen
                                        (0613)    RAM_EPILOGUE RAM_USE_CLASS_1
0452: 7F       RET                      (0614)    ret
                                        (0615) .ENDSECTION
                                        (0616) 
                                        (0617) 
                                        (0618) .SECTION
                                        (0619) ;-----------------------------------------------------------------------------
                                        (0620) ;  FUNCTION NAME: UART_Sensor_PutSHexInt
                                        (0621) ;
                                        (0622) ;  DESCRIPTION:
                                        (0623) ;     Print an Int in Hex (four characters) to UART Tx
                                        (0624) ;-----------------------------------------------------------------------------
                                        (0625) ;
                                        (0626) ;  ARGUMENTS:
                                        (0627) ;     Pointer to string
                                        (0628) ;     A  => ASB of Int
                                        (0629) ;     X  => MSB of Int
                                        (0630) ;
                                        (0631) ;  RETURNS:
                                        (0632) ;     none.
                                        (0633) ;
                                        (0634) ;  SIDE EFFECTS:
                                        (0635) ;    The A and X registers may be modified by this or future implementations
                                        (0636) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0637) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0638) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0639) ;    functions.
                                        (0640) ;
                                        (0641) 
                                        (0642)  UART_Sensor_PutSHexInt:
                                        (0643) _UART_Sensor_PutSHexInt:
                                        (0644)    RAM_PROLOGUE RAM_USE_CLASS_1
0453: 4B       SWAP  A,X                (0645)    swap  A,X
0454: 9F EA    CALL  _UART_Sensor_PutSHexByte(0646)    call  UART_Sensor_PutSHexByte       ; Print MSB
0456: 5B       MOV   A,X                (0647)    mov   A,X                           ; Move LSB into position
0457: 9F E7    CALL  _UART_Sensor_PutSHexByte(0648)    call  UART_Sensor_PutSHexByte       ; Print LSB
                                        (0649)    RAM_EPILOGUE RAM_USE_CLASS_1
0459: 7F       RET                      (0650)    ret
045A: 49 2B 10 TST   REG[0x2B],0x10     
045D: AF FC    JZ    _UART_Sensor_PutChar
045F: 60 29    MOV   REG[0x29],A        
                                        (0651) .ENDSECTION
                                        (0652) 
                                        (0653) 
                                        (0654) .SECTION
                                        (0655) ;-----------------------------------------------------------------------------
                                        (0656) ;  FUNCTION NAME: UART_Sensor_PutChar
                                        (0657) ;
                                        (0658) ;  DESCRIPTION:
                                        (0659) ;     Send character out through UART TX port.
                                        (0660) ;-----------------------------------------------------------------------------
                                        (0661) ;
                                        (0662) ;  ARGUMENTS:
                                        (0663) ;     A has Character to send to UART Tx Port
                                        (0664) ;
                                        (0665) ;  RETURNS:
                                        (0666) ;     none
                                        (0667) ;
                                        (0668) ;  SIDE EFFECTS:
                                        (0669) ;    The A and X registers may be modified by this or future implementations
                                        (0670) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0671) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0672) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0673) ;    functions.
                                        (0674) ;
                                        (0675) 
                                        (0676)    macro InLinePutChar( Source )
                                        (0677) .BufEmptyWaitLoop:
                                        (0678)    tst REG[UART_Sensor_TX_CONTROL_REG], UART_Sensor_TX_BUFFER_EMPTY     ; Check Tx Status
                                        (0679)    jz  .BufEmptyWaitLoop
                                        (0680)    mov REG[UART_Sensor_TX_BUFFER_REG], @Source     ; Write data to Tx Port
                                        (0681)    endm
                                        (0682) 
                                        (0683)  UART_Sensor_PutChar:
                                        (0684) _UART_Sensor_PutChar:
                                        (0685)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0686)    InLinePutChar A
                                        (0687)    RAM_EPILOGUE RAM_USE_CLASS_1
0461: 7F       RET                      (0688)    ret
                                        (0689) .ENDSECTION
                                        (0690) 
                                        (0691) 
                                        (0692) .SECTION
                                        (0693) ;-----------------------------------------------------------------------------
                                        (0694) ;  FUNCTION NAME: UART_Sensor_cGetChar
                                        (0695) ;
                                        (0696) ;  DESCRIPTION:
                                        (0697) ;     Read character from UART RX port.
                                        (0698) ;-----------------------------------------------------------------------------
                                        (0699) ;
                                        (0700) ;  ARGUMENTS:
                                        (0701) ;      none
                                        (0702) ;
                                        (0703) ;  RETURNS:
                                        (0704) ;     char that is returned from UART
                                        (0705) ;
                                        (0706) ;  SIDE EFFECTS:
                                        (0707) ;    The A and X registers may be modified by this or future implementations
                                        (0708) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0709) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0710) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0711) ;    functions.
                                        (0712) ;
                                        (0713) ;    Program flow will stay in this function until a character is received.
                                        (0714) ;    If the watchdog timer is used, care must be taken to make sure that
                                        (0715) ;    the delay between characters is less than the watchdog timeout.
                                        (0716) ;
                                        (0717)  UART_Sensor_cGetChar:
                                        (0718) _UART_Sensor_cGetChar:
                                        (0719)    RAM_PROLOGUE RAM_USE_CLASS_1
0462: 49 2F 08 TST   REG[0x2F],0x8      (0720)    tst REG[UART_Sensor_RX_CONTROL_REG],UART_Sensor_RX_REG_FULL    ; Check if a character is ready
0465: AF FC    JZ    _UART_Sensor_cGetChar(0721)    jz  UART_Sensor_cGetChar                              ; If not loop
0467: 5D 2E    MOV   A,REG[0x2E]        (0722)    mov A, REG[UART_Sensor_RX_BUFFER_REG]                 ; Get character
                                        (0723)    RAM_EPILOGUE RAM_USE_CLASS_1
0469: 7F       RET                      (0724)    ret
                                        (0725) .ENDSECTION
                                        (0726) 
                                        (0727) 
                                        (0728) .SECTION
                                        (0729) ;-----------------------------------------------------------------------------
                                        (0730) ;  FUNCTION NAME: UART_Sensor_cReadChar
                                        (0731) ;
                                        (0732) ;  DESCRIPTION:
                                        (0733) ;     Read character from UART RX port.
                                        (0734) ;-----------------------------------------------------------------------------
                                        (0735) ;
                                        (0736) ;  ARGUMENTS:
                                        (0737) ;      none
                                        (0738) ;
                                        (0739) ;  RETURNS:
                                        (0740) ;     char that is returned from UART
                                        (0741) ;
                                        (0742) ;  SIDE EFFECTS:
                                        (0743) ;    The A and X registers may be modified by this or future implementations
                                        (0744) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0745) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0746) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0747) ;    functions.
                                        (0748) ;
                                        (0749) ;    A valid 0x00 character will be ignored, since a 0x00 return value
                                        (0750) ;    implies a valid character or an error condition occured.
                                        (0751) ;
                                        (0752)  UART_Sensor_cReadChar:
                                        (0753) _UART_Sensor_cReadChar:
                                        (0754)    RAM_PROLOGUE RAM_USE_CLASS_1
046A: 5D 2F    MOV   A,REG[0x2F]        (0755)    mov  A,REG[UART_Sensor_RX_CONTROL_REG]                  ; Get Status of RX
046C: 08       PUSH  A                  (0756)    push A
046D: 21 08    AND   A,0x8              (0757)    and  A,UART_Sensor_RX_COMPLETE                          ; Check if a character is ready
046F: B0 04    JNZ   0x0474             (0758)    jnz  .RX_DATA_RDY                                       ; Data Ready go read it.
0471: 18       POP   A                  (0759)    pop  A
0472: 80 0B    JMP   0x047E             (0760)    jmp  .RX_NO_VALID_CHAR
                                        (0761) 
                                        (0762) .RX_DATA_RDY:
0474: 5D 2E    MOV   A,REG[0x2E]        (0763)    mov  A,REG[UART_Sensor_RX_BUFFER_REG ]          
0476: 4B       SWAP  A,X                (0764)    swap A,X                                                ; determine if data is valid
                                        (0765) 
0477: 18       POP   A                  (0766)    pop  A                                                  ; Check for errors
0478: 21 A0    AND   A,0xA0             (0767)    and  A,(UART_Sensor_RX_PARITY_ERROR | UART_Sensor_RX_FRAMING_ERROR)
047A: B0 03    JNZ   0x047E             (0768)    jnz  .RX_NO_VALID_CHAR                                  ; No character, exit
047C: 4B       SWAP  A,X                (0769)    swap A,X                                                ; Put data in A and exit
                                        (0770)    RAM_EPILOGUE RAM_USE_CLASS_1
047D: 7F       RET                      (0771)    ret
                                        (0772) 
                                        (0773) .RX_NO_VALID_CHAR:
047E: 50 00    MOV   A,0x0              (0774)    mov A,0x00                                              ; Zero out character
                                        (0775) 
                                        (0776)  End_UART_Sensor_cReadChar:
                                        (0777)    RAM_EPILOGUE RAM_USE_CLASS_1
0480: 7F       RET                      (0778)    ret
                                        (0779) .ENDSECTION
                                        (0780) 
                                        (0781) 
                                        (0782) .SECTION
                                        (0783) ;-----------------------------------------------------------------------------
                                        (0784) ;  FUNCTION NAME: UART_Sensor_iReadChar
                                        (0785) ;
                                        (0786) ;  WARNING WARNING WARNING  Negative return value not correct!!!!  We may want
                                        (0787) ;  to just set a value in the upper byte if error conditions exists.
                                        (0788) ;
                                        (0789) ;  DESCRIPTION:
                                        (0790) ;     Read character from UART RX port.
                                        (0791) ;-----------------------------------------------------------------------------
                                        (0792) ;
                                        (0793) ;  ARGUMENTS:
                                        (0794) ;      none
                                        (0795) ;
                                        (0796) ;  RETURNS:
                                        (0797) ;     An integer value is returned.  A negative value inplies and error
                                        (0798) ;     condition, a positive value between 0 and 255 is the return character.
                                        (0799) ;
                                        (0800) ;     Error Codes:
                                        (0801) ;        0x80CC    Parity Error
                                        (0802) ;        0x40CC    Overrun Error
                                        (0803) ;        0x20CC    Framing Error
                                        (0804) ;        0x01CC    No Data available
                                        (0805) ;
                                        (0806) ;  SIDE EFFECTS:
                                        (0807) ;    The A and X registers may be modified by this or future implementations
                                        (0808) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0809) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0810) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0811) ;    functions.
                                        (0812) ;
                                        (0813)  UART_Sensor_iReadChar:
                                        (0814) _UART_Sensor_iReadChar:
                                        (0815)    RAM_PROLOGUE RAM_USE_CLASS_1
0481: 5D 2F    MOV   A,REG[0x2F]        (0816)    mov  A,REG[UART_Sensor_RX_CONTROL_REG]                  ; Get Status of RX
                                        (0817)                                                            ; Mask only errors and data ready
0483: 21 E8    AND   A,0xE8             (0818)    and  A,(UART_Sensor_RX_ERROR|UART_Sensor_RX_REG_FULL)
0485: 08       PUSH  A                  (0819)    push A
0486: 21 08    AND   A,0x8              (0820)    and  A,UART_Sensor_RX_COMPLETE                          ; Check if a character is ready
0488: B0 07    JNZ   0x0490             (0821)    jnz  .RX_GET_DATA                                       ; Data Ready go read it.
048A: 18       POP   A                  (0822)    pop  A
048B: 29 01    OR    A,0x1              (0823)    or   A,UART_Sensor_RX_NO_DATA                           ; Add no data flag
048D: 4B       SWAP  A,X                (0824)    swap A,X
048E: 80 07    JMP   0x0496             (0825)    jmp  End_UART_Sensor_iReadChar
                                        (0826) 
                                        (0827) .RX_GET_DATA:
0490: 18       POP   A                  (0828)    pop  A
0491: 21 E0    AND   A,0xE0             (0829)    and  A,UART_Sensor_RX_ERROR
0493: 4B       SWAP  A,X                (0830)    swap A,X
0494: 5D 2E    MOV   A,REG[0x2E]        (0831)    mov  A,REG[UART_Sensor_RX_BUFFER_REG ]                  ; Read data first, then
                                        (0832)                                                            ; determine if data is valid
                                        (0833) 
                                        (0834)  End_UART_Sensor_iReadChar:
                                        (0835)    RAM_EPILOGUE RAM_USE_CLASS_1
0496: 7F       RET                      (0836)    ret
0497: 70 BF    AND   F,0xBF             
0499: 60 D3    MOV   REG[0xD3],A        
                                        (0837) .ENDSECTION
                                        (0838) 
                                        (0839) 
                                        (0840) .SECTION
                                        (0841) ;-----------------------------------------------------------------------------
                                        (0842) ;  FUNCTION NAME: UART_Sensor_PutString
                                        (0843) ;
                                        (0844) ;  DESCRIPTION:
                                        (0845) ;     Send String out through UART TX port.
                                        (0846) ;-----------------------------------------------------------------------------
                                        (0847) ;
                                        (0848) ;  ARGUMENTS:
                                        (0849) ;     Pointer to String
                                        (0850) ;     A has MSB of string address
                                        (0851) ;     X has LSB of string address
                                        (0852) ;
                                        (0853) ;  RETURNS:
                                        (0854) ;     none
                                        (0855) ;
                                        (0856) ;  SIDE EFFECTS:
                                        (0857) ;    The A and X registers may be modified by this or future implementations
                                        (0858) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0859) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0860) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0861) ;    functions.
                                        (0862) ;          
                                        (0863) ;    Currently only the page pointer registers listed below are modified: 
                                        (0864) ;          IDX_PP
                                        (0865) ;
                                        (0866)  UART_Sensor_PutString:
                                        (0867) _UART_Sensor_PutString:
                                        (0868)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0869)    RAM_SETPAGE_IDX A
                                        (0870) .PutStringLoop:
049B: 52 00    MOV   A,[X+0]            (0871)    mov   A,[X]                                   ; Get value pointed to by X
049D: A0 06    JZ    0x04A4             (0872)    jz    End_PutString                           ; Check for end of string
049F: 9F B9    CALL  _UART_Sensor_PutChar(0873)    call  UART_Sensor_PutChar                     ; Send character to Tx port
04A1: 75       INC   X                  (0874)    inc   X                                       ; Advance pointer to next character
04A2: 8F F8    JMP   0x049B             (0875)    jmp   .PutStringLoop                          ; Get next character
04A4: 70 3F    AND   F,0x3F             
04A6: 71 C0    OR    F,0xC0             
                                        (0876) 
                                        (0877) End_PutString:
                                        (0878)    RAM_EPILOGUE RAM_USE_CLASS_3
04A8: 7F       RET                      (0879)    ret
04A9: 70 BF    AND   F,0xBF             
04AB: 62 D3 03 MOV   REG[0xD3],0x3      
                                        (0880) .ENDSECTION
                                        (0881)     
                                        (0882) .SECTION
                                        (0883) ;-----------------------------------------------------------------------------
                                        (0884) ;  FUNCTION NAME: UART_Sensor_Write
                                        (0885) ;
                                        (0886) ;  DESCRIPTION:
                                        (0887) ;     Send String of length X to serial port
                                        (0888) ;-----------------------------------------------------------------------------
                                        (0889) ;
                                        (0890) ;  ARGUMENTS:
                                        (0891) ;     Pointer to String
                                        (0892) ;     [SP-5] Count of characters to send
                                        (0893) ;     [SP-4] has MSB of string address
                                        (0894) ;     [SP-3] has LSB of string address
                                        (0895) ;
                                        (0896) ;  RETURNS:
                                        (0897) ;     none
                                        (0898) ;
                                        (0899) ;  SIDE EFFECTS:
                                        (0900) ;    The A and X registers may be modified by this or future implementations
                                        (0901) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0902) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0903) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0904) ;    functions.
                                        (0905) ;          
                                        (0906) ;    Currently only the page pointer registers listed below are modified: 
                                        (0907) ;          IDX_PP
                                        (0908) ;
                                        (0909) CNT_LEN:    equ -5                               ; Length of data to send
                                        (0910) STR_MSB:    equ -4                               ; MSB pointer of string 
                                        (0911) STR_LSB:    equ -3                               ; LSB pointer of string 
                                        (0912) 
                                        (0913)  UART_Sensor_Write:
                                        (0914) _UART_Sensor_Write:
                                        (0915)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0916)    RAM_SETPAGE_IDX2STK                           ; Refer indexed addrs to the stack
04AE: 4F       MOV   X,SP               (0917)    mov   X, SP                                   ; Establish the frame pointer 
                                        (0918) 
                                        (0919) .NextByteLoop:
04AF: 52 FB    MOV   A,[X-5]            (0920)    mov   A, [X+CNT_LEN]                          ; End of the string?
04B1: A0 1A    JZ    0x04CC             (0921)    jz    .End_Write                              ;   Yes, prepare to exit
04B3: 7B FB    DEC   [X-5]              (0922)    dec   [X+CNT_LEN]                             ; Decrement counter
                                        (0923) 
                                        (0924)    IF SYSTEM_LARGE_MEMORY_MODEL
04B5: 52 FC    MOV   A,[X-4]            (0925)    mov   A, [X+STR_MSB]                          ; Load pointer to char to send
                                        (0926)    ENDIF
                                        (0927) 
04B7: 59 FD    MOV   X,[X-3]            (0928)    mov   X, [X+STR_LSB]                          ; Load pointer to char to send
04B9: 60 D3    MOV   REG[0xD3],A        
                                        (0929)    RAM_SETPAGE_IDX A                             ; switch index pages
04BB: 52 00    MOV   A,[X+0]            (0930)    mov   A, [X]                                  ; Grab the data
04BD: 49 2B 10 TST   REG[0x2B],0x10     
04C0: AF FC    JZ    0x04BD             
04C2: 60 29    MOV   REG[0x29],A        
                                        (0931)    InLinePutChar A                               ; Put data in empty TX buf reg
04C4: 4F       MOV   X,SP               (0932)    mov   X, SP                                   ; Recover frame pointer
04C5: 62 D3 03 MOV   REG[0xD3],0x3      
                                        (0933)    RAM_SETPAGE_IDX2STK                           ; Prepare for stack access
04C8: 77 FD    INC   [X-3]              (0934)    inc   [X+STR_LSB]                             ; Point to next byte, but do not
04CA: 8F E4    JMP   0x04AF             (0935)    jmp   .NextByteLoop                           ;    cross RAM page boundary!
04CC: 70 3F    AND   F,0x3F             
04CE: 71 C0    OR    F,0xC0             
                                        (0936) 
                                        (0937) .End_Write:
                                        (0938)    RAM_EPILOGUE RAM_USE_CLASS_3
04D0: 7F       RET                      (0939)    ret
                                        (0940) .ENDSECTION
                                        (0941)     
                                        (0942) 
                                        (0943) .SECTION
                                        (0944) ;-----------------------------------------------------------------------------
                                        (0945) ;  FUNCTION NAME: UART_Sensor_CWrite
                                        (0946) ;
                                        (0947) ;             WARNING WARNING NOT COMPLETE
                                        (0948) ;
                                        (0949) ;  DESCRIPTION:
                                        (0950) ;     Send String of length X to serial port
                                        (0951) ;-----------------------------------------------------------------------------
                                        (0952) ;
                                        (0953) ;  ARGUMENTS:
                                        (0954) ;     [SP-4] MSB of Count of character to send
                                        (0955) ;     [SP-3] LSB of Count of character to send
                                        (0956) ;     [SP-2] has MSB of string address
                                        (0957) ;     [SP-1] has LSB of string address
                                        (0958) ;
                                        (0959) ;  RETURNS:
                                        (0960) ;     none
                                        (0961) ;
                                        (0962) ;  SIDE EFFECTS:
                                        (0963) ;    The A and X registers may be modified by this or future implementations
                                        (0964) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0965) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0966) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0967) ;    functions.
                                        (0968) ;
                                        (0969) CLEN_MSB:   equ -6           ; MSB Length of data to send
                                        (0970) CLEN_LSB:   equ -5           ; LSB Length of data to send
                                        (0971) CSTR_MSB:   equ -4           ; MSB pointer of string
                                        (0972) CSTR_LSB:   equ -3           ; LSB pointer of string
                                        (0973) 
                                        (0974)  UART_Sensor_CWrite:
                                        (0975) _UART_Sensor_CWrite:
                                        (0976)    RAM_PROLOGUE RAM_USE_CLASS_2
04D1: 4F       MOV   X,SP               (0977)    mov   X,SP
                                        (0978) .CW_Loop:
04D2: 3D FA 00 CMP   [X-6],0x0          (0979)    cmp   [X+CLEN_MSB],0x00                  ; Check for zero counter
04D5: B0 06    JNZ   0x04DC             (0980)    jnz   .CW_WRITEIT
04D7: 3D FB 00 CMP   [X-5],0x0          (0981)    cmp   [X+CLEN_LSB],0x00
04DA: A0 1D    JZ    0x04F8             (0982)    jz    .End_CWrite                        ; Leave if done
                                        (0983) 
                                        (0984) .CW_WRITEIT:                                
04DC: 10       PUSH  X                  (0985)    push  X                                  ; Save frame pointer
04DD: 52 FC    MOV   A,[X-4]            (0986)    mov   A,[X+CSTR_MSB]
04DF: 59 FD    MOV   X,[X-3]            (0987)    mov   X,[X+CSTR_LSB]
04E1: 28       ROMX                     (0988)    romx                                     ; Get character from ROM
04E2: 49 2B 10 TST   REG[0x2B],0x10     
04E5: AF FC    JZ    0x04E2             
04E7: 60 29    MOV   REG[0x29],A        
                                        (0989)    InLinePutChar A                          ; Put data in empty TX buf reg
04E9: 20       POP   X                  (0990)    pop   X                                  ; Restore frame pointer
04EA: 07 FD 01 ADD   [X-3],0x1          (0991)    add   [X+CSTR_LSB],1                     ; Increment the string pointer
04ED: 0F FC 00 ADC   [X-4],0x0          (0992)    adc   [X+CSTR_MSB],0
04F0: 17 FB 01 SUB   [X-5],0x1          (0993)    sub   [X+CLEN_LSB],0x01                  ; Dec the counter
04F3: 1F FA 00 SBB   [X-6],0x0          (0994)    sbb   [X+CLEN_MSB],0x00
04F6: 8F DB    JMP   0x04D2             (0995)    jmp   .CW_Loop
04F8: 70 3F    AND   F,0x3F             
04FA: 71 C0    OR    F,0xC0             
                                        (0996) 
                                        (0997) .End_CWrite:
                                        (0998)    RAM_EPILOGUE RAM_USE_CLASS_2
04FC: 7F       RET                      (0999)    ret
                                        (1000) .ENDSECTION
                                        (1001) 
                                        (1002) 
                                        (1003) .SECTION
                                        (1004) ;-----------------------------------------------------------------------------
                                        (1005) ;  FUNCTION NAME: UART_Sensor_CPutString
                                        (1006) ;
                                        (1007) ;  DESCRIPTION:
                                        (1008) ;     Send String out through UART TX port.
                                        (1009) ;-----------------------------------------------------------------------------
                                        (1010) ;
                                        (1011) ;  ARGUMENTS:
                                        (1012) ;     Pointer to String
                                        (1013) ;     A has MSB of string address
                                        (1014) ;     X has LSB of string address
                                        (1015) ;
                                        (1016) ;  RETURNS:
                                        (1017) ;     none
                                        (1018) ;
                                        (1019) ;  SIDE EFFECTS:
                                        (1020) ;    The A and X registers may be modified by this or future implementations
                                        (1021) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1022) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1023) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1024) ;    functions.
                                        (1025) ;
                                        (1026)  UART_Sensor_CPutString:
                                        (1027) _UART_Sensor_CPutString:
                                        (1028)    RAM_PROLOGUE RAM_USE_CLASS_1
04FD: 08       PUSH  A                  (1029)    push  A                                       ; Store ROM pointer
04FE: 10       PUSH  X                  (1030)    push  X
04FF: 28       ROMX                     (1031)    romx                                          ; Get character from ROM
0500: A0 0B    JZ    0x050C             (1032)    jz    .End_CPutString
0502: 9F 56    CALL  _UART_Sensor_PutChar(1033)    call  UART_Sensor_PutChar                     ; Print character
0504: 20       POP   X                  (1034)    pop   X
0505: 18       POP   A                  (1035)    pop   A
0506: 75       INC   X                  (1036)    inc   X                                       ; Inc LSB of pointer
0507: DF F5    JNC   _UART_Sensor_CPutString(1037)    jnc   UART_Sensor_CPutString                  ; Check for carry
0509: 74       INC   A                  (1038)    inc   A                                       ; Inc MSB of pointer
050A: 8F F2    JMP   _UART_Sensor_CPutString(1039)    jmp   UART_Sensor_CPutString
                                        (1040) 
                                        (1041) 
                                        (1042) .End_CPutString:
050C: 38 FE    ADD   SP,0xFE            (1043)    add   SP, -2
                                        (1044)    RAM_EPILOGUE RAM_USE_CLASS_1
050E: 7F       RET                      (1045)    ret
                                        (1046) .ENDSECTION
                                        (1047) 
                                        (1048) 
                                        (1049) .SECTION
                                        (1050) ;-----------------------------------------------------------------------------
                                        (1051) ;  FUNCTION NAME: UART_Sensor_PutCRLF
                                        (1052) ;
                                        (1053) ;  DESCRIPTION:
                                        (1054) ;     Send a CR and LF
                                        (1055) ;-----------------------------------------------------------------------------
                                        (1056) ;
                                        (1057) ;  ARGUMENTS:
                                        (1058) ;     none.
                                        (1059) ;
                                        (1060) ;  RETURNS:
                                        (1061) ;     none.
                                        (1062) ;
                                        (1063) ;  SIDE EFFECTS:
                                        (1064) ;    The A and X registers may be modified by this or future implementations
                                        (1065) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1066) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1067) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1068) ;    functions.
                                        (1069) ;
                                        (1070)  UART_Sensor_PutCRLF:
                                        (1071) _UART_Sensor_PutCRLF:
                                        (1072)    RAM_PROLOGUE RAM_USE_CLASS_1
050F: 50 0D    MOV   A,0xD              (1073)    mov  A,0x0D                        ; Send CR
0511: 9F 47    CALL  _UART_Sensor_PutChar(1074)    call UART_Sensor_PutChar
0513: 50 0A    MOV   A,0xA              (1075)    mov  A,0x0A                        ; Send LF
0515: 9F 43    CALL  _UART_Sensor_PutChar(1076)    call UART_Sensor_PutChar
                                        (1077)    RAM_EPILOGUE RAM_USE_CLASS_1
0517: 7F       RET                      (1078)    ret
                                        (1079) .ENDSECTION
                                        (1080) 
                                        (1081) 
                                        (1082) IF (UART_Sensor_RXBUF_ENABLE)
                                        (1083) ;=============================================================================
                                        (1084) ;=============================================================================
                                        (1085) ;
                                        (1086) ;     Command Buffer commands
                                        (1087) ;
                                        (1088) ;=============================================================================
                                        (1089) ;=============================================================================
                                        (1090) 
                                        (1091) .SECTION
                                        (1092) ;-----------------------------------------------------------------------------
                                        (1093) ;  FUNCTION NAME: UART_Sensor_CmdReset
                                        (1094) ;
                                        (1095) ;  DESCRIPTION:
                                        (1096) ;     Reset command string and status flags
                                        (1097) ;-----------------------------------------------------------------------------
                                        (1098) ;
                                        (1099) ;  ARGUMENTS:
                                        (1100) ;     none.
                                        (1101) ;
                                        (1102) ;  RETURNS:
                                        (1103) ;     none.
                                        (1104) ;
                                        (1105) ;  SIDE EFFECTS:
                                        (1106) ;    The A and X registers may be modified by this or future implementations
                                        (1107) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1108) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1109) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1110) ;    functions.
                                        (1111) ;          
                                        (1112) ;    Currently only the page pointer registers listed below are modified: 
                                        (1113) ;          CUR_PP
                                        (1114) ;
                                        (1115) ;  THEORY of OPERATION or PROCEDURE:
                                        (1116) ;     Clear the command buffer, command counter, and flag.
                                        (1117) ;
                                        (1118)  UART_Sensor_CmdReset:
                                        (1119) _UART_Sensor_CmdReset:
                                        (1120)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1121)    RAM_SETPAGE_CUR >UART_Sensor_aRxBuffer
                                        (1122)    mov [UART_Sensor_aRxBuffer], 0x00
                                        (1123)    RAM_SETPAGE_CUR >UART_Sensor_bRxCnt
                                        (1124)    mov [UART_Sensor_bRxCnt], 0x00
                                        (1125)    and [UART_Sensor_fStatus], 0x00
                                        (1126)    RAM_SETPAGE_CUR >ptrParam
                                        (1127)    mov [ptrParam],0x00
                                        (1128)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1129)    ret
                                        (1130) .ENDSECTION
                                        (1131) 
                                        (1132) 
                                        (1133) .SECTION
                                        (1134) ;-----------------------------------------------------------------------------
                                        (1135) ;  FUNCTION NAME: UART_Sensor_bCmdCheck
                                        (1136) ;
                                        (1137) ;  DESCRIPTION:
                                        (1138) ;     Check to see if valid command in buffer.
                                        (1139) ;-----------------------------------------------------------------------------
                                        (1140) ;
                                        (1141) ;  ARGUMENTS:
                                        (1142) ;     none.
                                        (1143) ;
                                        (1144) ;  RETURNS:
                                        (1145) ;     BYTE  fStatus - Status of command receive buffer.
                                        (1146) ;                     Returns non-zero value in A if command is valid.
                                        (1147) ;
                                        (1148) ;  SIDE EFFECTS:
                                        (1149) ;    The A and X registers may be modified by this or future implementations
                                        (1150) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1151) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1152) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1153) ;    functions.
                                        (1154) ;          
                                        (1155) ;    Currently only the page pointer registers listed below are modified: 
                                        (1156) ;          CUR_PP
                                        (1157) ;
                                        (1158) ;  THEORY of OPERATION or PROCEDURE:
                                        (1159) ;     Read the status and control register.
                                        (1160) ;
                                        (1161)  UART_Sensor_bCmdCheck:
                                        (1162) _UART_Sensor_bCmdCheck:
                                        (1163)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1164)    RAM_SETPAGE_CUR >UART_Sensor_fStatus
                                        (1165)    mov A,  [UART_Sensor_fStatus]
                                        (1166)    and A, UART_Sensor_RX_BUF_CMDTERM             ; Mask off Command status
                                        (1167)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1168)    ret
                                        (1169) .ENDSECTION
                                        (1170)     
                                        (1171) 
                                        (1172) .SECTION
                                        (1173) ;-----------------------------------------------------------------------------
                                        (1174) ;  FUNCTION NAME: UART_Sensor_bErrCheck
                                        (1175) ;
                                        (1176) ;  DESCRIPTION:
                                        (1177) ;     Check to see if an error has occured since last CmdReset
                                        (1178) ;-----------------------------------------------------------------------------
                                        (1179) ;
                                        (1180) ;  ARGUMENTS:
                                        (1181) ;     none.
                                        (1182) ;
                                        (1183) ;  RETURNS:
                                        (1184) ;     BYTE  fStatus - Status of command receive buffer.
                                        (1185) ;                     Returns non-zero value in A if command is valid.
                                        (1186) ;           0x80 => Parity Error
                                        (1187) ;           0x40 => OverRun Error
                                        (1188) ;           0x20 => Framing Error
                                        (1189) ;           0x10 => Software Buffer OverRun
                                        (1190) ;
                                        (1191) ;  SIDE EFFECTS:
                                        (1192) ;    The A and X registers may be modified by this or future implementations
                                        (1193) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1194) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1195) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1196) ;    functions.
                                        (1197) ;          
                                        (1198) ;    Currently only the page pointer registers listed below are modified: 
                                        (1199) ;          CUR_PP
                                        (1200) ;     Error Status is clear when read.
                                        (1201) ;
                                        (1202) ;  THEORY of OPERATION or PROCEDURE:
                                        (1203) ;     Read RX buffer error status and clear status
                                        (1204) ;
                                        (1205)  UART_Sensor_bErrCheck:
                                        (1206) _UART_Sensor_bErrCheck:
                                        (1207)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1208)    RAM_SETPAGE_CUR >UART_Sensor_fStatus
                                        (1209)    mov A,  [UART_Sensor_fStatus]
                                        (1210)    and A, UART_Sensor_RX_BUF_ERROR               ; Mask off Error status
                                        (1211)    and [UART_Sensor_fStatus], ~UART_Sensor_RX_BUF_ERROR
                                        (1212)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1213)    ret
                                        (1214) .ENDSECTION
                                        (1215) 
                                        (1216) .SECTION
                                        (1217) ;-----------------------------------------------------------------------------
                                        (1218) ;  FUNCTION NAME: UART_Sensor_bCmdLength
                                        (1219) ;
                                        (1220) ;  DESCRIPTION:
                                        (1221) ;     Get length of command string
                                        (1222) ;-----------------------------------------------------------------------------
                                        (1223) ;
                                        (1224) ;  ARGUMENTS:
                                        (1225) ;     none.
                                        (1226) ;
                                        (1227) ;  RETURNS:
                                        (1228) ;     BYTE  bRxCnt    Returns the command length in A.
                                        (1229) ;
                                        (1230) ;  SIDE EFFECTS:
                                        (1231) ;    The A and X registers may be modified by this or future implementations
                                        (1232) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1233) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1234) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1235) ;    functions.
                                        (1236) ;          
                                        (1237) ;    Currently only the page pointer registers listed below are modified: 
                                        (1238) ;          CUR_PP
                                        (1239) ;
                                        (1240)  UART_Sensor_bCmdLength:
                                        (1241) _UART_Sensor_bCmdLength:
                                        (1242)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1243)    RAM_SETPAGE_CUR >UART_Sensor_bRxCnt
                                        (1244)    mov A,  [UART_Sensor_bRxCnt]
                                        (1245)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1246)    ret
                                        (1247) .ENDSECTION
                                        (1248) 
                                        (1249) 
                                        (1250) .SECTION
                                        (1251) ;-----------------------------------------------------------------------------
                                        (1252) ;  FUNCTION NAME: UART_Sensor_szGetParam
                                        (1253) ;
                                        (1254) ;  DESCRIPTION:
                                        (1255) ;      Return next parameter from UART_Sensor Rx buffer
                                        (1256) ;-----------------------------------------------------------------------------
                                        (1257) ;
                                        (1258) ;  ARGUMENTS:  none
                                        (1259) ;
                                        (1260) ;  RETURNS:
                                        (1261) ;     A => MSB of parameter address
                                        (1262) ;     X => LSB of parameter address
                                        (1263) ;
                                        (1264) ;  SIDE EFFECTS:
                                        (1265) ;    The A and X registers may be modified by this or future implementations
                                        (1266) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1267) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1268) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1269) ;    functions.
                                        (1270) ;          
                                        (1271) ;    Currently only the page pointer registers listed below are modified: 
                                        (1272) ;          CUR_PP
                                        (1273) ;          IDX_PP
                                        (1274) ;
                                        (1275) ;     The receive string is modified by placing Null characters at the end
                                        (1276) ;     of each parameter as they are recovered.
                                        (1277) ;
                                        (1278) ;  THEORY OF OPERATION:
                                        (1279) ;     This function is a stateful generator of addresses to the "parameters"
                                        (1280) ;     of an input "Command". It scans the (optional) input buffer and breaks
                                        (1281) ;     each lexically distinct element into a null-terminated string by replacing
                                        (1282) ;     delimiters with nulls, as appropriate. The state of the generator is 
                                        (1283) ;     maintained by the private variable ptrParam, which is a buffer-relative
                                        (1284) ;     offset. The generator is initialized by a call to the function
                                        (1285) ;     UART_Sensor_CmdReset which resets the entire buffer to the 'empty'
                                        (1286) ;     state. Typically this function, UART_Sensor_szGetParam, is
                                        (1287) ;     not called until the buffer has been loaded with an entire command
                                        (1288) ;     (See UART_Sensor_bCmdCheck).
                                        (1289) ;
                                        (1290) ;     Note, there is no special distinction between the "command" and the 
                                        (1291) ;     "parameters". The first non-delimiter character of the buffer---the first
                                        (1292) ;     character of the "command"---is also, for the purposes of this function,
                                        (1293) ;     the first "parameter" to which it returns an address.
                                        (1294) ;
                                        (1295) ;     The value of a delimiter (commonly an ascii space, 0x20 and decimal 32)
                                        (1296) ;     is determined at configuration time by a user module parameter.
                                        (1297) ;
                                        (1298)  UART_Sensor_szGetParam:
                                        (1299) _UART_Sensor_szGetParam:
                                        (1300)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1301)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (1302)     
                                        (1303)    RAM_SETPAGE_CUR >ptrParam
                                        (1304)    mov   A, <UART_Sensor_aRxBuffer          ; Get address to receive buffer
                                        (1305)    add   A, [ptrParam]                      ; Add string offset
                                        (1306)    mov   X, A
                                        (1307)    RAM_SETPAGE_IDX >UART_Sensor_aRxBuffer
                                        (1308)    mov   A, [X]                             ; Get character pointed by X
                                        (1309)    jnz   .SkipOverDelimitersLoop            ; Null? No,  continue...
                                        (1310)    push  X                                  ;       Yes, Save LSB of current pointer
                                        (1311)    jmp   .End_GetNextParam
                                        (1312)                                             ; Check for delimiter and keep looping until
                                        (1313)                                             ; all leading delimiters have been found.
                                        (1314) .SkipOverDelimitersLoop:
                                        (1315)    cmp   A, UART_Sensor_DELIMITER           ; Do we have a delimiter?
                                        (1316)    jnz   .ParamStartFound                   ;   No,  Bingo! found a parameter
                                        (1317)    inc   X                                  ;   Yes, Increment both index and...
                                        (1318)    inc   [ptrParam]                         ;          the stored pointer.
                                        (1319)    mov   A, [X]                             ; Get character pointed by X
                                        (1320)    cmp   [ptrParam], (UART_Sensor_RX_BUFFER_SIZE -1)   ; End of buffer?
                                        (1321)    jnz   .SkipOverDelimitersLoop            ;   No,  continue the scan
                                        (1322) 
                                        (1323) .EndOfString:                               ;   Yes, end of string found...
                                        (1324)    push  X                                  ;        Save ptr
                                        (1325) .TerminateString:
                                        (1326)    mov   [X], 0x00                          ; Make sure string is zero
                                        (1327)    jmp   .End_GetNextParam
                                        (1328) 
                                        (1329) .ParamStartFound:
                                        (1330)    push  X                                  ; Beginning of parameter found, save pointer
                                        (1331) 
                                        (1332) .ParamLoop:                                 ; Now loop until end of parameter found.
                                        (1333)    inc   X                                  ; Advance pointers.
                                        (1334)    inc   [ptrParam]
                                        (1335)    cmp   [ptrParam], (UART_Sensor_RX_BUFFER_SIZE -1)   ; Check if we are at the end of buffer
                                        (1336)    jz    .TerminateString
                                        (1337)    mov   A, [X]                             ; Get next character
                                        (1338)    jz    .End_GetNextParam
                                        (1339)    cmp   A, UART_Sensor_DELIMITER           ; Check if we have a delimiter
                                        (1340)    jnz   .ParamLoop                         ; Still no delimiter, loop again
                                        (1341)    mov   [X], 0x00                          ; Replace delimiter with null for end of substring
                                        (1342)    inc   [ptrParam]
                                        (1343)    cmp   [ptrParam], (UART_Sensor_RX_BUFFER_SIZE -1)   ; Check if we are at the end of buffer
                                        (1344)    jnz   .End_GetNextParam                  ; If not end of string leave
                                        (1345)    mov   [ptrParam], (UART_Sensor_RX_BUFFER_SIZE -1)   ; Reset pointer to end of string.
                                        (1346) 
                                        (1347) .End_GetNextParam:
                                        (1348)    pop   X
                                        (1349)    push  X
                                        (1350)    cmp   [X], 0x00
                                        (1351)    jnz   .NotNullString
                                        (1352)    pop   X
                                        (1353)    mov   X, 0x00
                                        (1354)    mov   A, X
                                        (1355)    RAM_EPILOGUE RAM_USE_CLASS_3
                                        (1356)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1357)    ret
                                        (1358) 
                                        (1359) .NotNullString:
                                        (1360)    pop  X
                                        (1361)    mov  A, >UART_Sensor_aRxBuffer           ; Return pointer
                                        (1362)    RAM_EPILOGUE RAM_USE_CLASS_3
                                        (1363)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1364)    ret
                                        (1365) .ENDSECTION
                                        (1366) 
                                        (1367) 
                                        (1368) .SECTION
                                        (1369) ;-----------------------------------------------------------------------------
                                        (1370) ;  FUNCTION NAME: UART_Sensor_szGetRestOfParams
                                        (1371) ;
                                        (1372) ;  DESCRIPTION:
                                        (1373) ;      Returns a pointer to the rest of the UART RX buffer
                                        (1374) ;-----------------------------------------------------------------------------
                                        (1375) ;
                                        (1376) ;  ARGUMENTS:  none
                                        (1377) ;
                                        (1378) ;  RETURNS:
                                        (1379) ;     A => MSB of parameter
                                        (1380) ;     X => LSB of parameter
                                        (1381) ;
                                        (1382) ;  SIDE EFFECTS:
                                        (1383) ;    The A and X registers may be modified by this or future implementations
                                        (1384) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1385) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1386) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1387) ;    functions.
                                        (1388) ;          
                                        (1389) ;    Currently only the page pointer registers listed below are modified: 
                                        (1390) ;          CUR_PP
                                        (1391) ;
                                        (1392)  UART_Sensor_szGetRestOfParams:
                                        (1393) _UART_Sensor_szGetRestOfParams:
                                        (1394)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1395)    RAM_SETPAGE_CUR >ptrParam
                                        (1396)    mov  A, <UART_Sensor_aRxBuffer           ; Get address to receive buffer
                                        (1397)    add  A, [ptrParam]                       ; Add string offset
                                        (1398)    mov  X,A
                                        (1399)    mov  A,>UART_Sensor_aRxBuffer            ; Return pointer
                                        (1400)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1401)    ret
                                        (1402) .ENDSECTION
                                        (1403) 
                                        (1404) ENDIF
                                        (1405) 
                                        (1406) 
                                        (1407) ; End of File UART_Sensor.asm
FILE: lib\uart_boardint.asm             (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   UART_BoardINT.asm
                                        (0004) ;;  Version: 5.3, Updated on 2013/5/19 at 10:44:49
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  UART Interrupt Service Routine.
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) 
                                        (0014) include "UART_Board.inc"
                                        (0015) include "memory.inc"
                                        (0016) include "m8c.inc"
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _UART_Board_TX_ISR
                                        (0022) export  _UART_Board_RX_ISR
                                        (0023) 
                                        (0024) IF (UART_Board_RXBUF_ENABLE)
                                        (0025) export  UART_Board_aRxBuffer
                                        (0026) export _UART_Board_aRxBuffer
                                        (0027) export  UART_Board_bRxCnt
                                        (0028) export _UART_Board_bRxCnt
                                        (0029) export  UART_Board_fStatus
                                        (0030) export _UART_Board_fStatus
                                        (0031) ENDIF
                                        (0032) 
                                        (0033) 
                                        (0034) ;-----------------------------------------------
                                        (0035) ; Variable Allocation
                                        (0036) ;-----------------------------------------------
                                        (0037) AREA InterruptRAM (RAM, REL, CON)
                                        (0038) 
                                        (0039) IF (UART_Board_RXBUF_ENABLE)
                                        (0040)  UART_Board_fStatus:
                                        (0041) _UART_Board_fStatus:      BLK  1
                                        (0042)  UART_Board_bRxCnt:
                                        (0043) _UART_Board_bRxCnt:       BLK  1
                                        (0044) AREA UART_Board_RAM (RAM, REL, CON)
                                        (0045)  UART_Board_aRxBuffer:
                                        (0046) _UART_Board_aRxBuffer:    BLK UART_Board_RX_BUFFER_SIZE
                                        (0047) ENDIF
                                        (0048) 
                                        (0049) AREA InterruptRAM (RAM, REL, CON)
                                        (0050) 
                                        (0051) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0052) ;---------------------------------------------------
                                        (0053) ; Insert your custom declarations below this banner
                                        (0054) ;---------------------------------------------------
                                        (0055) 
                                        (0056) ;------------------------
                                        (0057) ;  Includes
                                        (0058) ;------------------------
                                        (0059) 
                                        (0060) 
                                        (0061) ;------------------------
                                        (0062) ;  Constant Definitions
                                        (0063) ;------------------------
                                        (0064) 
                                        (0065) 
                                        (0066) ;------------------------
                                        (0067) ; Variable Allocation
                                        (0068) ;------------------------
                                        (0069) 
                                        (0070) 
                                        (0071) ;---------------------------------------------------
                                        (0072) ; Insert your custom declarations above this banner
                                        (0073) ;---------------------------------------------------
                                        (0074) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0075) 
                                        (0076) 
                                        (0077) AREA UserModules (ROM, REL, CON)
                                        (0078) 
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;  FUNCTION NAME: _UART_Board_TX_ISR
                                        (0081) ;
                                        (0082) ;  DESCRIPTION:
                                        (0083) ;     UART TX interrupt handler for instance UART_Board.
                                        (0084) ;
                                        (0085) ;     This is a place holder function.  If the user requires use of an interrupt
                                        (0086) ;     handler for this function, then place code where specified.
                                        (0087) ;-----------------------------------------------------------------------------
                                        (0088) 
                                        (0089) _UART_Board_TX_ISR:
                                        (0090)    ;@PSoC_UserCode_BODY_1@ (Do not change this line.)
                                        (0091)    ;---------------------------------------------------
                                        (0092)    ; Insert your custom assembly code below this banner
                                        (0093)    ;---------------------------------------------------
                                        (0094)    ;   NOTE: interrupt service routines must preserve
                                        (0095)    ;   the values of the A and X CPU registers.
                                        (0096)    
                                        (0097)    ;---------------------------------------------------
                                        (0098)    ; Insert your custom assembly code above this banner
                                        (0099)    ;---------------------------------------------------
                                        (0100)    
                                        (0101)    ;---------------------------------------------------
                                        (0102)    ; Insert a lcall to a C function below this banner
                                        (0103)    ; and un-comment the lines between these banners
                                        (0104)    ;---------------------------------------------------
                                        (0105)    
                                        (0106)    ;PRESERVE_CPU_CONTEXT
                                        (0107)    ;lcall _My_C_Function
                                        (0108)    ;RESTORE_CPU_CONTEXT
                                        (0109)    
                                        (0110)    ;---------------------------------------------------
                                        (0111)    ; Insert a lcall to a C function above this banner
                                        (0112)    ; and un-comment the lines between these banners
                                        (0113)    ;---------------------------------------------------
                                        (0114)    ;@PSoC_UserCode_END@ (Do not change this line.)
0518: 7E       RETI                     (0115)    reti
                                        (0116) 
                                        (0117) 
                                        (0118) ;-----------------------------------------------------------------------------
                                        (0119) ;  FUNCTION NAME: _UART_Board_RX_ISR
                                        (0120) ;
                                        (0121) ;  DESCRIPTION:
                                        (0122) ;     UART RX interrupt handler for instance UART_Board.
                                        (0123) ;     This ISR handles the background processing of received characters if
                                        (0124) ;     the buffer is enabled.
                                        (0125) ;
                                        (0126) ;
                                        (0127) ;  The following assumes that the RX buffer feature has been enabled.
                                        (0128) ;
                                        (0129) ;  SIDE EFFECTS:
                                        (0130) ;     There are 3 posible errors that may occur with the serial port.
                                        (0131) ;      1) Parity Error
                                        (0132) ;      2) Framing Error
                                        (0133) ;      3) OverRun Error
                                        (0134) ;
                                        (0135) ;  This user module check for parity and framing error.  If either of these
                                        (0136) ;  two errors are detected, the data is read and ignored.  When an overRun
                                        (0137) ;  error occurs, the last byte was lost, but the current byte is valid.  For
                                        (0138) ;  this reason this error is ignored at this time.  Code could be added to
                                        (0139) ;  this ISR to set a flag if an error condition occurs.
                                        (0140) ;
                                        (0141) ;  THEORY of OPERATION:
                                        (0142) ;     When using the RX buffer feature, the ISR collects received characters
                                        (0143) ;     in a buffer until the user defined command terminator is detected.  After
                                        (0144) ;     the command terminator is detected, the command bit is set and all other
                                        (0145) ;     characters will be ignored until the command bit is reset.  Up to
                                        (0146) ;     buffer_size - 1 characters will be collected waiting for a command
                                        (0147) ;     terminator.  After that, the characters will be discarded, although
                                        (0148) ;     a command determinator will still cause the command bit to be set.
                                        (0149) ;
                                        (0150) ;-----------------------------------------------------------------------------
                                        (0151) _UART_Board_RX_ISR:
                                        (0152) 
                                        (0153)    ;@PSoC_UserCode_BODY_2@ (Do not change this line.)
                                        (0154)    ;---------------------------------------------------
                                        (0155)    ; Insert your custom assembly code below this banner
                                        (0156)    ;---------------------------------------------------
                                        (0157)    ;   NOTE: interrupt service routines must preserve
                                        (0158)    ;   the values of the A and X CPU registers.
                                        (0159)    
                                        (0160)    ;---------------------------------------------------
                                        (0161)    ; Insert your custom assembly code above this banner
                                        (0162)    ;---------------------------------------------------
                                        (0163)    
                                        (0164)    ;---------------------------------------------------
                                        (0165)    ; Insert a lcall to a C function below this banner
                                        (0166)    ; and un-comment the lines between these banners
                                        (0167)    ;---------------------------------------------------
                                        (0168)    
                                        (0169)    ;PRESERVE_CPU_CONTEXT
                                        (0170)    ;lcall _My_C_Function
                                        (0171)    ;RESTORE_CPU_CONTEXT
                                        (0172)    
                                        (0173)    ;---------------------------------------------------
                                        (0174)    ; Insert a lcall to a C function above this banner
                                        (0175)    ; and un-comment the lines between these banners
                                        (0176)    ;---------------------------------------------------
                                        (0177)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0178) 
                                        (0179) IF (UART_Board_RXBUF_ENABLE)
                                        (0180)    push A
                                        (0181)    push X
                                        (0182)    
                                        (0183)    IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0184)       REG_PRESERVE IDX_PP
                                        (0185)    ENDIF
                                        (0186)    
                                        (0187)    mov  X,[UART_Board_bRxCnt]                              ; Load X with byte counter
                                        (0188)    mov  A,REG[UART_Board_RX_CONTROL_REG]                   ; Read the control register
                                        (0189)    push A                                                  ; Store copy for later test
                                        (0190)                                                            ; IF real RX interrupt
                                        (0191)    and  A,UART_Board_RX_REG_FULL                           ; Did really really get an IRQ
                                        (0192)    jnz  .UARTRX_ReadRx                                     ; Data ready, go get it
                                        (0193)    pop  A                                                  ; Restore stack
                                        (0194)    jmp  .RESTORE_IDX_PP
                                        (0195) 
                                        (0196) .UARTRX_ReadRx:
                                        (0197)    pop  A                                                  ; Restore status flags
                                        (0198)                                                            ; IF there is no error, get data
                                        (0199)                                                            ; Check for parity or framing error
                                        (0200)    and  A,UART_Board_RX_ERROR
                                        (0201)    jz   .UARTRX_NO_ERROR                                   ; If there is not an Error go read data
                                        (0202) 
                                        (0203)    or   [UART_Board_fStatus],A                             ; Set error flags (parity,framing,overrun) bits
                                        (0204)    tst  REG[UART_Board_RX_BUFFER_REG], 0x00                ; Read the data buffer to clear it.
                                        (0205)    and  A,UART_Board_RX_FRAMING_ERROR                      ; Check for framing error special case
                                        (0206)    jz   .RESTORE_IDX_PP                                    ; Not framing error, all done
                                        (0207) 
                                        (0208)                                                            ; Disable and re-enable RX to reset after
                                        (0209)                                                            ; framing error.
                                        (0210)    and   REG[UART_Board_RX_CONTROL_REG], ~UART_Board_RX_ENABLE   ; Disable RX
                                        (0211)    or    REG[UART_Board_RX_CONTROL_REG],  UART_Board_RX_ENABLE   ; Enable RX
                                        (0212)    jmp  .RESTORE_IDX_PP                                    ; Done with framing error, leave.
                                        (0213) 
                                        (0214) 
                                        (0215) .UARTRX_NO_ERROR:
                                        (0216)    mov  A,REG[UART_Board_RX_BUFFER_REG ]                   ; Read the data buffer
                                        (0217) 
                                        (0218)                                                            ; IF buffer not full
                                        (0219)    tst  [UART_Board_fStatus],UART_Board_RX_BUF_CMDTERM     ; Check for buffer full
                                        (0220)    jnz  .RESTORE_IDX_PP                                    ; All done
                                        (0221) 
                                        (0222)    cmp  A,UART_Board_CMD_TERM                              ; Check for End of command
                                        (0223)    jnz  .UARTRX_CHK_BACKSPACE
                                        (0224)    or   [UART_Board_fStatus],UART_Board_RX_BUF_CMDTERM     ; Set command ready bit
                                        (0225) 
                                        (0226) 
                                        (0227) 
                                        (0228)    RAM_SETPAGE_IDX >UART_Board_aRxBuffer
                                        (0229)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
                                        (0230)    mov  [X + UART_Board_aRxBuffer],00h                     ; Zero out last data
                                        (0231)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
                                        (0232)    jmp  .RESTORE_IDX_PP
                                        (0233) 
                                        (0234) .UARTRX_CHK_BACKSPACE:                                     ; 
                                        (0235) IF(UART_Board_BACKSPACE_ENABLE)                            ; Enable if backspace/delete mode
                                        (0236)    cmp  A,UART_Board_BACKSPACE_ENABLE                      ; Check for backspace character
                                        (0237)    jnz  .UARTRX_IGNORE                                     ; If not, skip the backspace stuff
                                        (0238)    cmp  [UART_Board_bRxCnt],00h                            ; Check if buffer empty
                                        (0239)    jz   .RESTORE_IDX_PP                                    ; 
                                        (0240)    dec  [UART_Board_bRxCnt]                                ; Decrement buffer count by one.
                                        (0241)    jmp  .RESTORE_IDX_PP
                                        (0242) ENDIF                                                      ; 
                                        (0243) 
                                        (0244) .UARTRX_IGNORE:
                                        (0245) IF(UART_Board_RX_IGNORE_BELOW)                             ; Ignore charaters below this value
                                        (0246)    cmp  A,UART_Board_RX_IGNORE_BELOW                       ; If ignore char is set to 0x00, do not
                                        (0247)    jc   .RESTORE_IDX_PP                                    ; ignore any characters.
                                        (0248) ENDIF
                                        (0249) 
                                        (0250) .UARTRX_CHK_OVFL:                                          ; Check for MAX String here
                                        (0251) 	
                                        (0252)    RAM_SETPAGE_IDX >UART_Board_aRxBuffer                   ;   using idexed address mode
                                        (0253)    cmp  [UART_Board_bRxCnt],(UART_Board_RX_BUFFER_SIZE - 1)
                                        (0254)    jc   .UARTRX_ISR_GETDATA
                                        (0255)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
                                        (0256)    mov  [X + UART_Board_aRxBuffer],00h                     ; Zero out last data in the buffer
                                        (0257)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
                                        (0258)    or   [UART_Board_fStatus],UART_Board_RX_BUF_OVERRUN     ; Set error flags (parity,framing,overrun) bits
                                        (0259)    jmp  .RESTORE_IDX_PP
                                        (0260) 
                                        (0261) .UARTRX_ISR_GETDATA:                                       ; IF input data == "CR", then end of command
                                        (0262)                                                            ; X is already loaded with pointer
                                        (0263)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
                                        (0264)    mov  [X+UART_Board_aRxBuffer],A                         ; store data in array
                                        (0265)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
                                        (0266)    inc  X                                                  ; Inc the pointer
                                        (0267)    mov  [UART_Board_bRxCnt],X                              ; Restore the pointer
                                        (0268)                                                            ; ENDIF max string size
                                        (0269) .RESTORE_IDX_PP:
                                        (0270)    IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0271)       REG_RESTORE IDX_PP
                                        (0272)    ENDIF
                                        (0273) 
                                        (0274) .END_UARTRX_ISR:
                                        (0275)    pop  X
                                        (0276)    pop  A
                                        (0277) 
                                        (0278) ENDIF
                                        (0279) 
                                        (0280) UART_Board_RX_ISR_END:
0519: 7E       RETI                     (0281)    reti
                                        (0282) 
                                        (0283) ; end of file UART_BoardINT.asm
                                        (0284) 
FILE: lib\uart_board.asm                (0001) ;;*****************************************************************************
051A: 43 E1 40 OR    REG[0xE1],0x40     (0002) ;;*****************************************************************************
051D: 43 E1 80 OR    REG[0xE1],0x80     
                                        (0003) ;;  Filename:   UART_Board.asm
                                        (0004) ;;  Version: 5.3, Updated on 2013/5/19 at 10:44:49
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  UART User Module software implementation file for the
                                        (0008) ;;                22/24/25/26/27xxx families.
                                        (0009) ;;
                                        (0010) ;;
                                        (0011) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0012) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0013) ;;        This means it is the caller's responsibility to preserve any values
                                        (0014) ;;        in the X and A registers that are still needed after the API functions
                                        (0015) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0016) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0017) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0018) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0019) ;;-----------------------------------------------------------------------------
                                        (0020) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0021) ;;*****************************************************************************
                                        (0022) ;;*****************************************************************************
                                        (0023) 
                                        (0024) 
                                        (0025) include "m8c.inc"
                                        (0026) include "memory.inc"
                                        (0027) include "UART_Board.inc"
                                        (0028) 
                                        (0029) ;-----------------------------------------------
                                        (0030) ;  Global Symbols
                                        (0031) ;-----------------------------------------------
                                        (0032) ;-------------------------------------------------------------------
                                        (0033) ;  Declare the functions global for both assembler and C compiler.
                                        (0034) ;
                                        (0035) ;  Note that there are two names for each API. First name is
                                        (0036) ;  assembler reference. Name with underscore is name refence for
                                        (0037) ;  C compiler.  Calling function in C source code does not require
                                        (0038) ;  the underscore.
                                        (0039) ;-------------------------------------------------------------------
                                        (0040) export  UART_Board_SetTxIntMode
                                        (0041) export _UART_Board_SetTxIntMode
                                        (0042) export  UART_Board_EnableInt
                                        (0043) export _UART_Board_EnableInt
                                        (0044) export  UART_Board_DisableInt
                                        (0045) export _UART_Board_DisableInt
                                        (0046) 
                                        (0047) export  UART_Board_Start
                                        (0048) export _UART_Board_Start
                                        (0049) export  UART_Board_Stop
                                        (0050) export _UART_Board_Stop
                                        (0051) export  UART_Board_SendData
                                        (0052) export _UART_Board_SendData
                                        (0053) export  UART_Board_bReadTxStatus
                                        (0054) export _UART_Board_bReadTxStatus
                                        (0055) export  UART_Board_bReadRxData
                                        (0056) export _UART_Board_bReadRxData
                                        (0057) export  UART_Board_bReadRxStatus
                                        (0058) export _UART_Board_bReadRxStatus
                                        (0059) 
                                        (0060) export  UART_Board_IntCntl
                                        (0061) export _UART_Board_IntCntl
                                        (0062) 
                                        (0063) export  UART_Board_TxIntMode
                                        (0064) export _UART_Board_TxIntMode
                                        (0065) 
                                        (0066) export  UART_Board_PutSHexByte
                                        (0067) export _UART_Board_PutSHexByte
                                        (0068) export  UART_Board_PutSHexInt
                                        (0069) export _UART_Board_PutSHexInt
                                        (0070) 
                                        (0071) export  UART_Board_CPutString
                                        (0072) export _UART_Board_CPutString
                                        (0073) export  UART_Board_PutString
                                        (0074) export _UART_Board_PutString
                                        (0075) export  UART_Board_PutChar
                                        (0076) export _UART_Board_PutChar
                                        (0077) export  UART_Board_Write
                                        (0078) export _UART_Board_Write
                                        (0079) export  UART_Board_CWrite
                                        (0080) export _UART_Board_CWrite
                                        (0081) 
                                        (0082) export  UART_Board_cGetChar
                                        (0083) export _UART_Board_cGetChar
                                        (0084) export  UART_Board_cReadChar
                                        (0085) export _UART_Board_cReadChar
                                        (0086) export  UART_Board_iReadChar
                                        (0087) export _UART_Board_iReadChar
                                        (0088) export  UART_Board_PutCRLF
                                        (0089) export _UART_Board_PutCRLF
                                        (0090) 
                                        (0091) IF (UART_Board_RXBUF_ENABLE)
                                        (0092) export  UART_Board_CmdReset
                                        (0093) export _UART_Board_CmdReset
                                        (0094) export  UART_Board_bCmdCheck
                                        (0095) export _UART_Board_bCmdCheck
                                        (0096) export  UART_Board_bCmdLength
                                        (0097) export _UART_Board_bCmdLength
                                        (0098) export  UART_Board_bErrCheck
                                        (0099) export _UART_Board_bErrCheck
                                        (0100) 
                                        (0101) export  UART_Board_szGetParam
                                        (0102) export _UART_Board_szGetParam
                                        (0103) export  UART_Board_szGetRestOfParams
                                        (0104) export _UART_Board_szGetRestOfParams
                                        (0105) ENDIF
                                        (0106) 
                                        (0107) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0108) ; WARNING WARNING WARNING
                                        (0109) ; The following exports are for backwards compatibility only and should
                                        (0110) ; not be used for new designs. They may be eliminated in a future release.
                                        (0111) ; Their status is "NO FURTHER MAINTENANCE". 
                                        (0112) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0113) export  bUART_Board_ReadTxStatus
                                        (0114) export _bUART_Board_ReadTxStatus
                                        (0115) export  bUART_Board_ReadRxData
                                        (0116) export _bUART_Board_ReadRxData
                                        (0117) export  bUART_Board_ReadRxStatus
                                        (0118) export _bUART_Board_ReadRxStatus
                                        (0119) 	
                                        (0120) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0121) ;             END WARNING
                                        (0122) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0123) 
                                        (0124) ;-----------------------------------------------
                                        (0125) ; Variable Allocation
                                        (0126) ;-----------------------------------------------
                                        (0127) IF (UART_Board_RXBUF_ENABLE)
                                        (0128)     
                                        (0129) area UART_Board_RAM (RAM, REL, CON)
                                        (0130)     
                                        (0131)  ptrParam:   BLK  1
                                        (0132) 
                                        (0133) ENDIF
                                        (0134) 
                                        (0135) area text (ROM,REL)
                                        (0136) 
                                        (0137) ;-----------------------------------------------
                                        (0138) ;  EQUATES
                                        (0139) ;-----------------------------------------------
                                        (0140) bfCONTROL_REG_START_BIT:        equ    1    ; Control register start bit
                                        (0141) bfFUNCTION_REG_TX_INT_MODE_BIT: equ 0x10    ; the TX Int Mode bit
                                        (0142) 
                                        (0143) area UserModules (ROM, REL, CON)
                                        (0144) 
                                        (0145) ;=============================================================================
                                        (0146) ;=============================================================================
                                        (0147) ;
                                        (0148) ;     Low-Level Commands
                                        (0149) ;
                                        (0150) ;=============================================================================
                                        (0151) ;=============================================================================
                                        (0152) 
                                        (0153) .SECTION
                                        (0154) ;-----------------------------------------------------------------------------
                                        (0155) ;  FUNCTION NAME: UART_Board_EnableInt
                                        (0156) ;
                                        (0157) ;  DESCRIPTION:
                                        (0158) ;     Enables this UART's interrupt by setting the interrupt enable mask
                                        (0159) ;     bit associated with this User Module. Remember to call the global
                                        (0160) ;     interrupt enable function by using the macro: M8C_EnableGInt.
                                        (0161) ;-----------------------------------------------------------------------------
                                        (0162) ;
                                        (0163) ;  ARGUMENTS:
                                        (0164) ;     none.
                                        (0165) ;
                                        (0166) ;  RETURNS:
                                        (0167) ;     none.
                                        (0168) ;
                                        (0169) ;  SIDE EFFECTS:
                                        (0170) ;    The A and X registers may be modified by this or future implementations
                                        (0171) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0172) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0173) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0174) ;    functions.
                                        (0175) ;
                                        (0176)  UART_Board_EnableInt:
                                        (0177) _UART_Board_EnableInt:
                                        (0178)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0179)    M8C_EnableIntMask UART_Board_TX_INT_REG, UART_Board_TX_INT_MASK
                                        (0180)    M8C_EnableIntMask UART_Board_RX_INT_REG, UART_Board_RX_INT_MASK
                                        (0181)    RAM_EPILOGUE RAM_USE_CLASS_1
0520: 7F       RET                      (0182)    ret
0521: 41 E1 BF AND   REG[0xE1],0xBF     
0524: 41 E1 7F AND   REG[0xE1],0x7F     
                                        (0183) .ENDSECTION
                                        (0184) 
                                        (0185)     
                                        (0186) .SECTION
                                        (0187) ;-----------------------------------------------------------------------------
                                        (0188) ;  FUNCTION NAME: UART_Board_DisableInt
                                        (0189) ;
                                        (0190) ;  DESCRIPTION:
                                        (0191) ;     Disables this UART's interrupt by clearing the interrupt enable mask bit
                                        (0192) ;     associated with this User Module.
                                        (0193) ;-----------------------------------------------------------------------------
                                        (0194) ;
                                        (0195) ;  ARGUMENTS:
                                        (0196) ;     none.
                                        (0197) ;
                                        (0198) ;  RETURNS:
                                        (0199) ;     none.
                                        (0200) ;
                                        (0201) ;  SIDE EFFECTS:
                                        (0202) ;    The A and X registers may be modified by this or future implementations
                                        (0203) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0204) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0205) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0206) ;    functions.
                                        (0207) ;
                                        (0208)  UART_Board_DisableInt:
                                        (0209) _UART_Board_DisableInt:
                                        (0210)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0211)    M8C_DisableIntMask UART_Board_TX_INT_REG, UART_Board_TX_INT_MASK
                                        (0212)    M8C_DisableIntMask UART_Board_RX_INT_REG, UART_Board_RX_INT_MASK
                                        (0213)    RAM_EPILOGUE RAM_USE_CLASS_1
0527: 7F       RET                      (0214)    ret
0528: 71 10    OR    F,0x10             
                                        (0215) .ENDSECTION
                                        (0216) 
                                        (0217) 
                                        (0218) .SECTION
                                        (0219) ;-----------------------------------------------------------------------------
                                        (0220) ;  FUNCTION NAME: UART_Board_SetTxIntMode(BYTE bTxIntMode)
                                        (0221) ;
                                        (0222) ;  DESCRIPTION:
                                        (0223) ;     Sets the Tx Interrupt Mode bit in the Function Register.
                                        (0224) ;-----------------------------------------------------------------------------
                                        (0225) ;
                                        (0226) ;  ARGUMENTS:
                                        (0227) ;     BYTE bTxIntMode - The TX Interrupt mode setting. Use defined masks.
                                        (0228) ;        Passed in the A register
                                        (0229) ;
                                        (0230) ;  RETURNS:
                                        (0231) ;     none.
                                        (0232) ;
                                        (0233) ;  SIDE EFFECTS:
                                        (0234) ;    The A and X registers may be modified by this or future implementations
                                        (0235) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0236) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0237) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0238) ;    functions.
                                        (0239) ;
                                        (0240) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0241) ;     Sets the TX interrupt mode bit to define whether the interrupt occurs
                                        (0242) ;     on TX register empty or TX transmit complete
                                        (0243) ;
                                        (0244)  UART_Board_SetTxIntMode:
                                        (0245) _UART_Board_SetTxIntMode:
                                        (0246)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0247)    M8C_SetBank1
052A: 21 01    AND   A,0x1              (0248)    and   A, UART_Board_INT_MODE_TX_COMPLETE
052C: A0 07    JZ    0x0534             (0249)    jz    .SetModeRegEmpty
052E: 43 38 10 OR    REG[0x38],0x10     (0250)    or    REG[UART_Board_TX_FUNC_REG], bfFUNCTION_REG_TX_INT_MODE_BIT
0531: 70 EF    AND   F,0xEF             
                                        (0251)    M8C_SetBank0
                                        (0252)    RAM_EPILOGUE RAM_USE_CLASS_1
0533: 7F       RET                      (0253)    ret
                                        (0254) 
                                        (0255) .SetModeRegEmpty:
0534: 41 38 EF AND   REG[0x38],0xEF     (0256)    and   REG[UART_Board_TX_FUNC_REG], ~bfFUNCTION_REG_TX_INT_MODE_BIT
0537: 70 EF    AND   F,0xEF             
                                        (0257)    M8C_SetBank0
                                        (0258)    RAM_EPILOGUE RAM_USE_CLASS_1
0539: 7F       RET                      (0259)    ret
                                        (0260) .ENDSECTION
                                        (0261) 
                                        (0262) 
                                        (0263) .SECTION
                                        (0264) ;-----------------------------------------------------------------------------
                                        (0265) ;  FUNCTION NAME: UART_Board_Start(BYTE bParity)
                                        (0266) ;
                                        (0267) ;  DESCRIPTION:
                                        (0268) ;     Sets the start bit and parity in the Control register of this user module.
                                        (0269) ;-----------------------------------------------------------------------------
                                        (0270) ;
                                        (0271) ;  ARGUMENTS:
                                        (0272) ;     BYTE bParity - parity setting for the Transmitter and receiver. Use defined masks.
                                        (0273) ;        Passed in the A register.
                                        (0274) ;
                                        (0275) ;  RETURNS:
                                        (0276) ;     none.
                                        (0277) ;
                                        (0278) ;  SIDE EFFECTS:
                                        (0279) ;    The A and X registers may be modified by this or future implementations
                                        (0280) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0281) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0282) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0283) ;    functions.
                                        (0284) ;
                                        (0285)  UART_Board_Start:
                                        (0286) _UART_Board_Start:
                                        (0287)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0288)    ; Note, Proxy Class 4 only if receive buffer used; otherwise Proxy Class 1.
                                        (0289) 
053A: 29 01    OR    A,0x1              (0290)    or    A, bfCONTROL_REG_START_BIT
053C: 60 3B    MOV   REG[0x3B],A        (0291)    mov   REG[UART_Board_TX_CONTROL_REG], A
053E: 60 3F    MOV   REG[0x3F],A        (0292)    mov   REG[UART_Board_RX_CONTROL_REG], A
                                        (0293) IF ( UART_Board_RXBUF_ENABLE )
                                        (0294)    call  _UART_Board_CmdReset
                                        (0295) ENDIF
                                        (0296)    RAM_EPILOGUE RAM_USE_CLASS_1
0540: 7F       RET                      (0297)    ret
                                        (0298) .ENDSECTION
                                        (0299) 
                                        (0300) 
                                        (0301) .SECTION
                                        (0302) ;-----------------------------------------------------------------------------
                                        (0303) ;  FUNCTION NAME: UART_Board_Stop
                                        (0304) ;
                                        (0305) ;  DESCRIPTION:
                                        (0306) ;     Disables UART operation.
                                        (0307) ;-----------------------------------------------------------------------------
                                        (0308) ;
                                        (0309) ;  ARGUMENTS:
                                        (0310) ;     none.
                                        (0311) ;
                                        (0312) ;  RETURNS:
                                        (0313) ;     none.
                                        (0314) ;
                                        (0315) ;  SIDE EFFECTS:
                                        (0316) ;    The A and X registers may be modified by this or future implementations
                                        (0317) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0318) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0319) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0320) ;    functions.
                                        (0321) ;
                                        (0322)  UART_Board_Stop:
                                        (0323) _UART_Board_Stop:
                                        (0324)    RAM_PROLOGUE RAM_USE_CLASS_1
0541: 41 3B FE AND   REG[0x3B],0xFE     (0325)    and   REG[UART_Board_TX_CONTROL_REG], ~bfCONTROL_REG_START_BIT
0544: 41 3F FE AND   REG[0x3F],0xFE     (0326)    and   REG[UART_Board_RX_CONTROL_REG], ~bfCONTROL_REG_START_BIT
                                        (0327)    RAM_EPILOGUE RAM_USE_CLASS_1
0547: 7F       RET                      (0328)    ret
                                        (0329) .ENDSECTION
                                        (0330) 
                                        (0331) 
                                        (0332) .SECTION
                                        (0333) ;-----------------------------------------------------------------------------
                                        (0334) ;  FUNCTION NAME: UART_Board_SendData
                                        (0335) ;
                                        (0336) ;  DESCRIPTION:
                                        (0337) ;     Initiates a transmission of data.
                                        (0338) ;-----------------------------------------------------------------------------
                                        (0339) ;
                                        (0340) ;  ARGUMENTS:
                                        (0341) ;     BYTE  TxData - data to transmit. PASSED in A register.
                                        (0342) ;
                                        (0343) ;  RETURNS:
                                        (0344) ;     none.
                                        (0345) ;
                                        (0346) ;  SIDE EFFECTS:
                                        (0347) ;    The A and X registers may be modified by this or future implementations
                                        (0348) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0349) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0350) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0351) ;    functions.
                                        (0352) ;
                                        (0353)  UART_Board_SendData:
                                        (0354) _UART_Board_SendData:
                                        (0355)    RAM_PROLOGUE RAM_USE_CLASS_1
0548: 60 39    MOV   REG[0x39],A        (0356)    mov REG[UART_Board_TX_BUFFER_REG], A
                                        (0357)    RAM_EPILOGUE RAM_USE_CLASS_1
054A: 7F       RET                      (0358)    ret
                                        (0359) .ENDSECTION
                                        (0360) 
                                        (0361) 
                                        (0362) .SECTION
                                        (0363) ;-----------------------------------------------------------------------------
                                        (0364) ;  FUNCTION NAME: UART_Board_bReadTxStatus
                                        (0365) ;
                                        (0366) ;  DESCRIPTION:
                                        (0367) ;     Reads the Tx Status bits in the Control/Status register.
                                        (0368) ;-----------------------------------------------------------------------------
                                        (0369) ;
                                        (0370) ;  ARGUMENTS:
                                        (0371) ;     none.
                                        (0372) ;
                                        (0373) ;  RETURNS:
                                        (0374) ;     BYTE  bTxStatus - transmit status data.  Use defined masks for detecting
                                        (0375) ;           status bits (returned in A)
                                        (0376) ;
                                        (0377) ;  SIDE EFFECTS:
                                        (0378) ;    The A and X registers may be modified by this or future implementations
                                        (0379) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0380) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0381) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0382) ;    functions.
                                        (0383) ;
                                        (0384)  UART_Board_bReadTxStatus:
                                        (0385) _UART_Board_bReadTxStatus:
                                        (0386)  bUART_Board_ReadTxStatus:                       ; For backwards compatibility only
                                        (0387) _bUART_Board_ReadTxStatus:                       ; For backwards compatibility only
                                        (0388)    RAM_PROLOGUE RAM_USE_CLASS_1
054B: 5D 3B    MOV   A,REG[0x3B]        (0389)    mov A,  REG[UART_Board_TX_CONTROL_REG]
                                        (0390)    RAM_EPILOGUE RAM_USE_CLASS_1
054D: 7F       RET                      (0391)    ret
                                        (0392) .ENDSECTION
                                        (0393) 
                                        (0394) 
                                        (0395) .SECTION
                                        (0396) ;-----------------------------------------------------------------------------
                                        (0397) ;  FUNCTION NAME: UART_Board_bReadRxData
                                        (0398) ;
                                        (0399) ;  DESCRIPTION:
                                        (0400) ;     Reads the RX buffer register.  Should check the status regiser to make
                                        (0401) ;     sure data is valid.
                                        (0402) ;-----------------------------------------------------------------------------
                                        (0403) ;
                                        (0404) ;  ARGUMENTS:
                                        (0405) ;     none.
                                        (0406) ;
                                        (0407) ;  RETURNS:
                                        (0408) ;     bRxData - returned in A.
                                        (0409) ;
                                        (0410) ;  SIDE EFFECTS:
                                        (0411) ;    The A and X registers may be modified by this or future implementations
                                        (0412) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0413) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0414) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0415) ;    functions.
                                        (0416) ;
                                        (0417)  UART_Board_bReadRxData:
                                        (0418) _UART_Board_bReadRxData:
                                        (0419)  bUART_Board_ReadRxData:                         ; For backwards compatibility only
                                        (0420) _bUART_Board_ReadRxData:                         ; For backwards compatibility only
                                        (0421)    RAM_PROLOGUE RAM_USE_CLASS_1
054E: 5D 3E    MOV   A,REG[0x3E]        (0422)    mov A, REG[UART_Board_RX_BUFFER_REG]
                                        (0423)    RAM_EPILOGUE RAM_USE_CLASS_1
0550: 7F       RET                      (0424)    ret
                                        (0425) .ENDSECTION
                                        (0426) 
                                        (0427) 
                                        (0428) .SECTION
                                        (0429) ;-----------------------------------------------------------------------------
                                        (0430) ;  FUNCTION NAME: UART_Board_bReadRxStatus
                                        (0431) ;
                                        (0432) ;  DESCRIPTION:
                                        (0433) ;     Reads the RX Status bits in the Control/Status register.
                                        (0434) ;-----------------------------------------------------------------------------
                                        (0435) ;
                                        (0436) ;  ARGUMENTS:
                                        (0437) ;     none.
                                        (0438) ;
                                        (0439) ;  RETURNS:
                                        (0440) ;     BYTE  bRXStatus - receive status data.  Use the following defined bits
                                        (0441) ;                       masks: RX_COMPLETE and RX_BUFFER_EMPTY
                                        (0442) ;           returned in A.
                                        (0443) ;
                                        (0444) ;  SIDE EFFECTS:
                                        (0445) ;    The A and X registers may be modified by this or future implementations
                                        (0446) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0447) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0448) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0449) ;    functions.
                                        (0450) ;
                                        (0451)  UART_Board_bReadRxStatus:
                                        (0452) _UART_Board_bReadRxStatus:
                                        (0453)  bUART_Board_ReadRxStatus:                       ; For backwards compatibility only
                                        (0454) _bUART_Board_ReadRxStatus:                       ; For backwards compatibility only
                                        (0455)    RAM_PROLOGUE RAM_USE_CLASS_1
0551: 5D 3F    MOV   A,REG[0x3F]        (0456)    mov A,  REG[UART_Board_RX_CONTROL_REG]
                                        (0457)    RAM_EPILOGUE RAM_USE_CLASS_1
0553: 7F       RET                      (0458)    ret
                                        (0459) .ENDSECTION
                                        (0460) 
                                        (0461) 
                                        (0462) .SECTION
                                        (0463) ;-----------------------------------------------------------------------------
                                        (0464) ;  FUNCTION NAME: UART_Board_TxIntMode
                                        (0465) ;
                                        (0466) ;  DESCRIPTION:
                                        (0467) ;     This function is used to change the TX Interrupt mode.
                                        (0468) ;-----------------------------------------------------------------------------
                                        (0469) ;
                                        (0470) ;  ARGUMENTS:
                                        (0471) ;     A => Tx Interrupt mode
                                        (0472) ;             0 => Interrupt on TX_Reg_Empty  (Default)
                                        (0473) ;             1 => Interrupt on TX Complete
                                        (0474) ;
                                        (0475) ;  RETURNS:
                                        (0476) ;     none.
                                        (0477) ;
                                        (0478) ;  SIDE EFFECTS:
                                        (0479) ;    The A and X registers may be modified by this or future implementations
                                        (0480) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0481) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0482) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0483) ;    functions.
                                        (0484) ;
                                        (0485)  UART_Board_TxIntMode:
                                        (0486) _UART_Board_TxIntMode:
                                        (0487)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0488) 
0554: 21 01    AND   A,0x1              (0489)    and  A,UART_Board_INT_MODE_TX_COMPLETE
0556: 71 10    OR    F,0x10             
                                        (0490)    M8C_SetBank1
0558: 39 01    CMP   A,0x1              (0491)    cmp  A,UART_Board_INT_MODE_TX_COMPLETE
055A: A0 06    JZ    0x0561             (0492)    jz   .SetTxCmpMode
                                        (0493) 
055C: 41 38 EF AND   REG[0x38],0xEF     (0494)    and  reg[UART_Board_TX_FUNC_REG],0xEF         ; Set Interrupt on Tx_Reg_Empty
055F: 80 04    JMP   0x0564             (0495)    jmp  .TxIntMode_End
                                        (0496) 
                                        (0497) .SetTxCmpMode:                                       ; Set Interrupt on TX Complete
0561: 43 38 10 OR    REG[0x38],0x10     (0498)    or   reg[UART_Board_TX_FUNC_REG],0x10
0564: 70 EF    AND   F,0xEF             
                                        (0499) 
                                        (0500) .TxIntMode_End:
                                        (0501)    M8C_SetBank0
                                        (0502)    RAM_EPILOGUE RAM_USE_CLASS_1
0566: 7F       RET                      (0503)    ret
                                        (0504) .ENDSECTION
                                        (0505) 
                                        (0506)     
                                        (0507) .SECTION
                                        (0508) ;-----------------------------------------------------------------------------
                                        (0509) ;  FUNCTION NAME: UART_Board_IntCntl
                                        (0510) ;
                                        (0511) ;  DESCRIPTION:
                                        (0512) ;     This function is used to enable/disable the Rx and Tx interrupt.
                                        (0513) ;-----------------------------------------------------------------------------
                                        (0514) ;
                                        (0515) ;  ARGUMENTS:
                                        (0516) ;     A => Interrupt mask
                                        (0517) ;
                                        (0518) ;  RETURNS:
                                        (0519) ;     none.
                                        (0520) ;
                                        (0521) ;  SIDE EFFECTS:
                                        (0522) ;    The A and X registers may be modified by this or future implementations
                                        (0523) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0524) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0525) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0526) ;    functions.
                                        (0527) ;
                                        (0528) ;  THEORY of OPERATION or PROCEDURE:
                                        (0529) ;     Set or Clears the Tx/Rx user module interrupt enable mask bit in the TX
                                        (0530) ;     and RX block.
                                        (0531) ;
                                        (0532)  UART_Board_IntCntl:
                                        (0533) _UART_Board_IntCntl:
                                        (0534)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0535) 
0567: 08       PUSH  A                  (0536)    push A
0568: 21 01    AND   A,0x1              (0537)    and  A,UART_Board_ENABLE_RX_INT
056A: A0 06    JZ    0x0571             (0538)    jz   .DisRxInt
056C: 43 E1 80 OR    REG[0xE1],0x80     
                                        (0539)      ; Enable Rx Interrupt
                                        (0540)    M8C_EnableIntMask UART_Board_RX_INT_REG, UART_Board_RX_INT_MASK
056F: 80 04    JMP   0x0574             (0541)    jmp  .CheckTxInt
0571: 41 E1 7F AND   REG[0xE1],0x7F     
                                        (0542) .DisRxInt:
                                        (0543)      ; Disable Rx Interrupt
                                        (0544)    M8C_DisableIntMask UART_Board_RX_INT_REG, UART_Board_RX_INT_MASK
                                        (0545) 
                                        (0546) .CheckTxInt:
0574: 18       POP   A                  (0547)    pop  A
0575: 21 02    AND   A,0x2              (0548)    and  A,UART_Board_ENABLE_TX_INT
0577: A0 06    JZ    0x057E             (0549)    jz   .DisTxInt
0579: 43 E1 40 OR    REG[0xE1],0x40     
                                        (0550)      ; Enable Tx Interrupt
                                        (0551)    M8C_EnableIntMask UART_Board_TX_INT_REG, UART_Board_TX_INT_MASK
057C: 80 04    JMP   0x0581             (0552)    jmp  .End_IntCntl
057E: 41 E1 BF AND   REG[0xE1],0xBF     
                                        (0553) .DisTxInt:
                                        (0554)      ; Disable Tx Interrupt
                                        (0555)    M8C_DisableIntMask UART_Board_TX_INT_REG, UART_Board_TX_INT_MASK
                                        (0556) 
                                        (0557) .End_IntCntl:
                                        (0558)    RAM_EPILOGUE RAM_USE_CLASS_1
0581: 7F       RET                      (0559)    ret
                                        (0560) .ENDSECTION
                                        (0561) 
                                        (0562) 
                                        (0563) ;=============================================================================
                                        (0564) ;=============================================================================
                                        (0565) ;
                                        (0566) ;     High-Level Commands
                                        (0567) ;
                                        (0568) ;=============================================================================
                                        (0569) ;=============================================================================
                                        (0570) 
                                        (0571) 
                                        (0572) ;-----------------------------------------------------------------------------
                                        (0573) ;  FUNCTION NAME: UART_Board_PutSHexByte
                                        (0574) ;
                                        (0575) ;  DESCRIPTION:
                                        (0576) ;     Print a byte in Hex (two characters) to the UART Tx
                                        (0577) ;-----------------------------------------------------------------------------
                                        (0578) ;
                                        (0579) ;  ARGUMENTS:
                                        (0580) ;     A  => (BYTE) Data/char to be printed
                                        (0581) ;
                                        (0582) ;  RETURNS:
                                        (0583) ;     none.
                                        (0584) ;
                                        (0585) ;  SIDE EFFECTS:
                                        (0586) ;    The A and X registers may be modified by this or future implementations
                                        (0587) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0588) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0589) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0590) ;    functions.
                                        (0591) ;
                                        (0592) .LITERAL
                                        (0593) UART_Board_HEX_STR:
                                        (0594)      DS    "0123456789ABCDEF"
                                        (0595) .ENDLITERAL
                                        (0596) 
                                        (0597) .SECTION
                                        (0598)  UART_Board_PutSHexByte:
                                        (0599) _UART_Board_PutSHexByte:
                                        (0600)    RAM_PROLOGUE RAM_USE_CLASS_1
0592: 08       PUSH  A                  (0601)    push  A                             ; Save lower nibble
0593: 67       ASR   A                  (0602)    asr   A                             ; Shift high nibble to right
0594: 67       ASR   A                  (0603)    asr   A
0595: 67       ASR   A                  (0604)    asr   A
0596: 67       ASR   A                  (0605)    asr   A
0597: 21 0F    AND   A,0xF              (0606)    and   A,0Fh                         ; Mask off nibble
0599: FF E7    INDEX 0x0582             (0607)    index UART_Board_HEX_STR            ; Get Hex value
059B: 90 0F    CALL  _UART_Board_PutChar(0608)    call  UART_Board_PutChar            ; Write data to screen
059D: 18       POP   A                  (0609)    pop   A                             ; Restore value
059E: 21 0F    AND   A,0xF              (0610)    and   A,0Fh                         ; Mask off lower nibble
05A0: FF E0    INDEX 0x0582             (0611)    index UART_Board_HEX_STR            ; Get Hex value
05A2: 90 08    CALL  _UART_Board_PutChar(0612)    call  UART_Board_PutChar            ; Write data to screen
                                        (0613)    RAM_EPILOGUE RAM_USE_CLASS_1
05A4: 7F       RET                      (0614)    ret
                                        (0615) .ENDSECTION
                                        (0616) 
                                        (0617) 
                                        (0618) .SECTION
                                        (0619) ;-----------------------------------------------------------------------------
                                        (0620) ;  FUNCTION NAME: UART_Board_PutSHexInt
                                        (0621) ;
                                        (0622) ;  DESCRIPTION:
                                        (0623) ;     Print an Int in Hex (four characters) to UART Tx
                                        (0624) ;-----------------------------------------------------------------------------
                                        (0625) ;
                                        (0626) ;  ARGUMENTS:
                                        (0627) ;     Pointer to string
                                        (0628) ;     A  => ASB of Int
                                        (0629) ;     X  => MSB of Int
                                        (0630) ;
                                        (0631) ;  RETURNS:
                                        (0632) ;     none.
                                        (0633) ;
                                        (0634) ;  SIDE EFFECTS:
                                        (0635) ;    The A and X registers may be modified by this or future implementations
                                        (0636) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0637) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0638) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0639) ;    functions.
                                        (0640) ;
                                        (0641) 
                                        (0642)  UART_Board_PutSHexInt:
                                        (0643) _UART_Board_PutSHexInt:
                                        (0644)    RAM_PROLOGUE RAM_USE_CLASS_1
05A5: 4B       SWAP  A,X                (0645)    swap  A,X
05A6: 9F EA    CALL  _UART_Board_PutSHexByte(0646)    call  UART_Board_PutSHexByte        ; Print MSB
05A8: 5B       MOV   A,X                (0647)    mov   A,X                           ; Move LSB into position
05A9: 9F E7    CALL  _UART_Board_PutSHexByte(0648)    call  UART_Board_PutSHexByte        ; Print LSB
                                        (0649)    RAM_EPILOGUE RAM_USE_CLASS_1
05AB: 7F       RET                      (0650)    ret
05AC: 49 3B 10 TST   REG[0x3B],0x10     
05AF: AF FC    JZ    _UART_Board_PutChar
05B1: 60 39    MOV   REG[0x39],A        
                                        (0651) .ENDSECTION
                                        (0652) 
                                        (0653) 
                                        (0654) .SECTION
                                        (0655) ;-----------------------------------------------------------------------------
                                        (0656) ;  FUNCTION NAME: UART_Board_PutChar
                                        (0657) ;
                                        (0658) ;  DESCRIPTION:
                                        (0659) ;     Send character out through UART TX port.
                                        (0660) ;-----------------------------------------------------------------------------
                                        (0661) ;
                                        (0662) ;  ARGUMENTS:
                                        (0663) ;     A has Character to send to UART Tx Port
                                        (0664) ;
                                        (0665) ;  RETURNS:
                                        (0666) ;     none
                                        (0667) ;
                                        (0668) ;  SIDE EFFECTS:
                                        (0669) ;    The A and X registers may be modified by this or future implementations
                                        (0670) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0671) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0672) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0673) ;    functions.
                                        (0674) ;
                                        (0675) 
                                        (0676)    macro InLinePutChar( Source )
                                        (0677) .BufEmptyWaitLoop:
                                        (0678)    tst REG[UART_Board_TX_CONTROL_REG], UART_Board_TX_BUFFER_EMPTY     ; Check Tx Status
                                        (0679)    jz  .BufEmptyWaitLoop
                                        (0680)    mov REG[UART_Board_TX_BUFFER_REG], @Source    ; Write data to Tx Port
                                        (0681)    endm
                                        (0682) 
                                        (0683)  UART_Board_PutChar:
                                        (0684) _UART_Board_PutChar:
                                        (0685)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0686)    InLinePutChar A
                                        (0687)    RAM_EPILOGUE RAM_USE_CLASS_1
05B3: 7F       RET                      (0688)    ret
                                        (0689) .ENDSECTION
                                        (0690) 
                                        (0691) 
                                        (0692) .SECTION
                                        (0693) ;-----------------------------------------------------------------------------
                                        (0694) ;  FUNCTION NAME: UART_Board_cGetChar
                                        (0695) ;
                                        (0696) ;  DESCRIPTION:
                                        (0697) ;     Read character from UART RX port.
                                        (0698) ;-----------------------------------------------------------------------------
                                        (0699) ;
                                        (0700) ;  ARGUMENTS:
                                        (0701) ;      none
                                        (0702) ;
                                        (0703) ;  RETURNS:
                                        (0704) ;     char that is returned from UART
                                        (0705) ;
                                        (0706) ;  SIDE EFFECTS:
                                        (0707) ;    The A and X registers may be modified by this or future implementations
                                        (0708) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0709) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0710) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0711) ;    functions.
                                        (0712) ;
                                        (0713) ;    Program flow will stay in this function until a character is received.
                                        (0714) ;    If the watchdog timer is used, care must be taken to make sure that
                                        (0715) ;    the delay between characters is less than the watchdog timeout.
                                        (0716) ;
                                        (0717)  UART_Board_cGetChar:
                                        (0718) _UART_Board_cGetChar:
                                        (0719)    RAM_PROLOGUE RAM_USE_CLASS_1
05B4: 49 3F 08 TST   REG[0x3F],0x8      (0720)    tst REG[UART_Board_RX_CONTROL_REG],UART_Board_RX_REG_FULL    ; Check if a character is ready
05B7: AF FC    JZ    _UART_Board_cGetChar(0721)    jz  UART_Board_cGetChar                              ; If not loop
05B9: 5D 3E    MOV   A,REG[0x3E]        (0722)    mov A, REG[UART_Board_RX_BUFFER_REG]                 ; Get character
                                        (0723)    RAM_EPILOGUE RAM_USE_CLASS_1
05BB: 7F       RET                      (0724)    ret
                                        (0725) .ENDSECTION
                                        (0726) 
                                        (0727) 
                                        (0728) .SECTION
                                        (0729) ;-----------------------------------------------------------------------------
                                        (0730) ;  FUNCTION NAME: UART_Board_cReadChar
                                        (0731) ;
                                        (0732) ;  DESCRIPTION:
                                        (0733) ;     Read character from UART RX port.
                                        (0734) ;-----------------------------------------------------------------------------
                                        (0735) ;
                                        (0736) ;  ARGUMENTS:
                                        (0737) ;      none
                                        (0738) ;
                                        (0739) ;  RETURNS:
                                        (0740) ;     char that is returned from UART
                                        (0741) ;
                                        (0742) ;  SIDE EFFECTS:
                                        (0743) ;    The A and X registers may be modified by this or future implementations
                                        (0744) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0745) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0746) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0747) ;    functions.
                                        (0748) ;
                                        (0749) ;    A valid 0x00 character will be ignored, since a 0x00 return value
                                        (0750) ;    implies a valid character or an error condition occured.
                                        (0751) ;
                                        (0752)  UART_Board_cReadChar:
                                        (0753) _UART_Board_cReadChar:
                                        (0754)    RAM_PROLOGUE RAM_USE_CLASS_1
05BC: 5D 3F    MOV   A,REG[0x3F]        (0755)    mov  A,REG[UART_Board_RX_CONTROL_REG]                   ; Get Status of RX
05BE: 08       PUSH  A                  (0756)    push A
05BF: 21 08    AND   A,0x8              (0757)    and  A,UART_Board_RX_COMPLETE                           ; Check if a character is ready
05C1: B0 04    JNZ   0x05C6             (0758)    jnz  .RX_DATA_RDY                                       ; Data Ready go read it.
05C3: 18       POP   A                  (0759)    pop  A
05C4: 80 0B    JMP   0x05D0             (0760)    jmp  .RX_NO_VALID_CHAR
                                        (0761) 
                                        (0762) .RX_DATA_RDY:
05C6: 5D 3E    MOV   A,REG[0x3E]        (0763)    mov  A,REG[UART_Board_RX_BUFFER_REG ]          
05C8: 4B       SWAP  A,X                (0764)    swap A,X                                                ; determine if data is valid
                                        (0765) 
05C9: 18       POP   A                  (0766)    pop  A                                                  ; Check for errors
05CA: 21 A0    AND   A,0xA0             (0767)    and  A,(UART_Board_RX_PARITY_ERROR | UART_Board_RX_FRAMING_ERROR)
05CC: B0 03    JNZ   0x05D0             (0768)    jnz  .RX_NO_VALID_CHAR                                  ; No character, exit
05CE: 4B       SWAP  A,X                (0769)    swap A,X                                                ; Put data in A and exit
                                        (0770)    RAM_EPILOGUE RAM_USE_CLASS_1
05CF: 7F       RET                      (0771)    ret
                                        (0772) 
                                        (0773) .RX_NO_VALID_CHAR:
05D0: 50 00    MOV   A,0x0              (0774)    mov A,0x00                                              ; Zero out character
                                        (0775) 
                                        (0776)  End_UART_Board_cReadChar:
                                        (0777)    RAM_EPILOGUE RAM_USE_CLASS_1
05D2: 7F       RET                      (0778)    ret
                                        (0779) .ENDSECTION
                                        (0780) 
                                        (0781) 
                                        (0782) .SECTION
                                        (0783) ;-----------------------------------------------------------------------------
                                        (0784) ;  FUNCTION NAME: UART_Board_iReadChar
                                        (0785) ;
                                        (0786) ;  WARNING WARNING WARNING  Negative return value not correct!!!!  We may want
                                        (0787) ;  to just set a value in the upper byte if error conditions exists.
                                        (0788) ;
                                        (0789) ;  DESCRIPTION:
                                        (0790) ;     Read character from UART RX port.
                                        (0791) ;-----------------------------------------------------------------------------
                                        (0792) ;
                                        (0793) ;  ARGUMENTS:
                                        (0794) ;      none
                                        (0795) ;
                                        (0796) ;  RETURNS:
                                        (0797) ;     An integer value is returned.  A negative value inplies and error
                                        (0798) ;     condition, a positive value between 0 and 255 is the return character.
                                        (0799) ;
                                        (0800) ;     Error Codes:
                                        (0801) ;        0x80CC    Parity Error
                                        (0802) ;        0x40CC    Overrun Error
                                        (0803) ;        0x20CC    Framing Error
                                        (0804) ;        0x01CC    No Data available
                                        (0805) ;
                                        (0806) ;  SIDE EFFECTS:
                                        (0807) ;    The A and X registers may be modified by this or future implementations
                                        (0808) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0809) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0810) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0811) ;    functions.
                                        (0812) ;
                                        (0813)  UART_Board_iReadChar:
                                        (0814) _UART_Board_iReadChar:
                                        (0815)    RAM_PROLOGUE RAM_USE_CLASS_1
05D3: 5D 3F    MOV   A,REG[0x3F]        (0816)    mov  A,REG[UART_Board_RX_CONTROL_REG]                   ; Get Status of RX
                                        (0817)                                                            ; Mask only errors and data ready
05D5: 21 E8    AND   A,0xE8             (0818)    and  A,(UART_Board_RX_ERROR|UART_Board_RX_REG_FULL)
05D7: 08       PUSH  A                  (0819)    push A
05D8: 21 08    AND   A,0x8              (0820)    and  A,UART_Board_RX_COMPLETE                           ; Check if a character is ready
05DA: B0 07    JNZ   0x05E2             (0821)    jnz  .RX_GET_DATA                                       ; Data Ready go read it.
05DC: 18       POP   A                  (0822)    pop  A
05DD: 29 01    OR    A,0x1              (0823)    or   A,UART_Board_RX_NO_DATA                            ; Add no data flag
05DF: 4B       SWAP  A,X                (0824)    swap A,X
05E0: 80 07    JMP   0x05E8             (0825)    jmp  End_UART_Board_iReadChar
                                        (0826) 
                                        (0827) .RX_GET_DATA:
05E2: 18       POP   A                  (0828)    pop  A
05E3: 21 E0    AND   A,0xE0             (0829)    and  A,UART_Board_RX_ERROR
05E5: 4B       SWAP  A,X                (0830)    swap A,X
05E6: 5D 3E    MOV   A,REG[0x3E]        (0831)    mov  A,REG[UART_Board_RX_BUFFER_REG ]                   ; Read data first, then
                                        (0832)                                                            ; determine if data is valid
                                        (0833) 
                                        (0834)  End_UART_Board_iReadChar:
                                        (0835)    RAM_EPILOGUE RAM_USE_CLASS_1
05E8: 7F       RET                      (0836)    ret
05E9: 70 BF    AND   F,0xBF             
05EB: 60 D3    MOV   REG[0xD3],A        
                                        (0837) .ENDSECTION
                                        (0838) 
                                        (0839) 
                                        (0840) .SECTION
                                        (0841) ;-----------------------------------------------------------------------------
                                        (0842) ;  FUNCTION NAME: UART_Board_PutString
                                        (0843) ;
                                        (0844) ;  DESCRIPTION:
                                        (0845) ;     Send String out through UART TX port.
                                        (0846) ;-----------------------------------------------------------------------------
                                        (0847) ;
                                        (0848) ;  ARGUMENTS:
                                        (0849) ;     Pointer to String
                                        (0850) ;     A has MSB of string address
                                        (0851) ;     X has LSB of string address
                                        (0852) ;
                                        (0853) ;  RETURNS:
                                        (0854) ;     none
                                        (0855) ;
                                        (0856) ;  SIDE EFFECTS:
                                        (0857) ;    The A and X registers may be modified by this or future implementations
                                        (0858) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0859) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0860) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0861) ;    functions.
                                        (0862) ;          
                                        (0863) ;    Currently only the page pointer registers listed below are modified: 
                                        (0864) ;          IDX_PP
                                        (0865) ;
                                        (0866)  UART_Board_PutString:
                                        (0867) _UART_Board_PutString:
                                        (0868)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0869)    RAM_SETPAGE_IDX A
                                        (0870) .PutStringLoop:
05ED: 52 00    MOV   A,[X+0]            (0871)    mov   A,[X]                                   ; Get value pointed to by X
05EF: A0 06    JZ    0x05F6             (0872)    jz    End_PutString                           ; Check for end of string
05F1: 9F B9    CALL  _UART_Board_PutChar(0873)    call  UART_Board_PutChar                      ; Send character to Tx port
05F3: 75       INC   X                  (0874)    inc   X                                       ; Advance pointer to next character
05F4: 8F F8    JMP   0x05ED             (0875)    jmp   .PutStringLoop                          ; Get next character
05F6: 70 3F    AND   F,0x3F             
05F8: 71 C0    OR    F,0xC0             
                                        (0876) 
                                        (0877) End_PutString:
                                        (0878)    RAM_EPILOGUE RAM_USE_CLASS_3
05FA: 7F       RET                      (0879)    ret
05FB: 70 BF    AND   F,0xBF             
05FD: 62 D3 03 MOV   REG[0xD3],0x3      
                                        (0880) .ENDSECTION
                                        (0881)     
                                        (0882) .SECTION
                                        (0883) ;-----------------------------------------------------------------------------
                                        (0884) ;  FUNCTION NAME: UART_Board_Write
                                        (0885) ;
                                        (0886) ;  DESCRIPTION:
                                        (0887) ;     Send String of length X to serial port
                                        (0888) ;-----------------------------------------------------------------------------
                                        (0889) ;
                                        (0890) ;  ARGUMENTS:
                                        (0891) ;     Pointer to String
                                        (0892) ;     [SP-5] Count of characters to send
                                        (0893) ;     [SP-4] has MSB of string address
                                        (0894) ;     [SP-3] has LSB of string address
                                        (0895) ;
                                        (0896) ;  RETURNS:
                                        (0897) ;     none
                                        (0898) ;
                                        (0899) ;  SIDE EFFECTS:
                                        (0900) ;    The A and X registers may be modified by this or future implementations
                                        (0901) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0902) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0903) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0904) ;    functions.
                                        (0905) ;          
                                        (0906) ;    Currently only the page pointer registers listed below are modified: 
                                        (0907) ;          IDX_PP
                                        (0908) ;
                                        (0909) CNT_LEN:    equ -5                               ; Length of data to send
                                        (0910) STR_MSB:    equ -4                               ; MSB pointer of string 
                                        (0911) STR_LSB:    equ -3                               ; LSB pointer of string 
                                        (0912) 
                                        (0913)  UART_Board_Write:
                                        (0914) _UART_Board_Write:
                                        (0915)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0916)    RAM_SETPAGE_IDX2STK                           ; Refer indexed addrs to the stack
0600: 4F       MOV   X,SP               (0917)    mov   X, SP                                   ; Establish the frame pointer 
                                        (0918) 
                                        (0919) .NextByteLoop:
0601: 52 FB    MOV   A,[X-5]            (0920)    mov   A, [X+CNT_LEN]                          ; End of the string?
0603: A0 1A    JZ    0x061E             (0921)    jz    .End_Write                              ;   Yes, prepare to exit
0605: 7B FB    DEC   [X-5]              (0922)    dec   [X+CNT_LEN]                             ; Decrement counter
                                        (0923) 
                                        (0924)    IF SYSTEM_LARGE_MEMORY_MODEL
0607: 52 FC    MOV   A,[X-4]            (0925)    mov   A, [X+STR_MSB]                          ; Load pointer to char to send
                                        (0926)    ENDIF
                                        (0927) 
0609: 59 FD    MOV   X,[X-3]            (0928)    mov   X, [X+STR_LSB]                          ; Load pointer to char to send
060B: 60 D3    MOV   REG[0xD3],A        
                                        (0929)    RAM_SETPAGE_IDX A                             ; switch index pages
060D: 52 00    MOV   A,[X+0]            (0930)    mov   A, [X]                                  ; Grab the data
060F: 49 3B 10 TST   REG[0x3B],0x10     
0612: AF FC    JZ    0x060F             
0614: 60 39    MOV   REG[0x39],A        
                                        (0931)    InLinePutChar A                               ; Put data in empty TX buf reg
0616: 4F       MOV   X,SP               (0932)    mov   X, SP                                   ; Recover frame pointer
0617: 62 D3 03 MOV   REG[0xD3],0x3      
                                        (0933)    RAM_SETPAGE_IDX2STK                           ; Prepare for stack access
061A: 77 FD    INC   [X-3]              (0934)    inc   [X+STR_LSB]                             ; Point to next byte, but do not
061C: 8F E4    JMP   0x0601             (0935)    jmp   .NextByteLoop                           ;    cross RAM page boundary!
061E: 70 3F    AND   F,0x3F             
0620: 71 C0    OR    F,0xC0             
                                        (0936) 
                                        (0937) .End_Write:
                                        (0938)    RAM_EPILOGUE RAM_USE_CLASS_3
0622: 7F       RET                      (0939)    ret
                                        (0940) .ENDSECTION
                                        (0941)     
                                        (0942) 
                                        (0943) .SECTION
                                        (0944) ;-----------------------------------------------------------------------------
                                        (0945) ;  FUNCTION NAME: UART_Board_CWrite
                                        (0946) ;
                                        (0947) ;             WARNING WARNING NOT COMPLETE
                                        (0948) ;
                                        (0949) ;  DESCRIPTION:
                                        (0950) ;     Send String of length X to serial port
                                        (0951) ;-----------------------------------------------------------------------------
                                        (0952) ;
                                        (0953) ;  ARGUMENTS:
                                        (0954) ;     [SP-4] MSB of Count of character to send
                                        (0955) ;     [SP-3] LSB of Count of character to send
                                        (0956) ;     [SP-2] has MSB of string address
                                        (0957) ;     [SP-1] has LSB of string address
                                        (0958) ;
                                        (0959) ;  RETURNS:
                                        (0960) ;     none
                                        (0961) ;
                                        (0962) ;  SIDE EFFECTS:
                                        (0963) ;    The A and X registers may be modified by this or future implementations
                                        (0964) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0965) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0966) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0967) ;    functions.
                                        (0968) ;
                                        (0969) CLEN_MSB:   equ -6           ; MSB Length of data to send
                                        (0970) CLEN_LSB:   equ -5           ; LSB Length of data to send
                                        (0971) CSTR_MSB:   equ -4           ; MSB pointer of string
                                        (0972) CSTR_LSB:   equ -3           ; LSB pointer of string
                                        (0973) 
                                        (0974)  UART_Board_CWrite:
                                        (0975) _UART_Board_CWrite:
                                        (0976)    RAM_PROLOGUE RAM_USE_CLASS_2
0623: 4F       MOV   X,SP               (0977)    mov   X,SP
                                        (0978) .CW_Loop:
0624: 3D FA 00 CMP   [X-6],0x0          (0979)    cmp   [X+CLEN_MSB],0x00                  ; Check for zero counter
0627: B0 06    JNZ   0x062E             (0980)    jnz   .CW_WRITEIT
0629: 3D FB 00 CMP   [X-5],0x0          (0981)    cmp   [X+CLEN_LSB],0x00
062C: A0 1D    JZ    0x064A             (0982)    jz    .End_CWrite                        ; Leave if done
                                        (0983) 
                                        (0984) .CW_WRITEIT:                                
062E: 10       PUSH  X                  (0985)    push  X                                  ; Save frame pointer
062F: 52 FC    MOV   A,[X-4]            (0986)    mov   A,[X+CSTR_MSB]
0631: 59 FD    MOV   X,[X-3]            (0987)    mov   X,[X+CSTR_LSB]
0633: 28       ROMX                     (0988)    romx                                     ; Get character from ROM
0634: 49 3B 10 TST   REG[0x3B],0x10     
0637: AF FC    JZ    0x0634             
0639: 60 39    MOV   REG[0x39],A        
                                        (0989)    InLinePutChar A                          ; Put data in empty TX buf reg
063B: 20       POP   X                  (0990)    pop   X                                  ; Restore frame pointer
063C: 07 FD 01 ADD   [X-3],0x1          (0991)    add   [X+CSTR_LSB],1                     ; Increment the string pointer
063F: 0F FC 00 ADC   [X-4],0x0          (0992)    adc   [X+CSTR_MSB],0
0642: 17 FB 01 SUB   [X-5],0x1          (0993)    sub   [X+CLEN_LSB],0x01                  ; Dec the counter
0645: 1F FA 00 SBB   [X-6],0x0          (0994)    sbb   [X+CLEN_MSB],0x00
0648: 8F DB    JMP   0x0624             (0995)    jmp   .CW_Loop
064A: 70 3F    AND   F,0x3F             
064C: 71 C0    OR    F,0xC0             
                                        (0996) 
                                        (0997) .End_CWrite:
                                        (0998)    RAM_EPILOGUE RAM_USE_CLASS_2
064E: 7F       RET                      (0999)    ret
                                        (1000) .ENDSECTION
                                        (1001) 
                                        (1002) 
                                        (1003) .SECTION
                                        (1004) ;-----------------------------------------------------------------------------
                                        (1005) ;  FUNCTION NAME: UART_Board_CPutString
                                        (1006) ;
                                        (1007) ;  DESCRIPTION:
                                        (1008) ;     Send String out through UART TX port.
                                        (1009) ;-----------------------------------------------------------------------------
                                        (1010) ;
                                        (1011) ;  ARGUMENTS:
                                        (1012) ;     Pointer to String
                                        (1013) ;     A has MSB of string address
                                        (1014) ;     X has LSB of string address
                                        (1015) ;
                                        (1016) ;  RETURNS:
                                        (1017) ;     none
                                        (1018) ;
                                        (1019) ;  SIDE EFFECTS:
                                        (1020) ;    The A and X registers may be modified by this or future implementations
                                        (1021) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1022) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1023) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1024) ;    functions.
                                        (1025) ;
                                        (1026)  UART_Board_CPutString:
                                        (1027) _UART_Board_CPutString:
                                        (1028)    RAM_PROLOGUE RAM_USE_CLASS_1
064F: 08       PUSH  A                  (1029)    push  A                                       ; Store ROM pointer
0650: 10       PUSH  X                  (1030)    push  X
0651: 28       ROMX                     (1031)    romx                                          ; Get character from ROM
0652: A0 0B    JZ    0x065E             (1032)    jz    .End_CPutString
0654: 9F 56    CALL  _UART_Board_PutChar(1033)    call  UART_Board_PutChar                      ; Print character
0656: 20       POP   X                  (1034)    pop   X
0657: 18       POP   A                  (1035)    pop   A
0658: 75       INC   X                  (1036)    inc   X                                       ; Inc LSB of pointer
0659: DF F5    JNC   _UART_Board_CPutString(1037)    jnc   UART_Board_CPutString                   ; Check for carry
065B: 74       INC   A                  (1038)    inc   A                                       ; Inc MSB of pointer
065C: 8F F2    JMP   _UART_Board_CPutString(1039)    jmp   UART_Board_CPutString
                                        (1040) 
                                        (1041) 
                                        (1042) .End_CPutString:
065E: 38 FE    ADD   SP,0xFE            (1043)    add   SP, -2
                                        (1044)    RAM_EPILOGUE RAM_USE_CLASS_1
0660: 7F       RET                      (1045)    ret
                                        (1046) .ENDSECTION
                                        (1047) 
                                        (1048) 
                                        (1049) .SECTION
                                        (1050) ;-----------------------------------------------------------------------------
                                        (1051) ;  FUNCTION NAME: UART_Board_PutCRLF
                                        (1052) ;
                                        (1053) ;  DESCRIPTION:
                                        (1054) ;     Send a CR and LF
                                        (1055) ;-----------------------------------------------------------------------------
                                        (1056) ;
                                        (1057) ;  ARGUMENTS:
                                        (1058) ;     none.
                                        (1059) ;
                                        (1060) ;  RETURNS:
                                        (1061) ;     none.
                                        (1062) ;
                                        (1063) ;  SIDE EFFECTS:
                                        (1064) ;    The A and X registers may be modified by this or future implementations
                                        (1065) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1066) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1067) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1068) ;    functions.
                                        (1069) ;
                                        (1070)  UART_Board_PutCRLF:
                                        (1071) _UART_Board_PutCRLF:
                                        (1072)    RAM_PROLOGUE RAM_USE_CLASS_1
0661: 50 0D    MOV   A,0xD              (1073)    mov  A,0x0D                        ; Send CR
0663: 9F 47    CALL  _UART_Board_PutChar(1074)    call UART_Board_PutChar
0665: 50 0A    MOV   A,0xA              (1075)    mov  A,0x0A                        ; Send LF
0667: 9F 43    CALL  _UART_Board_PutChar(1076)    call UART_Board_PutChar
                                        (1077)    RAM_EPILOGUE RAM_USE_CLASS_1
0669: 7F       RET                      (1078)    ret
                                        (1079) .ENDSECTION
                                        (1080) 
                                        (1081) 
                                        (1082) IF (UART_Board_RXBUF_ENABLE)
                                        (1083) ;=============================================================================
                                        (1084) ;=============================================================================
                                        (1085) ;
                                        (1086) ;     Command Buffer commands
                                        (1087) ;
                                        (1088) ;=============================================================================
                                        (1089) ;=============================================================================
                                        (1090) 
                                        (1091) .SECTION
                                        (1092) ;-----------------------------------------------------------------------------
                                        (1093) ;  FUNCTION NAME: UART_Board_CmdReset
                                        (1094) ;
                                        (1095) ;  DESCRIPTION:
                                        (1096) ;     Reset command string and status flags
                                        (1097) ;-----------------------------------------------------------------------------
                                        (1098) ;
                                        (1099) ;  ARGUMENTS:
                                        (1100) ;     none.
                                        (1101) ;
                                        (1102) ;  RETURNS:
                                        (1103) ;     none.
                                        (1104) ;
                                        (1105) ;  SIDE EFFECTS:
                                        (1106) ;    The A and X registers may be modified by this or future implementations
                                        (1107) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1108) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1109) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1110) ;    functions.
                                        (1111) ;          
                                        (1112) ;    Currently only the page pointer registers listed below are modified: 
                                        (1113) ;          CUR_PP
                                        (1114) ;
                                        (1115) ;  THEORY of OPERATION or PROCEDURE:
                                        (1116) ;     Clear the command buffer, command counter, and flag.
                                        (1117) ;
                                        (1118)  UART_Board_CmdReset:
                                        (1119) _UART_Board_CmdReset:
                                        (1120)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1121)    RAM_SETPAGE_CUR >UART_Board_aRxBuffer
                                        (1122)    mov [UART_Board_aRxBuffer], 0x00
                                        (1123)    RAM_SETPAGE_CUR >UART_Board_bRxCnt
                                        (1124)    mov [UART_Board_bRxCnt], 0x00
                                        (1125)    and [UART_Board_fStatus], 0x00
                                        (1126)    RAM_SETPAGE_CUR >ptrParam
                                        (1127)    mov [ptrParam],0x00
                                        (1128)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1129)    ret
                                        (1130) .ENDSECTION
                                        (1131) 
                                        (1132) 
                                        (1133) .SECTION
                                        (1134) ;-----------------------------------------------------------------------------
                                        (1135) ;  FUNCTION NAME: UART_Board_bCmdCheck
                                        (1136) ;
                                        (1137) ;  DESCRIPTION:
                                        (1138) ;     Check to see if valid command in buffer.
                                        (1139) ;-----------------------------------------------------------------------------
                                        (1140) ;
                                        (1141) ;  ARGUMENTS:
                                        (1142) ;     none.
                                        (1143) ;
                                        (1144) ;  RETURNS:
                                        (1145) ;     BYTE  fStatus - Status of command receive buffer.
                                        (1146) ;                     Returns non-zero value in A if command is valid.
                                        (1147) ;
                                        (1148) ;  SIDE EFFECTS:
                                        (1149) ;    The A and X registers may be modified by this or future implementations
                                        (1150) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1151) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1152) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1153) ;    functions.
                                        (1154) ;          
                                        (1155) ;    Currently only the page pointer registers listed below are modified: 
                                        (1156) ;          CUR_PP
                                        (1157) ;
                                        (1158) ;  THEORY of OPERATION or PROCEDURE:
                                        (1159) ;     Read the status and control register.
                                        (1160) ;
                                        (1161)  UART_Board_bCmdCheck:
                                        (1162) _UART_Board_bCmdCheck:
                                        (1163)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1164)    RAM_SETPAGE_CUR >UART_Board_fStatus
                                        (1165)    mov A,  [UART_Board_fStatus]
                                        (1166)    and A, UART_Board_RX_BUF_CMDTERM              ; Mask off Command status
                                        (1167)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1168)    ret
                                        (1169) .ENDSECTION
                                        (1170)     
                                        (1171) 
                                        (1172) .SECTION
                                        (1173) ;-----------------------------------------------------------------------------
                                        (1174) ;  FUNCTION NAME: UART_Board_bErrCheck
                                        (1175) ;
                                        (1176) ;  DESCRIPTION:
                                        (1177) ;     Check to see if an error has occured since last CmdReset
                                        (1178) ;-----------------------------------------------------------------------------
                                        (1179) ;
                                        (1180) ;  ARGUMENTS:
                                        (1181) ;     none.
                                        (1182) ;
                                        (1183) ;  RETURNS:
                                        (1184) ;     BYTE  fStatus - Status of command receive buffer.
                                        (1185) ;                     Returns non-zero value in A if command is valid.
                                        (1186) ;           0x80 => Parity Error
                                        (1187) ;           0x40 => OverRun Error
                                        (1188) ;           0x20 => Framing Error
                                        (1189) ;           0x10 => Software Buffer OverRun
                                        (1190) ;
                                        (1191) ;  SIDE EFFECTS:
                                        (1192) ;    The A and X registers may be modified by this or future implementations
                                        (1193) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1194) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1195) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1196) ;    functions.
                                        (1197) ;          
                                        (1198) ;    Currently only the page pointer registers listed below are modified: 
                                        (1199) ;          CUR_PP
                                        (1200) ;     Error Status is clear when read.
                                        (1201) ;
                                        (1202) ;  THEORY of OPERATION or PROCEDURE:
                                        (1203) ;     Read RX buffer error status and clear status
                                        (1204) ;
                                        (1205)  UART_Board_bErrCheck:
                                        (1206) _UART_Board_bErrCheck:
                                        (1207)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1208)    RAM_SETPAGE_CUR >UART_Board_fStatus
                                        (1209)    mov A,  [UART_Board_fStatus]
                                        (1210)    and A, UART_Board_RX_BUF_ERROR                ; Mask off Error status
                                        (1211)    and [UART_Board_fStatus], ~UART_Board_RX_BUF_ERROR
                                        (1212)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1213)    ret
                                        (1214) .ENDSECTION
                                        (1215) 
                                        (1216) .SECTION
                                        (1217) ;-----------------------------------------------------------------------------
                                        (1218) ;  FUNCTION NAME: UART_Board_bCmdLength
                                        (1219) ;
                                        (1220) ;  DESCRIPTION:
                                        (1221) ;     Get length of command string
                                        (1222) ;-----------------------------------------------------------------------------
                                        (1223) ;
                                        (1224) ;  ARGUMENTS:
                                        (1225) ;     none.
                                        (1226) ;
                                        (1227) ;  RETURNS:
                                        (1228) ;     BYTE  bRxCnt    Returns the command length in A.
                                        (1229) ;
                                        (1230) ;  SIDE EFFECTS:
                                        (1231) ;    The A and X registers may be modified by this or future implementations
                                        (1232) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1233) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1234) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1235) ;    functions.
                                        (1236) ;          
                                        (1237) ;    Currently only the page pointer registers listed below are modified: 
                                        (1238) ;          CUR_PP
                                        (1239) ;
                                        (1240)  UART_Board_bCmdLength:
                                        (1241) _UART_Board_bCmdLength:
                                        (1242)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1243)    RAM_SETPAGE_CUR >UART_Board_bRxCnt
                                        (1244)    mov A,  [UART_Board_bRxCnt]
                                        (1245)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1246)    ret
                                        (1247) .ENDSECTION
                                        (1248) 
                                        (1249) 
                                        (1250) .SECTION
                                        (1251) ;-----------------------------------------------------------------------------
                                        (1252) ;  FUNCTION NAME: UART_Board_szGetParam
                                        (1253) ;
                                        (1254) ;  DESCRIPTION:
                                        (1255) ;      Return next parameter from UART_Board Rx buffer
                                        (1256) ;-----------------------------------------------------------------------------
                                        (1257) ;
                                        (1258) ;  ARGUMENTS:  none
                                        (1259) ;
                                        (1260) ;  RETURNS:
                                        (1261) ;     A => MSB of parameter address
                                        (1262) ;     X => LSB of parameter address
                                        (1263) ;
                                        (1264) ;  SIDE EFFECTS:
                                        (1265) ;    The A and X registers may be modified by this or future implementations
                                        (1266) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1267) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1268) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1269) ;    functions.
                                        (1270) ;          
                                        (1271) ;    Currently only the page pointer registers listed below are modified: 
                                        (1272) ;          CUR_PP
                                        (1273) ;          IDX_PP
                                        (1274) ;
                                        (1275) ;     The receive string is modified by placing Null characters at the end
                                        (1276) ;     of each parameter as they are recovered.
                                        (1277) ;
                                        (1278) ;  THEORY OF OPERATION:
                                        (1279) ;     This function is a stateful generator of addresses to the "parameters"
                                        (1280) ;     of an input "Command". It scans the (optional) input buffer and breaks
                                        (1281) ;     each lexically distinct element into a null-terminated string by replacing
                                        (1282) ;     delimiters with nulls, as appropriate. The state of the generator is 
                                        (1283) ;     maintained by the private variable ptrParam, which is a buffer-relative
                                        (1284) ;     offset. The generator is initialized by a call to the function
                                        (1285) ;     UART_Board_CmdReset which resets the entire buffer to the 'empty'
                                        (1286) ;     state. Typically this function, UART_Board_szGetParam, is
                                        (1287) ;     not called until the buffer has been loaded with an entire command
                                        (1288) ;     (See UART_Board_bCmdCheck).
                                        (1289) ;
                                        (1290) ;     Note, there is no special distinction between the "command" and the 
                                        (1291) ;     "parameters". The first non-delimiter character of the buffer---the first
                                        (1292) ;     character of the "command"---is also, for the purposes of this function,
                                        (1293) ;     the first "parameter" to which it returns an address.
                                        (1294) ;
                                        (1295) ;     The value of a delimiter (commonly an ascii space, 0x20 and decimal 32)
                                        (1296) ;     is determined at configuration time by a user module parameter.
                                        (1297) ;
                                        (1298)  UART_Board_szGetParam:
                                        (1299) _UART_Board_szGetParam:
                                        (1300)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1301)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (1302)     
                                        (1303)    RAM_SETPAGE_CUR >ptrParam
                                        (1304)    mov   A, <UART_Board_aRxBuffer           ; Get address to receive buffer
                                        (1305)    add   A, [ptrParam]                      ; Add string offset
                                        (1306)    mov   X, A
                                        (1307)    RAM_SETPAGE_IDX >UART_Board_aRxBuffer
                                        (1308)    mov   A, [X]                             ; Get character pointed by X
                                        (1309)    jnz   .SkipOverDelimitersLoop            ; Null? No,  continue...
                                        (1310)    push  X                                  ;       Yes, Save LSB of current pointer
                                        (1311)    jmp   .End_GetNextParam
                                        (1312)                                             ; Check for delimiter and keep looping until
                                        (1313)                                             ; all leading delimiters have been found.
                                        (1314) .SkipOverDelimitersLoop:
                                        (1315)    cmp   A, UART_Board_DELIMITER            ; Do we have a delimiter?
                                        (1316)    jnz   .ParamStartFound                   ;   No,  Bingo! found a parameter
                                        (1317)    inc   X                                  ;   Yes, Increment both index and...
                                        (1318)    inc   [ptrParam]                         ;          the stored pointer.
                                        (1319)    mov   A, [X]                             ; Get character pointed by X
                                        (1320)    cmp   [ptrParam], (UART_Board_RX_BUFFER_SIZE -1)   ; End of buffer?
                                        (1321)    jnz   .SkipOverDelimitersLoop            ;   No,  continue the scan
                                        (1322) 
                                        (1323) .EndOfString:                               ;   Yes, end of string found...
                                        (1324)    push  X                                  ;        Save ptr
                                        (1325) .TerminateString:
                                        (1326)    mov   [X], 0x00                          ; Make sure string is zero
                                        (1327)    jmp   .End_GetNextParam
                                        (1328) 
                                        (1329) .ParamStartFound:
                                        (1330)    push  X                                  ; Beginning of parameter found, save pointer
                                        (1331) 
                                        (1332) .ParamLoop:                                 ; Now loop until end of parameter found.
                                        (1333)    inc   X                                  ; Advance pointers.
                                        (1334)    inc   [ptrParam]
                                        (1335)    cmp   [ptrParam], (UART_Board_RX_BUFFER_SIZE -1)   ; Check if we are at the end of buffer
                                        (1336)    jz    .TerminateString
                                        (1337)    mov   A, [X]                             ; Get next character
                                        (1338)    jz    .End_GetNextParam
                                        (1339)    cmp   A, UART_Board_DELIMITER            ; Check if we have a delimiter
                                        (1340)    jnz   .ParamLoop                         ; Still no delimiter, loop again
                                        (1341)    mov   [X], 0x00                          ; Replace delimiter with null for end of substring
                                        (1342)    inc   [ptrParam]
                                        (1343)    cmp   [ptrParam], (UART_Board_RX_BUFFER_SIZE -1)   ; Check if we are at the end of buffer
                                        (1344)    jnz   .End_GetNextParam                  ; If not end of string leave
                                        (1345)    mov   [ptrParam], (UART_Board_RX_BUFFER_SIZE -1)   ; Reset pointer to end of string.
                                        (1346) 
                                        (1347) .End_GetNextParam:
                                        (1348)    pop   X
                                        (1349)    push  X
                                        (1350)    cmp   [X], 0x00
                                        (1351)    jnz   .NotNullString
                                        (1352)    pop   X
                                        (1353)    mov   X, 0x00
                                        (1354)    mov   A, X
                                        (1355)    RAM_EPILOGUE RAM_USE_CLASS_3
                                        (1356)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1357)    ret
                                        (1358) 
                                        (1359) .NotNullString:
                                        (1360)    pop  X
                                        (1361)    mov  A, >UART_Board_aRxBuffer            ; Return pointer
                                        (1362)    RAM_EPILOGUE RAM_USE_CLASS_3
                                        (1363)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1364)    ret
                                        (1365) .ENDSECTION
                                        (1366) 
                                        (1367) 
                                        (1368) .SECTION
                                        (1369) ;-----------------------------------------------------------------------------
                                        (1370) ;  FUNCTION NAME: UART_Board_szGetRestOfParams
                                        (1371) ;
                                        (1372) ;  DESCRIPTION:
                                        (1373) ;      Returns a pointer to the rest of the UART RX buffer
                                        (1374) ;-----------------------------------------------------------------------------
                                        (1375) ;
                                        (1376) ;  ARGUMENTS:  none
                                        (1377) ;
                                        (1378) ;  RETURNS:
                                        (1379) ;     A => MSB of parameter
                                        (1380) ;     X => LSB of parameter
                                        (1381) ;
                                        (1382) ;  SIDE EFFECTS:
                                        (1383) ;    The A and X registers may be modified by this or future implementations
                                        (1384) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1385) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1386) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1387) ;    functions.
                                        (1388) ;          
                                        (1389) ;    Currently only the page pointer registers listed below are modified: 
                                        (1390) ;          CUR_PP
                                        (1391) ;
                                        (1392)  UART_Board_szGetRestOfParams:
                                        (1393) _UART_Board_szGetRestOfParams:
                                        (1394)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1395)    RAM_SETPAGE_CUR >ptrParam
                                        (1396)    mov  A, <UART_Board_aRxBuffer            ; Get address to receive buffer
                                        (1397)    add  A, [ptrParam]                       ; Add string offset
                                        (1398)    mov  X,A
                                        (1399)    mov  A,>UART_Board_aRxBuffer             ; Return pointer
                                        (1400)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1401)    ret
                                        (1402) .ENDSECTION
                                        (1403) 
                                        (1404) ENDIF
                                        (1405) 
                                        (1406) 
                                        (1407) ; End of File UART_Board.asm
FILE: lib\timer16.asm                   (0001) ;;*****************************************************************************
066A: 43 E1 02 OR    REG[0xE1],0x2      (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: Timer16.asm
                                        (0004) ;;   Version: 2.6, Updated on 2013/5/19 at 10:44:39
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Timer16 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "Timer16.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  Timer16_EnableInt
                                        (0030) export _Timer16_EnableInt
                                        (0031) export  Timer16_DisableInt
                                        (0032) export _Timer16_DisableInt
                                        (0033) export  Timer16_Start
                                        (0034) export _Timer16_Start
                                        (0035) export  Timer16_Stop
                                        (0036) export _Timer16_Stop
                                        (0037) export  Timer16_WritePeriod
                                        (0038) export _Timer16_WritePeriod
                                        (0039) export  Timer16_WriteCompareValue
                                        (0040) export _Timer16_WriteCompareValue
                                        (0041) export  Timer16_wReadCompareValue
                                        (0042) export _Timer16_wReadCompareValue
                                        (0043) export  Timer16_wReadTimer
                                        (0044) export _Timer16_wReadTimer
                                        (0045) export  Timer16_wReadTimerSaveCV
                                        (0046) export _Timer16_wReadTimerSaveCV
                                        (0047) 
                                        (0048) ; The following functions are deprecated and subject to omission in future releases
                                        (0049) ;
                                        (0050) export  wTimer16_ReadCompareValue  ; deprecated
                                        (0051) export _wTimer16_ReadCompareValue  ; deprecated
                                        (0052) export  wTimer16_ReadTimer         ; deprecated
                                        (0053) export _wTimer16_ReadTimer         ; deprecated
                                        (0054) export  wTimer16_ReadTimerSaveCV   ; deprecated
                                        (0055) export _wTimer16_ReadTimerSaveCV   ; deprecated
                                        (0056) 
                                        (0057) export  wTimer16_ReadCounter       ; obsolete
                                        (0058) export _wTimer16_ReadCounter       ; obsolete
                                        (0059) export  wTimer16_CaptureCounter    ; obsolete
                                        (0060) export _wTimer16_CaptureCounter    ; obsolete
                                        (0061) 
                                        (0062) 
                                        (0063) AREA led_display_RAM (RAM,REL)
                                        (0064) 
                                        (0065) ;-----------------------------------------------
                                        (0066) ;  Constant Definitions
                                        (0067) ;-----------------------------------------------
                                        (0068) 
                                        (0069) 
                                        (0070) ;-----------------------------------------------
                                        (0071) ; Variable Allocation
                                        (0072) ;-----------------------------------------------
                                        (0073) 
                                        (0074) 
                                        (0075) AREA UserModules (ROM, REL)
                                        (0076) 
                                        (0077) .SECTION
                                        (0078) ;-----------------------------------------------------------------------------
                                        (0079) ;  FUNCTION NAME: Timer16_EnableInt
                                        (0080) ;
                                        (0081) ;  DESCRIPTION:
                                        (0082) ;     Enables this timer's interrupt by setting the interrupt enable mask bit
                                        (0083) ;     associated with this User Module. This function has no effect until and
                                        (0084) ;     unless the global interrupts are enabled (for example by using the
                                        (0085) ;     macro M8C_EnableGInt).
                                        (0086) ;-----------------------------------------------------------------------------
                                        (0087) ;
                                        (0088) ;  ARGUMENTS:    None.
                                        (0089) ;  RETURNS:      Nothing.
                                        (0090) ;  SIDE EFFECTS: 
                                        (0091) ;    The A and X registers may be modified by this or future implementations
                                        (0092) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0093) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0094) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0095) ;    functions.
                                        (0096) ;
                                        (0097)  Timer16_EnableInt:
                                        (0098) _Timer16_EnableInt:
                                        (0099)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0100)    Timer16_EnableInt_M
                                        (0101)    RAM_EPILOGUE RAM_USE_CLASS_1
066D: 7F       RET                      (0102)    ret
066E: 41 E1 FD AND   REG[0xE1],0xFD     
                                        (0103) 
                                        (0104) .ENDSECTION
                                        (0105) 
                                        (0106) 
                                        (0107) .SECTION
                                        (0108) ;-----------------------------------------------------------------------------
                                        (0109) ;  FUNCTION NAME: Timer16_DisableInt
                                        (0110) ;
                                        (0111) ;  DESCRIPTION:
                                        (0112) ;     Disables this timer's interrupt by clearing the interrupt enable
                                        (0113) ;     mask bit associated with this User Module.
                                        (0114) ;-----------------------------------------------------------------------------
                                        (0115) ;
                                        (0116) ;  ARGUMENTS:    None
                                        (0117) ;  RETURNS:      Nothing
                                        (0118) ;  SIDE EFFECTS: 
                                        (0119) ;    The A and X registers may be modified by this or future implementations
                                        (0120) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0121) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0122) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0123) ;    functions.
                                        (0124) ;
                                        (0125)  Timer16_DisableInt:
                                        (0126) _Timer16_DisableInt:
                                        (0127)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0128)    Timer16_DisableInt_M
                                        (0129)    RAM_EPILOGUE RAM_USE_CLASS_1
0671: 7F       RET                      (0130)    ret
0672: 43 23 01 OR    REG[0x23],0x1      
                                        (0131) 
                                        (0132) .ENDSECTION
                                        (0133) 
                                        (0134) 
                                        (0135) .SECTION
                                        (0136) ;-----------------------------------------------------------------------------
                                        (0137) ;  FUNCTION NAME: Timer16_Start
                                        (0138) ;
                                        (0139) ;  DESCRIPTION:
                                        (0140) ;     Sets the start bit in the Control register of this user module.  The
                                        (0141) ;     timer will begin counting on the next input clock.
                                        (0142) ;-----------------------------------------------------------------------------
                                        (0143) ;
                                        (0144) ;  ARGUMENTS:    None
                                        (0145) ;  RETURNS:      Nothing
                                        (0146) ;  SIDE EFFECTS: 
                                        (0147) ;    The A and X registers may be modified by this or future implementations
                                        (0148) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0149) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0150) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0151) ;    functions.
                                        (0152) ;
                                        (0153)  Timer16_Start:
                                        (0154) _Timer16_Start:
                                        (0155)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0156)    Timer16_Start_M
                                        (0157)    RAM_EPILOGUE RAM_USE_CLASS_1
0675: 7F       RET                      (0158)    ret
0676: 41 23 FE AND   REG[0x23],0xFE     
                                        (0159) 
                                        (0160) .ENDSECTION
                                        (0161) 
                                        (0162) 
                                        (0163) .SECTION
                                        (0164) ;-----------------------------------------------------------------------------
                                        (0165) ;  FUNCTION NAME: Timer16_Stop
                                        (0166) ;
                                        (0167) ;  DESCRIPTION:
                                        (0168) ;     Disables timer operation by clearing the start bit in the Control
                                        (0169) ;     register of the LSB block.
                                        (0170) ;-----------------------------------------------------------------------------
                                        (0171) ;
                                        (0172) ;  ARGUMENTS:    None
                                        (0173) ;  RETURNS:      Nothing
                                        (0174) ;  SIDE EFFECTS: 
                                        (0175) ;    The A and X registers may be modified by this or future implementations
                                        (0176) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0177) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0178) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0179) ;    functions.
                                        (0180) ;
                                        (0181)  Timer16_Stop:
                                        (0182) _Timer16_Stop:
                                        (0183)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0184)    Timer16_Stop_M
                                        (0185)    RAM_EPILOGUE RAM_USE_CLASS_1
0679: 7F       RET                      (0186)    ret
                                        (0187) 
                                        (0188) .ENDSECTION
                                        (0189) 
                                        (0190) 
                                        (0191) .SECTION
                                        (0192) ;-----------------------------------------------------------------------------
                                        (0193) ;  FUNCTION NAME: Timer16_WritePeriod
                                        (0194) ;
                                        (0195) ;  DESCRIPTION:
                                        (0196) ;     Write the 16-bit period value into the Period register (DR1). If the
                                        (0197) ;     Timer user module is stopped, then this value will also be latched
                                        (0198) ;     into the Count register (DR0).
                                        (0199) ;-----------------------------------------------------------------------------
                                        (0200) ;
                                        (0201) ;  ARGUMENTS: fastcall16 WORD wPeriodValue (LSB in A, MSB in X)
                                        (0202) ;  RETURNS:   Nothing
                                        (0203) ;  SIDE EFFECTS:
                                        (0204) ;    The A and X registers may be modified by this or future implementations
                                        (0205) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0206) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0207) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0208) ;    functions.
                                        (0209) ;
                                        (0210)  Timer16_WritePeriod:
                                        (0211) _Timer16_WritePeriod:
                                        (0212)    RAM_PROLOGUE RAM_USE_CLASS_1
067A: 60 21    MOV   REG[0x21],A        (0213)    mov   reg[Timer16_PERIOD_LSB_REG], A
067C: 5B       MOV   A,X                (0214)    mov   A, X
067D: 60 25    MOV   REG[0x25],A        (0215)    mov   reg[Timer16_PERIOD_MSB_REG], A
                                        (0216)    RAM_EPILOGUE RAM_USE_CLASS_1
067F: 7F       RET                      (0217)    ret
                                        (0218) 
                                        (0219) .ENDSECTION
                                        (0220) 
                                        (0221) 
                                        (0222) .SECTION
                                        (0223) ;-----------------------------------------------------------------------------
                                        (0224) ;  FUNCTION NAME: Timer16_WriteCompareValue
                                        (0225) ;
                                        (0226) ;  DESCRIPTION:
                                        (0227) ;     Writes compare value into the Compare register (DR2).
                                        (0228) ;
                                        (0229) ;     NOTE! The Timer user module must be STOPPED in order to write the
                                        (0230) ;           Compare register. (Call Timer16_Stop to disable).
                                        (0231) ;-----------------------------------------------------------------------------
                                        (0232) ;
                                        (0233) ;  ARGUMENTS:    fastcall16 WORD wCompareValue (LSB in A, MSB in X)
                                        (0234) ;  RETURNS:      Nothing
                                        (0235) ;  SIDE EFFECTS: 
                                        (0236) ;    The A and X registers may be modified by this or future implementations
                                        (0237) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0238) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0239) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0240) ;    functions.
                                        (0241) ;
                                        (0242)  Timer16_WriteCompareValue:
                                        (0243) _Timer16_WriteCompareValue:
                                        (0244)    RAM_PROLOGUE RAM_USE_CLASS_1
0680: 60 22    MOV   REG[0x22],A        (0245)    mov   reg[Timer16_COMPARE_LSB_REG], A
0682: 5B       MOV   A,X                (0246)    mov   A, X
0683: 60 26    MOV   REG[0x26],A        (0247)    mov   reg[Timer16_COMPARE_MSB_REG], A
                                        (0248)    RAM_EPILOGUE RAM_USE_CLASS_1
0685: 7F       RET                      (0249)    ret
                                        (0250) 
                                        (0251) .ENDSECTION
                                        (0252) 
                                        (0253) 
                                        (0254) .SECTION
                                        (0255) ;-----------------------------------------------------------------------------
                                        (0256) ;  FUNCTION NAME: Timer16_wReadCompareValue
                                        (0257) ;
                                        (0258) ;  DESCRIPTION:
                                        (0259) ;     Reads the Compare registers.
                                        (0260) ;-----------------------------------------------------------------------------
                                        (0261) ;
                                        (0262) ;  ARGUMENTS:    None
                                        (0263) ;  RETURNS:      fastcall16 WORD wCompareValue (value of DR2 in the X & A registers)
                                        (0264) ;  SIDE EFFECTS: 
                                        (0265) ;    The A and X registers may be modified by this or future implementations
                                        (0266) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0267) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0268) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0269) ;    functions.
                                        (0270) ;
                                        (0271)  Timer16_wReadCompareValue:
                                        (0272) _Timer16_wReadCompareValue:
                                        (0273)  wTimer16_ReadCompareValue:                      ; this name deprecated
                                        (0274) _wTimer16_ReadCompareValue:                      ; this name deprecated
                                        (0275)    RAM_PROLOGUE RAM_USE_CLASS_1
0686: 5D 26    MOV   A,REG[0x26]        (0276)    mov   A, reg[Timer16_COMPARE_MSB_REG]
0688: 5C       MOV   X,A                (0277)    mov   X, A
0689: 5D 22    MOV   A,REG[0x22]        (0278)    mov   A, reg[Timer16_COMPARE_LSB_REG]
                                        (0279)    RAM_EPILOGUE RAM_USE_CLASS_1
068B: 7F       RET                      (0280)    ret
                                        (0281) 
                                        (0282) .ENDSECTION
                                        (0283) 
                                        (0284) 
                                        (0285) .SECTION
                                        (0286) ;-----------------------------------------------------------------------------
                                        (0287) ;  FUNCTION NAME: Timer16_wReadTimerSaveCV
                                        (0288) ;
                                        (0289) ;  DESCRIPTION:
                                        (0290) ;     Returns the value in the Count register (DR0), preserving the
                                        (0291) ;     value in the compare register (DR2).
                                        (0292) ;-----------------------------------------------------------------------------
                                        (0293) ;
                                        (0294) ;  ARGUMENTS: None
                                        (0295) ;  RETURNS:   fastcall16 WORD wCount (value of DR0 in the X & A registers)
                                        (0296) ;  SIDE EFFECTS:
                                        (0297) ;     1) May cause an interrupt, if interrupt on Compare is enabled.
                                        (0298) ;     2) If enabled, Global interrupts are momentarily disabled.
                                        (0299) ;     3) The user module is stopped momentarily while the compare value is
                                        (0300) ;        restored.  This may cause the Count register to miss one or more
                                        (0301) ;        counts depending on the input clock speed.
                                        (0302) ;     4) The A and X registers may be modified by this or future implementations
                                        (0303) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0304) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0305) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0306) ;        functions.
                                        (0307) ;
                                        (0308) ;  THEORY of OPERATION:
                                        (0309) ;     1) Read and save the Compare register.
                                        (0310) ;     2) Read the Count register, causing its data to be latched into
                                        (0311) ;        the Compare register.
                                        (0312) ;     3) Read and save the Counter value, now in the Compare register,
                                        (0313) ;        to the buffer.
                                        (0314) ;     4) Disable global interrupts
                                        (0315) ;     5) Halt the timer
                                        (0316) ;     6) Restore the Compare register values
                                        (0317) ;     7) Start the Timer again
                                        (0318) ;     8) Restore global interrupt state
                                        (0319) ;
                                        (0320)  Timer16_wReadTimerSaveCV:
                                        (0321) _Timer16_wReadTimerSaveCV:
                                        (0322)  wTimer16_ReadTimerSaveCV:                       ; this name deprecated
                                        (0323) _wTimer16_ReadTimerSaveCV:                       ; this name deprecated
                                        (0324)  wTimer16_ReadCounter:                           ; this name deprecated
                                        (0325) _wTimer16_ReadCounter:                           ; this name deprecated
                                        (0326) 
                                        (0327) CpuFlags:      equ   0
                                        (0328) wCount_MSB:    equ   1
                                        (0329) wCount_LSB:    equ   2
                                        (0330) 
                                        (0331)    RAM_PROLOGUE RAM_USE_CLASS_2
068C: 4F       MOV   X,SP               (0332)    mov   X, SP                                   ; X <- stack frame pointer
068D: 38 03    ADD   SP,0x3             (0333)    add   SP, 3                                   ; Reserve space for flags, count
068F: 5D 23    MOV   A,REG[0x23]        (0334)    mov   A, reg[Timer16_CONTROL_LSB_REG]         ; save the Control register
0691: 08       PUSH  A                  (0335)    push  A
0692: 5D 22    MOV   A,REG[0x22]        (0336)    mov   A, reg[Timer16_COMPARE_LSB_REG]         ; save the Compare register
0694: 08       PUSH  A                  (0337)    push  A
0695: 5D 26    MOV   A,REG[0x26]        (0338)    mov   A, reg[Timer16_COMPARE_MSB_REG]
0697: 08       PUSH  A                  (0339)    push  A
0698: 5D 20    MOV   A,REG[0x20]        (0340)    mov   A, reg[Timer16_COUNTER_LSB_REG]         ; synchronous copy DR2 <- DR0
                                        (0341)                                                  ; This may cause an interrupt!
069A: 5D 26    MOV   A,REG[0x26]        (0342)    mov   A, reg[Timer16_COMPARE_MSB_REG]         ; Now grab DR2 (DR0) and save
069C: 54 01    MOV   [X+1],A            (0343)    mov   [X+wCount_MSB], A
069E: 5D 22    MOV   A,REG[0x22]        (0344)    mov   A, reg[Timer16_COMPARE_LSB_REG]
06A0: 54 02    MOV   [X+2],A            (0345)    mov   [X+wCount_LSB], A
06A2: 50 00    MOV   A,0x0              (0346)    mov   A, 0                                    ; Guess the global interrupt state
06A4: 49 F7 01 TST   REG[0xF7],0x1      (0347)    tst   reg[CPU_F], FLAG_GLOBAL_IE              ; Currently Disabled?
06A7: A0 03    JZ    0x06AB             (0348)    jz    .SetupStatusFlag                        ;   Yes, guess was correct
06A9: 50 01    MOV   A,0x1              (0349)    mov   A, FLAG_GLOBAL_IE                       ;    No, modify our guess
                                        (0350) .SetupStatusFlag:                                ; and ...
06AB: 54 00    MOV   [X+0],A            (0351)    mov   [X+CpuFlags], A                         ;   StackFrame[0] <- Flag Reg image
06AD: 70 FE    AND   F,0xFE             
06AF: 41 23 FE AND   REG[0x23],0xFE     
                                        (0352)    M8C_DisableGInt                               ; Disable interrupts globally
                                        (0353)    Timer16_Stop_M                                ; Disable (stop) the timer
06B2: 18       POP   A                  (0354)    pop   A                                       ; Restore the Compare register
06B3: 60 26    MOV   REG[0x26],A        (0355)    mov   reg[Timer16_COMPARE_MSB_REG], A
06B5: 18       POP   A                  (0356)    pop   A
06B6: 60 22    MOV   REG[0x22],A        (0357)    mov   reg[Timer16_COMPARE_LSB_REG], A
06B8: 18       POP   A                  (0358)    pop   A                                       ; restore start state of the timer
06B9: 60 23    MOV   REG[0x23],A        (0359)    mov   reg[Timer16_CONTROL_LSB_REG], A
06BB: 18       POP   A                  (0360)    pop   A                                       ; Return result stored in stack frame
06BC: 20       POP   X                  (0361)    pop   X
06BD: 70 3F    AND   F,0x3F             
06BF: 71 C0    OR    F,0xC0             
                                        (0362)    RAM_EPILOGUE RAM_USE_CLASS_2
06C1: 7E       RETI                     (0363)    reti                                          ; Flag Reg <- StackFrame[0]
                                        (0364) 
                                        (0365) .ENDSECTION
                                        (0366) 
                                        (0367) 
                                        (0368) .SECTION
                                        (0369) ;-----------------------------------------------------------------------------
                                        (0370) ;  FUNCTION NAME: Timer16_wReadTimer
                                        (0371) ;
                                        (0372) ;  DESCRIPTION:
                                        (0373) ;     Performs a software capture of the Count register.  A synchronous
                                        (0374) ;     read of the Count register is performed.  The timer is NOT stopped.
                                        (0375) ;
                                        (0376) ;     WARNING - this will cause loss of data in the Compare register.
                                        (0377) ;-----------------------------------------------------------------------------
                                        (0378) ;
                                        (0379) ;  ARGUMENTS:    None
                                        (0380) ;  RETURNS:      fastcall16 WORD wCount, (value of DR0 in the X & A registers)
                                        (0381) ;  SIDE EFFECTS:
                                        (0382) ;    May cause an interrupt.
                                        (0383) ;
                                        (0384) ;    The A and X registers may be modified by this or future implementations
                                        (0385) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0386) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0387) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0388) ;    functions.
                                        (0389) ;
                                        (0390) ;  THEORY of OPERATION:
                                        (0391) ;     1) Read the Count register - this causes the count value to be
                                        (0392) ;        latched into the Compare registers.
                                        (0393) ;     2) Read and return the Count register values from the Compare
                                        (0394) ;        registers into the return buffer.
                                        (0395) ;
                                        (0396)  Timer16_wReadTimer:
                                        (0397) _Timer16_wReadTimer:
                                        (0398)  wTimer16_ReadTimer:                             ; this name deprecated
                                        (0399) _wTimer16_ReadTimer:                             ; this name deprecated
                                        (0400)  wTimer16_CaptureCounter:                        ; this name deprecated
                                        (0401) _wTimer16_CaptureCounter:                        ; this name deprecated
                                        (0402) 
                                        (0403)    RAM_PROLOGUE RAM_USE_CLASS_1
06C2: 5D 20    MOV   A,REG[0x20]        (0404)    mov   A, reg[Timer16_COUNTER_LSB_REG]         ; synchronous copy DR2 <- DR0
                                        (0405)                                                  ; This may cause an interrupt!
                                        (0406) 
06C4: 5D 26    MOV   A,REG[0x26]        (0407)    mov   A, reg[Timer16_COMPARE_MSB_REG]         ; Return DR2 (actually DR0)
06C6: 5C       MOV   X,A                (0408)    mov   X, A
06C7: 5D 22    MOV   A,REG[0x22]        (0409)    mov   A, reg[Timer16_COMPARE_LSB_REG]
                                        (0410)    RAM_EPILOGUE RAM_USE_CLASS_1
06C9: 7F       RET                      (0411)    ret
                                        (0412) 
                                        (0413) .ENDSECTION
                                        (0414) 
                                        (0415) ; End of File Timer16.asm
FILE: lib\sar10int.asm                  (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: SAR10INT.asm
                                        (0004) ;;   Version: 2.00, Updated on 2013/5/19 at 10:39:9
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: SAR10 Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "memory.inc"
                                        (0015) include "SAR10.inc"
                                        (0016) 
                                        (0017) ;-----------------------------------------------
                                        (0018) ;  Global Symbols
                                        (0019) ;-----------------------------------------------
                                        (0020) export  _SAR10_ISR
                                        (0021) 
                                        (0022) 
                                        (0023) AREA InterruptRAM (RAM,REL,CON)
                                        (0024)    
                                        (0025) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0026) ;---------------------------------------------------
                                        (0027) ; Insert your custom declarations below this banner
                                        (0028) ;---------------------------------------------------
                                        (0029) 
                                        (0030) ;------------------------
                                        (0031) ; Includes
                                        (0032) ;------------------------
                                        (0033) 
                                        (0034) 	
                                        (0035) ;------------------------
                                        (0036) ;  Constant Definitions
                                        (0037) ;------------------------
                                        (0038) 
                                        (0039) 
                                        (0040) ;------------------------
                                        (0041) ; Variable Allocation
                                        (0042) ;------------------------
                                        (0043) 
                                        (0044) ;---------------------------------------------------
                                        (0045) ; Insert your custom declarations above this banner
                                        (0046) ;---------------------------------------------------
                                        (0047) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0048) 
                                        (0049) 
                                        (0050) AREA UserModules (ROM, REL)
                                        (0051) 
                                        (0052) ;-----------------------------------------------------------------------------
                                        (0053) ;  FUNCTION NAME: _SAR10_ISR
                                        (0054) ;
                                        (0055) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0056) ;
                                        (0057) ;-----------------------------------------------------------------------------
                                        (0058) ;
                                        (0059) 
                                        (0060) _SAR10_ISR:
                                        (0061) 
                                        (0062)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0063)    ;---------------------------------------------------
                                        (0064)    ; Insert your custom assembly code below this banner
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ;   NOTE: interrupt service routines must preserve
                                        (0067)    ;   the values of the A and X CPU registers.
                                        (0068)    
                                        (0069)    ;---------------------------------------------------
                                        (0070)    ; Insert your custom assembly code above this banner
                                        (0071)    ;---------------------------------------------------
                                        (0072)    
                                        (0073)    ;---------------------------------------------------
                                        (0074)    ; Insert a lcall to a C function below this banner
                                        (0075)    ; and un-comment the lines between these banners
                                        (0076)    ;---------------------------------------------------
                                        (0077)    
                                        (0078)    ;PRESERVE_CPU_CONTEXT
                                        (0079)    ;lcall _My_C_Function
                                        (0080)    ;RESTORE_CPU_CONTEXT
                                        (0081)    
                                        (0082)    ;---------------------------------------------------
                                        (0083)    ; Insert a lcall to a C function above this banner
                                        (0084)    ; and un-comment the lines between these banners
                                        (0085)    ;---------------------------------------------------
                                        (0086)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0087) 
06CA: 7E       RETI                     (0088)    reti
                                        (0089) 
                                        (0090) 
                                        (0091) ; end of file SAR10INT.asm
FILE: lib\sar10.asm                     (0001) ;;*****************************************************************************
06CB: 43 DF 10 OR    REG[0xDF],0x10     (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: SAR10.asm
                                        (0004) ;;   Version: 2.00, Updated on 2013/5/19 at 10:39:9
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: SAR10 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "SAR10.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  SAR10_EnableInt
                                        (0030) export _SAR10_EnableInt
                                        (0031) export  SAR10_DisableInt
                                        (0032) export _SAR10_DisableInt
                                        (0033) export  SAR10_Start
                                        (0034) export _SAR10_Start
                                        (0035) export  SAR10_Stop
                                        (0036) export _SAR10_Stop
                                        (0037) export  SAR10_Trigger
                                        (0038) export _SAR10_Trigger
                                        (0039) export  SAR10_fIsDataAvailable
                                        (0040) export _SAR10_fIsDataAvailable
                                        (0041) export  SAR10_iGetData
                                        (0042) export _SAR10_iGetData
                                        (0043) export  SAR10_bGetData
                                        (0044) export _SAR10_bGetData
                                        (0045) export  SAR10_SetADCChannel
                                        (0046) export _SAR10_SetADCChannel
                                        (0047) export  SAR10_SetTriggerSrc
                                        (0048) export _SAR10_SetTriggerSrc
                                        (0049) export  SAR10_EnableAutoTrigger
                                        (0050) export _SAR10_EnableAutoTrigger
                                        (0051) export  SAR10_SetClk
                                        (0052) export _SAR10_SetClk
                                        (0053) export  SAR10_SetRunMode
                                        (0054) export _SAR10_SetRunMode
                                        (0055) 
                                        (0056) AREA led_display_RAM (RAM,REL)
                                        (0057) 
                                        (0058) ;-----------------------------------------------
                                        (0059) ;  Constant Definitions
                                        (0060) ;-----------------------------------------------
                                        (0061) 
                                        (0062) ;-----------------------------------------------
                                        (0063) ; Variable Allocation
                                        (0064) ;-----------------------------------------------
                                        (0065) 
                                        (0066) 
                                        (0067) AREA UserModules (ROM, REL)
                                        (0068) 
                                        (0069) .SECTION
                                        (0070) ;-----------------------------------------------------------------------------
                                        (0071) ;  FUNCTION NAME: SAR10_EnableInt
                                        (0072) ;
                                        (0073) ;  DESCRIPTION:
                                        (0074) ;     Enables the interrupt mode operation by setting the interrupt enable mask bit
                                        (0075) ;     associated with this User Module. This function has no effect until and
                                        (0076) ;     unless the global interrupts are enabled (for example by using the
                                        (0077) ;     macro M8C_EnableGInt).
                                        (0078) ;-----------------------------------------------------------------------------
                                        (0079) ;
                                        (0080) ;  ARGUMENTS:    None.
                                        (0081) ;  RETURNS:      Nothing.
                                        (0082) ;  SIDE EFFECTS: 
                                        (0083) ;    The A and X registers may be modified by this or future implementations
                                        (0084) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0085) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0086) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0087) ;    functions.
                                        (0088) ;
                                        (0089)  SAR10_EnableInt:
                                        (0090) _SAR10_EnableInt:
                                        (0091)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0092)    SAR10_EnableInt_M
                                        (0093)    RAM_EPILOGUE RAM_USE_CLASS_1
06CE: 7F       RET                      (0094)    ret
06CF: 41 DF EF AND   REG[0xDF],0xEF     
                                        (0095) 
                                        (0096) .ENDSECTION
                                        (0097) 
                                        (0098) 
                                        (0099) .SECTION
                                        (0100) ;-----------------------------------------------------------------------------
                                        (0101) ;  FUNCTION NAME: SAR10_DisableInt
                                        (0102) ;
                                        (0103) ;  DESCRIPTION:
                                        (0104) ;     Disables the interrupt mode operation by clearing the interrupt enable
                                        (0105) ;     mask bit associated with this User Module.
                                        (0106) ;-----------------------------------------------------------------------------
                                        (0107) ;
                                        (0108) ;  ARGUMENTS:    None
                                        (0109) ;  RETURNS:      Nothing
                                        (0110) ;  SIDE EFFECTS: 
                                        (0111) ;    The A and X registers may be modified by this or future implementations
                                        (0112) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0113) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0114) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0115) ;    functions.
                                        (0116) ;
                                        (0117)  SAR10_DisableInt:
                                        (0118) _SAR10_DisableInt:
                                        (0119)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0120)    SAR10_DisableInt_M
                                        (0121)    RAM_EPILOGUE RAM_USE_CLASS_1
06D2: 7F       RET                      (0122)    ret
06D3: 71 10    OR    F,0x10             
06D5: 43 A8 01 OR    REG[0xA8],0x1      
06D8: 70 EF    AND   F,0xEF             
                                        (0123) 
                                        (0124) .ENDSECTION
                                        (0125) 
                                        (0126) 
                                        (0127) .SECTION
                                        (0128) ;-----------------------------------------------------------------------------
                                        (0129) ;  FUNCTION NAME: SAR10_Start
                                        (0130) ;
                                        (0131) ;  DESCRIPTION:
                                        (0132) ;     Enables SAR operation. 
                                        (0133) ;     Set the ADC_EN bit in SAR_CR0 register
                                        (0134) ;-----------------------------------------------------------------------------
                                        (0135) ;
                                        (0136) ;  ARGUMENTS:    None
                                        (0137) ;  RETURNS:      Nothing
                                        (0138) ;  SIDE EFFECTS: 
                                        (0139) ;    The A and X registers may be modified by this or future implementations
                                        (0140) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0141) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0142) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0143) ;    functions.
                                        (0144) ;
                                        (0145)  SAR10_Start:
                                        (0146) _SAR10_Start:
                                        (0147)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0148)    M8C_SetBank1
                                        (0149)    SAR10_Start_M
                                        (0150)    M8C_SetBank0
                                        (0151)    RAM_EPILOGUE RAM_USE_CLASS_1
06DA: 7F       RET                      (0152)    ret
06DB: 71 10    OR    F,0x10             
06DD: 41 A8 FE AND   REG[0xA8],0xFE     
06E0: 70 EF    AND   F,0xEF             
                                        (0153) 
                                        (0154) .ENDSECTION
                                        (0155) 
                                        (0156) 
                                        (0157) .SECTION
                                        (0158) ;-----------------------------------------------------------------------------
                                        (0159) ;  FUNCTION NAME: SAR10_Stop
                                        (0160) ;
                                        (0161) ;  DESCRIPTION:
                                        (0162) ;     Disables SAR operation 
                                        (0163) ;     Clear ADC_EN bit in SAR_CR0 register
                                        (0164) ;-----------------------------------------------------------------------------
                                        (0165) ;
                                        (0166) ;  ARGUMENTS:    None
                                        (0167) ;  RETURNS:      Nothing
                                        (0168) ;  SIDE EFFECTS: 
                                        (0169) ;    The A and X registers may be modified by this or future implementations
                                        (0170) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0171) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0172) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0173) ;    functions.
                                        (0174) ;
                                        (0175)  SAR10_Stop:
                                        (0176) _SAR10_Stop:
                                        (0177)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0178)    M8C_SetBank1
                                        (0179)    SAR10_Stop_M
                                        (0180)    M8C_SetBank0
                                        (0181)    RAM_EPILOGUE RAM_USE_CLASS_1
06E2: 7F       RET                      (0182)    ret
06E3: 71 10    OR    F,0x10             
                                        (0183) 
                                        (0184) .ENDSECTION
                                        (0185) 
                                        (0186) .SECTION
                                        (0187) ;-----------------------------------------------------------------------------
                                        (0188) ;  FUNCTION NAME: SAR10_Trigger
                                        (0189) ;
                                        (0190) ;  DESCRIPTION:
                                        (0191) ;     Trigger the SAR to sample for one time
                                        (0192) ;     Set START/ONGOING bit in SAR_CR0 register
                                        (0193) ;
                                        (0194) ;-----------------------------------------------------------------------------
                                        (0195) ;
                                        (0196) ;  ARGUMENTS:   Nothing
                                        (0197) ;  RETURNS:         Nothing
                                        (0198) ;  SIDE EFFECTS: 
                                        (0199) ;    The A and X registers may be modified by this or future implementations
                                        (0200) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0201) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0202) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0203) ;    functions.
                                        (0204) ;
                                        (0205)  SAR10_Trigger:
                                        (0206) _SAR10_Trigger:
                                        (0207)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0208)    M8C_SetBank1
06E5: 43 A8 02 OR    REG[0xA8],0x2      (0209)    or    reg[SAR10_SAR_CR0_REG], SAR10_SAR_CR0_REG_SW_TRIG_BIT
06E8: 70 EF    AND   F,0xEF             
                                        (0210)    M8C_SetBank0
                                        (0211)    RAM_EPILOGUE RAM_USE_CLASS_1
06EA: 7F       RET                      (0212)    ret
06EB: 71 10    OR    F,0x10             
                                        (0213) 
                                        (0214) .ENDSECTION
                                        (0215) 
                                        (0216) .SECTION
                                        (0217) ;-----------------------------------------------------------------------------
                                        (0218) ;  FUNCTION NAME: SAR10_fIsDataAvailable
                                        (0219) ;
                                        (0220) ;  DESCRIPTION:
                                        (0221) ;     Checks the availability of sampled data.
                                        (0222) ;     Get READY bit from SAR_CR0 register
                                        (0223) ;
                                        (0224) ;-----------------------------------------------------------------------------
                                        (0225) ;
                                        (0226) ;  ARGUMENTS:   None
                                        (0227) ;  RETURNS:     fastcall16 BYTE fIsDataAvailable (void)
                                        (0228) ;  SIDE EFFECTS: 
                                        (0229) ;    The A and X registers may be modified by this or future implementations
                                        (0230) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0231) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0232) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0233) ;    functions.
                                        (0234) ;
                                        (0235)  SAR10_fIsDataAvailable:
                                        (0236) _SAR10_fIsDataAvailable:
                                        (0237)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0238)    M8C_SetBank1
06ED: 5D A8    MOV   A,REG[0xA8]        (0239)    mov   A,reg[SAR10_SAR_CR0_REG]    ; Read value of SAR_CR0 register
06EF: 70 EF    AND   F,0xEF             
                                        (0240)    M8C_SetBank0
06F1: 21 04    AND   A,0x4              (0241)    and   A,SAR10_READY_MASK                   ; Checks the availability of sampled data.
                                        (0242)    RAM_EPILOGUE RAM_USE_CLASS_4
06F3: 7F       RET                      (0243)    ret
                                        (0244) 
                                        (0245) .ENDSECTION
                                        (0246) 
                                        (0247) .SECTION
                                        (0248) ;-----------------------------------------------------------------------------
                                        (0249) ;  FUNCTION NAME: SAR10_iGetData
                                        (0250) ;
                                        (0251) ;  DESCRIPTION:
                                        (0252) ;     Returns last converted data.
                                        (0253) ;     SAR_DL will be read first, then the SAR_DH
                                        (0254) ;     The MSB is returned in X and the LSB in A
                                        (0255) ;     Note: this function returns correct result only in right-justify mode 
                                        (0256) ;     for CY8C28x45 device.
                                        (0257) ;
                                        (0258) ;-----------------------------------------------------------------------------
                                        (0259) ;
                                        (0260) ;  ARGUMENTS:   None
                                        (0261) ;  RETURNS:     fastcall16 INT iGetData(void)
                                        (0262) ;  SIDE EFFECTS: 
                                        (0263) ;    The A and X registers may be modified by this or future implementations
                                        (0264) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0265) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0266) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0267) ;    functions.
                                        (0268) ;
                                        (0269)    Temp_offs:         equ  -2
                                        (0270)    DL_REG_offs:       equ  -1
                                        (0271)         
                                        (0272)  SAR10_iGetData:
                                        (0273) _SAR10_iGetData:
                                        (0274)    RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0275) IF(SAR10_Justify)  ; for CY8C28x45 Device
                                        (0276)    mov   A, reg[SAR10_SAR_DL_REG]  ; Get 8 lowest bits
                                        (0277)    push  A                                    ; Store 8 lowest bits in stack
                                        (0278)    mov   A, reg[SAR10_SAR_DH_REG]  ; Read 2 highest bits
                                        (0279)    mov   X, A                                 ; Get MSB of result
                                        (0280)    pop   A                                    ; Get LSB of result
                                        (0281) ELSE ;for CY8C22x45 device
06F4: 50 00    MOV   A,0x0              (0282)    mov   A, 0x00                              ; Init local var
06F6: 08       PUSH  A                  (0283)    push  A                                    ; Reserve one byte in stack
06F7: 5D 6B    MOV   A,REG[0x6B]        (0284)    mov   A, reg[SAR10_SAR_DL_REG]  ; Get 2 lowest bits
06F9: 08       PUSH  A                  (0285)    push  A                                    ; Store 2 lowest bits in stack
06FA: 4F       MOV   X,SP               (0286)    mov   X, SP                                ; Set SP in X
06FB: 5D 6A    MOV   A,REG[0x6A]        (0287)    mov   A, reg[SAR10_SAR_DH_REG]  ; Read 8 highest bits
06FD: 64       ASL   A                  (0288)    asl   A                                    ; Determine two highest bits and store it in stack
06FE: 6C FE    RLC   [X-2]              (0289)    rlc   [X+Temp_offs]
0700: 64       ASL   A                  (0290)    asl   A
0701: 6C FE    RLC   [X-2]              (0291)    rlc   [X+Temp_offs]
0703: 2B FF    OR    A,[X-1]            (0292)    or    A, [X+DL_REG_offs]                    ; Form LSB of result
0705: 20       POP   X                  (0293)    pop   X                                     
0706: 20       POP   X                  (0294)    pop   X                                     ; Get MSB of result
0707: 70 3F    AND   F,0x3F             
0709: 71 C0    OR    F,0xC0             
                                        (0295) ENDIF
                                        (0296)    RAM_EPILOGUE RAM_USE_CLASS_2
070B: 7F       RET                      (0297)    ret
                                        (0298) 
                                        (0299) .ENDSECTION
                                        (0300) 
                                        (0301) .SECTION
                                        (0302) ;-----------------------------------------------------------------------------
                                        (0303) ;  FUNCTION NAME: SAR10_GetDataMSB8
                                        (0304) ;
                                        (0305) ;  DESCRIPTION:
                                        (0306) ;    Returns last converted data.
                                        (0307) ;    Note: this function returns correct result only in left-justify mode
                                        (0308) ;    for CY8C28x45 device.  
                                        (0309) ;
                                        (0310) ;-----------------------------------------------------------------------------
                                        (0311) ;
                                        (0312) ;  ARGUMENTS:    Nothing
                                        (0313) ;  RETURNS:          fastcall16 char GetDataMSB8(void)
                                        (0314) ;  SIDE EFFECTS: 
                                        (0315) ;    The A and X registers may be modified by this or future implementations
                                        (0316) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0317) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0318) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0319) ;    functions.
                                        (0320) ;
                                        (0321)  SAR10_bGetData:
                                        (0322) _SAR10_bGetData:
                                        (0323)    RAM_PROLOGUE RAM_USE_CLASS_1
070C: 5D 6A    MOV   A,REG[0x6A]        (0324)    mov   A,reg[SAR10_SAR_DH_REG]
                                        (0325)    RAM_EPILOGUE RAM_USE_CLASS_1
070E: 7F       RET                      (0326)    ret
                                        (0327) 
                                        (0328) .ENDSECTION
                                        (0329) 
                                        (0330) .SECTION
                                        (0331) ;-----------------------------------------------------------------------------
                                        (0332) ;  FUNCTION NAME: SAR10_SelectADCChannel
                                        (0333) ;
                                        (0334) ;  DESCRIPTION:
                                        (0335) ;    Select the SAR input from 14 optional input channels.
                                        (0336) ;   Set ADC_CHS bits in SAR_CR0 register
                                        (0337) ;-----------------------------------------------------------------------------
                                        (0338) ;
                                        (0339) ;  ARGUMENTS:    fastcall16 void SelectADCChannel(passed in A)
                                        (0340) ;  RETURNS:    None
                                        (0341) ;  SIDE EFFECTS: 
                                        (0342) ;    The A and X registers may be modified by this or future implementations
                                        (0343) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0344) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0345) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0346) ;    functions.
                                        (0347) ;
                                        (0348)  SAR10_SetADCChannel:
                                        (0349) _SAR10_SetADCChannel:
                                        (0350)    RAM_PROLOGUE RAM_USE_CLASS_2
070F: 21 78    AND   A,0x78             (0351)    and   A, SAR10_CHN_SEL_MASK
0711: 4F       MOV   X,SP               (0352)    mov   X, SP
0712: 08       PUSH  A                  (0353)    push  A                                     ; store value in stack
0713: 71 10    OR    F,0x10             
                                        (0354)    M8C_SetBank1
0715: 5D A8    MOV   A,REG[0xA8]        (0355)    mov   A, reg[SAR10_SAR_CR0_REG]  ; get register value
0717: 21 87    AND   A,0x87             (0356)    and   A, ~SAR10_CHN_SEL_MASK     ; clear ADC_CHS bits
0719: 2B 00    OR    A,[X+0]            (0357)    or    A, [X]                                ; set ADC_CHS bits
071B: 60 A8    MOV   REG[0xA8],A        (0358)    mov   reg[SAR10_SAR_CR0_REG], A  ; set new register value
071D: 70 EF    AND   F,0xEF             
                                        (0359)    M8C_SetBank0
071F: 18       POP   A                  (0360)    pop   A
0720: 70 3F    AND   F,0x3F             
0722: 71 C0    OR    F,0xC0             
                                        (0361)    RAM_EPILOGUE RAM_USE_CLASS_2
0724: 7F       RET                      (0362)    ret
                                        (0363) 
                                        (0364) .ENDSECTION
                                        (0365) 
                                        (0366) .SECTION
                                        (0367) ;-----------------------------------------------------------------------------
                                        (0368) ;  FUNCTION NAME: SAR10_SelectTriggerSrc
                                        (0369) ;
                                        (0370) ;  DESCRIPTION:
                                        (0371) ;    Select the SAR10 auto-trigger source 
                                        (0372) ;    by setting TIGSEL in SAR_CR1
                                        (0373) ;
                                        (0374) ;-----------------------------------------------------------------------------
                                        (0375) ;
                                        (0376) ;  ARGUMENTS:    fastcall16 void SelectTriggerSrc(passed in A)
                                        (0377) ;  RETURNS:    None
                                        (0378) ;  SIDE EFFECTS: 
                                        (0379) ;    The A and X registers may be modified by this or future implementations
                                        (0380) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0381) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0382) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0383) ;    functions.
                                        (0384) ;
                                        (0385)  SAR10_SetTriggerSrc:
                                        (0386) _SAR10_SetTriggerSrc:
                                        (0387)    RAM_PROLOGUE RAM_USE_CLASS_2
0725: 21 30    AND   A,0x30             (0388)    and   A, SAR10_TRG_SEL_MASK 
0727: 4F       MOV   X,SP               (0389)    mov   X, SP
0728: 08       PUSH  A                  (0390)    push  A                                    ; store value in stack
0729: 71 10    OR    F,0x10             
                                        (0391)    M8C_SetBank1
072B: 5D A9    MOV   A,REG[0xA9]        (0392)    mov   A, reg[SAR10_SAR_CR1_REG]  ; get register value
072D: 21 CF    AND   A,0xCF             (0393)    and   A, ~SAR10_TRG_SEL_MASK     ; clear TIGSEL bits
072F: 2B 00    OR    A,[X+0]            (0394)    or    A, [X]                                ; set TIGSEL bits
0731: 60 A9    MOV   REG[0xA9],A        (0395)    mov   reg[SAR10_SAR_CR1_REG], A  ; set new register value
0733: 70 EF    AND   F,0xEF             
                                        (0396)    M8C_SetBank0
0735: 18       POP   A                  (0397)    pop   A
0736: 70 3F    AND   F,0x3F             
0738: 71 C0    OR    F,0xC0             
                                        (0398)    RAM_EPILOGUE RAM_USE_CLASS_2
073A: 7F       RET                      (0399)    ret
                                        (0400) 
                                        (0401) .ENDSECTION
                                        (0402) 
                                        (0403) .SECTION
                                        (0404) ;-----------------------------------------------------------------------------
                                        (0405) ;  FUNCTION NAME: SAR10_EnableAutoTrigger
                                        (0406) ;
                                        (0407) ;  DESCRIPTION:
                                        (0408) ;    Global enable CR of the SAR10 auto-trigger function by setting 
                                        (0409) ;    by setting ALIGN_EN in SAR_CR1
                                        (0410) ;
                                        (0411) ;-----------------------------------------------------------------------------
                                        (0412) ;
                                        (0413) ;  ARGUMENTS:    fastcall16 void EnableAutoTrigger(passed in A)
                                        (0414) ;  RETURNS:    None
                                        (0415) ;  SIDE EFFECTS: 
                                        (0416) ;    The A and X registers may be modified by this or future implementations
                                        (0417) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0418) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0419) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0420) ;    functions.
                                        (0421) ;
                                        (0422)  SAR10_EnableAutoTrigger:
                                        (0423) _SAR10_EnableAutoTrigger:
                                        (0424)    RAM_PROLOGUE RAM_USE_CLASS_2
073B: 21 01    AND   A,0x1              (0425)    and   A, SAR10_ALIGN_EN_MASK
073D: 4F       MOV   X,SP               (0426)    mov   X, SP
073E: 08       PUSH  A                  (0427)    push  A                                    ; store value in stack
073F: 71 10    OR    F,0x10             
                                        (0428)    M8C_SetBank1
0741: 5D A9    MOV   A,REG[0xA9]        (0429)    mov   A, reg[SAR10_SAR_CR1_REG]  ; get register value
0743: 21 FE    AND   A,0xFE             (0430)    and   A, ~SAR10_ALIGN_EN_MASK    ; clear ALIGN_EN bits
0745: 2B 00    OR    A,[X+0]            (0431)    or    A, [X]                                ; set ALIGN_EN bits
0747: 60 A9    MOV   REG[0xA9],A        (0432)    mov   reg[SAR10_SAR_CR1_REG], A  ; set new register value
0749: 70 EF    AND   F,0xEF             
                                        (0433)    M8C_SetBank0
074B: 18       POP   A                  (0434)    pop   A
074C: 70 3F    AND   F,0x3F             
074E: 71 C0    OR    F,0xC0             
                                        (0435)    RAM_EPILOGUE RAM_USE_CLASS_2
0750: 7F       RET                      (0436)    ret
                                        (0437) 
                                        (0438) .ENDSECTION
                                        (0439) 
                                        (0440) .SECTION
                                        (0441) ;-----------------------------------------------------------------------------
                                        (0442) ;  FUNCTION NAME: SAR10_SetClk
                                        (0443) ;
                                        (0444) ;  DESCRIPTION:
                                        (0445) ;    Set SAR Sample Rate and Clock Selection 
                                        (0446) ;    by setting CLKSEL bits in SAR_CR1
                                        (0447) ;
                                        (0448) ;-----------------------------------------------------------------------------
                                        (0449) ;
                                        (0450) ;  ARGUMENTS:    fastcall16 void SetClk(passed in A)
                                        (0451) ;  RETURNS:    None
                                        (0452) ;  SIDE EFFECTS: 
                                        (0453) ;    The A and X registers may be modified by this or future implementations
                                        (0454) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0455) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0456) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0457) ;    functions.
                                        (0458) ;
                                        (0459)  SAR10_SetClk:
                                        (0460) _SAR10_SetClk:
                                        (0461)    RAM_PROLOGUE RAM_USE_CLASS_2
0751: 21 0E    AND   A,0xE              (0462)    and   A, SAR10_CLK_SEL_MASK
0753: 4F       MOV   X,SP               (0463)    mov   X, SP
0754: 08       PUSH  A                  (0464)    push  A                                    ; store value in stack
0755: 71 10    OR    F,0x10             
                                        (0465)    M8C_SetBank1
0757: 5D A9    MOV   A,REG[0xA9]        (0466)    mov   A, reg[SAR10_SAR_CR1_REG]  ; get register value
0759: 21 F1    AND   A,0xF1             (0467)    and   A, ~SAR10_CLK_SEL_MASK     ; clear CLKSEL bits
075B: 2B 00    OR    A,[X+0]            (0468)    or    A, [X]                                ; set CLKSEL bits
075D: 60 A9    MOV   REG[0xA9],A        (0469)    mov   reg[SAR10_SAR_CR1_REG], A  ; set new register value
075F: 70 EF    AND   F,0xEF             
                                        (0470)    M8C_SetBank0
0761: 18       POP   A                  (0471)    pop   A
0762: 70 3F    AND   F,0x3F             
0764: 71 C0    OR    F,0xC0             
                                        (0472)    RAM_EPILOGUE RAM_USE_CLASS_2
0766: 7F       RET                      (0473)    ret
                                        (0474) 
                                        (0475) .ENDSECTION
                                        (0476) 
                                        (0477) .SECTION
                                        (0478) ;-----------------------------------------------------------------------------
                                        (0479) ;  FUNCTION NAME: SAR10_SetRunMode
                                        (0480) ;
                                        (0481) ;  DESCRIPTION:
                                        (0482) ;    Set free-running mode for SAR
                                        (0483) ;    by setting FREERUN bits in SAR_CR2
                                        (0484) ;
                                        (0485) ;-----------------------------------------------------------------------------
                                        (0486) ;
                                        (0487) ;  ARGUMENTS:    fastcall16 void SetRunMode(passed in A)
                                        (0488) ;  RETURNS:    None
                                        (0489) ;  SIDE EFFECTS: 
                                        (0490) ;    The A and X registers may be modified by this or future implementations
                                        (0491) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0492) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0493) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0494) ;    functions.
                                        (0495) ;
                                        (0496)  SAR10_SetRunMode:
                                        (0497) _SAR10_SetRunMode:
                                        (0498)    RAM_PROLOGUE RAM_USE_CLASS_2
0767: 21 08    AND   A,0x8              (0499)    and   A, SAR10_FREE_RUN_MASK
0769: 4F       MOV   X,SP               (0500)    mov   X, SP
076A: 08       PUSH  A                  (0501)    push  A                                    ; store value in stack
076B: 71 10    OR    F,0x10             
                                        (0502)    M8C_SetBank1
076D: 5D AA    MOV   A,REG[0xAA]        (0503)    mov   A, reg[SAR10_SAR_CR2_REG]  ; get register value
076F: 21 F7    AND   A,0xF7             (0504)    and   A, ~SAR10_FREE_RUN_MASK    ; clear FREERUN bits
0771: 2B 00    OR    A,[X+0]            (0505)    or    A, [X]                                ; set FREERUN bits
0773: 60 AA    MOV   REG[0xAA],A        (0506)    mov reg[SAR10_SAR_CR2_REG], A   ; set new register value   
0775: 70 EF    AND   F,0xEF             
                                        (0507)    M8C_SetBank0
0777: 18       POP   A                  (0508)    pop   A
0778: 70 3F    AND   F,0x3F             
077A: 71 C0    OR    F,0xC0             
                                        (0509)    RAM_EPILOGUE RAM_USE_CLASS_2
077C: 7F       RET                      (0510)    ret
                                        (0511) 
                                        (0512) .ENDSECTION
                                        (0513) ; End of File SAR10.asm
FILE: lib\pwm8_blint.asm                (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PWM8_BLINT.asm
                                        (0004) ;;   Version: 2.60, Updated on 2013/5/19 at 10:44:7
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM8 Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "PWM8_BL.inc"
                                        (0015) include "memory.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _PWM8_BL_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) AREA InterruptRAM (RAM,REL,CON)
                                        (0025) 
                                        (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0027) ;---------------------------------------------------
                                        (0028) ; Insert your custom declarations below this banner
                                        (0029) ;---------------------------------------------------
                                        (0030) 
                                        (0031) ;------------------------
                                        (0032) ; Includes
                                        (0033) ;------------------------
                                        (0034) 
                                        (0035) 	
                                        (0036) ;------------------------
                                        (0037) ;  Constant Definitions
                                        (0038) ;------------------------
                                        (0039) 
                                        (0040) 
                                        (0041) ;------------------------
                                        (0042) ; Variable Allocation
                                        (0043) ;------------------------
                                        (0044) 
                                        (0045) 
                                        (0046) ;---------------------------------------------------
                                        (0047) ; Insert your custom declarations above this banner
                                        (0048) ;---------------------------------------------------
                                        (0049) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0050) 
                                        (0051) 
                                        (0052) AREA UserModules (ROM, REL)
                                        (0053) 
                                        (0054) ;-----------------------------------------------------------------------------
                                        (0055) ;  FUNCTION NAME: _PWM8_BL_ISR
                                        (0056) ;
                                        (0057) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0058) ;
                                        (0059) ;-----------------------------------------------------------------------------
                                        (0060) ;
                                        (0061) 
                                        (0062) _PWM8_BL_ISR:
                                        (0063) 
                                        (0064)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ; Insert your custom assembly code below this banner
                                        (0067)    ;---------------------------------------------------
                                        (0068)    ;   NOTE: interrupt service routines must preserve
                                        (0069)    ;   the values of the A and X CPU registers.
                                        (0070)    
                                        (0071)    ;---------------------------------------------------
                                        (0072)    ; Insert your custom assembly code above this banner
                                        (0073)    ;---------------------------------------------------
                                        (0074)    
                                        (0075)    ;---------------------------------------------------
                                        (0076)    ; Insert a lcall to a C function below this banner
                                        (0077)    ; and un-comment the lines between these banners
                                        (0078)    ;---------------------------------------------------
                                        (0079)    
                                        (0080)    ;PRESERVE_CPU_CONTEXT
                                        (0081)    ;lcall _My_C_Function
                                        (0082)    ;RESTORE_CPU_CONTEXT
                                        (0083)    
                                        (0084)    ;---------------------------------------------------
                                        (0085)    ; Insert a lcall to a C function above this banner
                                        (0086)    ; and un-comment the lines between these banners
                                        (0087)    ;---------------------------------------------------
                                        (0088)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0089) 
077D: 7E       RETI                     (0090)    reti
                                        (0091) 
                                        (0092) 
                                        (0093) ; end of file PWM8_BLINT.asm
FILE: lib\pwm8_bl.asm                   (0001) ;;*****************************************************************************
077E: 43 E1 10 OR    REG[0xE1],0x10     (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PWM8_BL.asm
                                        (0004) ;;   Version: 2.60, Updated on 2013/5/19 at 10:44:7
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM8 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "PWM8_BL.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  PWM8_BL_EnableInt
                                        (0030) export _PWM8_BL_EnableInt
                                        (0031) export  PWM8_BL_DisableInt
                                        (0032) export _PWM8_BL_DisableInt
                                        (0033) export  PWM8_BL_Start
                                        (0034) export _PWM8_BL_Start
                                        (0035) export  PWM8_BL_Stop
                                        (0036) export _PWM8_BL_Stop
                                        (0037) export  PWM8_BL_WritePeriod
                                        (0038) export _PWM8_BL_WritePeriod
                                        (0039) export  PWM8_BL_WritePulseWidth
                                        (0040) export _PWM8_BL_WritePulseWidth
                                        (0041) export  PWM8_BL_bReadPulseWidth
                                        (0042) export _PWM8_BL_bReadPulseWidth
                                        (0043) export  PWM8_BL_bReadCounter
                                        (0044) export _PWM8_BL_bReadCounter
                                        (0045) 
                                        (0046) ; The following functions are deprecated and subject to omission in future releases
                                        (0047) ;
                                        (0048) export  bPWM8_BL_ReadPulseWidth    ; deprecated
                                        (0049) export _bPWM8_BL_ReadPulseWidth    ; deprecated
                                        (0050) export  bPWM8_BL_ReadCounter       ; deprecated
                                        (0051) export _bPWM8_BL_ReadCounter       ; deprecated
                                        (0052) 
                                        (0053) 
                                        (0054) AREA led_display_RAM (RAM,REL)
                                        (0055) 
                                        (0056) ;-----------------------------------------------
                                        (0057) ;  Constant Definitions
                                        (0058) ;-----------------------------------------------
                                        (0059) 
                                        (0060) INPUT_REG_NULL:                equ 0x00    ; Clear the input register
                                        (0061) 
                                        (0062) 
                                        (0063) ;-----------------------------------------------
                                        (0064) ; Variable Allocation
                                        (0065) ;-----------------------------------------------
                                        (0066) 
                                        (0067) 
                                        (0068) AREA UserModules (ROM, REL)
                                        (0069) 
                                        (0070) .SECTION
                                        (0071) ;-----------------------------------------------------------------------------
                                        (0072) ;  FUNCTION NAME: PWM8_BL_EnableInt
                                        (0073) ;
                                        (0074) ;  DESCRIPTION:
                                        (0075) ;     Enables this PWM's interrupt by setting the interrupt enable mask bit
                                        (0076) ;     associated with this User Module. This function has no effect until and
                                        (0077) ;     unless the global interrupts are enabled (for example by using the
                                        (0078) ;     macro M8C_EnableGInt).
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;
                                        (0081) ;  ARGUMENTS:    None.
                                        (0082) ;  RETURNS:      Nothing.
                                        (0083) ;  SIDE EFFECTS:
                                        (0084) ;    The A and X registers may be modified by this or future implementations
                                        (0085) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0086) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0087) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0088) ;    functions.
                                        (0089) ;
                                        (0090)  PWM8_BL_EnableInt:
                                        (0091) _PWM8_BL_EnableInt:
                                        (0092)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0093)    PWM8_BL_EnableInt_M
                                        (0094)    RAM_EPILOGUE RAM_USE_CLASS_1
0781: 7F       RET                      (0095)    ret
0782: 41 E1 EF AND   REG[0xE1],0xEF     
                                        (0096) 
                                        (0097) 
                                        (0098) .ENDSECTION
                                        (0099) 
                                        (0100) .SECTION
                                        (0101) ;-----------------------------------------------------------------------------
                                        (0102) ;  FUNCTION NAME: PWM8_BL_DisableInt
                                        (0103) ;
                                        (0104) ;  DESCRIPTION:
                                        (0105) ;     Disables this PWM's interrupt by clearing the interrupt enable
                                        (0106) ;     mask bit associated with this User Module.
                                        (0107) ;-----------------------------------------------------------------------------
                                        (0108) ;
                                        (0109) ;  ARGUMENTS:    None
                                        (0110) ;  RETURNS:      Nothing
                                        (0111) ;  SIDE EFFECTS:
                                        (0112) ;    The A and X registers may be modified by this or future implementations
                                        (0113) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0114) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0115) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0116) ;    functions.
                                        (0117) ;
                                        (0118)  PWM8_BL_DisableInt:
                                        (0119) _PWM8_BL_DisableInt:
                                        (0120)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0121)    PWM8_BL_DisableInt_M
                                        (0122)    RAM_EPILOGUE RAM_USE_CLASS_1
0785: 7F       RET                      (0123)    ret
0786: 43 33 01 OR    REG[0x33],0x1      
                                        (0124) 
                                        (0125) 
                                        (0126) .ENDSECTION
                                        (0127) 
                                        (0128) .SECTION
                                        (0129) ;-----------------------------------------------------------------------------
                                        (0130) ;  FUNCTION NAME: PWM8_BL_Start
                                        (0131) ;
                                        (0132) ;  DESCRIPTION:
                                        (0133) ;     Sets the start bit in the Control register of this user module.  The
                                        (0134) ;     PWM will begin counting on the next input clock as soon as the
                                        (0135) ;     enable input is asserted high.
                                        (0136) ;-----------------------------------------------------------------------------
                                        (0137) ;
                                        (0138) ;  ARGUMENTS:    None
                                        (0139) ;  RETURNS:      Nothing
                                        (0140) ;  SIDE EFFECTS:
                                        (0141) ;    The A and X registers may be modified by this or future implementations
                                        (0142) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0143) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0144) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0145) ;    functions.
                                        (0146) ;
                                        (0147)  PWM8_BL_Start:
                                        (0148) _PWM8_BL_Start:
                                        (0149)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0150)    PWM8_BL_Start_M
                                        (0151)    RAM_EPILOGUE RAM_USE_CLASS_1
0789: 7F       RET                      (0152)    ret
078A: 41 33 FE AND   REG[0x33],0xFE     
                                        (0153) 
                                        (0154) 
                                        (0155) .ENDSECTION
                                        (0156) 
                                        (0157) .SECTION
                                        (0158) ;-----------------------------------------------------------------------------
                                        (0159) ;  FUNCTION NAME: PWM8_BL_Stop
                                        (0160) ;
                                        (0161) ;  DESCRIPTION:
                                        (0162) ;     Disables PWM operation by clearing the start bit in the Control
                                        (0163) ;     register.
                                        (0164) ;-----------------------------------------------------------------------------
                                        (0165) ;
                                        (0166) ;  ARGUMENTS:    None
                                        (0167) ;  RETURNS:      Nothing
                                        (0168) ;  SIDE EFFECTS:
                                        (0169) ;    The A and X registers may be modified by this or future implementations
                                        (0170) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0171) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0172) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0173) ;    functions.
                                        (0174) ;
                                        (0175)  PWM8_BL_Stop:
                                        (0176) _PWM8_BL_Stop:
                                        (0177)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0178)    PWM8_BL_Stop_M
                                        (0179)    RAM_EPILOGUE RAM_USE_CLASS_1
078D: 7F       RET                      (0180)    ret
                                        (0181) 
                                        (0182) 
                                        (0183) .ENDSECTION
                                        (0184) 
                                        (0185) .SECTION
                                        (0186) ;-----------------------------------------------------------------------------
                                        (0187) ;  FUNCTION NAME: PWM8_BL_WritePeriod
                                        (0188) ;
                                        (0189) ;  DESCRIPTION:
                                        (0190) ;     Write the 8-bit period value into the Period register (DR1).
                                        (0191) ;-----------------------------------------------------------------------------
                                        (0192) ;
                                        (0193) ;  ARGUMENTS: fastcall16 BYTE bPeriodValue (passed in A)
                                        (0194) ;  RETURNS:   Nothing
                                        (0195) ;  SIDE EFFECTS:
                                        (0196) ;    If the PWM user module is stopped, then this value will also be
                                        (0197) ;    latched into the Count register (DR0).
                                        (0198) ;    
                                        (0199) ;    The A and X registers may be modified by this or future implementations
                                        (0200) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0201) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0202) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0203) ;    functions.
                                        (0204) ;
                                        (0205)  PWM8_BL_WritePeriod:
                                        (0206) _PWM8_BL_WritePeriod:
                                        (0207)    RAM_PROLOGUE RAM_USE_CLASS_1
078E: 60 31    MOV   REG[0x31],A        (0208)    mov   reg[PWM8_BL_PERIOD_REG], A
                                        (0209)    RAM_EPILOGUE RAM_USE_CLASS_1
0790: 7F       RET                      (0210)    ret
                                        (0211) 
                                        (0212) 
                                        (0213) .ENDSECTION
                                        (0214) 
                                        (0215) .SECTION
                                        (0216) ;-----------------------------------------------------------------------------
                                        (0217) ;  FUNCTION NAME: PWM8_BL_WritePulseWidth
                                        (0218) ;
                                        (0219) ;  DESCRIPTION:
                                        (0220) ;     Writes compare value into the Compare register (DR2).
                                        (0221) ;-----------------------------------------------------------------------------
                                        (0222) ;
                                        (0223) ;  ARGUMENTS:    fastcall16 BYTE bCompareValue (passed in A)
                                        (0224) ;  RETURNS:      Nothing
                                        (0225) ;  SIDE EFFECTS:
                                        (0226) ;    The A and X registers may be modified by this or future implementations
                                        (0227) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0228) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0229) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0230) ;    functions.
                                        (0231) ;
                                        (0232)  PWM8_BL_WritePulseWidth:
                                        (0233) _PWM8_BL_WritePulseWidth:
                                        (0234)    RAM_PROLOGUE RAM_USE_CLASS_1
0791: 60 32    MOV   REG[0x32],A        (0235)    mov   reg[PWM8_BL_COMPARE_REG], A
                                        (0236)    RAM_EPILOGUE RAM_USE_CLASS_1
0793: 7F       RET                      (0237)    ret
                                        (0238) 
                                        (0239) 
                                        (0240) .ENDSECTION
                                        (0241) 
                                        (0242) .SECTION
                                        (0243) ;-----------------------------------------------------------------------------
                                        (0244) ;  FUNCTION NAME: PWM8_BL_bReadPulseWidth
                                        (0245) ;
                                        (0246) ;  DESCRIPTION:
                                        (0247) ;     Reads the Compare register.
                                        (0248) ;-----------------------------------------------------------------------------
                                        (0249) ;
                                        (0250) ;  ARGUMENTS:    None
                                        (0251) ;  RETURNS:      fastcall16 BYTE bCompareValue (value of DR2 in the A register)
                                        (0252) ;  SIDE EFFECTS:
                                        (0253) ;    The A and X registers may be modified by this or future implementations
                                        (0254) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0255) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0256) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0257) ;    functions.
                                        (0258) ;
                                        (0259)  PWM8_BL_bReadPulseWidth:
                                        (0260) _PWM8_BL_bReadPulseWidth:
                                        (0261)  bPWM8_BL_ReadPulseWidth:                        ; this name deprecated
                                        (0262) _bPWM8_BL_ReadPulseWidth:                        ; this name deprecated
                                        (0263)    RAM_PROLOGUE RAM_USE_CLASS_1
0794: 5D 32    MOV   A,REG[0x32]        (0264)    mov   A, reg[PWM8_BL_COMPARE_REG]
                                        (0265)    RAM_EPILOGUE RAM_USE_CLASS_1
0796: 7F       RET                      (0266)    ret
                                        (0267) 
                                        (0268) 
                                        (0269) .ENDSECTION
                                        (0270) 
                                        (0271) .SECTION
                                        (0272) ;-----------------------------------------------------------------------------
                                        (0273) ;  FUNCTION NAME: PWM8_BL_bReadCounter
                                        (0274) ;
                                        (0275) ;  DESCRIPTION:
                                        (0276) ;     Returns the value in the Count register (DR0), preserving the value in
                                        (0277) ;     the compare register (DR2). Interrupts are prevented during the transfer
                                        (0278) ;     from the Count to the Compare registers by holding the clock low in
                                        (0279) ;     the PSoC block.
                                        (0280) ;-----------------------------------------------------------------------------
                                        (0281) ;
                                        (0282) ;  ARGUMENTS: None
                                        (0283) ;  RETURNS:   fastcall16 BYTE bCount (value of DR0 in the A register)
                                        (0284) ;  SIDE EFFECTS:
                                        (0285) ;     1) The user module is stopped momentarily and one or more counts may be missed.
                                        (0286) ;     2) The A and X registers may be modified by this or future implementations
                                        (0287) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0288) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0289) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0290) ;        functions.
                                        (0291) ;
                                        (0292)  PWM8_BL_bReadCounter:
                                        (0293) _PWM8_BL_bReadCounter:
                                        (0294)  bPWM8_BL_ReadCounter:                           ; this name deprecated
                                        (0295) _bPWM8_BL_ReadCounter:                           ; this name deprecated
                                        (0296) 
                                        (0297)    bOrigCompareValue:      EQU   0               ; Frame offset to temp Compare store
                                        (0298)    bOrigClockSetting:      EQU   1               ; Frame offset to temp Input   store
                                        (0299)    wCounter:               EQU   2               ; Frame offset to temp Count   store
                                        (0300)    STACK_FRAME_SIZE:       EQU   3               ; max stack frame size is 3 bytes
                                        (0301) 
                                        (0302)    RAM_PROLOGUE RAM_USE_CLASS_2
0797: 4F       MOV   X,SP               (0303)    mov   X, SP                                   ; X <- stack frame pointer
0798: 5D 32    MOV   A,REG[0x32]        (0304)    mov   A, reg[PWM8_BL_COMPARE_REG]             ; Save the Compare register on the stack
079A: 08       PUSH  A                  (0305)    push  A                                       ;
079B: 41 33 FE AND   REG[0x33],0xFE     
079E: 71 10    OR    F,0x10             
                                        (0306)    PWM8_BL_Stop_M                                ; Disable (stop) the PWM
                                        (0307)    M8C_SetBank1                                  ;
07A0: 5D 31    MOV   A,REG[0x31]        (0308)    mov   A, reg[PWM8_BL_INPUT_REG]               ; save the clock input setting
07A2: 08       PUSH  A                  (0309)    push  A                                       ;   on the stack (now 2 bytes) and ...
                                        (0310)                                                  ;   hold the clock low:
07A3: 62 31 00 MOV   REG[0x31],0x0      (0311)    mov   reg[PWM8_BL_INPUT_REG], INPUT_REG_NULL
07A6: 70 EF    AND   F,0xEF             
                                        (0312)    M8C_SetBank0
                                        (0313)                                                  ; Extract the Count via DR2 register
07A8: 5D 30    MOV   A,REG[0x30]        (0314)    mov   A, reg[PWM8_BL_COUNTER_REG]             ; DR2 <- DR0
07AA: 5D 32    MOV   A,REG[0x32]        (0315)    mov   A, reg[PWM8_BL_COMPARE_REG]             ; Stash the Count on the stack
07AC: 08       PUSH  A                  (0316)    push  A                                       ;  -stack frame is now 3 bytes
07AD: 52 00    MOV   A,[X+0]            (0317)    mov   A, [X+bOrigCompareValue]                ; Restore the Compare register
07AF: 60 32    MOV   REG[0x32],A        (0318)    mov   reg[PWM8_BL_COMPARE_REG], A
07B1: 71 10    OR    F,0x10             
                                        (0319)    M8C_SetBank1                                  ; Restore the PWM operation:
07B3: 52 01    MOV   A,[X+1]            (0320)    mov   A, [X+bOrigClockSetting]                ;   First, the clock setting...
07B5: 60 31    MOV   REG[0x31],A        (0321)    mov   reg[PWM8_BL_INPUT_REG], A               ;
07B7: 70 EF    AND   F,0xEF             
07B9: 43 33 01 OR    REG[0x33],0x1      
                                        (0322)    M8C_SetBank0                                  ;
                                        (0323)    PWM8_BL_Start_M                               ;   then re-enable the PWM.
07BC: 18       POP   A                  (0324)    pop   A                                       ; Setup the return value
07BD: 38 FE    ADD   SP,0xFE            (0325)    ADD   SP, -(STACK_FRAME_SIZE-1)               ; Zap remainder of stack frame
07BF: 70 3F    AND   F,0x3F             
07C1: 71 C0    OR    F,0xC0             
                                        (0326)    RAM_EPILOGUE RAM_USE_CLASS_2
07C3: 7F       RET                      (0327)    ret
                                        (0328) 
                                        (0329) .ENDSECTION
                                        (0330) 
                                        (0331) ; End of File PWM8_BL.asm
FILE: C:\chendong\MYDOCU~1\code\LCD_DI~1\LCD_DI~1\LCD_DI~1\boardcommunication.c
(0001) #include <m8c.h>        // part specific constants and macros
(0002) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0003) 
(0004) void BoardUART(void )//board communication rx interrupt
(0005) {
__UserModules_end|_BoardUART|__text_start|_BoardUART:
  rxdata               --> X+0
    07C4: 10       PUSH  X
    07C5: 4F       MOV   X,SP
    07C6: 38 01    ADD   SP,0x1
(0006) 	unsigned char rxdata;
(0007) 	
(0008) 	rxdata = UART_Board_bReadRxData();
    07C8: 10       PUSH  X
    07C9: 7C 05 4E LCALL _bUART_Board_ReadRxData|_UART_Board_bReadRxData|UART_Board_bReadRxData
    07CC: 20       POP   X
    07CD: 62 D0 00 MOV   REG[0xD0],0x0
    07D0: 54 00    MOV   [X+0],A
(0009) 	//echo
(0010) 	while (!(UART_Board_bReadTxStatus() & UART_TX_BUFFER_EMPTY));
    07D2: 10       PUSH  X
    07D3: 7C 05 4B LCALL _bUART_Board_ReadTxStatus|UART_Board_bReadTxStatus|_UART_Board_bReadTxStatus|bUART_Board_ReadTxStatus
    07D6: 20       POP   X
    07D7: 62 D0 00 MOV   REG[0xD0],0x0
    07DA: 53 3A    MOV   [__r0],A
    07DC: 47 3A 10 TST   [__r0],0x10
    07DF: AF F2    JZ    0x07D2
(0011) 	UART_Board_SendData(rxdata);
    07E1: 10       PUSH  X
    07E2: 52 00    MOV   A,[X+0]
    07E4: 7C 05 48 LCALL _UART_Board_SendData
    07E7: 20       POP   X
    07E8: 38 FF    ADD   SP,0xFF
    07EA: 20       POP   X
    07EB: 7F       RET   
FILE: C:\chendong\MYDOCU~1\code\LCD_DI~1\LCD_DI~1\LCD_DI~1\ht1621b.c
(0001) #include <m8c.h>        // part specific constants and macros
(0002) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0003) #include "HT1621B.h"
(0004) 
(0005) 
(0006) 
(0007) void delay_us(uint us)
(0008) {
_delay_us:
  us                   --> X-5
    07EC: 10       PUSH  X
    07ED: 4F       MOV   X,SP
(0009) 	for (;us>0;us--)
    07EE: 80 0C    JMP   0x07FB
(0010) 	{
(0011) 		asm ("NOP");
    07F0: 40       NOP   
(0012) 		asm ("NOP");
    07F1: 40       NOP   
(0013) 		asm ("NOP");
    07F2: 40       NOP   
(0014) 		asm ("NOP");
    07F3: 40       NOP   
(0015) 		asm ("NOP");
    07F4: 40       NOP   
(0016) 		asm ("NOP");
    07F5: 40       NOP   
(0017) 	}
    07F6: 7B FC    DEC   [X-4]
    07F8: 1F FB 00 SBB   [X-5],0x0
    07FB: 3D FB 00 CMP   [X-5],0x0
    07FE: BF F1    JNZ   0x07F0
    0800: 3D FC 00 CMP   [X-4],0x0
    0803: BF EC    JNZ   0x07F0
    0805: 20       POP   X
    0806: 7F       RET   
(0018) }
(0019) 
(0020) void delay_ms(uchar ms)
(0021) {
_delay_ms:
  ms                   --> X-4
    0807: 10       PUSH  X
    0808: 4F       MOV   X,SP
(0022) 	for(;ms>0;ms--)
    0809: 80 0D    JMP   0x0817
(0023) 	{
(0024) 		delay_us(1000);
    080B: 50 03    MOV   A,0x3
    080D: 08       PUSH  A
    080E: 50 E8    MOV   A,0xE8
    0810: 08       PUSH  A
    0811: 9F D9    CALL  _delay_us
    0813: 38 FE    ADD   SP,0xFE
(0025) 	}
    0815: 7B FC    DEC   [X-4]
    0817: 50 00    MOV   A,0x0
    0819: 3B FC    CMP   A,[X-4]
    081B: CF EF    JC    0x080B
    081D: 20       POP   X
    081E: 7F       RET   
(0026) }
(0027) void SendBit_1621(uchar data,uchar cnt) //data 的高cnt 位写入HT1621，高位在前
(0028) {
_SendBit_1621:
  i                    --> X+0
  cnt                  --> X-5
  data                 --> X-4
    081F: 10       PUSH  X
    0820: 4F       MOV   X,SP
    0821: 38 01    ADD   SP,0x1
(0029) 	uchar i;
(0030) 	for(i =0; i <cnt; i ++)
    0823: 56 00 00 MOV   [X+0],0x0
    0826: 80 2A    JMP   0x0851
(0031) 	{
(0032) 		if((data&0x80)==0) 
    0828: 48 FC 80 TST   [X-4],0x80
    082B: B0 06    JNZ   0x0832
(0033) 		{ 
(0034) 			DATA_0;
    082D: 41 00 FD AND   REG[0x0],0xFD
(0035) 		}
    0830: 80 04    JMP   0x0835
(0036) 		else 
(0037) 		{
(0038) 			DATA_1;
    0832: 43 00 02 OR    REG[0x0],0x2
(0039) 		}
(0040) 		delay_us(4);
    0835: 50 00    MOV   A,0x0
    0837: 08       PUSH  A
    0838: 50 04    MOV   A,0x4
    083A: 08       PUSH  A
    083B: 9F AF    CALL  _delay_us
(0041) 		WR_0;
    083D: 41 00 F7 AND   REG[0x0],0xF7
(0042) 		delay_us(4);
    0840: 50 00    MOV   A,0x0
    0842: 08       PUSH  A
    0843: 50 04    MOV   A,0x4
    0845: 08       PUSH  A
    0846: 9F A4    CALL  _delay_us
    0848: 38 FC    ADD   SP,0xFC
(0043) 		WR_1;
    084A: 43 00 08 OR    REG[0x0],0x8
(0044) 		data<<=1;
    084D: 66 FC    ASL   [X-4]
(0045) 	}
    084F: 77 00    INC   [X+0]
    0851: 52 00    MOV   A,[X+0]
    0853: 3B FB    CMP   A,[X-5]
    0855: CF D2    JC    0x0828
    0857: 38 FF    ADD   SP,0xFF
    0859: 20       POP   X
    085A: 7F       RET   
(0046) }
(0047) void SendDataBit_1621(uchar data,uchar cnt) //data 的低cnt 位写入HT1621，低位在前
(0048) {
_SendDataBit_1621:
  i                    --> X+0
  cnt                  --> X-5
  data                 --> X-4
    085B: 10       PUSH  X
    085C: 4F       MOV   X,SP
    085D: 38 01    ADD   SP,0x1
(0049) 	uchar i;
(0050) 	for(i =0; i <cnt; i ++)
    085F: 56 00 00 MOV   [X+0],0x0
    0862: 80 2C    JMP   0x088F
(0051) 	{
(0052) 		if((data&0x01)==0) 
    0864: 48 FC 01 TST   [X-4],0x1
    0867: B0 06    JNZ   0x086E
(0053) 		{ 
(0054) 			DATA_0;
    0869: 41 00 FD AND   REG[0x0],0xFD
(0055) 		}
    086C: 80 04    JMP   0x0871
(0056) 		else 
(0057) 		{
(0058) 			DATA_1;
    086E: 43 00 02 OR    REG[0x0],0x2
(0059) 		}
(0060) 		delay_us(4);
    0871: 50 00    MOV   A,0x0
    0873: 08       PUSH  A
    0874: 50 04    MOV   A,0x4
    0876: 08       PUSH  A
    0877: 9F 73    CALL  _delay_us
(0061) 		WR_0;
    0879: 41 00 F7 AND   REG[0x0],0xF7
(0062) 		delay_us(4);
    087C: 50 00    MOV   A,0x0
    087E: 08       PUSH  A
    087F: 50 04    MOV   A,0x4
    0881: 08       PUSH  A
    0882: 9F 68    CALL  _delay_us
    0884: 38 FC    ADD   SP,0xFC
(0063) 		WR_1;
    0886: 43 00 08 OR    REG[0x0],0x8
(0064) 		data>>=1;
    0889: 70 FB    AND   F,0xFB
    088B: 6F FC    RRC   [X-4]
(0065) 	}
    088D: 77 00    INC   [X+0]
    088F: 52 00    MOV   A,[X+0]
    0891: 3B FB    CMP   A,[X-5]
    0893: CF D0    JC    0x0864
    0895: 38 FF    ADD   SP,0xFF
    0897: 20       POP   X
    0898: 7F       RET   
(0066) }
(0067) void SendCmd(uchar command)
(0068) {
_SendCmd:
  command              --> X-4
    0899: 10       PUSH  X
    089A: 4F       MOV   X,SP
(0069) 	CS_0;
    089B: 41 00 7F AND   REG[0x0],0x7F
(0070) 	SendBit_1621(0x80,3); //写入标志码"100"
    089E: 50 03    MOV   A,0x3
    08A0: 08       PUSH  A
    08A1: 50 80    MOV   A,0x80
    08A3: 08       PUSH  A
    08A4: 9F 79    CALL  _SendBit_1621
    08A6: 38 FE    ADD   SP,0xFE
(0071) 	SendBit_1621(command,9); //写入9 位数据,其中前8 位为command 命令,最后1 位任意
    08A8: 50 09    MOV   A,0x9
    08AA: 08       PUSH  A
    08AB: 52 FC    MOV   A,[X-4]
    08AD: 08       PUSH  A
    08AE: 9F 6F    CALL  _SendBit_1621
(0072) 	CS_1;
    08B0: 43 00 80 OR    REG[0x0],0x80
(0073) 	delay_us(4);
    08B3: 50 00    MOV   A,0x0
    08B5: 08       PUSH  A
    08B6: 50 04    MOV   A,0x4
    08B8: 08       PUSH  A
    08B9: 9F 31    CALL  _delay_us
    08BB: 38 FC    ADD   SP,0xFC
    08BD: 20       POP   X
    08BE: 7F       RET   
(0074) }
(0075) void Write_1621(uchar addr,uchar data)
(0076) {
_Write_1621:
  data                 --> X-5
  addr                 --> X-4
    08BF: 10       PUSH  X
    08C0: 4F       MOV   X,SP
(0077) 	CS_0;
    08C1: 41 00 7F AND   REG[0x0],0x7F
(0078) 	SendBit_1621(0xa0,3); //写入标志码"101"
    08C4: 50 03    MOV   A,0x3
    08C6: 08       PUSH  A
    08C7: 50 A0    MOV   A,0xA0
    08C9: 08       PUSH  A
    08CA: 9F 53    CALL  _SendBit_1621
(0079) 	SendBit_1621(addr<<2,6); //写入6 位addr
    08CC: 50 06    MOV   A,0x6
    08CE: 08       PUSH  A
    08CF: 52 FC    MOV   A,[X-4]
    08D1: 62 D0 00 MOV   REG[0xD0],0x0
    08D4: 53 3A    MOV   [__r0],A
    08D6: 65 3A    ASL   [__r0]
    08D8: 65 3A    ASL   [__r0]
    08DA: 51 3A    MOV   A,[__r0]
    08DC: 08       PUSH  A
    08DD: 9F 40    CALL  _SendBit_1621
    08DF: 38 FC    ADD   SP,0xFC
(0080) 	SendDataBit_1621(data,4); //写入data 的低4 位
    08E1: 50 04    MOV   A,0x4
    08E3: 08       PUSH  A
    08E4: 52 FB    MOV   A,[X-5]
    08E6: 08       PUSH  A
    08E7: 9F 72    CALL  _SendDataBit_1621
(0081) 	CS_1;
    08E9: 43 00 80 OR    REG[0x0],0x80
(0082) 	delay_us(4);
    08EC: 50 00    MOV   A,0x0
    08EE: 08       PUSH  A
    08EF: 50 04    MOV   A,0x4
    08F1: 08       PUSH  A
    08F2: 9E F8    CALL  _delay_us
    08F4: 38 FC    ADD   SP,0xFC
    08F6: 20       POP   X
    08F7: 7F       RET   
(0083) }
(0084) void WriteAll_1621(uchar addr,uchar *p,uchar cnt)
(0085) {
_WriteAll_1621:
  i                    --> X+0
  cnt                  --> X-7
  p                    --> X-6
  addr                 --> X-4
    08F8: 10       PUSH  X
    08F9: 4F       MOV   X,SP
    08FA: 38 01    ADD   SP,0x1
(0086) 	uchar i;
(0087) 	CS_0;
    08FC: 41 00 7F AND   REG[0x0],0x7F
(0088) 	SendBit_1621(0xa0,3); //写入标志码"101"
    08FF: 50 03    MOV   A,0x3
    0901: 08       PUSH  A
    0902: 50 A0    MOV   A,0xA0
    0904: 08       PUSH  A
    0905: 9F 18    CALL  _SendBit_1621
(0089) 	SendBit_1621(addr<<2,6); //写入6 位addr
    0907: 50 06    MOV   A,0x6
    0909: 08       PUSH  A
    090A: 52 FC    MOV   A,[X-4]
    090C: 62 D0 00 MOV   REG[0xD0],0x0
    090F: 53 3A    MOV   [__r0],A
    0911: 65 3A    ASL   [__r0]
    0913: 65 3A    ASL   [__r0]
    0915: 51 3A    MOV   A,[__r0]
    0917: 08       PUSH  A
    0918: 9F 05    CALL  _SendBit_1621
    091A: 38 FC    ADD   SP,0xFC
(0090) 	for(i =0; i <cnt; i ++,p++) //连续写入数据
    091C: 56 00 00 MOV   [X+0],0x0
    091F: 80 1D    JMP   0x093D
(0091) 	{
(0092) 		SendDataBit_1621(*p,8);
    0921: 50 08    MOV   A,0x8
    0923: 08       PUSH  A
    0924: 62 D0 00 MOV   REG[0xD0],0x0
    0927: 52 FB    MOV   A,[X-5]
    0929: 53 39    MOV   [__r1],A
    092B: 52 FA    MOV   A,[X-6]
    092D: 60 D4    MOV   REG[0xD4],A
    092F: 3E 39    MVI   A,[__r1]
    0931: 08       PUSH  A
    0932: 9F 27    CALL  _SendDataBit_1621
    0934: 38 FE    ADD   SP,0xFE
(0093) 	}
    0936: 77 00    INC   [X+0]
    0938: 77 FB    INC   [X-5]
    093A: 0F FA 00 ADC   [X-6],0x0
    093D: 52 00    MOV   A,[X+0]
    093F: 3B F9    CMP   A,[X-7]
    0941: CF DF    JC    0x0921
(0094) 	CS_1;
    0943: 43 00 80 OR    REG[0x0],0x80
(0095) 	delay_us(4);
    0946: 50 00    MOV   A,0x0
    0948: 08       PUSH  A
    0949: 50 04    MOV   A,0x4
    094B: 08       PUSH  A
    094C: 9E 9E    CALL  _delay_us
    094E: 38 FE    ADD   SP,0xFE
    0950: 38 FF    ADD   SP,0xFF
    0952: 20       POP   X
    0953: 7F       RET   
(0096) }
(0097) 
(0098) void HT1621B_Init(void)
(0099) {
(0100) 	SendCmd(BIAS); //设置偏压和占空比
_HT1621B_Init:
    0954: 50 29    MOV   A,0x29
    0956: 08       PUSH  A
    0957: 9F 40    CALL  _SendCmd
    0959: 38 FF    ADD   SP,0xFF
(0101) 	SendCmd(SYSEN); //打开系统振荡器
    095B: 50 01    MOV   A,0x1
    095D: 08       PUSH  A
    095E: 9F 39    CALL  _SendCmd
(0102) 	SendCmd(LCDON); //打开LCD 偏压发生器
    0960: 50 03    MOV   A,0x3
(0103) 
(0104) }FILE: C:\chendong\MYDOCU~1\code\LCD_DI~1\LCD_DI~1\LCD_DI~1\lcd.c
(0001) #include "HT1621B.h"
(0002) #include "ParticleSensor.h"
(0003) #include "include.h"
(0004) #include <stdlib.h>
(0005) 
(0006) const unsigned char DigitSeg[]    ={0xf5,0x60,0xb6,0xf2,0x63,0xd3,0xd7,0x70,0xf7,0xf3};
(0007) const unsigned char DigitSegSwap[]={0x5f,0x06,0x6b,0x2f,0x36,0x3d,0x7d,0x07,0x7f,0x3f};
(0008) 
(0009) unsigned char DisplayBuf[12]={0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
(0010) 										0xff,0xff,0xff,0xff};
(0011) unsigned char DisplayNum[3];
(0012) 
(0013) extern unsigned char LifeFlag;
(0014) extern unsigned char RH_T_Flag;
(0015) extern unsigned char mode;
(0016) extern unsigned char LockStatus;
(0017) extern unsigned char Plasma;
(0018) extern unsigned char PlasmaFlag;
(0019) extern unsigned char Odor;
(0020) extern unsigned char FanFlag;
(0021) extern unsigned char SpeedLvl;
(0022) extern unsigned char PM_Flag;
(0023) extern unsigned char HeapLife;
(0024) extern unsigned char CarbonLife;
(0025) extern unsigned char FanUpdateTimer;
(0026) extern unsigned char PlasmaTimer;
(0027) extern unsigned char FanUpdateTimeReload;
(0028) extern unsigned char Humidity;
(0029) extern signed   char Temperature;
(0030) extern unsigned char Timer;
(0031) 
(0032) void DisplayPMxx(unsigned int pm)
(0033) {
_DisplayPMxx:
  index                --> X+3
  temp                 --> X+1
  k                    --> X+0
  pm                   --> X-5
    0968: 10       PUSH  X
    0969: 4F       MOV   X,SP
    096A: 38 05    ADD   SP,0x5
(0034) 	char k = 0;
    096C: 56 00 00 MOV   [X+0],0x0
(0035) 	unsigned int index;
(0036) 	unsigned int temp;
(0037) 	
(0038) 	temp = pm;
    096F: 52 FC    MOV   A,[X-4]
    0971: 54 02    MOV   [X+2],A
    0973: 52 FB    MOV   A,[X-5]
    0975: 54 01    MOV   [X+1],A
(0039) 	if(temp > 999)
    0977: 50 E7    MOV   A,0xE7
    0979: 13 02    SUB   A,[X+2]
    097B: 50 03    MOV   A,0x3
    097D: 1B 01    SBB   A,[X+1]
    097F: D0 07    JNC   0x0987
(0040) 	{
(0041) 		temp = 999;
    0981: 56 02 E7 MOV   [X+2],0xE7
    0984: 56 01 03 MOV   [X+1],0x3
(0042) 	}
(0043) 	
(0044) 	index = temp/100;
    0987: 50 00    MOV   A,0x0
    0989: 08       PUSH  A
    098A: 50 64    MOV   A,0x64
    098C: 08       PUSH  A
    098D: 52 01    MOV   A,[X+1]
    098F: 08       PUSH  A
    0990: 52 02    MOV   A,[X+2]
    0992: 08       PUSH  A
    0993: 62 D0 00 MOV   REG[0xD0],0x0
    0996: 7C 18 A8 LCALL 0x18A8
    0999: 18       POP   A
    099A: 54 04    MOV   [X+4],A
    099C: 18       POP   A
    099D: 54 03    MOV   [X+3],A
    099F: 38 FE    ADD   SP,0xFE
(0045) 	DisplayNum[0] = index;
    09A1: 52 04    MOV   A,[X+4]
    09A3: 62 D0 00 MOV   REG[0xD0],0x0
    09A6: 53 40    MOV   [DisplayNum],A
(0046) 	
(0047) 	temp = temp%100;
    09A8: 50 00    MOV   A,0x0
    09AA: 08       PUSH  A
    09AB: 50 64    MOV   A,0x64
    09AD: 08       PUSH  A
    09AE: 52 01    MOV   A,[X+1]
    09B0: 08       PUSH  A
    09B1: 52 02    MOV   A,[X+2]
    09B3: 08       PUSH  A
    09B4: 62 D0 00 MOV   REG[0xD0],0x0
    09B7: 7C 18 A8 LCALL 0x18A8
    09BA: 38 FE    ADD   SP,0xFE
    09BC: 18       POP   A
    09BD: 54 02    MOV   [X+2],A
    09BF: 18       POP   A
    09C0: 54 01    MOV   [X+1],A
(0048) 	index = temp/10;
    09C2: 50 00    MOV   A,0x0
    09C4: 08       PUSH  A
    09C5: 50 0A    MOV   A,0xA
    09C7: 08       PUSH  A
    09C8: 52 01    MOV   A,[X+1]
    09CA: 08       PUSH  A
    09CB: 52 02    MOV   A,[X+2]
    09CD: 08       PUSH  A
    09CE: 7C 18 A8 LCALL 0x18A8
    09D1: 18       POP   A
    09D2: 54 04    MOV   [X+4],A
    09D4: 18       POP   A
    09D5: 54 03    MOV   [X+3],A
    09D7: 38 FE    ADD   SP,0xFE
(0049) 	DisplayNum[1] = index;
    09D9: 52 04    MOV   A,[X+4]
    09DB: 62 D0 00 MOV   REG[0xD0],0x0
    09DE: 53 41    MOV   [DisplayNum+1],A
(0050) 	
(0051) 	index = temp%10;
    09E0: 50 00    MOV   A,0x0
    09E2: 08       PUSH  A
    09E3: 50 0A    MOV   A,0xA
    09E5: 08       PUSH  A
    09E6: 52 01    MOV   A,[X+1]
    09E8: 08       PUSH  A
    09E9: 52 02    MOV   A,[X+2]
    09EB: 08       PUSH  A
    09EC: 62 D0 00 MOV   REG[0xD0],0x0
    09EF: 7C 18 A8 LCALL 0x18A8
    09F2: 38 FE    ADD   SP,0xFE
    09F4: 18       POP   A
    09F5: 54 04    MOV   [X+4],A
    09F7: 18       POP   A
    09F8: 54 03    MOV   [X+3],A
(0052) 	DisplayNum[2] = index;
    09FA: 52 04    MOV   A,[X+4]
    09FC: 62 D0 00 MOV   REG[0xD0],0x0
    09FF: 53 42    MOV   [DisplayNum+2],A
(0053) 	
(0054) 	k = 0;
    0A01: 56 00 00 MOV   [X+0],0x0
    0A04: 80 75    JMP   0x0A7A
(0055) 	while (k<2)
(0056) 	{
(0057) 		if (DisplayNum[k])
    0A06: 62 D0 00 MOV   REG[0xD0],0x0
    0A09: 52 00    MOV   A,[X+0]
    0A0B: 53 39    MOV   [__r1],A
    0A0D: 55 3A 00 MOV   [__r0],0x0
    0A10: 06 39 40 ADD   [__r1],0x40
    0A13: 0E 3A 00 ADC   [__r0],0x0
    0A16: 51 3A    MOV   A,[__r0]
    0A18: 60 D4    MOV   REG[0xD4],A
    0A1A: 3E 39    MVI   A,[__r1]
    0A1C: 39 00    CMP   A,0x0
    0A1E: A0 41    JZ    0x0A60
(0058) 		{
(0059) 			DisplayBuf[k] = DigitSeg[DisplayNum[k]];
    0A20: 52 00    MOV   A,[X+0]
    0A22: 53 39    MOV   [__r1],A
    0A24: 55 3A 00 MOV   [__r0],0x0
    0A27: 06 39 40 ADD   [__r1],0x40
    0A2A: 0E 3A 00 ADC   [__r0],0x0
    0A2D: 51 3A    MOV   A,[__r0]
    0A2F: 60 D4    MOV   REG[0xD4],A
    0A31: 3E 39    MVI   A,[__r1]
    0A33: 53 39    MOV   [__r1],A
    0A35: 55 3A 00 MOV   [__r0],0x0
    0A38: 06 39 70 ADD   [__r1],0x70
    0A3B: 0E 3A 01 ADC   [__r0],0x1
    0A3E: 51 3A    MOV   A,[__r0]
    0A40: 10       PUSH  X
    0A41: 58 39    MOV   X,[__r1]
    0A43: 28       ROMX  
    0A44: 20       POP   X
    0A45: 53 3A    MOV   [__r0],A
    0A47: 52 00    MOV   A,[X+0]
    0A49: 53 37    MOV   [__r3],A
    0A4B: 55 38 00 MOV   [__r2],0x0
    0A4E: 06 37 28 ADD   [__r3],0x28
    0A51: 0E 38 00 ADC   [__r2],0x0
    0A54: 51 38    MOV   A,[__r2]
    0A56: 60 D5    MOV   REG[0xD5],A
    0A58: 51 3A    MOV   A,[__r0]
    0A5A: 3F 37    MVI   [__r3],A
(0060) 			k++;
    0A5C: 77 00    INC   [X+0]
(0061) 			break;
    0A5E: 80 63    JMP   0x0AC2
(0062) 		}
(0063) 		else
(0064) 		{
(0065) 			DisplayBuf[k] = 0;
    0A60: 62 D0 00 MOV   REG[0xD0],0x0
    0A63: 52 00    MOV   A,[X+0]
    0A65: 53 39    MOV   [__r1],A
    0A67: 55 3A 00 MOV   [__r0],0x0
    0A6A: 06 39 28 ADD   [__r1],0x28
    0A6D: 0E 3A 00 ADC   [__r0],0x0
    0A70: 51 3A    MOV   A,[__r0]
    0A72: 60 D5    MOV   REG[0xD5],A
    0A74: 50 00    MOV   A,0x0
    0A76: 3F 39    MVI   [__r1],A
(0066) 		}
(0067) 		k++;
    0A78: 77 00    INC   [X+0]
(0068) 	}
    0A7A: 3D 00 02 CMP   [X+0],0x2
    0A7D: CF 88    JC    0x0A06
(0069) 	
(0070) 	for (;k<3;k++)
    0A7F: 80 42    JMP   0x0AC2
(0071) 	{
(0072) 		DisplayBuf[k] = DigitSeg[DisplayNum[k]];
    0A81: 62 D0 00 MOV   REG[0xD0],0x0
    0A84: 52 00    MOV   A,[X+0]
    0A86: 53 39    MOV   [__r1],A
    0A88: 55 3A 00 MOV   [__r0],0x0
    0A8B: 06 39 40 ADD   [__r1],0x40
    0A8E: 0E 3A 00 ADC   [__r0],0x0
    0A91: 51 3A    MOV   A,[__r0]
    0A93: 60 D4    MOV   REG[0xD4],A
    0A95: 3E 39    MVI   A,[__r1]
    0A97: 53 39    MOV   [__r1],A
    0A99: 55 3A 00 MOV   [__r0],0x0
    0A9C: 06 39 70 ADD   [__r1],0x70
    0A9F: 0E 3A 01 ADC   [__r0],0x1
    0AA2: 51 3A    MOV   A,[__r0]
    0AA4: 10       PUSH  X
    0AA5: 58 39    MOV   X,[__r1]
    0AA7: 28       ROMX  
    0AA8: 20       POP   X
    0AA9: 53 3A    MOV   [__r0],A
    0AAB: 52 00    MOV   A,[X+0]
    0AAD: 53 37    MOV   [__r3],A
    0AAF: 55 38 00 MOV   [__r2],0x0
    0AB2: 06 37 28 ADD   [__r3],0x28
    0AB5: 0E 38 00 ADC   [__r2],0x0
    0AB8: 51 38    MOV   A,[__r2]
    0ABA: 60 D5    MOV   REG[0xD5],A
    0ABC: 51 3A    MOV   A,[__r0]
    0ABE: 3F 37    MVI   [__r3],A
(0073) 	}
    0AC0: 77 00    INC   [X+0]
    0AC2: 3D 00 03 CMP   [X+0],0x3
    0AC5: CF BB    JC    0x0A81
    0AC7: 38 FB    ADD   SP,0xFB
    0AC9: 20       POP   X
    0ACA: 7F       RET   
(0074) }
(0075) 
(0076) void ShowLife(unsigned char life)
(0077) {
_ShowLife:
  index                --> X+1
  temp                 --> X+0
  life                 --> X-4
    0ACB: 10       PUSH  X
    0ACC: 4F       MOV   X,SP
    0ACD: 38 02    ADD   SP,0x2
(0078) 	unsigned char temp = life;
    0ACF: 52 FC    MOV   A,[X-4]
    0AD1: 54 00    MOV   [X+0],A
(0079) 	unsigned char index;
(0080) 	if (temp > 99)
    0AD3: 50 63    MOV   A,0x63
    0AD5: 3B 00    CMP   A,[X+0]
    0AD7: D0 04    JNC   0x0ADC
(0081) 	{
(0082) 		temp = 99;
    0AD9: 56 00 63 MOV   [X+0],0x63
(0083) 	}
(0084) 	
(0085) 	index = temp/10;
    0ADC: 50 0A    MOV   A,0xA
    0ADE: 08       PUSH  A
    0ADF: 52 00    MOV   A,[X+0]
    0AE1: 08       PUSH  A
    0AE2: 62 D0 00 MOV   REG[0xD0],0x0
    0AE5: 7C 18 B3 LCALL 0x18B3
    0AE8: 18       POP   A
    0AE9: 54 01    MOV   [X+1],A
    0AEB: 38 FF    ADD   SP,0xFF
(0086) 	if(index)
    0AED: 3D 01 00 CMP   [X+1],0x0
    0AF0: A0 1C    JZ    0x0B0D
(0087) 	{
(0088) 		DisplayBuf[3] = DigitSeg[index];
    0AF2: 52 01    MOV   A,[X+1]
    0AF4: 53 39    MOV   [__r1],A
    0AF6: 55 3A 00 MOV   [__r0],0x0
    0AF9: 06 39 70 ADD   [__r1],0x70
    0AFC: 0E 3A 01 ADC   [__r0],0x1
    0AFF: 51 3A    MOV   A,[__r0]
    0B01: 10       PUSH  X
    0B02: 58 39    MOV   X,[__r1]
    0B04: 28       ROMX  
    0B05: 20       POP   X
    0B06: 62 D0 00 MOV   REG[0xD0],0x0
    0B09: 53 2B    MOV   [DisplayBuf+3],A
(0089) 	}
    0B0B: 80 07    JMP   0x0B13
(0090) 	else
(0091) 	{
(0092) 		DisplayBuf[3] = 0;
    0B0D: 62 D0 00 MOV   REG[0xD0],0x0
    0B10: 55 2B 00 MOV   [DisplayBuf+3],0x0
(0093) 	}
(0094) 	
(0095) 	index = temp%10;
    0B13: 50 0A    MOV   A,0xA
    0B15: 08       PUSH  A
    0B16: 52 00    MOV   A,[X+0]
    0B18: 08       PUSH  A
    0B19: 62 D0 00 MOV   REG[0xD0],0x0
    0B1C: 7C 18 B3 LCALL 0x18B3
    0B1F: 38 FF    ADD   SP,0xFF
    0B21: 18       POP   A
    0B22: 54 01    MOV   [X+1],A
(0096) 	DisplayBuf[4] = DigitSeg[index];
    0B24: 52 01    MOV   A,[X+1]
    0B26: 53 39    MOV   [__r1],A
    0B28: 55 3A 00 MOV   [__r0],0x0
    0B2B: 06 39 70 ADD   [__r1],0x70
    0B2E: 0E 3A 01 ADC   [__r0],0x1
    0B31: 51 3A    MOV   A,[__r0]
    0B33: 10       PUSH  X
    0B34: 58 39    MOV   X,[__r1]
    0B36: 28       ROMX  
    0B37: 20       POP   X
    0B38: 62 D0 00 MOV   REG[0xD0],0x0
    0B3B: 53 2C    MOV   [DisplayBuf+4],A
    0B3D: 38 FE    ADD   SP,0xFE
    0B3F: 20       POP   X
    0B40: 7F       RET   
(0097) }
(0098) void ShowHumiTemp(signed char value)
(0099) {
_ShowHumiTemp:
  index                --> X+1
  temp                 --> X+0
  value                --> X-4
    0B41: 10       PUSH  X
    0B42: 4F       MOV   X,SP
    0B43: 38 02    ADD   SP,0x2
(0100) 	signed char temp = value;
    0B45: 52 FC    MOV   A,[X-4]
    0B47: 54 00    MOV   [X+0],A
(0101) 	unsigned char index;
(0102) 	if (temp > 99)
    0B49: 50 63    MOV   A,0x63
    0B4B: 3B 00    CMP   A,[X+0]
    0B4D: 6D       RRC   A
    0B4E: 33 00    XOR   A,[X+0]
    0B50: 31 63    XOR   A,0x63
    0B52: 6A       RLC   A
    0B53: D0 04    JNC   0x0B58
(0103) 	{
(0104) 		temp = 99;
    0B55: 56 00 63 MOV   [X+0],0x63
(0105) 	}
(0106) 	
(0107) 	if (temp < 0)
    0B58: 52 00    MOV   A,[X+0]
    0B5A: 39 00    CMP   A,0x0
    0B5C: 6D       RRC   A
    0B5D: 31 00    XOR   A,0x0
    0B5F: 33 00    XOR   A,[X+0]
    0B61: 6A       RLC   A
    0B62: D0 66    JNC   0x0BC9
(0108) 	{
(0109) 		DisplayBuf[9] = 0x20; //"-"
    0B64: 62 D0 00 MOV   REG[0xD0],0x0
    0B67: 55 31 20 MOV   [DisplayBuf+9],0x20
(0110) 		temp = abs(temp);
    0B6A: 62 D0 00 MOV   REG[0xD0],0x0
    0B6D: 52 00    MOV   A,[X+0]
    0B6F: 53 39    MOV   [__r1],A
    0B71: 55 3A 00 MOV   [__r0],0x0
    0B74: 47 39 80 TST   [__r1],0x80
    0B77: A0 04    JZ    0x0B7C
    0B79: 55 3A FF MOV   [__r0],0xFF
    0B7C: 62 D0 00 MOV   REG[0xD0],0x0
    0B7F: 51 3A    MOV   A,[__r0]
    0B81: 08       PUSH  A
    0B82: 51 39    MOV   A,[__r1]
    0B84: 08       PUSH  A
    0B85: 7C 19 98 LCALL _abs
    0B88: 38 FE    ADD   SP,0xFE
    0B8A: 62 D0 00 MOV   REG[0xD0],0x0
    0B8D: 51 39    MOV   A,[__r1]
    0B8F: 54 00    MOV   [X+0],A
(0111) 		if (temp > 9)
    0B91: 50 09    MOV   A,0x9
    0B93: 3B 00    CMP   A,[X+0]
    0B95: 6D       RRC   A
    0B96: 33 00    XOR   A,[X+0]
    0B98: 31 09    XOR   A,0x9
    0B9A: 6A       RLC   A
    0B9B: D0 04    JNC   0x0BA0
(0112) 		{
(0113) 			temp = 9;
    0B9D: 56 00 09 MOV   [X+0],0x9
(0114) 		}
(0115) 		DisplayBuf[8] = DigitSegSwap[temp];
    0BA0: 62 D0 00 MOV   REG[0xD0],0x0
    0BA3: 52 00    MOV   A,[X+0]
    0BA5: 53 39    MOV   [__r1],A
    0BA7: 55 3A 00 MOV   [__r0],0x0
    0BAA: 47 39 80 TST   [__r1],0x80
    0BAD: A0 04    JZ    0x0BB2
    0BAF: 55 3A FF MOV   [__r0],0xFF
    0BB2: 62 D0 00 MOV   REG[0xD0],0x0
    0BB5: 06 39 7A ADD   [__r1],0x7A
    0BB8: 0E 3A 01 ADC   [__r0],0x1
    0BBB: 51 3A    MOV   A,[__r0]
    0BBD: 10       PUSH  X
    0BBE: 58 39    MOV   X,[__r1]
    0BC0: 28       ROMX  
    0BC1: 20       POP   X
    0BC2: 62 D0 00 MOV   REG[0xD0],0x0
    0BC5: 53 30    MOV   [DisplayBuf+8],A
(0116) 	}
    0BC7: 80 62    JMP   0x0C2A
(0117) 	else 
(0118) 	{
(0119) 		index = temp/10;
    0BC9: 50 0A    MOV   A,0xA
    0BCB: 08       PUSH  A
    0BCC: 52 00    MOV   A,[X+0]
    0BCE: 08       PUSH  A
    0BCF: 62 D0 00 MOV   REG[0xD0],0x0
    0BD2: 7C 18 67 LCALL 0x1867
    0BD5: 18       POP   A
    0BD6: 54 01    MOV   [X+1],A
    0BD8: 38 FF    ADD   SP,0xFF
(0120) 		if(index)
    0BDA: 3D 01 00 CMP   [X+1],0x0
    0BDD: A0 1C    JZ    0x0BFA
(0121) 		{
(0122) 			DisplayBuf[9] = DigitSegSwap[index];
    0BDF: 52 01    MOV   A,[X+1]
    0BE1: 53 39    MOV   [__r1],A
    0BE3: 55 3A 00 MOV   [__r0],0x0
    0BE6: 06 39 7A ADD   [__r1],0x7A
    0BE9: 0E 3A 01 ADC   [__r0],0x1
    0BEC: 51 3A    MOV   A,[__r0]
    0BEE: 10       PUSH  X
    0BEF: 58 39    MOV   X,[__r1]
    0BF1: 28       ROMX  
    0BF2: 20       POP   X
    0BF3: 62 D0 00 MOV   REG[0xD0],0x0
    0BF6: 53 31    MOV   [DisplayBuf+9],A
(0123) 		}
    0BF8: 80 07    JMP   0x0C00
(0124) 		else
(0125) 		{
(0126) 			DisplayBuf[9] = 0;
    0BFA: 62 D0 00 MOV   REG[0xD0],0x0
    0BFD: 55 31 00 MOV   [DisplayBuf+9],0x0
(0127) 		}
(0128) 		
(0129) 		index = temp%10;
    0C00: 50 0A    MOV   A,0xA
    0C02: 08       PUSH  A
    0C03: 52 00    MOV   A,[X+0]
    0C05: 08       PUSH  A
    0C06: 62 D0 00 MOV   REG[0xD0],0x0
    0C09: 7C 18 67 LCALL 0x1867
    0C0C: 38 FF    ADD   SP,0xFF
    0C0E: 18       POP   A
    0C0F: 54 01    MOV   [X+1],A
(0130) 		DisplayBuf[8] = DigitSegSwap[index];
    0C11: 52 01    MOV   A,[X+1]
    0C13: 53 39    MOV   [__r1],A
    0C15: 55 3A 00 MOV   [__r0],0x0
    0C18: 06 39 7A ADD   [__r1],0x7A
    0C1B: 0E 3A 01 ADC   [__r0],0x1
    0C1E: 51 3A    MOV   A,[__r0]
    0C20: 10       PUSH  X
    0C21: 58 39    MOV   X,[__r1]
    0C23: 28       ROMX  
    0C24: 20       POP   X
    0C25: 62 D0 00 MOV   REG[0xD0],0x0
    0C28: 53 30    MOV   [DisplayBuf+8],A
(0131) 	}
    0C2A: 38 FE    ADD   SP,0xFE
    0C2C: 20       POP   X
    0C2D: 7F       RET   
(0132) }
(0133) 
(0134) void LCDOuputAll(void)
(0135) {
_LCDOuputAll:
  k                    --> X+0
    0C2E: 10       PUSH  X
    0C2F: 4F       MOV   X,SP
    0C30: 38 01    ADD   SP,0x1
(0136) 	char k = 0;
    0C32: 56 00 00 MOV   [X+0],0x0
(0137) 	
(0138) 	for (k=0;k<16;k++)
    0C35: 56 00 00 MOV   [X+0],0x0
    0C38: 80 1B    JMP   0x0C54
(0139) 	{
(0140) 		DisplayBuf[k] = 0;
    0C3A: 62 D0 00 MOV   REG[0xD0],0x0
    0C3D: 52 00    MOV   A,[X+0]
    0C3F: 53 39    MOV   [__r1],A
    0C41: 55 3A 00 MOV   [__r0],0x0
    0C44: 06 39 28 ADD   [__r1],0x28
    0C47: 0E 3A 00 ADC   [__r0],0x0
    0C4A: 51 3A    MOV   A,[__r0]
    0C4C: 60 D5    MOV   REG[0xD5],A
    0C4E: 50 00    MOV   A,0x0
    0C50: 3F 39    MVI   [__r1],A
(0141) 	}
    0C52: 77 00    INC   [X+0]
    0C54: 3D 00 10 CMP   [X+0],0x10
    0C57: CF E2    JC    0x0C3A
(0142) 	
(0143) 	//
(0144) 	//show the PM2.5 or PM1.0
(0145) 	//
(0146) 	if (PM_Flag == PM2_5)//show the PM2.5 value
    0C59: 62 D0 00 MOV   REG[0xD0],0x0
    0C5C: 3C 4F 00 CMP   [PM_Flag],0x0
    0C5F: B0 16    JNZ   0x0C76
(0147) 	{
(0148) 		DisplayPMxx(MyPMSUnion.MyPMFrame.PM2_5_US);
    0C61: 62 D0 00 MOV   REG[0xD0],0x0
    0C64: 51 06    MOV   A,[MyPMSUnion+6]
    0C66: 08       PUSH  A
    0C67: 51 07    MOV   A,[MyPMSUnion+7]
    0C69: 08       PUSH  A
    0C6A: 9C FC    CALL  _DisplayPMxx
    0C6C: 38 FE    ADD   SP,0xFE
(0149) 		DisplayBuf[0] |= BIT3; //PM2.5 segment
    0C6E: 62 D0 00 MOV   REG[0xD0],0x0
    0C71: 2E 28 08 OR    [DisplayBuf],0x8
(0150) 	}
    0C74: 80 14    JMP   0x0C89
(0151) 	else //show the PM1.0 
(0152) 	{
(0153) 		DisplayPMxx(MyPMSUnion.MyPMFrame.PM1_0_US);
    0C76: 62 D0 00 MOV   REG[0xD0],0x0
    0C79: 51 04    MOV   A,[MyPMSUnion+4]
    0C7B: 08       PUSH  A
    0C7C: 51 05    MOV   A,[MyPMSUnion+5]
    0C7E: 08       PUSH  A
    0C7F: 9C E7    CALL  _DisplayPMxx
    0C81: 38 FE    ADD   SP,0xFE
(0154) 		DisplayBuf[1] |= BIT3;	//PM1.0 segment
    0C83: 62 D0 00 MOV   REG[0xD0],0x0
    0C86: 2E 29 08 OR    [DisplayBuf+1],0x8
(0155) 	}
(0156) 	DisplayBuf[2] |= BIT3; //ug/m3 segment
    0C89: 62 D0 00 MOV   REG[0xD0],0x0
    0C8C: 2E 2A 08 OR    [DisplayBuf+2],0x8
(0157) 	
(0158) 	//
(0159) 	//show the heap or carbon life
(0160) 	//
(0161) 	if (LifeFlag == HEAP_LIFE)
    0C8F: 62 D0 00 MOV   REG[0xD0],0x0
    0C92: 3C 4D 00 CMP   [LifeFlag],0x0
    0C95: B0 13    JNZ   0x0CA9
(0162) 	{
(0163) 		ShowLife(HeapLife);
    0C97: 62 D0 00 MOV   REG[0xD0],0x0
    0C9A: 51 50    MOV   A,[HeapLife]
    0C9C: 08       PUSH  A
    0C9D: 9E 2C    CALL  _ShowLife
    0C9F: 38 FF    ADD   SP,0xFF
(0164) 		DisplayBuf[3] |= BIT3; //H segment
    0CA1: 62 D0 00 MOV   REG[0xD0],0x0
    0CA4: 2E 2B 08 OR    [DisplayBuf+3],0x8
(0165) //		DisplayBuf[4] &= ~BIT3;
(0166) 	}
    0CA7: 80 11    JMP   0x0CB9
(0167) 	else 
(0168) 	{
(0169) 		ShowLife(CarbonLife);
    0CA9: 62 D0 00 MOV   REG[0xD0],0x0
    0CAC: 51 5C    MOV   A,[CarbonLife]
    0CAE: 08       PUSH  A
    0CAF: 9E 1A    CALL  _ShowLife
    0CB1: 38 FF    ADD   SP,0xFF
(0170) 		DisplayBuf[4] |= BIT3; //炭 segment
    0CB3: 62 D0 00 MOV   REG[0xD0],0x0
    0CB6: 2E 2C 08 OR    [DisplayBuf+4],0x8
(0171) //		DisplayBuf[3] &= ~BIT3;
(0172) 	}
(0173) 	
(0174) 	//
(0175) 	//show speed level
(0176) 	//
(0177) 	if (SpeedLvl > 8)
    0CB9: 62 D0 00 MOV   REG[0xD0],0x0
    0CBC: 50 08    MOV   A,0x8
    0CBE: 3A 4E    CMP   A,[SpeedLvl]
    0CC0: D0 07    JNC   0x0CC8
(0178) 	{
(0179) 		SpeedLvl = 8;
    0CC2: 62 D0 00 MOV   REG[0xD0],0x0
    0CC5: 55 4E 08 MOV   [SpeedLvl],0x8
(0180) 	}
(0181) 	DisplayBuf[5] = DigitSeg[SpeedLvl];
    0CC8: 62 D0 00 MOV   REG[0xD0],0x0
    0CCB: 51 4E    MOV   A,[SpeedLvl]
    0CCD: 62 D0 00 MOV   REG[0xD0],0x0
    0CD0: 53 39    MOV   [__r1],A
    0CD2: 55 3A 00 MOV   [__r0],0x0
    0CD5: 06 39 70 ADD   [__r1],0x70
    0CD8: 0E 3A 01 ADC   [__r0],0x1
    0CDB: 51 3A    MOV   A,[__r0]
    0CDD: 10       PUSH  X
    0CDE: 58 39    MOV   X,[__r1]
    0CE0: 28       ROMX  
    0CE1: 20       POP   X
    0CE2: 62 D0 00 MOV   REG[0xD0],0x0
    0CE5: 53 2D    MOV   [DisplayBuf+5],A
(0182) 	
(0183) 	if(!FanUpdateTimer)
    0CE7: 62 D0 00 MOV   REG[0xD0],0x0
    0CEA: 3C 5A 00 CMP   [FanUpdateTimer],0x0
    0CED: B0 14    JNZ   0x0D02
(0184) 	{
(0185) 		FanUpdateTimer = FanUpdateTimeReload;
    0CEF: 62 D0 00 MOV   REG[0xD0],0x0
    0CF2: 51 52    MOV   A,[FanUpdateTimeReload]
    0CF4: 62 D0 00 MOV   REG[0xD0],0x0
    0CF7: 53 5A    MOV   [FanUpdateTimer],A
(0186) 		FanFlag ^= 1;
    0CF9: 62 D0 00 MOV   REG[0xD0],0x0
    0CFC: 51 57    MOV   A,[FanFlag]
    0CFE: 31 01    XOR   A,0x1
    0D00: 53 57    MOV   [FanFlag],A
(0187) 	}
(0188) 	if (FanFlag)
    0D02: 62 D0 00 MOV   REG[0xD0],0x0
    0D05: 3C 57 00 CMP   [FanFlag],0x0
    0D08: A0 09    JZ    0x0D12
(0189) 	{
(0190) 		DisplayBuf[6] |= BIT0;
    0D0A: 62 D0 00 MOV   REG[0xD0],0x0
    0D0D: 2E 2E 01 OR    [DisplayBuf+6],0x1
(0191) //		DisplayBuf[6] &= ~BIT1;
(0192) 	}
    0D10: 80 07    JMP   0x0D18
(0193) 	else 
(0194) 	{
(0195) 		DisplayBuf[6] |= BIT1;
    0D12: 62 D0 00 MOV   REG[0xD0],0x0
    0D15: 2E 2E 02 OR    [DisplayBuf+6],0x2
(0196) //		DisplayBuf[6] &= ~BIT0;
(0197) 	}
(0198) 	
(0199) 	//
(0200) 	//show the temperature/humidity/timer
(0201) 	//
(0202) 	if (RH_T_Flag == HUMIDITY)
    0D18: 62 D0 00 MOV   REG[0xD0],0x0
    0D1B: 3C 49 00 CMP   [RH_T_Flag],0x0
    0D1E: B0 0D    JNZ   0x0D2C
(0203) 	{
(0204) 		ShowHumiTemp(Humidity);
    0D20: 62 D0 00 MOV   REG[0xD0],0x0
    0D23: 51 56    MOV   A,[Humidity]
    0D25: 08       PUSH  A
    0D26: 9E 19    CALL  _ShowHumiTemp
    0D28: 38 FF    ADD   SP,0xFF
(0205) //		DisplayBuf[9] &= ~BIT7;
(0206) //		DisplayBuf[7] &= ~BIT4;
(0207) //		DisplayBuf[7] &= ~BIT5;
(0208) 	}
    0D2A: 80 2E    JMP   0x0D59
(0209) 	else
(0210) 	{
(0211) 		if (RH_T_Flag == TEMPERATURE)
    0D2C: 62 D0 00 MOV   REG[0xD0],0x0
    0D2F: 3C 49 01 CMP   [RH_T_Flag],0x1
    0D32: B0 13    JNZ   0x0D46
(0212) 		{
(0213) 			ShowHumiTemp(Temperature);
    0D34: 62 D0 00 MOV   REG[0xD0],0x0
    0D37: 51 55    MOV   A,[Temperature]
    0D39: 08       PUSH  A
    0D3A: 9E 05    CALL  _ShowHumiTemp
    0D3C: 38 FF    ADD   SP,0xFF
(0214) //			DisplayBuf[9] &= ~BIT7;
(0215) //			DisplayBuf[7] &= ~BIT4;
(0216) 			DisplayBuf[7] |= BIT5;
    0D3E: 62 D0 00 MOV   REG[0xD0],0x0
    0D41: 2E 2F 20 OR    [DisplayBuf+7],0x20
(0217) 		}
    0D44: 80 14    JMP   0x0D59
(0218) 		else //timer
(0219) 		{
(0220) 			ShowHumiTemp(Timer);
    0D46: 62 D0 00 MOV   REG[0xD0],0x0
    0D49: 51 53    MOV   A,[Timer]
    0D4B: 08       PUSH  A
    0D4C: 9D F3    CALL  _ShowHumiTemp
    0D4E: 38 FF    ADD   SP,0xFF
(0221) 			DisplayBuf[9] |= BIT7;
    0D50: 62 D0 00 MOV   REG[0xD0],0x0
    0D53: 2E 31 80 OR    [DisplayBuf+9],0x80
(0222) 			DisplayBuf[7] |= BIT4;
    0D56: 2E 2F 10 OR    [DisplayBuf+7],0x10
(0223) //			DisplayBuf[7] &= ~BIT5;
(0224) 		}
(0225) 	}
(0226) 	
(0227) 	//
(0228) 	//show auto/manual mode
(0229) 	//
(0230) 	if (mode == AUTO_MODE)
    0D59: 62 D0 00 MOV   REG[0xD0],0x0
    0D5C: 3C 4A 00 CMP   [mode],0x0
    0D5F: B0 09    JNZ   0x0D69
(0231) 	{
(0232) 		DisplayBuf[7] |= BIT1;
    0D61: 62 D0 00 MOV   REG[0xD0],0x0
    0D64: 2E 2F 02 OR    [DisplayBuf+7],0x2
(0233) //		DisplayBuf[7] &= ~BIT2;
(0234) 	}
    0D67: 80 07    JMP   0x0D6F
(0235) 	else 
(0236) 	{
(0237) 		DisplayBuf[7] |= BIT2;
    0D69: 62 D0 00 MOV   REG[0xD0],0x0
    0D6C: 2E 2F 04 OR    [DisplayBuf+7],0x4
(0238) //		DisplayBuf[7] &= ~BIT1;
(0239) 	}
(0240) 	
(0241) 	//
(0242) 	//show lock status
(0243) 	//
(0244) 	if (LockStatus)
    0D6F: 62 D0 00 MOV   REG[0xD0],0x0
    0D72: 3C 4B 00 CMP   [LockStatus],0x0
    0D75: A0 07    JZ    0x0D7D
(0245) 	{
(0246) 		DisplayBuf[7] |= BIT0;
    0D77: 62 D0 00 MOV   REG[0xD0],0x0
    0D7A: 2E 2F 01 OR    [DisplayBuf+7],0x1
(0247) 	}
(0248) //	else
(0249) //	{
(0250) //		DisplayBuf[7] &= ~BIT0;
(0251) //	}
(0252) 	
(0253) 	//
(0254) 	//show plasma
(0255) 	//
(0256) 	if (Plasma)
    0D7D: 62 D0 00 MOV   REG[0xD0],0x0
    0D80: 3C 4C 00 CMP   [Plasma],0x0
    0D83: A0 32    JZ    0x0DB6
(0257) 	{
(0258) 		DisplayBuf[6] |= BIT4;
    0D85: 62 D0 00 MOV   REG[0xD0],0x0
    0D88: 2E 2E 10 OR    [DisplayBuf+6],0x10
(0259) 		if (!PlasmaTimer)
    0D8B: 62 D0 00 MOV   REG[0xD0],0x0
    0D8E: 3C 46 00 CMP   [PlasmaTimer],0x0
    0D91: B0 24    JNZ   0x0DB6
(0260) 		{
(0261) 			PlasmaTimer = PLASMA_TIMER_RELOAD;
    0D93: 55 46 08 MOV   [PlasmaTimer],0x8
(0262) 			if (PlasmaFlag == 0)
    0D96: 62 D0 00 MOV   REG[0xD0],0x0
    0D99: 3C 58 00 CMP   [PlasmaFlag],0x0
    0D9C: B0 06    JNZ   0x0DA3
(0263) 			{
(0264) 				PlasmaFlag = 1;
    0D9E: 55 58 01 MOV   [PlasmaFlag],0x1
(0265) 			}
    0DA1: 80 14    JMP   0x0DB6
(0266) 			else
(0267) 			{
(0268) 				if (PlasmaFlag == 1)
    0DA3: 62 D0 00 MOV   REG[0xD0],0x0
    0DA6: 3C 58 01 CMP   [PlasmaFlag],0x1
    0DA9: B0 06    JNZ   0x0DB0
(0269) 				{
(0270) 					PlasmaFlag = 2;
    0DAB: 55 58 02 MOV   [PlasmaFlag],0x2
(0271) 				}
    0DAE: 80 07    JMP   0x0DB6
(0272) 				else 
(0273) 				{
(0274) 					PlasmaFlag = 0;
    0DB0: 62 D0 00 MOV   REG[0xD0],0x0
    0DB3: 55 58 00 MOV   [PlasmaFlag],0x0
(0275) 				}
(0276) 			}
(0277) 		}
(0278) 	}
(0279) 	if (PlasmaFlag == 1)
    0DB6: 62 D0 00 MOV   REG[0xD0],0x0
    0DB9: 3C 58 01 CMP   [PlasmaFlag],0x1
    0DBC: B0 09    JNZ   0x0DC6
(0280) 	{
(0281) 		DisplayBuf[6] |= BIT6;
    0DBE: 62 D0 00 MOV   REG[0xD0],0x0
    0DC1: 2E 2E 40 OR    [DisplayBuf+6],0x40
(0282) 	}
    0DC4: 80 0F    JMP   0x0DD4
(0283) 	else if (PlasmaFlag == 2)
    0DC6: 62 D0 00 MOV   REG[0xD0],0x0
    0DC9: 3C 58 02 CMP   [PlasmaFlag],0x2
    0DCC: B0 07    JNZ   0x0DD4
(0284) 	{
(0285) 		DisplayBuf[6] |= BIT5 + BIT6;
    0DCE: 62 D0 00 MOV   REG[0xD0],0x0
    0DD1: 2E 2E 60 OR    [DisplayBuf+6],0x60
(0286) 	}
(0287) 
(0288) 	
(0289) 	//
(0290) 	//show the dust/odor level
(0291) 	//
(0292) 	if (MyPMSUnion.MyPMFrame.PM2_5_US > 150)
    0DD4: 62 D0 00 MOV   REG[0xD0],0x0
    0DD7: 50 96    MOV   A,0x96
    0DD9: 12 07    SUB   A,[MyPMSUnion+7]
    0DDB: 50 00    MOV   A,0x0
    0DDD: 1A 06    SBB   A,[MyPMSUnion+6]
    0DDF: D0 0C    JNC   0x0DEC
(0293) 	{
(0294) 		DisplayBuf[11] |= BIT5 + BIT4;
    0DE1: 62 D0 00 MOV   REG[0xD0],0x0
    0DE4: 2E 33 30 OR    [DisplayBuf+11],0x30
(0295) 		DisplayBuf[10] |= BIT0 + BIT1 + BIT2 + BIT3;
    0DE7: 2E 32 0F OR    [DisplayBuf+10],0xF
(0296) 	}
    0DEA: 80 64    JMP   0x0E4F
(0297) 	else 
(0298) 	{
(0299) 		if (MyPMSUnion.MyPMFrame.PM2_5_US > 100)
    0DEC: 62 D0 00 MOV   REG[0xD0],0x0
    0DEF: 50 64    MOV   A,0x64
    0DF1: 12 07    SUB   A,[MyPMSUnion+7]
    0DF3: 50 00    MOV   A,0x0
    0DF5: 1A 06    SBB   A,[MyPMSUnion+6]
    0DF7: D0 0C    JNC   0x0E04
(0300) 		{
(0301) 			DisplayBuf[11] |= BIT5 + BIT4;
    0DF9: 62 D0 00 MOV   REG[0xD0],0x0
    0DFC: 2E 33 30 OR    [DisplayBuf+11],0x30
(0302) 			DisplayBuf[10] |= BIT0 + BIT1 + BIT2;
    0DFF: 2E 32 07 OR    [DisplayBuf+10],0x7
(0303) 		}
    0E02: 80 4C    JMP   0x0E4F
(0304) 		else
(0305) 		{
(0306) 			if (MyPMSUnion.MyPMFrame.PM2_5_US > 75)
    0E04: 62 D0 00 MOV   REG[0xD0],0x0
    0E07: 50 4B    MOV   A,0x4B
    0E09: 12 07    SUB   A,[MyPMSUnion+7]
    0E0B: 50 00    MOV   A,0x0
    0E0D: 1A 06    SBB   A,[MyPMSUnion+6]
    0E0F: D0 0C    JNC   0x0E1C
(0307) 			{
(0308) 				DisplayBuf[11] |= BIT5 + BIT4;
    0E11: 62 D0 00 MOV   REG[0xD0],0x0
    0E14: 2E 33 30 OR    [DisplayBuf+11],0x30
(0309) 				DisplayBuf[10] |= BIT0 + BIT1;
    0E17: 2E 32 03 OR    [DisplayBuf+10],0x3
(0310) 			}
    0E1A: 80 34    JMP   0x0E4F
(0311) 			else 
(0312) 			{
(0313) 				if (MyPMSUnion.MyPMFrame.PM2_5_US > 50)
    0E1C: 62 D0 00 MOV   REG[0xD0],0x0
    0E1F: 50 32    MOV   A,0x32
    0E21: 12 07    SUB   A,[MyPMSUnion+7]
    0E23: 50 00    MOV   A,0x0
    0E25: 1A 06    SBB   A,[MyPMSUnion+6]
    0E27: D0 0C    JNC   0x0E34
(0314) 				{
(0315) 					DisplayBuf[11] |= BIT5 + BIT4;
    0E29: 62 D0 00 MOV   REG[0xD0],0x0
    0E2C: 2E 33 30 OR    [DisplayBuf+11],0x30
(0316) 					DisplayBuf[10] |= BIT0;
    0E2F: 2E 32 01 OR    [DisplayBuf+10],0x1
(0317) 				}
    0E32: 80 1C    JMP   0x0E4F
(0318) 				else 
(0319) 				{
(0320) 					if (MyPMSUnion.MyPMFrame.PM2_5_US > 25)
    0E34: 62 D0 00 MOV   REG[0xD0],0x0
    0E37: 50 19    MOV   A,0x19
    0E39: 12 07    SUB   A,[MyPMSUnion+7]
    0E3B: 50 00    MOV   A,0x0
    0E3D: 1A 06    SBB   A,[MyPMSUnion+6]
    0E3F: D0 09    JNC   0x0E49
(0321) 					DisplayBuf[11] |= BIT5 + BIT4;
    0E41: 62 D0 00 MOV   REG[0xD0],0x0
    0E44: 2E 33 30 OR    [DisplayBuf+11],0x30
    0E47: 80 07    JMP   0x0E4F
(0322) 					else
(0323) 					DisplayBuf[11] |= BIT5;
    0E49: 62 D0 00 MOV   REG[0xD0],0x0
    0E4C: 2E 33 20 OR    [DisplayBuf+11],0x20
(0324) 				}
(0325) 			}
(0326) 		}
(0327) 	}
(0328) 	
(0329) 	if (Odor > 4)
    0E4F: 62 D0 00 MOV   REG[0xD0],0x0
    0E52: 50 04    MOV   A,0x4
    0E54: 3A 5B    CMP   A,[Odor]
    0E56: D0 0C    JNC   0x0E63
(0330) 	{
(0331) 		DisplayBuf[11] |= BIT0 + BIT1;
    0E58: 62 D0 00 MOV   REG[0xD0],0x0
    0E5B: 2E 33 03 OR    [DisplayBuf+11],0x3
(0332) 		DisplayBuf[10] |= BIT4 + BIT5 + BIT6 + BIT7;
    0E5E: 2E 32 F0 OR    [DisplayBuf+10],0xF0
(0333) 	}
    0E61: 80 54    JMP   0x0EB6
(0334) 	else 
(0335) 	{
(0336) 		if (Odor > 3)
    0E63: 62 D0 00 MOV   REG[0xD0],0x0
    0E66: 50 03    MOV   A,0x3
    0E68: 3A 5B    CMP   A,[Odor]
    0E6A: D0 0C    JNC   0x0E77
(0337) 		{
(0338) 			DisplayBuf[11] |= BIT0 + BIT1;
    0E6C: 62 D0 00 MOV   REG[0xD0],0x0
    0E6F: 2E 33 03 OR    [DisplayBuf+11],0x3
(0339) 			DisplayBuf[10] |= BIT4 + BIT5 + BIT6;
    0E72: 2E 32 70 OR    [DisplayBuf+10],0x70
(0340) 		}
    0E75: 80 40    JMP   0x0EB6
(0341) 		else
(0342) 		{
(0343) 			if (Odor > 2)
    0E77: 62 D0 00 MOV   REG[0xD0],0x0
    0E7A: 50 02    MOV   A,0x2
    0E7C: 3A 5B    CMP   A,[Odor]
    0E7E: D0 0C    JNC   0x0E8B
(0344) 			{
(0345) 				DisplayBuf[11] |= BIT0 + BIT1;
    0E80: 62 D0 00 MOV   REG[0xD0],0x0
    0E83: 2E 33 03 OR    [DisplayBuf+11],0x3
(0346) 				DisplayBuf[10] |= BIT4 + BIT5;
    0E86: 2E 32 30 OR    [DisplayBuf+10],0x30
(0347) 			}
    0E89: 80 2C    JMP   0x0EB6
(0348) 			else 
(0349) 			{
(0350) 				if (Odor > 1)
    0E8B: 62 D0 00 MOV   REG[0xD0],0x0
    0E8E: 50 01    MOV   A,0x1
    0E90: 3A 5B    CMP   A,[Odor]
    0E92: D0 0C    JNC   0x0E9F
(0351) 				{
(0352) 					DisplayBuf[11] |= BIT0 + BIT1;
    0E94: 62 D0 00 MOV   REG[0xD0],0x0
    0E97: 2E 33 03 OR    [DisplayBuf+11],0x3
(0353) 					DisplayBuf[10] |= BIT4;
    0E9A: 2E 32 10 OR    [DisplayBuf+10],0x10
(0354) 				}
    0E9D: 80 18    JMP   0x0EB6
(0355) 				else 
(0356) 				{
(0357) 					if (Odor > 0)
    0E9F: 62 D0 00 MOV   REG[0xD0],0x0
    0EA2: 50 00    MOV   A,0x0
    0EA4: 3A 5B    CMP   A,[Odor]
    0EA6: D0 09    JNC   0x0EB0
(0358) 					DisplayBuf[11] |= BIT0 + BIT1;
    0EA8: 62 D0 00 MOV   REG[0xD0],0x0
    0EAB: 2E 33 03 OR    [DisplayBuf+11],0x3
    0EAE: 80 07    JMP   0x0EB6
(0359) 					else
(0360) 					DisplayBuf[11] |= BIT1;
    0EB0: 62 D0 00 MOV   REG[0xD0],0x0
    0EB3: 2E 33 02 OR    [DisplayBuf+11],0x2
(0361) 				}
(0362) 			}
(0363) 		}
(0364) 	}
(0365) 	
(0366) 	DisplayBuf[5] |= BIT3;
    0EB6: 62 D0 00 MOV   REG[0xD0],0x0
    0EB9: 2E 2D 08 OR    [DisplayBuf+5],0x8
(0367) 	DisplayBuf[6] |= BIT2 + BIT3;
    0EBC: 2E 2E 0C OR    [DisplayBuf+6],0xC
(0368) 	DisplayBuf[7] |= BIT6 + BIT7;
    0EBF: 2E 2F C0 OR    [DisplayBuf+7],0xC0
(0369) 	DisplayBuf[11] |= BIT2 + BIT6;
    0EC2: 2E 33 44 OR    [DisplayBuf+11],0x44
(0370) 	WriteAll_1621(0,DisplayBuf,12);
    0EC5: 50 0C    MOV   A,0xC
    0EC7: 08       PUSH  A
    0EC8: 50 00    MOV   A,0x0
    0ECA: 08       PUSH  A
    0ECB: 50 28    MOV   A,0x28
    0ECD: 08       PUSH  A
    0ECE: 50 00    MOV   A,0x0
    0ED0: 08       PUSH  A
    0ED1: 7C 08 F8 LCALL _WriteAll_1621
    0ED4: 38 FC    ADD   SP,0xFC
    0ED6: 38 FF    ADD   SP,0xFF
    0ED8: 20       POP   X
    0ED9: 7F       RET   
FILE: C:\chendong\MYDOCU~1\code\LCD_DI~1\LCD_DI~1\LCD_DI~1\main.c
(0001) //----------------------------------------------------------------------------
(0002) // C main line
(0003) //----------------------------------------------------------------------------
(0004) 
(0005) #include <m8c.h>        // part specific constants and macros
(0006) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0007) #include "HT1621B.h"
(0008) #include "ParticleSensor.h"
(0009) #include "software_IIC.h"
(0010) #include "Si7020.h"
(0011) #include "include.h"
(0012) 
(0013) #define ONE_SECOND_TIMER_RELOAD 8
(0014) 
(0015) unsigned char RecBuf[5];
(0016) unsigned int LightADCValue;										
(0017) 
(0018) unsigned char FanUpdateTimer	= ONE_SECOND_TIMER_RELOAD;
(0019) unsigned char one_sec_timer		= ONE_SECOND_TIMER_RELOAD;
(0020) unsigned char rh_sample_timer	= ONE_SECOND_TIMER_RELOAD;
(0021) unsigned char PlasmaTimer		= PLASMA_TIMER_RELOAD;
(0022) unsigned char LcdUpdateTimer	= 4;
(0023) unsigned char IICTimeOutTimer;
(0024) 
(0025) unsigned char LifeFlag	 = HEAP_LIFE;
(0026) unsigned char RH_T_Flag  = TEMPERATURE;
(0027) unsigned char mode = AUTO_MODE;
(0028) unsigned char LockStatus = 1;
(0029) unsigned char Plasma = 1;
(0030) unsigned char PlasmaFlag;
(0031) unsigned char Odor = 2;
(0032) unsigned char FanFlag;
(0033) unsigned char SpeedLvl = 1;
(0034) unsigned char PM_Flag = PM2_5;
(0035) unsigned char HeapLife = 78;
(0036) unsigned char CarbonLife = 56;
(0037) unsigned char FanUpdateTimeReload = ONE_SECOND_TIMER_RELOAD;
(0038) unsigned char Humidity;
(0039) signed   char Temperature;
(0040) unsigned char Timer = 3;
(0041) unsigned char RHSampleStep = 0;
(0042) extern void LCDOuputAll(void);
(0043) 
(0044) void Timer16ISR(void)
(0045) {
(0046) 	if (one_sec_timer)		one_sec_timer--;
_Timer16ISR:
    0EDA: 62 D0 00 MOV   REG[0xD0],0x0
    0EDD: 3C 48 00 CMP   [one_sec_timer],0x0
    0EE0: A0 03    JZ    0x0EE4
    0EE2: 7A 48    DEC   [one_sec_timer]
(0047) 	if (rh_sample_timer)	rh_sample_timer--;
    0EE4: 62 D0 00 MOV   REG[0xD0],0x0
    0EE7: 3C 45 00 CMP   [rh_sample_timer],0x0
    0EEA: A0 03    JZ    0x0EEE
    0EEC: 7A 45    DEC   [rh_sample_timer]
(0048) 	if (FanUpdateTimer)		FanUpdateTimer--;
    0EEE: 62 D0 00 MOV   REG[0xD0],0x0
    0EF1: 3C 5A 00 CMP   [FanUpdateTimer],0x0
    0EF4: A0 03    JZ    0x0EF8
    0EF6: 7A 5A    DEC   [FanUpdateTimer]
(0049) 	if (PlasmaTimer) 		PlasmaTimer--;
    0EF8: 62 D0 00 MOV   REG[0xD0],0x0
    0EFB: 3C 46 00 CMP   [PlasmaTimer],0x0
    0EFE: A0 03    JZ    0x0F02
    0F00: 7A 46    DEC   [PlasmaTimer]
(0050) 	if (LcdUpdateTimer)		LcdUpdateTimer--;
    0F02: 62 D0 00 MOV   REG[0xD0],0x0
    0F05: 3C 47 00 CMP   [LcdUpdateTimer],0x0
    0F08: A0 03    JZ    0x0F0C
    0F0A: 7A 47    DEC   [LcdUpdateTimer]
(0051) 	if (IICTimeOutTimer)	IICTimeOutTimer--;
    0F0C: 62 D0 00 MOV   REG[0xD0],0x0
    0F0F: 3C 59 00 CMP   [IICTimeOutTimer],0x0
    0F12: A0 03    JZ    0x0F16
    0F14: 7A 59    DEC   [IICTimeOutTimer]
    0F16: 7F       RET   
(0052) }
(0053) 
(0054) void main(void)
(0055) {
_main:
  p                    --> X+2
  k                    --> X+1
  ret                  --> X+0
    0F17: 10       PUSH  X
    0F18: 4F       MOV   X,SP
    0F19: 38 04    ADD   SP,0x4
(0056) 	unsigned char k;
(0057) 	unsigned char ret;
(0058) 	unsigned int *p;
(0059) 	M8C_EnableGInt ; // Uncomment this line to enable Global Interrupts
    0F1B: 71 01    OR    F,0x1
(0060) 	// Insert your main routine code here.
(0061) 	
(0062) 	Init_IIC();
    0F1D: 7C 14 7D LCALL _Init_IIC
(0063) 	
(0064) 	delay_us(200);	//wait for the LCD driver power on
    0F20: 50 00    MOV   A,0x0
    0F22: 08       PUSH  A
    0F23: 50 C8    MOV   A,0xC8
    0F25: 08       PUSH  A
    0F26: 7C 07 EC LCALL _delay_us
    0F29: 38 FE    ADD   SP,0xFE
(0065) 	HT1621B_Init();
    0F2B: 7C 09 54 LCALL _HT1621B_Init
(0066) 	
(0067) 	//back light 
(0068) 	PWM8_BL_WritePeriod(255);    // Set period to eight clocks
    0F2E: 10       PUSH  X
    0F2F: 50 FF    MOV   A,0xFF
    0F31: 7C 07 8E LCALL _PWM8_BL_WritePeriod
(0069) 	PWM8_BL_WritePulseWidth(5);   // Set pulse width to generate a 50% duty 
    0F34: 50 05    MOV   A,0x5
    0F36: 7C 07 91 LCALL _PWM8_BL_WritePulseWidth
(0070) 	PWM8_BL_Start();
    0F39: 7C 07 86 LCALL _PWM8_BL_Start
(0071) 	
(0072) 	//WriteAll_1621(0,a,16); //在起始地址为0 处连续写入16个字节数据
(0073) 	
(0074) 	UART_Board_Start(UART_PARITY_NONE);
    0F3C: 50 00    MOV   A,0x0
    0F3E: 7C 05 3A LCALL _UART_Board_Start
(0075) 	UART_Board_EnableInt();
    0F41: 7C 05 1A LCALL _UART_Board_EnableInt
(0076) 	
(0077) 	UART_Sensor_Start(UART_PARITY_NONE);
    0F44: 50 00    MOV   A,0x0
    0F46: 7C 03 E8 LCALL _UART_Sensor_Start
(0078) 	UART_Sensor_EnableInt();
    0F49: 7C 03 C8 LCALL _UART_Sensor_EnableInt
(0079) 	
(0080) 	Timer16_WritePeriod(9600);
    0F4C: 57 25    MOV   X,0x25
    0F4E: 50 80    MOV   A,0x80
    0F50: 7C 06 7A LCALL _Timer16_WritePeriod
(0081) 	Timer16_WriteCompareValue(9000);
    0F53: 57 23    MOV   X,0x23
    0F55: 50 28    MOV   A,0x28
    0F57: 7C 06 80 LCALL _Timer16_WriteCompareValue
(0082) 	Timer16_EnableInt();
    0F5A: 7C 06 6A LCALL _Timer16_EnableInt
(0083) 	Timer16_Start();
    0F5D: 7C 06 72 LCALL _Timer16_Start
    0F60: 20       POP   X
(0084) 
(0085) //	UART_Board_CPutString("Woody is a genius!");
(0086) 	
(0087) 	PMSFrameFlag = 0;
    0F61: 62 D0 00 MOV   REG[0xD0],0x0
    0F64: 55 5D 00 MOV   [PMSFrameFlag],0x0
(0088) 	HeadFlag = 0;	
    0F67: 62 D0 00 MOV   REG[0xD0],0x0
    0F6A: 55 60 00 MOV   [HeadFlag],0x0
(0089)   	DataPtr = 0;
    0F6D: 62 D0 00 MOV   REG[0xD0],0x0
    0F70: 55 5E 00 MOV   [DataPtr],0x0
(0090) 	
(0091) 	SAR10_SetClk(SAR10_SYSCLK_16); // Set clock source - system clock/64
    0F73: 10       PUSH  X
    0F74: 50 0A    MOV   A,0xA
    0F76: 7C 07 51 LCALL _SAR10_SetClk
(0092) 	SAR10_SetRunMode(SAR10_ONESHOT); // Set running method - one-shot
    0F79: 50 00    MOV   A,0x0
    0F7B: 7C 07 67 LCALL _SAR10_SetRunMode
(0093) 	SAR10_SetADCChannel(SAR10_CHS_AMUX0); // Set Port_0_5 as input
    0F7E: 50 60    MOV   A,0x60
    0F80: 7C 07 0F LCALL _SAR10_SetADCChannel
(0094) 	SAR10_DisableInt(); // Enable SAR10 interrupt
    0F83: 7C 06 CF LCALL _SAR10_DisableInt
(0095) 	SAR10_Start(); // Start conversion
    0F86: 7C 06 D3 LCALL _SAR10_Start
    0F89: 20       POP   X
    0F8A: 80 E6    JMP   0x1071
(0096) 
(0097) 
(0098) 	while(1)
(0099) 	{
(0100) 		if (PMSFrameFlag)
    0F8C: 62 D0 00 MOV   REG[0xD0],0x0
    0F8F: 3C 5D 00 CMP   [PMSFrameFlag],0x0
    0F92: A0 29    JZ    0x0FBC
(0101) 		{
(0102) 			PMSFrameFlag = 0;
    0F94: 55 5D 00 MOV   [PMSFrameFlag],0x0
(0103) 			if (FrameCheck())
    0F97: 7C 11 CB LCALL _FrameCheck
    0F9A: 62 D0 00 MOV   REG[0xD0],0x0
    0F9D: 39 00    CMP   A,0x0
    0F9F: A0 1C    JZ    0x0FBC
(0104) 			{
(0105) 				UART_Board_CPutString("PM2.5:");
    0FA1: 10       PUSH  X
    0FA2: 50 01    MOV   A,0x1
    0FA4: 08       PUSH  A
    0FA5: 50 84    MOV   A,0x84
    0FA7: 5C       MOV   X,A
    0FA8: 18       POP   A
    0FA9: 7C 06 4F LCALL _UART_Board_CPutString
(0106) 				UART_Board_PutSHexInt(MyPMSUnion.MyPMFrame.PM2_5_US);
    0FAC: 62 D0 00 MOV   REG[0xD0],0x0
    0FAF: 51 06    MOV   A,[MyPMSUnion+6]
    0FB1: 08       PUSH  A
    0FB2: 51 07    MOV   A,[MyPMSUnion+7]
    0FB4: 20       POP   X
    0FB5: 7C 05 A5 LCALL _UART_Board_PutSHexInt
(0107) 				UART_Board_PutCRLF();
    0FB8: 7C 06 61 LCALL _UART_Board_PutCRLF
    0FBB: 20       POP   X
(0108) 				
(0109) 			}
(0110) 			else
(0111) 			{
(0112) 				
(0113) 			}
(0114) 		}
(0115) 		
(0116) 		if (!one_sec_timer)
    0FBC: 62 D0 00 MOV   REG[0xD0],0x0
    0FBF: 3C 48 00 CMP   [one_sec_timer],0x0
    0FC2: B0 38    JNZ   0x0FFB
(0117) 		{
(0118) 			one_sec_timer = ONE_SECOND_TIMER_RELOAD;
    0FC4: 55 48 08 MOV   [one_sec_timer],0x8
(0119) 			
(0120) 			/*
(0121) 			k++;
(0122) 			if (k>9)
(0123) 				k = 0;
(0124) 			
(0125) 			a[0] = Digit[k];
(0126) 			a[1] = Digit[k];
(0127) 			a[2] = Digit[k];
(0128) 			WriteAll_1621(0,a,3);
(0129) 			*/
(0130) 			
(0131) 			MUX_CR2 |= 0X02; //connect P2.1 Analog bus
    0FC7: 71 10    OR    F,0x10
    0FC9: 43 DA 02 OR    REG[0xDA],0x2
(0132) 			SAR10_Trigger(); //Trigger new sample
    0FCC: 10       PUSH  X
    0FCD: 70 CF    AND   F,0xCF
    0FCF: 7C 06 E3 LCALL _SAR10_Trigger
    0FD2: 20       POP   X
(0133) 		 	while(SAR10_fIsDataAvailable()==0);//Wait while data is not ready
    0FD3: 10       PUSH  X
    0FD4: 7C 06 EB LCALL _SAR10_fIsDataAvailable
    0FD7: 20       POP   X
    0FD8: 62 D0 00 MOV   REG[0xD0],0x0
    0FDB: 39 00    CMP   A,0x0
    0FDD: AF F5    JZ    0x0FD3
(0134) 		 	LightADCValue = SAR10_iGetData(); // Read result
    0FDF: 10       PUSH  X
    0FE0: 7C 06 F4 LCALL _SAR10_iGetData
    0FE3: 62 D0 00 MOV   REG[0xD0],0x0
    0FE6: 5A 3A    MOV   [__r0],X
    0FE8: 20       POP   X
    0FE9: 08       PUSH  A
    0FEA: 51 3A    MOV   A,[__r0]
    0FEC: 62 D0 00 MOV   REG[0xD0],0x0
    0FEF: 53 43    MOV   [LightADCValue],A
    0FF1: 18       POP   A
    0FF2: 53 44    MOV   [LightADCValue+1],A
(0135) 			MUX_CR2 &= ~0X02; //disconnect P2.1 Analog bus
    0FF4: 71 10    OR    F,0x10
    0FF6: 41 DA FD AND   REG[0xDA],0xFD
(0136) //			UART_Board_PutSHexInt(LightADCValue);
(0137) //			UART_Board_PutCRLF();
(0138) 		}
    0FF9: 70 CF    AND   F,0xCF
(0139) 		
(0140) 		
(0141) 		if(!rh_sample_timer)
    0FFB: 62 D0 00 MOV   REG[0xD0],0x0
    0FFE: 3C 45 00 CMP   [rh_sample_timer],0x0
    1001: B0 61    JNZ   0x1063
(0142) 		{
(0143) 			rh_sample_timer = ONE_SECOND_TIMER_RELOAD;
    1003: 55 45 08 MOV   [rh_sample_timer],0x8
(0144) 			if (!RHSampleStep)
    1006: 62 D0 00 MOV   REG[0xD0],0x0
    1009: 3C 54 00 CMP   [RHSampleStep],0x0
    100C: B0 18    JNZ   0x1025
(0145) 			{
(0146) 				ret = Si7020SendCommand(MRH_NHMM); // send the command(Measure RH, No Hold Master Mode)
    100E: 50 F5    MOV   A,0xF5
    1010: 08       PUSH  A
    1011: 7C 12 49 LCALL _Si7020SendCommand
    1014: 38 FF    ADD   SP,0xFF
    1016: 54 00    MOV   [X+0],A
(0147) 				if(ret)
    1018: 3D 00 00 CMP   [X+0],0x0
    101B: A0 47    JZ    0x1063
(0148) 				{
(0149) //					UART_Board_CPutString("Send commad success");
(0150) //					UART_Board_PutCRLF();
(0151) 					RHSampleStep = 1;
    101D: 62 D0 00 MOV   REG[0xD0],0x0
    1020: 55 54 01 MOV   [RHSampleStep],0x1
(0152) 				}
(0153) 				else
(0154) 				{			
(0155) //					UART_Board_CPutString("Send commad fail");
(0156) //					UART_Board_PutCRLF();					
(0157) 				}
(0158) 			}
    1023: 80 3F    JMP   0x1063
(0159) 			else 
(0160) 			{				
(0161) 					Si7020Read_RH_NHM(RecBuf);
    1025: 50 00    MOV   A,0x0
    1027: 08       PUSH  A
    1028: 50 3B    MOV   A,0x3B
    102A: 08       PUSH  A
    102B: 7C 12 5B LCALL _Si7020Read_RH_NHM
(0162) 		//			UART_Board_CPutString("RH: ");
(0163) 		//			UART_Board_PutSHexInt(*(unsigned int *)RecBuf);
(0164) 		//			UART_Board_PutCRLF();
(0165) 					Humidity = Si7020CalcRH(*(unsigned int *)RecBuf);
    102E: 62 D0 00 MOV   REG[0xD0],0x0
    1031: 51 3B    MOV   A,[RecBuf]
    1033: 08       PUSH  A
    1034: 51 3C    MOV   A,[RecBuf+1]
    1036: 08       PUSH  A
    1037: 7C 13 B8 LCALL _Si7020CalcRH
    103A: 38 FC    ADD   SP,0xFC
    103C: 62 D0 00 MOV   REG[0xD0],0x0
    103F: 53 56    MOV   [Humidity],A
(0166) 		//			UART_Board_PutSHexByte(Humidity);
(0167) 		//			UART_Board_PutCRLF();
(0168) 					
(0169) 					Si7020Read_Temp_after_RHM(RecBuf);
    1041: 50 00    MOV   A,0x0
    1043: 08       PUSH  A
    1044: 50 3B    MOV   A,0x3B
    1046: 08       PUSH  A
    1047: 7C 12 8F LCALL _Si7020Read_Temp_after_RHM
(0170) //					UART_Board_CPutString("Temperature: ");
(0171) 		//			UART_Board_PutSHexInt(*(unsigned int *)RecBuf);
(0172) 		//			UART_Board_PutCRLF();
(0173) 					Temperature = Si7020CalcTemp(*(unsigned int *)RecBuf);
    104A: 62 D0 00 MOV   REG[0xD0],0x0
    104D: 51 3B    MOV   A,[RecBuf]
    104F: 08       PUSH  A
    1050: 51 3C    MOV   A,[RecBuf+1]
    1052: 08       PUSH  A
    1053: 7C 12 D0 LCALL _Si7020CalcTemp
    1056: 38 FC    ADD   SP,0xFC
    1058: 62 D0 00 MOV   REG[0xD0],0x0
    105B: 53 55    MOV   [Temperature],A
(0174) //					UART_Board_PutSHexByte(Temperature);
(0175) //					UART_Board_PutCRLF();
(0176) 					RHSampleStep = 0;
    105D: 62 D0 00 MOV   REG[0xD0],0x0
    1060: 55 54 00 MOV   [RHSampleStep],0x0
(0177) 			}
(0178) 		}
(0179) 		
(0180) next:		
(0181) 		if (!LcdUpdateTimer)
    1063: 62 D0 00 MOV   REG[0xD0],0x0
    1066: 3C 47 00 CMP   [LcdUpdateTimer],0x0
    1069: B0 07    JNZ   0x1071
(0182) 		{
(0183) 			LcdUpdateTimer = 4;
    106B: 55 47 04 MOV   [LcdUpdateTimer],0x4
(0184) 			LCDOuputAll();
    106E: 7C 0C 2E LCALL _LCDOuputAll
(0185) 		}
(0186) 	}
    1071: 8F 1A    JMP   0x0F8C
(0187) }
FILE: C:\chendong\MYDOCU~1\code\LCD_DI~1\LCD_DI~1\LCD_DI~1\particlesensor.c
(0001) 
(0002) #include <m8c.h>        // part specific constants and macros
(0003) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0004) #define PMS3003
(0005) #include "ParticleSensor.h"
(0006) /*
(0007)  *NOTE:This code is for the Particle sensor PMS3003.
(0008)  *     Do not apply it on other particle sensor.
(0009)  */
(0010) 
(0011) void SensorUART(void )
(0012) {
_SensorUART:
  rxdata               --> X+1
  i                    --> X+0
    1078: 10       PUSH  X
    1079: 4F       MOV   X,SP
    107A: 38 02    ADD   SP,0x2
(0013) 	unsigned char rxdata;
(0014) 	unsigned char i;
(0015) 	rxdata = UART_Sensor_bReadRxData();
    107C: 10       PUSH  X
    107D: 7C 03 FC LCALL _bUART_Sensor_ReadRxData|UART_Sensor_bReadRxData|_UART_Sensor_bReadRxData|bUART_Sensor_ReadRxData
    1080: 20       POP   X
    1081: 62 D0 00 MOV   REG[0xD0],0x0
    1084: 54 01    MOV   [X+1],A
(0016) 	
(0017) 	
(0018) 	//send to PC terminal
(0019) 	while (!(UART_Board_bReadTxStatus() & UART_TX_BUFFER_EMPTY));
    1086: 10       PUSH  X
    1087: 7C 05 4B LCALL _bUART_Board_ReadTxStatus|UART_Board_bReadTxStatus|_UART_Board_bReadTxStatus|bUART_Board_ReadTxStatus
    108A: 20       POP   X
    108B: 62 D0 00 MOV   REG[0xD0],0x0
    108E: 53 3A    MOV   [__r0],A
    1090: 47 3A 10 TST   [__r0],0x10
    1093: AF F2    JZ    0x1086
(0020) 	UART_Board_SendData(rxdata);
    1095: 10       PUSH  X
    1096: 52 01    MOV   A,[X+1]
    1098: 7C 05 48 LCALL _UART_Board_SendData
    109B: 20       POP   X
(0021) 	
(0022) 	
(0023) 	if(HeadFlag == 0)
    109C: 62 D0 00 MOV   REG[0xD0],0x0
    109F: 3C 60 00 CMP   [HeadFlag],0x0
    10A2: B0 5C    JNZ   0x10FF
(0024)     {
(0025)         //head receive
(0026) 		if(DataPtr < 2)
    10A4: 62 D0 00 MOV   REG[0xD0],0x0
    10A7: 3C 5E 02 CMP   [DataPtr],0x2
    10AA: D0 23    JNC   0x10CE
(0027) 		{
(0028) 			MyPMSUnion.PMRxBuf[DataPtr] = rxdata;
    10AC: 62 D0 00 MOV   REG[0xD0],0x0
    10AF: 51 5E    MOV   A,[DataPtr]
    10B1: 62 D0 00 MOV   REG[0xD0],0x0
    10B4: 53 39    MOV   [__r1],A
    10B6: 55 3A 00 MOV   [__r0],0x0
    10B9: 06 39 00 ADD   [__r1],0x0
    10BC: 0E 3A 00 ADC   [__r0],0x0
    10BF: 51 3A    MOV   A,[__r0]
    10C1: 60 D5    MOV   REG[0xD5],A
    10C3: 52 01    MOV   A,[X+1]
    10C5: 3F 39    MVI   [__r1],A
(0029) 			DataPtr ++;
    10C7: 62 D0 00 MOV   REG[0xD0],0x0
    10CA: 76 5E    INC   [DataPtr]
(0030) 		}
    10CC: 80 15    JMP   0x10E2
(0031) 		else
(0032) 		{
(0033) 			MyPMSUnion.MyPMFrame.Head <<= 8;
    10CE: 62 D0 00 MOV   REG[0xD0],0x0
    10D1: 51 01    MOV   A,[MyPMSUnion+1]
    10D3: 53 00    MOV   [MyPMSUnion],A
    10D5: 55 01 00 MOV   [MyPMSUnion+1],0x0
(0034) 			MyPMSUnion.PMRxBuf[1] = rxdata;
    10D8: 52 01    MOV   A,[X+1]
    10DA: 53 01    MOV   [MyPMSUnion+1],A
(0035) 			DataPtr = 2;
    10DC: 62 D0 00 MOV   REG[0xD0],0x0
    10DF: 55 5E 02 MOV   [DataPtr],0x2
(0036) 		}
(0037) 		
(0038)         //head check
(0039) 		if(DataPtr == 2 && MyPMSUnion.MyPMFrame.Head == FRAME_HEAD)
    10E2: 62 D0 00 MOV   REG[0xD0],0x0
    10E5: 3C 5E 02 CMP   [DataPtr],0x2
    10E8: B0 DE    JNZ   0x11C7
    10EA: 62 D0 00 MOV   REG[0xD0],0x0
    10ED: 3C 00 42 CMP   [MyPMSUnion],0x42
    10F0: B0 D6    JNZ   0x11C7
    10F2: 3C 01 4D CMP   [MyPMSUnion+1],0x4D
    10F5: B0 D1    JNZ   0x11C7
(0040) 		{
(0041) 			HeadFlag = 1;	
    10F7: 62 D0 00 MOV   REG[0xD0],0x0
    10FA: 55 60 01 MOV   [HeadFlag],0x1
(0042) 		}
(0043)     }
    10FD: 80 C9    JMP   0x11C7
(0044)     else
(0045)     {
(0046)     	MyPMSUnion.PMRxBuf[DataPtr] = rxdata;
    10FF: 62 D0 00 MOV   REG[0xD0],0x0
    1102: 51 5E    MOV   A,[DataPtr]
    1104: 62 D0 00 MOV   REG[0xD0],0x0
    1107: 53 39    MOV   [__r1],A
    1109: 55 3A 00 MOV   [__r0],0x0
    110C: 06 39 00 ADD   [__r1],0x0
    110F: 0E 3A 00 ADC   [__r0],0x0
    1112: 51 3A    MOV   A,[__r0]
    1114: 60 D5    MOV   REG[0xD5],A
    1116: 52 01    MOV   A,[X+1]
    1118: 3F 39    MVI   [__r1],A
(0047)         if(DataPtr >= (BUF_LENGTH-1))
    111A: 62 D0 00 MOV   REG[0xD0],0x0
    111D: 3C 5E 27 CMP   [DataPtr],0x27
    1120: C0 09    JC    0x112A
(0048)         {
(0049)             DataPtr = (BUF_LENGTH-1);
    1122: 62 D0 00 MOV   REG[0xD0],0x0
    1125: 55 5E 27 MOV   [DataPtr],0x27
(0050)         }
    1128: 80 06    JMP   0x112F
(0051) 		else
(0052) 		{
(0053) 			DataPtr++;
    112A: 62 D0 00 MOV   REG[0xD0],0x0
    112D: 76 5E    INC   [DataPtr]
(0054) 		}
(0055) 
(0056)     	if(DataPtr == (MyPMSUnion.MyPMFrame.Length + 4) && DataPtr >= 6)
    112F: 62 D0 00 MOV   REG[0xD0],0x0
    1132: 51 03    MOV   A,[MyPMSUnion+3]
    1134: 01 04    ADD   A,0x4
    1136: 62 D0 00 MOV   REG[0xD0],0x0
    1139: 53 39    MOV   [__r1],A
    113B: 62 D0 00 MOV   REG[0xD0],0x0
    113E: 51 02    MOV   A,[MyPMSUnion+2]
    1140: 09 00    ADC   A,0x0
    1142: 62 D0 00 MOV   REG[0xD0],0x0
    1145: 53 3A    MOV   [__r0],A
    1147: 62 D0 00 MOV   REG[0xD0],0x0
    114A: 51 5E    MOV   A,[DataPtr]
    114C: 62 D0 00 MOV   REG[0xD0],0x0
    114F: 53 37    MOV   [__r3],A
    1151: 50 00    MOV   A,0x0
    1153: 3A 3A    CMP   A,[__r0]
    1155: B0 71    JNZ   0x11C7
    1157: 51 37    MOV   A,[__r3]
    1159: 3A 39    CMP   A,[__r1]
    115B: B0 6B    JNZ   0x11C7
    115D: 62 D0 00 MOV   REG[0xD0],0x0
    1160: 3C 5E 06 CMP   [DataPtr],0x6
    1163: C0 63    JC    0x11C7
(0057) 		{
(0058) 			PMSFrameFlag = 1;
    1165: 62 D0 00 MOV   REG[0xD0],0x0
    1168: 55 5D 01 MOV   [PMSFrameFlag],0x1
(0059) 			HeadFlag = 0;	
    116B: 62 D0 00 MOV   REG[0xD0],0x0
    116E: 55 60 00 MOV   [HeadFlag],0x0
(0060)             DataPtr = 0;
    1171: 62 D0 00 MOV   REG[0xD0],0x0
    1174: 55 5E 00 MOV   [DataPtr],0x0
(0061) 			
(0062) 			for (i = 0; i < (MyPMSUnion.MyPMFrame.Length+4); i++)
    1177: 56 00 00 MOV   [X+0],0x0
    117A: 80 2A    JMP   0x11A5
(0063) 			{
(0064) 				while (!(UART_Board_bReadTxStatus() & UART_TX_BUFFER_EMPTY));
    117C: 10       PUSH  X
    117D: 7C 05 4B LCALL _bUART_Board_ReadTxStatus|UART_Board_bReadTxStatus|_UART_Board_bReadTxStatus|bUART_Board_ReadTxStatus
    1180: 20       POP   X
    1181: 62 D0 00 MOV   REG[0xD0],0x0
    1184: 53 3A    MOV   [__r0],A
    1186: 47 3A 10 TST   [__r0],0x10
    1189: AF F2    JZ    0x117C
(0065) 				UART_Board_SendData(MyPMSUnion.PMRxBuf[i]);
    118B: 52 00    MOV   A,[X+0]
    118D: 53 39    MOV   [__r1],A
    118F: 55 3A 00 MOV   [__r0],0x0
    1192: 06 39 00 ADD   [__r1],0x0
    1195: 0E 3A 00 ADC   [__r0],0x0
    1198: 51 3A    MOV   A,[__r0]
    119A: 60 D4    MOV   REG[0xD4],A
    119C: 3E 39    MVI   A,[__r1]
    119E: 10       PUSH  X
    119F: 7C 05 48 LCALL _UART_Board_SendData
    11A2: 20       POP   X
(0066) 			}
    11A3: 77 00    INC   [X+0]
    11A5: 62 D0 00 MOV   REG[0xD0],0x0
    11A8: 51 03    MOV   A,[MyPMSUnion+3]
    11AA: 01 04    ADD   A,0x4
    11AC: 62 D0 00 MOV   REG[0xD0],0x0
    11AF: 53 39    MOV   [__r1],A
    11B1: 62 D0 00 MOV   REG[0xD0],0x0
    11B4: 51 02    MOV   A,[MyPMSUnion+2]
    11B6: 09 00    ADC   A,0x0
    11B8: 62 D0 00 MOV   REG[0xD0],0x0
    11BB: 53 3A    MOV   [__r0],A
    11BD: 52 00    MOV   A,[X+0]
    11BF: 12 39    SUB   A,[__r1]
    11C1: 50 00    MOV   A,0x0
    11C3: 1A 3A    SBB   A,[__r0]
    11C5: CF B6    JC    0x117C
(0067) 		}
(0068)     }
    11C7: 38 FE    ADD   SP,0xFE
    11C9: 20       POP   X
    11CA: 7F       RET   
(0069) }
(0070) 
(0071) /*
(0072) *check sum of the frame.
(0073) *return 1-pass
(0074) *return 0-fail
(0075) */
(0076) unsigned char FrameCheck(void)
(0077) {
_FrameCheck:
  checksum             --> X+1
  i                    --> X+0
    11CB: 10       PUSH  X
    11CC: 4F       MOV   X,SP
    11CD: 38 03    ADD   SP,0x3
(0078) 	unsigned int checksum = 0;
    11CF: 56 02 00 MOV   [X+2],0x0
    11D2: 56 01 00 MOV   [X+1],0x0
(0079) 	unsigned char i = 0;
    11D5: 56 00 00 MOV   [X+0],0x0
(0080) 	
(0081) 	for (i = 0; i < (MyPMSUnion.MyPMFrame.Length+2); i++)
    11D8: 56 00 00 MOV   [X+0],0x0
    11DB: 80 20    JMP   0x11FC
(0082) 	{
(0083) 		checksum += MyPMSUnion.PMRxBuf[i];
    11DD: 62 D0 00 MOV   REG[0xD0],0x0
    11E0: 52 00    MOV   A,[X+0]
    11E2: 53 39    MOV   [__r1],A
    11E4: 55 3A 00 MOV   [__r0],0x0
    11E7: 06 39 00 ADD   [__r1],0x0
    11EA: 0E 3A 00 ADC   [__r0],0x0
    11ED: 51 3A    MOV   A,[__r0]
    11EF: 60 D4    MOV   REG[0xD4],A
    11F1: 3E 39    MVI   A,[__r1]
    11F3: 05 02    ADD   [X+2],A
    11F5: 50 00    MOV   A,0x0
    11F7: 0F 01 00 ADC   [X+1],0x0
(0084) 	}
    11FA: 77 00    INC   [X+0]
    11FC: 62 D0 00 MOV   REG[0xD0],0x0
    11FF: 51 03    MOV   A,[MyPMSUnion+3]
    1201: 01 02    ADD   A,0x2
    1203: 62 D0 00 MOV   REG[0xD0],0x0
    1206: 53 39    MOV   [__r1],A
    1208: 62 D0 00 MOV   REG[0xD0],0x0
    120B: 51 02    MOV   A,[MyPMSUnion+2]
    120D: 09 00    ADC   A,0x0
    120F: 62 D0 00 MOV   REG[0xD0],0x0
    1212: 53 3A    MOV   [__r0],A
    1214: 52 00    MOV   A,[X+0]
    1216: 12 39    SUB   A,[__r1]
    1218: 50 00    MOV   A,0x0
    121A: 1A 3A    SBB   A,[__r0]
    121C: CF C0    JC    0x11DD
(0085) 	
(0086) 	MyPMSUnion.MyPMFrame.Length = 0;
    121E: 62 D0 00 MOV   REG[0xD0],0x0
    1221: 55 03 00 MOV   [MyPMSUnion+3],0x0
    1224: 55 02 00 MOV   [MyPMSUnion+2],0x0
(0087) 	MyPMSUnion.MyPMFrame.Head = 0;
    1227: 55 01 00 MOV   [MyPMSUnion+1],0x0
    122A: 55 00 00 MOV   [MyPMSUnion],0x0
(0088) 	
(0089) 	if (checksum == MyPMSUnion.MyPMFrame.checksum)
    122D: 52 01    MOV   A,[X+1]
    122F: 3A 16    CMP   A,[MyPMSUnion+22]
    1231: B0 0E    JNZ   0x1240
    1233: 52 02    MOV   A,[X+2]
    1235: 3A 17    CMP   A,[MyPMSUnion+23]
    1237: B0 08    JNZ   0x1240
(0090) 	{
(0091) 		return 1;
    1239: 62 D0 00 MOV   REG[0xD0],0x0
    123C: 50 01    MOV   A,0x1
    123E: 80 06    JMP   0x1245
(0092) 	}
(0093) 	else 
(0094) 	{
(0095) //		UART_Board_CPutString("fail, checksum=");
(0096) //		UART_Board_PutSHexByte(checksum);
(0097) //		UART_Board_PutCRLF();
(0098) //		for (i = 0; i < 24; i++)
(0099) //		{
(0100) //			UART_Board_PutSHexByte(MyPMSUnion.PMRxBuf[i]);
(0101) //			UART_Board_PutChar(' ');
(0102) //			while (!(UART_Board_bReadTxStatus() & UART_TX_BUFFER_EMPTY));
(0103) //			UART_Board_SendData(MyPMSUnion.PMRxBuf[i]);
(0104) //		}
(0105) //		UART_Board_PutCRLF();
(0106) 		return 0;
    1240: 62 D0 00 MOV   REG[0xD0],0x0
(0107) 	}
(0108) }FILE: C:\chendong\MYDOCU~1\code\LCD_DI~1\LCD_DI~1\LCD_DI~1\si7020.c
(0001) #include "Si7020.h"
(0002) #include "software_IIC.h"
(0003) 
(0004) extern unsigned char IICTimeOutTimer;
(0005) //
(0006) //Measure Relative Humidity, Hold Master Mode
(0007) //
(0008) unsigned char Si7020SendCommand(char cmd)
(0009) {
_Si7020SendCommand:
  cmd                  --> X-4
    1249: 10       PUSH  X
    124A: 4F       MOV   X,SP
(0010) 	return(ISendByte(SI7020_ADDR,cmd));
    124B: 52 FC    MOV   A,[X-4]
    124D: 08       PUSH  A
    124E: 50 80    MOV   A,0x80
    1250: 08       PUSH  A
    1251: 7C 16 36 LCALL _ISendByte
    1254: 38 FE    ADD   SP,0xFE
    1256: 62 D0 00 MOV   REG[0xD0],0x0
    1259: 20       POP   X
    125A: 7F       RET   
(0011) }
(0012) 
(0013) //
(0014) //read the result of the RH measurement.
(0015) //
(0016) void Si7020Read_RH_NHM(unsigned char * buffer)
(0017) {
_Si7020Read_RH_NHM:
  ret                  --> X+0
  buffer               --> X-5
    125B: 10       PUSH  X
    125C: 4F       MOV   X,SP
    125D: 38 01    ADD   SP,0x1
(0018) 	char ret;
(0019) 	IICTimeOutTimer = 2;
    125F: 62 D0 00 MOV   REG[0xD0],0x0
    1262: 55 59 02 MOV   [IICTimeOutTimer],0x2
    1265: 80 23    JMP   0x1289
(0020) 	while (1)
(0021) 	{
(0022) 		ret = IRcvBytes(SI7020_ADDR,buffer,3);
    1267: 50 03    MOV   A,0x3
    1269: 08       PUSH  A
    126A: 52 FB    MOV   A,[X-5]
    126C: 08       PUSH  A
    126D: 52 FC    MOV   A,[X-4]
    126F: 08       PUSH  A
    1270: 50 80    MOV   A,0x80
    1272: 08       PUSH  A
    1273: 7C 17 EA LCALL _IRcvBytes
    1276: 38 FC    ADD   SP,0xFC
    1278: 54 00    MOV   [X+0],A
(0023) 		if (ret || !IICTimeOutTimer)
    127A: 3D 00 00 CMP   [X+0],0x0
    127D: B0 09    JNZ   0x1287
    127F: 62 D0 00 MOV   REG[0xD0],0x0
    1282: 3C 59 00 CMP   [IICTimeOutTimer],0x0
    1285: B0 03    JNZ   0x1289
(0024) 			break;
    1287: 80 03    JMP   0x128B
(0025) 	}
    1289: 8F DD    JMP   0x1267
    128B: 38 FF    ADD   SP,0xFF
    128D: 20       POP   X
    128E: 7F       RET   
(0026) }
(0027) 
(0028) //
(0029) //read the temperature result of the pre RH measurement
(0030) //
(0031) unsigned char Si7020Read_Temp_after_RHM(unsigned char * buffer)
(0032) {
_Si7020Read_Temp_after_RHM:
  ret                  --> X+0
  buffer               --> X-5
    128F: 10       PUSH  X
    1290: 4F       MOV   X,SP
    1291: 38 01    ADD   SP,0x1
(0033) 	char ret;
(0034) 	ret = Si7020SendCommand(RD_TEMP_PRE_RHM);
    1293: 50 E0    MOV   A,0xE0
    1295: 08       PUSH  A
    1296: 9F B1    CALL  _Si7020SendCommand
    1298: 38 FF    ADD   SP,0xFF
    129A: 62 D0 00 MOV   REG[0xD0],0x0
    129D: 54 00    MOV   [X+0],A
(0035) 	
(0036) 	if (!ret)
    129F: 3D 00 00 CMP   [X+0],0x0
    12A2: B0 05    JNZ   0x12A8
(0037) 	{
(0038) 		return 0;
    12A4: 50 00    MOV   A,0x0
    12A6: 80 25    JMP   0x12CC
(0039) 	}
(0040) 	
(0041) 	ret = IRcvBytes(SI7020_ADDR,buffer,3);
    12A8: 50 03    MOV   A,0x3
    12AA: 08       PUSH  A
    12AB: 52 FB    MOV   A,[X-5]
    12AD: 08       PUSH  A
    12AE: 52 FC    MOV   A,[X-4]
    12B0: 08       PUSH  A
    12B1: 50 80    MOV   A,0x80
    12B3: 08       PUSH  A
    12B4: 7C 17 EA LCALL _IRcvBytes
    12B7: 38 FC    ADD   SP,0xFC
    12B9: 62 D0 00 MOV   REG[0xD0],0x0
    12BC: 54 00    MOV   [X+0],A
(0042) 	
(0043) 	if (!ret)
    12BE: 3D 00 00 CMP   [X+0],0x0
    12C1: B0 05    JNZ   0x12C7
(0044) 	{
(0045) 		return 0;
    12C3: 50 00    MOV   A,0x0
    12C5: 80 06    JMP   0x12CC
(0046) 	}
(0047) 	
(0048) 	return 1;
    12C7: 62 D0 00 MOV   REG[0xD0],0x0
    12CA: 50 01    MOV   A,0x1
    12CC: 38 FF    ADD   SP,0xFF
    12CE: 20       POP   X
    12CF: 7F       RET   
(0049) }
(0050) 
(0051) //
(0052) //transfrom the raw data to the temperature value
(0053) //175.72*Temp_Code/65536-46.85
(0054) //
(0055) signed char Si7020CalcTemp(unsigned int data)
(0056) {
_Si7020CalcTemp:
  result               --> X+4
  temp                 --> X+0
  data                 --> X-5
    12D0: 10       PUSH  X
    12D1: 4F       MOV   X,SP
    12D2: 38 05    ADD   SP,0x5
(0057) 	signed long temp;
(0058) 	signed char result;
(0059) 	temp = data;
    12D4: 52 FC    MOV   A,[X-4]
    12D6: 54 03    MOV   [X+3],A
    12D8: 52 FB    MOV   A,[X-5]
    12DA: 54 02    MOV   [X+2],A
    12DC: 56 01 00 MOV   [X+1],0x0
    12DF: 56 00 00 MOV   [X+0],0x0
(0060) 	temp = temp*175;
    12E2: 52 00    MOV   A,[X+0]
    12E4: 08       PUSH  A
    12E5: 52 01    MOV   A,[X+1]
    12E7: 08       PUSH  A
    12E8: 52 02    MOV   A,[X+2]
    12EA: 08       PUSH  A
    12EB: 52 03    MOV   A,[X+3]
    12ED: 08       PUSH  A
    12EE: 50 00    MOV   A,0x0
    12F0: 08       PUSH  A
    12F1: 08       PUSH  A
    12F2: 08       PUSH  A
    12F3: 50 AF    MOV   A,0xAF
    12F5: 08       PUSH  A
    12F6: 62 D0 00 MOV   REG[0xD0],0x0
    12F9: 7C 19 4D LCALL 0x194D
    12FC: 38 FC    ADD   SP,0xFC
    12FE: 18       POP   A
    12FF: 54 03    MOV   [X+3],A
    1301: 18       POP   A
    1302: 54 02    MOV   [X+2],A
    1304: 18       POP   A
    1305: 54 01    MOV   [X+1],A
    1307: 18       POP   A
    1308: 54 00    MOV   [X+0],A
(0061) 	temp += (data>>2)*3;
    130A: 52 FC    MOV   A,[X-4]
    130C: 53 39    MOV   [__r1],A
    130E: 52 FB    MOV   A,[X-5]
    1310: 53 3A    MOV   [__r0],A
    1312: 70 FB    AND   F,0xFB
    1314: 6E 3A    RRC   [__r0]
    1316: 6E 39    RRC   [__r1]
    1318: 70 FB    AND   F,0xFB
    131A: 6E 3A    RRC   [__r0]
    131C: 6E 39    RRC   [__r1]
    131E: 51 3A    MOV   A,[__r0]
    1320: 08       PUSH  A
    1321: 51 39    MOV   A,[__r1]
    1323: 08       PUSH  A
    1324: 50 00    MOV   A,0x0
    1326: 08       PUSH  A
    1327: 50 03    MOV   A,0x3
    1329: 08       PUSH  A
    132A: 7C 19 1D LCALL 0x191D
    132D: 38 FC    ADD   SP,0xFC
    132F: 51 36    MOV   A,[__rX]
    1331: 53 39    MOV   [__r1],A
    1333: 51 35    MOV   A,[__rY]
    1335: 53 3A    MOV   [__r0],A
    1337: 51 39    MOV   A,[__r1]
    1339: 53 37    MOV   [__r3],A
    133B: 51 3A    MOV   A,[__r0]
    133D: 53 38    MOV   [__r2],A
    133F: 51 37    MOV   A,[__r3]
    1341: 05 03    ADD   [X+3],A
    1343: 51 38    MOV   A,[__r2]
    1345: 0D 02    ADC   [X+2],A
    1347: 50 00    MOV   A,0x0
    1349: 0F 01 00 ADC   [X+1],0x0
    134C: 0F 00 00 ADC   [X+0],0x0
(0062) 	temp >>= 16;
    134F: 52 00    MOV   A,[X+0]
    1351: 53 3A    MOV   [__r0],A
    1353: 52 01    MOV   A,[X+1]
    1355: 53 39    MOV   [__r1],A
    1357: 52 02    MOV   A,[X+2]
    1359: 53 38    MOV   [__r2],A
    135B: 52 03    MOV   A,[X+3]
    135D: 53 37    MOV   [__r3],A
    135F: 50 10    MOV   A,0x10
    1361: 62 D0 00 MOV   REG[0xD0],0x0
    1364: 68 3A    ASR   [__r0]
    1366: 6E 39    RRC   [__r1]
    1368: 6E 38    RRC   [__r2]
    136A: 6E 37    RRC   [__r3]
    136C: 78       DEC   A
    136D: BF F3    JNZ   0x1361
    136F: 51 3A    MOV   A,[__r0]
    1371: 54 00    MOV   [X+0],A
    1373: 51 39    MOV   A,[__r1]
    1375: 54 01    MOV   [X+1],A
    1377: 51 38    MOV   A,[__r2]
    1379: 54 02    MOV   [X+2],A
    137B: 51 37    MOV   A,[__r3]
    137D: 54 03    MOV   [X+3],A
(0063) 	temp -= 47;
    137F: 17 03 2F SUB   [X+3],0x2F
    1382: 1F 02 00 SBB   [X+2],0x0
    1385: 1F 01 00 SBB   [X+1],0x0
    1388: 1F 00 00 SBB   [X+0],0x0
(0064) 	if (temp < -9)
    138B: 52 03    MOV   A,[X+3]
    138D: 11 F7    SUB   A,0xF7
    138F: 52 02    MOV   A,[X+2]
    1391: 19 FF    SBB   A,0xFF
    1393: 52 01    MOV   A,[X+1]
    1395: 19 FF    SBB   A,0xFF
    1397: 52 00    MOV   A,[X+0]
    1399: 31 80    XOR   A,0x80
    139B: 19 7F    SBB   A,0x7F
    139D: D0 0D    JNC   0x13AB
(0065) 		temp = -9;
    139F: 56 00 FF MOV   [X+0],0xFF
    13A2: 56 01 FF MOV   [X+1],0xFF
    13A5: 56 02 FF MOV   [X+2],0xFF
    13A8: 56 03 F7 MOV   [X+3],0xF7
(0066) 	
(0067) 	result = temp;
    13AB: 62 D0 00 MOV   REG[0xD0],0x0
    13AE: 52 03    MOV   A,[X+3]
    13B0: 54 04    MOV   [X+4],A
(0068) 	return result;
    13B2: 52 04    MOV   A,[X+4]
    13B4: 38 FB    ADD   SP,0xFB
    13B6: 20       POP   X
    13B7: 7F       RET   
(0069) }
(0070) 
(0071) //
(0072) //transfrom the raw data to the RH value
(0073) //125*Temp_Code/65536-6
(0074) //
(0075) unsigned char Si7020CalcRH(unsigned int data)
(0076) {
_Si7020CalcRH:
  result               --> X+4
  temp                 --> X+0
  data                 --> X-5
    13B8: 10       PUSH  X
    13B9: 4F       MOV   X,SP
    13BA: 38 05    ADD   SP,0x5
(0077) 	unsigned long temp;
(0078) 	unsigned char result;
(0079) 	temp = data;
    13BC: 52 FC    MOV   A,[X-4]
    13BE: 54 03    MOV   [X+3],A
    13C0: 52 FB    MOV   A,[X-5]
    13C2: 54 02    MOV   [X+2],A
    13C4: 56 01 00 MOV   [X+1],0x0
    13C7: 56 00 00 MOV   [X+0],0x0
(0080) 	temp = 125*temp;
    13CA: 52 00    MOV   A,[X+0]
    13CC: 08       PUSH  A
    13CD: 52 01    MOV   A,[X+1]
    13CF: 08       PUSH  A
    13D0: 52 02    MOV   A,[X+2]
    13D2: 08       PUSH  A
    13D3: 52 03    MOV   A,[X+3]
    13D5: 08       PUSH  A
    13D6: 50 00    MOV   A,0x0
    13D8: 08       PUSH  A
    13D9: 08       PUSH  A
    13DA: 08       PUSH  A
    13DB: 50 7D    MOV   A,0x7D
    13DD: 08       PUSH  A
    13DE: 62 D0 00 MOV   REG[0xD0],0x0
    13E1: 7C 19 4D LCALL 0x194D
    13E4: 38 FC    ADD   SP,0xFC
    13E6: 18       POP   A
    13E7: 54 03    MOV   [X+3],A
    13E9: 18       POP   A
    13EA: 54 02    MOV   [X+2],A
    13EC: 18       POP   A
    13ED: 54 01    MOV   [X+1],A
    13EF: 18       POP   A
    13F0: 54 00    MOV   [X+0],A
(0081) 	temp >>= 16;
    13F2: 52 00    MOV   A,[X+0]
    13F4: 53 3A    MOV   [__r0],A
    13F6: 52 01    MOV   A,[X+1]
    13F8: 53 39    MOV   [__r1],A
    13FA: 52 02    MOV   A,[X+2]
    13FC: 53 38    MOV   [__r2],A
    13FE: 52 03    MOV   A,[X+3]
    1400: 53 37    MOV   [__r3],A
    1402: 50 10    MOV   A,0x10
    1404: 70 FB    AND   F,0xFB
    1406: 62 D0 00 MOV   REG[0xD0],0x0
    1409: 6E 3A    RRC   [__r0]
    140B: 6E 39    RRC   [__r1]
    140D: 6E 38    RRC   [__r2]
    140F: 6E 37    RRC   [__r3]
    1411: 78       DEC   A
    1412: BF F1    JNZ   0x1404
    1414: 51 3A    MOV   A,[__r0]
    1416: 54 00    MOV   [X+0],A
    1418: 51 39    MOV   A,[__r1]
    141A: 54 01    MOV   [X+1],A
    141C: 51 38    MOV   A,[__r2]
    141E: 54 02    MOV   [X+2],A
    1420: 51 37    MOV   A,[__r3]
    1422: 54 03    MOV   [X+3],A
(0082) 	if (temp >= 6)
    1424: 52 03    MOV   A,[X+3]
    1426: 11 06    SUB   A,0x6
    1428: 52 02    MOV   A,[X+2]
    142A: 19 00    SBB   A,0x0
    142C: 52 01    MOV   A,[X+1]
    142E: 19 00    SBB   A,0x0
    1430: 52 00    MOV   A,[X+0]
    1432: 19 00    SBB   A,0x0
    1434: C0 2F    JC    0x1464
(0083) 	{
(0084) 		if (temp >= 106)
    1436: 52 03    MOV   A,[X+3]
    1438: 11 6A    SUB   A,0x6A
    143A: 52 02    MOV   A,[X+2]
    143C: 19 00    SBB   A,0x0
    143E: 52 01    MOV   A,[X+1]
    1440: 19 00    SBB   A,0x0
    1442: 52 00    MOV   A,[X+0]
    1444: 19 00    SBB   A,0x0
    1446: C0 0F    JC    0x1456
(0085) 		{
(0086) 			temp = 100;
    1448: 56 00 00 MOV   [X+0],0x0
    144B: 56 01 00 MOV   [X+1],0x0
    144E: 56 02 00 MOV   [X+2],0x0
    1451: 56 03 64 MOV   [X+3],0x64
(0087) 		}
    1454: 80 1B    JMP   0x1470
(0088) 		else
(0089) 		{
(0090) 			temp -= 6;
    1456: 17 03 06 SUB   [X+3],0x6
    1459: 1F 02 00 SBB   [X+2],0x0
    145C: 1F 01 00 SBB   [X+1],0x0
    145F: 1F 00 00 SBB   [X+0],0x0
(0091) 		}
(0092) 	}
    1462: 80 0D    JMP   0x1470
(0093) 	else 
(0094) 	{
(0095) 		temp = 0;
    1464: 56 00 00 MOV   [X+0],0x0
    1467: 56 01 00 MOV   [X+1],0x0
    146A: 56 02 00 MOV   [X+2],0x0
    146D: 56 03 00 MOV   [X+3],0x0
(0096) 	}
(0097) 	
(0098) 	result = temp;
    1470: 62 D0 00 MOV   REG[0xD0],0x0
    1473: 52 03    MOV   A,[X+3]
    1475: 54 04    MOV   [X+4],A
(0099) 	return result;
    1477: 52 04    MOV   A,[X+4]
    1479: 38 FB    ADD   SP,0xFB
    147B: 20       POP   X
    147C: 7F       RET   
FILE: C:\chendong\MYDOCU~1\code\LCD_DI~1\LCD_DI~1\LCD_DI~1\software_iic.c
(0001) #include <m8c.h>        // part specific constants and macros
(0002) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0003) #define		SW_IIC
(0004) #include  	"software_IIC.H"
(0005) #include "HT1621B.h"
(0006) //******************************************************************
(0007) void Init_IIC(void)
(0008) {
(0009) 	//P1.7 P1.5 open drain low mode and output 1
(0010) 	PRT1DM2 |= (SDA_BIT + SCL_BIT);
_Init_IIC:
    147D: 43 07 A0 OR    REG[0x7],0xA0
(0011) 	PRT1DM1 |= (SDA_BIT + SCL_BIT);
    1480: 71 10    OR    F,0x10
    1482: 43 05 A0 OR    REG[0x5],0xA0
(0012) 	PRT1DM0 |= (SDA_BIT + SCL_BIT);
    1485: 43 04 A0 OR    REG[0x4],0xA0
(0013) 	PRT1DR	|= (SDA_BIT + SCL_BIT);
    1488: 70 CF    AND   F,0xCF
    148A: 43 04 A0 OR    REG[0x4],0xA0
    148D: 7F       RET   
(0014) }
(0015) void ChangeToRead(void)
(0016) {
(0017) 	PRT1DM0 &= ~(SDA_BIT);
_ChangeToRead:
    148E: 71 10    OR    F,0x10
    1490: 41 04 DF AND   REG[0x4],0xDF
(0018) 	PRT1DM2 &= ~(SDA_BIT);
    1493: 70 CF    AND   F,0xCF
    1495: 41 07 DF AND   REG[0x7],0xDF
(0019) 	delay_us(1);
    1498: 50 00    MOV   A,0x0
    149A: 08       PUSH  A
    149B: 50 01    MOV   A,0x1
    149D: 08       PUSH  A
    149E: 7C 07 EC LCALL _delay_us
    14A1: 38 FE    ADD   SP,0xFE
    14A3: 7F       RET   
(0020) }
(0021) 
(0022) void ChangeToOD(void)
(0023) {
(0024) 	PRT1DM2 |= (SDA_BIT);
_ChangeToOD:
    14A4: 43 07 20 OR    REG[0x7],0x20
(0025) //	PRT1DM1 |= (SDA_BIT);
(0026) 	PRT1DM0 |= (SDA_BIT);
    14A7: 71 10    OR    F,0x10
    14A9: 43 04 20 OR    REG[0x4],0x20
(0027) 	delay_us(1);
    14AC: 50 00    MOV   A,0x0
    14AE: 08       PUSH  A
    14AF: 50 01    MOV   A,0x1
    14B1: 08       PUSH  A
    14B2: 70 CF    AND   F,0xCF
    14B4: 7C 07 EC LCALL _delay_us
    14B7: 38 FE    ADD   SP,0xFE
    14B9: 7F       RET   
(0028) }
(0029) 
(0030) //******************************************************************* 
(0031) 
(0032) 
(0033) 
(0034) 
(0035) //******************************************************************
(0036) //                     �����ߺ���               
(0037) //����ԭ��: void  Start_I2c();  
(0038) //����:       ���I2C����,������I2C��ʼ����.
(0039) //  
(0040) //******************************************************************* 
(0041) void Start_I2c(void)
(0042) {
(0043) 	SDA_H;   //������ʼ�����������ź� 
_Start_I2c:
    14BA: 43 04 20 OR    REG[0x4],0x20
(0044) 	SCL_H;
    14BD: 43 04 80 OR    REG[0x4],0x80
(0045) 	delay_us(2);
    14C0: 50 00    MOV   A,0x0
    14C2: 08       PUSH  A
    14C3: 50 02    MOV   A,0x2
    14C5: 08       PUSH  A
    14C6: 7C 07 EC LCALL _delay_us
    14C9: 38 FE    ADD   SP,0xFE
(0046) 	SDA_L;   //������ʼ�ź� 
    14CB: 41 04 DF AND   REG[0x4],0xDF
(0047) 	delay_us(1);
    14CE: 50 00    MOV   A,0x0
    14D0: 08       PUSH  A
    14D1: 50 01    MOV   A,0x1
    14D3: 08       PUSH  A
    14D4: 7C 07 EC LCALL _delay_us
(0048) 	SCL_L;   //ǯסI2C���ߣ�׼�����ͻ��������  
    14D7: 41 04 7F AND   REG[0x4],0x7F
(0049) 	delay_us(1);
    14DA: 50 00    MOV   A,0x0
    14DC: 08       PUSH  A
    14DD: 50 01    MOV   A,0x1
    14DF: 08       PUSH  A
    14E0: 7C 07 EC LCALL _delay_us
    14E3: 38 FC    ADD   SP,0xFC
    14E5: 7F       RET   
(0050) }
(0051) //******************************************************************
(0052) //                      �������ߺ���               
(0053) //����ԭ��: void  Stop_I2c();  
(0054) //����:       ����I2C����,������I2C��������.
(0055) //  
(0056) //******************************************************************* 
(0057) void Stop_I2c(void)
(0058) {
(0059) 	SDA_L;  
_Stop_I2c:
    14E6: 41 04 DF AND   REG[0x4],0xDF
(0060) 	delay_us(1);
    14E9: 50 00    MOV   A,0x0
    14EB: 08       PUSH  A
    14EC: 50 01    MOV   A,0x1
    14EE: 08       PUSH  A
    14EF: 7C 07 EC LCALL _delay_us
    14F2: 38 FE    ADD   SP,0xFE
(0061) 	SCL_H;  
    14F4: 43 04 80 OR    REG[0x4],0x80
(0062) 	delay_us(1);
    14F7: 50 00    MOV   A,0x0
    14F9: 08       PUSH  A
    14FA: 50 01    MOV   A,0x1
    14FC: 08       PUSH  A
    14FD: 7C 07 EC LCALL _delay_us
(0063) 	SDA_H;  
    1500: 43 04 20 OR    REG[0x4],0x20
(0064) 	delay_us(1);
    1503: 50 00    MOV   A,0x0
    1505: 08       PUSH  A
    1506: 50 01    MOV   A,0x1
    1508: 08       PUSH  A
    1509: 7C 07 EC LCALL _delay_us
    150C: 38 FC    ADD   SP,0xFC
    150E: 7F       RET   
(0065) }
(0066) //******************************************************************
(0067) //                 �ֽ����ݴ��ͺ���               
(0068) //����ԭ��: void  SendByte(uchar c);
(0069) //����:  ������c���ͳ�ȥ,�����ǵ�ַ,Ҳ����������,�����ȴ�Ӧ��,����
(0070) //     ��״̬λ���в���.(��Ӧ����Ӧ��ʹack=0 ��)     
(0071) //     ��������������ack=1; ack=0��ʾ��������Ӧ����𻵡�
(0072) //******************************************************************* 
(0073) void  SendByte(uchar c)
(0074) {
_SendByte:
  BitCnt               --> X+0
  c                    --> X-4
    150F: 10       PUSH  X
    1510: 4F       MOV   X,SP
    1511: 38 01    ADD   SP,0x1
(0075) 		uchar BitCnt;
(0076) 	
(0077) 	for(BitCnt=0;BitCnt<8;BitCnt++)
    1513: 56 00 00 MOV   [X+0],0x0
    1516: 80 4B    JMP   0x1562
(0078) 	{
(0079) 		if((c<<BitCnt)&0x80)
    1518: 52 FC    MOV   A,[X-4]
    151A: 62 D0 00 MOV   REG[0xD0],0x0
    151D: 53 3A    MOV   [__r0],A
    151F: 52 00    MOV   A,[X+0]
    1521: A0 09    JZ    0x152B
    1523: 62 D0 00 MOV   REG[0xD0],0x0
    1526: 65 3A    ASL   [__r0]
    1528: 78       DEC   A
    1529: BF F9    JNZ   0x1523
    152B: 62 D0 00 MOV   REG[0xD0],0x0
    152E: 26 3A 80 AND   [__r0],0x80
    1531: A0 06    JZ    0x1538
(0080) 		{
(0081) 			SDA_H;
    1533: 43 04 20 OR    REG[0x4],0x20
(0082) 		}
    1536: 80 04    JMP   0x153B
(0083) 		else
(0084) 		{
(0085) 			SDA_L;
    1538: 41 04 DF AND   REG[0x4],0xDF
(0086) 		}
(0087) 		delay_us(1);
    153B: 50 00    MOV   A,0x0
    153D: 08       PUSH  A
    153E: 50 01    MOV   A,0x1
    1540: 08       PUSH  A
    1541: 7C 07 EC LCALL _delay_us
    1544: 38 FE    ADD   SP,0xFE
(0088) 		SCL_H;               
    1546: 43 04 80 OR    REG[0x4],0x80
(0089) 		delay_us(1);         
    1549: 50 00    MOV   A,0x0
    154B: 08       PUSH  A
    154C: 50 01    MOV   A,0x1
    154E: 08       PUSH  A
    154F: 7C 07 EC LCALL _delay_us
(0090) 		SCL_L; 
    1552: 41 04 7F AND   REG[0x4],0x7F
(0091) 		delay_us(1);
    1555: 50 00    MOV   A,0x0
    1557: 08       PUSH  A
    1558: 50 01    MOV   A,0x1
    155A: 08       PUSH  A
    155B: 7C 07 EC LCALL _delay_us
    155E: 38 FC    ADD   SP,0xFC
(0092) 	}
    1560: 77 00    INC   [X+0]
    1562: 3D 00 08 CMP   [X+0],0x8
    1565: CF B2    JC    0x1518
(0093) 	ChangeToRead();
    1567: 9F 25    CALL  _ChangeToRead
(0094) 	delay_us(2);   
    1569: 50 00    MOV   A,0x0
    156B: 08       PUSH  A
    156C: 50 02    MOV   A,0x2
    156E: 08       PUSH  A
    156F: 7C 07 EC LCALL _delay_us
(0095) 	SCL_H;
    1572: 43 04 80 OR    REG[0x4],0x80
(0096) 	delay_us(1);
    1575: 50 00    MOV   A,0x0
    1577: 08       PUSH  A
    1578: 50 01    MOV   A,0x1
    157A: 08       PUSH  A
    157B: 7C 07 EC LCALL _delay_us
    157E: 38 FC    ADD   SP,0xFC
(0097) 	if(SDA_READ)
    1580: 5D 04    MOV   A,REG[0x4]
    1582: 62 D0 00 MOV   REG[0xD0],0x0
    1585: 53 3A    MOV   [__r0],A
    1587: 47 3A 20 TST   [__r0],0x20
    158A: A0 09    JZ    0x1594
(0098) 	{
(0099) 		ack=0;
    158C: 62 D0 00 MOV   REG[0xD0],0x0
    158F: 55 51 00 MOV   [ack],0x0
(0100) 	}
    1592: 80 07    JMP   0x159A
(0101) 	else
(0102) 	{
(0103) 		ack=1;        //�ж��Ƿ���յ�Ӧ���ź� 
    1594: 62 D0 00 MOV   REG[0xD0],0x0
    1597: 55 51 01 MOV   [ack],0x1
(0104) 	}
(0105) 	ChangeToOD();
    159A: 9F 08    CALL  _ChangeToOD
(0106) 	SCL_L;
    159C: 41 04 7F AND   REG[0x4],0x7F
(0107) 	_Nop();
    159F: 40       NOP   
(0108) 	_Nop();
    15A0: 40       NOP   
    15A1: 38 FF    ADD   SP,0xFF
    15A3: 20       POP   X
    15A4: 7F       RET   
(0109) }
(0110) //******************************************************************
(0111) //                 �ֽ����ݴ��ͺ���               
(0112) //����ԭ��: uchar  RcvByte();
(0113) //����:  �������մ���������������,���ж����ߴ���(����Ӧ���ź�)��
(0114) //     ���������Ӧ������  
(0115) //******************************************************************* 	
(0116) uchar  RcvByte(void)
(0117) {
_RcvByte:
  BitCnt               --> X+1
  retc                 --> X+0
    15A5: 10       PUSH  X
    15A6: 4F       MOV   X,SP
    15A7: 38 02    ADD   SP,0x2
(0118) 	uchar retc;
(0119) 	uchar BitCnt;
(0120) 	
(0121) 	retc=0; 
    15A9: 56 00 00 MOV   [X+0],0x0
(0122) 	ChangeToRead(); 
    15AC: 9E E0    CALL  _ChangeToRead
(0123) 	for(BitCnt=0;BitCnt<8;BitCnt++)
    15AE: 56 01 00 MOV   [X+1],0x0
    15B1: 80 39    JMP   0x15EB
(0124) 	{
(0125)         delay_us(1);         
    15B3: 50 00    MOV   A,0x0
    15B5: 08       PUSH  A
    15B6: 50 01    MOV   A,0x1
    15B8: 08       PUSH  A
    15B9: 7C 07 EC LCALL _delay_us
    15BC: 38 FE    ADD   SP,0xFE
(0126)         SCL_L;       //��ʱ����Ϊ�ͣ�׼����������λ 
    15BE: 41 04 7F AND   REG[0x4],0x7F
(0127)        	delay_us(1);
    15C1: 50 00    MOV   A,0x0
    15C3: 08       PUSH  A
    15C4: 50 01    MOV   A,0x1
    15C6: 08       PUSH  A
    15C7: 7C 07 EC LCALL _delay_us
(0128)         SCL_H;       //��ʱ����Ϊ��ʹ��������������Ч 
    15CA: 43 04 80 OR    REG[0x4],0x80
(0129)         delay_us(1);
    15CD: 50 00    MOV   A,0x0
    15CF: 08       PUSH  A
    15D0: 50 01    MOV   A,0x1
    15D2: 08       PUSH  A
    15D3: 7C 07 EC LCALL _delay_us
    15D6: 38 FC    ADD   SP,0xFC
(0130)         retc=retc<<1;
    15D8: 66 00    ASL   [X+0]
(0131)         if(SDA_READ)
    15DA: 5D 04    MOV   A,REG[0x4]
    15DC: 62 D0 00 MOV   REG[0xD0],0x0
    15DF: 53 3A    MOV   [__r0],A
    15E1: 47 3A 20 TST   [__r0],0x20
    15E4: A0 04    JZ    0x15E9
(0132) 				{
(0133) 						retc |= 1; //������λ,���յ�����λ����retc��  
    15E6: 2F 00 01 OR    [X+0],0x1
(0134) 				} 
(0135) 	}
    15E9: 77 01    INC   [X+1]
    15EB: 3D 01 08 CMP   [X+1],0x8
    15EE: CF C4    JC    0x15B3
(0136) 	SCL_L;    
    15F0: 41 04 7F AND   REG[0x4],0x7F
(0137) 	_Nop();
    15F3: 40       NOP   
(0138) 	_Nop();
    15F4: 40       NOP   
(0139) 	ChangeToOD(); 
    15F5: 9E AD    CALL  _ChangeToOD
(0140) 	return(retc);
    15F7: 52 00    MOV   A,[X+0]
    15F9: 62 D0 00 MOV   REG[0xD0],0x0
    15FC: 38 FE    ADD   SP,0xFE
    15FE: 20       POP   X
    15FF: 7F       RET   
(0141) }
(0142) //*******************************************************************
(0143) //                     Ӧ���Ӻ���
(0144) //ԭ��:  void Ack_I2c(bit a);
(0145) // 
(0146) //����:����������Ӧ���ź�,(������Ӧ����Ӧ���ź�)
(0147) //******************************************************************* 
(0148) void Ack_I2c(uchar a)
(0149) {
_Ack_I2c:
  a                    --> X-4
    1600: 10       PUSH  X
    1601: 4F       MOV   X,SP
(0150) 	if(a==0)
    1602: 3D FC 00 CMP   [X-4],0x0
    1605: B0 06    JNZ   0x160C
(0151) 	{
(0152) 		SDA_L;     //�ڴ˷���Ӧ����Ӧ���ź�  
    1607: 41 04 DF AND   REG[0x4],0xDF
(0153) 	}
    160A: 80 04    JMP   0x160F
(0154) 	else
(0155) 	{
(0156) 		SDA_H;
    160C: 43 04 20 OR    REG[0x4],0x20
(0157) 	}
(0158) 	delay_us(1);
    160F: 50 00    MOV   A,0x0
    1611: 08       PUSH  A
    1612: 50 01    MOV   A,0x1
    1614: 08       PUSH  A
    1615: 7C 07 EC LCALL _delay_us
    1618: 38 FE    ADD   SP,0xFE
(0159) 	SCL_H;
    161A: 43 04 80 OR    REG[0x4],0x80
(0160) 	delay_us(1);  
    161D: 50 00    MOV   A,0x0
    161F: 08       PUSH  A
    1620: 50 01    MOV   A,0x1
    1622: 08       PUSH  A
    1623: 7C 07 EC LCALL _delay_us
(0161) 	SCL_L;                //��ʱ���ߣ�ǯסI2C�����Ա�������� 
    1626: 41 04 7F AND   REG[0x4],0x7F
(0162) 	delay_us(1);    
    1629: 50 00    MOV   A,0x0
    162B: 08       PUSH  A
    162C: 50 01    MOV   A,0x1
    162E: 08       PUSH  A
    162F: 7C 07 EC LCALL _delay_us
    1632: 38 FC    ADD   SP,0xFC
    1634: 20       POP   X
    1635: 7F       RET   
(0163) }
(0164) //******************************************************************
(0165) //                    �����ӵ�ַ���������ֽ����ݺ���               
(0166) //����ԭ��: bit  ISendByte(uchar sla,ucahr c);  
(0167) //����:     ��������ߵ����͵�ַ�����ݣ��������ߵ�ȫ����,��������ַsla.
(0168) //           �������1��ʾ�����ɹ��������������
(0169) //ע�⣺    ʹ��ǰ�����ѽ������ߡ�
(0170) //******************************************************************* 
(0171) uchar ISendByte(uchar sla,uchar c)
(0172) {
_ISendByte:
  c                    --> X-5
  sla                  --> X-4
    1636: 10       PUSH  X
    1637: 4F       MOV   X,SP
(0173) 	Start_I2c();               //������� 
    1638: 9E 80    CALL  _Start_I2c
(0174) 	SendByte(sla);            //����������ַ 
    163A: 52 FC    MOV   A,[X-4]
    163C: 08       PUSH  A
    163D: 9E D0    CALL  _SendByte
    163F: 38 FF    ADD   SP,0xFF
(0175) 	if(ack==0)
    1641: 62 D0 00 MOV   REG[0xD0],0x0
    1644: 3C 51 00 CMP   [ack],0x0
    1647: B0 0A    JNZ   0x1652
(0176) 	{
(0177) 		Stop_I2c();
    1649: 9E 9B    CALL  _Stop_I2c
(0178) 		return(0);
    164B: 62 D0 00 MOV   REG[0xD0],0x0
    164E: 50 00    MOV   A,0x0
    1650: 80 20    JMP   0x1671
(0179) 	}
(0180) 	SendByte(c);               //�������� 
    1652: 52 FB    MOV   A,[X-5]
    1654: 08       PUSH  A
    1655: 9E B8    CALL  _SendByte
    1657: 38 FF    ADD   SP,0xFF
(0181) 	if(ack==0)
    1659: 62 D0 00 MOV   REG[0xD0],0x0
    165C: 3C 51 00 CMP   [ack],0x0
    165F: B0 0A    JNZ   0x166A
(0182) 	{
(0183) 		Stop_I2c();
    1661: 9E 83    CALL  _Stop_I2c
(0184) 		return(0);
    1663: 62 D0 00 MOV   REG[0xD0],0x0
    1666: 50 00    MOV   A,0x0
    1668: 80 08    JMP   0x1671
(0185) 	}
(0186) 	Stop_I2c();                 //��������  
    166A: 9E 7A    CALL  _Stop_I2c
(0187) 	return(1);
    166C: 62 D0 00 MOV   REG[0xD0],0x0
    166F: 50 01    MOV   A,0x1
    1671: 20       POP   X
    1672: 7F       RET   
(0188) }
(0189) 
(0190) //******************************************************************
(0191) //                    �����ӵ�ַ�������Ͷ��ֽ����ݺ���               
(0192) //����ԭ��: bit  ISendStr(uchar sla,uchar suba,ucahr *s,uchar no);  
(0193) //����:     ��������ߵ����͵�ַ���ӵ�ַ,���ݣ��������ߵ�ȫ����,������
(0194) //          ��ַsla���ӵ�ַsuba������������sָ������ݣ�����no���ֽڡ�
(0195) //           �������1��ʾ�����ɹ��������������
(0196) //ע�⣺    ʹ��ǰ�����ѽ������ߡ�
(0197) //******************************************************************* 
(0198) uchar ISendStr(uchar sla,uint suba,uchar *s,uchar no)
(0199) {
_ISendStr:
  Tmp                  --> X+1
  i                    --> X+0
  no                   --> X-9
  s                    --> X-8
  suba                 --> X-6
  sla                  --> X-4
    1673: 10       PUSH  X
    1674: 4F       MOV   X,SP
    1675: 38 02    ADD   SP,0x2
(0200) 	uchar i;
(0201) 	uchar Tmp;
(0202) 	Start_I2c();               //������� 
    1677: 9E 41    CALL  _Start_I2c
(0203) 	SendByte(sla);            //����������ַ 
    1679: 52 FC    MOV   A,[X-4]
    167B: 08       PUSH  A
    167C: 9E 91    CALL  _SendByte
    167E: 38 FF    ADD   SP,0xFF
(0204) 	if(ack==0)
    1680: 62 D0 00 MOV   REG[0xD0],0x0
    1683: 3C 51 00 CMP   [ack],0x0
    1686: B0 0A    JNZ   0x1691
(0205) 	{
(0206) 		Stop_I2c();
    1688: 9E 5C    CALL  _Stop_I2c
(0207) 		return(0);
    168A: 62 D0 00 MOV   REG[0xD0],0x0
    168D: 50 00    MOV   A,0x0
    168F: 80 5C    JMP   0x16EC
(0208) 	}
(0209) 
(0210) 	Tmp = suba & 0xff;
    1691: 62 D0 00 MOV   REG[0xD0],0x0
    1694: 52 FB    MOV   A,[X-5]
    1696: 54 01    MOV   [X+1],A
(0211) 	SendByte(Tmp);            //���������ӵ�ַ 
    1698: 52 01    MOV   A,[X+1]
    169A: 08       PUSH  A
    169B: 9E 72    CALL  _SendByte
    169D: 38 FF    ADD   SP,0xFF
(0212) 	if(ack==0)
    169F: 62 D0 00 MOV   REG[0xD0],0x0
    16A2: 3C 51 00 CMP   [ack],0x0
    16A5: B0 0A    JNZ   0x16B0
(0213) 	{
(0214) 		Stop_I2c();
    16A7: 9E 3D    CALL  _Stop_I2c
(0215) 		return(0);
    16A9: 62 D0 00 MOV   REG[0xD0],0x0
    16AC: 50 00    MOV   A,0x0
    16AE: 80 3D    JMP   0x16EC
(0216) 	}
(0217) 	
(0218) 	
(0219) 	for(i=0;i<no;i++)
    16B0: 56 00 00 MOV   [X+0],0x0
    16B3: 80 2B    JMP   0x16DF
(0220) 	{   
(0221) 		SendByte(*s);               //�������� 
    16B5: 62 D0 00 MOV   REG[0xD0],0x0
    16B8: 52 F9    MOV   A,[X-7]
    16BA: 53 39    MOV   [__r1],A
    16BC: 52 F8    MOV   A,[X-8]
    16BE: 60 D4    MOV   REG[0xD4],A
    16C0: 3E 39    MVI   A,[__r1]
    16C2: 08       PUSH  A
    16C3: 9E 4A    CALL  _SendByte
    16C5: 38 FF    ADD   SP,0xFF
(0222) 		if(ack==0)
    16C7: 62 D0 00 MOV   REG[0xD0],0x0
    16CA: 3C 51 00 CMP   [ack],0x0
    16CD: B0 0A    JNZ   0x16D8
(0223) 		{
(0224) 			Stop_I2c();
    16CF: 9E 15    CALL  _Stop_I2c
(0225) 			return(0);
    16D1: 62 D0 00 MOV   REG[0xD0],0x0
    16D4: 50 00    MOV   A,0x0
    16D6: 80 15    JMP   0x16EC
(0226) 		}
(0227) 		s++;
    16D8: 77 F9    INC   [X-7]
    16DA: 0F F8 00 ADC   [X-8],0x0
(0228) 	}
    16DD: 77 00    INC   [X+0]
    16DF: 52 00    MOV   A,[X+0]
    16E1: 3B F7    CMP   A,[X-9]
    16E3: CF D1    JC    0x16B5
(0229) 	Stop_I2c();                 //��������  
    16E5: 9D FF    CALL  _Stop_I2c
(0230) 	return(1);
    16E7: 62 D0 00 MOV   REG[0xD0],0x0
    16EA: 50 01    MOV   A,0x1
    16EC: 38 FE    ADD   SP,0xFE
    16EE: 20       POP   X
    16EF: 7F       RET   
(0231) }
(0232) //******************************************************************
(0233) //                    �����ӵ�ַ�������ֽ����ݺ���               
(0234) //����ԭ��: bit  IRcvByte(uchar sla,ucahr *c);  
(0235) //����:     ��������ߵ����͵�ַ�������ݣ��������ߵ�ȫ����,��������
(0236) //          ַsla������ֵ��c.
(0237) //           �������1��ʾ�����ɹ��������������
(0238) //ע�⣺    ʹ��ǰ�����ѽ������ߡ�
(0239) //******************************************************************* 
(0240) uchar IRcvByte(uchar sla,uchar *c)
(0241) {
_IRcvByte:
  c                    --> X-6
  sla                  --> X-4
    16F0: 10       PUSH  X
    16F1: 4F       MOV   X,SP
(0242) 	Start_I2c();                //������� 
    16F2: 9D C6    CALL  _Start_I2c
(0243) 	SendByte(sla+1);           //����������ַ 
    16F4: 62 D0 00 MOV   REG[0xD0],0x0
    16F7: 52 FC    MOV   A,[X-4]
    16F9: 01 01    ADD   A,0x1
    16FB: 08       PUSH  A
    16FC: 9E 11    CALL  _SendByte
    16FE: 38 FF    ADD   SP,0xFF
(0244) 	if(ack==0)
    1700: 62 D0 00 MOV   REG[0xD0],0x0
    1703: 3C 51 00 CMP   [ack],0x0
    1706: B0 0A    JNZ   0x1711
(0245) 	{
(0246) 		Stop_I2c();
    1708: 9D DC    CALL  _Stop_I2c
(0247) 		return(0);
    170A: 62 D0 00 MOV   REG[0xD0],0x0
    170D: 50 00    MOV   A,0x0
    170F: 80 22    JMP   0x1732
(0248) 	}
(0249) 	*c=RcvByte();               //��ȡ���� 
    1711: 9E 92    CALL  _RcvByte
    1713: 62 D0 00 MOV   REG[0xD0],0x0
    1716: 53 3A    MOV   [__r0],A
    1718: 52 FB    MOV   A,[X-5]
    171A: 53 37    MOV   [__r3],A
    171C: 52 FA    MOV   A,[X-6]
    171E: 60 D5    MOV   REG[0xD5],A
    1720: 51 3A    MOV   A,[__r0]
    1722: 3F 37    MVI   [__r3],A
(0250) 	Ack_I2c(1);                 //���ͷǾʹ�λ 
    1724: 50 01    MOV   A,0x1
    1726: 08       PUSH  A
    1727: 9E D7    CALL  _Ack_I2c
    1729: 38 FF    ADD   SP,0xFF
(0251) 	Stop_I2c();                 //��������  
    172B: 9D B9    CALL  _Stop_I2c
(0252) 	return(1);
    172D: 62 D0 00 MOV   REG[0xD0],0x0
    1730: 50 01    MOV   A,0x1
    1732: 20       POP   X
    1733: 7F       RET   
(0253) }
(0254) //******************************************************************
(0255) //                    �����ӵ�ַ������ȡ���ֽ����ݺ���               
(0256) //����ԭ��: bit  ISendStr(uchar sla,uchar suba,ucahr *s,uchar no);  
(0257) //����:     ��������ߵ����͵�ַ���ӵ�ַ,�����ݣ��������ߵ�ȫ����,������
(0258) //          ��ַsla���ӵ�ַsuba�����������ݷ���sָ��Ĵ洢������no���ֽڡ�
(0259) //           �������1��ʾ�����ɹ��������������
(0260) //ע�⣺    ʹ��ǰ�����ѽ������ߡ�
(0261) //******************************************************************* 
(0262) uchar IRcvStr(uchar sla,uint suba,uchar *s,uchar no)
(0263) {
_IRcvStr:
  Tmp                  --> X+1
  i                    --> X+0
  no                   --> X-9
  s                    --> X-8
  suba                 --> X-6
  sla                  --> X-4
    1734: 10       PUSH  X
    1735: 4F       MOV   X,SP
    1736: 38 02    ADD   SP,0x2
(0264) 	uchar i;
(0265) 	uchar Tmp;
(0266) 	Start_I2c();               //������� 
    1738: 9D 80    CALL  _Start_I2c
(0267) 	SendByte(sla);            //����������ַ 
    173A: 52 FC    MOV   A,[X-4]
    173C: 08       PUSH  A
    173D: 9D D0    CALL  _SendByte
    173F: 38 FF    ADD   SP,0xFF
(0268) 	if(ack==0)
    1741: 62 D0 00 MOV   REG[0xD0],0x0
    1744: 3C 51 00 CMP   [ack],0x0
    1747: B0 0A    JNZ   0x1752
(0269) 	{
(0270) 		Stop_I2c();
    1749: 9D 9B    CALL  _Stop_I2c
(0271) 		return(0);
    174B: 62 D0 00 MOV   REG[0xD0],0x0
    174E: 50 00    MOV   A,0x0
    1750: 80 95    JMP   0x17E6
(0272) 	}
(0273) 	Tmp = suba & 0xff;
    1752: 62 D0 00 MOV   REG[0xD0],0x0
    1755: 52 FB    MOV   A,[X-5]
    1757: 54 01    MOV   [X+1],A
(0274) 	SendByte(Tmp);            //���������ӵ�ַ 
    1759: 52 01    MOV   A,[X+1]
    175B: 08       PUSH  A
    175C: 9D B1    CALL  _SendByte
    175E: 38 FF    ADD   SP,0xFF
(0275) 	if(ack==0)
    1760: 62 D0 00 MOV   REG[0xD0],0x0
    1763: 3C 51 00 CMP   [ack],0x0
    1766: B0 0A    JNZ   0x1771
(0276) 	{
(0277) 		Stop_I2c();
    1768: 9D 7C    CALL  _Stop_I2c
(0278) 		return(0);
    176A: 62 D0 00 MOV   REG[0xD0],0x0
    176D: 50 00    MOV   A,0x0
    176F: 80 76    JMP   0x17E6
(0279) 	}
(0280) 	
(0281) 	Start_I2c();
    1771: 9D 47    CALL  _Start_I2c
(0282) 	SendByte(sla+1);
    1773: 62 D0 00 MOV   REG[0xD0],0x0
    1776: 52 FC    MOV   A,[X-4]
    1778: 01 01    ADD   A,0x1
    177A: 08       PUSH  A
    177B: 9D 92    CALL  _SendByte
    177D: 38 FF    ADD   SP,0xFF
(0283) 	if(ack==0)
    177F: 62 D0 00 MOV   REG[0xD0],0x0
    1782: 3C 51 00 CMP   [ack],0x0
    1785: B0 0A    JNZ   0x1790
(0284) 	{
(0285) 		Stop_I2c();
    1787: 9D 5D    CALL  _Stop_I2c
(0286) 		return(0);
    1789: 62 D0 00 MOV   REG[0xD0],0x0
    178C: 50 00    MOV   A,0x0
    178E: 80 57    JMP   0x17E6
(0287) 	}
(0288) 	for(i=0;i<no-1;i++)
    1790: 56 00 00 MOV   [X+0],0x0
    1793: 80 22    JMP   0x17B6
(0289) 	{   
(0290) 		*s=RcvByte();               //�������� 
    1795: 9E 0E    CALL  _RcvByte
    1797: 62 D0 00 MOV   REG[0xD0],0x0
    179A: 53 3A    MOV   [__r0],A
    179C: 52 F9    MOV   A,[X-7]
    179E: 53 37    MOV   [__r3],A
    17A0: 52 F8    MOV   A,[X-8]
    17A2: 60 D5    MOV   REG[0xD5],A
    17A4: 51 3A    MOV   A,[__r0]
    17A6: 3F 37    MVI   [__r3],A
(0291) 		Ack_I2c(0);                //���;ʹ�λ   
    17A8: 50 00    MOV   A,0x0
    17AA: 08       PUSH  A
    17AB: 9E 53    CALL  _Ack_I2c
    17AD: 38 FF    ADD   SP,0xFF
(0292) 		s++;
    17AF: 77 F9    INC   [X-7]
    17B1: 0F F8 00 ADC   [X-8],0x0
(0293) 	} 
    17B4: 77 00    INC   [X+0]
    17B6: 62 D0 00 MOV   REG[0xD0],0x0
    17B9: 52 F7    MOV   A,[X-9]
    17BB: 11 01    SUB   A,0x1
    17BD: 53 3A    MOV   [__r0],A
    17BF: 52 00    MOV   A,[X+0]
    17C1: 3A 3A    CMP   A,[__r0]
    17C3: CF D1    JC    0x1795
(0294) 	*s=RcvByte();
    17C5: 9D DE    CALL  _RcvByte
    17C7: 62 D0 00 MOV   REG[0xD0],0x0
    17CA: 53 3A    MOV   [__r0],A
    17CC: 52 F9    MOV   A,[X-7]
    17CE: 53 37    MOV   [__r3],A
    17D0: 52 F8    MOV   A,[X-8]
    17D2: 60 D5    MOV   REG[0xD5],A
    17D4: 51 3A    MOV   A,[__r0]
    17D6: 3F 37    MVI   [__r3],A
(0295) 	Ack_I2c(1);                 //���ͷ�Ӧλ 
    17D8: 50 01    MOV   A,0x1
    17DA: 08       PUSH  A
    17DB: 9E 23    CALL  _Ack_I2c
    17DD: 38 FF    ADD   SP,0xFF
(0296) 	Stop_I2c();                    //��������  
    17DF: 9D 05    CALL  _Stop_I2c
(0297) 	return(1);
    17E1: 62 D0 00 MOV   REG[0xD0],0x0
    17E4: 50 01    MOV   A,0x1
    17E6: 38 FE    ADD   SP,0xFE
    17E8: 20       POP   X
    17E9: 7F       RET   
(0298) }
(0299) 
(0300) uchar IRcvBytes(uchar sla,uchar *s,uchar no)
(0301) {
_IRcvBytes:
  i                    --> X+0
  no                   --> X-7
  s                    --> X-6
  sla                  --> X-4
    17EA: 10       PUSH  X
    17EB: 4F       MOV   X,SP
    17EC: 38 01    ADD   SP,0x1
(0302) 	uchar i;
(0303) 
(0304) 	Start_I2c();
    17EE: 9C CA    CALL  _Start_I2c
(0305) 	SendByte(sla+1);
    17F0: 62 D0 00 MOV   REG[0xD0],0x0
    17F3: 52 FC    MOV   A,[X-4]
    17F5: 01 01    ADD   A,0x1
    17F7: 08       PUSH  A
    17F8: 9D 15    CALL  _SendByte
    17FA: 38 FF    ADD   SP,0xFF
(0306) 	if(ack==0)
    17FC: 62 D0 00 MOV   REG[0xD0],0x0
    17FF: 3C 51 00 CMP   [ack],0x0
    1802: B0 0A    JNZ   0x180D
(0307) 	{
(0308) 		Stop_I2c();
    1804: 9C E0    CALL  _Stop_I2c
(0309) 		return(0);
    1806: 62 D0 00 MOV   REG[0xD0],0x0
    1809: 50 00    MOV   A,0x0
    180B: 80 57    JMP   0x1863
(0310) 	}
(0311) 	for(i=0;i<no-1;i++)
    180D: 56 00 00 MOV   [X+0],0x0
    1810: 80 22    JMP   0x1833
(0312) 	{   
(0313) 		*s=RcvByte();               //�������� 
    1812: 9D 91    CALL  _RcvByte
    1814: 62 D0 00 MOV   REG[0xD0],0x0
    1817: 53 3A    MOV   [__r0],A
    1819: 52 FB    MOV   A,[X-5]
    181B: 53 37    MOV   [__r3],A
    181D: 52 FA    MOV   A,[X-6]
    181F: 60 D5    MOV   REG[0xD5],A
    1821: 51 3A    MOV   A,[__r0]
    1823: 3F 37    MVI   [__r3],A
(0314) 		Ack_I2c(0);                //���;ʹ�λ   
    1825: 50 00    MOV   A,0x0
    1827: 08       PUSH  A
    1828: 9D D6    CALL  _Ack_I2c
    182A: 38 FF    ADD   SP,0xFF
(0315) 		s++;
    182C: 77 FB    INC   [X-5]
    182E: 0F FA 00 ADC   [X-6],0x0
(0316) 	} 
    1831: 77 00    INC   [X+0]
    1833: 62 D0 00 MOV   REG[0xD0],0x0
    1836: 52 F9    MOV   A,[X-7]
    1838: 11 01    SUB   A,0x1
    183A: 53 3A    MOV   [__r0],A
    183C: 52 00    MOV   A,[X+0]
    183E: 3A 3A    CMP   A,[__r0]
    1840: CF D1    JC    0x1812
(0317) 	*s=RcvByte();
    1842: 9D 61    CALL  _RcvByte
    1844: 62 D0 00 MOV   REG[0xD0],0x0
    1847: 53 3A    MOV   [__r0],A
    1849: 52 FB    MOV   A,[X-5]
    184B: 53 37    MOV   [__r3],A
    184D: 52 FA    MOV   A,[X-6]
    184F: 60 D5    MOV   REG[0xD5],A
    1851: 51 3A    MOV   A,[__r0]
    1853: 3F 37    MVI   [__r3],A
(0318) 	Ack_I2c(1);                 //���ͷ�Ӧλ 
    1855: 50 01    MOV   A,0x1
    1857: 08       PUSH  A
    1858: 9D A6    CALL  _Ack_I2c
    185A: 38 FF    ADD   SP,0xFF
(0319) 	Stop_I2c();                    //��������  
    185C: 9C 88    CALL  _Stop_I2c
(0320) 	return(1);
    185E: 62 D0 00 MOV   REG[0xD0],0x0
    1861: 50 01    MOV   A,0x1
    1863: 38 FF    ADD   SP,0xFF
    1865: 20       POP   X
    1866: 7F       RET   
