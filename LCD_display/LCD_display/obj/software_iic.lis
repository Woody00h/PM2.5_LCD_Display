 0000                   cpu LMM
                        .module software_iic.c
                        .area text(rom, con, rel)
 0000                   .dbfile ./software_iic.c
 0000                   .dbfile C:\chendong\MYDOCU~1\code\LCD_DI~1\LCD_DI~1\LCD_DI~1\software_iic.c
 0000                   .dbfunc e Init_IIC _Init_IIC fV
 0000           _Init_IIC::
 0000                   .dbline -1
 0000                   .dbline 8
 0000           ; #include <m8c.h>        // part specific constants and macros
 0000           ; #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
 0000           ; #define               SW_IIC
 0000           ; #include      "software_IIC.H"
 0000           ; #include "HT1621B.h"
 0000           ; //******************************************************************
 0000           ; void Init_IIC(void)
 0000           ; {
 0000                   .dbline 10
 0000           ;       //P1.7 P1.5 open drain low mode and output 1
 0000           ;       PRT1DM2 |= (SDA_BIT + SCL_BIT);
 0000 4307A0            or REG[0x7],-96
 0003                   .dbline 11
 0003           ;       PRT1DM1 |= (SDA_BIT + SCL_BIT);
 0003 7110              or F,0x10  ; iopage = 1
 0005 4305A0            or REG[0x5],-96
 0008                   .dbline 12
 0008           ;       PRT1DM0 |= (SDA_BIT + SCL_BIT);
 0008 4304A0            or REG[0x4],-96
 000B                   .dbline 13
 000B           ;       PRT1DR  |= (SDA_BIT + SCL_BIT);
 000B 70CF              and F,0xCF      ; iopage = 0
 000D 4304A0            or REG[0x4],-96
 0010                   .dbline -2
 0010           L1:
 0010                   .dbline 0 ; func end
 0010 7F                ret
 0011                   .dbend
 0011                   .dbfunc e ChangeToRead _ChangeToRead fV
 0011           _ChangeToRead::
 0011                   .dbline -1
 0011                   .dbline 16
 0011           ; }
 0011           ; void ChangeToRead(void)
 0011           ; {
 0011                   .dbline 17
 0011           ;       PRT1DM0 &= ~(SDA_BIT);
 0011 7110              or F,0x10  ; iopage = 1
 0013 4104DF            and REG[0x4],-33
 0016                   .dbline 18
 0016           ;       PRT1DM2 &= ~(SDA_BIT);
 0016 70CF              and F,0xCF      ; iopage = 0
 0018 4107DF            and REG[0x7],-33
 001B                   .dbline 19
 001B           ;       delay_us(1);
 001B 5000              mov A,0
 001D 08                push A
 001E 5001              mov A,1
 0020 08                push A
 0021 7C0000            xcall _delay_us
 0024 38FE              add SP,-2
 0026                   .dbline -2
 0026           L2:
 0026                   .dbline 0 ; func end
 0026 7F                ret
 0027                   .dbend
 0027                   .dbfunc e ChangeToOD _ChangeToOD fV
 0027           _ChangeToOD::
 0027                   .dbline -1
 0027                   .dbline 23
 0027           ; }
 0027           ; 
 0027           ; void ChangeToOD(void)
 0027           ; {
 0027                   .dbline 24
 0027           ;       PRT1DM2 |= (SDA_BIT);
 0027 430720            or REG[0x7],32
 002A                   .dbline 26
 002A           ; //    PRT1DM1 |= (SDA_BIT);
 002A           ;       PRT1DM0 |= (SDA_BIT);
 002A 7110              or F,0x10  ; iopage = 1
 002C 430420            or REG[0x4],32
 002F                   .dbline 27
 002F           ;       delay_us(1);
 002F 5000              mov A,0
 0031 08                push A
 0032 5001              mov A,1
 0034 08                push A
 0035 70CF              and F,0xCF      ; iopage = 0
 0037 7C0000            xcall _delay_us
 003A 38FE              add SP,-2
 003C                   .dbline -2
 003C           L3:
 003C                   .dbline 0 ; func end
 003C 7F                ret
 003D                   .dbend
 003D                   .dbfunc e Start_I2c _Start_I2c fV
 003D           _Start_I2c::
 003D                   .dbline -1
 003D                   .dbline 42
 003D           ; }
 003D           ; 
 003D           ; //******************************************************************* 
 003D           ; 
 003D           ; 
 003D           ; 
 003D           ; 
 003D           ; //******************************************************************
 003D           ; //                     �����ߺ���               
 003D           ; //����ԭ��: void  Start_I2c();  
 003D           ; //����:       ���I2C����,������I2C��ʼ����.
 003D           ; //  
 003D           ; //******************************************************************* 
 003D           ; void Start_I2c(void)
 003D           ; {
 003D                   .dbline 43
 003D           ;       SDA_H;   //������ʼ�����������ź� 
 003D 430420            or REG[0x4],32
 0040                   .dbline 44
 0040           ;       SCL_H;
 0040 430480            or REG[0x4],-128
 0043                   .dbline 45
 0043           ;       delay_us(2);
 0043 5000              mov A,0
 0045 08                push A
 0046 5002              mov A,2
 0048 08                push A
 0049 7C0000            xcall _delay_us
 004C 38FE              add SP,-2
 004E                   .dbline 46
 004E           ;       SDA_L;   //������ʼ�ź� 
 004E 4104DF            and REG[0x4],-33
 0051                   .dbline 47
 0051           ;       delay_us(1);
 0051 5000              mov A,0
 0053 08                push A
 0054 5001              mov A,1
 0056 08                push A
 0057 7C0000            xcall _delay_us
 005A                   .dbline 48
 005A           ;       SCL_L;   //ǯסI2C���ߣ�׼�����ͻ��������  
 005A 41047F            and REG[0x4],127
 005D                   .dbline 49
 005D           ;       delay_us(1);
 005D 5000              mov A,0
 005F 08                push A
 0060 5001              mov A,1
 0062 08                push A
 0063 7C0000            xcall _delay_us
 0066 38FC              add SP,-4
 0068                   .dbline -2
 0068           L4:
 0068                   .dbline 0 ; func end
 0068 7F                ret
 0069                   .dbend
 0069                   .dbfunc e Stop_I2c _Stop_I2c fV
 0069           _Stop_I2c::
 0069                   .dbline -1
 0069                   .dbline 58
 0069           ; }
 0069           ; //******************************************************************
 0069           ; //                      �������ߺ���               
 0069           ; //����ԭ��: void  Stop_I2c();  
 0069           ; //����:       ����I2C����,������I2C��������.
 0069           ; //  
 0069           ; //******************************************************************* 
 0069           ; void Stop_I2c(void)
 0069           ; {
 0069                   .dbline 59
 0069           ;       SDA_L;  
 0069 4104DF            and REG[0x4],-33
 006C                   .dbline 60
 006C           ;       delay_us(1);
 006C 5000              mov A,0
 006E 08                push A
 006F 5001              mov A,1
 0071 08                push A
 0072 7C0000            xcall _delay_us
 0075 38FE              add SP,-2
 0077                   .dbline 61
 0077           ;       SCL_H;  
 0077 430480            or REG[0x4],-128
 007A                   .dbline 62
 007A           ;       delay_us(1);
 007A 5000              mov A,0
 007C 08                push A
 007D 5001              mov A,1
 007F 08                push A
 0080 7C0000            xcall _delay_us
 0083                   .dbline 63
 0083           ;       SDA_H;  
 0083 430420            or REG[0x4],32
 0086                   .dbline 64
 0086           ;       delay_us(1);
 0086 5000              mov A,0
 0088 08                push A
 0089 5001              mov A,1
 008B 08                push A
 008C 7C0000            xcall _delay_us
 008F 38FC              add SP,-4
 0091                   .dbline -2
 0091           L5:
 0091                   .dbline 0 ; func end
 0091 7F                ret
 0092                   .dbend
 0092                   .dbfunc e SendByte _SendByte fV
 0092           ;         BitCnt -> X+0
 0092           ;              c -> X-4
 0092           _SendByte::
 0092                   .dbline -1
 0092 10                push X
 0093 4F                mov X,SP
 0094 3801              add SP,1
 0096                   .dbline 74
 0096           ; }
 0096           ; //******************************************************************
 0096           ; //                 �ֽ����ݴ��ͺ���               
 0096           ; //����ԭ��: void  SendByte(uchar c);
 0096           ; //����:  ������c���ͳ�ȥ,�����ǵ�ַ,Ҳ����������,�����ȴ�Ӧ��,����
 0096           ; //     ��״̬λ���в���.(��Ӧ����Ӧ��ʹack=0 ��)     
 0096           ; //     ��������������ack=1; ack=0��ʾ��������Ӧ����𻵡�
 0096           ; //******************************************************************* 
 0096           ; void  SendByte(uchar c)
 0096           ; {
 0096                   .dbline 77
 0096           ;               uchar BitCnt;
 0096           ;       
 0096           ;       for(BitCnt=0;BitCnt<8;BitCnt++)
 0096 560000            mov [X+0],0
 0099 804B              xjmp L10
 009B           L7:
 009B                   .dbline 78
 009B           ;       {
 009B                   .dbline 79
 009B           ;               if((c<<BitCnt)&0x80)
 009B 52FC              mov A,[X-4]
 009D 62D000            mov REG[0xd0],>__r0
 00A0 5300              mov [__r0],A
 00A2 5200              mov A,[X+0]
 00A4 A009              jz X0
 00A6           X1:
 00A6 62D000            mov REG[0xd0],>__r0
 00A9 6500              asl [__r0]
 00AB 78                dec A
 00AC BFF9              jnz X1
 00AE           X0:
 00AE 62D000            mov REG[0xd0],>__r0
 00B1 260080            and [__r0],-128
 00B4 A006              jz L11
 00B6                   .dbline 81
 00B6           ;               {
 00B6           ;                       SDA_H;
 00B6                   .dbline 81
 00B6 430420            or REG[0x4],32
 00B9                   .dbline 82
 00B9           ;               }
 00B9 8004              xjmp L12
 00BB           L11:
 00BB                   .dbline 84
 00BB           ;               else
 00BB           ;               {
 00BB                   .dbline 85
 00BB           ;                       SDA_L;
 00BB 4104DF            and REG[0x4],-33
 00BE                   .dbline 86
 00BE           ;               }
 00BE           L12:
 00BE                   .dbline 87
 00BE           ;               delay_us(1);
 00BE 5000              mov A,0
 00C0 08                push A
 00C1 5001              mov A,1
 00C3 08                push A
 00C4 7C0000            xcall _delay_us
 00C7 38FE              add SP,-2
 00C9                   .dbline 88
 00C9           ;               SCL_H;               
 00C9 430480            or REG[0x4],-128
 00CC                   .dbline 89
 00CC           ;               delay_us(1);         
 00CC 5000              mov A,0
 00CE 08                push A
 00CF 5001              mov A,1
 00D1 08                push A
 00D2 7C0000            xcall _delay_us
 00D5                   .dbline 90
 00D5           ;               SCL_L; 
 00D5 41047F            and REG[0x4],127
 00D8                   .dbline 91
 00D8           ;               delay_us(1);
 00D8 5000              mov A,0
 00DA 08                push A
 00DB 5001              mov A,1
 00DD 08                push A
 00DE 7C0000            xcall _delay_us
 00E1 38FC              add SP,-4
 00E3                   .dbline 92
 00E3           ;       }
 00E3           L8:
 00E3                   .dbline 77
 00E3 7700              inc [X+0]
 00E5           L10:
 00E5                   .dbline 77
 00E5 3D0008            cmp [X+0],8
 00E8 CFB2              jc L7
 00EA           X2:
 00EA                   .dbline 93
 00EA           ;       ChangeToRead();
 00EA 9F25              xcall _ChangeToRead
 00EC                   .dbline 94
 00EC           ;       delay_us(2);   
 00EC 5000              mov A,0
 00EE 08                push A
 00EF 5002              mov A,2
 00F1 08                push A
 00F2 7C0000            xcall _delay_us
 00F5                   .dbline 95
 00F5           ;       SCL_H;
 00F5 430480            or REG[0x4],-128
 00F8                   .dbline 96
 00F8           ;       delay_us(1);
 00F8 5000              mov A,0
 00FA 08                push A
 00FB 5001              mov A,1
 00FD 08                push A
 00FE 7C0000            xcall _delay_us
 0101 38FC              add SP,-4
 0103                   .dbline 97
 0103           ;       if(SDA_READ)
 0103 5D04              mov A,REG[0x4]
 0105 62D000            mov REG[0xd0],>__r0
 0108 5300              mov [__r0],A
 010A 470020            tst [__r0],32
 010D A009              jz L13
 010F                   .dbline 99
 010F           ;       {
 010F           ;               ack=0;
 010F                   .dbline 99
 010F 62D000            mov REG[0xd0],>_ack
 0112 550000            mov [_ack],0
 0115                   .dbline 100
 0115           ;       }
 0115 8007              xjmp L14
 0117           L13:
 0117                   .dbline 102
 0117           ;       else
 0117           ;       {
 0117                   .dbline 103
 0117           ;               ack=1;        //�ж��Ƿ���յ�Ӧ���ź� 
 0117 62D000            mov REG[0xd0],>_ack
 011A 550001            mov [_ack],1
 011D                   .dbline 104
 011D           ;       }
 011D           L14:
 011D                   .dbline 105
 011D           ;       ChangeToOD();
 011D 9F08              xcall _ChangeToOD
 011F                   .dbline 106
 011F           ;       SCL_L;
 011F 41047F            and REG[0x4],127
 0122                   .dbline 107
 0122           ;       _Nop();
 0122 40                        nop
 0123           
 0123                   .dbline 108
 0123           ;       _Nop();
 0123 40                        nop
 0124           
 0124                   .dbline -2
 0124           L6:
 0124 38FF              add SP,-1
 0126 20                pop X
 0127                   .dbline 0 ; func end
 0127 7F                ret
 0128                   .dbsym l BitCnt 0 c
 0128                   .dbsym l c -4 c
 0128                   .dbend
 0128                   .dbfunc e RcvByte _RcvByte fc
 0128           ;         BitCnt -> X+1
 0128           ;           retc -> X+0
 0128           _RcvByte::
 0128                   .dbline -1
 0128 10                push X
 0129 4F                mov X,SP
 012A 3802              add SP,2
 012C                   .dbline 117
 012C           ; }
 012C           ; //******************************************************************
 012C           ; //                 �ֽ����ݴ��ͺ���               
 012C           ; //����ԭ��: uchar  RcvByte();
 012C           ; //����:  �������մ���������������,���ж����ߴ���(����Ӧ���ź�)��
 012C           ; //     ���������Ӧ������  
 012C           ; //*******************************************************************         
 012C           ; uchar  RcvByte(void)
 012C           ; {
 012C                   .dbline 121
 012C           ;       uchar retc;
 012C           ;       uchar BitCnt;
 012C           ;       
 012C           ;       retc=0; 
 012C 560000            mov [X+0],0
 012F                   .dbline 122
 012F           ;       ChangeToRead(); 
 012F 9EE0              xcall _ChangeToRead
 0131                   .dbline 123
 0131           ;       for(BitCnt=0;BitCnt<8;BitCnt++)
 0131 560100            mov [X+1],0
 0134 8039              xjmp L19
 0136           L16:
 0136                   .dbline 124
 0136           ;       {
 0136                   .dbline 125
 0136           ;         delay_us(1);         
 0136 5000              mov A,0
 0138 08                push A
 0139 5001              mov A,1
 013B 08                push A
 013C 7C0000            xcall _delay_us
 013F 38FE              add SP,-2
 0141                   .dbline 126
 0141           ;         SCL_L;       //��ʱ����Ϊ�ͣ�׼����������λ 
 0141 41047F            and REG[0x4],127
 0144                   .dbline 127
 0144           ;               delay_us(1);
 0144 5000              mov A,0
 0146 08                push A
 0147 5001              mov A,1
 0149 08                push A
 014A 7C0000            xcall _delay_us
 014D                   .dbline 128
 014D           ;         SCL_H;       //��ʱ����Ϊ��ʹ��������������Ч 
 014D 430480            or REG[0x4],-128
 0150                   .dbline 129
 0150           ;         delay_us(1);
 0150 5000              mov A,0
 0152 08                push A
 0153 5001              mov A,1
 0155 08                push A
 0156 7C0000            xcall _delay_us
 0159 38FC              add SP,-4
 015B                   .dbline 130
 015B           ;         retc=retc<<1;
 015B 6600              asl [X+0]
 015D                   .dbline 131
 015D           ;         if(SDA_READ)
 015D 5D04              mov A,REG[0x4]
 015F 62D000            mov REG[0xd0],>__r0
 0162 5300              mov [__r0],A
 0164 470020            tst [__r0],32
 0167 A004              jz L20
 0169                   .dbline 133
 0169           ;                               {
 0169           ;                                               retc |= 1; //������λ,���յ�����λ����retc��  
 0169                   .dbline 133
 0169 2F0001            or [X+0],1
 016C                   .dbline 134
 016C           ;                               } 
 016C           L20:
 016C                   .dbline 135
 016C           ;       }
 016C           L17:
 016C                   .dbline 123
 016C 7701              inc [X+1]
 016E           L19:
 016E                   .dbline 123
 016E 3D0108            cmp [X+1],8
 0171 CFC4              jc L16
 0173           X3:
 0173                   .dbline 136
 0173           ;       SCL_L;    
 0173 41047F            and REG[0x4],127
 0176                   .dbline 137
 0176           ;       _Nop();
 0176 40                        nop
 0177           
 0177                   .dbline 138
 0177           ;       _Nop();
 0177 40                        nop
 0178           
 0178                   .dbline 139
 0178           ;       ChangeToOD(); 
 0178 9EAD              xcall _ChangeToOD
 017A                   .dbline 140
 017A           ;       return(retc);
 017A 5200              mov A,[X+0]
 017C 62D000            mov REG[0xd0],>__r0
 017F                   .dbline -2
 017F           L15:
 017F 38FE              add SP,-2
 0181 20                pop X
 0182                   .dbline 0 ; func end
 0182 7F                ret
 0183                   .dbsym l BitCnt 1 c
 0183                   .dbsym l retc 0 c
 0183                   .dbend
 0183                   .dbfunc e Ack_I2c _Ack_I2c fV
 0183           ;              a -> X-4
 0183           _Ack_I2c::
 0183                   .dbline -1
 0183 10                push X
 0184 4F                mov X,SP
 0185                   .dbline 149
 0185           ; }
 0185           ; //*******************************************************************
 0185           ; //                     Ӧ���Ӻ���
 0185           ; //ԭ��:  void Ack_I2c(bit a);
 0185           ; // 
 0185           ; //����:����������Ӧ���ź�,(������Ӧ����Ӧ���ź�)
 0185           ; //******************************************************************* 
 0185           ; void Ack_I2c(uchar a)
 0185           ; {
 0185                   .dbline 150
 0185           ;       if(a==0)
 0185 3DFC00            cmp [X-4],0
 0188 B006              jnz L23
 018A                   .dbline 152
 018A           ;       {
 018A           ;               SDA_L;     //�ڴ˷���Ӧ����Ӧ���ź�  
 018A                   .dbline 152
 018A 4104DF            and REG[0x4],-33
 018D                   .dbline 153
 018D           ;       }
 018D 8004              xjmp L24
 018F           L23:
 018F                   .dbline 155
 018F           ;       else
 018F           ;       {
 018F                   .dbline 156
 018F           ;               SDA_H;
 018F 430420            or REG[0x4],32
 0192                   .dbline 157
 0192           ;       }
 0192           L24:
 0192                   .dbline 158
 0192           ;       delay_us(1);
 0192 5000              mov A,0
 0194 08                push A
 0195 5001              mov A,1
 0197 08                push A
 0198 7C0000            xcall _delay_us
 019B 38FE              add SP,-2
 019D                   .dbline 159
 019D           ;       SCL_H;
 019D 430480            or REG[0x4],-128
 01A0                   .dbline 160
 01A0           ;       delay_us(1);  
 01A0 5000              mov A,0
 01A2 08                push A
 01A3 5001              mov A,1
 01A5 08                push A
 01A6 7C0000            xcall _delay_us
 01A9                   .dbline 161
 01A9           ;       SCL_L;                //��ʱ���ߣ�ǯסI2C�����Ա�������� 
 01A9 41047F            and REG[0x4],127
 01AC                   .dbline 162
 01AC           ;       delay_us(1);    
 01AC 5000              mov A,0
 01AE 08                push A
 01AF 5001              mov A,1
 01B1 08                push A
 01B2 7C0000            xcall _delay_us
 01B5 38FC              add SP,-4
 01B7                   .dbline -2
 01B7           L22:
 01B7 20                pop X
 01B8                   .dbline 0 ; func end
 01B8 7F                ret
 01B9                   .dbsym l a -4 c
 01B9                   .dbend
 01B9                   .dbfunc e ISendByte _ISendByte fc
 01B9           ;              c -> X-5
 01B9           ;            sla -> X-4
 01B9           _ISendByte::
 01B9                   .dbline -1
 01B9 10                push X
 01BA 4F                mov X,SP
 01BB                   .dbline 172
 01BB           ; }
 01BB           ; //******************************************************************
 01BB           ; //                    �����ӵ�ַ���������ֽ����ݺ���               
 01BB           ; //����ԭ��: bit  ISendByte(uchar sla,ucahr c);  
 01BB           ; //����:     ��������ߵ����͵�ַ�����ݣ��������ߵ�ȫ����,��������ַsla.
 01BB           ; //           �������1��ʾ�����ɹ��������������
 01BB           ; //ע�⣺    ʹ��ǰ�����ѽ������ߡ�
 01BB           ; //******************************************************************* 
 01BB           ; uchar ISendByte(uchar sla,uchar c)
 01BB           ; {
 01BB                   .dbline 173
 01BB           ;       Start_I2c();               //������� 
 01BB 9E80              xcall _Start_I2c
 01BD                   .dbline 174
 01BD           ;       SendByte(sla);            //����������ַ 
 01BD 52FC              mov A,[X-4]
 01BF 08                push A
 01C0 9ED0              xcall _SendByte
 01C2 38FF              add SP,-1
 01C4                   .dbline 175
 01C4           ;       if(ack==0)
 01C4 62D000            mov REG[0xd0],>_ack
 01C7 3C0000            cmp [_ack],0
 01CA B00A              jnz L26
 01CC                   .dbline 177
 01CC           ;       {
 01CC           ;               Stop_I2c();
 01CC                   .dbline 177
 01CC 9E9B              xcall _Stop_I2c
 01CE                   .dbline 178
 01CE           ;               return(0);
 01CE 62D000            mov REG[0xd0],>__r0
 01D1 5000              mov A,0
 01D3 8020              xjmp L25
 01D5           L26:
 01D5                   .dbline 180
 01D5           ;       }
 01D5           ;       SendByte(c);               //�������� 
 01D5 52FB              mov A,[X-5]
 01D7 08                push A
 01D8 9EB8              xcall _SendByte
 01DA 38FF              add SP,-1
 01DC                   .dbline 181
 01DC           ;       if(ack==0)
 01DC 62D000            mov REG[0xd0],>_ack
 01DF 3C0000            cmp [_ack],0
 01E2 B00A              jnz L28
 01E4                   .dbline 183
 01E4           ;       {
 01E4           ;               Stop_I2c();
 01E4                   .dbline 183
 01E4 9E83              xcall _Stop_I2c
 01E6                   .dbline 184
 01E6           ;               return(0);
 01E6 62D000            mov REG[0xd0],>__r0
 01E9 5000              mov A,0
 01EB 8008              xjmp L25
 01ED           L28:
 01ED                   .dbline 186
 01ED           ;       }
 01ED           ;       Stop_I2c();                 //��������  
 01ED 9E7A              xcall _Stop_I2c
 01EF                   .dbline 187
 01EF           ;       return(1);
 01EF 62D000            mov REG[0xd0],>__r0
 01F2 5001              mov A,1
 01F4                   .dbline -2
 01F4           L25:
 01F4 20                pop X
 01F5                   .dbline 0 ; func end
 01F5 7F                ret
 01F6                   .dbsym l c -5 c
 01F6                   .dbsym l sla -4 c
 01F6                   .dbend
 01F6                   .dbfunc e ISendStr _ISendStr fc
 01F6           ;            Tmp -> X+1
 01F6           ;              i -> X+0
 01F6           ;             no -> X-9
 01F6           ;              s -> X-8
 01F6           ;           suba -> X-6
 01F6           ;            sla -> X-4
 01F6           _ISendStr::
 01F6                   .dbline -1
 01F6 10                push X
 01F7 4F                mov X,SP
 01F8 3802              add SP,2
 01FA                   .dbline 199
 01FA           ; }
 01FA           ; 
 01FA           ; //******************************************************************
 01FA           ; //                    �����ӵ�ַ�������Ͷ��ֽ����ݺ���               
 01FA           ; //����ԭ��: bit  ISendStr(uchar sla,uchar suba,ucahr *s,uchar no);  
 01FA           ; //����:     ��������ߵ����͵�ַ���ӵ�ַ,���ݣ��������ߵ�ȫ����,������
 01FA           ; //          ��ַsla���ӵ�ַsuba������������sָ������ݣ�����no���ֽڡ�
 01FA           ; //           �������1��ʾ�����ɹ��������������
 01FA           ; //ע�⣺    ʹ��ǰ�����ѽ������ߡ�
 01FA           ; //******************************************************************* 
 01FA           ; uchar ISendStr(uchar sla,uint suba,uchar *s,uchar no)
 01FA           ; {
 01FA                   .dbline 202
 01FA           ;       uchar i;
 01FA           ;       uchar Tmp;
 01FA           ;       Start_I2c();               //������� 
 01FA 9E41              xcall _Start_I2c
 01FC                   .dbline 203
 01FC           ;       SendByte(sla);            //����������ַ 
 01FC 52FC              mov A,[X-4]
 01FE 08                push A
 01FF 9E91              xcall _SendByte
 0201 38FF              add SP,-1
 0203                   .dbline 204
 0203           ;       if(ack==0)
 0203 62D000            mov REG[0xd0],>_ack
 0206 3C0000            cmp [_ack],0
 0209 B00A              jnz L31
 020B                   .dbline 206
 020B           ;       {
 020B           ;               Stop_I2c();
 020B                   .dbline 206
 020B 9E5C              xcall _Stop_I2c
 020D                   .dbline 207
 020D           ;               return(0);
 020D 62D000            mov REG[0xd0],>__r0
 0210 5000              mov A,0
 0212 805C              xjmp L30
 0214           L31:
 0214                   .dbline 210
 0214           ;       }
 0214           ; 
 0214           ;       Tmp = suba & 0xff;
 0214 62D000            mov REG[0xd0],>__r0
 0217 52FB              mov A,[X-5]
 0219 5401              mov [X+1],A
 021B                   .dbline 211
 021B           ;       SendByte(Tmp);            //���������ӵ�ַ 
 021B 5201              mov A,[X+1]
 021D 08                push A
 021E 9E72              xcall _SendByte
 0220 38FF              add SP,-1
 0222                   .dbline 212
 0222           ;       if(ack==0)
 0222 62D000            mov REG[0xd0],>_ack
 0225 3C0000            cmp [_ack],0
 0228 B00A              jnz L33
 022A                   .dbline 214
 022A           ;       {
 022A           ;               Stop_I2c();
 022A                   .dbline 214
 022A 9E3D              xcall _Stop_I2c
 022C                   .dbline 215
 022C           ;               return(0);
 022C 62D000            mov REG[0xd0],>__r0
 022F 5000              mov A,0
 0231 803D              xjmp L30
 0233           L33:
 0233                   .dbline 219
 0233           ;       }
 0233           ;       
 0233           ;       
 0233           ;       for(i=0;i<no;i++)
 0233 560000            mov [X+0],0
 0236 802B              xjmp L38
 0238           L35:
 0238                   .dbline 220
 0238           ;       {   
 0238                   .dbline 221
 0238           ;               SendByte(*s);               //�������� 
 0238 62D000            mov REG[0xd0],>__r0
 023B 52F9              mov A,[X-7]
 023D 5300              mov [__r1],A
 023F 52F8              mov A,[X-8]
 0241 60D4              mov REG[0xd4],A
 0243 3E00              mvi A,[__r1]
 0245 08                push A
 0246 9E4A              xcall _SendByte
 0248 38FF              add SP,-1
 024A                   .dbline 222
 024A           ;               if(ack==0)
 024A 62D000            mov REG[0xd0],>_ack
 024D 3C0000            cmp [_ack],0
 0250 B00A              jnz L39
 0252                   .dbline 224
 0252           ;               {
 0252           ;                       Stop_I2c();
 0252                   .dbline 224
 0252 9E15              xcall _Stop_I2c
 0254                   .dbline 225
 0254           ;                       return(0);
 0254 62D000            mov REG[0xd0],>__r0
 0257 5000              mov A,0
 0259 8015              xjmp L30
 025B           L39:
 025B                   .dbline 227
 025B           ;               }
 025B           ;               s++;
 025B 77F9              inc [X-7]
 025D 0FF800            adc [X-8],0
 0260                   .dbline 228
 0260           ;       }
 0260           L36:
 0260                   .dbline 219
 0260 7700              inc [X+0]
 0262           L38:
 0262                   .dbline 219
 0262 5200              mov A,[X+0]
 0264 3BF7              cmp A,[X-9]
 0266 CFD1              jc L35
 0268           X4:
 0268                   .dbline 229
 0268           ;       Stop_I2c();                 //��������  
 0268 9DFF              xcall _Stop_I2c
 026A                   .dbline 230
 026A           ;       return(1);
 026A 62D000            mov REG[0xd0],>__r0
 026D 5001              mov A,1
 026F                   .dbline -2
 026F           L30:
 026F 38FE              add SP,-2
 0271 20                pop X
 0272                   .dbline 0 ; func end
 0272 7F                ret
 0273                   .dbsym l Tmp 1 c
 0273                   .dbsym l i 0 c
 0273                   .dbsym l no -9 c
 0273                   .dbsym l s -8 pc
 0273                   .dbsym l suba -6 i
 0273                   .dbsym l sla -4 c
 0273                   .dbend
 0273                   .dbfunc e IRcvByte _IRcvByte fc
 0273           ;              c -> X-6
 0273           ;            sla -> X-4
 0273           _IRcvByte::
 0273                   .dbline -1
 0273 10                push X
 0274 4F                mov X,SP
 0275                   .dbline 241
 0275           ; }
 0275           ; //******************************************************************
 0275           ; //                    �����ӵ�ַ�������ֽ����ݺ���               
 0275           ; //����ԭ��: bit  IRcvByte(uchar sla,ucahr *c);  
 0275           ; //����:     ��������ߵ����͵�ַ�������ݣ��������ߵ�ȫ����,��������
 0275           ; //          ַsla������ֵ��c.
 0275           ; //           �������1��ʾ�����ɹ��������������
 0275           ; //ע�⣺    ʹ��ǰ�����ѽ������ߡ�
 0275           ; //******************************************************************* 
 0275           ; uchar IRcvByte(uchar sla,uchar *c)
 0275           ; {
 0275                   .dbline 242
 0275           ;       Start_I2c();                //������� 
 0275 9DC6              xcall _Start_I2c
 0277                   .dbline 243
 0277           ;       SendByte(sla+1);           //����������ַ 
 0277 62D000            mov REG[0xd0],>__r0
 027A 52FC              mov A,[X-4]
 027C 0101              add A,1
 027E 08                push A
 027F 9E11              xcall _SendByte
 0281 38FF              add SP,-1
 0283                   .dbline 244
 0283           ;       if(ack==0)
 0283 62D000            mov REG[0xd0],>_ack
 0286 3C0000            cmp [_ack],0
 0289 B00A              jnz L42
 028B                   .dbline 246
 028B           ;       {
 028B           ;               Stop_I2c();
 028B                   .dbline 246
 028B 9DDC              xcall _Stop_I2c
 028D                   .dbline 247
 028D           ;               return(0);
 028D 62D000            mov REG[0xd0],>__r0
 0290 5000              mov A,0
 0292 8022              xjmp L41
 0294           L42:
 0294                   .dbline 249
 0294           ;       }
 0294           ;       *c=RcvByte();               //��ȡ���� 
 0294 9E92              xcall _RcvByte
 0296 62D000            mov REG[0xd0],>__r0
 0299 5300              mov [__r0],A
 029B 52FB              mov A,[X-5]
 029D 5300              mov [__r3],A
 029F 52FA              mov A,[X-6]
 02A1 60D5              mov REG[0xd5],A
 02A3 5100              mov A,[__r0]
 02A5 3F00              mvi [__r3],A
 02A7                   .dbline 250
 02A7           ;       Ack_I2c(1);                 //���ͷǾʹ�λ 
 02A7 5001              mov A,1
 02A9 08                push A
 02AA 9ED7              xcall _Ack_I2c
 02AC 38FF              add SP,-1
 02AE                   .dbline 251
 02AE           ;       Stop_I2c();                 //��������  
 02AE 9DB9              xcall _Stop_I2c
 02B0                   .dbline 252
 02B0           ;       return(1);
 02B0 62D000            mov REG[0xd0],>__r0
 02B3 5001              mov A,1
 02B5                   .dbline -2
 02B5           L41:
 02B5 20                pop X
 02B6                   .dbline 0 ; func end
 02B6 7F                ret
 02B7                   .dbsym l c -6 pc
 02B7                   .dbsym l sla -4 c
 02B7                   .dbend
 02B7                   .dbfunc e IRcvStr _IRcvStr fc
 02B7           ;            Tmp -> X+1
 02B7           ;              i -> X+0
 02B7           ;             no -> X-9
 02B7           ;              s -> X-8
 02B7           ;           suba -> X-6
 02B7           ;            sla -> X-4
 02B7           _IRcvStr::
 02B7                   .dbline -1
 02B7 10                push X
 02B8 4F                mov X,SP
 02B9 3802              add SP,2
 02BB                   .dbline 263
 02BB           ; }
 02BB           ; //******************************************************************
 02BB           ; //                    �����ӵ�ַ������ȡ���ֽ����ݺ���               
 02BB           ; //����ԭ��: bit  ISendStr(uchar sla,uchar suba,ucahr *s,uchar no);  
 02BB           ; //����:     ��������ߵ����͵�ַ���ӵ�ַ,�����ݣ��������ߵ�ȫ����,������
 02BB           ; //          ��ַsla���ӵ�ַsuba�����������ݷ���sָ��Ĵ洢������no���ֽڡ�
 02BB           ; //           �������1��ʾ�����ɹ��������������
 02BB           ; //ע�⣺    ʹ��ǰ�����ѽ������ߡ�
 02BB           ; //******************************************************************* 
 02BB           ; uchar IRcvStr(uchar sla,uint suba,uchar *s,uchar no)
 02BB           ; {
 02BB                   .dbline 266
 02BB           ;       uchar i;
 02BB           ;       uchar Tmp;
 02BB           ;       Start_I2c();               //������� 
 02BB 9D80              xcall _Start_I2c
 02BD                   .dbline 267
 02BD           ;       SendByte(sla);            //����������ַ 
 02BD 52FC              mov A,[X-4]
 02BF 08                push A
 02C0 9DD0              xcall _SendByte
 02C2 38FF              add SP,-1
 02C4                   .dbline 268
 02C4           ;       if(ack==0)
 02C4 62D000            mov REG[0xd0],>_ack
 02C7 3C0000            cmp [_ack],0
 02CA B00A              jnz L45
 02CC                   .dbline 270
 02CC           ;       {
 02CC           ;               Stop_I2c();
 02CC                   .dbline 270
 02CC 9D9B              xcall _Stop_I2c
 02CE                   .dbline 271
 02CE           ;               return(0);
 02CE 62D000            mov REG[0xd0],>__r0
 02D1 5000              mov A,0
 02D3 8095              xjmp L44
 02D5           L45:
 02D5                   .dbline 273
 02D5           ;       }
 02D5           ;       Tmp = suba & 0xff;
 02D5 62D000            mov REG[0xd0],>__r0
 02D8 52FB              mov A,[X-5]
 02DA 5401              mov [X+1],A
 02DC                   .dbline 274
 02DC           ;       SendByte(Tmp);            //���������ӵ�ַ 
 02DC 5201              mov A,[X+1]
 02DE 08                push A
 02DF 9DB1              xcall _SendByte
 02E1 38FF              add SP,-1
 02E3                   .dbline 275
 02E3           ;       if(ack==0)
 02E3 62D000            mov REG[0xd0],>_ack
 02E6 3C0000            cmp [_ack],0
 02E9 B00A              jnz L47
 02EB                   .dbline 277
 02EB           ;       {
 02EB           ;               Stop_I2c();
 02EB                   .dbline 277
 02EB 9D7C              xcall _Stop_I2c
 02ED                   .dbline 278
 02ED           ;               return(0);
 02ED 62D000            mov REG[0xd0],>__r0
 02F0 5000              mov A,0
 02F2 8076              xjmp L44
 02F4           L47:
 02F4                   .dbline 281
 02F4           ;       }
 02F4           ;       
 02F4           ;       Start_I2c();
 02F4 9D47              xcall _Start_I2c
 02F6                   .dbline 282
 02F6           ;       SendByte(sla+1);
 02F6 62D000            mov REG[0xd0],>__r0
 02F9 52FC              mov A,[X-4]
 02FB 0101              add A,1
 02FD 08                push A
 02FE 9D92              xcall _SendByte
 0300 38FF              add SP,-1
 0302                   .dbline 283
 0302           ;       if(ack==0)
 0302 62D000            mov REG[0xd0],>_ack
 0305 3C0000            cmp [_ack],0
 0308 B00A              jnz L49
 030A                   .dbline 285
 030A           ;       {
 030A           ;               Stop_I2c();
 030A                   .dbline 285
 030A 9D5D              xcall _Stop_I2c
 030C                   .dbline 286
 030C           ;               return(0);
 030C 62D000            mov REG[0xd0],>__r0
 030F 5000              mov A,0
 0311 8057              xjmp L44
 0313           L49:
 0313                   .dbline 288
 0313           ;       }
 0313           ;       for(i=0;i<no-1;i++)
 0313 560000            mov [X+0],0
 0316 8022              xjmp L54
 0318           L51:
 0318                   .dbline 289
 0318           ;       {   
 0318                   .dbline 290
 0318           ;               *s=RcvByte();               //�������� 
 0318 9E0E              xcall _RcvByte
 031A 62D000            mov REG[0xd0],>__r0
 031D 5300              mov [__r0],A
 031F 52F9              mov A,[X-7]
 0321 5300              mov [__r3],A
 0323 52F8              mov A,[X-8]
 0325 60D5              mov REG[0xd5],A
 0327 5100              mov A,[__r0]
 0329 3F00              mvi [__r3],A
 032B                   .dbline 291
 032B           ;               Ack_I2c(0);                //���;ʹ�λ   
 032B 5000              mov A,0
 032D 08                push A
 032E 9E53              xcall _Ack_I2c
 0330 38FF              add SP,-1
 0332                   .dbline 292
 0332           ;               s++;
 0332 77F9              inc [X-7]
 0334 0FF800            adc [X-8],0
 0337                   .dbline 293
 0337           ;       } 
 0337           L52:
 0337                   .dbline 288
 0337 7700              inc [X+0]
 0339           L54:
 0339                   .dbline 288
 0339 62D000            mov REG[0xd0],>__r0
 033C 52F7              mov A,[X-9]
 033E 1101              sub A,1
 0340 5300              mov [__r0],A
 0342 5200              mov A,[X+0]
 0344 3A00              cmp A,[__r0]
 0346 CFD1              jc L51
 0348           X5:
 0348                   .dbline 294
 0348           ;       *s=RcvByte();
 0348 9DDE              xcall _RcvByte
 034A 62D000            mov REG[0xd0],>__r0
 034D 5300              mov [__r0],A
 034F 52F9              mov A,[X-7]
 0351 5300              mov [__r3],A
 0353 52F8              mov A,[X-8]
 0355 60D5              mov REG[0xd5],A
 0357 5100              mov A,[__r0]
 0359 3F00              mvi [__r3],A
 035B                   .dbline 295
 035B           ;       Ack_I2c(1);                 //���ͷ�Ӧλ 
 035B 5001              mov A,1
 035D 08                push A
 035E 9E23              xcall _Ack_I2c
 0360 38FF              add SP,-1
 0362                   .dbline 296
 0362           ;       Stop_I2c();                    //��������  
 0362 9D05              xcall _Stop_I2c
 0364                   .dbline 297
 0364           ;       return(1);
 0364 62D000            mov REG[0xd0],>__r0
 0367 5001              mov A,1
 0369                   .dbline -2
 0369           L44:
 0369 38FE              add SP,-2
 036B 20                pop X
 036C                   .dbline 0 ; func end
 036C 7F                ret
 036D                   .dbsym l Tmp 1 c
 036D                   .dbsym l i 0 c
 036D                   .dbsym l no -9 c
 036D                   .dbsym l s -8 pc
 036D                   .dbsym l suba -6 i
 036D                   .dbsym l sla -4 c
 036D                   .dbend
 036D                   .dbfunc e IRcvBytes _IRcvBytes fc
 036D           ;              i -> X+0
 036D           ;             no -> X-7
 036D           ;              s -> X-6
 036D           ;            sla -> X-4
 036D           _IRcvBytes::
 036D                   .dbline -1
 036D 10                push X
 036E 4F                mov X,SP
 036F 3801              add SP,1
 0371                   .dbline 301
 0371           ; }
 0371           ; 
 0371           ; uchar IRcvBytes(uchar sla,uchar *s,uchar no)
 0371           ; {
 0371                   .dbline 304
 0371           ;       uchar i;
 0371           ; 
 0371           ;       Start_I2c();
 0371 9CCA              xcall _Start_I2c
 0373                   .dbline 305
 0373           ;       SendByte(sla+1);
 0373 62D000            mov REG[0xd0],>__r0
 0376 52FC              mov A,[X-4]
 0378 0101              add A,1
 037A 08                push A
 037B 9D15              xcall _SendByte
 037D 38FF              add SP,-1
 037F                   .dbline 306
 037F           ;       if(ack==0)
 037F 62D000            mov REG[0xd0],>_ack
 0382 3C0000            cmp [_ack],0
 0385 B00A              jnz L56
 0387                   .dbline 308
 0387           ;       {
 0387           ;               Stop_I2c();
 0387                   .dbline 308
 0387 9CE0              xcall _Stop_I2c
 0389                   .dbline 309
 0389           ;               return(0);
 0389 62D000            mov REG[0xd0],>__r0
 038C 5000              mov A,0
 038E 8057              xjmp L55
 0390           L56:
 0390                   .dbline 311
 0390           ;       }
 0390           ;       for(i=0;i<no-1;i++)
 0390 560000            mov [X+0],0
 0393 8022              xjmp L61
 0395           L58:
 0395                   .dbline 312
 0395           ;       {   
 0395                   .dbline 313
 0395           ;               *s=RcvByte();               //�������� 
 0395 9D91              xcall _RcvByte
 0397 62D000            mov REG[0xd0],>__r0
 039A 5300              mov [__r0],A
 039C 52FB              mov A,[X-5]
 039E 5300              mov [__r3],A
 03A0 52FA              mov A,[X-6]
 03A2 60D5              mov REG[0xd5],A
 03A4 5100              mov A,[__r0]
 03A6 3F00              mvi [__r3],A
 03A8                   .dbline 314
 03A8           ;               Ack_I2c(0);                //���;ʹ�λ   
 03A8 5000              mov A,0
 03AA 08                push A
 03AB 9DD6              xcall _Ack_I2c
 03AD 38FF              add SP,-1
 03AF                   .dbline 315
 03AF           ;               s++;
 03AF 77FB              inc [X-5]
 03B1 0FFA00            adc [X-6],0
 03B4                   .dbline 316
 03B4           ;       } 
 03B4           L59:
 03B4                   .dbline 311
 03B4 7700              inc [X+0]
 03B6           L61:
 03B6                   .dbline 311
 03B6 62D000            mov REG[0xd0],>__r0
 03B9 52F9              mov A,[X-7]
 03BB 1101              sub A,1
 03BD 5300              mov [__r0],A
 03BF 5200              mov A,[X+0]
 03C1 3A00              cmp A,[__r0]
 03C3 CFD1              jc L58
 03C5           X6:
 03C5                   .dbline 317
 03C5           ;       *s=RcvByte();
 03C5 9D61              xcall _RcvByte
 03C7 62D000            mov REG[0xd0],>__r0
 03CA 5300              mov [__r0],A
 03CC 52FB              mov A,[X-5]
 03CE 5300              mov [__r3],A
 03D0 52FA              mov A,[X-6]
 03D2 60D5              mov REG[0xd5],A
 03D4 5100              mov A,[__r0]
 03D6 3F00              mvi [__r3],A
 03D8                   .dbline 318
 03D8           ;       Ack_I2c(1);                 //���ͷ�Ӧλ 
 03D8 5001              mov A,1
 03DA 08                push A
 03DB 9DA6              xcall _Ack_I2c
 03DD 38FF              add SP,-1
 03DF                   .dbline 319
 03DF           ;       Stop_I2c();                    //��������  
 03DF 9C88              xcall _Stop_I2c
 03E1                   .dbline 320
 03E1           ;       return(1);
 03E1 62D000            mov REG[0xd0],>__r0
 03E4 5001              mov A,1
 03E6                   .dbline -2
 03E6           L55:
 03E6 38FF              add SP,-1
 03E8 20                pop X
 03E9                   .dbline 0 ; func end
 03E9 7F                ret
 03EA                   .dbsym l i 0 c
 03EA                   .dbsym l no -7 c
 03EA                   .dbsym l s -6 pc
 03EA                   .dbsym l sla -4 c
 03EA                   .dbend
                        .area data(ram, con, rel)
 0000                   .dbfile C:\chendong\MYDOCU~1\code\LCD_DI~1\LCD_DI~1\LCD_DI~1\software_iic.c
 0000           _eepromtype::
 0000 00                .byte 0
 0001                   .dbfile C:\chendong\MYDOCU~1\code\LCD_DI~1\LCD_DI~1\LCD_DI~1\software_IIC.H
 0001                   .dbsym e eepromtype _eepromtype c
                        .area data(ram, con, rel)
 0000                   .dbfile C:\chendong\MYDOCU~1\code\LCD_DI~1\LCD_DI~1\LCD_DI~1\software_IIC.H
 0000           _ack::
 0000 00                .byte 0
 0001                   .dbsym e ack _ack c
